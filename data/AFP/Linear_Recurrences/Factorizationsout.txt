Loading theory "HOL-Library.Function_Algebras" (required by "Draft.FactorizationsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.FactorizationsTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "HOL-Library.Stream" (required by "Draft.FactorizationsTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Linear_Recurrences_Misc" (required by "Draft.FactorizationsTemplates" via "Draft.Factorizations")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.127s elapsed time, 0.517s cpu time, 0.064s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.FactorizationsTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
### theory "Draft.Linear_Recurrences_Misc"
### 0.271s elapsed time, 1.092s cpu time, 0.064s GC time
Loading theory "Draft.Factorizations" (required by "Draft.FactorizationsTemplates")
consts
  shift :: "'a list => 'a stream => 'a stream"
### theory "Draft.Factorizations"
### 0.155s elapsed time, 0.594s cpu time, 0.093s GC time
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.860s elapsed time, 2.987s cpu time, 0.294s GC time
### theory "HOL-Library.BigO"
### 0.775s elapsed time, 2.598s cpu time, 0.324s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.869s elapsed time, 4.460s cpu time, 0.919s GC time
Loading theory "Draft.Templates" (required by "Draft.FactorizationsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.066s elapsed time, 0.089s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.FactorizationsTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.521s elapsed time, 0.571s cpu time, 0.059s GC time
Loading theory "Draft.FactorizationsTemplates"
val templateLemmas =
   [("Factorizations.complex_factorization_exists",
     "EX fctrs. is_factorization_of fctrs ?p",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Factorizations.poly_prod_list",
     "poly (prod_list ?ps) ?x = (PROD p<-?ps. poly p ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Factorizations.complex_alt_factorization_exists",
     "coeff ?p 0 ~= 0 ==> EX fctrs. is_alt_factorization_of fctrs ?p",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 4, template_var 0),
                template_hole 3),
              template_hole 2)
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Factorizations.interp_alt_factorization_reflect",
     "(0::?'a) ~: fst ` set (snd ?fctrs) ==>
      reflect_poly (interp_alt_factorization ?fctrs) =
      interp_factorization ?fctrs",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_app
                   (template_app (template_hole 7, template_hole 6),
                    template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 0))))
                )
            )],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Factorizations.interp_factorization_reflect",
     "(0::?'a) ~: fst ` set (snd ?fctrs) ==>
      reflect_poly (interp_factorization ?fctrs) =
      interp_alt_factorization ?fctrs",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_app
                   (template_app (template_hole 7, template_hole 6),
                    template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 0))))
                )
            )],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Factorizations.reflect_factorization'",
     "[| coeff ?p 0 ~= (0::?'a); is_alt_factorization_of ?fctrs ?p |]
      ==> is_factorization_of ?fctrs (reflect_poly ?p)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_hole 4),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Factorizations.reflect_factorization",
     "[| coeff ?p 0 ~= (0::?'a); is_factorization_of ?fctrs ?p |]
      ==> is_alt_factorization_of ?fctrs (reflect_poly ?p)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_hole 4),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Factorizations.coeff_0_interp_factorization",
     "(coeff (interp_factorization ?fctrs) 0 = (0::?'a)) =
      (fst ?fctrs = (0::?'a) | (0::?'a) : fst ` set (snd ?fctrs))",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 10,
             template_app (template_hole 9, template_var 0)),
           template_hole 8),
         template_hole 7),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 11,
                   template_app (template_hole 5, template_var 0)),
                 template_hole 7)),
             template_app
              (template_app (template_hole 4, template_hole 7),
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)))))
           ))),
    ("Factorizations.zero_in_factorization_iff",
     "is_factorization_of ?fctrs ?p ==>
      (coeff ?p 0 = (0::?'a)) =
      (?p = 0 | (0::?'a) : fst ` set (snd ?fctrs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 1),
              template_var 0)
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 10, template_var 0),
             template_hole 9),
           template_hole 8),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 0),
                   template_hole 5)),
               template_app
                (template_app (template_hole 4, template_hole 8),
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 1)))))
             )))),
    ("Factorizations.is_factorization_of_roots",
     "[| is_factorization_of (?a, ?fctrs) ?p; ?p ~= 0 |]
      ==> set (map fst ?fctrs) = {x. poly ?p x = (0::?'a)}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 8))],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_var 1)),
         template_app (template_hole 3, t_empty)))),
    ("Factorizations.is_factorization_of_order",
     "[| ?p ~= 0; is_factorization_of (?a, ?fctrs) ?p;
         (?c, ?n) : set ?fctrs |]
      ==> order ?c ?p = Suc ?n",
     template_implication
      ([template_negation
         (template_equation (template_var 4, template_hole 8)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)),
              template_app (template_hole 3, template_var 2))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 4),
         template_app (template_hole 0, template_var 0)))),
    ("Factorizations.order_prod",
     "[| !!x. x : ?A ==> ?f x ~= 0;
         !!x y. [| x : ?A; y : ?A; x ~= y |] ==> coprime (?f x) (?f y) |]
      ==> order ?c (prod ?f ?A) = (SUM x:?A. order ?c (?f x))",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2)),
         template_app
          (template_app (template_hole 0, t_empty), template_var 2))))]:
   (string * thm * template) list
### theory "Draft.FactorizationsTemplates"
### 0.561s elapsed time, 0.728s cpu time, 0.083s GC time
val it = (): unit
