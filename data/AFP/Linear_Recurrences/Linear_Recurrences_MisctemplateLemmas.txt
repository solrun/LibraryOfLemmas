   [("Linear_Recurrences_Misc.unit_factor_field", "unit_factor ?x = ?x",
     template_equation
      (template_app (template_hole 0, template_var 0), template_var 0)),
    ("Linear_Recurrences_Misc.zip_with_Pair",
     "zip_with Pair ?xs ?ys = zip ?xs ?ys",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Linear_Recurrences_Misc.normalize_field",
     "normalize ?x = (if ?x = (0::?'a) then 0::?'a else (1::?'a))",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_hole 1)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Linear_Recurrences_Misc.length_zip_with",
     "length (zip_with ?f ?xs ?ys) = min (length ?xs) (length ?ys)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Linear_Recurrences_Misc.zip_with_swap",
     "zip_with (%x y. ?f y x) ?xs ?ys = zip_with ?f ?ys ?xs",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, t_empty), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("Linear_Recurrences_Misc.zip_with_altdef",
     "zip_with ?f ?xs ?ys = map2 ?f ?xs ?ys",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Linear_Recurrences_Misc.drop_zip_with",
     "drop ?n (zip_with ?f ?xs ?ys) =
      zip_with ?f (drop ?n ?xs) (drop ?n ?ys)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 0)))),
    ("Linear_Recurrences_Misc.take_zip_with",
     "take ?n (zip_with ?f ?xs ?ys) =
      zip_with ?f (take ?n ?xs) (take ?n ?ys)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 0)))),
    ("Linear_Recurrences_Misc.zip_with_map_right",
     "zip_with ?f ?xs (map ?g ?ys) = zip_with (%x y. ?f x (?g y)) ?xs ?ys",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, t_empty), template_var 2),
         template_var 0))),
    ("Linear_Recurrences_Misc.zip_with_map_left",
     "zip_with ?f (map ?g ?xs) ?ys = zip_with (%x. ?f (?g x)) ?xs ?ys",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, t_empty), template_var 1),
         template_var 0))),
    ("Linear_Recurrences_Misc.map_zip_with",
     "map ?f (zip_with ?g ?xs ?ys) = zip_with (%x y. ?f (?g x y)) ?xs ?ys",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, t_empty), template_var 1),
         template_var 0))),
    ("Linear_Recurrences_Misc.set_zip_with",
     "set (zip_with ?f ?xs ?ys) = (%(x, y). ?f x y) ` set (zip ?xs ?ys)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, t_empty)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Linear_Recurrences_Misc.coprime_linear_poly",
     "?c ~= ?c' ==> coprime [:?c, 1::?'a:] [:?c', 1::?'a:]",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_hole 0))),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_hole 0)))
           ))),
    ("Linear_Recurrences_Misc.card_poly_roots_bound",
     "?p ~= 0 ==> card {x. poly ?p x = (0::?'a)} <= degree ?p",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 7))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 5, template_app (template_hole 4, t_empty)),
         template_app (template_hole 0, template_var 0)))),
    ("Linear_Recurrences_Misc.zip_with_map",
     "zip_with ?f (map ?g ?xs) (map ?h ?ys) =
      zip_with (%x y. ?f (?g x) (?h y)) ?xs ?ys",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, t_empty), template_var 2),
         template_var 0))),
    ("Linear_Recurrences_Misc.zip_altdef",
     "zip ?xs ?ys =
      map (%i. (?xs ! i, ?ys ! i)) [0..<min (length ?xs) (length ?ys)]",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 8, t_empty),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0)))))),
    ("Linear_Recurrences_Misc.zip_with_altdef'",
     "zip_with ?f ?xs ?ys =
      map (%i. ?f (?xs ! i) (?ys ! i)) [0..<min (length ?xs) (length ?ys)]",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 8, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 7, t_empty),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0)))))),
    ("Linear_Recurrences_Misc.complex_poly_decompose",
     "smult (lead_coeff ?p)
       (PROD z:{z. poly ?p z = 0}. [:- z, 1:] ^ order z ?p) =
      ?p",
     template_equation
      (template_app
        (template_app
          (template_hole 13,
           template_app
            (template_app (template_hole 12, template_var 0),
             template_app (template_hole 11, template_var 0))),
         template_app
          (template_app (template_hole 10, t_empty),
           template_app (template_hole 3, t_empty))),
       template_var 0)),
    ("Linear_Recurrences_Misc.zip_with_nth",
     "[| ?n < length ?xs; ?n < length ?ys |]
      ==> zip_with ?f ?xs ?ys ! ?n = ?f (?xs ! ?n) (?ys ! ?n)",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 6, template_var 2)),
        template_inequation
         (less_than, template_var 3,
          template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 2),
               template_var 1)),
           template_var 3),
         template_app
          (template_app
            (template_var 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 3)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 3))))),
    ("Linear_Recurrences_Misc.coprime_linear_poly'",
     "[| ?c ~= ?c'; ?c ~= (0::?'a); ?c' ~= (0::?'a) |]
      ==> coprime [:1::?'a, ?c:] [:1::?'a, ?c':]",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0)),
        template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 0))),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 0)))
           ))),
    ("Linear_Recurrences_Misc.poly_eqI_degree",
     "[| !!x. x : ?A ==> poly ?p x = poly ?q x; degree ?p < card ?A;
         degree ?q < card ?A |]
      ==> ?p = ?q",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_inequation
         (less_than, template_app (template_hole 2, template_var 1),
          template_app (template_hole 1, template_var 2)),
        template_inequation
         (less_than, template_app (template_hole 2, template_var 0),
          template_app (template_hole 1, template_var 2))],
       template_equation (template_var 1, template_var 0))),
    ("Linear_Recurrences_Misc.poly_root_order_induct",
     "[| ?P 0; !!p. (!!x. poly p x ~= (0::?'a)) ==> ?P p;
         !!p x n.
            [| 0 < n; poly p x ~= (0::?'a); ?P p |]
            ==> ?P ([:- x, 1::?'a:] ^ n * p) |]
      ==> ?P ?p",
     template_implication
      ([template_predicate
         (template_app (template_var 1, template_hole 14)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate
        (template_app (template_var 1, template_var 0))))]
