Loading theory "Draft.Poly_Connection" (required by "Draft.MPoly_DivideTemplates" via "Draft.MPoly_Divide")
Loading theory "Draft.Templates" (required by "Draft.MPoly_DivideTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.069s elapsed time, 0.177s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.MPoly_DivideTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.521s elapsed time, 1.043s cpu time, 0.048s GC time
### Ambiguous input (line 246 of "$AFP/Factor_Algebraic_Polynomial/Poly_Connection.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" mpoly_to_mpoly_poly)
###       ("_cargs" ("_position" x) ("_position" p)))
###     ("\<^const>Series.suminf_binder" ("_position" m)
###       ("_applC" ("_position" Polynomial.monom)
###         ("_cargs"
###           ("_applC" ("_position" MPoly_Type.monom)
###             ("_cargs"
###               ("_applC" ("_position" remove_key)
###                 ("_cargs" ("_position" x) ("_position" m)))
###               ("_applC" ("_position" MPoly_Type.coeff)
###                 ("_cargs" ("_position" p) ("_position" m)))))
###           ("_applC" ("_position" lookup)
###             ("_cargs" ("_position" m) ("_position" x))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" mpoly_to_mpoly_poly)
###       ("_cargs" ("_position" x) ("_position" p)))
###     ("_Sum_any" ("_position" m)
###       ("_applC" ("_position" Polynomial.monom)
###         ("_cargs"
###           ("_applC" ("_position" MPoly_Type.monom)
###             ("_cargs"
###               ("_applC" ("_position" remove_key)
###                 ("_cargs" ("_position" x) ("_position" m)))
###               ("_applC" ("_position" MPoly_Type.coeff)
###                 ("_cargs" ("_position" p) ("_position" m)))))
###           ("_applC" ("_position" lookup)
###             ("_cargs" ("_position" m) ("_position" x))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale transfer_mpoly_to_mpoly_poly
  fixes x :: "nat"
### theory "Draft.Poly_Connection"
### 1.244s elapsed time, 1.907s cpu time, 0.122s GC time
Loading theory "Draft.MPoly_Divide" (required by "Draft.MPoly_DivideTemplates")
instantiation
  mpoly :: (comm_semiring_1) divide
  divide_mpoly == divide :: 'a mpoly => 'a mpoly => 'a mpoly
instantiation
  mpoly :: ({idom,normalization_semidom}) normalization_semidom
  normalize_mpoly == normalize :: 'a mpoly => 'a mpoly
  unit_factor_mpoly == unit_factor :: 'a mpoly => 'a mpoly
### theory "Draft.MPoly_Divide"
### 0.260s elapsed time, 0.313s cpu time, 0.091s GC time
Loading theory "Draft.MPoly_DivideTemplates"
val templateLemmas =
   [("MPoly_Divide.normalize_mpoly_Const",
     "normalize (Const ?c) = Const (normalize ?c)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("MPoly_Divide.unit_factor_mpoly_Const",
     "unit_factor (Const ?c) = Const (unit_factor ?c)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("MPoly_Divide.divide_mpoly_code",
     "?p div ?q =
      (case divide_option_mpoly ?p ?q of None => 0 | Some r => r)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), t_empty),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("MPoly_Divide.poly_lead_coeff_dvd_lead_coeff",
     "?p dvd ?q ==> Polynomial.lead_coeff ?p dvd Polynomial.lead_coeff ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app (template_hole 0, template_var 1))),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("MPoly_Divide.divide_option_mpoly_poly",
     "?p div? ?q =
      (if ?p = 0 then Some 0
       else if ?q = 0 then None
            else let dp = Polynomial.degree ?p; dq = Polynomial.degree ?q
                 in if dp < dq then None
                    else case Polynomial.lead_coeff ?p div?
                              Polynomial.lead_coeff ?q of
                         None => None
                         | Some c =>
                             case (?p -
                                   Polynomial.monom c (dp - dq) * ?q) div?
                                  ?q of
                             None => None
                             | Some r =>
                                 Some (Polynomial.monom c (dp - dq) + r))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 16,
                 template_app
                  (template_app (template_hole 15, template_var 1),
                   template_hole 14)),
               template_app (template_hole 13, template_hole 14)),
             template_app
              (template_app
                (template_app
                  (template_hole 16,
                   template_app
                    (template_app (template_hole 15, template_var 0),
                     template_hole 14)),
                 template_hole 12),
               template_app
                (template_app
                  (template_hole 11,
                   template_app (template_hole 10, template_var 1)),
                 t_empty)))
           ))),
    ("MPoly_Divide.divide_option_mpoly_poly_code",
     "divide_option_mpoly_poly ?p ?q =
      (if ?p = 0 then Some 0
       else if ?q = 0 then None
            else let dp = Polynomial.degree ?p; dq = Polynomial.degree ?q
                 in if dp < dq then None
                    else case divide_option_mpoly (Polynomial.lead_coeff ?p)
                               (Polynomial.lead_coeff ?q) of
                         None => None
                         | Some c =>
                             case divide_option_mpoly_poly
                                   (?p - Polynomial.monom c (dp - dq) * ?q)
                                   ?q of
                             None => None
                             | Some r =>
                                 Some (Polynomial.monom c (dp - dq) + r))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 16,
                 template_app
                  (template_app (template_hole 15, template_var 1),
                   template_hole 14)),
               template_app (template_hole 13, template_hole 14)),
             template_app
              (template_app
                (template_app
                  (template_hole 16,
                   template_app
                    (template_app (template_hole 15, template_var 0),
                     template_hole 14)),
                 template_hole 12),
               template_app
                (template_app
                  (template_hole 11,
                   template_app (template_hole 10, template_var 1)),
                 t_empty)))
           ))),
    ("MPoly_Divide.divide_option_mpoly",
     "?p div? ?q =
      (let V = vars ?p Un vars ?q
       in if V = {}
          then let a = MPoly_Type.coeff ?p 0; b = MPoly_Type.coeff ?q 0;
                   c = a div b
               in if b * c = a then Some (Const c) else None
          else let x = Max V; p' = mpoly_to_mpoly_poly x ?p;
                   q' = mpoly_to_mpoly_poly x ?q
               in case p' div? q' of None => None
                  | Some r => Some (poly r (Var x)))",
     template_equation
      (template_app
        (template_app (template_hole 23, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 22,
           template_app
            (template_app
              (template_hole 21,
               template_app (template_hole 20, template_var 1)),
             template_app (template_hole 20, template_var 0))),
         t_empty))),
    ("MPoly_Divide.divide_option_mpoly_code",
     "divide_option_mpoly ?p ?q =
      (let V = vars ?p Un vars ?q
       in if V = {}
          then let a = MPoly_Type.coeff ?p 0; b = MPoly_Type.coeff ?q 0;
                   c = a div b
               in if b * c = a then Some (Const c) else None
          else let x = Max V; p' = mpoly_to_mpoly_poly x ?p;
                   q' = mpoly_to_mpoly_poly x ?q
               in case divide_option_mpoly_poly p' q' of None => None
                  | Some r => Some (poly r (Var x)))",
     template_equation
      (template_app
        (template_app (template_hole 23, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 22,
           template_app
            (template_app
              (template_hole 21,
               template_app (template_hole 20, template_var 1)),
             template_app (template_hole 20, template_var 0))),
         t_empty)))]:
   (string * thm * template) list
### theory "Draft.MPoly_DivideTemplates"
### 0.705s elapsed time, 0.878s cpu time, 0.079s GC time
val it = (): unit
