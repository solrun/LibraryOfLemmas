Loading theory "Draft.MPoly_Container" (required by "Draft.Multivariate_ResultantTemplates" via "Draft.Multivariate_Resultant")
Loading theory "Draft.Poly_Connection" (required by "Draft.Multivariate_ResultantTemplates" via "Draft.Multivariate_Resultant")
Loading theory "Draft.Templates" (required by "Draft.Multivariate_ResultantTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.068s elapsed time, 0.266s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Multivariate_ResultantTemplates")
deriving "ceq" instance for type "Poly_Mapping.poly_mapping" via "="
derived is_ceq_poly_mapping-lemma
use dlist as set_impl for type poly_mapping
registered poly_mapping in class set_impl
use None as trivial implementation of ccompare for type poly_mapping
registered poly_mapping in class ccompare
### theory "Draft.MPoly_Container"
### 0.568s elapsed time, 1.710s cpu time, 0.180s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.580s elapsed time, 1.604s cpu time, 0.180s GC time
### Ambiguous input (line 246 of "$AFP/Factor_Algebraic_Polynomial/Poly_Connection.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" mpoly_to_mpoly_poly)
###       ("_cargs" ("_position" x) ("_position" p)))
###     ("\<^const>Series.suminf_binder" ("_position" m)
###       ("_applC" ("_position" Polynomial.monom)
###         ("_cargs"
###           ("_applC" ("_position" MPoly_Type.monom)
###             ("_cargs"
###               ("_applC" ("_position" remove_key)
###                 ("_cargs" ("_position" x) ("_position" m)))
###               ("_applC" ("_position" MPoly_Type.coeff)
###                 ("_cargs" ("_position" p) ("_position" m)))))
###           ("_applC" ("_position" lookup)
###             ("_cargs" ("_position" m) ("_position" x))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" mpoly_to_mpoly_poly)
###       ("_cargs" ("_position" x) ("_position" p)))
###     ("_Sum_any" ("_position" m)
###       ("_applC" ("_position" Polynomial.monom)
###         ("_cargs"
###           ("_applC" ("_position" MPoly_Type.monom)
###             ("_cargs"
###               ("_applC" ("_position" remove_key)
###                 ("_cargs" ("_position" x) ("_position" m)))
###               ("_applC" ("_position" MPoly_Type.coeff)
###                 ("_cargs" ("_position" p) ("_position" m)))))
###           ("_applC" ("_position" lookup)
###             ("_cargs" ("_position" m) ("_position" x))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale transfer_mpoly_to_mpoly_poly
  fixes x :: "nat"
### theory "Draft.Poly_Connection"
### 1.287s elapsed time, 2.549s cpu time, 0.264s GC time
Loading theory "Draft.MPoly_Divide" (required by "Draft.Multivariate_ResultantTemplates" via "Draft.Multivariate_Resultant" via "Draft.MPoly_Divide_Code")
instantiation
  mpoly :: (comm_semiring_1) divide
  divide_mpoly == divide :: 'a mpoly => 'a mpoly => 'a mpoly
instantiation
  mpoly :: ({idom,normalization_semidom}) normalization_semidom
  normalize_mpoly == normalize :: 'a mpoly => 'a mpoly
  unit_factor_mpoly == unit_factor :: 'a mpoly => 'a mpoly
### theory "Draft.MPoly_Divide"
### 0.250s elapsed time, 0.291s cpu time, 0.075s GC time
Loading theory "Draft.MPoly_Divide_Code" (required by "Draft.Multivariate_ResultantTemplates" via "Draft.Multivariate_Resultant")
Found termination order:
  "(%p. size_list (%p. size (fst p)) (fst (snd p))) <*mlex*> {}"
### theory "Draft.MPoly_Divide_Code"
### 0.537s elapsed time, 0.582s cpu time, 0.076s GC time
Loading theory "Draft.Multivariate_Resultant" (required by "Draft.Multivariate_ResultantTemplates")
"[:MPoly (Pm_fmap (fmap_of_list [(Pm_fmap (fmap_of_list [(1, 2)]), 1)])),
   MPoly (Pm_fmap (fmap_of_list [(Pm_fmap (fmap_of_list [(1, 1)]), 1)])),
   MPoly (Pm_fmap (fmap_of_list [(Pm_fmap (fmap_of_list []), 1)])):]"
  :: "int mpoly poly"
### theory "Draft.Multivariate_Resultant"
### 2.178s elapsed time, 5.985s cpu time, 1.384s GC time
Loading theory "Draft.Multivariate_ResultantTemplates"
"MPoly
  (Pm_fmap
    (fmap_of_list
      [(Pm_fmap (fmap_of_list [(0, 2)]), 1),
       (Pm_fmap (fmap_of_list [(1, 1), (0, 1)]), 1)]))"
  :: "int mpoly"
val templateLemmas =
   [("Multivariate_Resultant.resultant_mpoly_poly_code",
     "resultant_mpoly_poly ?x ?p ?q =
      resultant_impl_basic (mpoly_to_mpoly_poly ?x ?p) (map_poly Const ?q)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Multivariate_Resultant.vars_resultant_mpoly_poly",
     "vars (resultant_mpoly_poly ?x ?p ?q) <= vars ?p - {?x}",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 4, template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_hole 0)))),
    ("Multivariate_Resultant.vars_resultant",
     "vars (resultant ?p ?q)
      <= \<Union> (vars ` (range (coeff ?p) Un range (coeff ?q)))",
     template_inequation
      (less_equals,
       template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_hole 7),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 1)),
                 template_hole 0)),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_hole 0)))))),
    ("Multivariate_Resultant.insertion_resultant_mpoly_poly_zero",
     "?q ~= 0 ==>
      (insertion ?\<alpha> (resultant_mpoly_poly ?x ?p ?q) = (0::?'a)) =
      (resultant (partial_insertion ?\<alpha> ?x ?p) ?q = (0::?'a))",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 7))],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0),
               template_var 3)),
           template_hole 2),
         template_equation
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_var 3),
           template_hole 2)))),
    ("Multivariate_Resultant.det_sylvester_matrix_higher_degree",
     "det (sylvester_mat_sub (degree ?f + ?n) (degree ?g) ?f ?g) =
      det (sylvester_mat_sub (degree ?f) (degree ?g) ?f ?g) *
      (lead_coeff ?g * (- (1::?'a)) ^ degree ?g) ^ ?n",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_var 2)),
                   template_var 1)),
               template_app (template_hole 5, template_var 0)),
             template_var 2),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 8,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_hole 5, template_var 2)),
                   template_app (template_hole 5, template_var 0)),
                 template_var 2),
               template_var 0))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_app (template_hole 5, template_var 0))),
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 1, template_hole 0)),
                 template_app (template_hole 5, template_var 0)))),
           template_var 1)))),
    ("Multivariate_Resultant.insertion_resultant_mpoly_poly",
     "insertion ?\<alpha> (resultant_mpoly_poly ?x ?p ?q) =
      resultant (partial_insertion ?\<alpha> ?x ?p) ?q *
      (lead_coeff ?q * (- (1::?'a)) ^ degree ?q) ^
      (degree (mpoly_to_mpoly_poly ?x ?p) -
       degree (partial_insertion ?\<alpha> ?x ?p))",
     template_equation
      (template_app
        (template_app (template_hole 12, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 11, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_app (template_hole 8, template_var 3),
                   template_var 2),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app (template_hole 6, template_var 0),
                   template_app (template_hole 5, template_var 0))),
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 4, template_hole 3)),
                 template_app (template_hole 5, template_var 0)))),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1))),
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_app (template_hole 8, template_var 3),
                   template_var 2),
                 template_var 1)))))))]:
   (string * thm * template) list
### theory "Draft.Multivariate_ResultantTemplates"
### 1.611s elapsed time, 2.480s cpu time, 0.277s GC time
val it = (): unit
