Loading theory "Draft.Is_Int_To_Int" (required by "Draft.Roots_of_Real_Complex_PolyTemplates" via "Draft.Roots_of_Real_Complex_Poly" via "Draft.Roots_of_Algebraic_Poly_Impl" via "Draft.Roots_of_Algebraic_Poly")
Loading theory "Draft.Roots_via_IA" (required by "Draft.Roots_of_Real_Complex_PolyTemplates" via "Draft.Roots_of_Real_Complex_Poly")
Loading theory "Draft.Templates" (required by "Draft.Roots_of_Real_Complex_PolyTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.MPoly_Container" (required by "Draft.Roots_of_Real_Complex_PolyTemplates" via "Draft.Roots_of_Real_Complex_Poly" via "Draft.Roots_of_Algebraic_Poly_Impl" via "Draft.Roots_of_Algebraic_Poly" via "Draft.Multivariate_Resultant")
### theory "Draft.Is_Int_To_Int"
### 0.068s elapsed time, 0.327s cpu time, 0.000s GC time
Loading theory "Draft.Poly_Connection" (required by "Draft.Roots_of_Real_Complex_PolyTemplates" via "Draft.Roots_of_Real_Complex_Poly" via "Draft.Roots_of_Algebraic_Poly_Impl" via "Draft.Roots_of_Algebraic_Poly" via "Draft.Multivariate_Resultant")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.117s elapsed time, 0.431s cpu time, 0.067s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Roots_of_Real_Complex_PolyTemplates")
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
### Generation of a parametrized correspondence relation failed.
### Reason:  No relator for the type "Polynomial.poly" found.
deriving "ceq" instance for type "Poly_Mapping.poly_mapping" via "="
derived is_ceq_poly_mapping-lemma
use dlist as set_impl for type poly_mapping
registered poly_mapping in class set_impl
use None as trivial implementation of ccompare for type poly_mapping
registered poly_mapping in class ccompare
### theory "Draft.MPoly_Container"
### 0.589s elapsed time, 2.250s cpu time, 0.165s GC time
### theory "Draft.Roots_via_IA"
### 0.603s elapsed time, 2.291s cpu time, 0.165s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.641s elapsed time, 2.188s cpu time, 0.191s GC time
### Ambiguous input (line 246 of "$AFP/Factor_Algebraic_Polynomial/Poly_Connection.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" mpoly_to_mpoly_poly)
###       ("_cargs" ("_position" x) ("_position" p)))
###     ("\<^const>Series.suminf_binder" ("_position" m)
###       ("_applC" ("_position" Polynomial.monom)
###         ("_cargs"
###           ("_applC" ("_position" MPoly_Type.monom)
###             ("_cargs"
###               ("_applC" ("_position" remove_key)
###                 ("_cargs" ("_position" x) ("_position" m)))
###               ("_applC" ("_position" MPoly_Type.coeff)
###                 ("_cargs" ("_position" p) ("_position" m)))))
###           ("_applC" ("_position" lookup)
###             ("_cargs" ("_position" m) ("_position" x))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" mpoly_to_mpoly_poly)
###       ("_cargs" ("_position" x) ("_position" p)))
###     ("_Sum_any" ("_position" m)
###       ("_applC" ("_position" Polynomial.monom)
###         ("_cargs"
###           ("_applC" ("_position" MPoly_Type.monom)
###             ("_cargs"
###               ("_applC" ("_position" remove_key)
###                 ("_cargs" ("_position" x) ("_position" m)))
###               ("_applC" ("_position" MPoly_Type.coeff)
###                 ("_cargs" ("_position" p) ("_position" m)))))
###           ("_applC" ("_position" lookup)
###             ("_cargs" ("_position" m) ("_position" x))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale transfer_mpoly_to_mpoly_poly
  fixes x :: "nat"
### theory "Draft.Poly_Connection"
### 1.324s elapsed time, 2.934s cpu time, 0.273s GC time
Loading theory "Draft.MPoly_Divide" (required by "Draft.Roots_of_Real_Complex_PolyTemplates" via "Draft.Roots_of_Real_Complex_Poly" via "Draft.Roots_of_Algebraic_Poly_Impl" via "Draft.Roots_of_Algebraic_Poly" via "Draft.Multivariate_Resultant" via "Draft.MPoly_Divide_Code")
instantiation
  mpoly :: (comm_semiring_1) divide
  divide_mpoly == divide :: 'a mpoly => 'a mpoly => 'a mpoly
instantiation
  mpoly :: ({idom,normalization_semidom}) normalization_semidom
  normalize_mpoly == normalize :: 'a mpoly => 'a mpoly
  unit_factor_mpoly == unit_factor :: 'a mpoly => 'a mpoly
### theory "Draft.MPoly_Divide"
### 0.252s elapsed time, 0.280s cpu time, 0.058s GC time
Loading theory "Draft.MPoly_Divide_Code" (required by "Draft.Roots_of_Real_Complex_PolyTemplates" via "Draft.Roots_of_Real_Complex_Poly" via "Draft.Roots_of_Algebraic_Poly_Impl" via "Draft.Roots_of_Algebraic_Poly" via "Draft.Multivariate_Resultant")
Found termination order:
  "(%p. size_list (%p. size (fst p)) (fst (snd p))) <*mlex*> {}"
### theory "Draft.MPoly_Divide_Code"
### 0.667s elapsed time, 0.990s cpu time, 0.471s GC time
Loading theory "Draft.Multivariate_Resultant" (required by "Draft.Roots_of_Real_Complex_PolyTemplates" via "Draft.Roots_of_Real_Complex_Poly" via "Draft.Roots_of_Algebraic_Poly_Impl" via "Draft.Roots_of_Algebraic_Poly")
"[:MPoly (Pm_fmap (fmap_of_list [(Pm_fmap (fmap_of_list [(1, 2)]), 1)])),
   MPoly (Pm_fmap (fmap_of_list [(Pm_fmap (fmap_of_list [(1, 1)]), 1)])),
   MPoly (Pm_fmap (fmap_of_list [(Pm_fmap (fmap_of_list []), 1)])):]"
  :: "int mpoly poly"
### theory "Draft.Multivariate_Resultant"
### 1.917s elapsed time, 5.214s cpu time, 0.890s GC time
Loading theory "Draft.Roots_of_Algebraic_Poly" (required by "Draft.Roots_of_Real_Complex_PolyTemplates" via "Draft.Roots_of_Real_Complex_Poly" via "Draft.Roots_of_Algebraic_Poly_Impl")
"MPoly
  (Pm_fmap
    (fmap_of_list
      [(Pm_fmap (fmap_of_list [(0, 2)]), 1),
       (Pm_fmap (fmap_of_list [(1, 1), (0, 1)]), 1)]))"
  :: "int mpoly"
locale comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom hom"
locale comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_hom hom"
locale inj_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_ring_hom hom"
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
### theory "Draft.Roots_of_Algebraic_Poly"
### 1.735s elapsed time, 2.443s cpu time, 0.220s GC time
Loading theory "Draft.Roots_of_Algebraic_Poly_Impl" (required by "Draft.Roots_of_Real_Complex_PolyTemplates" via "Draft.Roots_of_Real_Complex_Poly")
### theory "Draft.Roots_of_Algebraic_Poly_Impl"
### 0.114s elapsed time, 0.130s cpu time, 0.000s GC time
Loading theory "Draft.Roots_of_Real_Complex_Poly" (required by "Draft.Roots_of_Real_Complex_PolyTemplates")
### Generation of a parametrized correspondence relation failed.
### Reason:  No relator for the type "Polynomial.poly" found.
### Generation of a parametrized correspondence relation failed.
### Reason:  No relator for the type "Polynomial.poly" found.
### Generation of a parametrized correspondence relation failed.
### Reason:  No relator for the type "Polynomial.poly" found.
### Generation of a parametrized correspondence relation failed.
### Reason:  No relator for the type "Polynomial.poly" found.
### Generation of a parametrized correspondence relation failed.
### Reason:  No relator for the type "Polynomial.poly" found.
### theory "Draft.Roots_of_Real_Complex_Poly"
### 2.395s elapsed time, 3.048s cpu time, 0.955s GC time
Loading theory "Draft.Roots_of_Real_Complex_PolyTemplates"
val templateLemmas =
   [("Roots_of_Real_Complex_Poly.distinct_roots_of_real_poly",
     "distinct (roots_of_real_poly ?p)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Roots_of_Real_Complex_Poly.roots_of_real_rf_poly",
     "distinct (roots_of_real_rf_poly ?p)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Roots_of_Real_Complex_Poly.distinct_roots_of_complex_poly",
     "distinct (roots_of_complex_poly ?p)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Roots_of_Real_Complex_Poly.roots_of_complex_rf_poly",
     "distinct (roots_of_complex_rf_poly ?p)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Roots_of_Real_Complex_Poly.roots_of_poly_dummy",
     "?p ~= 0 ==> distinct (roots_of_poly_dummy ?p)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Roots_of_Real_Complex_Poly.roots_of_real_rf_poly",
     "set (roots_of_real_rf_poly ?p) = {x. poly (poly_rf ?p) x = 0}",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("Roots_of_Real_Complex_Poly.roots_of_complex_rf_poly",
     "set (roots_of_complex_rf_poly ?p) = {x. poly (poly_rf ?p) x = 0}",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("Roots_of_Real_Complex_Poly.roots_of_real_rf_polys",
     "set (roots_of_real_rf_polys ?ps) =
      {x. EX p:set (polys_rf ?ps). poly (poly_rf p) x = 0}",
     template_equation
      (template_app
        (template_hole 9, template_app (template_hole 8, template_var 0)),
       template_app (template_hole 7, t_empty))),
    ("Roots_of_Real_Complex_Poly.roots_of_complex_rf_polys",
     "set (roots_of_complex_rf_polys ?ps) =
      {x. EX p:set (polys_rf ?ps). poly (poly_rf p) x = 0}",
     template_equation
      (template_app
        (template_hole 9, template_app (template_hole 8, template_var 0)),
       template_app (template_hole 7, t_empty))),
    ("Roots_of_Real_Complex_Poly.roots_of_poly_dummy",
     "?p ~= 0 ==> set (roots_of_poly_dummy ?p) = {x. poly ?p x = (0::?'a)}",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 7))],
       template_equation
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_app (template_hole 3, t_empty)))),
    ("Roots_of_Real_Complex_Poly.roots_of_real_poly",
     "?p ~= 0 ==> set (roots_of_real_poly ?p) = {x. poly ?p x = 0}",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 7))],
       template_equation
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_app (template_hole 3, t_empty)))),
    ("Roots_of_Real_Complex_Poly.roots_of_complex_poly",
     "?p ~= 0 ==> set (roots_of_complex_poly ?p) = {x. poly ?p x = 0}",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 7))],
       template_equation
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_app (template_hole 3, t_empty)))),
    ("Roots_of_Real_Complex_Poly.yun_polys",
     "?p ~= 0 ==>
      (poly ?p ?x = (0::?'a)) =
      (EX q:set (polys_rf (yun_polys ?p)). poly (poly_rf q) ?x = (0::?'a))",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 9))],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 1),
               template_var 0)),
           template_hole 5),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)))),
           t_empty)))),
    ("Roots_of_Real_Complex_Poly.roots_of_rf_yun_polys_distinct",
     "[| !!p. set (?rop p) = {x. poly (poly_rf p) x = (0::?'a)};
         !!p. distinct (?rop p) |]
      ==> distinct (concat (map ?rop (polys_rf (yun_polys ?p))))",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)))))
           ))),
    ("Roots_of_Real_Complex_Poly.distinct_concat'",
     "[| distinct (list_neq ?xs []); !!ys. ys : set ?xs ==> distinct ys;
         !!ys zs.
            [| ys : set ?xs; zs : set ?xs; ys ~= zs |]
            ==> set ys Int set zs = {} |]
      ==> distinct (concat ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 13,
              template_app
               (template_app (template_hole 12, t_empty), template_var 0))
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Roots_of_Real_Complex_Poly.roots_of_poly_dummy_code",
     "roots_of_poly_dummy ?p =
      Code.abort STR ''roots-of-poly-dummy'' (%x. roots_of_poly_dummy ?p)",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 3, template_hole 2),
                         template_hole 1),
                       template_hole 2),
                     template_hole 2),
                   template_hole 1),
                 template_hole 1),
               template_hole 1),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 3, template_hole 1),
                           template_hole 1),
                         template_hole 1),
                       template_hole 1),
                     template_hole 2),
                   template_hole 1),
                 template_hole 1),
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_hole 3, template_hole 1),
                             template_hole 1),
                           template_hole 1),
                         template_hole 1),
                       template_hole 2),
                     template_hole 1),
                   template_hole 1),
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 3, template_hole 2),
                               template_hole 2),
                             template_hole 1),
                           template_hole 2),
                         template_hole 1),
                       template_hole 1),
                     template_hole 1),
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 3, template_hole 1),
                                 template_hole 1),
                               template_hole 2),
                             template_hole 2),
                           template_hole 1),
                         template_hole 1),
                       template_hole 1),
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_hole 3, template_hole 1),
                                   template_hole 2),
                                 template_hole 1),
                               template_hole 1),
                             template_hole 2),
                           template_hole 1),
                         template_hole 2),
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_hole 3, template_hole 1),
                                     template_hole 1),
                                   template_hole 1),
                                 template_hole 1),
                               template_hole 2),
                             template_hole 1),
                           template_hole 1),
                         template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app (template_hole 3, template_hole 2), template_hole 1),
                                     template_hole 1),
                                   template_hole 2),
                                 template_hole 2),
                               template_hole 1),
                             template_hole 1),
                           template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app (template_hole 3, template_hole 1), template_hole 2),
 template_hole 1),
                                     template_hole 1),
                                   template_hole 2),
                                 template_hole 1),
                               template_hole 2),
                             template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app (template_hole 3, template_hole 2), template_hole 2),
   template_hole 2),
 template_hole 2),
                                     template_hole 1),
                                   template_hole 1),
                                 template_hole 1),
                               template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app (template_hole 3, template_hole 1), template_hole 1),
     template_hole 1),
   template_hole 1),
 template_hole 2),
                                     template_hole 1),
                                   template_hole 1),
                                 template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app (template_hole 3, template_hole 2), template_hole 2),
       template_hole 1),
     template_hole 1),
   template_hole 2),
 template_hole 1),
                                     template_hole 1),
                                   template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app
          (template_app (template_hole 3, template_hole 1),
           template_hole 2),
         template_hole 2),
       template_hole 1),
     template_hole 1),
   template_hole 1),
 template_hole 1),
                                     template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_hole 1),
             template_hole 2),
           template_hole 1),
         template_hole 1),
       template_hole 2),
     template_hole 1),
   template_hole 2),
 template_app
  (template_app
    (template_app
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_hole 2),
             template_hole 1),
           template_hole 2),
         template_hole 2),
       template_hole 1),
     template_hole 1),
   template_app
    (template_app
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_hole 1),
                 template_hole 2),
               template_hole 1),
             template_hole 2),
           template_hole 1),
         template_hole 1),
       template_hole 1),
     template_app
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_hole 1),
                   template_hole 2),
                 template_hole 1),
               template_hole 1),
             template_hole 2),
           template_hole 1),
         template_hole 1),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 3, template_hole 1),
                     template_hole 2),
                   template_hole 1),
                 template_hole 1),
               template_hole 2),
             template_hole 1),
           template_hole 1),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 3, template_hole 1),
                       template_hole 2),
                     template_hole 2),
                   template_hole 1),
                 template_hole 1),
               template_hole 1),
             template_hole 1),
           template_hole 0)))))))))))))))))))),
         t_empty)))]:
   (string * thm * template) list
### theory "Draft.Roots_of_Real_Complex_PolyTemplates"
### 3.557s elapsed time, 4.041s cpu time, 0.442s GC time
val it = (): unit
