Loading theory "Draft.Is_Int_To_Int" (required by "Draft.Roots_of_Algebraic_Poly_ImplTemplates" via "Draft.Roots_of_Algebraic_Poly_Impl" via "Draft.Roots_of_Algebraic_Poly")
Loading theory "Draft.Templates" (required by "Draft.Roots_of_Algebraic_Poly_ImplTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.MPoly_Container" (required by "Draft.Roots_of_Algebraic_Poly_ImplTemplates" via "Draft.Roots_of_Algebraic_Poly_Impl" via "Draft.Roots_of_Algebraic_Poly" via "Draft.Multivariate_Resultant")
Loading theory "Draft.Poly_Connection" (required by "Draft.Roots_of_Algebraic_Poly_ImplTemplates" via "Draft.Roots_of_Algebraic_Poly_Impl" via "Draft.Roots_of_Algebraic_Poly" via "Draft.Multivariate_Resultant")
### theory "Draft.Is_Int_To_Int"
### 0.050s elapsed time, 0.249s cpu time, 0.000s GC time
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.116s elapsed time, 0.422s cpu time, 0.060s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Roots_of_Algebraic_Poly_ImplTemplates")
deriving "ceq" instance for type "Poly_Mapping.poly_mapping" via "="
derived is_ceq_poly_mapping-lemma
use dlist as set_impl for type poly_mapping
registered poly_mapping in class set_impl
use None as trivial implementation of ccompare for type poly_mapping
registered poly_mapping in class ccompare
### theory "Draft.MPoly_Container"
### 0.559s elapsed time, 1.738s cpu time, 0.174s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.533s elapsed time, 1.498s cpu time, 0.115s GC time
### Ambiguous input (line 246 of "$AFP/Factor_Algebraic_Polynomial/Poly_Connection.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" mpoly_to_mpoly_poly)
###       ("_cargs" ("_position" x) ("_position" p)))
###     ("\<^const>Series.suminf_binder" ("_position" m)
###       ("_applC" ("_position" Polynomial.monom)
###         ("_cargs"
###           ("_applC" ("_position" MPoly_Type.monom)
###             ("_cargs"
###               ("_applC" ("_position" remove_key)
###                 ("_cargs" ("_position" x) ("_position" m)))
###               ("_applC" ("_position" MPoly_Type.coeff)
###                 ("_cargs" ("_position" p) ("_position" m)))))
###           ("_applC" ("_position" lookup)
###             ("_cargs" ("_position" m) ("_position" x))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" mpoly_to_mpoly_poly)
###       ("_cargs" ("_position" x) ("_position" p)))
###     ("_Sum_any" ("_position" m)
###       ("_applC" ("_position" Polynomial.monom)
###         ("_cargs"
###           ("_applC" ("_position" MPoly_Type.monom)
###             ("_cargs"
###               ("_applC" ("_position" remove_key)
###                 ("_cargs" ("_position" x) ("_position" m)))
###               ("_applC" ("_position" MPoly_Type.coeff)
###                 ("_cargs" ("_position" p) ("_position" m)))))
###           ("_applC" ("_position" lookup)
###             ("_cargs" ("_position" m) ("_position" x))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale transfer_mpoly_to_mpoly_poly
  fixes x :: "nat"
### theory "Draft.Poly_Connection"
### 1.311s elapsed time, 2.607s cpu time, 0.261s GC time
Loading theory "Draft.MPoly_Divide" (required by "Draft.Roots_of_Algebraic_Poly_ImplTemplates" via "Draft.Roots_of_Algebraic_Poly_Impl" via "Draft.Roots_of_Algebraic_Poly" via "Draft.Multivariate_Resultant" via "Draft.MPoly_Divide_Code")
instantiation
  mpoly :: (comm_semiring_1) divide
  divide_mpoly == divide :: 'a mpoly => 'a mpoly => 'a mpoly
instantiation
  mpoly :: ({idom,normalization_semidom}) normalization_semidom
  normalize_mpoly == normalize :: 'a mpoly => 'a mpoly
  unit_factor_mpoly == unit_factor :: 'a mpoly => 'a mpoly
### theory "Draft.MPoly_Divide"
### 0.254s elapsed time, 0.295s cpu time, 0.076s GC time
Loading theory "Draft.MPoly_Divide_Code" (required by "Draft.Roots_of_Algebraic_Poly_ImplTemplates" via "Draft.Roots_of_Algebraic_Poly_Impl" via "Draft.Roots_of_Algebraic_Poly" via "Draft.Multivariate_Resultant")
Found termination order:
  "(%p. size_list (%p. size (fst p)) (fst (snd p))) <*mlex*> {}"
### theory "Draft.MPoly_Divide_Code"
### 0.541s elapsed time, 0.584s cpu time, 0.076s GC time
Loading theory "Draft.Multivariate_Resultant" (required by "Draft.Roots_of_Algebraic_Poly_ImplTemplates" via "Draft.Roots_of_Algebraic_Poly_Impl" via "Draft.Roots_of_Algebraic_Poly")
"[:MPoly (Pm_fmap (fmap_of_list [(Pm_fmap (fmap_of_list [(1, 2)]), 1)])),
   MPoly (Pm_fmap (fmap_of_list [(Pm_fmap (fmap_of_list [(1, 1)]), 1)])),
   MPoly (Pm_fmap (fmap_of_list [(Pm_fmap (fmap_of_list []), 1)])):]"
  :: "int mpoly poly"
### theory "Draft.Multivariate_Resultant"
### 1.860s elapsed time, 5.062s cpu time, 0.851s GC time
Loading theory "Draft.Roots_of_Algebraic_Poly" (required by "Draft.Roots_of_Algebraic_Poly_ImplTemplates" via "Draft.Roots_of_Algebraic_Poly_Impl")
"MPoly
  (Pm_fmap
    (fmap_of_list
      [(Pm_fmap (fmap_of_list [(0, 2)]), 1),
       (Pm_fmap (fmap_of_list [(1, 1), (0, 1)]), 1)]))"
  :: "int mpoly"
locale comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom hom"
locale comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_hom hom"
locale inj_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_ring_hom hom"
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
### theory "Draft.Roots_of_Algebraic_Poly"
### 2.078s elapsed time, 3.283s cpu time, 0.883s GC time
Loading theory "Draft.Roots_of_Algebraic_Poly_Impl" (required by "Draft.Roots_of_Algebraic_Poly_ImplTemplates")
### theory "Draft.Roots_of_Algebraic_Poly_Impl"
### 0.124s elapsed time, 0.141s cpu time, 0.000s GC time
Loading theory "Draft.Roots_of_Algebraic_Poly_ImplTemplates"
val templateLemmas =
   [("Roots_of_Algebraic_Poly_Impl.representative_poly_code",
     "representative_poly_complex ?p =
      (case initial_root_problem ?p of
       (mp, triples) =>
         let is = map fst triples; qs = %j. snd (snd (triples ! j))
         in eliminate_aux_vars mp qs is)",
     template_equation
      (template_app (template_hole 10, template_var 0),
       template_app
        (template_app (template_hole 9, t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("Roots_of_Algebraic_Poly_Impl.representative_poly_code",
     "representative_poly_real ?p =
      (case initial_root_problem ?p of
       (mp, triples) =>
         let is = map fst triples; qs = %j. snd (snd (triples ! j))
         in eliminate_aux_vars mp qs is)",
     template_equation
      (template_app (template_hole 10, template_var 0),
       template_app
        (template_app (template_hole 9, t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("Roots_of_Algebraic_Poly_Impl.initial_root_problem_code",
     "initial_root_problem_real ?p =
      (let n = degree ?p; cs = coeffs ?p;
           rcs = remdups (filter (%c. c ~: \<int>) cs);
           pairs = map (%c. (c, min_int_poly c)) rcs;
           spairs = sort_key (%(c, y). degree y) pairs;
           triples = zip [0..<length spairs] spairs;
           mpoly =
             SUM i<=n.
             let c = coeff ?p i
             in MPoly_Type.monom (monomial i 0) 1 *
                (case find (%(j, d, f). d = c) triples of
                 None => Const (to_int c) | Some (j, pair) => Var (Suc j))
       in (mpoly, triples))",
     template_equation
      (template_app (template_hole 41, template_var 0),
       template_app
        (template_app
          (template_hole 40,
           template_app (template_hole 39, template_var 0)),
         t_empty))),
    ("Roots_of_Algebraic_Poly_Impl.initial_root_problem_code",
     "initial_root_problem_complex ?p =
      (let n = degree ?p; cs = coeffs ?p;
           rcs = remdups (filter (%c. c ~: \<int>) cs);
           pairs = map (%c. (c, min_int_poly c)) rcs;
           spairs = sort_key (%(c, y). degree y) pairs;
           triples = zip [0..<length spairs] spairs;
           mpoly =
             SUM i<=n.
             let c = coeff ?p i
             in MPoly_Type.monom (monomial i 0) 1 *
                (case find (%(j, d, f). d = c) triples of
                 None => Const (to_int c) | Some (j, pair) => Var (Suc j))
       in (mpoly, triples))",
     template_equation
      (template_app (template_hole 41, template_var 0),
       template_app
        (template_app
          (template_hole 40,
           template_app (template_hole 39, template_var 0)),
         t_empty)))]:
   (string * thm * template) list
### theory "Draft.Roots_of_Algebraic_Poly_ImplTemplates"
### 4.098s elapsed time, 5.131s cpu time, 1.190s GC time
val it = (): unit
