Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Subset_Boolean_AlgebrasMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Subset_Boolean_AlgebrasMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Subset_Boolean_AlgebrasMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.Subset_Boolean_AlgebrasMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.133s elapsed time, 0.552s cpu time, 0.046s GC time
Loading theory "Stone_Algebras.Lattice_Basics" (required by "Draft.Subset_Boolean_AlgebrasMoreTemplates" via "Draft.Subset_Boolean_Algebras" via "Stone_Algebras.P_Algebras")
class sup = type +
  fixes sup :: "'a => 'a => 'a"
class inf = type +
  fixes inf :: "'a => 'a => 'a"
class uminus = type +
  fixes uminus :: "'a => 'a"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.252s elapsed time, 1.027s cpu time, 0.046s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Subset_Boolean_AlgebrasMoreTemplates" via "Draft.ExtrEqs")
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
### theory "HOL-Library.Nat_Bijection"
### 0.346s elapsed time, 1.386s cpu time, 0.120s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Subset_Boolean_AlgebrasMoreTemplates" via "Draft.ExtrEqs")
class order = preorder +
  assumes "order_antisym": "!!x y. [| x <= y; y <= x |] ==> x = y"
class semilattice_sup = sup + order +
  assumes "sup_ge1": "!!x y. x <= x \<squnion> y"
    and "sup_ge2": "!!y x. y <= x \<squnion> y"
    and "sup_least": "!!y x z. [| y <= x; z <= x |] ==> y \<squnion> z <= x"
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### monoid_add.sum_list (\<squnion>) bot ?xs == foldr (\<squnion>) ?xs bot
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### comm_monoid_add.sum (\<squnion>) bot ?g (set ?xs) ==
### sup_monoid.sum_list (map ?g (remdups ?xs))
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
class semilattice_inf = inf + order +
  assumes "inf_le1": "!!x y. x \<sqinter> y <= x"
    and "inf_le2": "!!x y. x \<sqinter> y <= y"
    and
    "inf_greatest": "!!x y z. [| x <= y; x <= z |] ==> x <= y \<sqinter> z"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class directed_semilattice_inf = semilattice_inf +
  assumes "ub": "!!x y. EX z>=x. y <= z"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.996s elapsed time, 3.767s cpu time, 0.761s GC time
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.078s elapsed time, 3.955s cpu time, 0.820s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### Partially applied constant "Lattices.inf_class.inf" on left hand side of equation, in theorem:
### monoid_add.sum_list (\<sqinter>) top ?xs == foldr (\<sqinter>) ?xs top
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Partially applied constant "Lattices.inf_class.inf" on left hand side of equation, in theorem:
### comm_monoid_add.sum (\<sqinter>) top ?g (set ?xs) ==
### inf.sup_monoid.sum_list (map ?g (remdups ?xs))
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.069s elapsed time, 6.705s cpu time, 1.043s GC time
Loading theory "Draft.Templates" (required by "Draft.Subset_Boolean_AlgebrasMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.122s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Subset_Boolean_AlgebrasMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.526s elapsed time, 1.094s cpu time, 0.088s GC time
class dense_lattice = bounded_lattice +
  assumes
    "bot_meet_irreducible":
      "!!x y. x \<sqinter> y = bot --> x = bot | y = bot"
class distrib_lattice = lattice +
  assumes
    "sup_inf_distrib1":
      "!!x y z.
          x \<squnion> y \<sqinter> z =
          (x \<squnion> y) \<sqinter> (x \<squnion> z)"
class linorder_lattice_expansion = bounded_linorder + inf + sup +
  assumes "sup_def": "!!x y. x \<squnion> y = max x y"
  assumes "inf_def": "!!x y. x \<sqinter> y = min x y"
### Additional type variable(s) in locale specification "non_trivial": 'a
class non_trivial = type +
  assumes "consistent": "EX x y. x ~= y"
class boolean_algebra = minus + uminus + bounded_lattice + distrib_lattice +
  assumes "inf_compl_bot": "!!x. x \<sqinter> - x = bot"
    and "sup_compl_top": "!!x. x \<squnion> - x = top"
  assumes "diff_eq": "!!x y. x - y = x \<sqinter> - y"
### theory "Stone_Algebras.Lattice_Basics"
### 8.085s elapsed time, 13.159s cpu time, 1.394s GC time
Loading theory "Stone_Algebras.P_Algebras" (required by "Draft.Subset_Boolean_AlgebrasMoreTemplates" via "Draft.Subset_Boolean_Algebras")
class p_algebra = uminus + bounded_lattice +
  assumes "pseudo_complement": "!!x y. (x \<sqinter> y = bot) = (x <= - y)"
class p_algebra_eq = uminus + bounded_lattice +
  assumes "p_bot_eq": "- bot = top"
    and "p_top_eq": "- top = bot"
    and
    "inf_import_p_eq":
      "!!x y. x \<sqinter> - (x \<sqinter> y) = x \<sqinter> - y"
class stone_algebra = pd_algebra +
  assumes "stone": "!!x. - x \<squnion> - - x = top"
class linorder_stone_algebra_expansion = uminus +
  linorder_lattice_expansion +
  assumes "uminus_def": "!!x. - x = (if x = bot then top else bot)"
class implies = type +
  fixes implies :: "'a => 'a => 'a"
class heyting_semilattice = semilattice_inf + implies +
  assumes
    "implies_galois":
      "!!x y z. (x \<sqinter> y <= z) = (x <= y \<leadsto> z)"
class heyting_semilattice_eq = semilattice_inf + implies +
  assumes "implies_mp_below": "!!x y. x \<sqinter> (x \<leadsto> y) <= y"
    and
    "implies_galois_increasing": "!!x y. x <= y \<leadsto> x \<sqinter> y"
    and
    "implies_isotone_inf":
      "!!x y z. x \<leadsto> y \<sqinter> z <= x \<leadsto> y"
class heyting_algebra = uminus + bounded_heyting_lattice +
  assumes "uminus_eq": "!!x. - x = x \<leadsto> bot"
class heyting_algebra_eq = uminus + bounded_lattice + implies +
  assumes
    "implies_mp_eq": "!!x y. x \<sqinter> (x \<leadsto> y) = x \<sqinter> y"
    and
    "implies_import_inf":
      "!!x y z.
          x \<sqinter> (x \<sqinter> y \<leadsto> (x \<leadsto> z)) =
          x \<sqinter> (y \<leadsto> z)"
    and
    "inf_inf_implies":
      "!!z x y. z \<sqinter> (x \<sqinter> y \<leadsto> x) = z"
    and "uminus_eq_eq": "!!x. - x = x \<leadsto> bot"
class heyting_stone_algebra = heyting_algebra +
  assumes "heyting_stone": "!!x. - x \<squnion> - - x = top"
class brouwer_algebra = minus + uminus + bounded_lattice +
  assumes "minus_galois": "!!x y z. (x <= y \<squnion> z) = (x - y <= z)"
    and "uminus_eq_minus": "!!x. - x = top - x"
class boolean_algebra = minus + sup_inf_top_bot_uminus_ord +
  bounded_lattice + distrib_lattice +
  assumes "inf_compl_bot": "!!x. x \<sqinter> - x = bot"
    and "sup_compl_top": "!!x. x \<squnion> - x = top"
  assumes "diff_eq": "!!x y. x - y = x \<sqinter> - y"
### theory "Stone_Algebras.P_Algebras"
### 13.060s elapsed time, 14.031s cpu time, 0.967s GC time
Loading theory "Draft.Subset_Boolean_Algebras" (required by "Draft.Subset_Boolean_AlgebrasMoreTemplates")
class huntington = uminus + sup +
  assumes
    "associative":
      "!!x y z. x \<squnion> (y \<squnion> z) = x \<squnion> y \<squnion> z"
  assumes "commutative": "!!x y. x \<squnion> y = y \<squnion> x"
  assumes
    "huntington":
      "!!x y. x = - (- x \<squnion> y) \<squnion> - (- x \<squnion> - y)"
class extended = minus + uminus + inf + sup + bot + ord + top +
  assumes "top_def": "top = (THE x. ALL y. x = y \<squnion> - y)"
  assumes "bot_def": "bot = - (THE x. ALL y. x = y \<squnion> - y)"
  assumes "inf_def": "!!x y. x \<sqinter> y = - (- x \<squnion> - y)"
  assumes "minus_def": "!!x y. x - y = - (- x \<squnion> y)"
  assumes "less_eq_def": "!!x y. (x <= y) = (x \<squnion> y = y)"
  assumes
    "less_def":
      "!!x y. (x < y) = (x \<squnion> y = y & y \<squnion> x ~= x)"
class boolean_algebra = brouwer_algebra + stone_algebra +
  assumes "inf_compl_bot": "!!x. x \<sqinter> - x = bot"
    and "sup_compl_top": "!!x. x \<squnion> - x = top"
  assumes "diff_eq": "!!x y. x - y = x \<sqinter> - y"
class stone_algebra_extended = minus + stone_algebra +
  assumes "stone_minus_def": "!!x y. x - y = x \<sqinter> - y"
class regular_stone_algebra = stone_algebra_extended +
  assumes "double_complement": "!!x. - - x = x"
class boolean_algebra = brouwer_algebra + stone_algebra +
  assumes "inf_compl_bot": "!!x. x \<sqinter> - x = bot"
    and "sup_compl_top": "!!x. x \<squnion> - x = top"
  assumes "diff_eq": "!!x y. x - y = x \<sqinter> - y"
class boolean_algebra_1 = uminus + sup +
  assumes
    "ba1_associative":
      "!!x y z. x \<squnion> (y \<squnion> z) = x \<squnion> y \<squnion> z"
  assumes "ba1_commutative": "!!x y. x \<squnion> y = y \<squnion> x"
  assumes
    "ba1_complement":
      "!!x y z.
          (x \<squnion> - y = z \<squnion> - z) = (x \<squnion> y = x)"
class huntington = uminus + sup +
  assumes
    "associative":
      "!!x y z. x \<squnion> (y \<squnion> z) = x \<squnion> y \<squnion> z"
  assumes "commutative": "!!x y. x \<squnion> y = y \<squnion> x"
  assumes
    "huntington":
      "!!x y. x = - (- x \<squnion> y) \<squnion> - (- x \<squnion> - y)"
class boolean_algebra_2 = uminus + sup +
  assumes
    "ba2_associative_commutative":
      "!!x y z. x \<squnion> y \<squnion> z = y \<squnion> z \<squnion> x"
  assumes
    "ba2_complement":
      "!!x y z.
          (x \<squnion> - y = z \<squnion> - z) = (x \<squnion> y = x)"
class boolean_algebra_1 = huntington +
  assumes
    "ba1_associative":
      "!!x y z. x \<squnion> (y \<squnion> z) = x \<squnion> y \<squnion> z"
  assumes "ba1_commutative": "!!x y. x \<squnion> y = y \<squnion> x"
  assumes
    "ba1_complement":
      "!!x y z.
          (x \<squnion> - y = z \<squnion> - z) = (x \<squnion> y = x)"
class boolean_algebra_mp = uminus + sup +
  assumes "ba_mp_1": "!!x y. - (- x \<squnion> y) \<squnion> x = x"
  assumes
    "ba_mp_2":
      "!!x y z.
          - (- x \<squnion> y) \<squnion> (z \<squnion> y) =
          y \<squnion> (z \<squnion> x)"
class huntington = uminus + sup +
  assumes
    "associative":
      "!!x y z. x \<squnion> (y \<squnion> z) = x \<squnion> y \<squnion> z"
  assumes "commutative": "!!x y. x \<squnion> y = y \<squnion> x"
  assumes
    "huntington":
      "!!x y. x = - (- x \<squnion> y) \<squnion> - (- x \<squnion> - y)"
class boolean_algebra_3 = uminus + sup +
  assumes
    "ba3_associative":
      "!!x y z. x \<squnion> (y \<squnion> z) = x \<squnion> y \<squnion> z"
  assumes "ba3_commutative": "!!x y. x \<squnion> y = y \<squnion> x"
  assumes "ba3_idempotent": "!!x. x \<squnion> x = x"
  assumes "ba3_double_complement": "!!x. - - x = x"
  assumes "ba3_top_unique": "!!x y. x \<squnion> - x = y \<squnion> - y"
  assumes
    "ba3_export":
      "!!x y. x \<squnion> - (x \<squnion> y) = x \<squnion> - y"
class huntington = uminus + sup +
  assumes
    "associative":
      "!!x y z. x \<squnion> (y \<squnion> z) = x \<squnion> y \<squnion> z"
  assumes "commutative": "!!x y. x \<squnion> y = y \<squnion> x"
  assumes
    "huntington":
      "!!x y. x = - (- x \<squnion> y) \<squnion> - (- x \<squnion> - y)"
class subset_boolean_algebra = uminus + sup +
  assumes
    "sub_associative":
      "!!x y z.
          - x \<squnion> (- y \<squnion> - z) =
          - x \<squnion> - y \<squnion> - z"
  assumes
    "sub_commutative": "!!x y. - x \<squnion> - y = - y \<squnion> - x"
  assumes
    "sub_complement":
      "!!x y.
          - x =
          - (- - x \<squnion> - y) \<squnion> - (- - x \<squnion> - - y)"
  assumes
    "sub_sup_closed": "!!x y. - x \<squnion> - y = - - (- x \<squnion> - y)"
class subset_extended = minus + uminus + inf + sup + bot + ord + top +
  assumes "sub_top_def": "top = (THE x. ALL y. x = - y \<squnion> - - y)"
  assumes "sub_bot_def": "bot = - (THE x. ALL y. x = - y \<squnion> - - y)"
  assumes
    "sub_inf_def": "!!x y. - x \<sqinter> - y = - (- - x \<squnion> - - y)"
  assumes "sub_minus_def": "!!x y. - x - - y = - (- - x \<squnion> - y)"
  assumes
    "sub_less_eq_def": "!!x y. (- x <= - y) = (- x \<squnion> - y = - y)"
  assumes
    "sub_less_def":
      "!!x y.
          (- x < - y) =
          (- x \<squnion> - y = - y & - y \<squnion> - x ~= - x)"
class subset_boolean_algebra' = uminus + sup +
  assumes
    "sub_associative'":
      "!!x y z.
          - x \<squnion> (- y \<squnion> - z) =
          - x \<squnion> - y \<squnion> - z"
  assumes
    "sub_commutative'": "!!x y. - x \<squnion> - y = - y \<squnion> - x"
  assumes
    "sub_complement'":
      "!!x y.
          - x =
          - (- - x \<squnion> - y) \<squnion> - (- - x \<squnion> - - y)"
  assumes "sub_sup_closed'": "!!x y. EX z. - x \<squnion> - y = - z"
instantiation
  boolean_subset :: (subset_boolean_algebra) huntington
  sup_boolean_subset == sup ::
    'a boolean_subset => 'a boolean_subset => 'a boolean_subset
  uminus_boolean_subset == uminus :: 'a boolean_subset => 'a boolean_subset
instantiation
  boolean_subset :: (subset_boolean_algebra_extended) huntington_extended
  minus_boolean_subset == minus ::
    'a boolean_subset => 'a boolean_subset => 'a boolean_subset
  inf_boolean_subset == inf ::
    'a boolean_subset => 'a boolean_subset => 'a boolean_subset
  bot_boolean_subset == bot :: 'a boolean_subset
  less_eq_boolean_subset == less_eq ::
    'a boolean_subset => 'a boolean_subset => bool
  less_boolean_subset == less ::
    'a boolean_subset => 'a boolean_subset => bool
  top_boolean_subset == top :: 'a boolean_subset
class subset_boolean_algebra_1 = uminus + sup +
  assumes
    "sba1_associative":
      "!!x y z. x \<squnion> (y \<squnion> z) = x \<squnion> y \<squnion> z"
  assumes "sba1_commutative": "!!x y. x \<squnion> y = y \<squnion> x"
  assumes "sba1_idempotent": "!!x. x \<squnion> x = x"
  assumes "sba1_double_complement": "!!x. - - - x = - x"
  assumes
    "sba1_bot_unique": "!!x y. - (x \<squnion> - x) = - (y \<squnion> - y)"
  assumes
    "sba1_export":
      "!!x y. - x \<squnion> - (- x \<squnion> y) = - x \<squnion> - y"
class subset_extended_1 = minus + uminus + inf + sup + bot + ord + top +
  assumes "ba_bot": "bot = (THE x. ALL z. x = - (z \<squnion> - z))"
  assumes "ba_top": "top = - (THE x. ALL z. x = - (z \<squnion> - z))"
  assumes "ba_inf": "!!x y. - x \<sqinter> - y = - (- - x \<squnion> - - y)"
  assumes "ba_minus": "!!x y. - x - - y = - (- - x \<squnion> - y)"
  assumes "ba_less_eq": "!!x y. (x <= y) = (x \<squnion> y = y)"
  assumes
    "ba_less": "!!x y. (x < y) = (x \<squnion> y = y & y \<squnion> x ~= x)"
class subset_extended_2 = subset_extended_1 +
  assumes
    "ba_bot_unique": "!!x y. - (x \<squnion> - x) = - (y \<squnion> - y)"
class subset_boolean_algebra_2 = uminus + sup +
  assumes
    "sba2_associative":
      "!!x y z. x \<squnion> (y \<squnion> z) = x \<squnion> y \<squnion> z"
  assumes "sba2_commutative": "!!x y. x \<squnion> y = y \<squnion> x"
  assumes "sba2_idempotent": "!!x. x \<squnion> x = x"
  assumes "sba2_bot_unit": "!!x y. x \<squnion> - (y \<squnion> - y) = x"
  assumes
    "sba2_sub_sup_demorgan":
      "!!x y. - (x \<squnion> y) = - (- - x \<squnion> - - y)"
  assumes
    "sba2_export":
      "!!x y. - x \<squnion> - (- x \<squnion> y) = - x \<squnion> - y"
class subset_boolean_algebra_3_extended =
  subset_boolean_algebra_2_extended +
  assumes
    "sba3_inf_associative":
      "!!x y z. x \<sqinter> (y \<sqinter> z) = x \<sqinter> y \<sqinter> z"
  assumes
    "sba3_inf_right_dist_sup":
      "!!x y z.
          (x \<squnion> y) \<sqinter> z =
          x \<sqinter> z \<squnion> y \<sqinter> z"
  assumes "sba3_inf_complement_bot": "!!x. - x \<sqinter> x = bot"
  assumes "sba3_inf_left_unit": "!!x. top \<sqinter> x = x"
  assumes
    "sba3_complement_inf_double_complement":
      "!!x y. - (x \<sqinter> - - y) = - (x \<sqinter> y)"
class subset_boolean_algebra_4_extended =
  subset_boolean_algebra_3_extended +
  assumes "sba4_inf_right_unit": "!!x. x \<sqinter> top = x"
  assumes
    "inf_right_isotone":
      "!!x y z. x <= y ==> z \<sqinter> x <= z \<sqinter> y"
class subset_boolean_algebra_5_extended =
  subset_boolean_algebra_3_extended +
  assumes "sba5_inf_commutative": "!!x y. x \<sqinter> y = y \<sqinter> x"
  assumes "sba5_inf_absorb": "!!x y. x \<sqinter> (x \<squnion> y) = x"
class stone_algebra_extended = minus + stone_algebra +
  assumes "stone_minus_def": "!!x y. x - y = x \<sqinter> - y"
class il_semiring = inf + sup + bot + ord + top +
  assumes
    "il_associative":
      "!!x y z. x \<squnion> (y \<squnion> z) = x \<squnion> y \<squnion> z"
  assumes "il_commutative": "!!x y. x \<squnion> y = y \<squnion> x"
  assumes "il_idempotent": "!!x. x \<squnion> x = x"
  assumes "il_bot_unit": "!!x. x \<squnion> bot = x"
  assumes
    "il_inf_associative":
      "!!x y z. x \<sqinter> (y \<sqinter> z) = x \<sqinter> y \<sqinter> z"
  assumes
    "il_inf_right_dist_sup":
      "!!x y z.
          (x \<squnion> y) \<sqinter> z =
          x \<sqinter> z \<squnion> y \<sqinter> z"
  assumes "il_inf_left_unit": "!!x. top \<sqinter> x = x"
  assumes "il_inf_right_unit": "!!x. x \<sqinter> top = x"
  assumes "il_sub_inf_left_zero": "!!x. bot \<sqinter> x = bot"
  assumes
    "il_sub_inf_right_isotone":
      "!!x y z. x <= y ==> z \<sqinter> x <= z \<sqinter> y"
  assumes "il_less_eq": "!!x y. (x <= y) = (x \<squnion> y = y)"
  assumes "il_less_def": "!!x y. (x < y) = (x <= y & ~ y <= x)"
class dom = type +
  fixes d :: "'a => 'a"
class ppd_semiring = dom + il_semiring +
  assumes "d_closed": "!!x. test (d x)"
  assumes "d1": "!!x. x <= d x \<sqinter> x"
class pd_semiring = ppd_semiring +
  assumes "d2": "!!p x. test p ==> d (p \<sqinter> x) <= p"
class pd_semiring_extended = uminus + pd_semiring +
  assumes "uminus_def": "!!x. - x = ! (d x)"
class d_semiring = pd_semiring +
  assumes "d3": "!!x y. d (x \<sqinter> d y) <= d (x \<sqinter> y)"
class il_semiring = inf + sup + bot + order + top +
  assumes
    "il_associative":
      "!!x y z. x \<squnion> (y \<squnion> z) = x \<squnion> y \<squnion> z"
  assumes "il_commutative": "!!x y. x \<squnion> y = y \<squnion> x"
  assumes "il_idempotent": "!!x. x \<squnion> x = x"
  assumes "il_bot_unit": "!!x. x \<squnion> bot = x"
  assumes
    "il_inf_associative":
      "!!x y z. x \<sqinter> (y \<sqinter> z) = x \<sqinter> y \<sqinter> z"
  assumes
    "il_inf_right_dist_sup":
      "!!x y z.
          (x \<squnion> y) \<sqinter> z =
          x \<sqinter> z \<squnion> y \<sqinter> z"
  assumes "il_inf_left_unit": "!!x. top \<sqinter> x = x"
  assumes "il_inf_right_unit": "!!x. x \<sqinter> top = x"
  assumes "il_sub_inf_left_zero": "!!x. bot \<sqinter> x = bot"
  assumes
    "il_sub_inf_right_isotone":
      "!!x y z. x <= y ==> z \<sqinter> x <= z \<sqinter> y"
  assumes "il_less_eq": "!!x y. (x <= y) = (x \<squnion> y = y)"
  assumes "il_less_def": "!!x y. (x < y) = (x <= y & ~ y <= x)"
class d_semiring_var = ppd_semiring +
  assumes "d3_var": "!!x y. d (x \<sqinter> d y) <= d (x \<sqinter> y)"
  assumes "d_strict_eq_var": "d bot = bot"
class ppa_semiring = uminus + il_semiring +
  assumes "a_inf_complement_bot": "!!x. - x \<sqinter> x = bot"
  assumes "a_stone": "!!x. - x \<squnion> - - x = top"
class pa_semiring = ppa_semiring +
  assumes "pad2": "!!x y. - - x <= - (- x \<sqinter> y)"
class pa_algebra = minus + pa_semiring +
  assumes "pa_minus_def": "!!x y. - x - - y = - (- - x \<squnion> - y)"
class a_semiring = ppa_semiring +
  assumes "ad3": "!!x y. - (x \<sqinter> y) <= - (x \<sqinter> - - y)"
class a_algebra = minus + a_semiring +
  assumes "a_minus_def": "!!x y. - x - - y = - (- - x \<squnion> - y)"
class subset_boolean_algebra_4_extended =
  subset_boolean_algebra_3_extended +
  assumes "sba4_inf_right_unit": "!!x. x \<sqinter> top = x"
  assumes
    "inf_right_isotone":
      "!!x y z. x <= y ==> z \<sqinter> x <= z \<sqinter> y"
class stone_algebra = pd_algebra +
  assumes "stone": "!!x. - x \<squnion> - - x = top"
### theory "Draft.Subset_Boolean_Algebras"
### 15.533s elapsed time, 17.624s cpu time, 2.804s GC time
Loading theory "Draft.Subset_Boolean_AlgebrasMoreTemplates"
val templateLemmas =
   [("Subset_Boolean_Algebras.simp_boolean_subset",
     "EX y. Rep_boolean_subset ?x = - y",
     template_predicate (template_app (template_hole 3, t_empty)))]:
   (string * thm * template) list
### theory "Draft.Subset_Boolean_AlgebrasMoreTemplates"
### 0.456s elapsed time, 1.076s cpu time, 0.087s GC time
val it = (): unit
