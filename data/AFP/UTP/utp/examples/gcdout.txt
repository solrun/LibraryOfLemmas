Loading theory "Draft.utp_parser_utils" (required by "Draft.gcdTemplates" via "Draft.gcd" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp" via "Draft.utp_var")
Loading theory "Draft.Templates" (required by "Draft.gcdTemplates" via "Draft.ExtrEqs")
signature UTP_PARSER_UTILS =
  sig
    val mk_char: string -> Ast.ast
    val mk_nib: int -> Ast.ast
    val mk_string: string list -> Ast.ast
    val string_ast_tr: Ast.ast list -> Ast.ast
  end
signature NAME_UTILS =
  sig
    val deep_unmark_const: term -> term
    val last_char_str: string -> string
    val mk_id: string -> term
    val repeat_char: char -> int -> string
    val right_crop_by: int -> string -> string
  end
structure Utp_Parser_Utils: UTP_PARSER_UTILS
structure Name_Utils: NAME_UTILS
### theory "Draft.utp_parser_utils"
### 0.041s elapsed time, 0.110s cpu time, 0.000s GC time
Loading theory "Draft.utp_var" (required by "Draft.gcdTemplates" via "Draft.gcd" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.076s elapsed time, 0.185s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.gcdTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.586s elapsed time, 1.187s cpu time, 0.104s GC time
### theory "Draft.utp_var"
### 0.689s elapsed time, 1.323s cpu time, 0.104s GC time
Loading theory "Draft.utp_expr" (required by "Draft.gcdTemplates" via "Draft.gcd" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp")
instantiation
  uexpr :: (zero, type) zero
  zero_uexpr == zero_class.zero :: ('a, 'b) uexpr
instantiation
  uexpr :: (one, type) one
  one_uexpr == one_class.one :: ('a, 'b) uexpr
instantiation
  uexpr :: (plus, type) plus
  plus_uexpr == plus :: ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (ord, type) ord
  less_eq_uexpr == less_eq :: ('a, 'b) uexpr => ('a, 'b) uexpr => bool
  less_uexpr == less :: ('a, 'b) uexpr => ('a, 'b) uexpr => bool
### theory "Draft.utp_expr"
### 0.798s elapsed time, 0.829s cpu time, 0.055s GC time
Loading theory "Draft.utp_expr_insts" (required by "Draft.gcdTemplates" via "Draft.gcd" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp")
instantiation
  uexpr :: (uminus, type) uminus
  uminus_uexpr == uminus :: ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (minus, type) minus
  minus_uexpr == minus :: ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (times, type) times
  times_uexpr == times :: ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (divide, type) divide
  divide_uexpr == divide ::
    ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (inverse, type) inverse
  inverse_uexpr == inverse :: ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (modulo, type) modulo
  modulo_uexpr == modulo ::
    ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (sgn, type) sgn
  sgn_uexpr == sgn :: ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (abs, type) abs
  abs_uexpr == abs :: ('a, 'b) uexpr => ('a, 'b) uexpr
### theory "Draft.utp_expr_insts"
### 0.229s elapsed time, 0.229s cpu time, 0.000s GC time
Loading theory "Draft.utp_expr_funcs" (required by "Draft.gcdTemplates" via "Draft.gcd" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp")
Loading theory "Draft.utp_unrest" (required by "Draft.gcdTemplates" via "Draft.gcd" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp")
### theory "Draft.utp_expr_funcs"
### 0.148s elapsed time, 0.299s cpu time, 0.050s GC time
### theory "Draft.utp_unrest"
### 0.226s elapsed time, 0.377s cpu time, 0.050s GC time
Loading theory "Draft.utp_usedby" (required by "Draft.gcdTemplates" via "Draft.gcd" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp")
Loading theory "Draft.utp_subst" (required by "Draft.gcdTemplates" via "Draft.gcd" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp")
### theory "Draft.utp_usedby"
### 0.087s elapsed time, 0.171s cpu time, 0.000s GC time
Loading theory "Draft.utp_tactics" (required by "Draft.gcdTemplates" via "Draft.gcd" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp" via "Draft.utp_meta_subst")
signature UEXPR_REP_EQ =
  sig
    val get_uexpr_rep_eq_thms: theory -> thm list
    val read_uexpr_rep_eq_thms: theory -> theory
  end
structure uexpr_rep_eq: UEXPR_REP_EQ
val it = (): unit
### theory "Draft.utp_subst"
### 0.419s elapsed time, 0.842s cpu time, 0.047s GC time
structure List_Extra: sig val contains: ''a -> ''a list -> bool end
signature BASIC_TACTICS =
  sig
    val fast_transfer: Proof.context -> thm list -> context_tactic
    val interp_tac: Proof.context -> thm list -> context_tactic
    val slow_transfer: Proof.context -> thm list -> context_tactic
    val utp_auto_tac: Proof.context -> thm list -> context_tactic
    val utp_blast_tac: Proof.context -> thm list -> context_tactic
    val utp_simp_tac: Proof.context -> thm list -> context_tactic
  end
structure Basic_Tactics: BASIC_TACTICS
signature UTP_TACTICS =
  sig
    val inst_gen_pred_tac:
       utp_tac_args ->
         (Proof.context -> thm list -> context_tactic) ->
           Proof.context -> thm list -> context_tactic
    val inst_gen_rel_tac:
       utp_tac_args ->
         (Proof.context -> thm list -> context_tactic) ->
           Proof.context -> thm list -> context_tactic
    val no_interpN: string
    val robustN: string
    val scan_args: utp_tac_args parser
    type utp_tac_args
  end
structure UTP_Tactics: UTP_TACTICS
### theory "Draft.utp_tactics"
### 1.498s elapsed time, 1.909s cpu time, 0.088s GC time
Loading theory "Draft.utp_meta_subst" (required by "Draft.gcdTemplates" via "Draft.gcd" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp")
### theory "Draft.utp_meta_subst"
### 0.397s elapsed time, 0.459s cpu time, 0.030s GC time
Loading theory "Draft.utp_pred" (required by "Draft.gcdTemplates" via "Draft.gcd" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp" via "Draft.utp_alphabet")
instantiation
  uexpr :: (lattice, type) lattice
  inf_uexpr == inf :: ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
  sup_uexpr == sup :: ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (bounded_lattice, type) bounded_lattice
  bot_uexpr == bot :: ('a, 'b) uexpr
  top_uexpr == top_class.top :: ('a, 'b) uexpr
instantiation
  uexpr :: (complete_lattice, type) complete_lattice
  Inf_uexpr == Inf :: ('a, 'b) uexpr set => ('a, 'b) uexpr
  Sup_uexpr == Sup :: ('a, 'b) uexpr set => ('a, 'b) uexpr
### Ignoring duplicate rewrite rule:
### ?X1 \<subseteq>\<^sub>L ?X1 == True
### Ignoring duplicate rewrite rule:
### wb_lens ?Y1 ==> ?X1 \<subseteq>\<^sub>L ?X1 +\<^sub>L ?Y1 == True
### theory "Draft.utp_pred"
### 1.468s elapsed time, 1.828s cpu time, 0.468s GC time
Loading theory "Draft.utp_alphabet" (required by "Draft.gcdTemplates" via "Draft.gcd" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp")
Loading theory "Draft.utp_pred_laws" (required by "Draft.gcdTemplates" via "Draft.gcd" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp")
### Partially applied constant "utp_pred.conj_upred" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<and>) (ran\<^sub>l (?x # ?xs)) ==
### fold (\<and>) ?xs ?x
### Partially applied constant "utp_pred.disj_upred" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<or>) (ran\<^sub>l (?x # ?xs)) ==
### fold (\<or>) ?xs ?x
### theory "Draft.utp_alphabet"
### 0.568s elapsed time, 1.238s cpu time, 0.114s GC time
Loading theory "Draft.utp_lift" (required by "Draft.gcdTemplates" via "Draft.gcd" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp")
### theory "Draft.utp_lift"
### 0.067s elapsed time, 0.129s cpu time, 0.045s GC time
### theory "Draft.utp_pred_laws"
### 0.905s elapsed time, 1.639s cpu time, 0.159s GC time
Loading theory "Draft.utp_healthy" (required by "Draft.gcdTemplates" via "Draft.gcd" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp" via "Draft.utp_recursion" via "Draft.utp_rel")
Loading theory "Draft.utp_sequent" (required by "Draft.gcdTemplates" via "Draft.gcd" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp" via "Draft.utp_dynlog")
### theory "Draft.utp_sequent"
### 0.197s elapsed time, 0.620s cpu time, 0.485s GC time
### Ambiguous input (line 129 of "$AFP/UTP/utp/utp_healthy.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Idempotent) ("_position" f)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" f)
###       ("_cargs"
###         ("\<^const>utp_pred.taut"
###           ("\<^const>HOL.eq"
###             ("\<^const>Set.image" ("_position" f) ("_position" A))
###             ("_position" f)))
###         ("_position" A)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Idempotent) ("_position" f)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.image" ("_position" f)
###       ("_applC" ("_position" f)
###         ("_cargs"
###           ("\<^const>utp_pred.taut"
###             ("\<^const>HOL.eq" ("_position" A) ("_position" f)))
###           ("_position" A))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Idempotent) ("_position" f)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.image" ("_position" f)
###         ("\<^const>Set.image" ("_position" f) ("_position" A)))
###       ("\<^const>Set.image" ("_position" f) ("_position" A)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Idempotent) ("_position" f)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" f)
###         ("_cargs" ("\<^const>utp_pred.taut" ("_position" f))
###           ("_position" A)))
###       ("\<^const>Set.image" ("_position" f) ("_position" A)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.utp_healthy"
### 0.524s elapsed time, 0.962s cpu time, 0.524s GC time
Loading theory "Draft.utp_rel" (required by "Draft.gcdTemplates" via "Draft.gcd" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp" via "Draft.utp_recursion")
### theory "Draft.utp_rel"
### 0.954s elapsed time, 1.078s cpu time, 0.108s GC time
Loading theory "Draft.utp_recursion" (required by "Draft.gcdTemplates" via "Draft.gcd" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp")
Loading theory "Draft.utp_state_parser" (required by "Draft.gcdTemplates" via "Draft.gcd" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp")
### theory "Draft.utp_state_parser"
### 0.045s elapsed time, 0.092s cpu time, 0.000s GC time
"LOCAL (x, y, z) \<bullet> x := &x + &z"
  :: "(int * real * int) hrel"
### theory "Draft.utp_recursion"
### 0.143s elapsed time, 0.192s cpu time, 0.000s GC time
Loading theory "Draft.utp_rel_laws" (required by "Draft.gcdTemplates" via "Draft.gcd" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp" via "Draft.utp_dynlog" via "Draft.utp_wp" via "Draft.utp_hoare")
### Ambiguous input (line 409 of "$AFP/UTP/utp/utp_rel_laws.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" vwb_lens) ("_position" x)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" vwb_lens) ("_position" y)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Lens_Laws.lens_indep" ("_position" x)
###             ("_position" y))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" uinj)
###       ("_assignment" ("_svid_list" ("_svid" x) ("_svid_unit" ("_svid" y)))
###         ("_uexprs" ("_uexp_l" ("_uuvar" ("_spvar" ("_svid" y))))
###           ("_uexp_l" ("_uuvar" ("_spvar" ("_svid" x)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" vwb_lens) ("_position" x)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" vwb_lens) ("_position" y)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Lens_Laws.lens_indep" ("_position" x)
###             ("_position" y))))))
###   ("\<^const>HOL.Trueprop"
###     ("_Update" ("_position" uinj)
###       ("_updbind" ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y)))
###         ("_tuple" ("_uuvar" ("_spvar" ("_svid" y)))
###           ("_tuple_arg" ("_uuvar" ("_spvar" ("_svid" x)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Partially applied constant "utp_rel.seqr" on left hand side of equation, in theorem:
### monoid_mult.prod_list II (;;) ?xs == foldr (;;) ?xs II
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### monoid_add.sum_list (\<sqinter>) false ?xs == foldr (\<sqinter>) ?xs false
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### comm_monoid_add.sum (\<sqinter>) false ?g (ran\<^sub>l ?xs) ==
### monoid_add.sum_list (\<sqinter>) false (map ?g (remdups ?xs))
### Type
### ?'a::type hrel => ?'a::type hrel => bool => ?'a::type hrel
### of constant "Rings.zero_neq_one.of_bool"
### is too specific compared to declared type
### ?'a::{} => ?'a::{} => bool => ?'a::{}, in theorem:
### zero_neq_one.of_bool II false False == false
### Type
### ?'a::type hrel => ?'a::type hrel => bool => ?'a::type hrel
### of constant "Rings.zero_neq_one.of_bool"
### is too specific compared to declared type
### ?'a::{} => ?'a::{} => bool => ?'a::{}, in theorem:
### zero_neq_one.of_bool II false True == II
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### numeral.numeral II (\<sqinter>) num.One == II
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### numeral.numeral II (\<sqinter>) (num.Bit0 ?n) ==
### let m = numeral.numeral II (\<sqinter>) ?n in m \<sqinter> m
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### numeral.numeral II (\<sqinter>) (num.Bit1 ?n) ==
### let m = numeral.numeral II (\<sqinter>) ?n in m \<sqinter> m \<sqinter> II
### theory "Draft.utp_rel_laws"
### 1.773s elapsed time, 2.582s cpu time, 0.971s GC time
Loading theory "Draft.utp_theory" (required by "Draft.gcdTemplates" via "Draft.gcd" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp" via "Draft.utp_dynlog" via "Draft.utp_wp" via "Draft.utp_hoare")
locale utp_theory
  fixes hcond :: "'\<alpha> hrel => '\<alpha> hrel"  (\<open>\<H>\<close>)
  assumes "utp_theory \<H>"
locale utp_theory_lattice
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
  assumes "utp_theory_lattice \<H>"
locale utp_theory_lattice
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
  assumes "utp_theory_lattice \<H>"
locale utp_theory_mono
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
  assumes "utp_theory_mono \<H>"
locale utp_theory_mono
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
  assumes "utp_theory_mono \<H>"
locale utp_theory_continuous
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
  assumes "utp_theory_continuous \<H>"
locale utp_theory_continuous
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
  assumes "utp_theory_continuous \<H>"
locale utp_theory_rel
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
  assumes "utp_theory_rel \<H>"
locale utp_theory_cont_rel
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
  assumes "utp_theory_cont_rel \<H>"
locale utp_theory_units
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
    and utp_unit :: "'a hrel"  (\<open>\<I>\<I>\<close>)
  assumes "utp_theory_units \<H> \<I>\<I>"
locale utp_theory_left_unital
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
    and utp_unit :: "'a hrel"  (\<open>\<I>\<I>\<close>)
  assumes "utp_theory_left_unital \<H> \<I>\<I>"
locale utp_theory_right_unital
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
    and utp_unit :: "'a hrel"  (\<open>\<I>\<I>\<close>)
  assumes "utp_theory_right_unital \<H> \<I>\<I>"
locale utp_theory_unital
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
    and utp_unit :: "'a hrel"  (\<open>\<I>\<I>\<close>)
  assumes "utp_theory_unital \<H> \<I>\<I>"
locale utp_theory_mono_unital
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
    and utp_unit :: "'a hrel"  (\<open>\<I>\<I>\<close>)
  assumes "utp_theory_mono_unital \<H> \<I>\<I>"
locale utp_theory_cont_unital
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
    and utp_unit :: "'a hrel"  (\<open>\<I>\<I>\<close>)
  assumes "utp_theory_cont_unital \<H> \<I>\<I>"
locale utp_theory_unital_zerol
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
    and utp_unit :: "'a hrel"  (\<open>\<I>\<I>\<close>)
  assumes "utp_theory_unital_zerol \<H> \<I>\<I>"
locale utp_theory_cont_unital_zerol
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
    and utp_unit :: "'a hrel"  (\<open>\<I>\<I>\<close>)
  assumes "utp_theory_cont_unital_zerol \<H> \<I>\<I>"
### Cannot skip proof of schematic goal statement
[| Mono\<^bsub>rel_theory.thy_order\<^esub> ?f;
   ?f : UNIV \<rightarrow> UNIV |]
==> rel_theory.utp_gfp ?f = ?f (rel_theory.utp_gfp ?f)
### theory "Draft.utp_theory"
### 1.585s elapsed time, 1.727s cpu time, 0.228s GC time
Loading theory "Draft.utp_hoare" (required by "Draft.gcdTemplates" via "Draft.gcd" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp" via "Draft.utp_dynlog" via "Draft.utp_wp")
### theory "Draft.utp_hoare"
### 0.567s elapsed time, 0.705s cpu time, 0.112s GC time
Loading theory "Draft.utp_concurrency" (required by "Draft.gcdTemplates" via "Draft.gcd" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp")
Loading theory "Draft.utp_wp" (required by "Draft.gcdTemplates" via "Draft.gcd" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp" via "Draft.utp_dynlog")
Loading theory "Draft.utp_rel_opsem" (required by "Draft.gcdTemplates" via "Draft.gcd" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp" via "Draft.utp_sym_eval")
Found termination order: "{}"
### Ambiguous input (line 26 of "$AFP/UTP/utp/utp_rel_opsem.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>utp_rel_opsem.trel"
###     ("_tuple" ("_position" \<sigma>)
###       ("_tuple_arg"
###         ("_assignment" ("_svid_unit" ("_svid" x))
###           ("_uexp_l" ("_position" v)))))
###     ("_tuple"
###       ("_SubstUpd" ("_position" \<sigma>)
###         ("_smaplet" ("_salphavar" ("_spvar" ("_svid" x)))
###           ("\<^const>utp_subst.usubst" ("_position" \<sigma>)
###             ("_position" v))))
###       ("_tuple_arg" ("\<^const>utp_rel.uskip")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>utp_rel_opsem.trel"
###     ("_assignment"
###       ("_svid_list" ("_svid" \<sigma>) ("_svid_unit" ("_svid" x)))
###       ("_uexp_l" ("_position" v)))
###     ("_tuple"
###       ("_SubstUpd" ("_position" \<sigma>)
###         ("_smaplet" ("_salphavar" ("_spvar" ("_svid" x)))
###           ("\<^const>utp_subst.usubst" ("_position" \<sigma>)
###             ("_position" v))))
###       ("_tuple_arg" ("\<^const>utp_rel.uskip")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.utp_rel_opsem"
### 0.189s elapsed time, 0.548s cpu time, 0.078s GC time
Loading theory "Draft.utp_sym_eval" (required by "Draft.gcdTemplates" via "Draft.gcd" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp")
### theory "Draft.utp_wp"
### 0.241s elapsed time, 0.696s cpu time, 0.078s GC time
Loading theory "Draft.utp_dynlog" (required by "Draft.gcdTemplates" via "Draft.gcd" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp")
Loading theory "Draft.utp_sp" (required by "Draft.gcdTemplates" via "Draft.gcd" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp")
consts
  mrg_prior :: "'a \<Longrightarrow> ('a, 'b, 'c, 'd) mrg_scheme"
consts
  mrg_left :: "'e \<Longrightarrow> ('f, 'e, 'g, 'h) mrg_scheme"
consts
  mrg_right :: "'i \<Longrightarrow> ('j, 'k, 'i, 'l) mrg_scheme"
consts
  base\<^sub>L ::
    "('m, 'n, 'o) mrg \<Longrightarrow> ('m, 'n, 'o, 'p) mrg_scheme"
consts
  more\<^sub>L :: "'q \<Longrightarrow> ('r, 's, 't, 'q) mrg_scheme"
consts
  all\<^sub>L ::
    "<('a, 'b,
       'c) mrg, 'd> \<Longleftrightarrow> ('a, 'b, 'c, 'd) mrg_scheme"
### theory "Draft.utp_sym_eval"
### 0.188s elapsed time, 0.701s cpu time, 0.000s GC time
### theory "Draft.utp_sp"
### 0.239s elapsed time, 0.828s cpu time, 0.067s GC time
### theory "Draft.utp_dynlog"
### 0.754s elapsed time, 1.881s cpu time, 0.204s GC time
### theory "Draft.utp_concurrency"
### 1.167s elapsed time, 2.759s cpu time, 0.282s GC time
Loading theory "Draft.utp" (required by "Draft.gcdTemplates" via "Draft.gcd" via "Draft.utp_easy_parser" via "Draft.utp_full")
### theory "Draft.utp"
### 0.801s elapsed time, 0.854s cpu time, 0.060s GC time
Loading theory "Draft.utp_expr_ovld" (required by "Draft.gcdTemplates" via "Draft.gcd" via "Draft.utp_easy_parser" via "Draft.utp_full")
### theory "Draft.utp_expr_ovld"
### 0.115s elapsed time, 0.150s cpu time, 0.063s GC time
Loading theory "Draft.utp_full" (required by "Draft.gcdTemplates" via "Draft.gcd" via "Draft.utp_easy_parser")
### theory "Draft.utp_full"
### 0.028s elapsed time, 0.029s cpu time, 0.000s GC time
Loading theory "Draft.utp_easy_parser" (required by "Draft.gcdTemplates" via "Draft.gcd")
### theory "Draft.utp_easy_parser"
### 0.254s elapsed time, 0.287s cpu time, 0.060s GC time
Loading theory "Draft.gcd" (required by "Draft.gcdTemplates")
consts
  x :: "int \<Longrightarrow> 'a gcd_ss_scheme"
consts
  y :: "int \<Longrightarrow> 'b gcd_ss_scheme"
consts
  base\<^sub>L :: "gcd_ss \<Longrightarrow> 'c gcd_ss_scheme"
consts
  more\<^sub>L :: "'d \<Longrightarrow> 'd gcd_ss_scheme"
consts
  all\<^sub>L :: "<gcd_ss, 'a> \<Longleftrightarrow> 'a gcd_ss_scheme"
### theory "Draft.gcd"
### 0.357s elapsed time, 0.357s cpu time, 0.000s GC time
Loading theory "Draft.gcdTemplates"
val templateLemmas =
   [("GCD.gcd_1_int", "gcd ?m 1 = 1",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("GCD.gcd_0_left_nat", "gcd 0 ?x = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("GCD.gcd_1_nat", "gcd ?m 1 = 1",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("GCD.gcd_0_nat", "gcd ?x 0 = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("GCD.gcd_idem_nat", "gcd ?x ?x = ?x",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("GCD.gcd_ge_0_int", "0 <= gcd ?x ?y",
     template_inequation
      (less_equals, template_hole 1,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("GCD.gcd_0_left_int", "gcd 0 ?x = \<bar>?x\<bar>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("GCD.gcd_0_int", "gcd ?x 0 = \<bar>?x\<bar>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("GCD.gcd_idem_int", "gcd ?x ?x = \<bar>?x\<bar>",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("GCD.gcd_Suc_0", "gcd ?m (Suc 0) = Suc 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)),
       template_app (template_hole 1, template_hole 0))),
    ("GCD.gcd_abs2_int", "gcd ?x \<bar>?y\<bar> = gcd ?x ?y",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("GCD.gcd_neg2_int", "gcd ?x (- ?y) = gcd ?x ?y",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("GCD.gcd_abs1_int", "gcd \<bar>?x\<bar> ?y = gcd ?x ?y",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("GCD.gcd_neg1_int", "gcd (- ?x) ?y = gcd ?x ?y",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("GCD.abs_gcd_int", "\<bar>gcd ?x ?y\<bar> = gcd ?x ?y",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("GCD.gcd_red_int", "gcd ?x ?y = gcd ?y (?x mod ?y)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("GCD.gcd_red_nat", "gcd ?x ?y = gcd ?y (?x mod ?y)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("GCD.gcd_neg_numeral_2_int",
     "gcd ?x (- numeral ?n) = gcd ?x (numeral ?n)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("GCD.gcd_int_int_eq", "gcd (int ?m) (int ?n) = int (gcd ?m ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("GCD.gcd_neg_numeral_1_int",
     "gcd (- numeral ?n) ?x = gcd (numeral ?n) ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("GCD.gcd_le1_int", "0 < ?a ==> gcd ?a ?b <= ?a",
     template_implication
      ([template_inequation (less_than, template_hole 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 1))),
    ("GCD.gcd_le2_int", "0 < ?b ==> gcd ?a ?b <= ?b",
     template_implication
      ([template_inequation (less_than, template_hole 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("GCD.gcd_proj1_if_dvd_nat", "?x dvd ?y ==> gcd ?x ?y = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 1))),
    ("GCD.gcd_proj2_if_dvd_nat", "?y dvd ?x ==> gcd ?x ?y = ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("GCD.prod_gcd_lcm_nat", "?m * ?n = gcd ?m ?n * lcm ?m ?n",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("GCD.gcd_nat_abs_right_eq",
     "gcd ?n (nat \<bar>?k\<bar>) = nat (gcd (int ?n) ?k)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("GCD.gcd_nat_abs_left_eq",
     "gcd (nat \<bar>?k\<bar>) ?n = nat (gcd ?k (int ?n))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1))),
         template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("GCD.gcd_proj1_if_dvd_int", "?x dvd ?y ==> gcd ?x ?y = \<bar>?x\<bar>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("GCD.gcd_proj2_if_dvd_int", "?y dvd ?x ==> gcd ?x ?y = \<bar>?y\<bar>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app (template_hole 0, template_var 1)))),
    ("GCD.gcd_le1_nat", "\<not> ?a = 0 ==> gcd ?a ?b <= ?a",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 1))),
    ("GCD.gcd_le2_nat", "\<not> ?b = 0 ==> gcd ?a ?b <= ?b",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("GCD.prod_gcd_lcm_int",
     "\<bar>?m\<bar> * \<bar>?n\<bar> = gcd ?m ?n * lcm ?m ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("GCD.gcd_mult_distrib_nat", "?k * gcd ?m ?n = gcd (?k * ?m) (?k * ?n)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("GCD.gcd_mult_distrib_int",
     "\<bar>?k\<bar> * gcd ?m ?n = gcd (?k * ?m) (?k * ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("GCD.gcd_non_0_int", "0 < ?y ==> gcd ?x ?y = gcd ?y (?x mod ?y)",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("GCD.gcd_diff2_nat", "?m <= ?n ==> gcd (?n - ?m) ?n = gcd ?m ?n",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("GCD.gcd_diff1_nat", "?n <= ?m ==> gcd (?m - ?n) ?n = gcd ?m ?n",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("GCD.gcd_pos_int",
     "(0 < gcd ?m ?n) = (\<not> ?m = 0 \<or> \<not> ?n = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_hole 4))),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_hole 4)))
           ))),
    ("GCD.gcd_pos_nat",
     "(0 < gcd ?m ?n) = (\<not> ?m = 0 \<or> \<not> ?n = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_hole 4))),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_hole 4)))
           ))),
    ("GCD.gcd_non_0_nat",
     "\<not> ?y = 0 ==> gcd ?x ?y = gcd ?y (?x mod ?y)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("GCD.gcd_code_int",
     "gcd ?k ?l =
      \<bar>if ?l = 0 then ?k
            else gcd ?l (\<bar>?k\<bar> mod \<bar>?l\<bar>)\<bar>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_hole 1)),
                 template_var 1),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 3, template_var 1)),
                   template_app (template_hole 3, template_var 0)))))
           ))),
    ("GCD.gcd_code_integer",
     "gcd ?k ?l =
      \<bar>if ?l = 0 then ?k
            else gcd ?l (\<bar>?k\<bar> mod \<bar>?l\<bar>)\<bar>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_hole 1)),
                 template_var 1),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 3, template_var 1)),
                   template_app (template_hole 3, template_var 0)))))
           ))),
    ("GCD.gcd_is_Max_divisors_nat",
     "0 < ?n ==> gcd ?m ?n = Max {d. d dvd ?m \<and> d dvd ?n}",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 0), template_var 1),
         template_app
          (template_hole 3, template_app (template_hole 2, t_empty))))),
    ("GCD.gcd_is_Max_divisors_int",
     "\<not> ?n = 0 ==> gcd ?m ?n = Max {d. d dvd ?m \<and> d dvd ?n}",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 0), template_var 1),
         template_app
          (template_hole 3, template_app (template_hole 2, t_empty))))),
    ("GCD.gcd_unique_nat",
     "(?d dvd ?a \<and>
       ?d dvd ?b \<and> (ALL e. e dvd ?a \<and> e dvd ?b --> e dvd ?d)) =
      (?d = gcd ?a ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 0)),
                template_app (template_hole 3, t_empty)))
            )],
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("GCD.gcd_unique_int",
     "(0 <= ?d \<and>
       ?d dvd ?a \<and>
       ?d dvd ?b \<and> (ALL e. e dvd ?a \<and> e dvd ?b --> e dvd ?d)) =
      (?d = gcd ?a ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 2)),
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 1)),
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 4, template_var 2),
                      template_var 0)),
                  template_app (template_hole 3, t_empty))))
            )],
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("GCD.gcd_nat_induct",
     "[| !!m. ?P m 0; !!m n. [| 0 < n; ?P n (m mod n) |] ==> ?P m n |]
      ==> ?P ?m ?n",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 2, template_var 1), template_var 0)
           ))),
    ("GCD.bezout_gcd_nat'",
     "EX x y.
         ?b * y <= ?a * x \<and> ?a * x - ?b * y = gcd ?a ?b \<or>
         ?a * y <= ?b * x \<and> ?b * x - ?a * y = gcd ?a ?b",
     template_predicate (template_app (template_hole 7, t_empty))),
    ("GCD.gcd_cases_int",
     "[| [| 0 <= ?x; 0 <= ?y |] ==> ?P (gcd ?x ?y);
         [| 0 <= ?x; ?y <= 0 |] ==> ?P (gcd ?x (- ?y));
         [| ?x <= 0; 0 <= ?y |] ==> ?P (gcd (- ?x) ?y);
         [| ?x <= 0; ?y <= 0 |] ==> ?P (gcd (- ?x) (- ?y)) |]
      ==> ?P (gcd ?x ?y)",
     template_implication
      ([template_implication
         ([template_inequation
            (less_equals, template_hole 2, template_var 2)],
          template_implication
           ([template_inequation
              (less_equals, template_hole 2, template_var 1)],
            template_predicate
             (
                template_app
                 (template_var 0,
                  template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 1))
                ))),
        template_implication
         ([template_inequation
            (less_equals, template_hole 2, template_var 2)],
          template_implication
           ([template_inequation
              (less_equals, template_var 1, template_hole 2)],
            template_predicate
             (
                template_app
                 (template_var 0,
                  template_app
                   (template_app (template_hole 1, template_var 2),
                    template_app (template_hole 0, template_var 1)))
                ))),
        template_implication
         ([template_inequation
            (less_equals, template_var 2, template_hole 2)],
          template_implication
           ([template_inequation
              (less_equals, template_hole 2, template_var 1)],
            template_predicate
             (
                template_app
                 (template_var 0,
                  template_app
                   (template_app
                     (template_hole 1,
                      template_app (template_hole 0, template_var 2)),
                    template_var 1))
                ))),
        template_implication
         ([template_inequation
            (less_equals, template_var 2, template_hole 2)],
          template_implication
           ([template_inequation
              (less_equals, template_var 1, template_hole 2)],
            template_predicate
             (
                template_app
                 (template_var 0,
                  template_app
                   (template_app
                     (template_hole 1,
                      template_app (template_hole 0, template_var 2)),
                    template_app (template_hole 0, template_var 1)))
                )))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))
           )))]:
   (string * thm * template) list
### theory "Draft.gcdTemplates"
### 0.789s elapsed time, 1.053s cpu time, 0.157s GC time
val it = (): unit
