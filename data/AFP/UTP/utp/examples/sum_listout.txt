Loading theory "Draft.utp_parser_utils" (required by "Draft.sum_listTemplates" via "Draft.sum_list" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp" via "Draft.utp_var")
Loading theory "Draft.Templates" (required by "Draft.sum_listTemplates" via "Draft.ExtrEqs")
signature UTP_PARSER_UTILS =
  sig
    val mk_char: string -> Ast.ast
    val mk_nib: int -> Ast.ast
    val mk_string: string list -> Ast.ast
    val string_ast_tr: Ast.ast list -> Ast.ast
  end
signature NAME_UTILS =
  sig
    val deep_unmark_const: term -> term
    val last_char_str: string -> string
    val mk_id: string -> term
    val repeat_char: char -> int -> string
    val right_crop_by: int -> string -> string
  end
structure Utp_Parser_Utils: UTP_PARSER_UTILS
structure Name_Utils: NAME_UTILS
### theory "Draft.utp_parser_utils"
### 0.042s elapsed time, 0.121s cpu time, 0.000s GC time
Loading theory "Draft.utp_var" (required by "Draft.sum_listTemplates" via "Draft.sum_list" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.081s elapsed time, 0.208s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.sum_listTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.596s elapsed time, 1.200s cpu time, 0.108s GC time
### theory "Draft.utp_var"
### 0.697s elapsed time, 1.345s cpu time, 0.108s GC time
Loading theory "Draft.utp_expr" (required by "Draft.sum_listTemplates" via "Draft.sum_list" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp")
instantiation
  uexpr :: (zero, type) zero
  zero_uexpr == zero_class.zero :: ('a, 'b) uexpr
instantiation
  uexpr :: (one, type) one
  one_uexpr == one_class.one :: ('a, 'b) uexpr
instantiation
  uexpr :: (plus, type) plus
  plus_uexpr == plus :: ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (ord, type) ord
  less_eq_uexpr == less_eq :: ('a, 'b) uexpr => ('a, 'b) uexpr => bool
  less_uexpr == less :: ('a, 'b) uexpr => ('a, 'b) uexpr => bool
### theory "Draft.utp_expr"
### 0.795s elapsed time, 0.829s cpu time, 0.060s GC time
Loading theory "Draft.utp_expr_insts" (required by "Draft.sum_listTemplates" via "Draft.sum_list" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp")
instantiation
  uexpr :: (uminus, type) uminus
  uminus_uexpr == uminus :: ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (minus, type) minus
  minus_uexpr == minus :: ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (times, type) times
  times_uexpr == times :: ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (divide, type) divide
  divide_uexpr == divide ::
    ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (inverse, type) inverse
  inverse_uexpr == inverse :: ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (modulo, type) modulo
  modulo_uexpr == modulo ::
    ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (sgn, type) sgn
  sgn_uexpr == sgn :: ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (abs, type) abs
  abs_uexpr == abs :: ('a, 'b) uexpr => ('a, 'b) uexpr
### theory "Draft.utp_expr_insts"
### 0.228s elapsed time, 0.228s cpu time, 0.000s GC time
Loading theory "Draft.utp_expr_funcs" (required by "Draft.sum_listTemplates" via "Draft.sum_list" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp")
Loading theory "Draft.utp_unrest" (required by "Draft.sum_listTemplates" via "Draft.sum_list" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp")
### theory "Draft.utp_expr_funcs"
### 0.149s elapsed time, 0.304s cpu time, 0.057s GC time
### theory "Draft.utp_unrest"
### 0.233s elapsed time, 0.389s cpu time, 0.057s GC time
Loading theory "Draft.utp_usedby" (required by "Draft.sum_listTemplates" via "Draft.sum_list" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp")
Loading theory "Draft.utp_subst" (required by "Draft.sum_listTemplates" via "Draft.sum_list" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp")
### theory "Draft.utp_usedby"
### 0.083s elapsed time, 0.165s cpu time, 0.000s GC time
Loading theory "Draft.utp_tactics" (required by "Draft.sum_listTemplates" via "Draft.sum_list" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp" via "Draft.utp_meta_subst")
signature UEXPR_REP_EQ =
  sig
    val get_uexpr_rep_eq_thms: theory -> thm list
    val read_uexpr_rep_eq_thms: theory -> theory
  end
structure uexpr_rep_eq: UEXPR_REP_EQ
val it = (): unit
### theory "Draft.utp_subst"
### 0.432s elapsed time, 0.871s cpu time, 0.052s GC time
structure List_Extra: sig val contains: ''a -> ''a list -> bool end
signature BASIC_TACTICS =
  sig
    val fast_transfer: Proof.context -> thm list -> context_tactic
    val interp_tac: Proof.context -> thm list -> context_tactic
    val slow_transfer: Proof.context -> thm list -> context_tactic
    val utp_auto_tac: Proof.context -> thm list -> context_tactic
    val utp_blast_tac: Proof.context -> thm list -> context_tactic
    val utp_simp_tac: Proof.context -> thm list -> context_tactic
  end
structure Basic_Tactics: BASIC_TACTICS
signature UTP_TACTICS =
  sig
    val inst_gen_pred_tac:
       utp_tac_args ->
         (Proof.context -> thm list -> context_tactic) ->
           Proof.context -> thm list -> context_tactic
    val inst_gen_rel_tac:
       utp_tac_args ->
         (Proof.context -> thm list -> context_tactic) ->
           Proof.context -> thm list -> context_tactic
    val no_interpN: string
    val robustN: string
    val scan_args: utp_tac_args parser
    type utp_tac_args
  end
structure UTP_Tactics: UTP_TACTICS
### theory "Draft.utp_tactics"
### 1.430s elapsed time, 1.854s cpu time, 0.095s GC time
Loading theory "Draft.utp_meta_subst" (required by "Draft.sum_listTemplates" via "Draft.sum_list" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp")
### theory "Draft.utp_meta_subst"
### 0.373s elapsed time, 0.431s cpu time, 0.033s GC time
Loading theory "Draft.utp_pred" (required by "Draft.sum_listTemplates" via "Draft.sum_list" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp" via "Draft.utp_alphabet")
instantiation
  uexpr :: (lattice, type) lattice
  inf_uexpr == inf :: ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
  sup_uexpr == sup :: ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (bounded_lattice, type) bounded_lattice
  bot_uexpr == bot :: ('a, 'b) uexpr
  top_uexpr == top_class.top :: ('a, 'b) uexpr
instantiation
  uexpr :: (complete_lattice, type) complete_lattice
  Inf_uexpr == Inf :: ('a, 'b) uexpr set => ('a, 'b) uexpr
  Sup_uexpr == Sup :: ('a, 'b) uexpr set => ('a, 'b) uexpr
### Ignoring duplicate rewrite rule:
### ?X1 \<subseteq>\<^sub>L ?X1 == True
### Ignoring duplicate rewrite rule:
### wb_lens ?Y1 ==> ?X1 \<subseteq>\<^sub>L ?X1 +\<^sub>L ?Y1 == True
### theory "Draft.utp_pred"
### 1.395s elapsed time, 1.783s cpu time, 0.508s GC time
Loading theory "Draft.utp_alphabet" (required by "Draft.sum_listTemplates" via "Draft.sum_list" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp")
Loading theory "Draft.utp_pred_laws" (required by "Draft.sum_listTemplates" via "Draft.sum_list" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp")
### Partially applied constant "utp_pred.conj_upred" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<and>) (ran\<^sub>l (?x # ?xs)) ==
### fold (\<and>) ?xs ?x
### Partially applied constant "utp_pred.disj_upred" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<or>) (ran\<^sub>l (?x # ?xs)) ==
### fold (\<or>) ?xs ?x
### theory "Draft.utp_alphabet"
### 0.588s elapsed time, 1.279s cpu time, 0.155s GC time
Loading theory "Draft.utp_lift" (required by "Draft.sum_listTemplates" via "Draft.sum_list" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp")
### theory "Draft.utp_lift"
### 0.046s elapsed time, 0.091s cpu time, 0.000s GC time
### theory "Draft.utp_pred_laws"
### 0.918s elapsed time, 1.652s cpu time, 0.155s GC time
Loading theory "Draft.utp_healthy" (required by "Draft.sum_listTemplates" via "Draft.sum_list" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp" via "Draft.utp_recursion" via "Draft.utp_rel")
Loading theory "Draft.utp_sequent" (required by "Draft.sum_listTemplates" via "Draft.sum_list" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp" via "Draft.utp_dynlog")
### theory "Draft.utp_sequent"
### 0.212s elapsed time, 0.688s cpu time, 0.535s GC time
### Ambiguous input (line 129 of "$AFP/UTP/utp/utp_healthy.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Idempotent) ("_position" f)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" f)
###       ("_cargs"
###         ("\<^const>utp_pred.taut"
###           ("\<^const>HOL.eq"
###             ("\<^const>Set.image" ("_position" f) ("_position" A))
###             ("_position" f)))
###         ("_position" A)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Idempotent) ("_position" f)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.image" ("_position" f)
###       ("_applC" ("_position" f)
###         ("_cargs"
###           ("\<^const>utp_pred.taut"
###             ("\<^const>HOL.eq" ("_position" A) ("_position" f)))
###           ("_position" A))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Idempotent) ("_position" f)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.image" ("_position" f)
###         ("\<^const>Set.image" ("_position" f) ("_position" A)))
###       ("\<^const>Set.image" ("_position" f) ("_position" A)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Idempotent) ("_position" f)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" f)
###         ("_cargs" ("\<^const>utp_pred.taut" ("_position" f))
###           ("_position" A)))
###       ("\<^const>Set.image" ("_position" f) ("_position" A)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.utp_healthy"
### 0.543s elapsed time, 1.032s cpu time, 0.572s GC time
Loading theory "Draft.utp_rel" (required by "Draft.sum_listTemplates" via "Draft.sum_list" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp" via "Draft.utp_recursion")
### theory "Draft.utp_rel"
### 0.958s elapsed time, 1.081s cpu time, 0.108s GC time
Loading theory "Draft.utp_recursion" (required by "Draft.sum_listTemplates" via "Draft.sum_list" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp")
Loading theory "Draft.utp_state_parser" (required by "Draft.sum_listTemplates" via "Draft.sum_list" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp")
### theory "Draft.utp_state_parser"
### 0.045s elapsed time, 0.092s cpu time, 0.000s GC time
"LOCAL (x, y, z) \<bullet> x := &x + &z"
  :: "(int * real * int) hrel"
### theory "Draft.utp_recursion"
### 0.143s elapsed time, 0.193s cpu time, 0.000s GC time
Loading theory "Draft.utp_rel_laws" (required by "Draft.sum_listTemplates" via "Draft.sum_list" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp" via "Draft.utp_dynlog" via "Draft.utp_wp" via "Draft.utp_hoare")
### Ambiguous input (line 409 of "$AFP/UTP/utp/utp_rel_laws.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" vwb_lens) ("_position" x)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" vwb_lens) ("_position" y)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Lens_Laws.lens_indep" ("_position" x)
###             ("_position" y))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" uinj)
###       ("_assignment" ("_svid_list" ("_svid" x) ("_svid_unit" ("_svid" y)))
###         ("_uexprs" ("_uexp_l" ("_uuvar" ("_spvar" ("_svid" y))))
###           ("_uexp_l" ("_uuvar" ("_spvar" ("_svid" x)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" vwb_lens) ("_position" x)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" vwb_lens) ("_position" y)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Lens_Laws.lens_indep" ("_position" x)
###             ("_position" y))))))
###   ("\<^const>HOL.Trueprop"
###     ("_Update" ("_position" uinj)
###       ("_updbind" ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y)))
###         ("_tuple" ("_uuvar" ("_spvar" ("_svid" y)))
###           ("_tuple_arg" ("_uuvar" ("_spvar" ("_svid" x)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Partially applied constant "utp_rel.seqr" on left hand side of equation, in theorem:
### monoid_mult.prod_list II (;;) ?xs == foldr (;;) ?xs II
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### monoid_add.sum_list (\<sqinter>) false ?xs == foldr (\<sqinter>) ?xs false
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### comm_monoid_add.sum (\<sqinter>) false ?g (ran\<^sub>l ?xs) ==
### monoid_add.sum_list (\<sqinter>) false (map ?g (remdups ?xs))
### Type
### ?'a::type hrel => ?'a::type hrel => bool => ?'a::type hrel
### of constant "Rings.zero_neq_one.of_bool"
### is too specific compared to declared type
### ?'a::{} => ?'a::{} => bool => ?'a::{}, in theorem:
### zero_neq_one.of_bool II false False == false
### Type
### ?'a::type hrel => ?'a::type hrel => bool => ?'a::type hrel
### of constant "Rings.zero_neq_one.of_bool"
### is too specific compared to declared type
### ?'a::{} => ?'a::{} => bool => ?'a::{}, in theorem:
### zero_neq_one.of_bool II false True == II
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### numeral.numeral II (\<sqinter>) num.One == II
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### numeral.numeral II (\<sqinter>) (num.Bit0 ?n) ==
### let m = numeral.numeral II (\<sqinter>) ?n in m \<sqinter> m
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### numeral.numeral II (\<sqinter>) (num.Bit1 ?n) ==
### let m = numeral.numeral II (\<sqinter>) ?n in m \<sqinter> m \<sqinter> II
### theory "Draft.utp_rel_laws"
### 1.496s elapsed time, 1.801s cpu time, 0.280s GC time
Loading theory "Draft.utp_theory" (required by "Draft.sum_listTemplates" via "Draft.sum_list" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp" via "Draft.utp_dynlog" via "Draft.utp_wp" via "Draft.utp_hoare")
locale utp_theory
  fixes hcond :: "'\<alpha> hrel => '\<alpha> hrel"  (\<open>\<H>\<close>)
  assumes "utp_theory \<H>"
locale utp_theory_lattice
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
  assumes "utp_theory_lattice \<H>"
locale utp_theory_lattice
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
  assumes "utp_theory_lattice \<H>"
locale utp_theory_mono
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
  assumes "utp_theory_mono \<H>"
locale utp_theory_mono
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
  assumes "utp_theory_mono \<H>"
locale utp_theory_continuous
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
  assumes "utp_theory_continuous \<H>"
locale utp_theory_continuous
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
  assumes "utp_theory_continuous \<H>"
locale utp_theory_rel
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
  assumes "utp_theory_rel \<H>"
locale utp_theory_cont_rel
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
  assumes "utp_theory_cont_rel \<H>"
locale utp_theory_units
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
    and utp_unit :: "'a hrel"  (\<open>\<I>\<I>\<close>)
  assumes "utp_theory_units \<H> \<I>\<I>"
locale utp_theory_left_unital
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
    and utp_unit :: "'a hrel"  (\<open>\<I>\<I>\<close>)
  assumes "utp_theory_left_unital \<H> \<I>\<I>"
locale utp_theory_right_unital
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
    and utp_unit :: "'a hrel"  (\<open>\<I>\<I>\<close>)
  assumes "utp_theory_right_unital \<H> \<I>\<I>"
locale utp_theory_unital
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
    and utp_unit :: "'a hrel"  (\<open>\<I>\<I>\<close>)
  assumes "utp_theory_unital \<H> \<I>\<I>"
locale utp_theory_mono_unital
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
    and utp_unit :: "'a hrel"  (\<open>\<I>\<I>\<close>)
  assumes "utp_theory_mono_unital \<H> \<I>\<I>"
locale utp_theory_cont_unital
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
    and utp_unit :: "'a hrel"  (\<open>\<I>\<I>\<close>)
  assumes "utp_theory_cont_unital \<H> \<I>\<I>"
locale utp_theory_unital_zerol
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
    and utp_unit :: "'a hrel"  (\<open>\<I>\<I>\<close>)
  assumes "utp_theory_unital_zerol \<H> \<I>\<I>"
locale utp_theory_cont_unital_zerol
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
    and utp_unit :: "'a hrel"  (\<open>\<I>\<I>\<close>)
  assumes "utp_theory_cont_unital_zerol \<H> \<I>\<I>"
### Cannot skip proof of schematic goal statement
[| Mono\<^bsub>rel_theory.thy_order\<^esub> ?f;
   ?f : UNIV \<rightarrow> UNIV |]
==> rel_theory.utp_gfp ?f = ?f (rel_theory.utp_gfp ?f)
### theory "Draft.utp_theory"
### 1.591s elapsed time, 1.735s cpu time, 0.248s GC time
Loading theory "Draft.utp_hoare" (required by "Draft.sum_listTemplates" via "Draft.sum_list" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp" via "Draft.utp_dynlog" via "Draft.utp_wp")
### theory "Draft.utp_hoare"
### 0.556s elapsed time, 0.659s cpu time, 0.061s GC time
Loading theory "Draft.utp_concurrency" (required by "Draft.sum_listTemplates" via "Draft.sum_list" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp")
Loading theory "Draft.utp_rel_opsem" (required by "Draft.sum_listTemplates" via "Draft.sum_list" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp" via "Draft.utp_sym_eval")
Loading theory "Draft.utp_wp" (required by "Draft.sum_listTemplates" via "Draft.sum_list" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp" via "Draft.utp_dynlog")
Found termination order: "{}"
### Ambiguous input (line 26 of "$AFP/UTP/utp/utp_rel_opsem.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>utp_rel_opsem.trel"
###     ("_tuple" ("_position" \<sigma>)
###       ("_tuple_arg"
###         ("_assignment" ("_svid_unit" ("_svid" x))
###           ("_uexp_l" ("_position" v)))))
###     ("_tuple"
###       ("_SubstUpd" ("_position" \<sigma>)
###         ("_smaplet" ("_salphavar" ("_spvar" ("_svid" x)))
###           ("\<^const>utp_subst.usubst" ("_position" \<sigma>)
###             ("_position" v))))
###       ("_tuple_arg" ("\<^const>utp_rel.uskip")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>utp_rel_opsem.trel"
###     ("_assignment"
###       ("_svid_list" ("_svid" \<sigma>) ("_svid_unit" ("_svid" x)))
###       ("_uexp_l" ("_position" v)))
###     ("_tuple"
###       ("_SubstUpd" ("_position" \<sigma>)
###         ("_smaplet" ("_salphavar" ("_spvar" ("_svid" x)))
###           ("\<^const>utp_subst.usubst" ("_position" \<sigma>)
###             ("_position" v))))
###       ("_tuple_arg" ("\<^const>utp_rel.uskip")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.utp_rel_opsem"
### 0.198s elapsed time, 0.568s cpu time, 0.057s GC time
Loading theory "Draft.utp_sym_eval" (required by "Draft.sum_listTemplates" via "Draft.sum_list" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp")
### theory "Draft.utp_wp"
### 0.210s elapsed time, 0.605s cpu time, 0.057s GC time
Loading theory "Draft.utp_dynlog" (required by "Draft.sum_listTemplates" via "Draft.sum_list" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp")
Loading theory "Draft.utp_sp" (required by "Draft.sum_listTemplates" via "Draft.sum_list" via "Draft.utp_easy_parser" via "Draft.utp_full" via "Draft.utp")
consts
  mrg_prior :: "'a \<Longrightarrow> ('a, 'b, 'c, 'd) mrg_scheme"
consts
  mrg_left :: "'e \<Longrightarrow> ('f, 'e, 'g, 'h) mrg_scheme"
consts
  mrg_right :: "'i \<Longrightarrow> ('j, 'k, 'i, 'l) mrg_scheme"
consts
  base\<^sub>L ::
    "('m, 'n, 'o) mrg \<Longrightarrow> ('m, 'n, 'o, 'p) mrg_scheme"
consts
  more\<^sub>L :: "'q \<Longrightarrow> ('r, 's, 't, 'q) mrg_scheme"
consts
  all\<^sub>L ::
    "<('a, 'b,
       'c) mrg, 'd> \<Longleftrightarrow> ('a, 'b, 'c, 'd) mrg_scheme"
### theory "Draft.utp_sym_eval"
### 0.227s elapsed time, 0.849s cpu time, 0.047s GC time
### theory "Draft.utp_sp"
### 0.224s elapsed time, 0.838s cpu time, 0.047s GC time
### theory "Draft.utp_dynlog"
### 0.699s elapsed time, 1.789s cpu time, 0.128s GC time
### theory "Draft.utp_concurrency"
### 1.179s elapsed time, 2.686s cpu time, 0.236s GC time
Loading theory "Draft.utp" (required by "Draft.sum_listTemplates" via "Draft.sum_list" via "Draft.utp_easy_parser" via "Draft.utp_full")
### theory "Draft.utp"
### 0.850s elapsed time, 0.914s cpu time, 0.090s GC time
Loading theory "Draft.utp_expr_ovld" (required by "Draft.sum_listTemplates" via "Draft.sum_list" via "Draft.utp_easy_parser" via "Draft.utp_full")
### theory "Draft.utp_expr_ovld"
### 0.093s elapsed time, 0.093s cpu time, 0.000s GC time
Loading theory "Draft.utp_full" (required by "Draft.sum_listTemplates" via "Draft.sum_list" via "Draft.utp_easy_parser")
### theory "Draft.utp_full"
### 0.028s elapsed time, 0.029s cpu time, 0.000s GC time
Loading theory "Draft.utp_easy_parser" (required by "Draft.sum_listTemplates" via "Draft.sum_list")
### theory "Draft.utp_easy_parser"
### 0.255s elapsed time, 0.278s cpu time, 0.045s GC time
Loading theory "Draft.sum_list" (required by "Draft.sum_listTemplates")
consts
  i :: "nat \<Longrightarrow> 'a st_sum_list_scheme"
consts
  xs :: "int list \<Longrightarrow> 'b st_sum_list_scheme"
consts
  ans :: "int \<Longrightarrow> 'c st_sum_list_scheme"
consts
  base\<^sub>L :: "st_sum_list \<Longrightarrow> 'd st_sum_list_scheme"
consts
  more\<^sub>L :: "'e \<Longrightarrow> 'e st_sum_list_scheme"
consts
  all\<^sub>L ::
    "<st_sum_list, 'a> \<Longleftrightarrow> 'a st_sum_list_scheme"
### theory "Draft.sum_list"
### 0.601s elapsed time, 0.637s cpu time, 0.077s GC time
Loading theory "Draft.sum_listTemplates"
val templateLemmas =
   [("Groups_List.sum_list_rev", "sum_list (rev ?xs) = sum_list ?xs",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Groups_List.sum_list_replicate",
     "sum_list (replicate ?n ?c) = of_nat ?n * ?c",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Groups_List.sum_list_simps",
     "sum_list (?x # ?xs) = ?x + sum_list ?xs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Groups_List.sum_list_append",
     "sum_list (?xs @ ?ys) = sum_list ?xs + sum_list ?ys",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Groups_List.sum_list_filter_le_nat",
     "sum_list (map ?f (filter ?P ?xs)) <= sum_list (map ?f ?xs)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Groups_List.sum_set_upto_conv_sum_list_int",
     "sum ?f ran\<^sub>u([?i..?j]) = sum_list (map ?f [?i..?j])",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))))),
    ("Groups_List.sum_set_upt_conv_sum_list_nat",
     "sum ?f ran\<^sub>u([?m..<?n]) = sum_list (map ?f [?m..<?n])",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))))),
    ("Groups_List.sum_list_map_eq_sum_count",
     "sum_list (map ?f ?xs) =
      (SUM x:ran\<^sub>u(?xs). count_list ?xs x * ?f x)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 3, t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("Groups_List.sum_list_Suc",
     "(SUM x<-?xs. Suc (?f x)) = sum_list (map ?f ?xs) + #\<^sub>u(?xs)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0))),
         template_app (template_hole 0, template_var 0)))),
    ("Groups_List.sum_list_upt",
     "?m <= ?n ==> sum_list [?m..<?n] = usums {?m..<?n}",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, t_empty),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Groups_List.sum_list_nonneg",
     "(!!x. x : ran\<^sub>u(?xs) ==> 0 <= x) ==> 0 <= sum_list ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_inequation
        (less_equals, template_hole 1,
         template_app (template_hole 0, template_var 0)))),
    ("Binomial.card_length_sum_list",
     "#\<^sub>u({l. #\<^sub>u(l) = ?m \<and> sum_list l = ?N}) =
      ?N + ?m - 1 choose ?N",
     template_equation
      (template_app
        (template_hole 8, template_app (template_hole 7, t_empty)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)),
             template_hole 0)),
         template_var 0))),
    ("Groups_List.sum_list_transfer",
     "[| ?A 0 0; rel_fun ?A (rel_fun ?A ?A) (+) (+) |]
      ==> rel_fun (list_all2 ?A) ?A sum_list sum_list",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 0, template_hole 9),
              template_hole 8)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 0),
                  template_app
                   (template_app (template_hole 6, template_var 0),
                    template_var 0)),
                template_hole 5),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_var 0),
               template_hole 1),
             template_hole 0)
           ))),
    ("Groups_List.sum_list_map_eq_sum_count2",
     "[| ran\<^sub>u(?xs) <= ?X; finite ?X |]
      ==> sum_list (map ?f ?xs) = (SUM x:?X. count_list ?xs x * ?f x)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 7, template_var 2),
          template_var 1),
        template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 2, t_empty), template_var 1)))),
    ("Groups_List.sum_list_mono",
     "(!!x. x : ran\<^sub>u(?xs) ==> ?f x <= ?g x) ==>
      sum_list (map ?f ?xs) <= sum_list (map ?g ?xs)",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 2)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 2))))),
    ("Groups_List.sum_list_strict_mono",
     "[| \<not> ?xs = []; !!x. x : ran\<^sub>u(?xs) ==> ?f x < ?g x |]
      ==> sum_list (map ?f ?xs) < sum_list (map ?g ?xs)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 6)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_inequation
        (less_than,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("Binomial.card_length_sum_list_rec",
     "1 <= ?m ==>
      #\<^sub>u({l. #\<^sub>u(l) = ?m \<and> sum_list l = ?N}) =
      #\<^sub>u({l. #\<^sub>u(l) = ?m - 1 \<and> sum_list l = ?N}) +
      #\<^sub>u({l. #\<^sub>u(l) = ?m \<and> sum_list l + 1 = ?N})",
     template_implication
      ([template_inequation (less_equals, template_hole 8, template_var 1)],
       template_equation
        (template_app
          (template_hole 6, template_app (template_hole 5, t_empty)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 6, template_app (template_hole 5, t_empty))),
           template_app
            (template_hole 6, template_app (template_hole 5, t_empty)))))),
    ("sum_list.Sum_List_sums",
     "\<lbrace>&xs =\<^sub>u \<guillemotleft>?XS\<guillemotright>\<rbrace>
      i := 0 ;;
      ans := 0 ;;
      while &i <\<^sub>u
            #\<^sub>u(&xs) invr &ans =\<^sub>u sum\<^sub>u(take\<^sub>u(&i,
                                &xs)) do ans := &ans + &xs(&i)\<^sub>a ;;
   i := &i + 1 od
      \<lbrace>&ans =\<^sub>u sum\<^sub>u(&xs)\<rbrace>\<^sub>u",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 35,
               template_app
                (template_app
                  (template_hole 34,
                   template_app
                    (template_hole 33,
                     template_app (template_hole 32, template_hole 31))),
                 template_app (template_hole 30, template_var 0))),
             template_app
              (template_app
                (template_hole 29,
                 template_app
                  (template_hole 28,
                   template_app
                    (template_app
                      (template_app (template_hole 27, template_hole 26),
                       template_app (template_hole 25, template_hole 24)),
                     template_hole 23))),
               template_app
                (template_app
                  (template_hole 29,
                   template_app
                    (template_hole 28,
                     template_app
                      (template_app
                        (template_app (template_hole 22, template_hole 26),
                         template_app (template_hole 21, template_hole 20)),
                       template_hole 19))),
                 template_app
                  (template_app
                    (template_app
                      (template_hole 18,
                       template_app
                        (template_app
                          (template_app
                            (template_hole 17, template_hole 16),
                           template_app
                            (template_hole 15,
                             template_app
                              (template_hole 25, template_hole 24))),
                         template_app
                          (template_app
                            (template_hole 14, template_hole 13),
                           template_app
                            (template_hole 33,
                             template_app
                              (template_hole 32, template_hole 31))))),
                     template_app
                      (template_app
                        (template_hole 12,
                         template_app
                          (template_hole 11,
                           template_app
                            (template_hole 21, template_hole 20))),
                       template_app
                        (template_app (template_hole 10, t_empty),
                         template_app
                          (template_app
                            (template_app
                              (template_hole 6, template_hole 5),
                             template_app
                              (template_hole 15,
                               template_app
                                (template_hole 25, template_hole 24))),
                           template_app
                            (template_hole 33,
                             template_app
                              (template_hole 32, template_hole 31)))))),
                   template_app
                    (template_app
                      (template_hole 29,
                       template_app
                        (template_hole 28,
                         template_app
                          (template_app
                            (template_app
                              (template_hole 22, template_hole 26),
                             template_app
                              (template_hole 21, template_hole 20)),
                           template_app
                            (template_app
                              (template_hole 4,
                               template_app
                                (template_hole 11,
                                 template_app
                                  (template_hole 21, template_hole 20))),
                             template_app
                              (template_app
                                (template_app
                                  (template_hole 3, template_hole 2),
                                 template_app
                                  (template_hole 33,
                                   template_app
                                    (template_hole 32, template_hole 31))),
                               template_app
                                (template_hole 15,
                                 template_app
                                  (template_hole 25,
                                   template_hole 24))))))),
                     template_app
                      (template_hole 28,
                       template_app
                        (template_app
                          (template_app
                            (template_hole 27, template_hole 26),
                           template_app
                            (template_hole 25, template_hole 24)),
                         template_app
                          (template_app
                            (template_hole 1,
                             template_app
                              (template_hole 15,
                               template_app
                                (template_hole 25, template_hole 24))),
                           template_hole 0)))))))),
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_hole 11,
                 template_app (template_hole 21, template_hole 20))),
             template_app
              (template_app (template_hole 10, t_empty),
               template_app
                (template_hole 33,
                 template_app (template_hole 32, template_hole 31)))))
         ))]:
   (string * thm * template) list
### theory "Draft.sum_listTemplates"
### 0.840s elapsed time, 1.096s cpu time, 0.170s GC time
val it = (): unit
