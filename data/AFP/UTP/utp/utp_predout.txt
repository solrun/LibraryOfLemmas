Loading theory "Draft.utp_parser_utils" (required by "Draft.utp_predTemplates" via "Draft.utp_pred" via "Draft.utp_expr_funcs" via "Draft.utp_expr_insts" via "Draft.utp_expr" via "Draft.utp_var")
Loading theory "Draft.Templates" (required by "Draft.utp_predTemplates" via "Draft.ExtrEqs")
signature UTP_PARSER_UTILS =
  sig
    val mk_char: string -> Ast.ast
    val mk_nib: int -> Ast.ast
    val mk_string: string list -> Ast.ast
    val string_ast_tr: Ast.ast list -> Ast.ast
  end
signature NAME_UTILS =
  sig
    val deep_unmark_const: term -> term
    val last_char_str: string -> string
    val mk_id: string -> term
    val repeat_char: char -> int -> string
    val right_crop_by: int -> string -> string
  end
structure Utp_Parser_Utils: UTP_PARSER_UTILS
structure Name_Utils: NAME_UTILS
### theory "Draft.utp_parser_utils"
### 0.041s elapsed time, 0.108s cpu time, 0.000s GC time
Loading theory "Draft.utp_var" (required by "Draft.utp_predTemplates" via "Draft.utp_pred" via "Draft.utp_expr_funcs" via "Draft.utp_expr_insts" via "Draft.utp_expr")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.067s elapsed time, 0.164s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.utp_predTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.546s elapsed time, 1.110s cpu time, 0.106s GC time
### theory "Draft.utp_var"
### 0.637s elapsed time, 1.227s cpu time, 0.106s GC time
Loading theory "Draft.utp_expr" (required by "Draft.utp_predTemplates" via "Draft.utp_pred" via "Draft.utp_expr_funcs" via "Draft.utp_expr_insts")
instantiation
  uexpr :: (zero, type) zero
  zero_uexpr == zero_class.zero :: ('a, 'b) uexpr
instantiation
  uexpr :: (one, type) one
  one_uexpr == one_class.one :: ('a, 'b) uexpr
instantiation
  uexpr :: (plus, type) plus
  plus_uexpr == plus :: ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (ord, type) ord
  less_eq_uexpr == less_eq :: ('a, 'b) uexpr => ('a, 'b) uexpr => bool
  less_uexpr == less :: ('a, 'b) uexpr => ('a, 'b) uexpr => bool
### theory "Draft.utp_expr"
### 0.746s elapsed time, 0.780s cpu time, 0.059s GC time
Loading theory "Draft.utp_expr_insts" (required by "Draft.utp_predTemplates" via "Draft.utp_pred" via "Draft.utp_expr_funcs")
instantiation
  uexpr :: (uminus, type) uminus
  uminus_uexpr == uminus :: ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (minus, type) minus
  minus_uexpr == minus :: ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (times, type) times
  times_uexpr == times :: ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (divide, type) divide
  divide_uexpr == divide ::
    ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (inverse, type) inverse
  inverse_uexpr == inverse :: ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (modulo, type) modulo
  modulo_uexpr == modulo ::
    ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (sgn, type) sgn
  sgn_uexpr == sgn :: ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (abs, type) abs
  abs_uexpr == abs :: ('a, 'b) uexpr => ('a, 'b) uexpr
### theory "Draft.utp_expr_insts"
### 0.226s elapsed time, 0.227s cpu time, 0.000s GC time
Loading theory "Draft.utp_expr_funcs" (required by "Draft.utp_predTemplates" via "Draft.utp_pred")
Loading theory "Draft.utp_unrest" (required by "Draft.utp_predTemplates" via "Draft.utp_pred" via "Draft.utp_subst")
### theory "Draft.utp_expr_funcs"
### 0.147s elapsed time, 0.302s cpu time, 0.056s GC time
### theory "Draft.utp_unrest"
### 0.227s elapsed time, 0.381s cpu time, 0.056s GC time
Loading theory "Draft.utp_usedby" (required by "Draft.utp_predTemplates" via "Draft.utp_pred" via "Draft.utp_meta_subst" via "Draft.utp_tactics")
Loading theory "Draft.utp_subst" (required by "Draft.utp_predTemplates" via "Draft.utp_pred")
### theory "Draft.utp_usedby"
### 0.087s elapsed time, 0.174s cpu time, 0.000s GC time
Loading theory "Draft.utp_tactics" (required by "Draft.utp_predTemplates" via "Draft.utp_pred" via "Draft.utp_meta_subst")
signature UEXPR_REP_EQ =
  sig
    val get_uexpr_rep_eq_thms: theory -> thm list
    val read_uexpr_rep_eq_thms: theory -> theory
  end
structure uexpr_rep_eq: UEXPR_REP_EQ
val it = (): unit
### theory "Draft.utp_subst"
### 0.462s elapsed time, 0.932s cpu time, 0.056s GC time
structure List_Extra: sig val contains: ''a -> ''a list -> bool end
signature BASIC_TACTICS =
  sig
    val fast_transfer: Proof.context -> thm list -> context_tactic
    val interp_tac: Proof.context -> thm list -> context_tactic
    val slow_transfer: Proof.context -> thm list -> context_tactic
    val utp_auto_tac: Proof.context -> thm list -> context_tactic
    val utp_blast_tac: Proof.context -> thm list -> context_tactic
    val utp_simp_tac: Proof.context -> thm list -> context_tactic
  end
structure Basic_Tactics: BASIC_TACTICS
signature UTP_TACTICS =
  sig
    val inst_gen_pred_tac:
       utp_tac_args ->
         (Proof.context -> thm list -> context_tactic) ->
           Proof.context -> thm list -> context_tactic
    val inst_gen_rel_tac:
       utp_tac_args ->
         (Proof.context -> thm list -> context_tactic) ->
           Proof.context -> thm list -> context_tactic
    val no_interpN: string
    val robustN: string
    val scan_args: utp_tac_args parser
    type utp_tac_args
  end
structure UTP_Tactics: UTP_TACTICS
### theory "Draft.utp_tactics"
### 1.535s elapsed time, 1.991s cpu time, 0.099s GC time
Loading theory "Draft.utp_meta_subst" (required by "Draft.utp_predTemplates" via "Draft.utp_pred")
### theory "Draft.utp_meta_subst"
### 0.393s elapsed time, 0.453s cpu time, 0.033s GC time
Loading theory "Draft.utp_pred" (required by "Draft.utp_predTemplates")
instantiation
  uexpr :: (lattice, type) lattice
  inf_uexpr == inf :: ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
  sup_uexpr == sup :: ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (bounded_lattice, type) bounded_lattice
  bot_uexpr == bot :: ('a, 'b) uexpr
  top_uexpr == top_class.top :: ('a, 'b) uexpr
instantiation
  uexpr :: (complete_lattice, type) complete_lattice
  Inf_uexpr == Inf :: ('a, 'b) uexpr set => ('a, 'b) uexpr
  Sup_uexpr == Sup :: ('a, 'b) uexpr set => ('a, 'b) uexpr
### Ignoring duplicate rewrite rule:
### ?X1 \<subseteq>\<^sub>L ?X1 == True
### Ignoring duplicate rewrite rule:
### wb_lens ?Y1 ==> ?X1 \<subseteq>\<^sub>L ?X1 +\<^sub>L ?Y1 == True
### theory "Draft.utp_pred"
### 1.482s elapsed time, 1.880s cpu time, 0.529s GC time
Loading theory "Draft.utp_predTemplates"
val templateLemmas =
   [("utp_pred.unrest_false", "?x \<sharp> false",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("utp_pred.unrest_true", "?x \<sharp> true",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("utp_pred.unrest_closure", "?x \<sharp> [?P]\<^sub>u",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("utp_pred.top_uexpr_rep_eq",
     "\<lbrakk>\<top>\<rbrakk>\<^sub>e ?b = False",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("utp_pred.bot_uexpr_rep_eq",
     "\<lbrakk>\<bottom>\<rbrakk>\<^sub>e ?b = True",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("utp_pred.subst_false", "?\<sigma> \<dagger> false = false",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("utp_pred.subst_true", "?\<sigma> \<dagger> true = true",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("utp_pred.msubst_false",
     "false\<lbrakk>x\<rightarrow>?v\<rbrakk> = false",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty), template_var 0),
       template_hole 0)),
    ("utp_pred.msubst_true",
     "true\<lbrakk>x\<rightarrow>?v\<rbrakk> = true",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty), template_var 0),
       template_hole 0)),
    ("utp_pred.subst_closure",
     "?\<sigma> \<dagger> [?P]\<^sub>u = [?P]\<^sub>u",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("utp_pred.subst_not",
     "?\<sigma> \<dagger> (\<not> ?P) = (\<not> ?\<sigma> \<dagger> ?P)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("utp_pred.unrest_not", "?x \<sharp> ?P ==> ?x \<sharp> \<not> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("utp_pred.usedBy_not", "?x \<natural> ?P ==> ?x \<natural> \<not> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("utp_pred.unrest_var_res_diff",
     "?x \<bowtie> ?y ==> ?y \<sharp> ?P \<restriction>\<^sub>v ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("utp_pred.subst_mono",
     "?P \<sqsubseteq> ?Q ==>
      ?\<sigma> \<dagger> ?P \<sqsubseteq> ?\<sigma> \<dagger> ?Q",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("utp_pred.upred_ref_iff",
     "(?P \<sqsubseteq> ?Q) =
      (ALL b.
          \<lbrakk>?Q\<rbrakk>\<^sub>e b -->
          \<lbrakk>?P\<rbrakk>\<^sub>e b)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app (template_hole 2, t_empty))),
    ("utp_pred.subst_inf",
     "?\<sigma> \<dagger> (?P \<squnion> ?Q) =
      ?\<sigma> \<dagger> ?P \<squnion> ?\<sigma> \<dagger> ?Q",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("utp_pred.subst_sup",
     "?\<sigma> \<dagger> (?P \<sqinter> ?Q) =
      ?\<sigma> \<dagger> ?P \<sqinter> ?\<sigma> \<dagger> ?Q",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("utp_pred.subst_conj",
     "?\<sigma> \<dagger> (?P \<and> ?Q) =
      (?\<sigma> \<dagger> ?P \<and> ?\<sigma> \<dagger> ?Q)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("utp_pred.subst_disj",
     "?\<sigma> \<dagger> (?P \<or> ?Q) =
      (?\<sigma> \<dagger> ?P \<or> ?\<sigma> \<dagger> ?Q)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("utp_pred.subst_iff",
     "?\<sigma> \<dagger> (?P \<Leftrightarrow> ?Q) =
      (?\<sigma> \<dagger> ?P \<Leftrightarrow> ?\<sigma> \<dagger> ?Q)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("utp_pred.subst_impl",
     "?\<sigma> \<dagger> (?P \<Rightarrow> ?Q) =
      (?\<sigma> \<dagger> ?P \<Rightarrow> ?\<sigma> \<dagger> ?Q)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("utp_pred.msubst_not",
     "(\<not> ?P x)\<lbrakk>x\<rightarrow>?v\<rbrakk> =
      (\<not> msubst ?P ?v)",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty), template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)))),
    ("utp_pred.subst_shAll",
     "?\<sigma> \<dagger> ushAll ?P =
      (\<^bold>\<forall> x \<bullet> ?\<sigma> \<dagger> ?P x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, t_empty)),
       template_app (template_hole 0, t_empty))),
    ("utp_pred.subst_shEx",
     "?\<sigma> \<dagger> ushEx ?P =
      (\<^bold>\<exists> x \<bullet> ?\<sigma> \<dagger> ?P x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, t_empty)),
       template_app (template_hole 0, t_empty))),
    ("utp_pred.unrest_shAll",
     "(!!y. ?x \<sharp> ?P y) ==> ?x \<sharp> ushAll ?P",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, t_empty))
           ))),
    ("utp_pred.unrest_shEx",
     "(!!y. ?x \<sharp> ?P y) ==> ?x \<sharp> ushEx ?P",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, t_empty))
           ))),
    ("utp_pred.unrest_all_in",
     "[| mwb_lens ?y; ?x \<subseteq>\<^sub>L ?y |]
      ==> ?x \<sharp> (\<forall> ?y \<bullet> ?P)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("utp_pred.unrest_ex_in",
     "[| mwb_lens ?y; ?x \<subseteq>\<^sub>L ?y |]
      ==> ?x \<sharp> (\<exists> ?y \<bullet> ?P)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("utp_pred.unrest_all_diff",
     "[| ?x \<bowtie> ?y; ?y \<sharp> ?P |]
      ==> ?y \<sharp> (\<forall> ?x \<bullet> ?P)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("utp_pred.unrest_ex_diff",
     "[| ?x \<bowtie> ?y; ?y \<sharp> ?P |]
      ==> ?y \<sharp> (\<exists> ?x \<bullet> ?P)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("utp_pred.unrest_iff",
     "[| ?x \<sharp> ?P; ?x \<sharp> ?Q |]
      ==> ?x \<sharp> ?P \<Leftrightarrow> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("utp_pred.unrest_impl",
     "[| ?x \<sharp> ?P; ?x \<sharp> ?Q |]
      ==> ?x \<sharp> ?P \<Rightarrow> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("utp_pred.unrest_conj",
     "[| ?x \<sharp> ?P; ?x \<sharp> ?Q |] ==> ?x \<sharp> ?P \<and> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("utp_pred.unrest_disj",
     "[| ?x \<sharp> ?P; ?x \<sharp> ?Q |] ==> ?x \<sharp> ?P \<or> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("utp_pred.usedBy_conj",
     "[| ?x \<natural> ?P; ?x \<natural> ?Q |]
      ==> ?x \<natural> ?P \<and> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("utp_pred.usedBy_disj",
     "[| ?x \<natural> ?P; ?x \<natural> ?Q |]
      ==> ?x \<natural> ?P \<or> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("utp_pred.usedBy_iff",
     "[| ?x \<natural> ?P; ?x \<natural> ?Q |]
      ==> ?x \<natural> ?P \<Leftrightarrow> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("utp_pred.usedBy_impl",
     "[| ?x \<natural> ?P; ?x \<natural> ?Q |]
      ==> ?x \<natural> ?P \<Rightarrow> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("utp_pred.subst_ex_unrest",
     "?x \<sharp> ?\<sigma> ==>
      ?\<sigma> \<dagger> (\<exists> ?x \<bullet> ?P) =
      (\<exists> ?x \<bullet> ?\<sigma> \<dagger> ?P)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("utp_pred.msubst_shAll",
     "(\<^bold>\<forall> x \<bullet> ?P x
y)\<lbrakk>y\<rightarrow>?v\<rbrakk> =
      (\<^bold>\<forall> x \<bullet> msubst (?P x) ?v)",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty), template_var 0),
       template_app (template_hole 0, t_empty))),
    ("utp_pred.subst_all_same",
     "mwb_lens ?x ==>
      ?\<sigma>(?x \<mapsto>\<^sub>s ?v) \<dagger>
      (\<forall> ?x \<bullet> ?P) =
      ?\<sigma> \<dagger> (\<forall> ?x \<bullet> ?P)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0))))),
    ("utp_pred.subst_ex_same",
     "mwb_lens ?x ==>
      ?\<sigma>(?x \<mapsto>\<^sub>s ?v) \<dagger>
      (\<exists> ?x \<bullet> ?P) =
      ?\<sigma> \<dagger> (\<exists> ?x \<bullet> ?P)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0))))),
    ("utp_pred.msubst_not_2",
     "(\<not> ?P x y)\<lbrakk>(x, y)\<rightarrow>?v\<rbrakk> =
      (\<not> ?P x y\<lbrakk>(x, y)\<rightarrow>?v\<rbrakk>)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, t_empty)),
         template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app
            (template_hole 2, template_app (template_hole 1, t_empty)),
           template_var 0)))),
    ("utp_pred.unrest_var_res_in",
     "[| mwb_lens ?x; ?y \<subseteq>\<^sub>L ?x; ?y \<sharp> ?P |]
      ==> ?y \<sharp> ?P \<restriction>\<^sub>v ?x",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("utp_pred.msubst_conj",
     "(?P x \<and> ?Q x)\<lbrakk>x\<rightarrow>?v\<rbrakk> =
      (msubst ?P ?v \<and> msubst ?Q ?v)",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty), template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0)),
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)))),
    ("utp_pred.msubst_disj",
     "(?P x \<or> ?Q x)\<lbrakk>x\<rightarrow>?v\<rbrakk> =
      (msubst ?P ?v \<or> msubst ?Q ?v)",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty), template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0)),
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)))),
    ("utp_pred.msubst_implies",
     "(?P x \<Rightarrow> ?Q x)\<lbrakk>x\<rightarrow>?v\<rbrakk> =
      (msubst ?P ?v \<Rightarrow> msubst ?Q ?v)",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty), template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0)),
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)))),
    ("utp_pred.subst_ex_same'",
     "mwb_lens ?x ==>
      ?\<sigma>(?x \<mapsto>\<^sub>s ?v) \<dagger>
      (\<exists> &?x \<bullet> ?P) =
      ?\<sigma> \<dagger> (\<exists> &?x \<bullet> ?P)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 3),
               template_var 1)),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 3)),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 3)),
             template_var 0))))),
    ("utp_pred.subst_UINF",
     "?\<sigma> \<dagger> UINF ?P ?Q =
      (\<Sqinter> i | ?\<sigma> \<dagger>
                      ?P i \<bullet> ?\<sigma> \<dagger> ?Q i)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app (template_app (template_hole 2, t_empty), t_empty)),
       template_app (template_app (template_hole 1, t_empty), t_empty))),
    ("utp_pred.subst_USUP",
     "?\<sigma> \<dagger> USUP ?P ?Q =
      (\<Squnion> i | ?\<sigma> \<dagger>
                      ?P i \<bullet> ?\<sigma> \<dagger> ?Q i)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app (template_app (template_hole 2, t_empty), t_empty)),
       template_app (template_app (template_hole 1, t_empty), t_empty))),
    ("utp_pred.unrest_allE",
     "[| \<Sigma> \<sharp> ?P; ?P = true ==> ?Q; ?P = false ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 1, template_hole 1)],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation (template_var 1, template_hole 0)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("utp_pred.msubst_shAll_2",
     "(\<^bold>\<forall> x \<bullet> ?P x y z)\<lbrakk>(y,
      z)\<rightarrow>?v\<rbrakk> =
      (\<^bold>\<forall> x \<bullet> ?P x y z\<lbrakk>(y,
                                     z)\<rightarrow>?v\<rbrakk>)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, t_empty)),
         template_var 0),
       template_app (template_hole 0, t_empty))),
    ("utp_pred.unrest_UINF",
     "[| !!i. ?x \<sharp> ?P i; !!i. ?x \<sharp> ?Q i |]
      ==> ?x \<sharp> UINF ?P ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, t_empty), t_empty))
           ))),
    ("utp_pred.unrest_USUP",
     "[| !!i. ?x \<sharp> ?P i; !!i. ?x \<sharp> ?Q i |]
      ==> ?x \<sharp> USUP ?P ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, t_empty), t_empty))
           ))),
    ("utp_pred.unrest_UINF_mem",
     "(!!i. i : ?A ==> ?x \<sharp> ?P i) ==>
      ?x \<sharp> (\<Sqinter> i \<in> ?A \<bullet> ?P i)",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_app (template_hole 3, t_empty), t_empty))
           ))),
    ("utp_pred.unrest_USUP_mem",
     "(!!i. i : ?A ==> ?x \<sharp> ?P i) ==>
      ?x \<sharp> (\<Squnion> i \<in> ?A \<bullet> ?P i)",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_app (template_hole 3, t_empty), t_empty))
           ))),
    ("utp_pred.subst_all_indep",
     "[| ?x \<bowtie> ?y; ?y \<sharp> ?v |]
      ==> (\<forall> ?y \<bullet> ?P)\<lbrakk>?v/?x\<rbrakk> =
          (\<forall> ?y \<bullet> ?P\<lbrakk>?v/?x\<rbrakk>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 3),
                 template_var 1)),
             template_var 0))))),
    ("utp_pred.subst_ex_indep",
     "[| ?x \<bowtie> ?y; ?y \<sharp> ?v |]
      ==> (\<exists> ?y \<bullet> ?P)\<lbrakk>?v/?x\<rbrakk> =
          (\<exists> ?y \<bullet> ?P\<lbrakk>?v/?x\<rbrakk>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 3),
                 template_var 1)),
             template_var 0))))),
    ("utp_pred.msubst_conj_2",
     "(?P x y \<and> ?Q x y)\<lbrakk>(x, y)\<rightarrow>?v\<rbrakk> =
      (?P x y\<lbrakk>(x, y)\<rightarrow>?v\<rbrakk> \<and>
       ?Q x y\<lbrakk>(x, y)\<rightarrow>?v\<rbrakk>)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, t_empty)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 2, template_app (template_hole 1, t_empty)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2, template_app (template_hole 1, t_empty)),
           template_var 0)))),
    ("utp_pred.msubst_disj_2",
     "(?P x y \<or> ?Q x y)\<lbrakk>(x, y)\<rightarrow>?v\<rbrakk> =
      (?P x y\<lbrakk>(x, y)\<rightarrow>?v\<rbrakk> \<or>
       ?Q x y\<lbrakk>(x, y)\<rightarrow>?v\<rbrakk>)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, t_empty)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 2, template_app (template_hole 1, t_empty)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2, template_app (template_hole 1, t_empty)),
           template_var 0)))),
    ("utp_pred.msubst_implies_2",
     "(?P x y \<Rightarrow> ?Q x y)\<lbrakk>(x, y)\<rightarrow>?v\<rbrakk> =
      (?P x y\<lbrakk>(x, y)\<rightarrow>?v\<rbrakk> \<Rightarrow>
       ?Q x y\<lbrakk>(x, y)\<rightarrow>?v\<rbrakk>)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, t_empty)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 2, template_app (template_hole 1, t_empty)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2, template_app (template_hole 1, t_empty)),
           template_var 0))))]:
   (string * thm * template) list
### theory "Draft.utp_predTemplates"
### 0.714s elapsed time, 0.888s cpu time, 0.106s GC time
val it = (): unit
