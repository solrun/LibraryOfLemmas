   [("utp_healthy.Monotonic_const", "Monotonic (%x. ?c)",
     template_predicate (template_app (template_hole 0, t_empty))),
    ("utp_healthy.Continuous_const", "Continuous (%X. ?P)",
     template_predicate (template_app (template_hole 0, t_empty))),
    ("utp_healthy.Conjunctive_Monotonic", "Conjunctive ?H ==> Monotonic ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("utp_healthy.Conjuctive_Idempotent",
     "Conjunctive ?H ==> Idempotent ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("utp_healthy.WeakConjunctive_implies_WeakConjunctive",
     "Conjunctive ?H ==> WeakConjunctive ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("utp_healthy.sup_continuous_Continuous",
     "Continuous ?F ==> sup_continuous ?F",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("utp_healthy.Continuous_Monotonic", "Continuous ?H ==> Monotonic ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("utp_healthy.Continuous_Disjunctous",
     "Continuous ?H ==> Disjunctuous ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("utp_healthy.Disjunctuous_Monotonic",
     "Disjunctuous ?H ==> Monotonic ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("utp_healthy.FunctionalConjunctive_Monotonic",
     "FunctionalConjunctive ?H ==> Monotonic ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("utp_healthy.Healthy_Idempotent", "Idempotent ?H ==> ?H ?P is ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_var 1, template_var 0)),
             template_var 1)
           ))),
    ("utp_healthy.WeakConjunctive_Refinement",
     "WeakConjunctive ?HC ==> ?P \<sqsubseteq> ?HC ?P",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_inequation
        (less_equals, template_app (template_var 1, template_var 0),
         template_var 0))),
    ("utp_healthy.Healthy_if", "?P is ?H ==> ?H ?P = ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_var 0, template_var 1), template_var 1))),
    ("utp_healthy.Healthy_intro", "?H ?P = ?P ==> ?P is ?H",
     template_implication
      ([template_equation
         (template_app (template_var 1, template_var 0), template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("utp_healthy.Monotonic_comp",
     "[| Monotonic ?f; Monotonic ?g |] ==> Monotonic (?f o ?g)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("utp_healthy.Continuous_comp",
     "[| Continuous ?f; Continuous ?g |] ==> Continuous (?f o ?g)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("utp_healthy.Conjunctive_conj",
     "Conjunctive ?HC ==> ?HC (?P \<and> ?Q) = (?HC ?P \<and> ?Q)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_equation
        (template_app
          (template_var 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_var 2, template_var 1)),
           template_var 0)))),
    ("utp_healthy.Healthy_range",
     "Idempotent ?H ==> range ?H = \<lbrakk>?H\<rbrakk>\<^sub>H",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0), template_hole 2),
         template_app (template_hole 1, t_empty)))),
    ("utp_healthy.Idempotent_image",
     "Idempotent ?f ==> ?f ` ?f ` ?A = ?f ` ?A",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("utp_healthy.WeakCojunctive_Healthy_Refinement",
     "[| WeakConjunctive ?HC; ?P is ?HC |] ==> ?HC ?P \<sqsubseteq> ?P",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_inequation
        (less_equals, template_var 0,
         template_app (template_var 1, template_var 0)))),
    ("utp_healthy.Conjunctive_distr_conj",
     "Conjunctive ?HC ==> ?HC (?P \<and> ?Q) = (?HC ?P \<and> ?HC ?Q)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_equation
        (template_app
          (template_var 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_var 2, template_var 1)),
           template_app (template_var 2, template_var 0))))),
    ("utp_healthy.Conjunctive_distr_disj",
     "Conjunctive ?HC ==> ?HC (?P \<or> ?Q) = (?HC ?P \<or> ?HC ?Q)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_equation
        (template_app
          (template_var 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_var 2, template_var 1)),
           template_app (template_var 2, template_var 0))))),
    ("utp_healthy.Healthy_carrier_image",
     "?A <= \<lbrakk>?\<H>\<rbrakk>\<^sub>H ==> ?\<H> ` ?A = ?A",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 3, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("utp_healthy.Monotonic_inf",
     "[| Monotonic ?P; Monotonic ?Q |]
      ==> Monotonic (%X. ?P X \<sqinter> ?Q X)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("utp_healthy.Healthy_comp",
     "[| ?P is ?\<H>\<^sub>1; ?P is ?\<H>\<^sub>2 |]
      ==> ?P is ?\<H>\<^sub>1 o ?\<H>\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("utp_healthy.Healthy_INFIMUM",
     "?A <= \<lbrakk>?H\<rbrakk>\<^sub>H ==> \<And>(?H ` ?A) = \<And>?A",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app (template_hole 1, template_var 1)))),
    ("utp_healthy.Healthy_SUPREMUM",
     "?A <= \<lbrakk>?H\<rbrakk>\<^sub>H ==> \<Or>(?H ` ?A) = \<Or>?A",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app (template_hole 1, template_var 1)))),
    ("utp_healthy.Healthy_case_prod",
     "(!!x y. ?P x y is ?H) ==> (case ?v of (x, xa) => ?P x xa) is ?H",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("utp_healthy.Monotonic_cond",
     "[| Monotonic ?P; Monotonic ?Q |]
      ==> Monotonic (%X. ?P X \<triangleleft> ?b \<triangleright> ?Q X)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("utp_healthy.Continuous_cond",
     "[| Continuous ?F; Continuous ?G |]
      ==> Continuous (%X. ?F X \<triangleleft> ?b \<triangleright> ?G X)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("utp_healthy.is_Healthy_subset_member",
     "[| ?A <= \<lbrakk>?H\<rbrakk>\<^sub>H; ?P : ?A |] ==> ?P is ?H",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 2, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0), template_var 1)
           ))),
    ("utp_healthy.Conjunctive_distr_cond",
     "Conjunctive ?HC ==>
      ?HC (?P \<triangleleft> ?b \<triangleright> ?Q) =
      ?HC ?P \<triangleleft> ?b \<triangleright> ?HC ?Q",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 3))],
       template_equation
        (template_app
          (template_var 3,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 2),
             template_app (template_var 3, template_var 1)),
           template_app (template_var 3, template_var 0))))),
    ("utp_healthy.Healthy_set_image_member",
     "[| ?P : ?F ` ?A; !!x. ?F x is ?H |] ==> ?P is ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 3), template_var 0)
           ))),
    ("utp_healthy.Healthy_subset_member",
     "[| ?A <= \<lbrakk>?H\<rbrakk>\<^sub>H; ?P : ?A |] ==> ?H ?P = ?P",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 3, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app (template_var 1, template_var 0), template_var 0))),
    ("utp_healthy.ContinuousD",
     "[| Continuous ?H; \<not> ?A = {} |]
      ==> ?H (\<Or>?A) = \<Or>(?H ` ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_equation
        (template_app
          (template_var 1, template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))))),
    ("utp_healthy.Idempotent_comp",
     "[| Idempotent ?f; Idempotent ?g; ?f o ?g = ?g o ?f |]
      ==> Idempotent (?f o ?g)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 1), template_var 0),
          template_app
           (template_app (template_hole 0, template_var 0),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("utp_healthy.Healthy_carrier_Collect",
     "?A <= \<lbrakk>?H\<rbrakk>\<^sub>H ==>
      ?A = {uu_. EX P. uu_ = ?H P \<and> P : ?A}",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 6, t_empty))],
       template_equation
        (template_var 1, template_app (template_hole 6, t_empty)))),
    ("utp_healthy.Healthy_mu",
     "[| Monotonic ?F;
         ?F : \<lbrakk>id\<rbrakk>\<^sub>H \<rightarrow>
              \<lbrakk>?H\<rbrakk>\<^sub>H |]
      ==> \<mu> ?F is ?H",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app
                 (template_hole 4, template_app (template_hole 3, t_empty)),
                t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("utp_healthy.Healthy_nu",
     "[| Monotonic ?F;
         ?F : \<lbrakk>id\<rbrakk>\<^sub>H \<rightarrow>
              \<lbrakk>?H\<rbrakk>\<^sub>H |]
      ==> \<nu> ?F is ?H",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app
                 (template_hole 4, template_app (template_hole 3, t_empty)),
                t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("utp_healthy.Healthy_apply_closed",
     "[| ?F : \<lbrakk>?H\<rbrakk>\<^sub>H \<rightarrow>
              \<lbrakk>?H\<rbrakk>\<^sub>H;
         ?P is ?H |]
      ==> ?F ?P is ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app
                 (template_hole 2, template_app (template_hole 1, t_empty)),
                t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_var 2, template_var 0)),
             template_var 1)
           ))),
    ("utp_healthy.UINF_ind_closed",
     "[| Continuous ?H; !!i. ?P i = true; !!i. ?Q i is ?H |]
      ==> UINF ?P ?Q is ?H",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("utp_healthy.Healthy_func",
     "[| ?F : \<lbrakk>?\<H>\<^sub>1\<rbrakk>\<^sub>H \<rightarrow>
              \<lbrakk>?\<H>\<^sub>2\<rbrakk>\<^sub>H;
         ?P is ?\<H>\<^sub>1 |]
      ==> ?\<H>\<^sub>2 (?F ?P) = ?F ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app
                 (template_hole 5, template_app (template_hole 4, t_empty)),
                t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_var 1, template_app (template_var 3, template_var 0)),
         template_app (template_var 3, template_var 0)))),
    ("utp_healthy.Sup_Continuous_closed",
     "[| Continuous ?H; !!i. i : ?A ==> ?P i is ?H; \<not> ?A = {} |]
      ==> \<Or>(?P ` ?A) is ?H",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, t_empty),
                   template_var 1))),
             template_var 2)
           ))),
    ("utp_healthy.UINF_healthy",
     "?A <= \<lbrakk>?H\<rbrakk>\<^sub>H ==>
      (\<Sqinter> P \<in> ?A \<bullet> ?F P) =
      (\<Sqinter> P \<in> ?A \<bullet> ?F (?H P))",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 7, t_empty))],
       template_equation
        (template_app (template_app (template_hole 4, t_empty), t_empty),
         template_app (template_app (template_hole 4, t_empty), t_empty)))),
    ("utp_healthy.USUP_healthy",
     "?A <= \<lbrakk>?H\<rbrakk>\<^sub>H ==>
      (\<Squnion> P \<in> ?A \<bullet> ?F P) =
      (\<Squnion> P \<in> ?A \<bullet> ?F (?H P))",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 7, t_empty))],
       template_equation
        (template_app (template_app (template_hole 4, t_empty), t_empty),
         template_app (template_app (template_hole 4, t_empty), t_empty)))),
    ("utp_healthy.UINF_mem_Continuous_closed",
     "[| Continuous ?H; !!i. i : ?A ==> ?P i is ?H; \<not> ?A = {} |]
      ==> (\<Sqinter> i \<in> ?A \<bullet> ?P i) is ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 3, t_empty), t_empty)),
             template_var 2)
           ))),
    ("utp_healthy.UINF_mem_Continuous_closed_pair",
     "[| Continuous ?H; !!i j. (i, j) : ?A ==> ?P i j is ?H;
         \<not> ?A = {} |]
      ==> (\<Sqinter> (i, j) \<in> ?A \<bullet> ?P i j) is ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 2)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, t_empty)),
                 template_app (template_hole 3, t_empty))),
             template_var 2)
           ))),
    ("utp_healthy.UINF_mem_Continuous_closed_triple",
     "[| Continuous ?H; !!i j k. (i, j, k) : ?A ==> ?P i j k is ?H;
         \<not> ?A = {} |]
      ==> (\<Sqinter> (i, j, k) \<in> ?A \<bullet> ?P i j k) is ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 16, template_var 2)),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_negation
         (template_equation (template_var 1, template_hole 6))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, t_empty)),
                 template_app (template_hole 4, t_empty))),
             template_var 2)
           ))),
    ("utp_healthy.UINF_mem_Continuous_closed_quad",
     "[| Continuous ?H; !!i j k l. (i, j, k, l) : ?A ==> ?P i j k l is ?H;
         \<not> ?A = {} |]
      ==> (\<Sqinter> (i, j, k, l) \<in> ?A \<bullet> ?P i j k l) is ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 19, template_var 2)),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_negation
         (template_equation (template_var 1, template_hole 7))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, t_empty)),
                 template_app (template_hole 5, t_empty))),
             template_var 2)
           ))),
    ("utp_healthy.UINF_mem_Continuous_closed_quint",
     "[| Continuous ?H;
         !!i j k l m. (i, j, k, l, m) : ?A ==> ?P i j k l m is ?H;
         \<not> ?A = {} |]
      ==> (\<Sqinter> (i, j, k, l, m) \<in> ?A \<bullet> ?P i j k l m) is
          ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 22, template_var 2)),
        template_predicate (template_app (template_hole 21, t_empty)),
        template_negation
         (template_equation (template_var 1, template_hole 8))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 6, t_empty)),
                 template_app (template_hole 6, t_empty))),
             template_var 2)
           )))]
