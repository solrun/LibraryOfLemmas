Loading theory "Draft.utp_parser_utils" (required by "Draft.utp_healthyTemplates" via "Draft.utp_healthy" via "Draft.utp_pred_laws" via "Draft.utp_pred" via "Draft.utp_expr_funcs" via "Draft.utp_expr_insts" via "Draft.utp_expr" via "Draft.utp_var")
Loading theory "Draft.Templates" (required by "Draft.utp_healthyTemplates" via "Draft.ExtrEqs")
signature UTP_PARSER_UTILS =
  sig
    val mk_char: string -> Ast.ast
    val mk_nib: int -> Ast.ast
    val mk_string: string list -> Ast.ast
    val string_ast_tr: Ast.ast list -> Ast.ast
  end
signature NAME_UTILS =
  sig
    val deep_unmark_const: term -> term
    val last_char_str: string -> string
    val mk_id: string -> term
    val repeat_char: char -> int -> string
    val right_crop_by: int -> string -> string
  end
structure Utp_Parser_Utils: UTP_PARSER_UTILS
structure Name_Utils: NAME_UTILS
### theory "Draft.utp_parser_utils"
### 0.039s elapsed time, 0.116s cpu time, 0.000s GC time
Loading theory "Draft.utp_var" (required by "Draft.utp_healthyTemplates" via "Draft.utp_healthy" via "Draft.utp_pred_laws" via "Draft.utp_pred" via "Draft.utp_expr_funcs" via "Draft.utp_expr_insts" via "Draft.utp_expr")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.075s elapsed time, 0.193s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.utp_healthyTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.566s elapsed time, 1.143s cpu time, 0.099s GC time
### theory "Draft.utp_var"
### 0.666s elapsed time, 1.282s cpu time, 0.099s GC time
Loading theory "Draft.utp_expr" (required by "Draft.utp_healthyTemplates" via "Draft.utp_healthy" via "Draft.utp_pred_laws" via "Draft.utp_pred" via "Draft.utp_expr_funcs" via "Draft.utp_expr_insts")
instantiation
  uexpr :: (zero, type) zero
  zero_uexpr == zero_class.zero :: ('a, 'b) uexpr
instantiation
  uexpr :: (one, type) one
  one_uexpr == one_class.one :: ('a, 'b) uexpr
instantiation
  uexpr :: (plus, type) plus
  plus_uexpr == plus :: ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (ord, type) ord
  less_eq_uexpr == less_eq :: ('a, 'b) uexpr => ('a, 'b) uexpr => bool
  less_uexpr == less :: ('a, 'b) uexpr => ('a, 'b) uexpr => bool
### theory "Draft.utp_expr"
### 0.801s elapsed time, 0.832s cpu time, 0.054s GC time
Loading theory "Draft.utp_expr_insts" (required by "Draft.utp_healthyTemplates" via "Draft.utp_healthy" via "Draft.utp_pred_laws" via "Draft.utp_pred" via "Draft.utp_expr_funcs")
instantiation
  uexpr :: (uminus, type) uminus
  uminus_uexpr == uminus :: ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (minus, type) minus
  minus_uexpr == minus :: ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (times, type) times
  times_uexpr == times :: ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (divide, type) divide
  divide_uexpr == divide ::
    ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (inverse, type) inverse
  inverse_uexpr == inverse :: ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (modulo, type) modulo
  modulo_uexpr == modulo ::
    ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (sgn, type) sgn
  sgn_uexpr == sgn :: ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (abs, type) abs
  abs_uexpr == abs :: ('a, 'b) uexpr => ('a, 'b) uexpr
### theory "Draft.utp_expr_insts"
### 0.232s elapsed time, 0.232s cpu time, 0.000s GC time
Loading theory "Draft.utp_expr_funcs" (required by "Draft.utp_healthyTemplates" via "Draft.utp_healthy" via "Draft.utp_pred_laws" via "Draft.utp_pred")
Loading theory "Draft.utp_unrest" (required by "Draft.utp_healthyTemplates" via "Draft.utp_healthy" via "Draft.utp_pred_laws" via "Draft.utp_pred" via "Draft.utp_subst")
### theory "Draft.utp_expr_funcs"
### 0.153s elapsed time, 0.311s cpu time, 0.059s GC time
### theory "Draft.utp_unrest"
### 0.230s elapsed time, 0.389s cpu time, 0.059s GC time
Loading theory "Draft.utp_usedby" (required by "Draft.utp_healthyTemplates" via "Draft.utp_healthy" via "Draft.utp_pred_laws" via "Draft.utp_pred" via "Draft.utp_meta_subst" via "Draft.utp_tactics")
Loading theory "Draft.utp_subst" (required by "Draft.utp_healthyTemplates" via "Draft.utp_healthy" via "Draft.utp_pred_laws" via "Draft.utp_pred")
### theory "Draft.utp_usedby"
### 0.079s elapsed time, 0.159s cpu time, 0.000s GC time
Loading theory "Draft.utp_tactics" (required by "Draft.utp_healthyTemplates" via "Draft.utp_healthy" via "Draft.utp_pred_laws" via "Draft.utp_pred" via "Draft.utp_meta_subst")
signature UEXPR_REP_EQ =
  sig
    val get_uexpr_rep_eq_thms: theory -> thm list
    val read_uexpr_rep_eq_thms: theory -> theory
  end
structure uexpr_rep_eq: UEXPR_REP_EQ
val it = (): unit
### theory "Draft.utp_subst"
### 0.432s elapsed time, 0.867s cpu time, 0.055s GC time
structure List_Extra: sig val contains: ''a -> ''a list -> bool end
signature BASIC_TACTICS =
  sig
    val fast_transfer: Proof.context -> thm list -> context_tactic
    val interp_tac: Proof.context -> thm list -> context_tactic
    val slow_transfer: Proof.context -> thm list -> context_tactic
    val utp_auto_tac: Proof.context -> thm list -> context_tactic
    val utp_blast_tac: Proof.context -> thm list -> context_tactic
    val utp_simp_tac: Proof.context -> thm list -> context_tactic
  end
structure Basic_Tactics: BASIC_TACTICS
signature UTP_TACTICS =
  sig
    val inst_gen_pred_tac:
       utp_tac_args ->
         (Proof.context -> thm list -> context_tactic) ->
           Proof.context -> thm list -> context_tactic
    val inst_gen_rel_tac:
       utp_tac_args ->
         (Proof.context -> thm list -> context_tactic) ->
           Proof.context -> thm list -> context_tactic
    val no_interpN: string
    val robustN: string
    val scan_args: utp_tac_args parser
    type utp_tac_args
  end
structure UTP_Tactics: UTP_TACTICS
### theory "Draft.utp_tactics"
### 1.439s elapsed time, 1.870s cpu time, 0.097s GC time
Loading theory "Draft.utp_meta_subst" (required by "Draft.utp_healthyTemplates" via "Draft.utp_healthy" via "Draft.utp_pred_laws" via "Draft.utp_pred")
### theory "Draft.utp_meta_subst"
### 0.378s elapsed time, 0.442s cpu time, 0.033s GC time
Loading theory "Draft.utp_pred" (required by "Draft.utp_healthyTemplates" via "Draft.utp_healthy" via "Draft.utp_pred_laws")
instantiation
  uexpr :: (lattice, type) lattice
  inf_uexpr == inf :: ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
  sup_uexpr == sup :: ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (bounded_lattice, type) bounded_lattice
  bot_uexpr == bot :: ('a, 'b) uexpr
  top_uexpr == top_class.top :: ('a, 'b) uexpr
instantiation
  uexpr :: (complete_lattice, type) complete_lattice
  Inf_uexpr == Inf :: ('a, 'b) uexpr set => ('a, 'b) uexpr
  Sup_uexpr == Sup :: ('a, 'b) uexpr set => ('a, 'b) uexpr
### Ignoring duplicate rewrite rule:
### ?X1 \<subseteq>\<^sub>L ?X1 == True
### Ignoring duplicate rewrite rule:
### wb_lens ?Y1 ==> ?X1 \<subseteq>\<^sub>L ?X1 +\<^sub>L ?Y1 == True
### theory "Draft.utp_pred"
### 1.393s elapsed time, 1.780s cpu time, 0.508s GC time
Loading theory "Draft.utp_pred_laws" (required by "Draft.utp_healthyTemplates" via "Draft.utp_healthy")
### Partially applied constant "utp_pred.conj_upred" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<and>) (ran\<^sub>l (?x # ?xs)) ==
### fold (\<and>) ?xs ?x
### Partially applied constant "utp_pred.disj_upred" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<or>) (ran\<^sub>l (?x # ?xs)) ==
### fold (\<or>) ?xs ?x
### theory "Draft.utp_pred_laws"
### 0.823s elapsed time, 0.876s cpu time, 0.099s GC time
Loading theory "Draft.utp_healthy" (required by "Draft.utp_healthyTemplates")
### Ambiguous input (line 129 of "$AFP/UTP/utp/utp_healthy.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Idempotent) ("_position" f)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" f)
###       ("_cargs"
###         ("\<^const>utp_pred.taut"
###           ("\<^const>HOL.eq"
###             ("\<^const>Set.image" ("_position" f) ("_position" A))
###             ("_position" f)))
###         ("_position" A)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Idempotent) ("_position" f)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.image" ("_position" f)
###       ("_applC" ("_position" f)
###         ("_cargs"
###           ("\<^const>utp_pred.taut"
###             ("\<^const>HOL.eq" ("_position" A) ("_position" f)))
###           ("_position" A))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Idempotent) ("_position" f)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.image" ("_position" f)
###         ("\<^const>Set.image" ("_position" f) ("_position" A)))
###       ("\<^const>Set.image" ("_position" f) ("_position" A)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Idempotent) ("_position" f)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" f)
###         ("_cargs" ("\<^const>utp_pred.taut" ("_position" f))
###           ("_position" A)))
###       ("\<^const>Set.image" ("_position" f) ("_position" A)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.utp_healthy"
### 0.351s elapsed time, 0.413s cpu time, 0.054s GC time
Loading theory "Draft.utp_healthyTemplates"
val templateLemmas =
   [("utp_healthy.Monotonic_const", "Monotonic (%x. ?c)",
     template_predicate (template_app (template_hole 0, t_empty))),
    ("utp_healthy.Continuous_const", "Continuous (%X. ?P)",
     template_predicate (template_app (template_hole 0, t_empty))),
    ("utp_healthy.Conjunctive_Monotonic", "Conjunctive ?H ==> Monotonic ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("utp_healthy.Conjuctive_Idempotent",
     "Conjunctive ?H ==> Idempotent ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("utp_healthy.WeakConjunctive_implies_WeakConjunctive",
     "Conjunctive ?H ==> WeakConjunctive ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("utp_healthy.sup_continuous_Continuous",
     "Continuous ?F ==> sup_continuous ?F",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("utp_healthy.Continuous_Monotonic", "Continuous ?H ==> Monotonic ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("utp_healthy.Continuous_Disjunctous",
     "Continuous ?H ==> Disjunctuous ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("utp_healthy.Disjunctuous_Monotonic",
     "Disjunctuous ?H ==> Monotonic ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("utp_healthy.FunctionalConjunctive_Monotonic",
     "FunctionalConjunctive ?H ==> Monotonic ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("utp_healthy.Healthy_Idempotent", "Idempotent ?H ==> ?H ?P is ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_var 1, template_var 0)),
             template_var 1)
           ))),
    ("utp_healthy.WeakConjunctive_Refinement",
     "WeakConjunctive ?HC ==> ?P \<sqsubseteq> ?HC ?P",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_inequation
        (less_equals, template_app (template_var 1, template_var 0),
         template_var 0))),
    ("utp_healthy.Healthy_if", "?P is ?H ==> ?H ?P = ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_var 0, template_var 1), template_var 1))),
    ("utp_healthy.Healthy_intro", "?H ?P = ?P ==> ?P is ?H",
     template_implication
      ([template_equation
         (template_app (template_var 1, template_var 0), template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("utp_healthy.Monotonic_comp",
     "[| Monotonic ?f; Monotonic ?g |] ==> Monotonic (?f o ?g)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("utp_healthy.Continuous_comp",
     "[| Continuous ?f; Continuous ?g |] ==> Continuous (?f o ?g)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("utp_healthy.Conjunctive_conj",
     "Conjunctive ?HC ==> ?HC (?P \<and> ?Q) = (?HC ?P \<and> ?Q)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_equation
        (template_app
          (template_var 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_var 2, template_var 1)),
           template_var 0)))),
    ("utp_healthy.Healthy_range",
     "Idempotent ?H ==> range ?H = \<lbrakk>?H\<rbrakk>\<^sub>H",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0), template_hole 2),
         template_app (template_hole 1, t_empty)))),
    ("utp_healthy.Idempotent_image",
     "Idempotent ?f ==> ?f ` ?f ` ?A = ?f ` ?A",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("utp_healthy.WeakCojunctive_Healthy_Refinement",
     "[| WeakConjunctive ?HC; ?P is ?HC |] ==> ?HC ?P \<sqsubseteq> ?P",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_inequation
        (less_equals, template_var 0,
         template_app (template_var 1, template_var 0)))),
    ("utp_healthy.Conjunctive_distr_conj",
     "Conjunctive ?HC ==> ?HC (?P \<and> ?Q) = (?HC ?P \<and> ?HC ?Q)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_equation
        (template_app
          (template_var 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_var 2, template_var 1)),
           template_app (template_var 2, template_var 0))))),
    ("utp_healthy.Conjunctive_distr_disj",
     "Conjunctive ?HC ==> ?HC (?P \<or> ?Q) = (?HC ?P \<or> ?HC ?Q)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_equation
        (template_app
          (template_var 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_var 2, template_var 1)),
           template_app (template_var 2, template_var 0))))),
    ("utp_healthy.Healthy_carrier_image",
     "?A <= \<lbrakk>?\<H>\<rbrakk>\<^sub>H ==> ?\<H> ` ?A = ?A",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 3, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("utp_healthy.Monotonic_inf",
     "[| Monotonic ?P; Monotonic ?Q |]
      ==> Monotonic (%X. ?P X \<sqinter> ?Q X)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("utp_healthy.Healthy_comp",
     "[| ?P is ?\<H>\<^sub>1; ?P is ?\<H>\<^sub>2 |]
      ==> ?P is ?\<H>\<^sub>1 o ?\<H>\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("utp_healthy.Healthy_INFIMUM",
     "?A <= \<lbrakk>?H\<rbrakk>\<^sub>H ==> \<And>(?H ` ?A) = \<And>?A",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app (template_hole 1, template_var 1)))),
    ("utp_healthy.Healthy_SUPREMUM",
     "?A <= \<lbrakk>?H\<rbrakk>\<^sub>H ==> \<Or>(?H ` ?A) = \<Or>?A",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app (template_hole 1, template_var 1)))),
    ("utp_healthy.Healthy_case_prod",
     "(!!x y. ?P x y is ?H) ==> (case ?v of (x, xa) => ?P x xa) is ?H",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("utp_healthy.Monotonic_cond",
     "[| Monotonic ?P; Monotonic ?Q |]
      ==> Monotonic (%X. ?P X \<triangleleft> ?b \<triangleright> ?Q X)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("utp_healthy.Continuous_cond",
     "[| Continuous ?F; Continuous ?G |]
      ==> Continuous (%X. ?F X \<triangleleft> ?b \<triangleright> ?G X)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("utp_healthy.is_Healthy_subset_member",
     "[| ?A <= \<lbrakk>?H\<rbrakk>\<^sub>H; ?P : ?A |] ==> ?P is ?H",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 2, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0), template_var 1)
           ))),
    ("utp_healthy.Conjunctive_distr_cond",
     "Conjunctive ?HC ==>
      ?HC (?P \<triangleleft> ?b \<triangleright> ?Q) =
      ?HC ?P \<triangleleft> ?b \<triangleright> ?HC ?Q",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 3))],
       template_equation
        (template_app
          (template_var 3,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 2),
             template_app (template_var 3, template_var 1)),
           template_app (template_var 3, template_var 0))))),
    ("utp_healthy.Healthy_set_image_member",
     "[| ?P : ?F ` ?A; !!x. ?F x is ?H |] ==> ?P is ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 3), template_var 0)
           ))),
    ("utp_healthy.Healthy_subset_member",
     "[| ?A <= \<lbrakk>?H\<rbrakk>\<^sub>H; ?P : ?A |] ==> ?H ?P = ?P",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 3, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app (template_var 1, template_var 0), template_var 0))),
    ("utp_healthy.ContinuousD",
     "[| Continuous ?H; \<not> ?A = {} |]
      ==> ?H (\<Or>?A) = \<Or>(?H ` ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_equation
        (template_app
          (template_var 1, template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))))),
    ("utp_healthy.Idempotent_comp",
     "[| Idempotent ?f; Idempotent ?g; ?f o ?g = ?g o ?f |]
      ==> Idempotent (?f o ?g)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 1), template_var 0),
          template_app
           (template_app (template_hole 0, template_var 0),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("utp_healthy.Healthy_carrier_Collect",
     "?A <= \<lbrakk>?H\<rbrakk>\<^sub>H ==>
      ?A = {uu_. EX P. uu_ = ?H P \<and> P : ?A}",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 6, t_empty))],
       template_equation
        (template_var 1, template_app (template_hole 6, t_empty)))),
    ("utp_healthy.Healthy_mu",
     "[| Monotonic ?F;
         ?F : \<lbrakk>id\<rbrakk>\<^sub>H \<rightarrow>
              \<lbrakk>?H\<rbrakk>\<^sub>H |]
      ==> \<mu> ?F is ?H",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app
                 (template_hole 4, template_app (template_hole 3, t_empty)),
                t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("utp_healthy.Healthy_nu",
     "[| Monotonic ?F;
         ?F : \<lbrakk>id\<rbrakk>\<^sub>H \<rightarrow>
              \<lbrakk>?H\<rbrakk>\<^sub>H |]
      ==> \<nu> ?F is ?H",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app
                 (template_hole 4, template_app (template_hole 3, t_empty)),
                t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("utp_healthy.Healthy_apply_closed",
     "[| ?F : \<lbrakk>?H\<rbrakk>\<^sub>H \<rightarrow>
              \<lbrakk>?H\<rbrakk>\<^sub>H;
         ?P is ?H |]
      ==> ?F ?P is ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app
                 (template_hole 2, template_app (template_hole 1, t_empty)),
                t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_var 2, template_var 0)),
             template_var 1)
           ))),
    ("utp_healthy.UINF_ind_closed",
     "[| Continuous ?H; !!i. ?P i = true; !!i. ?Q i is ?H |]
      ==> UINF ?P ?Q is ?H",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("utp_healthy.Healthy_func",
     "[| ?F : \<lbrakk>?\<H>\<^sub>1\<rbrakk>\<^sub>H \<rightarrow>
              \<lbrakk>?\<H>\<^sub>2\<rbrakk>\<^sub>H;
         ?P is ?\<H>\<^sub>1 |]
      ==> ?\<H>\<^sub>2 (?F ?P) = ?F ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app
                 (template_hole 5, template_app (template_hole 4, t_empty)),
                t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_var 1, template_app (template_var 3, template_var 0)),
         template_app (template_var 3, template_var 0)))),
    ("utp_healthy.Sup_Continuous_closed",
     "[| Continuous ?H; !!i. i : ?A ==> ?P i is ?H; \<not> ?A = {} |]
      ==> \<Or>(?P ` ?A) is ?H",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, t_empty),
                   template_var 1))),
             template_var 2)
           ))),
    ("utp_healthy.UINF_healthy",
     "?A <= \<lbrakk>?H\<rbrakk>\<^sub>H ==>
      (\<Sqinter> P \<in> ?A \<bullet> ?F P) =
      (\<Sqinter> P \<in> ?A \<bullet> ?F (?H P))",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 7, t_empty))],
       template_equation
        (template_app (template_app (template_hole 4, t_empty), t_empty),
         template_app (template_app (template_hole 4, t_empty), t_empty)))),
    ("utp_healthy.USUP_healthy",
     "?A <= \<lbrakk>?H\<rbrakk>\<^sub>H ==>
      (\<Squnion> P \<in> ?A \<bullet> ?F P) =
      (\<Squnion> P \<in> ?A \<bullet> ?F (?H P))",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 7, t_empty))],
       template_equation
        (template_app (template_app (template_hole 4, t_empty), t_empty),
         template_app (template_app (template_hole 4, t_empty), t_empty)))),
    ("utp_healthy.UINF_mem_Continuous_closed",
     "[| Continuous ?H; !!i. i : ?A ==> ?P i is ?H; \<not> ?A = {} |]
      ==> (\<Sqinter> i \<in> ?A \<bullet> ?P i) is ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 3, t_empty), t_empty)),
             template_var 2)
           ))),
    ("utp_healthy.UINF_mem_Continuous_closed_pair",
     "[| Continuous ?H; !!i j. (i, j) : ?A ==> ?P i j is ?H;
         \<not> ?A = {} |]
      ==> (\<Sqinter> (i, j) \<in> ?A \<bullet> ?P i j) is ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 2)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, t_empty)),
                 template_app (template_hole 3, t_empty))),
             template_var 2)
           ))),
    ("utp_healthy.UINF_mem_Continuous_closed_triple",
     "[| Continuous ?H; !!i j k. (i, j, k) : ?A ==> ?P i j k is ?H;
         \<not> ?A = {} |]
      ==> (\<Sqinter> (i, j, k) \<in> ?A \<bullet> ?P i j k) is ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 16, template_var 2)),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_negation
         (template_equation (template_var 1, template_hole 6))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, t_empty)),
                 template_app (template_hole 4, t_empty))),
             template_var 2)
           ))),
    ("utp_healthy.UINF_mem_Continuous_closed_quad",
     "[| Continuous ?H; !!i j k l. (i, j, k, l) : ?A ==> ?P i j k l is ?H;
         \<not> ?A = {} |]
      ==> (\<Sqinter> (i, j, k, l) \<in> ?A \<bullet> ?P i j k l) is ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 19, template_var 2)),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_negation
         (template_equation (template_var 1, template_hole 7))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, t_empty)),
                 template_app (template_hole 5, t_empty))),
             template_var 2)
           ))),
    ("utp_healthy.UINF_mem_Continuous_closed_quint",
     "[| Continuous ?H;
         !!i j k l m. (i, j, k, l, m) : ?A ==> ?P i j k l m is ?H;
         \<not> ?A = {} |]
      ==> (\<Sqinter> (i, j, k, l, m) \<in> ?A \<bullet> ?P i j k l m) is
          ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 22, template_var 2)),
        template_predicate (template_app (template_hole 21, t_empty)),
        template_negation
         (template_equation (template_var 1, template_hole 8))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 6, t_empty)),
                 template_app (template_hole 6, t_empty))),
             template_var 2)
           )))]:
   (string * thm * template) list
### theory "Draft.utp_healthyTemplates"
### 0.900s elapsed time, 1.451s cpu time, 0.599s GC time
val it = (): unit
