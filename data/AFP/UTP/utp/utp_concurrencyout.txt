Loading theory "Draft.utp_parser_utils" (required by "Draft.utp_concurrencyTemplates" via "Draft.utp_concurrency" via "Draft.utp_hoare" via "Draft.utp_rel_laws" via "Draft.utp_rel" via "Draft.utp_pred_laws" via "Draft.utp_pred" via "Draft.utp_expr_funcs" via "Draft.utp_expr_insts" via "Draft.utp_expr" via "Draft.utp_var")
Loading theory "Draft.Templates" (required by "Draft.utp_concurrencyTemplates" via "Draft.ExtrEqs")
signature UTP_PARSER_UTILS =
  sig
    val mk_char: string -> Ast.ast
    val mk_nib: int -> Ast.ast
    val mk_string: string list -> Ast.ast
    val string_ast_tr: Ast.ast list -> Ast.ast
  end
signature NAME_UTILS =
  sig
    val deep_unmark_const: term -> term
    val last_char_str: string -> string
    val mk_id: string -> term
    val repeat_char: char -> int -> string
    val right_crop_by: int -> string -> string
  end
structure Utp_Parser_Utils: UTP_PARSER_UTILS
structure Name_Utils: NAME_UTILS
### theory "Draft.utp_parser_utils"
### 0.048s elapsed time, 0.133s cpu time, 0.000s GC time
Loading theory "Draft.utp_var" (required by "Draft.utp_concurrencyTemplates" via "Draft.utp_concurrency" via "Draft.utp_hoare" via "Draft.utp_rel_laws" via "Draft.utp_rel" via "Draft.utp_pred_laws" via "Draft.utp_pred" via "Draft.utp_expr_funcs" via "Draft.utp_expr_insts" via "Draft.utp_expr")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.066s elapsed time, 0.176s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.utp_concurrencyTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.546s elapsed time, 1.099s cpu time, 0.100s GC time
### theory "Draft.utp_var"
### 0.638s elapsed time, 1.209s cpu time, 0.100s GC time
Loading theory "Draft.utp_expr" (required by "Draft.utp_concurrencyTemplates" via "Draft.utp_concurrency" via "Draft.utp_hoare" via "Draft.utp_rel_laws" via "Draft.utp_rel" via "Draft.utp_pred_laws" via "Draft.utp_pred" via "Draft.utp_expr_funcs" via "Draft.utp_expr_insts")
instantiation
  uexpr :: (zero, type) zero
  zero_uexpr == zero_class.zero :: ('a, 'b) uexpr
instantiation
  uexpr :: (one, type) one
  one_uexpr == one_class.one :: ('a, 'b) uexpr
instantiation
  uexpr :: (plus, type) plus
  plus_uexpr == plus :: ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (ord, type) ord
  less_eq_uexpr == less_eq :: ('a, 'b) uexpr => ('a, 'b) uexpr => bool
  less_uexpr == less :: ('a, 'b) uexpr => ('a, 'b) uexpr => bool
### theory "Draft.utp_expr"
### 0.751s elapsed time, 0.789s cpu time, 0.064s GC time
Loading theory "Draft.utp_expr_insts" (required by "Draft.utp_concurrencyTemplates" via "Draft.utp_concurrency" via "Draft.utp_hoare" via "Draft.utp_rel_laws" via "Draft.utp_rel" via "Draft.utp_pred_laws" via "Draft.utp_pred" via "Draft.utp_expr_funcs")
instantiation
  uexpr :: (uminus, type) uminus
  uminus_uexpr == uminus :: ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (minus, type) minus
  minus_uexpr == minus :: ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (times, type) times
  times_uexpr == times :: ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (divide, type) divide
  divide_uexpr == divide ::
    ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (inverse, type) inverse
  inverse_uexpr == inverse :: ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (modulo, type) modulo
  modulo_uexpr == modulo ::
    ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (sgn, type) sgn
  sgn_uexpr == sgn :: ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (abs, type) abs
  abs_uexpr == abs :: ('a, 'b) uexpr => ('a, 'b) uexpr
### theory "Draft.utp_expr_insts"
### 0.224s elapsed time, 0.224s cpu time, 0.000s GC time
Loading theory "Draft.utp_expr_funcs" (required by "Draft.utp_concurrencyTemplates" via "Draft.utp_concurrency" via "Draft.utp_hoare" via "Draft.utp_rel_laws" via "Draft.utp_rel" via "Draft.utp_pred_laws" via "Draft.utp_pred")
Loading theory "Draft.utp_unrest" (required by "Draft.utp_concurrencyTemplates" via "Draft.utp_concurrency" via "Draft.utp_hoare" via "Draft.utp_rel_laws" via "Draft.utp_rel" via "Draft.utp_pred_laws" via "Draft.utp_pred" via "Draft.utp_subst")
### theory "Draft.utp_expr_funcs"
### 0.146s elapsed time, 0.299s cpu time, 0.056s GC time
### theory "Draft.utp_unrest"
### 0.227s elapsed time, 0.380s cpu time, 0.056s GC time
Loading theory "Draft.utp_usedby" (required by "Draft.utp_concurrencyTemplates" via "Draft.utp_concurrency" via "Draft.utp_hoare" via "Draft.utp_rel_laws" via "Draft.utp_rel" via "Draft.utp_pred_laws" via "Draft.utp_pred" via "Draft.utp_meta_subst" via "Draft.utp_tactics")
Loading theory "Draft.utp_subst" (required by "Draft.utp_concurrencyTemplates" via "Draft.utp_concurrency" via "Draft.utp_hoare" via "Draft.utp_rel_laws" via "Draft.utp_rel" via "Draft.utp_pred_laws" via "Draft.utp_pred")
### theory "Draft.utp_usedby"
### 0.083s elapsed time, 0.165s cpu time, 0.000s GC time
Loading theory "Draft.utp_tactics" (required by "Draft.utp_concurrencyTemplates" via "Draft.utp_concurrency" via "Draft.utp_hoare" via "Draft.utp_rel_laws" via "Draft.utp_rel" via "Draft.utp_pred_laws" via "Draft.utp_pred" via "Draft.utp_meta_subst")
signature UEXPR_REP_EQ =
  sig
    val get_uexpr_rep_eq_thms: theory -> thm list
    val read_uexpr_rep_eq_thms: theory -> theory
  end
structure uexpr_rep_eq: UEXPR_REP_EQ
val it = (): unit
### theory "Draft.utp_subst"
### 0.423s elapsed time, 0.853s cpu time, 0.054s GC time
structure List_Extra: sig val contains: ''a -> ''a list -> bool end
signature BASIC_TACTICS =
  sig
    val fast_transfer: Proof.context -> thm list -> context_tactic
    val interp_tac: Proof.context -> thm list -> context_tactic
    val slow_transfer: Proof.context -> thm list -> context_tactic
    val utp_auto_tac: Proof.context -> thm list -> context_tactic
    val utp_blast_tac: Proof.context -> thm list -> context_tactic
    val utp_simp_tac: Proof.context -> thm list -> context_tactic
  end
structure Basic_Tactics: BASIC_TACTICS
signature UTP_TACTICS =
  sig
    val inst_gen_pred_tac:
       utp_tac_args ->
         (Proof.context -> thm list -> context_tactic) ->
           Proof.context -> thm list -> context_tactic
    val inst_gen_rel_tac:
       utp_tac_args ->
         (Proof.context -> thm list -> context_tactic) ->
           Proof.context -> thm list -> context_tactic
    val no_interpN: string
    val robustN: string
    val scan_args: utp_tac_args parser
    type utp_tac_args
  end
structure UTP_Tactics: UTP_TACTICS
### theory "Draft.utp_tactics"
### 1.500s elapsed time, 1.922s cpu time, 0.097s GC time
Loading theory "Draft.utp_meta_subst" (required by "Draft.utp_concurrencyTemplates" via "Draft.utp_concurrency" via "Draft.utp_hoare" via "Draft.utp_rel_laws" via "Draft.utp_rel" via "Draft.utp_pred_laws" via "Draft.utp_pred")
### theory "Draft.utp_meta_subst"
### 0.394s elapsed time, 0.451s cpu time, 0.033s GC time
Loading theory "Draft.utp_pred" (required by "Draft.utp_concurrencyTemplates" via "Draft.utp_concurrency" via "Draft.utp_hoare" via "Draft.utp_rel_laws" via "Draft.utp_rel" via "Draft.utp_pred_laws")
instantiation
  uexpr :: (lattice, type) lattice
  inf_uexpr == inf :: ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
  sup_uexpr == sup :: ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (bounded_lattice, type) bounded_lattice
  bot_uexpr == bot :: ('a, 'b) uexpr
  top_uexpr == top_class.top :: ('a, 'b) uexpr
instantiation
  uexpr :: (complete_lattice, type) complete_lattice
  Inf_uexpr == Inf :: ('a, 'b) uexpr set => ('a, 'b) uexpr
  Sup_uexpr == Sup :: ('a, 'b) uexpr set => ('a, 'b) uexpr
### Ignoring duplicate rewrite rule:
### ?X1 \<subseteq>\<^sub>L ?X1 == True
### Ignoring duplicate rewrite rule:
### wb_lens ?Y1 ==> ?X1 \<subseteq>\<^sub>L ?X1 +\<^sub>L ?Y1 == True
### theory "Draft.utp_pred"
### 1.482s elapsed time, 1.884s cpu time, 0.529s GC time
Loading theory "Draft.utp_pred_laws" (required by "Draft.utp_concurrencyTemplates" via "Draft.utp_concurrency" via "Draft.utp_hoare" via "Draft.utp_rel_laws" via "Draft.utp_rel")
Loading theory "Draft.utp_alphabet" (required by "Draft.utp_concurrencyTemplates" via "Draft.utp_concurrency" via "Draft.utp_hoare" via "Draft.utp_rel_laws" via "Draft.utp_rel" via "Draft.utp_lift")
### Partially applied constant "utp_pred.conj_upred" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<and>) (ran\<^sub>l (?x # ?xs)) ==
### fold (\<and>) ?xs ?x
### Partially applied constant "utp_pred.disj_upred" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<or>) (ran\<^sub>l (?x # ?xs)) ==
### fold (\<or>) ?xs ?x
### theory "Draft.utp_alphabet"
### 0.585s elapsed time, 1.272s cpu time, 0.127s GC time
Loading theory "Draft.utp_lift" (required by "Draft.utp_concurrencyTemplates" via "Draft.utp_concurrency" via "Draft.utp_hoare" via "Draft.utp_rel_laws" via "Draft.utp_rel")
### theory "Draft.utp_lift"
### 0.069s elapsed time, 0.137s cpu time, 0.051s GC time
### theory "Draft.utp_pred_laws"
### 0.935s elapsed time, 1.691s cpu time, 0.179s GC time
Loading theory "Draft.utp_healthy" (required by "Draft.utp_concurrencyTemplates" via "Draft.utp_concurrency" via "Draft.utp_hoare" via "Draft.utp_rel_laws" via "Draft.utp_rel")
### Ambiguous input (line 129 of "$AFP/UTP/utp/utp_healthy.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Idempotent) ("_position" f)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" f)
###       ("_cargs"
###         ("\<^const>utp_pred.taut"
###           ("\<^const>HOL.eq"
###             ("\<^const>Set.image" ("_position" f) ("_position" A))
###             ("_position" f)))
###         ("_position" A)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Idempotent) ("_position" f)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.image" ("_position" f)
###       ("_applC" ("_position" f)
###         ("_cargs"
###           ("\<^const>utp_pred.taut"
###             ("\<^const>HOL.eq" ("_position" A) ("_position" f)))
###           ("_position" A))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Idempotent) ("_position" f)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.image" ("_position" f)
###         ("\<^const>Set.image" ("_position" f) ("_position" A)))
###       ("\<^const>Set.image" ("_position" f) ("_position" A)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Idempotent) ("_position" f)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" f)
###         ("_cargs" ("\<^const>utp_pred.taut" ("_position" f))
###           ("_position" A)))
###       ("\<^const>Set.image" ("_position" f) ("_position" A)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.utp_healthy"
### 0.565s elapsed time, 0.983s cpu time, 0.573s GC time
Loading theory "Draft.utp_rel" (required by "Draft.utp_concurrencyTemplates" via "Draft.utp_concurrency" via "Draft.utp_hoare" via "Draft.utp_rel_laws")
### theory "Draft.utp_rel"
### 1.002s elapsed time, 1.136s cpu time, 0.122s GC time
Loading theory "Draft.utp_recursion" (required by "Draft.utp_concurrencyTemplates" via "Draft.utp_concurrency" via "Draft.utp_hoare" via "Draft.utp_rel_laws")
### theory "Draft.utp_recursion"
### 0.137s elapsed time, 0.137s cpu time, 0.000s GC time
Loading theory "Draft.utp_rel_laws" (required by "Draft.utp_concurrencyTemplates" via "Draft.utp_concurrency" via "Draft.utp_hoare")
### Ambiguous input (line 409 of "$AFP/UTP/utp/utp_rel_laws.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" vwb_lens) ("_position" x)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" vwb_lens) ("_position" y)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Lens_Laws.lens_indep" ("_position" x)
###             ("_position" y))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" uinj)
###       ("_assignment" ("_svid_list" ("_svid" x) ("_svid_unit" ("_svid" y)))
###         ("_uexprs" ("_uexp_l" ("_uuvar" ("_spvar" ("_svid" y))))
###           ("_uexp_l" ("_uuvar" ("_spvar" ("_svid" x)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" vwb_lens) ("_position" x)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" vwb_lens) ("_position" y)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Lens_Laws.lens_indep" ("_position" x)
###             ("_position" y))))))
###   ("\<^const>HOL.Trueprop"
###     ("_Update" ("_position" uinj)
###       ("_updbind" ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y)))
###         ("_tuple" ("_uuvar" ("_spvar" ("_svid" y)))
###           ("_tuple_arg" ("_uuvar" ("_spvar" ("_svid" x)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Partially applied constant "utp_rel.seqr" on left hand side of equation, in theorem:
### monoid_mult.prod_list II (;;) ?xs == foldr (;;) ?xs II
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### monoid_add.sum_list (\<sqinter>) false ?xs == foldr (\<sqinter>) ?xs false
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### comm_monoid_add.sum (\<sqinter>) false ?g (ran\<^sub>l ?xs) ==
### monoid_add.sum_list (\<sqinter>) false (map ?g (remdups ?xs))
### Type
### ?'a::type hrel => ?'a::type hrel => bool => ?'a::type hrel
### of constant "Rings.zero_neq_one.of_bool"
### is too specific compared to declared type
### ?'a::{} => ?'a::{} => bool => ?'a::{}, in theorem:
### zero_neq_one.of_bool II false False == false
### Type
### ?'a::type hrel => ?'a::type hrel => bool => ?'a::type hrel
### of constant "Rings.zero_neq_one.of_bool"
### is too specific compared to declared type
### ?'a::{} => ?'a::{} => bool => ?'a::{}, in theorem:
### zero_neq_one.of_bool II false True == II
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### numeral.numeral II (\<sqinter>) num.One == II
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### numeral.numeral II (\<sqinter>) (num.Bit0 ?n) ==
### let m = numeral.numeral II (\<sqinter>) ?n in m \<sqinter> m
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### numeral.numeral II (\<sqinter>) (num.Bit1 ?n) ==
### let m = numeral.numeral II (\<sqinter>) ?n in m \<sqinter> m \<sqinter> II
### theory "Draft.utp_rel_laws"
### 1.784s elapsed time, 2.544s cpu time, 0.910s GC time
Loading theory "Draft.utp_theory" (required by "Draft.utp_concurrencyTemplates" via "Draft.utp_concurrency" via "Draft.utp_hoare")
locale utp_theory
  fixes hcond :: "'\<alpha> hrel => '\<alpha> hrel"  (\<open>\<H>\<close>)
  assumes "utp_theory \<H>"
locale utp_theory_lattice
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
  assumes "utp_theory_lattice \<H>"
locale utp_theory_lattice
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
  assumes "utp_theory_lattice \<H>"
locale utp_theory_mono
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
  assumes "utp_theory_mono \<H>"
locale utp_theory_mono
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
  assumes "utp_theory_mono \<H>"
locale utp_theory_continuous
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
  assumes "utp_theory_continuous \<H>"
locale utp_theory_continuous
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
  assumes "utp_theory_continuous \<H>"
locale utp_theory_rel
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
  assumes "utp_theory_rel \<H>"
locale utp_theory_cont_rel
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
  assumes "utp_theory_cont_rel \<H>"
locale utp_theory_units
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
    and utp_unit :: "'a hrel"  (\<open>\<I>\<I>\<close>)
  assumes "utp_theory_units \<H> \<I>\<I>"
locale utp_theory_left_unital
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
    and utp_unit :: "'a hrel"  (\<open>\<I>\<I>\<close>)
  assumes "utp_theory_left_unital \<H> \<I>\<I>"
locale utp_theory_right_unital
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
    and utp_unit :: "'a hrel"  (\<open>\<I>\<I>\<close>)
  assumes "utp_theory_right_unital \<H> \<I>\<I>"
locale utp_theory_unital
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
    and utp_unit :: "'a hrel"  (\<open>\<I>\<I>\<close>)
  assumes "utp_theory_unital \<H> \<I>\<I>"
locale utp_theory_mono_unital
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
    and utp_unit :: "'a hrel"  (\<open>\<I>\<I>\<close>)
  assumes "utp_theory_mono_unital \<H> \<I>\<I>"
locale utp_theory_cont_unital
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
    and utp_unit :: "'a hrel"  (\<open>\<I>\<I>\<close>)
  assumes "utp_theory_cont_unital \<H> \<I>\<I>"
locale utp_theory_unital_zerol
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
    and utp_unit :: "'a hrel"  (\<open>\<I>\<I>\<close>)
  assumes "utp_theory_unital_zerol \<H> \<I>\<I>"
locale utp_theory_cont_unital_zerol
  fixes hcond :: "'a hrel => 'a hrel"  (\<open>\<H>\<close>)
    and utp_unit :: "'a hrel"  (\<open>\<I>\<I>\<close>)
  assumes "utp_theory_cont_unital_zerol \<H> \<I>\<I>"
### Cannot skip proof of schematic goal statement
[| Mono\<^bsub>rel_theory.thy_order\<^esub> ?f;
   ?f : UNIV \<rightarrow> UNIV |]
==> rel_theory.utp_gfp ?f = ?f (rel_theory.utp_gfp ?f)
### theory "Draft.utp_theory"
### 1.589s elapsed time, 1.718s cpu time, 0.215s GC time
Loading theory "Draft.utp_hoare" (required by "Draft.utp_concurrencyTemplates" via "Draft.utp_concurrency")
### theory "Draft.utp_hoare"
### 0.561s elapsed time, 0.678s cpu time, 0.084s GC time
Loading theory "Draft.utp_concurrency" (required by "Draft.utp_concurrencyTemplates")
consts
  mrg_prior :: "'a \<Longrightarrow> ('a, 'b, 'c, 'd) mrg_scheme"
consts
  mrg_left :: "'e \<Longrightarrow> ('f, 'e, 'g, 'h) mrg_scheme"
consts
  mrg_right :: "'i \<Longrightarrow> ('j, 'k, 'i, 'l) mrg_scheme"
consts
  base\<^sub>L ::
    "('m, 'n, 'o) mrg \<Longrightarrow> ('m, 'n, 'o, 'p) mrg_scheme"
consts
  more\<^sub>L :: "'q \<Longrightarrow> ('r, 's, 't, 'q) mrg_scheme"
consts
  all\<^sub>L ::
    "<('a, 'b,
       'c) mrg, 'd> \<Longleftrightarrow> ('a, 'b, 'c, 'd) mrg_scheme"
### theory "Draft.utp_concurrency"
### 1.051s elapsed time, 1.116s cpu time, 0.116s GC time
Loading theory "Draft.utp_concurrencyTemplates"
val templateLemmas =
   [("utp_concurrency.left_uvar_indep_pre_uvar",
     "0-?x \<bowtie> ?y\<^sub><",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 0))
         )),
    ("utp_concurrency.left_uvar_indep_right_uvar", "0-?x \<bowtie> 1-?y",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 0))
         )),
    ("utp_concurrency.pre_uvar_indep_left_uvar",
     "?x\<^sub>< \<bowtie> 0-?y",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 0))
         )),
    ("utp_concurrency.pre_uvar_indep_right_uvar",
     "?x\<^sub>< \<bowtie> 1-?y",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 0))
         )),
    ("utp_concurrency.right_uvar_indep_left_uvar", "1-?x \<bowtie> 0-?y",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 0))
         )),
    ("utp_concurrency.right_uvar_indep_pre_uvar",
     "1-?x \<bowtie> ?y\<^sub><",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 0))
         )),
    ("utp_concurrency.par_by_merge_right_false",
     "?P \<parallel>\<^bsub>?M\<^esub> false = false",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_hole 0)),
    ("utp_concurrency.par_by_merge_false",
     "?P \<parallel>\<^bsub>false\<^esub> ?Q = false",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_hole 1),
         template_var 0),
       template_hole 0)),
    ("utp_concurrency.par_by_merge_left_false",
     "false \<parallel>\<^bsub>?M\<^esub> ?Q = false",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 1),
         template_var 0),
       template_hole 0)),
    ("utp_concurrency.U0_as_alpha", "?P ;; U0 = \<lceil>?P\<rceil>\<^sub>0",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("utp_concurrency.U1_as_alpha", "?P ;; U1 = \<lceil>?P\<rceil>\<^sub>1",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("utp_concurrency.U0\<alpha>_comp_in_var",
     "$?x ;\<^sub>L U0\<alpha> = $?x",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("utp_concurrency.U1\<alpha>_comp_in_var",
     "$?x ;\<^sub>L U1\<alpha> = $?x",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("utp_concurrency.pre_uvar_mwb",
     "mwb_lens ?x ==> mwb_lens (?x\<^sub><)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("utp_concurrency.left_uvar_mwb", "mwb_lens ?x ==> mwb_lens (0-?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("utp_concurrency.right_uvar_mwb", "mwb_lens ?x ==> mwb_lens (1-?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("utp_concurrency.pre_uvar", "vwb_lens ?x ==> vwb_lens (?x\<^sub><)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("utp_concurrency.left_uvar", "vwb_lens ?x ==> vwb_lens (0-?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("utp_concurrency.right_uvar", "vwb_lens ?x ==> vwb_lens (1-?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("utp_concurrency.U0\<alpha>_comp_out_var",
     "$?x\<acute> ;\<^sub>L U0\<alpha> = $0-?x\<acute>",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("utp_concurrency.U1\<alpha>_comp_out_var",
     "$?x\<acute> ;\<^sub>L U1\<alpha> = $1-?x\<acute>",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("utp_concurrency.U1\<alpha>_indep_left_uvar",
     "vwb_lens ?x ==> U1\<alpha> \<bowtie> $0-?x\<acute>",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("utp_concurrency.U0\<alpha>_indep_right_uvar",
     "vwb_lens ?x ==> U0\<alpha> \<bowtie> $1-?x\<acute>",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("utp_concurrency.U0_alpha_out_var",
     "\<lceil>$?x\<acute>\<rceil>\<^sub>0 = $0-?x\<acute>",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0))),
         template_hole 3),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("utp_concurrency.U1_alpha_out_var",
     "\<lceil>$?x\<acute>\<rceil>\<^sub>1 = $1-?x\<acute>",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0))),
         template_hole 3),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("utp_concurrency.pre_uvar_indep_pre_uvar",
     "?x \<bowtie> ?y ==> ?x\<^sub>< \<bowtie> ?y\<^sub><",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("utp_concurrency.left_uvar_indep_left_uvar",
     "?x \<bowtie> ?y ==> 0-?x \<bowtie> 0-?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("utp_concurrency.right_uvar_indep_right_uvar",
     "?x \<bowtie> ?y ==> 1-?x \<bowtie> 1-?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("utp_concurrency.par_by_merge_commute_swap",
     "?P \<parallel>\<^bsub>?M\<^esub> ?Q =
      ?Q \<parallel>\<^bsub>swap\<^sub>m ;; ?M\<^esub> ?P",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1)),
         template_var 2))),
    ("utp_concurrency.U0_seqr",
     "\<lceil>?P ;; ?Q\<rceil>\<^sub>0 = ?P ;; \<lceil>?Q\<rceil>\<^sub>0",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_hole 3),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("utp_concurrency.U1_seqr",
     "\<lceil>?P ;; ?Q\<rceil>\<^sub>1 = ?P ;; \<lceil>?Q\<rceil>\<^sub>1",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_hole 3),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("utp_concurrency.par_by_merge_seq_add",
     "?P \<parallel>\<^bsub>?M\<^esub> ?Q ;; ?R =
      ?P \<parallel>\<^bsub>?M ;; ?R\<^esub> ?Q",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("utp_concurrency.unrest_out_par_by_merge",
     "$?x\<acute> \<sharp> ?M ==>
      $?x\<acute> \<sharp> ?P \<parallel>\<^bsub>?M\<^esub> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 3)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2),
               template_var 0))
           ))),
    ("utp_concurrency.swap_StateMerge",
     "?a \<bowtie> ?b ==>
      swap\<^sub>m ;; M[?a|?b]\<^sub>\<sigma> = M[?b|?a]\<^sub>\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("utp_concurrency.par_by_merge_mono_1",
     "?P\<^sub>1 \<sqsubseteq> ?P\<^sub>2 ==>
      ?P\<^sub>1 \<parallel>\<^bsub>?M\<^esub> ?Q \<sqsubseteq>
      ?P\<^sub>2 \<parallel>\<^bsub>?M\<^esub> ?Q",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("utp_concurrency.par_by_merge_mono_2",
     "?Q\<^sub>1 \<sqsubseteq> ?Q\<^sub>2 ==>
      ?P \<parallel>\<^bsub>?M\<^esub> ?Q\<^sub>1 \<sqsubseteq>
      ?P \<parallel>\<^bsub>?M\<^esub> ?Q\<^sub>2",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2)))),
    ("utp_concurrency.shEx_pbm_right",
     "?P \<parallel>\<^bsub>?M\<^esub> ushEx ?Q =
      (\<^bold>\<exists> x \<bullet> ?P \<parallel>\<^bsub>?M\<^esub> ?Q
                                 x)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_app (template_hole 1, t_empty)),
       template_app (template_hole 0, t_empty))),
    ("utp_concurrency.shEx_pbm_left",
     "ushEx ?P \<parallel>\<^bsub>?M\<^esub> ?Q =
      (\<^bold>\<exists> x \<bullet> ?P
x \<parallel>\<^bsub>?M\<^esub> ?Q)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2, template_app (template_hole 1, t_empty)),
           template_var 1),
         template_var 0),
       template_app (template_hole 0, t_empty))),
    ("utp_concurrency.par_by_merge_choice_right",
     "?P \<parallel>\<^bsub>?M\<^esub> (?Q \<sqinter> ?R) =
      ?P \<parallel>\<^bsub>?M\<^esub> ?Q \<sqinter>
      ?P \<parallel>\<^bsub>?M\<^esub> ?R",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_var 0)))),
    ("utp_concurrency.par_by_merge_or_right",
     "?P \<parallel>\<^bsub>?M\<^esub> (?Q \<or> ?R) =
      (?P \<parallel>\<^bsub>?M\<^esub> ?Q \<or>
       ?P \<parallel>\<^bsub>?M\<^esub> ?R)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_var 0)))),
    ("utp_concurrency.par_by_merge_choice_left",
     "(?P \<sqinter> ?Q) \<parallel>\<^bsub>?M\<^esub> ?R =
      ?P \<parallel>\<^bsub>?M\<^esub> ?R \<sqinter>
      ?Q \<parallel>\<^bsub>?M\<^esub> ?R",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)))),
    ("utp_concurrency.par_by_merge_or_left",
     "(?P \<or> ?Q) \<parallel>\<^bsub>?M\<^esub> ?R =
      (?P \<parallel>\<^bsub>?M\<^esub> ?R \<or>
       ?Q \<parallel>\<^bsub>?M\<^esub> ?R)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)))),
    ("utp_concurrency.par_by_merge_commute",
     "?M is (;;) swap\<^sub>m ==>
      ?P \<parallel>\<^bsub>?M\<^esub> ?Q =
      ?Q \<parallel>\<^bsub>?M\<^esub> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2), t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2),
           template_var 1)))),
    ("utp_concurrency.StateParallel_commute",
     "?a \<bowtie> ?b ==>
      ?P |?a|?b|\<^sub>\<sigma> ?Q = ?Q |?b|?a|\<^sub>\<sigma> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 3)),
           template_var 1)))),
    ("utp_concurrency.par_by_merge_USUP_ind_right",
     "?P \<parallel>\<^bsub>?M\<^esub> (\<Sqinter> i \<bullet> ?Q i) =
      (\<Sqinter> i \<bullet> ?P \<parallel>\<^bsub>?M\<^esub> ?Q i)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_app (template_app (template_hole 3, t_empty), t_empty)),
       template_app (template_app (template_hole 1, t_empty), t_empty))),
    ("utp_concurrency.par_by_merge_USUP_ind_left",
     "(\<Sqinter> i \<bullet> ?P i) \<parallel>\<^bsub>?M\<^esub> ?Q =
      (\<Sqinter> i \<bullet> ?P i \<parallel>\<^bsub>?M\<^esub> ?Q)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, t_empty), t_empty)),
           template_var 1),
         template_var 0),
       template_app (template_app (template_hole 1, t_empty), t_empty))),
    ("utp_concurrency.par_by_merge_mono",
     "[| ?P\<^sub>1 \<sqsubseteq> ?P\<^sub>2;
         ?Q\<^sub>1 \<sqsubseteq> ?Q\<^sub>2 |]
      ==> ?P\<^sub>1 \<parallel>\<^bsub>?M\<^esub> ?Q\<^sub>1 \<sqsubseteq>
          ?P\<^sub>2 \<parallel>\<^bsub>?M\<^esub> ?Q\<^sub>2",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3),
        template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 0),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0),
           template_var 1)))),
    ("utp_concurrency.par_by_merge_skip",
     "[| ?P ;; true = true; ?Q ;; true = true |]
      ==> ?P \<parallel>\<^bsub>skip\<^sub>m\<^esub> ?Q = II",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 8, template_var 1),
            template_hole 7),
          template_hole 7),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 0),
            template_hole 4),
          template_hole 4)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1),
           template_var 0),
         template_hole 0))),
    ("utp_concurrency.U0_alpha_lift_bool_subst",
     "?\<sigma>($0-?x\<acute> \<mapsto>\<^sub>s false) \<dagger>
      \<lceil>?P\<rceil>\<^sub>0 =
      ?\<sigma> \<dagger>
      \<lceil>?P\<lbrakk>false/$?x\<acute>\<rbrakk>\<rceil>\<^sub>0",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app
              (template_app (template_hole 10, template_var 2),
               template_app
                (template_hole 9,
                 template_app (template_hole 8, template_var 1))),
             template_hole 7)),
         template_app
          (template_app (template_hole 6, template_var 0),
           template_hole 5)),
       template_app
        (template_app (template_hole 11, template_var 2),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app (template_hole 3, template_hole 2),
                     template_app (template_hole 1, template_var 1)),
                   template_hole 0)),
               template_var 0)),
           template_hole 5)))),
    ("utp_concurrency.U0_alpha_lift_bool_subst",
     "?\<sigma>($0-?x\<acute> \<mapsto>\<^sub>s true) \<dagger>
      \<lceil>?P\<rceil>\<^sub>0 =
      ?\<sigma> \<dagger>
      \<lceil>?P\<lbrakk>true/$?x\<acute>\<rbrakk>\<rceil>\<^sub>0",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app
              (template_app (template_hole 10, template_var 2),
               template_app
                (template_hole 9,
                 template_app (template_hole 8, template_var 1))),
             template_hole 7)),
         template_app
          (template_app (template_hole 6, template_var 0),
           template_hole 5)),
       template_app
        (template_app (template_hole 11, template_var 2),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app (template_hole 3, template_hole 2),
                     template_app (template_hole 1, template_var 1)),
                   template_hole 0)),
               template_var 0)),
           template_hole 5)))),
    ("utp_concurrency.U1_alpha_lift_bool_subst",
     "?\<sigma>($1-?x\<acute> \<mapsto>\<^sub>s false) \<dagger>
      \<lceil>?P\<rceil>\<^sub>1 =
      ?\<sigma> \<dagger>
      \<lceil>?P\<lbrakk>false/$?x\<acute>\<rbrakk>\<rceil>\<^sub>1",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app
              (template_app (template_hole 10, template_var 2),
               template_app
                (template_hole 9,
                 template_app (template_hole 8, template_var 1))),
             template_hole 7)),
         template_app
          (template_app (template_hole 6, template_var 0),
           template_hole 5)),
       template_app
        (template_app (template_hole 11, template_var 2),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app (template_hole 3, template_hole 2),
                     template_app (template_hole 1, template_var 1)),
                   template_hole 0)),
               template_var 0)),
           template_hole 5)))),
    ("utp_concurrency.U1_alpha_lift_bool_subst",
     "?\<sigma>($1-?x\<acute> \<mapsto>\<^sub>s true) \<dagger>
      \<lceil>?P\<rceil>\<^sub>1 =
      ?\<sigma> \<dagger>
      \<lceil>?P\<lbrakk>true/$?x\<acute>\<rbrakk>\<rceil>\<^sub>1",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app
              (template_app (template_hole 10, template_var 2),
               template_app
                (template_hole 9,
                 template_app (template_hole 8, template_var 1))),
             template_hole 7)),
         template_app
          (template_app (template_hole 6, template_var 0),
           template_hole 5)),
       template_app
        (template_app (template_hole 11, template_var 2),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app (template_hole 3, template_hole 2),
                     template_app (template_hole 1, template_var 1)),
                   template_hole 0)),
               template_var 0)),
           template_hole 5)))),
    ("utp_concurrency.U0_seq_subst",
     "(?P ;;
       U0)\<lbrakk>\<guillemotleft>?v\<guillemotright>/$0-?x\<acute>\<rbrakk> =
      ?P\<lbrakk>\<guillemotleft>?v\<guillemotright>/$?x\<acute>\<rbrakk> ;;
      U0",
     template_equation
      (template_app
        (template_app
          (template_hole 12,
           template_app
            (template_app
              (template_app (template_hole 11, template_hole 10),
               template_app
                (template_hole 9,
                 template_app (template_hole 8, template_var 2))),
             template_app (template_hole 7, template_var 1))),
         template_app
          (template_app (template_hole 6, template_var 0),
           template_hole 5)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_app (template_hole 1, template_var 2)),
                 template_app (template_hole 0, template_var 1))),
             template_var 0)),
         template_hole 5))),
    ("utp_concurrency.U1_seq_subst",
     "(?P ;;
       U1)\<lbrakk>\<guillemotleft>?v\<guillemotright>/$1-?x\<acute>\<rbrakk> =
      ?P\<lbrakk>\<guillemotleft>?v\<guillemotright>/$?x\<acute>\<rbrakk> ;;
      U1",
     template_equation
      (template_app
        (template_app
          (template_hole 12,
           template_app
            (template_app
              (template_app (template_hole 11, template_hole 10),
               template_app
                (template_hole 9,
                 template_app (template_hole 8, template_var 2))),
             template_app (template_hole 7, template_var 1))),
         template_app
          (template_app (template_hole 6, template_var 0),
           template_hole 5)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_app (template_hole 1, template_var 2)),
                 template_app (template_hole 0, template_var 1))),
             template_var 0)),
         template_hole 5))),
    ("utp_concurrency.bool_pbm_subst",
     "?\<sigma>($?x\<acute> \<mapsto>\<^sub>s false) \<dagger>
      ?P \<parallel>\<^bsub>?M\<^esub> ?Q =
      ?\<sigma> \<dagger>
      ?P \<parallel>\<^bsub>?M\<lbrakk>false/$?x\<acute>\<rbrakk>\<^esub> ?Q",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_app (template_hole 8, template_var 4),
               template_app (template_hole 7, template_var 3)),
             template_hole 6)),
         template_app
          (template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 9, template_var 4),
         template_app
          (template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app (template_hole 3, template_hole 2),
                     template_app (template_hole 1, template_var 3)),
                   template_hole 0)),
               template_var 1)),
           template_var 0)))),
    ("utp_concurrency.zero_one_pbm_subst",
     "?\<sigma>($?x\<acute> \<mapsto>\<^sub>s 0) \<dagger>
      ?P \<parallel>\<^bsub>?M\<^esub> ?Q =
      ?\<sigma> \<dagger>
      ?P \<parallel>\<^bsub>?M\<lbrakk>0/$?x\<acute>\<rbrakk>\<^esub> ?Q",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_app (template_hole 8, template_var 4),
               template_app (template_hole 7, template_var 3)),
             template_hole 6)),
         template_app
          (template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 9, template_var 4),
         template_app
          (template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app (template_hole 3, template_hole 2),
                     template_app (template_hole 1, template_var 3)),
                   template_hole 0)),
               template_var 1)),
           template_var 0)))),
    ("utp_concurrency.bool_pbm_subst",
     "?\<sigma>($?x\<acute> \<mapsto>\<^sub>s true) \<dagger>
      ?P \<parallel>\<^bsub>?M\<^esub> ?Q =
      ?\<sigma> \<dagger>
      ?P \<parallel>\<^bsub>?M\<lbrakk>true/$?x\<acute>\<rbrakk>\<^esub> ?Q",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_app (template_hole 8, template_var 4),
               template_app (template_hole 7, template_var 3)),
             template_hole 6)),
         template_app
          (template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 9, template_var 4),
         template_app
          (template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app (template_hole 3, template_hole 2),
                     template_app (template_hole 1, template_var 3)),
                   template_hole 0)),
               template_var 1)),
           template_var 0)))),
    ("utp_concurrency.zero_one_pbm_subst",
     "?\<sigma>($?x\<acute> \<mapsto>\<^sub>s 1) \<dagger>
      ?P \<parallel>\<^bsub>?M\<^esub> ?Q =
      ?\<sigma> \<dagger>
      ?P \<parallel>\<^bsub>?M\<lbrakk>1/$?x\<acute>\<rbrakk>\<^esub> ?Q",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_app (template_hole 8, template_var 4),
               template_app (template_hole 7, template_var 3)),
             template_hole 6)),
         template_app
          (template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 9, template_var 4),
         template_app
          (template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app (template_hole 3, template_hole 2),
                     template_app (template_hole 1, template_var 3)),
                   template_hole 0)),
               template_var 1)),
           template_var 0)))),
    ("utp_concurrency.lit_pbm_subst",
     "?\<sigma>($?x\<acute> \<mapsto>\<^sub>s
      \<guillemotleft>?v\<guillemotright>) \<dagger>
      ?P \<parallel>\<^bsub>?M\<^esub> ?Q =
      ?\<sigma> \<dagger>
      ?P \<parallel>\<^bsub>?M\<lbrakk>\<guillemotleft>?v\<guillemotright>/$?x\<acute>\<rbrakk>\<^esub> ?Q",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_app (template_hole 8, template_var 5),
               template_app (template_hole 7, template_var 4)),
             template_app (template_hole 6, template_var 3))),
         template_app
          (template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 9, template_var 5),
         template_app
          (template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app (template_hole 3, template_hole 2),
                     template_app (template_hole 1, template_var 4)),
                   template_app (template_hole 0, template_var 3))),
               template_var 1)),
           template_var 0)))),
    ("utp_concurrency.numeral_pbm_subst",
     "?\<sigma>($?x\<acute> \<mapsto>\<^sub>s numeral ?n) \<dagger>
      ?P \<parallel>\<^bsub>?M\<^esub> ?Q =
      ?\<sigma> \<dagger>
      ?P \<parallel>\<^bsub>?M\<lbrakk>numeral
  ?n/$?x\<acute>\<rbrakk>\<^esub> ?Q",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_app (template_hole 8, template_var 5),
               template_app (template_hole 7, template_var 4)),
             template_app (template_hole 6, template_var 3))),
         template_app
          (template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 9, template_var 5),
         template_app
          (template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app (template_hole 3, template_hole 2),
                     template_app (template_hole 1, template_var 4)),
                   template_app (template_hole 0, template_var 3))),
               template_var 1)),
           template_var 0)))),
    ("utp_concurrency.unrest_in_par_by_merge",
     "[| $?x \<sharp> ?P; $?x\<^sub>< \<sharp> ?M; $?x \<sharp> ?Q |]
      ==> $?x \<sharp> ?P \<parallel>\<^bsub>?M\<^esub> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_var 3))),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 3)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("utp_concurrency.par_by_merge_assoc",
     "[| ?M is (;;) swap\<^sub>m; AssocMerge ?M |]
      ==> ?P \<parallel>\<^bsub>?M\<^esub> ?Q \<parallel>\<^bsub>?M\<^esub> ?R =
          ?P \<parallel>\<^bsub>?M\<^esub> (?Q \<parallel>\<^bsub>?M\<^esub> ?R)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3), t_empty)
            ),
        template_predicate
         (template_app (template_hole 2, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 3),
                 template_var 1)),
             template_var 3),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 3),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 3),
             template_var 0))))),
    ("utp_concurrency.par_by_merge_USUP_mem_right",
     "?P \<parallel>\<^bsub>?M\<^esub> (\<Sqinter> i \<in> ?I \<bullet> ?Q
                                   i) =
      (\<Sqinter> i \<in> ?I \<bullet> ?P \<parallel>\<^bsub>?M\<^esub> ?Q
                                   i)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 9, template_var 3), template_var 2),
         template_app (template_app (template_hole 8, t_empty), t_empty)),
       template_app (template_app (template_hole 3, t_empty), t_empty))),
    ("utp_concurrency.par_by_merge_USUP_mem_left",
     "(\<Sqinter> i \<in> ?I \<bullet> ?P
  i) \<parallel>\<^bsub>?M\<^esub> ?Q =
      (\<Sqinter> i \<in> ?I \<bullet> ?P
  i \<parallel>\<^bsub>?M\<^esub> ?Q)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, t_empty), t_empty)),
           template_var 1),
         template_var 0),
       template_app (template_app (template_hole 3, t_empty), t_empty))),
    ("utp_concurrency.StateParallel_frame",
     "[| vwb_lens ?a; vwb_lens ?b; ?a \<bowtie> ?b |]
      ==> {&?a, &?b}:[?P |?a|?b|\<^sub>\<sigma> ?Q] =
          ?P |?a|?b|\<^sub>\<sigma> ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 3)),
        template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 3)),
               template_app (template_hole 2, template_var 2))),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_var 0)))),
    ("utp_concurrency.par_sep_swap",
     "(?P ;; U0 \<and>
       ?Q ;; U1 \<and> $\<Sigma>\<^sub><\<acute> =\<^sub>u $\<^bold>v) ;;
      swap\<^sub>m =
      (?Q ;; U0 \<and>
       ?P ;; U1 \<and> $\<Sigma>\<^sub><\<acute> =\<^sub>u $\<^bold>v)",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 9, template_var 1),
                 template_hole 8)),
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app (template_hole 9, template_var 0),
                   template_hole 7)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_hole 2)))),
                 template_app
                  (template_hole 5,
                   template_app (template_hole 1, template_hole 2)))))),
         template_hole 0),
       template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_var 0),
             template_hole 8)),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_var 1),
               template_hole 7)),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2)))),
             template_app
              (template_hole 5,
               template_app (template_hole 1, template_hole 2))))))),
    ("utp_concurrency.zero_one_pbm_subst",
     "?\<sigma>($?x \<mapsto>\<^sub>s 0) \<dagger>
      ?P \<parallel>\<^bsub>?M\<^esub> ?Q =
      ?\<sigma> \<dagger>
      ?P\<lbrakk>0/$?x\<rbrakk> \<parallel>\<^bsub>?M\<lbrakk>0/$?x\<^sub><\<rbrakk>\<^esub> ?Q\<lbrakk>0/$?x\<rbrakk>",
     template_equation
      (template_app
        (template_app
          (template_hole 20,
           template_app
            (template_app
              (template_app (template_hole 19, template_var 4),
               template_app (template_hole 18, template_var 3)),
             template_hole 17)),
         template_app
          (template_app
            (template_app (template_hole 16, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 20, template_var 4),
         template_app
          (template_app
            (template_app
              (template_hole 16,
               template_app
                (template_app
                  (template_hole 15,
                   template_app
                    (template_app
                      (template_app (template_hole 14, template_hole 13),
                       template_app (template_hole 12, template_var 3)),
                     template_hole 11)),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_app (template_hole 9, template_hole 8),
                     template_app
                      (template_hole 7,
                       template_app (template_hole 6, template_var 3))),
                   template_hole 5)),
               template_var 1)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_app (template_hole 1, template_var 3)),
                 template_hole 0)),
             template_var 0))))),
    ("utp_concurrency.bool_pbm_subst",
     "?\<sigma>($?x \<mapsto>\<^sub>s false) \<dagger>
      ?P \<parallel>\<^bsub>?M\<^esub> ?Q =
      ?\<sigma> \<dagger>
      ?P\<lbrakk>false/$?x\<rbrakk> \<parallel>\<^bsub>?M\<lbrakk>false/$?x\<^sub><\<rbrakk>\<^esub> ?Q\<lbrakk>false/$?x\<rbrakk>",
     template_equation
      (template_app
        (template_app
          (template_hole 20,
           template_app
            (template_app
              (template_app (template_hole 19, template_var 4),
               template_app (template_hole 18, template_var 3)),
             template_hole 17)),
         template_app
          (template_app
            (template_app (template_hole 16, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 20, template_var 4),
         template_app
          (template_app
            (template_app
              (template_hole 16,
               template_app
                (template_app
                  (template_hole 15,
                   template_app
                    (template_app
                      (template_app (template_hole 14, template_hole 13),
                       template_app (template_hole 12, template_var 3)),
                     template_hole 11)),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_app (template_hole 9, template_hole 8),
                     template_app
                      (template_hole 7,
                       template_app (template_hole 6, template_var 3))),
                   template_hole 5)),
               template_var 1)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_app (template_hole 1, template_var 3)),
                 template_hole 0)),
             template_var 0))))),
    ("utp_concurrency.bool_pbm_subst",
     "?\<sigma>($?x \<mapsto>\<^sub>s true) \<dagger>
      ?P \<parallel>\<^bsub>?M\<^esub> ?Q =
      ?\<sigma> \<dagger>
      ?P\<lbrakk>true/$?x\<rbrakk> \<parallel>\<^bsub>?M\<lbrakk>true/$?x\<^sub><\<rbrakk>\<^esub> ?Q\<lbrakk>true/$?x\<rbrakk>",
     template_equation
      (template_app
        (template_app
          (template_hole 20,
           template_app
            (template_app
              (template_app (template_hole 19, template_var 4),
               template_app (template_hole 18, template_var 3)),
             template_hole 17)),
         template_app
          (template_app
            (template_app (template_hole 16, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 20, template_var 4),
         template_app
          (template_app
            (template_app
              (template_hole 16,
               template_app
                (template_app
                  (template_hole 15,
                   template_app
                    (template_app
                      (template_app (template_hole 14, template_hole 13),
                       template_app (template_hole 12, template_var 3)),
                     template_hole 11)),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_app (template_hole 9, template_hole 8),
                     template_app
                      (template_hole 7,
                       template_app (template_hole 6, template_var 3))),
                   template_hole 5)),
               template_var 1)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_app (template_hole 1, template_var 3)),
                 template_hole 0)),
             template_var 0))))),
    ("utp_concurrency.zero_one_pbm_subst",
     "?\<sigma>($?x \<mapsto>\<^sub>s 1) \<dagger>
      ?P \<parallel>\<^bsub>?M\<^esub> ?Q =
      ?\<sigma> \<dagger>
      ?P\<lbrakk>1/$?x\<rbrakk> \<parallel>\<^bsub>?M\<lbrakk>1/$?x\<^sub><\<rbrakk>\<^esub> ?Q\<lbrakk>1/$?x\<rbrakk>",
     template_equation
      (template_app
        (template_app
          (template_hole 20,
           template_app
            (template_app
              (template_app (template_hole 19, template_var 4),
               template_app (template_hole 18, template_var 3)),
             template_hole 17)),
         template_app
          (template_app
            (template_app (template_hole 16, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 20, template_var 4),
         template_app
          (template_app
            (template_app
              (template_hole 16,
               template_app
                (template_app
                  (template_hole 15,
                   template_app
                    (template_app
                      (template_app (template_hole 14, template_hole 13),
                       template_app (template_hole 12, template_var 3)),
                     template_hole 11)),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_app (template_hole 9, template_hole 8),
                     template_app
                      (template_hole 7,
                       template_app (template_hole 6, template_var 3))),
                   template_hole 5)),
               template_var 1)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_app (template_hole 1, template_var 3)),
                 template_hole 0)),
             template_var 0))))),
    ("utp_concurrency.StateParallel_hoare",
     "[| \<lbrace>?c\<rbrace> ?P \<lbrace>?d\<^sub>1\<rbrace>\<^sub>u;
         \<lbrace>?c\<rbrace> ?Q \<lbrace>?d\<^sub>2\<rbrace>\<^sub>u;
         ?a \<bowtie> ?b; ?a \<natural> ?d\<^sub>1;
         ?b \<natural> ?d\<^sub>2 |]
      ==> \<lbrace>?c\<rbrace> ?P |?a|?b|\<^sub>\<sigma> ?Q
          \<lbrace>?d\<^sub>1 \<and> ?d\<^sub>2\<rbrace>\<^sub>u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 6),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, template_var 6),
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 5),
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0)),
                 template_var 3)),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 2))
           ))),
    ("utp_concurrency.lit_pbm_subst",
     "?\<sigma>($?x \<mapsto>\<^sub>s
      \<guillemotleft>?v\<guillemotright>) \<dagger>
      ?P \<parallel>\<^bsub>?M\<^esub> ?Q =
      ?\<sigma> \<dagger>
      ?P\<lbrakk>\<guillemotleft>?v\<guillemotright>/$?x\<rbrakk> \<parallel>\<^bsub>?M\<lbrakk>\<guillemotleft>?v\<guillemotright>/$?x\<^sub><\<rbrakk>\<^esub> ?Q\<lbrakk>\<guillemotleft>?v\<guillemotright>/$?x\<rbrakk>",
     template_equation
      (template_app
        (template_app
          (template_hole 20,
           template_app
            (template_app
              (template_app (template_hole 19, template_var 5),
               template_app (template_hole 18, template_var 4)),
             template_app (template_hole 17, template_var 3))),
         template_app
          (template_app
            (template_app (template_hole 16, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 20, template_var 5),
         template_app
          (template_app
            (template_app
              (template_hole 16,
               template_app
                (template_app
                  (template_hole 15,
                   template_app
                    (template_app
                      (template_app (template_hole 14, template_hole 13),
                       template_app (template_hole 12, template_var 4)),
                     template_app (template_hole 11, template_var 3))),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_app (template_hole 9, template_hole 8),
                     template_app
                      (template_hole 7,
                       template_app (template_hole 6, template_var 4))),
                   template_app (template_hole 5, template_var 3))),
               template_var 1)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_app (template_hole 1, template_var 4)),
                 template_app (template_hole 0, template_var 3))),
             template_var 0))))),
    ("utp_concurrency.numeral_pbm_subst",
     "?\<sigma>($?x \<mapsto>\<^sub>s numeral ?n) \<dagger>
      ?P \<parallel>\<^bsub>?M\<^esub> ?Q =
      ?\<sigma> \<dagger>
      ?P\<lbrakk>numeral
                  ?n/$?x\<rbrakk> \<parallel>\<^bsub>?M\<lbrakk>numeral
                           ?n/$?x\<^sub><\<rbrakk>\<^esub> ?Q\<lbrakk>numeral
                                 ?n/$?x\<rbrakk>",
     template_equation
      (template_app
        (template_app
          (template_hole 20,
           template_app
            (template_app
              (template_app (template_hole 19, template_var 5),
               template_app (template_hole 18, template_var 4)),
             template_app (template_hole 17, template_var 3))),
         template_app
          (template_app
            (template_app (template_hole 16, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 20, template_var 5),
         template_app
          (template_app
            (template_app
              (template_hole 16,
               template_app
                (template_app
                  (template_hole 15,
                   template_app
                    (template_app
                      (template_app (template_hole 14, template_hole 13),
                       template_app (template_hole 12, template_var 4)),
                     template_app (template_hole 11, template_var 3))),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_app (template_hole 9, template_hole 8),
                     template_app
                      (template_hole 7,
                       template_app (template_hole 6, template_var 4))),
                   template_app (template_hole 5, template_var 3))),
               template_var 1)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_app (template_hole 1, template_var 4)),
                 template_app (template_hole 0, template_var 3))),
             template_var 0))))),
    ("utp_concurrency.StateParallel_form'",
     "[| vwb_lens ?a; vwb_lens ?b; ?a \<bowtie> ?b |]
      ==> ?P |?a|?b|\<^sub>\<sigma> ?Q = {&?a,
          &?b}:[?P \<restriction>\<^sub>v
                ($\<^bold>v +\<^sub>L $?a\<acute>) \<and>
                ?Q \<restriction>\<^sub>v
                ($\<^bold>v +\<^sub>L $?b\<acute>)]",
     template_implication
      ([template_predicate
         (template_app (template_hole 18, template_var 3)),
        template_predicate
         (template_app (template_hole 17, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 14, template_var 1),
             template_app
              (template_app (template_hole 13, template_var 3),
               template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app
                (template_hole 11,
                 template_app (template_hole 10, template_var 3)),
               template_app (template_hole 9, template_var 2))),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 1),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_hole 4)),
                   template_app (template_hole 3, template_var 3)))),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 5, template_hole 4)),
                 template_app (template_hole 0, template_var 2)))))))),
    ("utp_concurrency.StateParallel_form",
     "?P |?a|?b|\<^sub>\<sigma> ?Q =
      (\<^bold>\<exists> (st\<^sub>0,
       st\<^sub>1) \<bullet> ?P\<lbrakk>\<guillemotleft>st\<^sub>0\<guillemotright>/$\<^bold>v\<acute>\<rbrakk> \<and>
                             ?Q\<lbrakk>\<guillemotleft>st\<^sub>1\<guillemotright>/$\<^bold>v\<acute>\<rbrakk> \<and>
                             $\<^bold>v\<acute> =\<^sub>u
                             bop (\<triangleleft>\<^bsub>&?b\<^esub>)
                              (bop (\<triangleleft>\<^bsub>&?a\<^esub>)
                                $\<^bold>v
                                \<guillemotleft>st\<^sub>0\<guillemotright>)
                              \<guillemotleft>st\<^sub>1\<guillemotright>)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 18, template_var 3),
           template_app
            (template_app (template_hole 17, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_hole 16, template_app (template_hole 15, t_empty)))),
    ("utp_concurrency.StateParallel_frame_hoare",
     "[| vwb_lens ?a; vwb_lens ?b; ?a \<bowtie> ?b;
         ?a \<natural> ?d\<^sub>1; ?b \<natural> ?d\<^sub>2;
         ?a \<sharp> ?c\<^sub>1; ?b \<sharp> ?c\<^sub>1;
         \<lbrace>?c\<^sub>1 \<and> ?c\<^sub>2\<rbrace> ?P
         \<lbrace>?d\<^sub>1\<rbrace>\<^sub>u;
         \<lbrace>?c\<^sub>1 \<and> ?c\<^sub>2\<rbrace> ?Q
         \<lbrace>?d\<^sub>2\<rbrace>\<^sub>u |]
      ==> \<lbrace>?c\<^sub>1 \<and> ?c\<^sub>2\<rbrace>
          ?P |?a|?b|\<^sub>\<sigma> ?Q
          \<lbrace>?c\<^sub>1 \<and>
                   ?d\<^sub>1 \<and> ?d\<^sub>2\<rbrace>\<^sub>u",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 7)),
        template_predicate (template_app (template_hole 9, template_var 6)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 7),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 7),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 6),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 7),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 6),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2)),
                template_var 1),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2)),
                template_var 0),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 2)),
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 1),
                   template_app
                    (template_app (template_hole 0, template_var 7),
                     template_var 6)),
                 template_var 0)),
             template_app
              (template_app (template_hole 2, template_var 3),
               template_app
                (template_app (template_hole 2, template_var 5),
                 template_var 4)))
           )))]:
   (string * thm * template) list
### theory "Draft.utp_concurrencyTemplates"
### 0.811s elapsed time, 1.061s cpu time, 0.156s GC time
val it = (): unit
