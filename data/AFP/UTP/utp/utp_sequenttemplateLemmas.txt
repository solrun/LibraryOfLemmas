   [("utp_sequent.sAx", "?P \<tturnstile> ?P",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("utp_sequent.sTrue", "?P \<tturnstile> true",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("utp_sequent.sNotI",
     "?\<Gamma> \<and> ?P \<tturnstile> false ==>
      ?\<Gamma> \<tturnstile> \<not> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("utp_sequent.sImplI",
     "?\<Gamma> \<and> ?P \<tturnstile> ?Q ==>
      ?\<Gamma> \<tturnstile> ?P \<Rightarrow> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("utp_sequent.sConjI",
     "[| ?\<Gamma> \<tturnstile> ?P; ?\<Gamma> \<tturnstile> ?Q |]
      ==> ?\<Gamma> \<tturnstile> ?P \<and> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           )))]
