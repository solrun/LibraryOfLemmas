Loading theory "Draft.utp_parser_utils" (required by "Draft.utp_alphabetTemplates" via "Draft.utp_alphabet" via "Draft.utp_pred" via "Draft.utp_expr_funcs" via "Draft.utp_expr_insts" via "Draft.utp_expr" via "Draft.utp_var")
Loading theory "Draft.Templates" (required by "Draft.utp_alphabetTemplates" via "Draft.ExtrEqs")
signature UTP_PARSER_UTILS =
  sig
    val mk_char: string -> Ast.ast
    val mk_nib: int -> Ast.ast
    val mk_string: string list -> Ast.ast
    val string_ast_tr: Ast.ast list -> Ast.ast
  end
signature NAME_UTILS =
  sig
    val deep_unmark_const: term -> term
    val last_char_str: string -> string
    val mk_id: string -> term
    val repeat_char: char -> int -> string
    val right_crop_by: int -> string -> string
  end
structure Utp_Parser_Utils: UTP_PARSER_UTILS
structure Name_Utils: NAME_UTILS
### theory "Draft.utp_parser_utils"
### 0.047s elapsed time, 0.130s cpu time, 0.000s GC time
Loading theory "Draft.utp_var" (required by "Draft.utp_alphabetTemplates" via "Draft.utp_alphabet" via "Draft.utp_pred" via "Draft.utp_expr_funcs" via "Draft.utp_expr_insts" via "Draft.utp_expr")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.073s elapsed time, 0.187s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.utp_alphabetTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.541s elapsed time, 1.099s cpu time, 0.107s GC time
### theory "Draft.utp_var"
### 0.634s elapsed time, 1.219s cpu time, 0.107s GC time
Loading theory "Draft.utp_expr" (required by "Draft.utp_alphabetTemplates" via "Draft.utp_alphabet" via "Draft.utp_pred" via "Draft.utp_expr_funcs" via "Draft.utp_expr_insts")
instantiation
  uexpr :: (zero, type) zero
  zero_uexpr == zero_class.zero :: ('a, 'b) uexpr
instantiation
  uexpr :: (one, type) one
  one_uexpr == one_class.one :: ('a, 'b) uexpr
instantiation
  uexpr :: (plus, type) plus
  plus_uexpr == plus :: ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (ord, type) ord
  less_eq_uexpr == less_eq :: ('a, 'b) uexpr => ('a, 'b) uexpr => bool
  less_uexpr == less :: ('a, 'b) uexpr => ('a, 'b) uexpr => bool
### theory "Draft.utp_expr"
### 0.744s elapsed time, 0.783s cpu time, 0.066s GC time
Loading theory "Draft.utp_expr_insts" (required by "Draft.utp_alphabetTemplates" via "Draft.utp_alphabet" via "Draft.utp_pred" via "Draft.utp_expr_funcs")
instantiation
  uexpr :: (uminus, type) uminus
  uminus_uexpr == uminus :: ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (minus, type) minus
  minus_uexpr == minus :: ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (times, type) times
  times_uexpr == times :: ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (divide, type) divide
  divide_uexpr == divide ::
    ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (inverse, type) inverse
  inverse_uexpr == inverse :: ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (modulo, type) modulo
  modulo_uexpr == modulo ::
    ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (sgn, type) sgn
  sgn_uexpr == sgn :: ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (abs, type) abs
  abs_uexpr == abs :: ('a, 'b) uexpr => ('a, 'b) uexpr
### theory "Draft.utp_expr_insts"
### 0.222s elapsed time, 0.222s cpu time, 0.000s GC time
Loading theory "Draft.utp_expr_funcs" (required by "Draft.utp_alphabetTemplates" via "Draft.utp_alphabet" via "Draft.utp_pred")
Loading theory "Draft.utp_unrest" (required by "Draft.utp_alphabetTemplates" via "Draft.utp_alphabet" via "Draft.utp_pred" via "Draft.utp_subst")
### theory "Draft.utp_expr_funcs"
### 0.147s elapsed time, 0.300s cpu time, 0.057s GC time
### theory "Draft.utp_unrest"
### 0.227s elapsed time, 0.381s cpu time, 0.057s GC time
Loading theory "Draft.utp_usedby" (required by "Draft.utp_alphabetTemplates" via "Draft.utp_alphabet" via "Draft.utp_pred" via "Draft.utp_meta_subst" via "Draft.utp_tactics")
Loading theory "Draft.utp_subst" (required by "Draft.utp_alphabetTemplates" via "Draft.utp_alphabet" via "Draft.utp_pred")
### theory "Draft.utp_usedby"
### 0.083s elapsed time, 0.165s cpu time, 0.000s GC time
Loading theory "Draft.utp_tactics" (required by "Draft.utp_alphabetTemplates" via "Draft.utp_alphabet" via "Draft.utp_pred" via "Draft.utp_meta_subst")
signature UEXPR_REP_EQ =
  sig
    val get_uexpr_rep_eq_thms: theory -> thm list
    val read_uexpr_rep_eq_thms: theory -> theory
  end
structure uexpr_rep_eq: UEXPR_REP_EQ
val it = (): unit
### theory "Draft.utp_subst"
### 0.425s elapsed time, 0.858s cpu time, 0.056s GC time
structure List_Extra: sig val contains: ''a -> ''a list -> bool end
signature BASIC_TACTICS =
  sig
    val fast_transfer: Proof.context -> thm list -> context_tactic
    val interp_tac: Proof.context -> thm list -> context_tactic
    val slow_transfer: Proof.context -> thm list -> context_tactic
    val utp_auto_tac: Proof.context -> thm list -> context_tactic
    val utp_blast_tac: Proof.context -> thm list -> context_tactic
    val utp_simp_tac: Proof.context -> thm list -> context_tactic
  end
structure Basic_Tactics: BASIC_TACTICS
signature UTP_TACTICS =
  sig
    val inst_gen_pred_tac:
       utp_tac_args ->
         (Proof.context -> thm list -> context_tactic) ->
           Proof.context -> thm list -> context_tactic
    val inst_gen_rel_tac:
       utp_tac_args ->
         (Proof.context -> thm list -> context_tactic) ->
           Proof.context -> thm list -> context_tactic
    val no_interpN: string
    val robustN: string
    val scan_args: utp_tac_args parser
    type utp_tac_args
  end
structure UTP_Tactics: UTP_TACTICS
### theory "Draft.utp_tactics"
### 1.489s elapsed time, 1.904s cpu time, 0.093s GC time
Loading theory "Draft.utp_meta_subst" (required by "Draft.utp_alphabetTemplates" via "Draft.utp_alphabet" via "Draft.utp_pred")
### theory "Draft.utp_meta_subst"
### 0.395s elapsed time, 0.457s cpu time, 0.031s GC time
Loading theory "Draft.utp_pred" (required by "Draft.utp_alphabetTemplates" via "Draft.utp_alphabet")
instantiation
  uexpr :: (lattice, type) lattice
  inf_uexpr == inf :: ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
  sup_uexpr == sup :: ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (bounded_lattice, type) bounded_lattice
  bot_uexpr == bot :: ('a, 'b) uexpr
  top_uexpr == top_class.top :: ('a, 'b) uexpr
instantiation
  uexpr :: (complete_lattice, type) complete_lattice
  Inf_uexpr == Inf :: ('a, 'b) uexpr set => ('a, 'b) uexpr
  Sup_uexpr == Sup :: ('a, 'b) uexpr set => ('a, 'b) uexpr
### Ignoring duplicate rewrite rule:
### ?X1 \<subseteq>\<^sub>L ?X1 == True
### Ignoring duplicate rewrite rule:
### wb_lens ?Y1 ==> ?X1 \<subseteq>\<^sub>L ?X1 +\<^sub>L ?Y1 == True
### theory "Draft.utp_pred"
### 1.485s elapsed time, 1.855s cpu time, 0.488s GC time
Loading theory "Draft.utp_alphabet" (required by "Draft.utp_alphabetTemplates")
### theory "Draft.utp_alphabet"
### 0.506s elapsed time, 0.640s cpu time, 0.056s GC time
Loading theory "Draft.utp_alphabetTemplates"
val templateLemmas =
   [("utp_alphabet.aext_id", "?P \<oplus>\<^sub>p \<Sigma> = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("utp_alphabet.arestr_id", "?P \<restriction>\<^sub>e \<Sigma> = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("utp_alphabet.aext_one", "1 \<oplus>\<^sub>p ?a = 1",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("utp_alphabet.arestr_one", "1 \<restriction>\<^sub>e ?a = 1",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("utp_alphabet.aext_zero", "0 \<oplus>\<^sub>p ?a = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("utp_alphabet.arestr_zero", "0 \<restriction>\<^sub>e ?a = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("utp_alphabet.aext_false", "false \<oplus>\<^sub>p ?a = false",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("utp_alphabet.aext_true", "true \<oplus>\<^sub>p ?a = true",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("utp_alphabet.arestr_false", "false \<restriction>\<^sub>e ?a = false",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("utp_alphabet.arestr_true", "true \<restriction>\<^sub>e ?a = true",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("utp_alphabet.upred_arestr_false",
     "false \<restriction>\<^sub>p ?a = false",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("utp_alphabet.upred_arestr_true",
     "true \<restriction>\<^sub>p ?a = true",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("utp_alphabet.alpha_in_var", "?x ;\<^sub>L fst\<^sub>L = $?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("utp_alphabet.alpha_out_var", "?x ;\<^sub>L snd\<^sub>L = $?x\<acute>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("utp_alphabet.aext_lit",
     "\<guillemotleft>?v\<guillemotright> \<oplus>\<^sub>p ?a =
      \<guillemotleft>?v\<guillemotright>",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("utp_alphabet.arestr_lit",
     "\<guillemotleft>?v\<guillemotright> \<restriction>\<^sub>e ?a =
      \<guillemotleft>?v\<guillemotright>",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("utp_alphabet.aext_numeral",
     "numeral ?n \<oplus>\<^sub>p ?a = numeral ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("utp_alphabet.arestr_numeral",
     "numeral ?n \<restriction>\<^sub>e ?a = numeral ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("utp_alphabet.upred_arestr_lit",
     "\<guillemotleft>?v\<guillemotright> \<restriction>\<^sub>p ?a =
      \<guillemotleft>?v\<guillemotright>",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("utp_alphabet.aext_var", "?x \<oplus>\<^sub>p ?a = ?x ;\<^sub>L ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("utp_alphabet.arestr_var",
     "?x \<restriction>\<^sub>e ?a = ?x /\<^sub>L ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("utp_alphabet.aext_uminus",
     "(- ?x) \<oplus>\<^sub>p ?a = - ?x \<oplus>\<^sub>p ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("utp_alphabet.aext_not",
     "(\<not> ?P) \<oplus>\<^sub>p ?x = (\<not> ?P \<oplus>\<^sub>p ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("utp_alphabet.arestr_not",
     "(\<not> ?P) \<restriction>\<^sub>e ?a =
      (\<not> ?P \<restriction>\<^sub>e ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("utp_alphabet.id_subst_res",
     "mwb_lens ?x ==> id \<restriction>\<^sub>s ?x = id",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 0),
         template_hole 0))),
    ("utp_alphabet.id_subst_ext",
     "wb_lens ?x ==> id \<oplus>\<^sub>s ?x = id",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 0),
         template_hole 0))),
    ("utp_alphabet.unrest_aext_indep",
     "?a \<bowtie> ?b ==> ?b \<sharp> ?p \<oplus>\<^sub>p ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("utp_alphabet.unrest_subst_alpha_ext",
     "?x \<bowtie> ?y ==> ?x \<sharp> ?P \<oplus>\<^sub>s ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("utp_alphabet.aext_twice",
     "(?P \<oplus>\<^sub>p ?a) \<oplus>\<^sub>p ?b =
      ?P \<oplus>\<^sub>p (?a ;\<^sub>L ?b)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("utp_alphabet.aext_uop",
     "uop ?f ?u \<oplus>\<^sub>p ?a = uop ?f (?u \<oplus>\<^sub>p ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("utp_alphabet.arestr_aext",
     "mwb_lens ?a ==>
      ?P \<oplus>\<^sub>p ?a \<restriction>\<^sub>e ?a = ?P",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 1),
         template_var 0))),
    ("utp_alphabet.subst_ext_res",
     "mwb_lens ?x ==>
      (?\<sigma> \<oplus>\<^sub>s ?x) \<restriction>\<^sub>s ?x =
      ?\<sigma>",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 1),
         template_var 0))),
    ("utp_alphabet.upred_aext_ares",
     "vwb_lens ?a ==>
      ?P \<oplus>\<^sub>p ?a \<restriction>\<^sub>p ?a = ?P",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 1),
         template_var 0))),
    ("utp_alphabet.aext_mono",
     "?P \<sqsubseteq> ?Q ==>
      ?P \<oplus>\<^sub>p ?a \<sqsubseteq> ?Q \<oplus>\<^sub>p ?a",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("utp_alphabet.aext_arestr'",
     "?a \<natural> ?P ==>
      (?P \<restriction>\<^sub>e ?a) \<oplus>\<^sub>p ?a = ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 1),
         template_var 0))),
    ("utp_alphabet.upred_ares_aext",
     "?a \<natural> ?P ==>
      (?P \<restriction>\<^sub>p ?a) \<oplus>\<^sub>p ?a = ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 1),
         template_var 0))),
    ("utp_alphabet.aext_plus",
     "(?x + ?y) \<oplus>\<^sub>p ?a =
      ?x \<oplus>\<^sub>p ?a + ?y \<oplus>\<^sub>p ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("utp_alphabet.aext_minus",
     "(?x - ?y) \<oplus>\<^sub>p ?a =
      ?x \<oplus>\<^sub>p ?a - ?y \<oplus>\<^sub>p ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("utp_alphabet.aext_times",
     "(?x * ?y) \<oplus>\<^sub>p ?a =
      ?x \<oplus>\<^sub>p ?a * ?y \<oplus>\<^sub>p ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("utp_alphabet.aext_divide",
     "(?x / ?y) \<oplus>\<^sub>p ?a =
      ?x \<oplus>\<^sub>p ?a / ?y \<oplus>\<^sub>p ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("utp_alphabet.aext_ulambda",
     "ulambda ?P \<oplus>\<^sub>p ?a =
      (\<lambda> x \<bullet> ?P x \<oplus>\<^sub>p ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, t_empty)),
         template_var 0),
       template_app (template_hole 1, t_empty))),
    ("utp_alphabet.aext_upred_eq",
     "(?e =\<^sub>u ?f) \<oplus>\<^sub>p ?a =
      (?e \<oplus>\<^sub>p ?a =\<^sub>u ?f \<oplus>\<^sub>p ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("utp_alphabet.aext_and",
     "(?P \<and> ?Q) \<oplus>\<^sub>p ?x =
      (?P \<oplus>\<^sub>p ?x \<and> ?Q \<oplus>\<^sub>p ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("utp_alphabet.aext_or",
     "(?P \<or> ?Q) \<oplus>\<^sub>p ?x =
      (?P \<oplus>\<^sub>p ?x \<or> ?Q \<oplus>\<^sub>p ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("utp_alphabet.aext_iff",
     "(?P \<Leftrightarrow> ?Q) \<oplus>\<^sub>p ?x =
      (?P \<oplus>\<^sub>p ?x \<Leftrightarrow> ?Q \<oplus>\<^sub>p ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("utp_alphabet.aext_imp",
     "(?P \<Rightarrow> ?Q) \<oplus>\<^sub>p ?x =
      (?P \<oplus>\<^sub>p ?x \<Rightarrow> ?Q \<oplus>\<^sub>p ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("utp_alphabet.arestr_and",
     "(?P \<and> ?Q) \<restriction>\<^sub>e ?x =
      (?P \<restriction>\<^sub>e ?x \<and> ?Q \<restriction>\<^sub>e ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("utp_alphabet.arestr_or",
     "(?P \<or> ?Q) \<restriction>\<^sub>e ?x =
      (?P \<restriction>\<^sub>e ?x \<or> ?Q \<restriction>\<^sub>e ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("utp_alphabet.arestr_imp",
     "(?P \<Rightarrow> ?Q) \<restriction>\<^sub>e ?x =
      (?P \<restriction>\<^sub>e ?x \<Rightarrow>
       ?Q \<restriction>\<^sub>e ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("utp_alphabet.upred_arestr_or",
     "(?P \<or> ?Q) \<restriction>\<^sub>p ?x =
      (?P \<restriction>\<^sub>p ?x \<or> ?Q \<restriction>\<^sub>p ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("utp_alphabet.aext_shAll",
     "ushAll ?P \<oplus>\<^sub>p ?a =
      (\<^bold>\<forall> x \<bullet> ?P x \<oplus>\<^sub>p ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, t_empty)),
         template_var 0),
       template_app (template_hole 0, t_empty))),
    ("utp_alphabet.aext_bop",
     "bop ?f ?u ?v \<oplus>\<^sub>p ?a =
      bop ?f (?u \<oplus>\<^sub>p ?a) (?v \<oplus>\<^sub>p ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("utp_alphabet.out_var_prod_lens",
     "wb_lens ?X ==> $?x\<acute> ;\<^sub>L ?X \<times> ?Y = $?Y:?x\<acute>",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("utp_alphabet.in_var_prod_lens",
     "wb_lens ?Y ==> $?x ;\<^sub>L ?X \<times> ?Y = $?X:?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 2)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("utp_alphabet.aext_cont",
     "vwb_lens ?a ==>
      \<Sqinter>?A \<oplus>\<^sub>p ?a =
      (\<Sqinter>P\<in>?A. P \<oplus>\<^sub>p ?a)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_var 1),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))))),
    ("utp_alphabet.unrest_aext",
     "[| mwb_lens ?a; ?x \<sharp> ?p |]
      ==> ?x ;\<^sub>L ?a \<sharp> ?p \<oplus>\<^sub>p ?a",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("utp_alphabet.aext_UINF_ind",
     "(\<Sqinter> x \<bullet> ?P x) \<oplus>\<^sub>p ?a =
      (\<Sqinter> x \<bullet> ?P x \<oplus>\<^sub>p ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app (template_app (template_hole 3, t_empty), t_empty)),
         template_var 0),
       template_app (template_app (template_hole 1, t_empty), t_empty))),
    ("utp_alphabet.subst_aext_comp",
     "vwb_lens ?a ==>
      ?\<sigma> \<oplus>\<^sub>s ?a o ?\<rho> \<oplus>\<^sub>s ?a =
      (?\<sigma> o ?\<rho>) \<oplus>\<^sub>s ?a",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2)))),
    ("utp_alphabet.apply_subst_ext",
     "vwb_lens ?x ==>
      (?\<sigma> \<dagger> ?e) \<oplus>\<^sub>p ?x =
      (?\<sigma> \<oplus>\<^sub>s ?x) \<dagger> ?e \<oplus>\<^sub>p ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_var 2))))),
    ("utp_alphabet.aext_trop",
     "trop ?f ?u ?v ?w \<oplus>\<^sub>p ?a =
      trop ?f (?u \<oplus>\<^sub>p ?a) (?v \<oplus>\<^sub>p ?a)
       (?w \<oplus>\<^sub>p ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("utp_alphabet.upd_subst_ext",
     "vwb_lens ?x ==>
      ?\<sigma>(?y \<mapsto>\<^sub>s ?v) \<oplus>\<^sub>s ?x =
      (?\<sigma> \<oplus>\<^sub>s ?x)(&?x:?y \<mapsto>\<^sub>s
      ?v \<oplus>\<^sub>p ?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1),
               template_var 0)),
           template_var 3),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 3)),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 3))),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 3))))),
    ("utp_alphabet.aext_qtop",
     "qtop ?f ?u ?v ?w ?x \<oplus>\<^sub>p ?a =
      qtop ?f (?u \<oplus>\<^sub>p ?a) (?v \<oplus>\<^sub>p ?a)
       (?w \<oplus>\<^sub>p ?a) (?x \<oplus>\<^sub>p ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 5, template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 4, template_var 5),
               template_app
                (template_app (template_hole 3, template_var 4),
                 template_var 0)),
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("utp_alphabet.upd_subst_res",
     "mwb_lens ?x ==>
      ?\<sigma>(&?x:?y \<mapsto>\<^sub>s ?v) \<restriction>\<^sub>s ?x =
      (?\<sigma> \<restriction>\<^sub>s ?x)(&?y \<mapsto>\<^sub>s
      ?v \<restriction>\<^sub>e ?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app (template_hole 5, template_var 2),
                 template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 3))),
               template_var 0)),
           template_var 3),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 6, template_var 2),
                 template_var 3)),
             template_app (template_hole 1, template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 3))))),
    ("utp_alphabet.aext_UINF_mem",
     "(\<Sqinter> x \<in> ?A \<bullet> ?P x) \<oplus>\<^sub>p ?a =
      (\<Sqinter> x \<in> ?A \<bullet> ?P x \<oplus>\<^sub>p ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app (template_app (template_hole 8, t_empty), t_empty)),
         template_var 0),
       template_app (template_app (template_hole 3, t_empty), t_empty))),
    ("utp_alphabet.aext_arestr",
     "[| mwb_lens ?a; bij_lens (?a +\<^sub>L ?b); ?a \<bowtie> ?b;
         ?b \<sharp> ?P |]
      ==> (?P \<restriction>\<^sub>e ?a) \<oplus>\<^sub>p ?a = ?P",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2)),
           template_var 2),
         template_var 0)))]:
   (string * thm * template) list
### theory "Draft.utp_alphabetTemplates"
### 0.712s elapsed time, 0.890s cpu time, 0.119s GC time
val it = (): unit
