   [("utp_theory.utp_partial_order", "partial_order (utp_order ?T)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("utp_theory.utp_weak_partial_order",
     "weak_partial_order (utp_order ?T)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("utp_theory.utp_order_eq", "(.=\<^bsub>utp_order ?T\<^esub>) = (=)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate (template_hole 0))),
    ("utp_theory.upred_lattice_Idempotent",
     "Idem\<^bsub>\<P>\<^esub> ?H = Idempotent ?H",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("utp_theory.upred_lattice_inf", "Lattice.inf \<P> ?A = \<Or>?A",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("utp_theory.upred_lattice_Monotonic",
     "Mono\<^bsub>\<P>\<^esub> ?H = Monotonic ?H",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 1),
         template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("utp_theory.Monotonic_ex", "mwb_lens ?x ==> Monotonic (uex ?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("utp_theory.Idempotent_ex", "mwb_lens ?x ==> Idempotent (uex ?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("utp_theory.mk_conn_upper",
     "\<pi>\<^sup>*\<^bsub>?H1.0 \<Leftarrow>\<langle>?\<H>\<^sub>1,?\<H>\<^sub>2\<rangle>\<Rightarrow> ?H2.0\<^esub> =
      ?\<H>\<^sub>2",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_var 1)),
    ("utp_theory.mk_conn_lower",
     "\<pi>\<^sub>*\<^bsub>?H1.0 \<Leftarrow>\<langle>?\<H>\<^sub>1,?\<H>\<^sub>2\<rangle>\<Rightarrow> ?H2.0\<^esub> =
      ?\<H>\<^sub>1",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_var 2)),
    ("utp_theory.upred_lattice_le", "le \<P> ?P ?Q = (?P \<sqsubseteq> ?Q)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("utp_theory.utp_order_le", "le (utp_order ?T) = (\<sqsubseteq>)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       t_empty)),
    ("utp_theory.Healthy_fixed_points",
     "fps \<P> ?H = \<lbrakk>?H\<rbrakk>\<^sub>H",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2), template_var 0),
       template_app (template_hole 1, t_empty))),
    ("utp_theory.utp_order_carrier",
     "carrier (utp_order ?H) = \<lbrakk>?H\<rbrakk>\<^sub>H",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app (template_hole 1, t_empty))),
    ("utp_theory.utp_order_fpl", "utp_order ?H = fpl \<P> ?H",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app (template_hole 2, t_empty), template_hole 0))),
    ("utp_theory.mk_conn_orderA",
     "\<X>\<^bsub>?H1.0 \<Leftarrow>\<langle>?\<H>\<^sub>1,?\<H>\<^sub>2\<rangle>\<Rightarrow> ?H2.0\<^esub> =
      utp_order ?H1.0",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 0, template_var 3))),
    ("utp_theory.mk_conn_orderB",
     "\<Y>\<^bsub>?H1.0 \<Leftarrow>\<langle>?\<H>\<^sub>1,?\<H>\<^sub>2\<rangle>\<Rightarrow> ?H2.0\<^esub> =
      utp_order ?H2.0",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("utp_theory.isotone_utp_orderI",
     "Monotonic ?H ==> isotone (utp_order ?X) (utp_order ?Y) ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1)),
               template_app (template_hole 0, template_var 0)),
             template_var 2)
           ))),
    ("utp_theory.mono_Monotone_utp_order",
     "Monotonic ?f ==> Mono\<^bsub>utp_order ?T\<^esub> ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("utp_theory.ex_retract_id",
     "vwb_lens ?x ==>
      retract
       (uex ?x \<Leftarrow>\<langle>uex ?x,id\<rangle>\<Rightarrow> id)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 0)),
                   template_app (template_hole 1, template_var 0)),
                 template_hole 0),
               template_hole 0))
           ))),
    ("utp_theory.ex_closed_unrest",
     "vwb_lens ?x ==>
      \<lbrakk>uex ?x\<rbrakk>\<^sub>H = {P. ?x \<sharp> P}",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app (template_hole 3, t_empty),
         template_app (template_hole 3, t_empty)))),
    ("utp_theory.galois_comp",
     "?H\<^sub>2 \<Leftarrow>\<langle>?\<H>\<^sub>3,?\<H>\<^sub>4\<rangle>\<Rightarrow> ?H\<^sub>3 \<circ>\<^sub>g
      ?H\<^sub>1 \<Leftarrow>\<langle>?\<H>\<^sub>1,?\<H>\<^sub>2\<rangle>\<Rightarrow> ?H\<^sub>2 =
      ?H\<^sub>1 \<Leftarrow>\<langle>?\<H>\<^sub>1 o
?\<H>\<^sub>3,?\<H>\<^sub>4 o
              ?\<H>\<^sub>2\<rangle>\<Rightarrow> ?H\<^sub>3",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 6),
                 template_var 5),
               template_var 4),
             template_var 3)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1),
             template_var 0),
           template_var 6)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 5)),
           template_app
            (template_app (template_hole 0, template_var 4),
             template_var 0)),
         template_var 3))),
    ("utp_theory.ex_retract",
     "[| vwb_lens ?x; Idempotent ?H; uex ?x o ?H = ?H o uex ?x |]
      ==> retract
           ((uex ?x o
             ?H) \<Leftarrow>\<langle>uex ?x,?H\<rangle>\<Rightarrow> ?H)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 1)),
            template_var 0),
          template_app
           (template_app (template_hole 3, template_var 0),
            template_app (template_hole 2, template_var 1)))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app (template_hole 2, template_var 1)),
                       template_var 0)),
                   template_app (template_hole 2, template_var 1)),
                 template_var 0),
               template_var 0))
           ))),
    ("utp_theory.Mono_utp_orderI",
     "(!!P Q.
          [| P \<sqsubseteq> Q; P is ?H; Q is ?H |]
          ==> ?F P \<sqsubseteq> ?F Q) ==>
      Mono\<^bsub>utp_order ?H\<^esub> ?F",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1)),
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           )))]
