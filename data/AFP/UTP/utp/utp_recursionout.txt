Loading theory "Draft.utp_parser_utils" (required by "Draft.utp_recursionTemplates" via "Draft.utp_recursion" via "Draft.utp_pred_laws" via "Draft.utp_pred" via "Draft.utp_expr_funcs" via "Draft.utp_expr_insts" via "Draft.utp_expr" via "Draft.utp_var")
Loading theory "Draft.Templates" (required by "Draft.utp_recursionTemplates" via "Draft.ExtrEqs")
signature UTP_PARSER_UTILS =
  sig
    val mk_char: string -> Ast.ast
    val mk_nib: int -> Ast.ast
    val mk_string: string list -> Ast.ast
    val string_ast_tr: Ast.ast list -> Ast.ast
  end
signature NAME_UTILS =
  sig
    val deep_unmark_const: term -> term
    val last_char_str: string -> string
    val mk_id: string -> term
    val repeat_char: char -> int -> string
    val right_crop_by: int -> string -> string
  end
structure Utp_Parser_Utils: UTP_PARSER_UTILS
structure Name_Utils: NAME_UTILS
### theory "Draft.utp_parser_utils"
### 0.051s elapsed time, 0.130s cpu time, 0.000s GC time
Loading theory "Draft.utp_var" (required by "Draft.utp_recursionTemplates" via "Draft.utp_recursion" via "Draft.utp_pred_laws" via "Draft.utp_pred" via "Draft.utp_expr_funcs" via "Draft.utp_expr_insts" via "Draft.utp_expr")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.079s elapsed time, 0.187s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.utp_recursionTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.542s elapsed time, 1.093s cpu time, 0.100s GC time
### theory "Draft.utp_var"
### 0.629s elapsed time, 1.208s cpu time, 0.100s GC time
Loading theory "Draft.utp_expr" (required by "Draft.utp_recursionTemplates" via "Draft.utp_recursion" via "Draft.utp_pred_laws" via "Draft.utp_pred" via "Draft.utp_expr_funcs" via "Draft.utp_expr_insts")
instantiation
  uexpr :: (zero, type) zero
  zero_uexpr == zero_class.zero :: ('a, 'b) uexpr
instantiation
  uexpr :: (one, type) one
  one_uexpr == one_class.one :: ('a, 'b) uexpr
instantiation
  uexpr :: (plus, type) plus
  plus_uexpr == plus :: ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (ord, type) ord
  less_eq_uexpr == less_eq :: ('a, 'b) uexpr => ('a, 'b) uexpr => bool
  less_uexpr == less :: ('a, 'b) uexpr => ('a, 'b) uexpr => bool
### theory "Draft.utp_expr"
### 0.738s elapsed time, 0.768s cpu time, 0.054s GC time
Loading theory "Draft.utp_expr_insts" (required by "Draft.utp_recursionTemplates" via "Draft.utp_recursion" via "Draft.utp_pred_laws" via "Draft.utp_pred" via "Draft.utp_expr_funcs")
instantiation
  uexpr :: (uminus, type) uminus
  uminus_uexpr == uminus :: ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (minus, type) minus
  minus_uexpr == minus :: ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (times, type) times
  times_uexpr == times :: ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (divide, type) divide
  divide_uexpr == divide ::
    ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (inverse, type) inverse
  inverse_uexpr == inverse :: ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (modulo, type) modulo
  modulo_uexpr == modulo ::
    ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (sgn, type) sgn
  sgn_uexpr == sgn :: ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (abs, type) abs
  abs_uexpr == abs :: ('a, 'b) uexpr => ('a, 'b) uexpr
### theory "Draft.utp_expr_insts"
### 0.215s elapsed time, 0.215s cpu time, 0.000s GC time
Loading theory "Draft.utp_expr_funcs" (required by "Draft.utp_recursionTemplates" via "Draft.utp_recursion" via "Draft.utp_pred_laws" via "Draft.utp_pred")
Loading theory "Draft.utp_unrest" (required by "Draft.utp_recursionTemplates" via "Draft.utp_recursion" via "Draft.utp_pred_laws" via "Draft.utp_pred" via "Draft.utp_subst")
### theory "Draft.utp_expr_funcs"
### 0.143s elapsed time, 0.286s cpu time, 0.049s GC time
### theory "Draft.utp_unrest"
### 0.226s elapsed time, 0.373s cpu time, 0.049s GC time
Loading theory "Draft.utp_usedby" (required by "Draft.utp_recursionTemplates" via "Draft.utp_recursion" via "Draft.utp_pred_laws" via "Draft.utp_pred" via "Draft.utp_meta_subst" via "Draft.utp_tactics")
Loading theory "Draft.utp_subst" (required by "Draft.utp_recursionTemplates" via "Draft.utp_recursion" via "Draft.utp_pred_laws" via "Draft.utp_pred")
### theory "Draft.utp_usedby"
### 0.083s elapsed time, 0.164s cpu time, 0.000s GC time
Loading theory "Draft.utp_tactics" (required by "Draft.utp_recursionTemplates" via "Draft.utp_recursion" via "Draft.utp_pred_laws" via "Draft.utp_pred" via "Draft.utp_meta_subst")
signature UEXPR_REP_EQ =
  sig
    val get_uexpr_rep_eq_thms: theory -> thm list
    val read_uexpr_rep_eq_thms: theory -> theory
  end
structure uexpr_rep_eq: UEXPR_REP_EQ
val it = (): unit
### theory "Draft.utp_subst"
### 0.421s elapsed time, 0.847s cpu time, 0.048s GC time
structure List_Extra: sig val contains: ''a -> ''a list -> bool end
signature BASIC_TACTICS =
  sig
    val fast_transfer: Proof.context -> thm list -> context_tactic
    val interp_tac: Proof.context -> thm list -> context_tactic
    val slow_transfer: Proof.context -> thm list -> context_tactic
    val utp_auto_tac: Proof.context -> thm list -> context_tactic
    val utp_blast_tac: Proof.context -> thm list -> context_tactic
    val utp_simp_tac: Proof.context -> thm list -> context_tactic
  end
structure Basic_Tactics: BASIC_TACTICS
signature UTP_TACTICS =
  sig
    val inst_gen_pred_tac:
       utp_tac_args ->
         (Proof.context -> thm list -> context_tactic) ->
           Proof.context -> thm list -> context_tactic
    val inst_gen_rel_tac:
       utp_tac_args ->
         (Proof.context -> thm list -> context_tactic) ->
           Proof.context -> thm list -> context_tactic
    val no_interpN: string
    val robustN: string
    val scan_args: utp_tac_args parser
    type utp_tac_args
  end
structure UTP_Tactics: UTP_TACTICS
### theory "Draft.utp_tactics"
### 1.491s elapsed time, 1.897s cpu time, 0.085s GC time
Loading theory "Draft.utp_meta_subst" (required by "Draft.utp_recursionTemplates" via "Draft.utp_recursion" via "Draft.utp_pred_laws" via "Draft.utp_pred")
### theory "Draft.utp_meta_subst"
### 0.399s elapsed time, 0.460s cpu time, 0.030s GC time
Loading theory "Draft.utp_pred" (required by "Draft.utp_recursionTemplates" via "Draft.utp_recursion" via "Draft.utp_pred_laws")
instantiation
  uexpr :: (lattice, type) lattice
  inf_uexpr == inf :: ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
  sup_uexpr == sup :: ('a, 'b) uexpr => ('a, 'b) uexpr => ('a, 'b) uexpr
instantiation
  uexpr :: (bounded_lattice, type) bounded_lattice
  bot_uexpr == bot :: ('a, 'b) uexpr
  top_uexpr == top_class.top :: ('a, 'b) uexpr
instantiation
  uexpr :: (complete_lattice, type) complete_lattice
  Inf_uexpr == Inf :: ('a, 'b) uexpr set => ('a, 'b) uexpr
  Sup_uexpr == Sup :: ('a, 'b) uexpr set => ('a, 'b) uexpr
### Ignoring duplicate rewrite rule:
### ?X1 \<subseteq>\<^sub>L ?X1 == True
### Ignoring duplicate rewrite rule:
### wb_lens ?Y1 ==> ?X1 \<subseteq>\<^sub>L ?X1 +\<^sub>L ?Y1 == True
### theory "Draft.utp_pred"
### 1.476s elapsed time, 1.836s cpu time, 0.475s GC time
Loading theory "Draft.utp_alphabet" (required by "Draft.utp_recursionTemplates" via "Draft.utp_recursion" via "Draft.utp_rel" via "Draft.utp_lift")
Loading theory "Draft.utp_pred_laws" (required by "Draft.utp_recursionTemplates" via "Draft.utp_recursion")
### Partially applied constant "utp_pred.conj_upred" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<and>) (ran\<^sub>l (?x # ?xs)) ==
### fold (\<and>) ?xs ?x
### Partially applied constant "utp_pred.disj_upred" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<or>) (ran\<^sub>l (?x # ?xs)) ==
### fold (\<or>) ?xs ?x
### theory "Draft.utp_alphabet"
### 0.584s elapsed time, 1.266s cpu time, 0.115s GC time
Loading theory "Draft.utp_lift" (required by "Draft.utp_recursionTemplates" via "Draft.utp_recursion" via "Draft.utp_rel")
### theory "Draft.utp_lift"
### 0.069s elapsed time, 0.137s cpu time, 0.040s GC time
### theory "Draft.utp_pred_laws"
### 0.951s elapsed time, 1.697s cpu time, 0.155s GC time
Loading theory "Draft.utp_healthy" (required by "Draft.utp_recursionTemplates" via "Draft.utp_recursion" via "Draft.utp_rel")
### Ambiguous input (line 129 of "$AFP/UTP/utp/utp_healthy.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Idempotent) ("_position" f)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" f)
###       ("_cargs"
###         ("\<^const>utp_pred.taut"
###           ("\<^const>HOL.eq"
###             ("\<^const>Set.image" ("_position" f) ("_position" A))
###             ("_position" f)))
###         ("_position" A)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Idempotent) ("_position" f)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.image" ("_position" f)
###       ("_applC" ("_position" f)
###         ("_cargs"
###           ("\<^const>utp_pred.taut"
###             ("\<^const>HOL.eq" ("_position" A) ("_position" f)))
###           ("_position" A))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Idempotent) ("_position" f)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.image" ("_position" f)
###         ("\<^const>Set.image" ("_position" f) ("_position" A)))
###       ("\<^const>Set.image" ("_position" f) ("_position" A)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Idempotent) ("_position" f)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" f)
###         ("_cargs" ("\<^const>utp_pred.taut" ("_position" f))
###           ("_position" A)))
###       ("\<^const>Set.image" ("_position" f) ("_position" A)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.utp_healthy"
### 0.541s elapsed time, 0.897s cpu time, 0.487s GC time
Loading theory "Draft.utp_rel" (required by "Draft.utp_recursionTemplates" via "Draft.utp_recursion")
### theory "Draft.utp_rel"
### 0.994s elapsed time, 1.105s cpu time, 0.094s GC time
Loading theory "Draft.utp_recursion" (required by "Draft.utp_recursionTemplates")
### theory "Draft.utp_recursion"
### 0.137s elapsed time, 0.137s cpu time, 0.000s GC time
Loading theory "Draft.utp_recursionTemplates"
val templateLemmas =
   [("utp_recursion.mu_const", "(\<mu> X \<bullet> ?P) = ?P",
     template_equation
      (template_app (template_hole 0, t_empty), template_var 0)),
    ("utp_recursion.nu_const", "(\<nu> X \<bullet> ?P) = ?P",
     template_equation
      (template_app (template_hole 0, t_empty), template_var 0)),
    ("utp_recursion.chain0", "chain ?Y ==> ?Y 0 = false",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_var 0, template_hole 1), template_hole 0))),
    ("utp_recursion.chainI",
     "[| ?Y 0 = false; !!i. ?Y (Suc i) \<sqsubseteq> ?Y i |] ==> chain ?Y",
     template_implication
      ([template_equation
         (template_app (template_var 0, template_hole 5), template_hole 4),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("utp_recursion.chainE",
     "[| chain ?Y;
         !!i. [| ?Y 0 = false; ?Y (Suc i) \<sqsubseteq> ?Y i |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("utp_recursion.chain_pred_terminates",
     "[| constr ?F ?E; Monotonic ?F |]
      ==> (\<Or>range ?E \<and> \<mu> ?F) =
          (\<Or>range ?E \<and> \<nu> ?F)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 2))),
           template_app (template_hole 1, template_var 1)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 2))),
           template_app (template_hole 0, template_var 1))))),
    ("utp_recursion.L274",
     "ALL n. (?E n \<and> ?X) = (?E n \<and> ?Y) ==>
      (\<Or>range ?E \<and> ?X) = (\<Or>range ?E \<and> ?Y)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_hole 0))),
           template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_hole 0))),
           template_var 0)))),
    ("utp_recursion.constr_fp_uniq",
     "[| constr ?F ?E; Monotonic ?F; \<Or>range ?E = ?C |]
      ==> (?C \<and> \<mu> ?F) = (?C \<and> \<nu> ?F)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 7, template_var 2)),
        template_equation
         (template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 1),
              template_hole 3)),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 0, template_var 2))))),
    ("utp_recursion.mu_refine_intro",
     "[| (?C \<Rightarrow> ?S) \<sqsubseteq> ?F (?C \<Rightarrow> ?S);
         (?C \<and> \<mu> ?F) = (?C \<and> \<nu> ?F) |]
      ==> (?C \<Rightarrow> ?S) \<sqsubseteq> \<mu> ?F",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_var 2,
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 1),
            template_app (template_hole 1, template_var 2)),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_app (template_hole 0, template_var 2)))],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_var 0)))),
    ("utp_recursion.constrI",
     "[| chain ?E;
         !!X n.
            (?F X \<and> ?E (n + 1)) =
            (?F (X \<and> ?E n) \<and> ?E (n + 1)) |]
      ==> constr ?F ?E",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("utp_recursion.refine_usubst_to_ueq",
     "vwb_lens ?E ==>
      ((?Pre \<Rightarrow>
        ?Post)\<lbrakk>\<guillemotleft>?st'\<guillemotright>/$?E\<rbrakk> \<sqsubseteq>
       ?f\<lbrakk>\<guillemotleft>?st'\<guillemotright>/$?E\<rbrakk>) =
      ((?Pre \<and>
        $?E =\<^sub>u \<guillemotleft>?st'\<guillemotright> \<Rightarrow>
        ?Post) \<sqsubseteq>
       ?f)",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_app (template_hole 7, template_hole 6),
                     template_app (template_hole 5, template_var 4)),
                   template_app (template_hole 4, template_var 3))),
               template_var 2)),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_app (template_hole 5, template_var 4)),
                 template_app (template_hole 4, template_var 3))),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 9, template_var 2),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_hole 0,
                       template_app (template_hole 5, template_var 4))),
                   template_app (template_hole 4, template_var 3)))),
             template_var 0))))),
    ("utp_recursion.mu_rec_total_utp_rule",
     "[| wf ?R; Monotonic ?B;
         !!st. (?Pre \<and>
                \<lceil>?e\<rceil>\<^sub>< =\<^sub>u
                \<guillemotleft>st\<guillemotright> \<Rightarrow>
                ?Post) \<sqsubseteq>
               ?B (?Pre \<and>
                   (\<lceil>?e\<rceil>\<^sub><,
                    \<guillemotleft>st\<guillemotright>)\<^sub>u \<in>\<^sub>u
                   \<guillemotleft>?R\<guillemotright> \<Rightarrow>
                   ?Post) |]
      ==> (?Pre \<Rightarrow> ?Post) \<sqsubseteq> \<mu> ?B",
     template_implication
      ([template_predicate
         (template_app (template_hole 15, template_var 4)),
        template_predicate
         (template_app (template_hole 14, template_var 3)),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 3),
         template_app
          (template_app (template_hole 11, template_var 2),
           template_var 0)))),
    ("utp_recursion.nu_rec_total_utp_rule",
     "[| wf ?R; Monotonic ?B;
         !!st. (?Pre \<and>
                \<lceil>?e\<rceil>\<^sub>< =\<^sub>u
                \<guillemotleft>st\<guillemotright> \<Rightarrow>
                ?Post) \<sqsubseteq>
               ?B (?Pre \<and>
                   (\<lceil>?e\<rceil>\<^sub><,
                    \<guillemotleft>st\<guillemotright>)\<^sub>u \<in>\<^sub>u
                   \<guillemotleft>?R\<guillemotright> \<Rightarrow>
                   ?Post) |]
      ==> (?Pre \<Rightarrow> ?Post) \<sqsubseteq> \<nu> ?B",
     template_implication
      ([template_predicate
         (template_app (template_hole 15, template_var 4)),
        template_predicate
         (template_app (template_hole 14, template_var 3)),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 3),
         template_app
          (template_app (template_hole 11, template_var 2),
           template_var 0)))),
    ("utp_recursion.mu_rec_total_pure_rule",
     "[| wf ?R; Monotonic ?B;
         !!f st.
            [| (?Pre \<and>
                (\<lceil>?e\<rceil>\<^sub><,
                 \<guillemotleft>st\<guillemotright>)\<^sub>u \<in>\<^sub>u
                \<guillemotleft>?R\<guillemotright> \<Rightarrow>
                ?Post) \<sqsubseteq>
               f;
               \<mu> ?B = f |]
            ==> (?Pre \<and>
                 \<lceil>?e\<rceil>\<^sub>< =\<^sub>u
                 \<guillemotleft>st\<guillemotright> \<Rightarrow>
                 ?Post) \<sqsubseteq>
                ?B f |]
      ==> (?Pre \<Rightarrow> ?Post) \<sqsubseteq> \<mu> ?B",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 4)),
        template_predicate
         (template_app (template_hole 16, template_var 3)),
        template_predicate (template_app (template_hole 15, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 3),
         template_app
          (template_app (template_hole 12, template_var 2),
           template_var 0)))),
    ("utp_recursion.nu_rec_total_pure_rule",
     "[| wf ?R; Monotonic ?B;
         !!f st.
            [| (?Pre \<and>
                (\<lceil>?e\<rceil>\<^sub><,
                 \<guillemotleft>st\<guillemotright>)\<^sub>u \<in>\<^sub>u
                \<guillemotleft>?R\<guillemotright> \<Rightarrow>
                ?Post) \<sqsubseteq>
               f;
               \<nu> ?B = f |]
            ==> (?Pre \<and>
                 \<lceil>?e\<rceil>\<^sub>< =\<^sub>u
                 \<guillemotleft>st\<guillemotright> \<Rightarrow>
                 ?Post) \<sqsubseteq>
                ?B f |]
      ==> (?Pre \<Rightarrow> ?Post) \<sqsubseteq> \<nu> ?B",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 4)),
        template_predicate
         (template_app (template_hole 16, template_var 3)),
        template_predicate (template_app (template_hole 15, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 3),
         template_app
          (template_app (template_hole 12, template_var 2),
           template_var 0)))),
    ("utp_recursion.wf_fixp_uinduct_pure_ueq_gen",
     "[| ?fp ?B = ?B (?fp ?B); wf ?R;
         !!f st.
            [| !!st'.
                  (st', st) : ?R ==>
                  (?Pre \<and>
                   \<lceil>?e\<rceil>\<^sub>< =\<^sub>u
                   \<guillemotleft>st'\<guillemotright> \<Rightarrow>
                   ?Post) \<sqsubseteq>
                  f;
               ?fp ?B = f |]
            ==> (?Pre \<and>
                 \<lceil>?e\<rceil>\<^sub>< =\<^sub>u
                 \<guillemotleft>st\<guillemotright> \<Rightarrow>
                 ?Post) \<sqsubseteq>
                ?B f |]
      ==> (?Pre \<Rightarrow> ?Post) \<sqsubseteq> ?fp ?B",
     template_implication
      ([template_equation
         (template_app (template_var 5, template_var 4),
          template_app
           (template_var 4, template_app (template_var 5, template_var 4))),
        template_predicate
         (template_app (template_hole 11, template_var 3)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_inequation
        (less_equals, template_app (template_var 5, template_var 4),
         template_app
          (template_app (template_hole 5, template_var 2),
           template_var 0))))]:
   (string * thm * template) list
### theory "Draft.utp_recursionTemplates"
### 0.753s elapsed time, 0.943s cpu time, 0.134s GC time
val it = (): unit
