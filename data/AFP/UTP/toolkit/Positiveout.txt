Loading theory "Draft.Infinity" (required by "Draft.PositiveTemplates" via "Draft.Positive")
Loading theory "Draft.Templates" (required by "Draft.PositiveTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.073s elapsed time, 0.174s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.PositiveTemplates")
### Additional type variable(s) in locale specification "infinite": 'a
class infinite = type +
  assumes "infinite_UNIV": "infinite UNIV"
### Ignoring duplicate rewrite rule:
### finite UNIV == False
### theory "Draft.Infinity"
### 0.451s elapsed time, 0.924s cpu time, 0.044s GC time
Loading theory "Draft.Positive" (required by "Draft.PositiveTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.578s elapsed time, 1.150s cpu time, 0.044s GC time
instantiation
  pos :: ({zero,linorder}) zero
  zero_pos == zero_class.zero :: 'a\<^sup>+
instantiation
  pos :: ({zero,linorder}) linorder
  less_eq_pos == less_eq :: 'a\<^sup>+ => 'a\<^sup>+ => bool
  less_pos == less :: 'a\<^sup>+ => 'a\<^sup>+ => bool
instantiation
  pos :: (linordered_semidom) linordered_semidom
  one_pos == one_class.one :: 'a\<^sup>+
  times_pos == times :: 'a\<^sup>+ => 'a\<^sup>+ => 'a\<^sup>+
  minus_pos == minus :: 'a\<^sup>+ => 'a\<^sup>+ => 'a\<^sup>+
  plus_pos == plus :: 'a\<^sup>+ => 'a\<^sup>+ => 'a\<^sup>+
instantiation
  pos :: (linordered_field) semidom_divide
  divide_pos == divide :: 'a\<^sup>+ => 'a\<^sup>+ => 'a\<^sup>+
instantiation
  pos :: (linordered_field) inverse
  inverse_pos == inverse :: 'a\<^sup>+ => 'a\<^sup>+
### theory "Draft.Positive"
### 0.483s elapsed time, 0.722s cpu time, 0.069s GC time
Loading theory "Draft.PositiveTemplates"
val templateLemmas =
   [("Positive.pos_positive", "0 <= ?x",
     template_inequation (less_equals, template_hole 0, template_var 0)),
    ("Positive.mk_pos_real_of_pos", "mk_pos (real_of_pos ?x) = ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Positive.real_of_pos_numeral",
     "real_of_pos (numeral ?n) = numeral ?n",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Positive.real_of_pos_eq_transfer",
     "(?x = ?y) = (real_of_pos ?x = real_of_pos ?y)",
     template_bimplication
      (template_equation (template_var 1, template_var 0),
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Positive.real_of_pos_less_transfer",
     "(?x < ?y) = (real_of_pos ?x < real_of_pos ?y)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Positive.real_of_pos_less_eq_transfer",
     "(?x <= ?y) = (real_of_pos ?x <= real_of_pos ?y)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Positive.real_op_pos_plus",
     "real_of_pos (?x + ?y) = real_of_pos ?x + real_of_pos ?y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Positive.real_op_pos_mult",
     "real_of_pos (?x * ?y) = real_of_pos ?x * real_of_pos ?y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Positive.real_op_pos_div",
     "real_of_pos (?x / ?y) = real_of_pos ?x / real_of_pos ?y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Positive.real_of_pos", "0 <= ?x ==> real_of_pos (mk_pos ?x) = ?x",
     template_implication
      ([template_inequation (less_equals, template_hole 3, template_var 0)],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Positive.real_op_pos_minus",
     "?y <= ?x ==> real_of_pos (?x - ?y) = real_of_pos ?x - real_of_pos ?y",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)),
           template_app (template_hole 2, template_var 1))))),
    ("Positive.mk_pos_less",
     "[| (0::?'a) <= ?x; ?x < ?y |] ==> mk_pos ?x < mk_pos ?y",
     template_implication
      ([template_inequation (less_equals, template_hole 3, template_var 1),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Positive.mk_pos_leq",
     "[| (0::?'a) <= ?x; ?x <= ?y |] ==> mk_pos ?x <= mk_pos ?y",
     template_implication
      ([template_inequation (less_equals, template_hole 2, template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0))))]:
   (string * thm * template) list
### theory "Draft.PositiveTemplates"
### 0.318s elapsed time, 0.423s cpu time, 0.000s GC time
val it = (): unit
