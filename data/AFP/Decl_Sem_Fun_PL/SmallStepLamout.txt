Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SmallStepLamMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SmallStepLamMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Lambda" (required by "Draft.SmallStepLamMoreTemplates" via "Draft.SmallStepLam")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SmallStepLamMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.129s elapsed time, 0.538s cpu time, 0.052s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SmallStepLamMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.252s elapsed time, 1.032s cpu time, 0.052s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SmallStepLamMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.343s elapsed time, 1.377s cpu time, 0.168s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SmallStepLamMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 1.052s elapsed time, 3.923s cpu time, 0.949s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### theory "Draft.Lambda"
### 1.362s elapsed time, 5.145s cpu time, 1.001s GC time
Loading theory "Draft.SmallStepLam" (required by "Draft.SmallStepLamMoreTemplates")
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.119s elapsed time, 4.076s cpu time, 0.911s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Proofs for inductive predicate(s) "isval"
  Proving monotonicity ...
### Ambiguous input (line 35 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" is_val) ("_position" v))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" EApp)
###         ("_cargs"
###           ("_applC" ("_position" ELam)
###             ("_cargs" ("_position" x) ("_position" e)))
###           ("_position" v)))
###       ("_applC" ("_position" subst)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" v) ("_position" e)))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" is_val) ("_position" v))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduce"
###       ("_applC" ("_position" EApp)
###         ("_cargs"
###           ("_applC" ("_position" ELam)
###             ("_cargs" ("_position" x) ("_position" e)))
###           ("_position" v)))
###       ("_applC" ("_position" subst)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" v) ("_position" e)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 36 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>reduce" ("_position" e1) ("_position" e1'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1) ("_position" e2)))
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1') ("_position" e2))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies" ("_position" e1) ("_position" e1'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1) ("_position" e2)))
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1') ("_position" e2))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>reduce" ("_position" e1) ("_position" e1'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduce"
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1) ("_position" e2)))
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1') ("_position" e2))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies" ("_position" e1) ("_position" e1'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduce"
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1) ("_position" e2)))
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1') ("_position" e2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 37 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>reduce" ("_position" e2) ("_position" e2'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1) ("_position" e2)))
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1) ("_position" e2'))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies" ("_position" e2) ("_position" e2'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1) ("_position" e2)))
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1) ("_position" e2'))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>reduce" ("_position" e2) ("_position" e2'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduce"
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1) ("_position" e2)))
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1) ("_position" e2'))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies" ("_position" e2) ("_position" e2'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduce"
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1) ("_position" e2)))
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1) ("_position" e2'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 38 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("_applC" ("_position" EPrim)
###       ("_cargs" ("_position" f)
###         ("_cargs" ("_applC" ("_position" ENat) ("_position" n1))
###           ("_applC" ("_position" ENat) ("_position" n2)))))
###     ("_applC" ("_position" ENat)
###       ("_applC" ("_position" f)
###         ("_cargs" ("_position" n1) ("_position" n2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>reduce"
###     ("_applC" ("_position" EPrim)
###       ("_cargs" ("_position" f)
###         ("_cargs" ("_applC" ("_position" ENat) ("_position" n1))
###           ("_applC" ("_position" ENat) ("_position" n2)))))
###     ("_applC" ("_position" ENat)
###       ("_applC" ("_position" f)
###         ("_cargs" ("_position" n1) ("_position" n2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 39 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>reduce" ("_position" e1) ("_position" e1'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1) ("_position" e2))))
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1') ("_position" e2)))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies" ("_position" e1) ("_position" e1'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1) ("_position" e2))))
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1') ("_position" e2)))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>reduce" ("_position" e1) ("_position" e1'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduce"
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1) ("_position" e2))))
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1') ("_position" e2)))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies" ("_position" e1) ("_position" e1'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduce"
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1) ("_position" e2))))
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1') ("_position" e2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 40 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>reduce" ("_position" e2) ("_position" e2'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1) ("_position" e2))))
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1) ("_position" e2')))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies" ("_position" e2) ("_position" e2'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1) ("_position" e2))))
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1) ("_position" e2')))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>reduce" ("_position" e2) ("_position" e2'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduce"
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1) ("_position" e2))))
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1) ("_position" e2')))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies" ("_position" e2) ("_position" e2'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduce"
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1) ("_position" e2))))
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1) ("_position" e2')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 41 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("_applC" ("_position" EIf)
###       ("_cargs"
###         ("_applC" ("_position" ENat) ("\<^const>Groups.zero_class.zero"))
###         ("_cargs" ("_position" thn) ("_position" els))))
###     ("_position" els)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>reduce"
###     ("_applC" ("_position" EIf)
###       ("_cargs"
###         ("_applC" ("_position" ENat) ("\<^const>Groups.zero_class.zero"))
###         ("_cargs" ("_position" thn) ("_position" els))))
###     ("_position" els)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 42 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" n)
###       ("\<^const>Groups.zero_class.zero")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" EIf)
###         ("_cargs" ("_applC" ("_position" ENat) ("_position" n))
###           ("_cargs" ("_position" thn) ("_position" els))))
###       ("_position" thn))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" n)
###       ("\<^const>Groups.zero_class.zero")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduce"
###       ("_applC" ("_position" EIf)
###         ("_cargs" ("_applC" ("_position" ENat) ("_position" n))
###           ("_cargs" ("_position" thn) ("_position" els))))
###       ("_position" thn))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 43 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>reduce" ("_position" cond) ("_position" cond'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" EIf)
###         ("_cargs" ("_position" cond)
###           ("_cargs" ("_position" thn) ("_position" els))))
###       ("_applC" ("_position" EIf)
###         ("_cargs" ("_position" cond')
###           ("_cargs" ("_position" thn) ("_position" els)))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies" ("_position" cond) ("_position" cond'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" EIf)
###         ("_cargs" ("_position" cond)
###           ("_cargs" ("_position" thn) ("_position" els))))
###       ("_applC" ("_position" EIf)
###         ("_cargs" ("_position" cond')
###           ("_cargs" ("_position" thn) ("_position" els)))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>reduce" ("_position" cond) ("_position" cond'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduce"
###       ("_applC" ("_position" EIf)
###         ("_cargs" ("_position" cond)
###           ("_cargs" ("_position" thn) ("_position" els))))
###       ("_applC" ("_position" EIf)
###         ("_cargs" ("_position" cond')
###           ("_cargs" ("_position" thn) ("_position" els)))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies" ("_position" cond) ("_position" cond'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduce"
###       ("_applC" ("_position" EIf)
###         ("_cargs" ("_position" cond)
###           ("_cargs" ("_position" thn) ("_position" els))))
###       ("_applC" ("_position" EIf)
###         ("_cargs" ("_position" cond')
###           ("_cargs" ("_position" thn) ("_position" els)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "reduce"
  Proving monotonicity ...
### Ambiguous input (line 47 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies" ("_applC" ("_position" EVar) ("_position" x))
###     ("_position" e)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStepLam.reduce"
###     ("_applC" ("_position" EVar) ("_position" x)) ("_position" e)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 48 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies" ("_applC" ("_position" ENat) ("_position" n))
###     ("_position" e)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStepLam.reduce"
###     ("_applC" ("_position" ENat) ("_position" n)) ("_position" e)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 49 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("_applC" ("_position" ELam) ("_cargs" ("_position" x) ("_position" e)))
###     ("_position" e')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStepLam.reduce"
###     ("_applC" ("_position" ELam) ("_cargs" ("_position" x) ("_position" e)))
###     ("_position" e')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 50 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("_applC" ("_position" EApp)
###       ("_cargs" ("_position" e1) ("_position" e2)))
###     ("_position" e')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStepLam.reduce"
###     ("_applC" ("_position" EApp)
###       ("_cargs" ("_position" e1) ("_position" e2)))
###     ("_position" e')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Ambiguous input (line 54 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStepLam.reduce" ("_position" e1) ("_position" e2)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>multi_step" ("_position" e2) ("_position" e3)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>multi_step" ("_position" e1) ("_position" e3))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies" ("_position" e1) ("_position" e2)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>multi_step" ("_position" e2) ("_position" e3)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>multi_step" ("_position" e1) ("_position" e3))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "multi_step"
  Proving monotonicity ...
### Ambiguous input (line 57 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" diverge) ("_position" e))
###   ("\<^const>HOL.All_binder" ("_position" e')
###     ("\<^const>HOL.implies"
###       ("\<^const>SmallStepLam.multi_step" ("_position" e) ("_position" e'))
###       ("\<^const>HOL.Ex_binder" ("_position" e'')
###         ("\<^const>HOL.implies" ("_position" e') ("_position" e''))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" diverge) ("_position" e))
###   ("\<^const>HOL.All_binder" ("_position" e')
###     ("\<^const>HOL.implies"
###       ("\<^const>SmallStepLam.multi_step" ("_position" e) ("_position" e'))
###       ("\<^const>HOL.Ex_binder" ("_position" e'')
###         ("\<^const>SmallStepLam.reduce" ("_position" e')
###           ("_position" e''))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 60 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" stuck) ("_position" e))
###   ("\<^const>HOL.Not"
###     ("\<^const>HOL.Ex_binder" ("_position" e')
###       ("\<^const>SmallStepLam.reduce" ("_position" e) ("_position" e')))))
### ("\<^const>Pure.eq" ("_applC" ("_position" stuck) ("_position" e))
###   ("\<^const>HOL.Not"
###     ("\<^const>HOL.Ex_binder" ("_position" e')
###       ("\<^const>HOL.implies" ("_position" e) ("_position" e')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### theory "HOL-Library.Tree"
### 2.065s elapsed time, 6.514s cpu time, 1.192s GC time
Loading theory "Draft.Templates" (required by "Draft.SmallStepLamMoreTemplates" via "Draft.ExtrEqs")
### Ambiguous input (line 103 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies" ("_position" e) ("_position" e')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStepLam.reduce" ("_position" e) ("_position" e')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.SmallStepLam"
### 0.870s elapsed time, 1.993s cpu time, 0.244s GC time
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.056s elapsed time, 0.118s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SmallStepLamMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.483s elapsed time, 0.529s cpu time, 0.057s GC time
Loading theory "Draft.SmallStepLamMoreTemplates"
val templateLemmas =
   [("SmallStepLam.val_stuck", "isval ?e ==> stuck ?e",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("SmallStepLam.isval_var_inv", "isval (EVar ?x) ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app (template_hole 0, template_var 1))
            )],
       template_predicate (template_var 0))),
    ("SmallStepLam.isval_app_inv", "isval (EApp ?e1.0 ?e2.0) ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1))
            )],
       template_predicate (template_var 0))),
    ("SmallStepLam.red_int_inv", "ENat ?n \<longrightarrow> ?e ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 2)),
              template_var 1)
            )],
       template_predicate (template_var 0))),
    ("SmallStepLam.red_var_inv", "EVar ?x \<longrightarrow> ?e ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 2)),
              template_var 1)
            )],
       template_predicate (template_var 0))),
    ("SmallStepLam.isval_if_inv", "isval (EIf ?e1.0 ?e2.0 ?e3.0) ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2),
                template_var 1))
            )],
       template_predicate (template_var 0))),
    ("SmallStepLam.isval_prim_inv", "isval (EPrim ?f ?e1.0 ?e2.0) ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2),
                template_var 1))
            )],
       template_predicate (template_var 0))),
    ("SmallStepLam.red_lam_inv", "ELam ?x ?e \<longrightarrow> ?e' ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2)),
              template_var 1)
            )],
       template_predicate (template_var 0))),
    ("SmallStepLam.reduction_pres_fv",
     "[| ?e \<longrightarrow>* ?e'; FV ?e = {} |] ==> FV ?e' = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_equation
         (template_app (template_hole 1, template_var 1), template_hole 0)],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("SmallStepLam.red_pres_fv",
     "[| ?e \<longrightarrow> ?e'; FV ?e = {} |] ==> FV ?e' = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_equation
         (template_app (template_hole 1, template_var 1), template_hole 0)],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("SmallStepLam.subst_fv_aux",
     "FV ?v = {} ==> FV (subst ?x ?v ?e) <= FV ?e - {?x}",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 2), template_hole 4)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 5, template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_hole 4))))),
    ("SmallStepLam.subst_fv",
     "[| FV ?e <= {?x}; FV ?v = {} |] ==> FV (subst ?x ?v ?e) = {}",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_var 2),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_hole 2)),
        template_equation
         (template_app (template_hole 4, template_var 0), template_hole 2)],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)),
         template_hole 2))),
    ("SmallStepLam.red_app_inv",
     "[| EApp ?e1.0 ?e2.0 \<longrightarrow> ?e';
         !!x e.
            [| ?e1.0 = ELam x e; ?e' = subst x ?e2.0 e; isval ?e2.0;
               FV ?e2.0 = {} |]
            ==> ?P;
         !!e1'.
            [| ?e' = EApp e1' ?e2.0; ?e1.0 \<longrightarrow> e1' |] ==> ?P;
         !!e2'.
            [| ?e' = EApp ?e1.0 e2'; ?e2.0 \<longrightarrow> e2' |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.SmallStepLamMoreTemplates"
### 0.323s elapsed time, 0.415s cpu time, 0.000s GC time
val it = (): unit
