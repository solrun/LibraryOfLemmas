   [("DenotCongruenceFSet.denot_sound_wrt_ctx_equiv",
     "E ?e1.0 = E ?e2.0 ==> ?e1.0 \<simeq> ?e2.0",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("DenotCongruenceFSet.diverge_denot_empty",
     "[| diverge ?e; FV ?e = {} |] ==> E ?e [] = {}",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 0)),
        template_equation
         (template_app (template_hole 5, template_var 0), template_hole 4)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_hole 1),
         template_hole 0))),
    ("DenotCongruenceFSet.goes_wrong_denot_empty",
     "[| goes_wrong ?e; FV ?e = {} |] ==> E ?e [] = {}",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 0)),
        template_equation
         (template_app (template_hole 5, template_var 0), template_hole 4)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_hole 1),
         template_hole 0))),
    ("DenotCongruenceFSet.congruence",
     "E ?e = E ?e' ==> E (plug ?C ?e) = E (plug ?C ?e')",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 2),
          template_app (template_hole 1, template_var 1))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("DenotCongruenceFSet.e_lam_cong",
     "E ?e = E ?e' ==> E (ELam ?x ?e) = E (ELam ?x ?e')",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 2),
          template_app (template_hole 1, template_var 1))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("DenotCongruenceFSet.denot_empty_diverge",
     "[| E ?e [] = {}; FV ?e = {} |] ==> diverge ?e | goes_wrong ?e",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 8, template_var 0),
            template_hole 7),
          template_hole 6),
        template_equation
         (template_app (template_hole 4, template_var 0), template_hole 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("DenotCongruenceFSet.e_app_cong",
     "[| E ?e1.0 = E ?e1'; E ?e2.0 = E ?e2' |]
      ==> E (EApp ?e1.0 ?e2.0) = E (EApp ?e1' ?e2')",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 3),
          template_app (template_hole 1, template_var 2)),
        template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("DenotCongruenceFSet.e_prim_cong",
     "[| E ?e1.0 = E ?e1'; E ?e2.0 = E ?e2' |]
      ==> E (EPrim ?f ?e1.0 ?e2.0) = E (EPrim ?f ?e1' ?e2')",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 4),
          template_app (template_hole 1, template_var 3)),
        template_equation
         (template_app (template_hole 1, template_var 2),
          template_app (template_hole 1, template_var 1))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 4),
             template_var 2)),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3),
             template_var 1))))),
    ("DenotCongruenceFSet.val_ty_observe",
     "[| ?A : E ?v []; ?A : E ?v' []; observe ?v ?ob; isval ?v'; isval ?v |]
      ==> observe ?v' ?ob",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_hole 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_hole 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 0, template_var 1)),
        template_predicate
         (template_app (template_hole 0, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), template_var 0)
           ))),
    ("DenotCongruenceFSet.e_if_cong",
     "[| E ?e1.0 = E ?e1'; E ?e2.0 = E ?e2'; E ?e3.0 = E ?e3' |]
      ==> E (EIf ?e1.0 ?e2.0 ?e3.0) = E (EIf ?e1' ?e2' ?e3')",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 5),
          template_app (template_hole 1, template_var 4)),
        template_equation
         (template_app (template_hole 1, template_var 3),
          template_app (template_hole 1, template_var 2)),
        template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 5),
               template_var 3),
             template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 2),
             template_var 0))))),
    ("DenotCongruenceFSet.soundness_wrt_ctx_equiv_aux",
     "[| E ?e1.0 = E ?e2.0; FV (plug ?C ?e1.0) = {};
         FV (plug ?C ?e2.0) = {}; plug ?C ?e1.0 \<Down> ?ob |]
      ==> plug ?C ?e2.0 \<Down> ?ob",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 3),
          template_app (template_hole 5, template_var 2)),
        template_equation
         (template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 3)),
          template_hole 1),
        template_equation
         (template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 2)),
          template_hole 1),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 0,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 3)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 2)),
             template_var 0)
           )))]
