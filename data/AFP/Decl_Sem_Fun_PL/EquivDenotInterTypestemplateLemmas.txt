   [("EquivDenotInterTypes.Tf_top", "Tf ?t <:: \<top>",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("EquivDenotInterTypes.vt_id", "Vf (Tf ?t) = ?t",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("EquivDenotInterTypes.vt_id", "V (T ?v) = ?v",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("EquivDenotInterTypes.tv_id", "Tf (Vf ?F) \<simeq> ?F",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0))),
           template_var 0)
         )),
    ("EquivDenotInterTypes.tv_id", "T (V ?A) \<approx> ?A",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0))),
           template_var 0)
         )),
    ("EquivDenotInterTypes.append_eq_symm",
     "?t2.0 @ ?t1.0 \<sim> ?t1.0 @ ?t2.0",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("EquivDenotInterTypes.Tf_append",
     "Tf (?t1.0 @ ?t2.0) <:: Tf ?t1.0 \<sqinter> Tf ?t2.0",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 1)),
             template_app (template_hole 2, template_var 0)))
         )),
    ("EquivDenotInterTypes.append_Tf",
     "Tf ?t1.0 \<sqinter> Tf ?t2.0 <:: Tf (?t1.0 @ ?t2.0)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_app (template_hole 1, template_var 0))),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))
         )),
    ("EquivDenotInterTypes.sub_inter_left1",
     "?A <:: ?C ==> ?A \<sqinter> ?B <:: ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("EquivDenotInterTypes.sub_inter_left2",
     "?B <:: ?C ==> ?A \<sqinter> ?B <:: ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_var 1)
           ))),
    ("EquivDenotInterTypes.le_sub_fun_flip",
     "?t \<lesssim> ?t' ==> Tf ?t' <:: Tf ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("EquivDenotInterTypes.le_sub_flip",
     "?v \<sqsubseteq> ?v' ==> T ?v' <: T ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("EquivDenotInterTypes.ts_implies_denot",
     "?\<Gamma> \<turnstile> ?e : ?A ==> V ?A : E ?e (Venv ?\<Gamma>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 2)))
           ))),
    ("EquivDenotInterTypes.denot_implies_ts",
     "?v : E ?e ?\<rho> ==> Tenv ?\<rho> \<turnstile> ?e : T ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_var 1),
             template_app (template_hole 0, template_var 2))
           ))),
    ("EquivDenotInterTypes.lookup_tenv",
     "lookup ?\<rho> ?x = Some ?v ==>
      lookup (Tenv ?\<rho>) ?x = Some (T ?v)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 2), template_var 1),
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 2)),
           template_var 1),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("EquivDenotInterTypes.venv_lookup",
     "lookup ?\<Gamma> ?x = Some ?A ==>
      lookup (Venv ?\<Gamma>) ?x = Some (V ?A)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 2), template_var 1),
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 2)),
           template_var 1),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("EquivDenotInterTypes.table_mem_sub",
     "(?v, ?v') : set ?t ==> Tf ?t <:: T ?v \<rightarrow> T ?v'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_app (template_hole 0, template_var 1)))
           ))),
    ("EquivDenotInterTypes.append_fun_equiv",
     "[| ?t1' \<sim> ?t1.0; ?t2' \<sim> ?t2.0 |]
      ==> ?t1' @ ?t2' \<sim> ?t1.0 @ ?t2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("EquivDenotInterTypes.sub_le_flip",
     "(?A <: ?B --> V ?B \<sqsubseteq> V ?A) &
      (?f1.0 <:: ?f2.0 --> Vf ?f2.0 \<lesssim> Vf ?f1.0)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 3),
                   template_var 2)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 2)),
                 template_app (template_hole 3, template_var 3)))),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_app (template_hole 0, template_var 1))))
         )),
    ("EquivDenotInterTypes.vf_cons",
     "Vf (Tf ((?v, ?v') # ?t)) = (V (T ?v), V (T ?v')) # Vf (Tf ?t)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)),
             template_var 0))),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2))),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)))),
         template_app
          (template_hole 5,
           template_app (template_hole 4, template_var 0))))),
    ("EquivDenotInterTypes.le_sub_flip_aux",
     "ALL v v' t t'.
         ?n = val_size v + val_size v' + fun_size t + fun_size t' -->
         (v \<sqsubseteq> v' --> T v' <: T v) &
         (t \<lesssim> t' --> Tf t' <:: Tf t)",
     template_predicate (template_app (template_hole 13, t_empty))),
    ("EquivDenotInterTypes.denot_lam_implies_ts",
     "[| ALL v \<rho>.
            v : E ?e \<rho> --> Tenv \<rho> \<turnstile> ?e : T v;
         ALL v1 v2. (v1, v2) : set ?f --> v2 : E ?e ((?x, v1) # ?\<rho>) |]
      ==> Tenv ?\<rho> \<turnstile> ELam ?x ?e : TFun (Tf ?f)",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 15, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 10,
                 template_app (template_hole 9, template_var 0)),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 3)),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)))
           )))]
