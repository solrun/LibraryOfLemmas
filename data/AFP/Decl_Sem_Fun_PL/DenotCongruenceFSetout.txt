Loading theory "Draft.Lambda" (required by "Draft.DenotCongruenceFSetMoreTemplates" via "Draft.DenotCongruenceFSet" via "Draft.ChangeEnv")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.DenotCongruenceFSetMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.DenotCongruenceFSetMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.DenotCongruenceFSetMoreTemplates" via "Draft.DenotCongruenceFSet" via "Draft.ChangeEnv" via "Draft.DeclSemAsDenotFSet" via "Draft.ValuesFSet" via "HOL-Library.FSet" via "HOL-Library.Countable")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.127s elapsed time, 0.520s cpu time, 0.044s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.DenotCongruenceFSetMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.232s elapsed time, 0.913s cpu time, 0.080s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.DenotCongruenceFSetMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.429s elapsed time, 1.708s cpu time, 0.124s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.DenotCongruenceFSetMoreTemplates" via "Draft.ExtrEqs")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.548s elapsed time, 2.175s cpu time, 0.200s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.DenotCongruenceFSetMoreTemplates" via "Draft.DenotCongruenceFSet" via "Draft.ChangeEnv" via "Draft.DeclSemAsDenotFSet" via "Draft.ValuesFSet" via "HOL-Library.FSet")
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### Additional type variable(s) in locale specification "countable": 'a
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### theory "Draft.Lambda"
### 1.107s elapsed time, 4.380s cpu time, 0.371s GC time
Loading theory "Draft.SmallStepLam" (required by "Draft.DenotCongruenceFSetMoreTemplates" via "Draft.DenotCongruenceFSet" via "Draft.DenotSoundFSet")
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Proofs for inductive predicate(s) "finite_item"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
### theory "HOL-Library.Stream"
### 0.944s elapsed time, 3.715s cpu time, 0.357s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.DenotCongruenceFSetMoreTemplates" via "Draft.ExtrEqs")
Proofs for inductive predicate(s) "isval"
  Proving monotonicity ...
### Ambiguous input (line 35 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" is_val) ("_position" v))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" EApp)
###         ("_cargs"
###           ("_applC" ("_position" ELam)
###             ("_cargs" ("_position" x) ("_position" e)))
###           ("_position" v)))
###       ("_applC" ("_position" subst)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" v) ("_position" e)))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" is_val) ("_position" v))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduce"
###       ("_applC" ("_position" EApp)
###         ("_cargs"
###           ("_applC" ("_position" ELam)
###             ("_cargs" ("_position" x) ("_position" e)))
###           ("_position" v)))
###       ("_applC" ("_position" subst)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" v) ("_position" e)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 36 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>reduce" ("_position" e1) ("_position" e1'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1) ("_position" e2)))
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1') ("_position" e2))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies" ("_position" e1) ("_position" e1'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1) ("_position" e2)))
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1') ("_position" e2))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>reduce" ("_position" e1) ("_position" e1'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduce"
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1) ("_position" e2)))
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1') ("_position" e2))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies" ("_position" e1) ("_position" e1'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduce"
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1) ("_position" e2)))
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1') ("_position" e2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 37 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>reduce" ("_position" e2) ("_position" e2'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1) ("_position" e2)))
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1) ("_position" e2'))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies" ("_position" e2) ("_position" e2'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1) ("_position" e2)))
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1) ("_position" e2'))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>reduce" ("_position" e2) ("_position" e2'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduce"
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1) ("_position" e2)))
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1) ("_position" e2'))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies" ("_position" e2) ("_position" e2'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduce"
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1) ("_position" e2)))
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1) ("_position" e2'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 38 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("_applC" ("_position" EPrim)
###       ("_cargs" ("_position" f)
###         ("_cargs" ("_applC" ("_position" ENat) ("_position" n1))
###           ("_applC" ("_position" ENat) ("_position" n2)))))
###     ("_applC" ("_position" ENat)
###       ("_applC" ("_position" f)
###         ("_cargs" ("_position" n1) ("_position" n2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>reduce"
###     ("_applC" ("_position" EPrim)
###       ("_cargs" ("_position" f)
###         ("_cargs" ("_applC" ("_position" ENat) ("_position" n1))
###           ("_applC" ("_position" ENat) ("_position" n2)))))
###     ("_applC" ("_position" ENat)
###       ("_applC" ("_position" f)
###         ("_cargs" ("_position" n1) ("_position" n2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 39 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>reduce" ("_position" e1) ("_position" e1'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1) ("_position" e2))))
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1') ("_position" e2)))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies" ("_position" e1) ("_position" e1'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1) ("_position" e2))))
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1') ("_position" e2)))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>reduce" ("_position" e1) ("_position" e1'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduce"
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1) ("_position" e2))))
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1') ("_position" e2)))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies" ("_position" e1) ("_position" e1'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduce"
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1) ("_position" e2))))
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1') ("_position" e2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 40 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>reduce" ("_position" e2) ("_position" e2'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1) ("_position" e2))))
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1) ("_position" e2')))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies" ("_position" e2) ("_position" e2'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1) ("_position" e2))))
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1) ("_position" e2')))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>reduce" ("_position" e2) ("_position" e2'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduce"
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1) ("_position" e2))))
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1) ("_position" e2')))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies" ("_position" e2) ("_position" e2'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduce"
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1) ("_position" e2))))
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1) ("_position" e2')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 41 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("_applC" ("_position" EIf)
###       ("_cargs"
###         ("_applC" ("_position" ENat) ("\<^const>Groups.zero_class.zero"))
###         ("_cargs" ("_position" thn) ("_position" els))))
###     ("_position" els)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>reduce"
###     ("_applC" ("_position" EIf)
###       ("_cargs"
###         ("_applC" ("_position" ENat) ("\<^const>Groups.zero_class.zero"))
###         ("_cargs" ("_position" thn) ("_position" els))))
###     ("_position" els)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 42 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" n)
###       ("\<^const>Groups.zero_class.zero")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" EIf)
###         ("_cargs" ("_applC" ("_position" ENat) ("_position" n))
###           ("_cargs" ("_position" thn) ("_position" els))))
###       ("_position" thn))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" n)
###       ("\<^const>Groups.zero_class.zero")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduce"
###       ("_applC" ("_position" EIf)
###         ("_cargs" ("_applC" ("_position" ENat) ("_position" n))
###           ("_cargs" ("_position" thn) ("_position" els))))
###       ("_position" thn))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 43 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>reduce" ("_position" cond) ("_position" cond'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" EIf)
###         ("_cargs" ("_position" cond)
###           ("_cargs" ("_position" thn) ("_position" els))))
###       ("_applC" ("_position" EIf)
###         ("_cargs" ("_position" cond')
###           ("_cargs" ("_position" thn) ("_position" els)))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies" ("_position" cond) ("_position" cond'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" EIf)
###         ("_cargs" ("_position" cond)
###           ("_cargs" ("_position" thn) ("_position" els))))
###       ("_applC" ("_position" EIf)
###         ("_cargs" ("_position" cond')
###           ("_cargs" ("_position" thn) ("_position" els)))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>reduce" ("_position" cond) ("_position" cond'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduce"
###       ("_applC" ("_position" EIf)
###         ("_cargs" ("_position" cond)
###           ("_cargs" ("_position" thn) ("_position" els))))
###       ("_applC" ("_position" EIf)
###         ("_cargs" ("_position" cond')
###           ("_cargs" ("_position" thn) ("_position" els)))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies" ("_position" cond) ("_position" cond'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduce"
###       ("_applC" ("_position" EIf)
###         ("_cargs" ("_position" cond)
###           ("_cargs" ("_position" thn) ("_position" els))))
###       ("_applC" ("_position" EIf)
###         ("_cargs" ("_position" cond')
###           ("_cargs" ("_position" thn) ("_position" els)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "reduce"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
  Proving monotonicity ...
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
### Ambiguous input (line 47 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies" ("_applC" ("_position" EVar) ("_position" x))
###     ("_position" e)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStepLam.reduce"
###     ("_applC" ("_position" EVar) ("_position" x)) ("_position" e)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 48 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies" ("_applC" ("_position" ENat) ("_position" n))
###     ("_position" e)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStepLam.reduce"
###     ("_applC" ("_position" ENat) ("_position" n)) ("_position" e)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 49 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("_applC" ("_position" ELam) ("_cargs" ("_position" x) ("_position" e)))
###     ("_position" e')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStepLam.reduce"
###     ("_applC" ("_position" ELam) ("_cargs" ("_position" x) ("_position" e)))
###     ("_position" e')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 50 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("_applC" ("_position" EApp)
###       ("_cargs" ("_position" e1) ("_position" e2)))
###     ("_position" e')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStepLam.reduce"
###     ("_applC" ("_position" EApp)
###       ("_cargs" ("_position" e1) ("_position" e2)))
###     ("_position" e')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 54 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStepLam.reduce" ("_position" e1) ("_position" e2)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>multi_step" ("_position" e2) ("_position" e3)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>multi_step" ("_position" e1) ("_position" e3))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies" ("_position" e1) ("_position" e2)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>multi_step" ("_position" e2) ("_position" e3)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>multi_step" ("_position" e1) ("_position" e3))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "multi_step"
  Proving monotonicity ...
### Ambiguous input (line 57 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" diverge) ("_position" e))
###   ("\<^const>HOL.All_binder" ("_position" e')
###     ("\<^const>HOL.implies"
###       ("\<^const>SmallStepLam.multi_step" ("_position" e) ("_position" e'))
###       ("\<^const>HOL.Ex_binder" ("_position" e'')
###         ("\<^const>HOL.implies" ("_position" e') ("_position" e''))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" diverge) ("_position" e))
###   ("\<^const>HOL.All_binder" ("_position" e')
###     ("\<^const>HOL.implies"
###       ("\<^const>SmallStepLam.multi_step" ("_position" e) ("_position" e'))
###       ("\<^const>HOL.Ex_binder" ("_position" e'')
###         ("\<^const>SmallStepLam.reduce" ("_position" e')
###           ("_position" e''))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 60 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" stuck) ("_position" e))
###   ("\<^const>HOL.Not"
###     ("\<^const>HOL.Ex_binder" ("_position" e')
###       ("\<^const>SmallStepLam.reduce" ("_position" e) ("_position" e')))))
### ("\<^const>Pure.eq" ("_applC" ("_position" stuck) ("_position" e))
###   ("\<^const>HOL.Not"
###     ("\<^const>HOL.Ex_binder" ("_position" e')
###       ("\<^const>HOL.implies" ("_position" e) ("_position" e')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.411s elapsed time, 5.405s cpu time, 0.943s GC time
Loading theory "HOL-Library.FSet" (required by "Draft.DenotCongruenceFSetMoreTemplates" via "Draft.DenotCongruenceFSet" via "Draft.ChangeEnv" via "Draft.DeclSemAsDenotFSet" via "Draft.ValuesFSet")
Found termination order: "size <*mlex*> {}"
instantiation
  fset :: (finite) finite
instantiation
  fset :: (type) {minus,bounded_lattice_bot,distrib_lattice}
  inf_fset == inf :: 'a fset => 'a fset => 'a fset
  bot_fset == bot :: 'a fset
  sup_fset == sup :: 'a fset => 'a fset => 'a fset
  less_eq_fset == less_eq :: 'a fset => 'a fset => bool
  less_fset == less :: 'a fset => 'a fset => bool
  minus_fset == minus :: 'a fset => 'a fset => 'a fset
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  fset :: (equal) equal
  equal_fset == equal_class.equal :: 'a fset => 'a fset => bool
instantiation
  fset :: (type) conditionally_complete_lattice
  Inf_fset == Inf :: 'a fset set => 'a fset
  Sup_fset == Sup :: 'a fset set => 'a fset
instantiation
  fset :: (finite) complete_lattice
  top_fset == top :: 'a fset
instantiation
  fset :: (finite) complete_boolean_algebra
  uminus_fset == uminus :: 'a fset => 'a fset
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### theory "HOL-Library.BigO"
### 1.021s elapsed time, 3.869s cpu time, 0.821s GC time
### Ambiguous input (line 103 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies" ("_position" e) ("_position" e')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStepLam.reduce" ("_position" e) ("_position" e')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.SmallStepLam"
### 1.319s elapsed time, 5.019s cpu time, 0.930s GC time
Loading theory "Draft.BigStepLam" (required by "Draft.DenotCongruenceFSetMoreTemplates" via "Draft.DenotCongruenceFSet" via "Draft.DenotSoundFSet")
### theory "HOL-Library.Tree"
### 2.175s elapsed time, 8.292s cpu time, 1.178s GC time
Loading theory "Draft.Templates" (required by "Draft.DenotCongruenceFSetMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.082s elapsed time, 0.252s cpu time, 0.068s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.DenotCongruenceFSetMoreTemplates")
Proofs for inductive predicate(s) "eval"
  Proving monotonicity ...
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "bs_val", "bs_env"
  Proving monotonicity ...
### Ambiguous input (line 99 of "$AFP/Decl_Sem_Fun_PL/BigStepLam.thy") produces 4 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" closed_env) ("_position" \<rho>))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" x) ("_position" v))
###     ("\<^const>HOL.eq"
###       ("\<^const>HOL.eq"
###         ("\<^const>Set.member" ("_position" x)
###           ("\<^const>SmallStepLam.reduce"
###             ("_applC" ("_position" sdom) ("_position" \<rho>))
###             ("_applC" ("_position" lookup)
###               ("_cargs" ("_position" \<rho>) ("_position" x)))))
###         ("\<^const>SmallStepLam.reduce"
###           ("_applC" ("_position" Some) ("_position" v))
###           ("_applC" ("_position" FV) ("_position" v))))
###       ("\<^const>Set.empty"))))
### ("\<^const>Pure.eq" ("_applC" ("_position" closed_env) ("_position" \<rho>))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" x) ("_position" v))
###     ("\<^const>HOL.implies"
###       ("\<^const>Set.member" ("_position" x)
###         ("_applC" ("_position" sdom) ("_position" \<rho>)))
###       ("\<^const>HOL.eq"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" lookup)
###             ("_cargs" ("_position" \<rho>) ("_position" x)))
###           ("\<^const>SmallStepLam.reduce"
###             ("_applC" ("_position" Some) ("_position" v))
###             ("_applC" ("_position" FV) ("_position" v))))
###         ("\<^const>Set.empty")))))
### ("\<^const>Pure.eq" ("_applC" ("_position" closed_env) ("_position" \<rho>))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" x) ("_position" v))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("\<^const>Set.member" ("_position" x)
###           ("\<^const>SmallStepLam.reduce"
###             ("_applC" ("_position" sdom) ("_position" \<rho>))
###             ("_applC" ("_position" lookup)
###               ("_cargs" ("_position" \<rho>) ("_position" x)))))
###         ("_applC" ("_position" Some) ("_position" v)))
###       ("\<^const>HOL.eq" ("_applC" ("_position" FV) ("_position" v))
###         ("\<^const>Set.empty")))))
### ("\<^const>Pure.eq" ("_applC" ("_position" closed_env) ("_position" \<rho>))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" x) ("_position" v))
###     ("\<^const>HOL.implies"
###       ("\<^const>Set.member" ("_position" x)
###         ("_applC" ("_position" sdom) ("_position" \<rho>)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" lookup)
###             ("_cargs" ("_position" \<rho>) ("_position" x)))
###           ("_applC" ("_position" Some) ("_position" v)))
###         ("\<^const>HOL.eq" ("_applC" ("_position" FV) ("_position" v))
###           ("\<^const>Set.empty"))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 102 of "$AFP/Decl_Sem_Fun_PL/BigStepLam.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" equiv_env)
###     ("_cargs" ("_position" \<rho>) ("_position" \<rho>')))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_applC" ("_position" sdom) ("_position" \<rho>))
###       ("_applC" ("_position" sdom) ("_position" \<rho>')))
###     ("\<^const>HOL.All_binder" ("_position" x)
###       ("\<^const>HOL.implies"
###         ("\<^const>Set.member" ("_position" x)
###           ("_applC" ("_position" sdom) ("_position" \<rho>)))
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" lookup)
###             ("_cargs" ("_position" \<rho>) ("_position" x)))
###           ("_applC" ("_position" lookup)
###             ("_cargs" ("_position" \<rho>') ("_position" x))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" equiv_env)
###     ("_cargs" ("_position" \<rho>) ("_position" \<rho>')))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_applC" ("_position" sdom) ("_position" \<rho>))
###       ("_applC" ("_position" sdom) ("_position" \<rho>')))
###     ("\<^const>HOL.All_binder" ("_position" x)
###       ("\<^const>HOL.eq"
###         ("\<^const>Set.member" ("_position" x)
###           ("\<^const>SmallStepLam.reduce"
###             ("_applC" ("_position" sdom) ("_position" \<rho>))
###             ("_applC" ("_position" lookup)
###               ("_cargs" ("_position" \<rho>) ("_position" x)))))
###         ("_applC" ("_position" lookup)
###           ("_cargs" ("_position" \<rho>') ("_position" x)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.620s elapsed time, 1.893s cpu time, 0.147s GC time
Found termination order: "{}"
### theory "Draft.BigStepLam"
### 0.852s elapsed time, 2.559s cpu time, 0.215s GC time
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
locale comp_fun_idem
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_idem f"
locale comm_monoid_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_fset (\<^bold>*) \<^bold>1"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### Cannot skip proof of schematic goal statement
locale semilattice_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
  assumes "semilattice_fset (\<^bold>*)"
locale semilattice_order_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
  assumes "semilattice_order_fset (\<^bold>*) (\<^bold>\<le>) (\<^bold><)"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  fset :: (type) size
  size_fset == size :: 'a fset => nat
instantiation
  fset :: (exhaustive) exhaustive
  exhaustive_fset == exhaustive_class.exhaustive ::
    ('a fset => (bool * term list) option)
    => natural => (bool * term list) option
Found termination order: "(%p. nat_of_natural (snd p)) <*mlex*> {}"
instantiation
  fset :: (full_exhaustive) full_exhaustive
  full_exhaustive_fset == full_exhaustive_class.full_exhaustive ::
    ('a fset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Found termination order: "(%p. nat_of_natural (snd p)) <*mlex*> {}"
instantiation
  fset :: (random) random
  random_fset == random_class.random ::
    natural
    => natural * natural => ('a fset * (unit => term)) * natural * natural
### Additional type variable(s) in specification of "random_aux_fset_rel": 'a
### Additional type variable(s) in specification of "random_aux_fset_dom": 'a
Found termination order: "(%p. nat_of_natural (fst p)) <*mlex*> {}"
### theory "HOL-Library.FSet"
### 2.285s elapsed time, 5.411s cpu time, 0.478s GC time
Loading theory "Draft.ValuesFSet" (required by "Draft.DenotCongruenceFSetMoreTemplates" via "Draft.DenotCongruenceFSet" via "Draft.ChangeEnv" via "Draft.DeclSemAsDenotFSet")
Proofs for inductive predicate(s) "val_le"
  Proving monotonicity ...
### Ambiguous input (line 16 of "$AFP/Decl_Sem_Fun_PL/ValuesFSet.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^const>ValuesFSet.val_le" ("_position" \<rho>) ("_position" \<rho>'))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" x) ("_position" v))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" lookup)
###           ("_cargs" ("_position" \<rho>) ("_position" x)))
###         ("_applC" ("_position" Some) ("_position" v)))
###       ("\<^const>HOL.Ex_binder" ("_position" v')
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" lookup)
###               ("_cargs" ("_position" \<rho>') ("_position" x)))
###             ("_applC" ("_position" Some) ("_position" v')))
###           ("\<^fixed>env_le" ("_position" v) ("_position" v')))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>env_le" ("_position" \<rho>) ("_position" \<rho>'))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" x) ("_position" v))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" lookup)
###           ("_cargs" ("_position" \<rho>) ("_position" x)))
###         ("_applC" ("_position" Some) ("_position" v)))
###       ("\<^const>HOL.Ex_binder" ("_position" v')
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" lookup)
###               ("_cargs" ("_position" \<rho>') ("_position" x)))
###             ("_applC" ("_position" Some) ("_position" v')))
###           ("\<^fixed>env_le" ("_position" v) ("_position" v')))))))
### ("\<^const>Pure.eq"
###   ("\<^const>ValuesFSet.val_le" ("_position" \<rho>) ("_position" \<rho>'))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" x) ("_position" v))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" lookup)
###           ("_cargs" ("_position" \<rho>) ("_position" x)))
###         ("_applC" ("_position" Some) ("_position" v)))
###       ("\<^const>HOL.Ex_binder" ("_position" v')
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" lookup)
###               ("_cargs" ("_position" \<rho>') ("_position" x)))
###             ("_applC" ("_position" Some) ("_position" v')))
###           ("\<^const>ValuesFSet.val_le" ("_position" v)
###             ("_position" v')))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>env_le" ("_position" \<rho>) ("_position" \<rho>'))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" x) ("_position" v))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" lookup)
###           ("_cargs" ("_position" \<rho>) ("_position" x)))
###         ("_applC" ("_position" Some) ("_position" v)))
###       ("\<^const>HOL.Ex_binder" ("_position" v')
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" lookup)
###               ("_cargs" ("_position" \<rho>') ("_position" x)))
###             ("_applC" ("_position" Some) ("_position" v')))
###           ("\<^const>ValuesFSet.val_le" ("_position" v)
###             ("_position" v')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
consts
  vsize :: "val => nat"
### theory "Draft.ValuesFSet"
### 0.443s elapsed time, 0.490s cpu time, 0.032s GC time
Loading theory "Draft.DeclSemAsDenotFSet" (required by "Draft.DenotCongruenceFSetMoreTemplates" via "Draft.DenotCongruenceFSet" via "Draft.ChangeEnv")
Loading theory "Draft.ValuesFSetProps" (required by "Draft.DenotCongruenceFSetMoreTemplates" via "Draft.DenotCongruenceFSet" via "Draft.ChangeEnv")
### Ambiguous input (line 6 of "$AFP/Decl_Sem_Fun_PL/ValuesFSetProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValuesFSet.val_le"
###     ("_applC" ("_position" VFun) ("_position" t1))
###     ("_applC" ("_position" VFun) ("_position" t2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValuesFSet.env_le"
###     ("_applC" ("_position" VFun) ("_position" t1))
###     ("_applC" ("_position" VFun) ("_position" t2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 9 of "$AFP/Decl_Sem_Fun_PL/DeclSemAsDenotFSet.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" E)
###       ("_cargs" ("_applC" ("_position" EVar) ("_position" x))
###         ("_position" \<rho>)))
###     ("_Coll" ("_position" v)
###       ("\<^const>HOL.Ex_binder" ("_position" v')
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" lookup)
###               ("_cargs" ("_position" \<rho>) ("_position" x)))
###             ("_applC" ("_position" Some) ("_position" v')))
###           ("\<^const>ValuesFSet.env_le" ("_position" v)
###             ("_position" v')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" E)
###       ("_cargs" ("_applC" ("_position" EVar) ("_position" x))
###         ("_position" \<rho>)))
###     ("_Coll" ("_position" v)
###       ("\<^const>HOL.Ex_binder" ("_position" v')
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" lookup)
###               ("_cargs" ("_position" \<rho>) ("_position" x)))
###             ("_applC" ("_position" Some) ("_position" v')))
###           ("\<^const>ValuesFSet.val_le" ("_position" v)
###             ("_position" v')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 7 of "$AFP/Decl_Sem_Fun_PL/ValuesFSetProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValuesFSet.val_le"
###     ("_applC" ("_position" VFun) ("_position" t2))
###     ("_applC" ("_position" VNat) ("_position" x1))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValuesFSet.env_le"
###     ("_applC" ("_position" VFun) ("_position" t2))
###     ("_applC" ("_position" VNat) ("_position" x1))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 8 of "$AFP/Decl_Sem_Fun_PL/ValuesFSetProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValuesFSet.val_le" ("_position" v)
###     ("_applC" ("_position" VNat) ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValuesFSet.env_le" ("_position" v)
###     ("_applC" ("_position" VNat) ("_position" n))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 9 of "$AFP/Decl_Sem_Fun_PL/ValuesFSetProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValuesFSet.val_le"
###     ("_applC" ("_position" VNat) ("_position" n)) ("_position" v)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValuesFSet.env_le"
###     ("_applC" ("_position" VNat) ("_position" n)) ("_position" v)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 10 of "$AFP/Decl_Sem_Fun_PL/ValuesFSetProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValuesFSet.val_le"
###     ("_applC" ("_position" VFun) ("_position" t)) ("_position" v)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValuesFSet.env_le"
###     ("_applC" ("_position" VFun) ("_position" t)) ("_position" v)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 12 of "$AFP/Decl_Sem_Fun_PL/DeclSemAsDenotFSet.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" E)
###       ("_cargs"
###         ("_applC" ("_position" EApp)
###           ("_cargs" ("_position" e1) ("_position" e2)))
###         ("_position" \<rho>)))
###     ("_Coll" ("_position" v3)
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" f)
###           ("_idts" ("_position" v2)
###             ("_idts" ("_position" v2') ("_position" v3'))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" VFun) ("_position" f))
###             ("_applC" ("_position" E)
###               ("_cargs" ("_position" e1) ("_position" \<rho>))))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" v2)
###               ("_applC" ("_position" E)
###                 ("_cargs" ("_position" e2) ("_position" \<rho>))))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" v2')
###                   ("_tuple_arg" ("_position" v3')))
###                 ("_applC" ("_position" fset) ("_position" f)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>ValuesFSet.env_le" ("_position" v2')
###                   ("_position" v2))
###                 ("\<^const>ValuesFSet.env_le" ("_position" v3)
###                   ("_position" v3'))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" E)
###       ("_cargs"
###         ("_applC" ("_position" EApp)
###           ("_cargs" ("_position" e1) ("_position" e2)))
###         ("_position" \<rho>)))
###     ("_Coll" ("_position" v3)
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" f)
###           ("_idts" ("_position" v2)
###             ("_idts" ("_position" v2') ("_position" v3'))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" VFun) ("_position" f))
###             ("_applC" ("_position" E)
###               ("_cargs" ("_position" e1) ("_position" \<rho>))))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" v2)
###               ("_applC" ("_position" E)
###                 ("_cargs" ("_position" e2) ("_position" \<rho>))))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" v2')
###                   ("_tuple_arg" ("_position" v3')))
###                 ("_applC" ("_position" fset) ("_position" f)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>ValuesFSet.val_le" ("_position" v2')
###                   ("_position" v2))
###                 ("\<^const>ValuesFSet.env_le" ("_position" v3)
###                   ("_position" v3'))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" E)
###       ("_cargs"
###         ("_applC" ("_position" EApp)
###           ("_cargs" ("_position" e1) ("_position" e2)))
###         ("_position" \<rho>)))
###     ("_Coll" ("_position" v3)
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" f)
###           ("_idts" ("_position" v2)
###             ("_idts" ("_position" v2') ("_position" v3'))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" VFun) ("_position" f))
###             ("_applC" ("_position" E)
###               ("_cargs" ("_position" e1) ("_position" \<rho>))))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" v2)
###               ("_applC" ("_position" E)
###                 ("_cargs" ("_position" e2) ("_position" \<rho>))))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" v2')
###                   ("_tuple_arg" ("_position" v3')))
###                 ("_applC" ("_position" fset) ("_position" f)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>ValuesFSet.env_le" ("_position" v2')
###                   ("_position" v2))
###                 ("\<^const>ValuesFSet.val_le" ("_position" v3)
###                   ("_position" v3'))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" E)
###       ("_cargs"
###         ("_applC" ("_position" EApp)
###           ("_cargs" ("_position" e1) ("_position" e2)))
###         ("_position" \<rho>)))
###     ("_Coll" ("_position" v3)
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" f)
###           ("_idts" ("_position" v2)
###             ("_idts" ("_position" v2') ("_position" v3'))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" VFun) ("_position" f))
###             ("_applC" ("_position" E)
###               ("_cargs" ("_position" e1) ("_position" \<rho>))))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" v2)
###               ("_applC" ("_position" E)
###                 ("_cargs" ("_position" e2) ("_position" \<rho>))))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" v2')
###                   ("_tuple_arg" ("_position" v3')))
###                 ("_applC" ("_position" fset) ("_position" f)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>ValuesFSet.val_le" ("_position" v2')
###                   ("_position" v2))
###                 ("\<^const>ValuesFSet.val_le" ("_position" v3)
###                   ("_position" v3'))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 11 of "$AFP/Decl_Sem_Fun_PL/ValuesFSetProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValuesFSet.val_le" ("_position" v)
###     ("_applC" ("_position" VFun) ("_position" t))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValuesFSet.env_le" ("_position" v)
###     ("_applC" ("_position" VFun) ("_position" t))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 13 of "$AFP/Decl_Sem_Fun_PL/ValuesFSetProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValuesFSet.val_le" ("_position" v) ("_position" v)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValuesFSet.env_le" ("_position" v) ("_position" v)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 15 of "$AFP/Decl_Sem_Fun_PL/ValuesFSetProps.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValuesFSet.env_le" ("_position" v1) ("_position" v2)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValuesFSet.env_le" ("_position" v2) ("_position" v3)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValuesFSet.val_le" ("_position" v1) ("_position" v3))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValuesFSet.val_le" ("_position" v1) ("_position" v2)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValuesFSet.env_le" ("_position" v2) ("_position" v3)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValuesFSet.val_le" ("_position" v1) ("_position" v3))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValuesFSet.env_le" ("_position" v1) ("_position" v2)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValuesFSet.val_le" ("_position" v2) ("_position" v3)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValuesFSet.val_le" ("_position" v1) ("_position" v3))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValuesFSet.val_le" ("_position" v1) ("_position" v2)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValuesFSet.val_le" ("_position" v2) ("_position" v3)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValuesFSet.val_le" ("_position" v1) ("_position" v3))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValuesFSet.env_le" ("_position" v1) ("_position" v2)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValuesFSet.env_le" ("_position" v2) ("_position" v3)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValuesFSet.env_le" ("_position" v1) ("_position" v3))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValuesFSet.val_le" ("_position" v1) ("_position" v2)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValuesFSet.env_le" ("_position" v2) ("_position" v3)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValuesFSet.env_le" ("_position" v1) ("_position" v3))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValuesFSet.env_le" ("_position" v1) ("_position" v2)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValuesFSet.val_le" ("_position" v2) ("_position" v3)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValuesFSet.env_le" ("_position" v1) ("_position" v3))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValuesFSet.val_le" ("_position" v1) ("_position" v2)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValuesFSet.val_le" ("_position" v2) ("_position" v3)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValuesFSet.env_le" ("_position" v1) ("_position" v3))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 26 of "$AFP/Decl_Sem_Fun_PL/ValuesFSetProps.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValuesFSet.env_le" ("_position" v1) ("_position" v2)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValuesFSet.env_le" ("_position" v2) ("_position" v1)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" v1) ("_position" v2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValuesFSet.val_le" ("_position" v1) ("_position" v2)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValuesFSet.env_le" ("_position" v2) ("_position" v1)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" v1) ("_position" v2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValuesFSet.env_le" ("_position" v1) ("_position" v2)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValuesFSet.val_le" ("_position" v2) ("_position" v1)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" v1) ("_position" v2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValuesFSet.val_le" ("_position" v1) ("_position" v2)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValuesFSet.val_le" ("_position" v2) ("_position" v1)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" v1) ("_position" v2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 29 of "$AFP/Decl_Sem_Fun_PL/ValuesFSetProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValuesFSet.val_le"
###       ("_applC" ("_position" VNat) ("_position" n)) ("_position" v)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" v)
###       ("_applC" ("_position" VNat) ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValuesFSet.env_le"
###       ("_applC" ("_position" VNat) ("_position" n)) ("_position" v)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" v)
###       ("_applC" ("_position" VNat) ("_position" n)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 32 of "$AFP/Decl_Sem_Fun_PL/ValuesFSetProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValuesFSet.val_le" ("_position" v)
###       ("_applC" ("_position" VNat) ("_position" n))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" v)
###       ("_applC" ("_position" VNat) ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValuesFSet.env_le" ("_position" v)
###       ("_applC" ("_position" VNat) ("_position" n))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" v)
###       ("_applC" ("_position" VNat) ("_position" n)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 35 of "$AFP/Decl_Sem_Fun_PL/ValuesFSetProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValuesFSet.val_le"
###       ("_applC" ("_position" VNat) ("_position" n))
###       ("_applC" ("_position" VNat) ("_position" n'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValuesFSet.env_le"
###       ("_applC" ("_position" VNat) ("_position" n))
###       ("_applC" ("_position" VNat) ("_position" n'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.ValuesFSetProps"
### 0.069s elapsed time, 0.163s cpu time, 0.054s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.DeclSemAsDenotFSet"
### 0.279s elapsed time, 0.416s cpu time, 0.076s GC time
Loading theory "Draft.ChangeEnv" (required by "Draft.DenotCongruenceFSetMoreTemplates" via "Draft.DenotCongruenceFSet")
### Ambiguous input (line 14 of "$AFP/Decl_Sem_Fun_PL/ChangeEnv.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v3)
###         ("_applC" ("_position" E)
###           ("_cargs"
###             ("_applC" ("_position" EApp)
###               ("_cargs" ("_position" e1) ("_position" e2)))
###             ("_position" \<rho>)))))
###     ("_asm"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" f)
###           ("_idts" ("_position" v2)
###             ("_idts" ("_position" v2') ("_position" v3'))))
###         ("_bigimpl"
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member"
###                 ("_applC" ("_position" VFun) ("_position" f))
###                 ("_applC" ("_position" E)
###                   ("_cargs" ("_position" e1) ("_position" \<rho>)))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Set.member" ("_position" v2)
###                   ("_applC" ("_position" E)
###                     ("_cargs" ("_position" e2) ("_position" \<rho>)))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" v2')
###                       ("_tuple_arg" ("_position" v3')))
###                     ("_applC" ("_position" fset) ("_position" f))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>ValuesFSet.val_le" ("_position" v2')
###                       ("_position" v2)))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>ValuesFSet.val_le" ("_position" v3)
###                         ("_position" v3'))))))))
###           ("\<^const>HOL.Trueprop" ("_position" P))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v3)
###         ("_applC" ("_position" E)
###           ("_cargs"
###             ("_applC" ("_position" EApp)
###               ("_cargs" ("_position" e1) ("_position" e2)))
###             ("_position" \<rho>)))))
###     ("_asm"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" f)
###           ("_idts" ("_position" v2)
###             ("_idts" ("_position" v2') ("_position" v3'))))
###         ("_bigimpl"
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member"
###                 ("_applC" ("_position" VFun) ("_position" f))
###                 ("_applC" ("_position" E)
###                   ("_cargs" ("_position" e1) ("_position" \<rho>)))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Set.member" ("_position" v2)
###                   ("_applC" ("_position" E)
###                     ("_cargs" ("_position" e2) ("_position" \<rho>)))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" v2')
###                       ("_tuple_arg" ("_position" v3')))
###                     ("_applC" ("_position" fset) ("_position" f))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>ValuesFSet.env_le" ("_position" v2')
###                       ("_position" v2)))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>ValuesFSet.val_le" ("_position" v3)
###                         ("_position" v3'))))))))
###           ("\<^const>HOL.Trueprop" ("_position" P))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v3)
###         ("_applC" ("_position" E)
###           ("_cargs"
###             ("_applC" ("_position" EApp)
###               ("_cargs" ("_position" e1) ("_position" e2)))
###             ("_position" \<rho>)))))
###     ("_asm"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" f)
###           ("_idts" ("_position" v2)
###             ("_idts" ("_position" v2') ("_position" v3'))))
###         ("_bigimpl"
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member"
###                 ("_applC" ("_position" VFun) ("_position" f))
###                 ("_applC" ("_position" E)
###                   ("_cargs" ("_position" e1) ("_position" \<rho>)))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Set.member" ("_position" v2)
###                   ("_applC" ("_position" E)
###                     ("_cargs" ("_position" e2) ("_position" \<rho>)))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" v2')
###                       ("_tuple_arg" ("_position" v3')))
###                     ("_applC" ("_position" fset) ("_position" f))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>ValuesFSet.val_le" ("_position" v2')
###                       ("_position" v2)))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>ValuesFSet.env_le" ("_position" v3)
###                         ("_position" v3'))))))))
###           ("\<^const>HOL.Trueprop" ("_position" P))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v3)
###         ("_applC" ("_position" E)
###           ("_cargs"
###             ("_applC" ("_position" EApp)
###               ("_cargs" ("_position" e1) ("_position" e2)))
###             ("_position" \<rho>)))))
###     ("_asm"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" f)
###           ("_idts" ("_position" v2)
###             ("_idts" ("_position" v2') ("_position" v3'))))
###         ("_bigimpl"
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member"
###                 ("_applC" ("_position" VFun) ("_position" f))
###                 ("_applC" ("_position" E)
###                   ("_cargs" ("_position" e1) ("_position" \<rho>)))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Set.member" ("_position" v2)
###                   ("_applC" ("_position" E)
###                     ("_cargs" ("_position" e2) ("_position" \<rho>)))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" v2')
###                       ("_tuple_arg" ("_position" v3')))
###                     ("_applC" ("_position" fset) ("_position" f))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>ValuesFSet.env_le" ("_position" v2')
###                       ("_position" v2)))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>ValuesFSet.env_le" ("_position" v3)
###                         ("_position" v3'))))))))
###           ("\<^const>HOL.Trueprop" ("_position" P))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 19 of "$AFP/Decl_Sem_Fun_PL/ChangeEnv.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_applC" ("_position" VFun) ("_position" f))
###         ("_applC" ("_position" E)
###           ("_cargs" ("_position" e1) ("_position" \<rho>)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v2)
###           ("_applC" ("_position" E)
###             ("_cargs" ("_position" e2) ("_position" \<rho>)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" v2') ("_tuple_arg" ("_position" v3')))
###             ("_applC" ("_position" fset) ("_position" f))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>ValuesFSet.env_le" ("_position" v2')
###               ("_position" v2)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>ValuesFSet.env_le" ("_position" v3)
###                 ("_position" v3'))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v3)
###       ("_applC" ("_position" E)
###         ("_cargs"
###           ("_applC" ("_position" EApp)
###             ("_cargs" ("_position" e1) ("_position" e2)))
###           ("_position" \<rho>))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_applC" ("_position" VFun) ("_position" f))
###         ("_applC" ("_position" E)
###           ("_cargs" ("_position" e1) ("_position" \<rho>)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v2)
###           ("_applC" ("_position" E)
###             ("_cargs" ("_position" e2) ("_position" \<rho>)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" v2') ("_tuple_arg" ("_position" v3')))
###             ("_applC" ("_position" fset) ("_position" f))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>ValuesFSet.val_le" ("_position" v2')
###               ("_position" v2)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>ValuesFSet.env_le" ("_position" v3)
###                 ("_position" v3'))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v3)
###       ("_applC" ("_position" E)
###         ("_cargs"
###           ("_applC" ("_position" EApp)
###             ("_cargs" ("_position" e1) ("_position" e2)))
###           ("_position" \<rho>))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_applC" ("_position" VFun) ("_position" f))
###         ("_applC" ("_position" E)
###           ("_cargs" ("_position" e1) ("_position" \<rho>)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v2)
###           ("_applC" ("_position" E)
###             ("_cargs" ("_position" e2) ("_position" \<rho>)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" v2') ("_tuple_arg" ("_position" v3')))
###             ("_applC" ("_position" fset) ("_position" f))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>ValuesFSet.env_le" ("_position" v2')
###               ("_position" v2)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>ValuesFSet.val_le" ("_position" v3)
###                 ("_position" v3'))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v3)
###       ("_applC" ("_position" E)
###         ("_cargs"
###           ("_applC" ("_position" EApp)
###             ("_cargs" ("_position" e1) ("_position" e2)))
###           ("_position" \<rho>))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_applC" ("_position" VFun) ("_position" f))
###         ("_applC" ("_position" E)
###           ("_cargs" ("_position" e1) ("_position" \<rho>)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v2)
###           ("_applC" ("_position" E)
###             ("_cargs" ("_position" e2) ("_position" \<rho>)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" v2') ("_tuple_arg" ("_position" v3')))
###             ("_applC" ("_position" fset) ("_position" f))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>ValuesFSet.val_le" ("_position" v2')
###               ("_position" v2)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>ValuesFSet.val_le" ("_position" v3)
###                 ("_position" v3'))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v3)
###       ("_applC" ("_position" E)
###         ("_cargs"
###           ("_applC" ("_position" EApp)
###             ("_cargs" ("_position" e1) ("_position" e2)))
###           ("_position" \<rho>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 39 of "$AFP/Decl_Sem_Fun_PL/ChangeEnv.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" lookup)
###           ("_cargs" ("_position" \<rho>) ("_position" x)))
###         ("_applC" ("_position" Some) ("_position" v'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValuesFSet.env_le" ("_position" v) ("_position" v')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v)
###       ("_applC" ("_position" E)
###         ("_cargs" ("_applC" ("_position" EVar) ("_position" x))
###           ("_position" \<rho>))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" lookup)
###           ("_cargs" ("_position" \<rho>) ("_position" x)))
###         ("_applC" ("_position" Some) ("_position" v'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValuesFSet.val_le" ("_position" v) ("_position" v')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v)
###       ("_applC" ("_position" E)
###         ("_cargs" ("_applC" ("_position" EVar) ("_position" x))
###           ("_position" \<rho>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 42 of "$AFP/Decl_Sem_Fun_PL/ChangeEnv.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("_position" E)
###           ("_cargs" ("_applC" ("_position" EVar) ("_position" x))
###             ("_position" \<rho>)))))
###     ("_asm"
###       ("\<^const>Pure.all_binder" ("_position" v')
###         ("_bigimpl"
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" lookup)
###                   ("_cargs" ("_position" \<rho>) ("_position" x)))
###                 ("_applC" ("_position" Some) ("_position" v'))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>ValuesFSet.val_le" ("_position" v)
###                   ("_position" v')))))
###           ("\<^const>HOL.Trueprop" ("_position" P))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("_position" E)
###           ("_cargs" ("_applC" ("_position" EVar) ("_position" x))
###             ("_position" \<rho>)))))
###     ("_asm"
###       ("\<^const>Pure.all_binder" ("_position" v')
###         ("_bigimpl"
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" lookup)
###                   ("_cargs" ("_position" \<rho>) ("_position" x)))
###                 ("_applC" ("_position" Some) ("_position" v'))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>ValuesFSet.env_le" ("_position" v)
###                   ("_position" v')))))
###           ("\<^const>HOL.Trueprop" ("_position" P))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 60 of "$AFP/Decl_Sem_Fun_PL/ChangeEnv.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>xenv_le" ("_position" X) ("_position" \<rho>)
###     ("_position" \<rho>'))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" x) ("_position" v))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" x) ("_position" X))
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" lookup)
###             ("_cargs" ("_position" \<rho>) ("_position" x)))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("\<^const>HOL.Ex_binder" ("_position" v')
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" lookup)
###               ("_cargs" ("_position" \<rho>') ("_position" x)))
###             ("_applC" ("_position" Some) ("_position" v')))
###           ("\<^const>ValuesFSet.env_le" ("_position" v)
###             ("_position" v')))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>xenv_le" ("_position" X) ("_position" \<rho>)
###     ("_position" \<rho>'))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" x) ("_position" v))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" x) ("_position" X))
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" lookup)
###             ("_cargs" ("_position" \<rho>) ("_position" x)))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("\<^const>HOL.Ex_binder" ("_position" v')
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" lookup)
###               ("_cargs" ("_position" \<rho>') ("_position" x)))
###             ("_applC" ("_position" Some) ("_position" v')))
###           ("\<^const>ValuesFSet.val_le" ("_position" v)
###             ("_position" v')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 64 of "$AFP/Decl_Sem_Fun_PL/ChangeEnv.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValuesFSet.val_le" ("_position" v') ("_position" v)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValuesFSet.env_le" ("_position" v') ("_position" v)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 121 of "$AFP/Decl_Sem_Fun_PL/ChangeEnv.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("_position" E)
###           ("_cargs" ("_position" e) ("_position" \<rho>)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValuesFSet.env_le" ("_position" v') ("_position" v)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v')
###       ("_applC" ("_position" E)
###         ("_cargs" ("_position" e) ("_position" \<rho>))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("_position" E)
###           ("_cargs" ("_position" e) ("_position" \<rho>)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValuesFSet.val_le" ("_position" v') ("_position" v)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v')
###       ("_applC" ("_position" E)
###         ("_cargs" ("_position" e) ("_position" \<rho>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 124 of "$AFP/Decl_Sem_Fun_PL/ChangeEnv.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValuesFSet.val_le" ("_position" \<rho>) ("_position" \<rho>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValuesFSet.env_le" ("_position" \<rho>) ("_position" \<rho>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 124 of "$AFP/Decl_Sem_Fun_PL/ChangeEnv.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValuesFSet.val_le"
###     ("\<^const>List.list.Cons"
###       ("_tuple" ("_position" x) ("_tuple_arg" ("_position" v)))
###       ("_position" \<rho>))
###     ("\<^const>List.list.Cons"
###       ("_tuple" ("_position" x) ("_tuple_arg" ("_position" v)))
###       ("_position" \<rho>'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValuesFSet.env_le"
###     ("\<^const>List.list.Cons"
###       ("_tuple" ("_position" x) ("_tuple_arg" ("_position" v)))
###       ("_position" \<rho>))
###     ("\<^const>List.list.Cons"
###       ("_tuple" ("_position" x) ("_tuple_arg" ("_position" v)))
###       ("_position" \<rho>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 133 of "$AFP/Decl_Sem_Fun_PL/ChangeEnv.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValuesFSet.val_le" ("_position" \<rho>) ("_position" \<rho>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValuesFSet.env_le" ("_position" \<rho>) ("_position" \<rho>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 141 of "$AFP/Decl_Sem_Fun_PL/ChangeEnv.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValuesFSet.env_eq" ("_position" \<rho>)
###       ("_position" \<rho>')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValuesFSet.val_le" ("_position" \<rho>)
###       ("_position" \<rho>'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValuesFSet.env_eq" ("_position" \<rho>)
###       ("_position" \<rho>')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValuesFSet.env_le" ("_position" \<rho>)
###       ("_position" \<rho>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.ChangeEnv"
### 0.177s elapsed time, 0.177s cpu time, 0.000s GC time
Loading theory "Draft.DenotSoundFSet" (required by "Draft.DenotCongruenceFSetMoreTemplates" via "Draft.DenotCongruenceFSet")
### Ambiguous input (line 83 of "$AFP/Decl_Sem_Fun_PL/DenotSoundFSet.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies" ("_position" e) ("_position" e')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStepLam.reduce" ("_position" e) ("_position" e')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 118 of "$AFP/Decl_Sem_Fun_PL/DenotSoundFSet.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj" ("_applC" ("_position" is_val) ("_position" e))
###     ("\<^const>HOL.Ex_binder" ("_position" e')
###       ("\<^const>SmallStepLam.reduce" ("_position" e) ("_position" e')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj" ("_applC" ("_position" is_val) ("_position" e))
###     ("\<^const>HOL.Ex_binder" ("_position" e')
###       ("\<^const>HOL.implies" ("_position" e) ("_position" e')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
consts
  good :: "val => bval set"
Proofs for inductive predicate(s) "good_env"
  Proving monotonicity ...
### Ambiguous input (line 223 of "$AFP/Decl_Sem_Fun_PL/DenotSoundFSet.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" good_fun)
###       ("_cargs" ("_position" f)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" e) ("_position" \<rho>)))))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" v1) ("_position" v2))
###       ("\<^const>HOL.implies"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" v1) ("_tuple_arg" ("_position" v2)))
###           ("_applC" ("_position" fset) ("_position" f)))
###         ("_Ball" ("_position" v)
###           ("_applC" ("_position" good) ("_position" v1))
###           ("\<^const>HOL.Ex_binder" ("_position" v')
###             ("\<^const>HOL.conj"
###               ("\<^const>BigStepLam.eval"
###                 ("\<^const>List.list.Cons"
###                   ("_tuple" ("_position" x) ("_tuple_arg" ("_position" v)))
###                   ("_position" \<rho>))
###                 ("_position" e) ("_position" v'))
###               ("\<^const>Set.member" ("_position" v')
###                 ("_applC" ("_position" good) ("_position" v2))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" good_fun)
###       ("_cargs" ("_position" f)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" e) ("_position" \<rho>)))))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" v1) ("_position" v2))
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" v1) ("_tuple_arg" ("_position" v2)))
###         ("\<^const>SmallStepLam.reduce"
###           ("_applC" ("_position" fset) ("_position" f))
###           ("_Ball" ("_position" v)
###             ("_applC" ("_position" good) ("_position" v1))
###             ("\<^const>HOL.Ex_binder" ("_position" v')
###               ("\<^const>HOL.conj"
###                 ("\<^const>BigStepLam.eval"
###                   ("\<^const>List.list.Cons"
###                     ("_tuple" ("_position" x)
###                       ("_tuple_arg" ("_position" v)))
###                     ("_position" \<rho>))
###                   ("_position" e) ("_position" v'))
###                 ("\<^const>Set.member" ("_position" v')
###                   ("_applC" ("_position" good) ("_position" v2)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 287 of "$AFP/Decl_Sem_Fun_PL/DenotSoundFSet.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" v1) ("_position" v2))
###       ("\<^const>HOL.implies"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" v1) ("_tuple_arg" ("_position" v2)))
###           ("_applC" ("_position" fset) ("_position" f)))
###         ("_Ball" ("_position" v)
###           ("_applC" ("_position" good) ("_position" v1))
###           ("\<^const>HOL.Ex_binder" ("_position" v')
###             ("\<^const>HOL.conj"
###               ("\<^const>BigStepLam.eval"
###                 ("\<^const>List.list.Cons"
###                   ("_tuple" ("_position" x) ("_tuple_arg" ("_position" v)))
###                   ("_position" \<rho>))
###                 ("_position" e) ("_position" v'))
###               ("\<^const>Set.member" ("_position" v')
###                 ("_applC" ("_position" good) ("_position" v2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" good_fun)
###       ("_cargs" ("_position" f)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" e) ("_position" \<rho>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" v1) ("_position" v2))
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" v1) ("_tuple_arg" ("_position" v2)))
###         ("\<^const>SmallStepLam.reduce"
###           ("_applC" ("_position" fset) ("_position" f))
###           ("_Ball" ("_position" v)
###             ("_applC" ("_position" good) ("_position" v1))
###             ("\<^const>HOL.Ex_binder" ("_position" v')
###               ("\<^const>HOL.conj"
###                 ("\<^const>BigStepLam.eval"
###                   ("\<^const>List.list.Cons"
###                     ("_tuple" ("_position" x)
###                       ("_tuple_arg" ("_position" v)))
###                     ("_position" \<rho>))
###                   ("_position" e) ("_position" v'))
###                 ("\<^const>Set.member" ("_position" v')
###                   ("_applC" ("_position" good) ("_position" v2))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" good_fun)
###       ("_cargs" ("_position" f)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" e) ("_position" \<rho>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 290 of "$AFP/Decl_Sem_Fun_PL/DenotSoundFSet.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValuesFSet.val_le" ("_position" v') ("_position" v)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValuesFSet.env_le" ("_position" v') ("_position" v)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.DenotSoundFSet"
### 0.376s elapsed time, 0.415s cpu time, 0.055s GC time
Loading theory "Draft.DenotCompleteFSet" (required by "Draft.DenotCongruenceFSetMoreTemplates" via "Draft.DenotCongruenceFSet")
Found termination order: "{}"
### Ambiguous input (line 19 of "$AFP/Decl_Sem_Fun_PL/DenotCompleteFSet.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValuesFSet.val_le" ("_position" v1) ("_position" v12)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValuesFSet.env_le" ("_position" v1) ("_position" v12)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 38 of "$AFP/Decl_Sem_Fun_PL/DenotCompleteFSet.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>DenotCompleteFSet.join" ("_position" v1) ("_position" v2))
###       ("_applC" ("_position" Some) ("_position" v12))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValuesFSet.val_le" ("_position" v2) ("_position" v12))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>DenotCompleteFSet.join" ("_position" v1) ("_position" v2))
###       ("_applC" ("_position" Some) ("_position" v12))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValuesFSet.env_le" ("_position" v2) ("_position" v12))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 49 of "$AFP/Decl_Sem_Fun_PL/DenotCompleteFSet.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>DenotCompleteFSet.join" ("_position" v1)
###           ("_position" v2))
###         ("_applC" ("_position" Some) ("_position" v12))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValuesFSet.env_le" ("_position" v1) ("_position" v3)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>ValuesFSet.env_le" ("_position" v2)
###             ("_position" v3))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValuesFSet.val_le" ("_position" v12) ("_position" v3))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>DenotCompleteFSet.join" ("_position" v1)
###           ("_position" v2))
###         ("_applC" ("_position" Some) ("_position" v12))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValuesFSet.val_le" ("_position" v1) ("_position" v3)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>ValuesFSet.env_le" ("_position" v2)
###             ("_position" v3))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValuesFSet.val_le" ("_position" v12) ("_position" v3))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>DenotCompleteFSet.join" ("_position" v1)
###           ("_position" v2))
###         ("_applC" ("_position" Some) ("_position" v12))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValuesFSet.env_le" ("_position" v1) ("_position" v3)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>ValuesFSet.val_le" ("_position" v2)
###             ("_position" v3))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValuesFSet.val_le" ("_position" v12) ("_position" v3))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>DenotCompleteFSet.join" ("_position" v1)
###           ("_position" v2))
###         ("_applC" ("_position" Some) ("_position" v12))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValuesFSet.val_le" ("_position" v1) ("_position" v3)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>ValuesFSet.val_le" ("_position" v2)
###             ("_position" v3))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValuesFSet.val_le" ("_position" v12) ("_position" v3))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>DenotCompleteFSet.join" ("_position" v1)
###           ("_position" v2))
###         ("_applC" ("_position" Some) ("_position" v12))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValuesFSet.env_le" ("_position" v1) ("_position" v3)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>ValuesFSet.env_le" ("_position" v2)
###             ("_position" v3))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValuesFSet.env_le" ("_position" v12) ("_position" v3))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>DenotCompleteFSet.join" ("_position" v1)
###           ("_position" v2))
###         ("_applC" ("_position" Some) ("_position" v12))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValuesFSet.val_le" ("_position" v1) ("_position" v3)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>ValuesFSet.env_le" ("_position" v2)
###             ("_position" v3))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValuesFSet.env_le" ("_position" v12) ("_position" v3))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>DenotCompleteFSet.join" ("_position" v1)
###           ("_position" v2))
###         ("_applC" ("_position" Some) ("_position" v12))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValuesFSet.env_le" ("_position" v1) ("_position" v3)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>ValuesFSet.val_le" ("_position" v2)
###             ("_position" v3))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValuesFSet.env_le" ("_position" v12) ("_position" v3))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>DenotCompleteFSet.join" ("_position" v1)
###           ("_position" v2))
###         ("_applC" ("_position" Some) ("_position" v12))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValuesFSet.val_le" ("_position" v1) ("_position" v3)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>ValuesFSet.val_le" ("_position" v2)
###             ("_position" v3))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValuesFSet.env_le" ("_position" v12) ("_position" v3))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 58 of "$AFP/Decl_Sem_Fun_PL/DenotCompleteFSet.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" v1) ("_position" v2))
###     ("\<^const>Set.member" ("_position" v2)
###       ("\<^const>SmallStepLam.reduce"
###         ("_applC" ("_position" E)
###           ("_cargs"
###             ("_applC" ("_position" subst)
###               ("_cargs" ("_position" y)
###                 ("_cargs" ("_position" v) ("_position" e'))))
###             ("\<^const>List.list.Cons"
###               ("_tuple" ("_position" x) ("_tuple_arg" ("_position" v1)))
###               ("_position" \<rho>))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" \<rho>') ("_position" v'))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" v')
###               ("_applC" ("_position" E)
###                 ("_cargs" ("_position" v) ("\<^const>List.list.Nil"))))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_applC" ("_position" E)
###                   ("_cargs" ("_position" e') ("_position" \<rho>'))))
###               ("\<^const>ValuesFSet.env_eq" ("_position" \<rho>')
###                 ("\<^const>List.list.Cons"
###                   ("_tuple" ("_position" y) ("_tuple_arg" ("_position" v')))
###                   ("\<^const>List.list.Cons"
###                     ("_tuple" ("_position" x)
###                       ("_tuple_arg" ("_position" v1)))
###                     ("_position" \<rho>)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" v1) ("_position" v2))
###     ("\<^const>HOL.implies"
###       ("\<^const>Set.member" ("_position" v2)
###         ("_applC" ("_position" E)
###           ("_cargs"
###             ("_applC" ("_position" subst)
###               ("_cargs" ("_position" y)
###                 ("_cargs" ("_position" v) ("_position" e'))))
###             ("\<^const>List.list.Cons"
###               ("_tuple" ("_position" x) ("_tuple_arg" ("_position" v1)))
###               ("_position" \<rho>)))))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" \<rho>') ("_position" v'))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" v')
###             ("_applC" ("_position" E)
###               ("_cargs" ("_position" v) ("\<^const>List.list.Nil"))))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" v2)
###               ("_applC" ("_position" E)
###                 ("_cargs" ("_position" e') ("_position" \<rho>'))))
###             ("\<^const>ValuesFSet.env_eq" ("_position" \<rho>')
###               ("\<^const>List.list.Cons"
###                 ("_tuple" ("_position" y) ("_tuple_arg" ("_position" v')))
###                 ("\<^const>List.list.Cons"
###                   ("_tuple" ("_position" x) ("_tuple_arg" ("_position" v1)))
###                   ("_position" \<rho>))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 271 of "$AFP/Decl_Sem_Fun_PL/DenotCompleteFSet.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies" ("_position" e) ("_position" e')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStepLam.reduce" ("_position" e) ("_position" e')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 304 of "$AFP/Decl_Sem_Fun_PL/DenotCompleteFSet.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies" ("_position" e) ("_position" e')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStepLam.reduce" ("_position" e) ("_position" e')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.DenotCompleteFSet"
### 0.153s elapsed time, 0.217s cpu time, 0.079s GC time
Loading theory "Draft.DenotCongruenceFSet" (required by "Draft.DenotCongruenceFSetMoreTemplates")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Ambiguous input (line 116 of "$AFP/Decl_Sem_Fun_PL/DenotCongruenceFSet.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("_applC" ("_position" run)
###       ("_cargs"
###         ("_applC" ("_position" plug)
###           ("_cargs" ("_position" C) ("_position" e1)))
###         ("_position" ob)))
###     ("_applC" ("_position" run)
###       ("_cargs"
###         ("_applC" ("_position" plug)
###           ("_cargs" ("_position" C) ("_position" e2)))
###         ("_position" ob)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStepLam.reduce"
###     ("_applC" ("_position" run)
###       ("_cargs"
###         ("_applC" ("_position" plug)
###           ("_cargs" ("_position" C) ("_position" e1)))
###         ("_position" ob)))
###     ("_applC" ("_position" run)
###       ("_cargs"
###         ("_applC" ("_position" plug)
###           ("_cargs" ("_position" C) ("_position" e2)))
###         ("_position" ob)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 158 of "$AFP/Decl_Sem_Fun_PL/DenotCongruenceFSet.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>ctx_equiv" ("_position" e) ("_position" e'))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" C) ("_position" ob))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" FV)
###             ("_applC" ("_position" plug)
###               ("_cargs" ("_position" C) ("_position" e))))
###           ("\<^const>Set.empty"))
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" FV)
###             ("_applC" ("_position" plug)
###               ("_cargs" ("_position" C) ("_position" e'))))
###           ("\<^const>Set.empty")))
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" run)
###           ("_cargs"
###             ("_applC" ("_position" plug)
###               ("_cargs" ("_position" C) ("_position" e)))
###             ("_position" ob)))
###         ("_applC" ("_position" run)
###           ("_cargs"
###             ("_applC" ("_position" plug)
###               ("_cargs" ("_position" C) ("_position" e')))
###             ("_position" ob)))))))
### ("\<^const>Pure.eq" ("\<^fixed>ctx_equiv" ("_position" e) ("_position" e'))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" C) ("_position" ob))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" FV)
###           ("_applC" ("_position" plug)
###             ("_cargs" ("_position" C) ("_position" e))))
###         ("\<^const>Set.empty"))
###       ("\<^const>HOL.eq"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" FV)
###             ("_applC" ("_position" plug)
###               ("_cargs" ("_position" C) ("_position" e'))))
###           ("\<^const>SmallStepLam.reduce" ("\<^const>Set.empty")
###             ("_applC" ("_position" run)
###               ("_cargs"
###                 ("_applC" ("_position" plug)
###                   ("_cargs" ("_position" C) ("_position" e)))
###                 ("_position" ob)))))
###         ("_applC" ("_position" run)
###           ("_cargs"
###             ("_applC" ("_position" plug)
###               ("_cargs" ("_position" C) ("_position" e')))
###             ("_position" ob)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.DenotCongruenceFSet"
### 1.482s elapsed time, 2.274s cpu time, 1.085s GC time
Loading theory "Draft.DenotCongruenceFSetMoreTemplates"
val templateLemmas =
   [("DenotCongruenceFSet.denot_sound_wrt_ctx_equiv",
     "E ?e1.0 = E ?e2.0 ==> ?e1.0 \<simeq> ?e2.0",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("DenotCongruenceFSet.diverge_denot_empty",
     "[| diverge ?e; FV ?e = {} |] ==> E ?e [] = {}",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 0)),
        template_equation
         (template_app (template_hole 5, template_var 0), template_hole 4)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_hole 1),
         template_hole 0))),
    ("DenotCongruenceFSet.goes_wrong_denot_empty",
     "[| goes_wrong ?e; FV ?e = {} |] ==> E ?e [] = {}",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 0)),
        template_equation
         (template_app (template_hole 5, template_var 0), template_hole 4)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_hole 1),
         template_hole 0))),
    ("DenotCongruenceFSet.congruence",
     "E ?e = E ?e' ==> E (plug ?C ?e) = E (plug ?C ?e')",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 2),
          template_app (template_hole 1, template_var 1))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("DenotCongruenceFSet.e_lam_cong",
     "E ?e = E ?e' ==> E (ELam ?x ?e) = E (ELam ?x ?e')",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 2),
          template_app (template_hole 1, template_var 1))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("DenotCongruenceFSet.denot_empty_diverge",
     "[| E ?e [] = {}; FV ?e = {} |] ==> diverge ?e | goes_wrong ?e",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 8, template_var 0),
            template_hole 7),
          template_hole 6),
        template_equation
         (template_app (template_hole 4, template_var 0), template_hole 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("DenotCongruenceFSet.e_app_cong",
     "[| E ?e1.0 = E ?e1'; E ?e2.0 = E ?e2' |]
      ==> E (EApp ?e1.0 ?e2.0) = E (EApp ?e1' ?e2')",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 3),
          template_app (template_hole 1, template_var 2)),
        template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("DenotCongruenceFSet.e_prim_cong",
     "[| E ?e1.0 = E ?e1'; E ?e2.0 = E ?e2' |]
      ==> E (EPrim ?f ?e1.0 ?e2.0) = E (EPrim ?f ?e1' ?e2')",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 4),
          template_app (template_hole 1, template_var 3)),
        template_equation
         (template_app (template_hole 1, template_var 2),
          template_app (template_hole 1, template_var 1))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 4),
             template_var 2)),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3),
             template_var 1))))),
    ("DenotCongruenceFSet.val_ty_observe",
     "[| ?A : E ?v []; ?A : E ?v' []; observe ?v ?ob; isval ?v'; isval ?v |]
      ==> observe ?v' ?ob",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_hole 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_hole 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 0, template_var 1)),
        template_predicate
         (template_app (template_hole 0, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), template_var 0)
           ))),
    ("DenotCongruenceFSet.e_if_cong",
     "[| E ?e1.0 = E ?e1'; E ?e2.0 = E ?e2'; E ?e3.0 = E ?e3' |]
      ==> E (EIf ?e1.0 ?e2.0 ?e3.0) = E (EIf ?e1' ?e2' ?e3')",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 5),
          template_app (template_hole 1, template_var 4)),
        template_equation
         (template_app (template_hole 1, template_var 3),
          template_app (template_hole 1, template_var 2)),
        template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 5),
               template_var 3),
             template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 2),
             template_var 0))))),
    ("DenotCongruenceFSet.soundness_wrt_ctx_equiv_aux",
     "[| E ?e1.0 = E ?e2.0; FV (plug ?C ?e1.0) = {};
         FV (plug ?C ?e2.0) = {}; plug ?C ?e1.0 \<Down> ?ob |]
      ==> plug ?C ?e2.0 \<Down> ?ob",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 3),
          template_app (template_hole 5, template_var 2)),
        template_equation
         (template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 3)),
          template_hole 1),
        template_equation
         (template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 2)),
          template_hole 1),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 0,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 3)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 2)),
             template_var 0)
           )))]:
   (string * thm * template) list
### theory "Draft.DenotCongruenceFSetMoreTemplates"
### 0.389s elapsed time, 0.543s cpu time, 0.056s GC time
val it = (): unit
