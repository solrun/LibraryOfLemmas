Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SystemFMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.SystemFMoreTemplates" via "Draft.SystemF" via "HOL-Library.FSet" via "HOL-Library.Countable")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SystemFMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SystemFMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.129s elapsed time, 0.524s cpu time, 0.049s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SystemFMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.258s elapsed time, 1.038s cpu time, 0.049s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SystemFMoreTemplates" via "Draft.ExtrEqs")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.408s elapsed time, 1.626s cpu time, 0.145s GC time
### theory "HOL-Library.Nat_Bijection"
### 0.411s elapsed time, 1.630s cpu time, 0.145s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SystemFMoreTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Countable" (required by "Draft.SystemFMoreTemplates" via "Draft.SystemF" via "HOL-Library.FSet")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### Additional type variable(s) in locale specification "countable": 'a
consts
  shift :: "'a list => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
### theory "HOL-Library.BigO"
### 1.009s elapsed time, 3.833s cpu time, 0.906s GC time
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.122s elapsed time, 4.055s cpu time, 0.853s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.338s elapsed time, 4.539s cpu time, 0.928s GC time
Loading theory "HOL-Library.FSet" (required by "Draft.SystemFMoreTemplates" via "Draft.SystemF")
instantiation
  fset :: (finite) finite
instantiation
  fset :: (type) {minus,bounded_lattice_bot,distrib_lattice}
  inf_fset == inf :: 'a fset => 'a fset => 'a fset
  bot_fset == bot :: 'a fset
  sup_fset == sup :: 'a fset => 'a fset => 'a fset
  less_eq_fset == less_eq :: 'a fset => 'a fset => bool
  less_fset == less :: 'a fset => 'a fset => bool
  minus_fset == minus :: 'a fset => 'a fset => 'a fset
instantiation
  fset :: (equal) equal
  equal_fset == equal_class.equal :: 'a fset => 'a fset => bool
instantiation
  fset :: (type) conditionally_complete_lattice
  Inf_fset == Inf :: 'a fset set => 'a fset
  Sup_fset == Sup :: 'a fset set => 'a fset
Found termination order: "size <*mlex*> {}"
instantiation
  fset :: (finite) complete_lattice
  top_fset == top :: 'a fset
instantiation
  fset :: (finite) complete_boolean_algebra
  uminus_fset == uminus :: 'a fset => 'a fset
### theory "HOL-Library.Tree"
### 1.981s elapsed time, 6.416s cpu time, 1.129s GC time
Loading theory "Draft.Templates" (required by "Draft.SystemFMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.126s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SystemFMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.533s elapsed time, 1.126s cpu time, 0.131s GC time
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
locale comp_fun_idem
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_idem f"
locale comm_monoid_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_fset (\<^bold>*) \<^bold>1"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### Cannot skip proof of schematic goal statement
locale semilattice_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
  assumes "semilattice_fset (\<^bold>*)"
locale semilattice_order_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
  assumes "semilattice_order_fset (\<^bold>*) (\<^bold>\<le>) (\<^bold><)"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  fset :: (type) size
  size_fset == size :: 'a fset => nat
instantiation
  fset :: (exhaustive) exhaustive
  exhaustive_fset == exhaustive_class.exhaustive ::
    ('a fset => (bool * term list) option)
    => natural => (bool * term list) option
Found termination order: "(%p. nat_of_natural (snd p)) <*mlex*> {}"
instantiation
  fset :: (full_exhaustive) full_exhaustive
  full_exhaustive_fset == full_exhaustive_class.full_exhaustive ::
    ('a fset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Found termination order: "(%p. nat_of_natural (snd p)) <*mlex*> {}"
instantiation
  fset :: (random) random
  random_fset == random_class.random ::
    natural
    => natural * natural => ('a fset * (unit => term)) * natural * natural
### Additional type variable(s) in specification of "random_aux_fset_rel": 'a
### Additional type variable(s) in specification of "random_aux_fset_dom": 'a
Found termination order: "(%p. nat_of_natural (fst p)) <*mlex*> {}"
### theory "HOL-Library.FSet"
### 2.036s elapsed time, 3.205s cpu time, 0.387s GC time
Loading theory "Draft.SystemF" (required by "Draft.SystemFMoreTemplates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Ignoring duplicate rewrite rule:
### val_le (Abs None) (Abs (Some ?vb1)) == False
### Ignoring duplicate rewrite rule:
### val_le (val.Fun ?va1) Wrong == False
### Ignoring duplicate rewrite rule:
### val_le (Abs ?va1) Wrong == False
Proofs for inductive predicate(s) "iterate"
  Proving monotonicity ...
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Proofs for inductive predicate(s) "well_typed"
  Proving monotonicity ...
Proofs for inductive predicate(s) "wfenv"
  Proving monotonicity ...
### theory "Draft.SystemF"
### 2.551s elapsed time, 3.376s cpu time, 0.943s GC time
Loading theory "Draft.SystemFMoreTemplates"
val templateLemmas =
   [("SystemF.less_refl", "?v \<sqsubseteq> ?v",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("SystemF.wrong_not_in_T", "Wrong ~: T ?\<tau> ?\<eta>",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))
             )
         )),
    ("SystemF.shift_zero_id", "SystemF.shift 0 ?c ?\<tau> = ?\<tau>",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 1),
         template_var 0),
       template_var 0)),
    ("SystemF.Enat", "E (ENat ?n) ?\<rho> = return (VNat ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 1)))),
    ("SystemF.wfenv_good_ctx",
     "\<turnstile> ?\<rho>,?\<eta> : ?\<Gamma> ==> good_ctx ?\<Gamma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("SystemF.Evar", "E (EVar ?n) ?\<rho> = return (?\<rho> ! ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("SystemF.Efix",
     "E (EFix ?\<tau> ?e) ?\<rho> = Collect (iterate (E ?e) ?\<rho>)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 1)),
           template_var 0)))),
    ("SystemF.Tnat", "T TNat ?\<rho> = {v. EX n. v = VNat n}",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4), template_var 0),
       template_app (template_hole 3, t_empty))),
    ("SystemF.shift_cons_preserves_T",
     "T ?\<tau> ?\<rho> =
      T (SystemF.shift (Suc 0) 0 ?\<tau>) (?b # ?\<rho>)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2), template_var 1),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1)),
               template_hole 1),
             template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("SystemF.shift_append_preserves_T",
     "T ?\<tau> ?\<rho>3.0 =
      T (SystemF.shift (length ?\<rho>2.0) 0 ?\<tau>)
       (?\<rho>2.0 @ ?\<rho>3.0)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2), template_var 1),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0)),
               template_hole 1),
             template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("SystemF.less_trans",
     "[| ?v1.0 \<sqsubseteq> ?v2.0; ?v2.0 \<sqsubseteq> ?v3.0 |]
      ==> ?v1.0 \<sqsubseteq> ?v3.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("SystemF.compose_shift",
     "SystemF.shift (?j + ?k) ?c ?\<tau> =
      SystemF.shift ?j ?c (SystemF.shift ?k ?c ?\<tau>)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 1),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("SystemF.less_wrong",
     "[| ?v \<sqsubseteq> Wrong; ?v = Wrong ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            ),
        template_implication
         ([template_equation (template_var 1, template_hole 1)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("SystemF.nth_append1",
     "?n < length ?\<rho>1.0 ==>
      (?\<rho>1.0 @ ?\<rho>2.0) ! ?n = ?\<rho>1.0 ! ?n",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 2)))),
    ("SystemF.less_nat",
     "[| ?v \<sqsubseteq> VNat ?n; ?v = VNat ?n ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            ),
        template_implication
         ([template_equation
            (template_var 2,
             template_app (template_hole 1, template_var 1))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("SystemF.wtnat_inv",
     "[| ?\<Gamma> \<turnstile> ENat ?n : ?\<tau>; ?\<tau> = TNat ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_app (template_hole 2, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 1, template_hole 0)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("SystemF.T_down_closed",
     "[| ?v : T ?\<tau> ?\<eta>; ?v' \<sqsubseteq> ?v |]
      ==> ?v' : T ?\<tau> ?\<eta>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))
           ))),
    ("SystemF.shift_append_preserves_T_aux",
     "T ?\<tau> (?\<rho>1.0 @ ?\<rho>3.0) =
      T (SystemF.shift (length ?\<rho>2.0) (length ?\<rho>1.0) ?\<tau>)
       (?\<rho>1.0 @ ?\<rho>2.0 @ ?\<rho>3.0)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 3),
         template_app
          (template_app (template_hole 2, template_var 2), template_var 1)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_app (template_hole 0, template_var 2)),
             template_var 3)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1))))),
    ("SystemF.drop_shift_preserves_T",
     "?k <= length ?\<rho> ==>
      T ?\<tau> (drop ?k ?\<rho>) = T (SystemF.shift ?k 0 ?\<tau>) ?\<rho>",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_hole 0),
               template_var 0)),
           template_var 1)))),
    ("SystemF.nth_append2",
     "length ?\<rho>1.0 <= ?n ==>
      (?\<rho>1.0 @ ?\<rho>2.0) ! ?n =
      ?\<rho>2.0 ! (?n - length ?\<rho>1.0)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_var 2),
          template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app (template_hole 4, template_var 2)))))),
    ("SystemF.welltyped_dont_go_wrong",
     "[| ?\<Gamma> \<turnstile> ?e : ?\<tau>;
         \<turnstile> ?\<rho>,?\<eta> : ?\<Gamma> |]
      ==> E ?e ?\<rho> <= T ?\<tau> ?\<eta>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0),
              template_var 4)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("SystemF.wtvar_inv",
     "[| ?\<Gamma> \<turnstile> EVar ?n : ?\<tau>;
         lookup ?\<Gamma> ?n = Some ?\<tau> ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_app (template_hole 3, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_app (template_hole 0, template_var 1))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("SystemF.compositionality",
     "T ?\<tau>
       (?\<eta>1.0 @ T ?\<sigma> (?\<eta>1.0 @ ?\<eta>2.0) # ?\<eta>2.0) =
      T (subst (length ?\<eta>1.0) ?\<sigma> ?\<tau>)
       (?\<eta>1.0 @ ?\<eta>2.0)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 3),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 0))),
             template_var 0))),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 1),
             template_var 3)),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0)))),
    ("SystemF.Einst",
     "E (EInst ?e ?\<tau>) ?\<rho> =
      errset_bind (E ?e ?\<rho>)
       (case_val (%nat. return Wrong) (%fset. return Wrong)
         (case_option {} return) (return Wrong))",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 7, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 4, t_empty), t_empty),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_hole 3)),
           template_app (template_hole 3, template_hole 2))))),
    ("SystemF.T_eta",
     "{v. EX v'.
             v' : T ?\<sigma> ?\<eta> & v \<sqsubseteq> v' & v ~= Wrong} =
      T ?\<sigma> ?\<eta>",
     template_equation
      (template_app (template_hole 8, t_empty),
       template_app
        (template_app (template_hole 4, template_var 1), template_var 0))),
    ("SystemF.less_fun",
     "[| ?v \<sqsubseteq> val.Fun ?f;
         !!f'. [| ?v = val.Fun f'; fset f' <= fset ?f |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("SystemF.wtabs_inv",
     "[| ?\<Gamma> \<turnstile> EAbs ?e : ?\<tau>;
         !!\<tau>.
            [| ?\<tau> = Forall \<tau>;
               push_tyvar ?\<Gamma> \<turnstile> ?e : \<tau> |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_app (template_hole 4, template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("SystemF.lookup_wfenv",
     "[| \<turnstile> ?\<rho>,?\<eta> : ?\<Gamma>;
         lookup ?\<Gamma> ?n = Some ?\<tau> |]
      ==> EX v. ?\<rho> ! ?n = v & v : T ?\<tau> ?\<eta>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 2), template_var 1),
          template_app (template_hole 6, template_var 0))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("SystemF.wtapp_inv",
     "[| ?\<Gamma> \<turnstile> EApp ?e ?e' : ?\<tau>;
         !!\<sigma>.
            [| ?\<Gamma> \<turnstile> ?e : \<sigma> \<rightarrow> ?\<tau>;
               ?\<Gamma> \<turnstile> ?e' : \<sigma> |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("SystemF.Tall",
     "T (Forall ?\<tau>) ?\<rho> =
      {v. (EX v'.
              v = Abs (Some v') & (ALL V. v' : T ?\<tau> (V # ?\<rho>))) |
          v = Abs None}",
     template_equation
      (template_app
        (template_app
          (template_hole 12,
           template_app (template_hole 11, template_var 1)),
         template_var 0),
       template_app (template_hole 10, t_empty))),
    ("SystemF.Tvar",
     "T (TVar ?n) ?\<rho> =
      (if ?n < length ?\<rho>
       then {v. EX v'. v' : ?\<rho> ! ?n & v \<sqsubseteq> v' & v ~= Wrong}
       else {})",
     template_equation
      (template_app
        (template_app
          (template_hole 14,
           template_app (template_hole 13, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app (template_hole 11, template_var 1),
               template_app (template_hole 10, template_var 0))),
           template_app (template_hole 9, t_empty)),
         template_hole 0))),
    ("SystemF.wtinst_inv",
     "[| ?\<Gamma> \<turnstile> EInst ?e ?\<sigma> : ?\<tau>;
         !!\<tau>.
            [| ?\<tau> = subst 0 ?\<sigma> \<tau>;
               ?\<Gamma> \<turnstile> ?e : Forall \<tau> |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 4),
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("SystemF.wtlam_inv",
     "[| ?\<Gamma> \<turnstile> ELam ?\<sigma> ?e : ?\<tau>;
         !!\<tau>.
            [| ?\<tau> = ?\<sigma> \<rightarrow> \<tau>;
               push_ty ?\<sigma> ?\<Gamma> \<turnstile> ?e : \<tau> |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("SystemF.Eabs",
     "E (EAbs ?e) ?\<rho> =
      {v. (EX v'. v = Abs (Some v') & v' : E ?e ?\<rho>) |
          v = Abs None & E ?e ?\<rho> = {}}",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app (template_hole 10, template_var 1)),
         template_var 0),
       template_app (template_hole 9, t_empty))),
    ("SystemF.iterate_sound",
     "[| iterate ?Ee ?\<rho> ?v;
         ALL v.
            v : T (?\<sigma> \<rightarrow> ?\<tau>) ?\<eta> -->
            ?Ee (v # ?\<rho>)
            <= T (?\<sigma> \<rightarrow> ?\<tau>) ?\<eta> |]
      ==> ?v : T (?\<sigma> \<rightarrow> ?\<tau>) ?\<eta>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 3),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1)),
               template_var 0))
           ))),
    ("SystemF.Elam",
     "E (ELam ?\<tau> ?e) ?\<rho> =
      {val.Fun f |f.
       ALL v1 v2'.
          (v1, v2') : fset f -->
          (EX v2. v2 : E ?e (v1 # ?\<rho>) & v2' \<sqsubseteq> v2)}",
     template_equation
      (template_app
        (template_app
          (template_hole 15,
           template_app
            (template_app (template_hole 14, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 13, t_empty))),
    ("SystemF.Eapp",
     "E (EApp ?e1.0 ?e2.0) ?\<rho> =
      apply_fun (E ?e1.0 ?\<rho>) (E ?e2.0 ?\<rho>)",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 10, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 11, template_var 2),
             template_var 0)),
         t_empty))),
    ("SystemF.wtfix_inv",
     "[| ?\<Gamma> \<turnstile> EFix ?\<sigma> ?e : ?\<tau>;
         !!\<sigma> \<tau>.
            [| ?\<sigma> = \<sigma> \<rightarrow> \<tau>;
               ?\<tau> = \<sigma> \<rightarrow> \<tau>;
               push_ty (\<sigma> \<rightarrow> \<tau>)
                ?\<Gamma> \<turnstile> ?e : \<sigma> \<rightarrow> \<tau> |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("SystemF.Tfun",
     "T (?\<sigma> \<rightarrow> ?\<tau>) ?\<rho> =
      {val.Fun f |f.
       ALL v1 v2'.
          (v1, v2') : fset f -->
          v1 : T ?\<sigma> ?\<rho> -->
          (EX v2. v2 : T ?\<tau> ?\<rho> & v2' \<sqsubseteq> v2)}",
     template_equation
      (template_app
        (template_app
          (template_hole 14,
           template_app
            (template_app (template_hole 13, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 12, t_empty))),
    ("SystemF.fun_app",
     "[| ?V <= T (?m \<rightarrow> ?n) ?\<eta>; ?V' <= T ?m ?\<eta> |]
      ==> apply_fun ?V ?V' <= T ?n ?\<eta>",
     template_implication
      ([template_inequation
         (less_equals, template_var 4,
          template_app
           (template_app
             (template_hole 11,
              template_app
               (template_app (template_hole 10, template_var 3),
                template_var 2)),
            template_var 1)),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 11, template_var 3),
            template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 9, template_var 4), t_empty),
         template_app
          (template_app (template_hole 11, template_var 2),
           template_var 1))))]:
   (string * thm * template) list
### theory "Draft.SystemFMoreTemplates"
### 0.686s elapsed time, 1.481s cpu time, 0.931s GC time
val it = (): unit
