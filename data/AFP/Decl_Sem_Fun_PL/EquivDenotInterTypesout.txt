Loading theory "Draft.Lambda" (required by "Draft.EquivDenotInterTypesMoreTemplates" via "Draft.EquivDenotInterTypes" via "Draft.InterTypeSystem")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.EquivDenotInterTypesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.EquivDenotInterTypesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.EquivDenotInterTypesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.139s elapsed time, 0.569s cpu time, 0.044s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.EquivDenotInterTypesMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.248s elapsed time, 1.004s cpu time, 0.044s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.EquivDenotInterTypesMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.334s elapsed time, 1.325s cpu time, 0.153s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.EquivDenotInterTypesMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.978s elapsed time, 3.686s cpu time, 0.902s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Lambda"
### 1.285s elapsed time, 4.888s cpu time, 0.946s GC time
Loading theory "Draft.InterTypeSystem" (required by "Draft.EquivDenotInterTypesMoreTemplates" via "Draft.EquivDenotInterTypes")
Loading theory "Draft.Values" (required by "Draft.EquivDenotInterTypesMoreTemplates" via "Draft.EquivDenotInterTypes" via "Draft.DeclSemAsDenot")
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.084s elapsed time, 4.071s cpu time, 0.881s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "val_le", "fun_le"
  Proving monotonicity ...
### Ambiguous input (line 32 of "$AFP/Decl_Sem_Fun_PL/Values.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^const>Values.val_le" ("_position" \<rho>) ("_position" \<rho>'))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" x) ("_position" v))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" lookup)
###           ("_cargs" ("_position" \<rho>) ("_position" x)))
###         ("_applC" ("_position" Some) ("_position" v)))
###       ("\<^const>HOL.Ex_binder" ("_position" v')
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" lookup)
###               ("_cargs" ("_position" \<rho>') ("_position" x)))
###             ("_applC" ("_position" Some) ("_position" v')))
###           ("\<^fixed>env_le" ("_position" v) ("_position" v')))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>env_le" ("_position" \<rho>) ("_position" \<rho>'))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" x) ("_position" v))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" lookup)
###           ("_cargs" ("_position" \<rho>) ("_position" x)))
###         ("_applC" ("_position" Some) ("_position" v)))
###       ("\<^const>HOL.Ex_binder" ("_position" v')
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" lookup)
###               ("_cargs" ("_position" \<rho>') ("_position" x)))
###             ("_applC" ("_position" Some) ("_position" v')))
###           ("\<^fixed>env_le" ("_position" v) ("_position" v')))))))
### ("\<^const>Pure.eq"
###   ("\<^const>Values.val_le" ("_position" \<rho>) ("_position" \<rho>'))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" x) ("_position" v))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" lookup)
###           ("_cargs" ("_position" \<rho>) ("_position" x)))
###         ("_applC" ("_position" Some) ("_position" v)))
###       ("\<^const>HOL.Ex_binder" ("_position" v')
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" lookup)
###               ("_cargs" ("_position" \<rho>') ("_position" x)))
###             ("_applC" ("_position" Some) ("_position" v')))
###           ("\<^const>Values.val_le" ("_position" v) ("_position" v')))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>env_le" ("_position" \<rho>) ("_position" \<rho>'))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" x) ("_position" v))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" lookup)
###           ("_cargs" ("_position" \<rho>) ("_position" x)))
###         ("_applC" ("_position" Some) ("_position" v)))
###       ("\<^const>HOL.Ex_binder" ("_position" v')
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" lookup)
###               ("_cargs" ("_position" \<rho>') ("_position" x)))
###             ("_applC" ("_position" Some) ("_position" v')))
###           ("\<^const>Values.val_le" ("_position" v) ("_position" v')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Values"
### 0.392s elapsed time, 1.331s cpu time, 0.173s GC time
Loading theory "Draft.DeclSemAsDenot" (required by "Draft.EquivDenotInterTypesMoreTemplates" via "Draft.EquivDenotInterTypes")
Loading theory "Draft.ValueProps" (required by "Draft.EquivDenotInterTypesMoreTemplates" via "Draft.EquivDenotInterTypes" via "Draft.DenotLam5")
### Ambiguous input (line 9 of "$AFP/Decl_Sem_Fun_PL/DeclSemAsDenot.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" E)
###       ("_cargs" ("_applC" ("_position" EVar) ("_position" x))
###         ("_position" \<rho>)))
###     ("_Coll" ("_position" v)
###       ("\<^const>HOL.Ex_binder" ("_position" v')
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" lookup)
###               ("_cargs" ("_position" \<rho>) ("_position" x)))
###             ("_applC" ("_position" Some) ("_position" v')))
###           ("\<^const>Values.env_le" ("_position" v) ("_position" v')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" E)
###       ("_cargs" ("_applC" ("_position" EVar) ("_position" x))
###         ("_position" \<rho>)))
###     ("_Coll" ("_position" v)
###       ("\<^const>HOL.Ex_binder" ("_position" v')
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" lookup)
###               ("_cargs" ("_position" \<rho>) ("_position" x)))
###             ("_applC" ("_position" Some) ("_position" v')))
###           ("\<^const>Values.val_le" ("_position" v) ("_position" v')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 8 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.val_le" ("_applC" ("_position" VFun) ("_position" t1))
###     ("_applC" ("_position" VFun) ("_position" t2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.env_le" ("_applC" ("_position" VFun) ("_position" t1))
###     ("_applC" ("_position" VFun) ("_position" t2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 9 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.val_le" ("_applC" ("_position" VFun) ("_position" t2))
###     ("_applC" ("_position" VNat) ("_position" x1))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.env_le" ("_applC" ("_position" VFun) ("_position" t2))
###     ("_applC" ("_position" VNat) ("_position" x1))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 12 of "$AFP/Decl_Sem_Fun_PL/DeclSemAsDenot.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" E)
###       ("_cargs"
###         ("_applC" ("_position" EApp)
###           ("_cargs" ("_position" e1) ("_position" e2)))
###         ("_position" \<rho>)))
###     ("_Coll" ("_position" v3)
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" f)
###           ("_idts" ("_position" v2)
###             ("_idts" ("_position" v2') ("_position" v3'))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" VFun) ("_position" f))
###             ("_applC" ("_position" E)
###               ("_cargs" ("_position" e1) ("_position" \<rho>))))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" v2)
###               ("_applC" ("_position" E)
###                 ("_cargs" ("_position" e2) ("_position" \<rho>))))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" v2')
###                   ("_tuple_arg" ("_position" v3')))
###                 ("_applC" ("_position" set) ("_position" f)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Values.env_le" ("_position" v2')
###                   ("_position" v2))
###                 ("\<^const>Values.env_le" ("_position" v3)
###                   ("_position" v3'))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" E)
###       ("_cargs"
###         ("_applC" ("_position" EApp)
###           ("_cargs" ("_position" e1) ("_position" e2)))
###         ("_position" \<rho>)))
###     ("_Coll" ("_position" v3)
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" f)
###           ("_idts" ("_position" v2)
###             ("_idts" ("_position" v2') ("_position" v3'))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" VFun) ("_position" f))
###             ("_applC" ("_position" E)
###               ("_cargs" ("_position" e1) ("_position" \<rho>))))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" v2)
###               ("_applC" ("_position" E)
###                 ("_cargs" ("_position" e2) ("_position" \<rho>))))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" v2')
###                   ("_tuple_arg" ("_position" v3')))
###                 ("_applC" ("_position" set) ("_position" f)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Values.val_le" ("_position" v2')
###                   ("_position" v2))
###                 ("\<^const>Values.env_le" ("_position" v3)
###                   ("_position" v3'))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" E)
###       ("_cargs"
###         ("_applC" ("_position" EApp)
###           ("_cargs" ("_position" e1) ("_position" e2)))
###         ("_position" \<rho>)))
###     ("_Coll" ("_position" v3)
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" f)
###           ("_idts" ("_position" v2)
###             ("_idts" ("_position" v2') ("_position" v3'))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" VFun) ("_position" f))
###             ("_applC" ("_position" E)
###               ("_cargs" ("_position" e1) ("_position" \<rho>))))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" v2)
###               ("_applC" ("_position" E)
###                 ("_cargs" ("_position" e2) ("_position" \<rho>))))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" v2')
###                   ("_tuple_arg" ("_position" v3')))
###                 ("_applC" ("_position" set) ("_position" f)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Values.env_le" ("_position" v2')
###                   ("_position" v2))
###                 ("\<^const>Values.val_le" ("_position" v3)
###                   ("_position" v3'))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" E)
###       ("_cargs"
###         ("_applC" ("_position" EApp)
###           ("_cargs" ("_position" e1) ("_position" e2)))
###         ("_position" \<rho>)))
###     ("_Coll" ("_position" v3)
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" f)
###           ("_idts" ("_position" v2)
###             ("_idts" ("_position" v2') ("_position" v3'))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" VFun) ("_position" f))
###             ("_applC" ("_position" E)
###               ("_cargs" ("_position" e1) ("_position" \<rho>))))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" v2)
###               ("_applC" ("_position" E)
###                 ("_cargs" ("_position" e2) ("_position" \<rho>))))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" v2')
###                   ("_tuple_arg" ("_position" v3')))
###                 ("_applC" ("_position" set) ("_position" f)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Values.val_le" ("_position" v2')
###                   ("_position" v2))
###                 ("\<^const>Values.val_le" ("_position" v3)
###                   ("_position" v3'))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 11 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.val_le" ("_position" v)
###     ("_applC" ("_position" VNat) ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.env_le" ("_position" v)
###     ("_applC" ("_position" VNat) ("_position" n))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 12 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.val_le" ("_applC" ("_position" VNat) ("_position" n))
###     ("_position" v)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.env_le" ("_applC" ("_position" VNat) ("_position" n))
###     ("_position" v)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 13 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.val_le" ("_applC" ("_position" VFun) ("_position" t))
###     ("_position" v)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.env_le" ("_applC" ("_position" VFun) ("_position" t))
###     ("_position" v)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 14 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.val_le" ("_position" v)
###     ("_applC" ("_position" VFun) ("_position" t))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.env_le" ("_position" v)
###     ("_applC" ("_position" VFun) ("_position" t))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Ambiguous input (line 34 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" v) ("_position" t))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" n)
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" val_size) ("_position" v))
###           ("_applC" ("_position" fun_size) ("_position" t))))
###       ("\<^const>HOL.conj"
###         ("\<^const>Values.val_le" ("_position" v) ("_position" v))
###         ("\<^const>Values.fun_le" ("_position" t) ("_position" t))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" v) ("_position" t))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" n)
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" val_size) ("_position" v))
###           ("_applC" ("_position" fun_size) ("_position" t))))
###       ("\<^const>HOL.conj"
###         ("\<^const>Values.env_le" ("_position" v) ("_position" v))
###         ("\<^const>Values.fun_le" ("_position" t) ("_position" t))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 73 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.val_le" ("_position" v) ("_position" v)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.env_le" ("_position" v) ("_position" v)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 78 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" val_eq)
###     ("_cargs" ("_position" v1) ("_position" v2)))
###   ("\<^const>HOL.conj"
###     ("\<^const>Values.env_le" ("_position" v1) ("_position" v2))
###     ("\<^const>Values.env_le" ("_position" v2) ("_position" v1))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" val_eq)
###     ("_cargs" ("_position" v1) ("_position" v2)))
###   ("\<^const>HOL.conj"
###     ("\<^const>Values.val_le" ("_position" v1) ("_position" v2))
###     ("\<^const>Values.env_le" ("_position" v2) ("_position" v1))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" val_eq)
###     ("_cargs" ("_position" v1) ("_position" v2)))
###   ("\<^const>HOL.conj"
###     ("\<^const>Values.env_le" ("_position" v1) ("_position" v2))
###     ("\<^const>Values.val_le" ("_position" v2) ("_position" v1))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" val_eq)
###     ("_cargs" ("_position" v1) ("_position" v2)))
###   ("\<^const>HOL.conj"
###     ("\<^const>Values.val_le" ("_position" v1) ("_position" v2))
###     ("\<^const>Values.val_le" ("_position" v2) ("_position" v1))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 83 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.val_eq" ("_position" t) ("_position" t')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.val_eq"
###       ("_applC" ("_position" VFun) ("_position" t))
###       ("_applC" ("_position" VFun) ("_position" t')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.fun_eq" ("_position" t) ("_position" t')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.val_eq"
###       ("_applC" ("_position" VFun) ("_position" t))
###       ("_applC" ("_position" VFun) ("_position" t')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.val_eq" ("_position" t) ("_position" t')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.fun_eq"
###       ("_applC" ("_position" VFun) ("_position" t))
###       ("_applC" ("_position" VFun) ("_position" t')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.fun_eq" ("_position" t) ("_position" t')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.fun_eq"
###       ("_applC" ("_position" VFun) ("_position" t))
###       ("_applC" ("_position" VFun) ("_position" t')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 89 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.val_eq" ("_position" v) ("_position" v)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.fun_eq" ("_position" v) ("_position" v)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 92 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.val_eq" ("_position" v1) ("_position" v2)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.val_eq" ("_position" v2) ("_position" v1))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.fun_eq" ("_position" v1) ("_position" v2)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.val_eq" ("_position" v2) ("_position" v1))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.val_eq" ("_position" v1) ("_position" v2)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.fun_eq" ("_position" v2) ("_position" v1))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.fun_eq" ("_position" v1) ("_position" v2)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.fun_eq" ("_position" v2) ("_position" v1))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 96 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" v2) ("_position" t2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" n)
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" val_size) ("_position" v2))
###           ("_applC" ("_position" fun_size) ("_position" t2))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" v1) ("_position" v3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.env_le" ("_position" v1) ("_position" v2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.env_le" ("_position" v2) ("_position" v3))
###               ("\<^const>Values.env_le" ("_position" v1)
###                 ("_position" v3)))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" t1) ("_position" t3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.fun_le" ("_position" t1) ("_position" t2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.fun_le" ("_position" t2) ("_position" t3))
###               ("\<^const>Values.fun_le" ("_position" t1)
###                 ("_position" t3)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" v2) ("_position" t2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" n)
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" val_size) ("_position" v2))
###           ("_applC" ("_position" fun_size) ("_position" t2))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" v1) ("_position" v3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.val_le" ("_position" v1) ("_position" v2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.env_le" ("_position" v2) ("_position" v3))
###               ("\<^const>Values.env_le" ("_position" v1)
###                 ("_position" v3)))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" t1) ("_position" t3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.fun_le" ("_position" t1) ("_position" t2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.fun_le" ("_position" t2) ("_position" t3))
###               ("\<^const>Values.fun_le" ("_position" t1)
###                 ("_position" t3)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" v2) ("_position" t2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" n)
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" val_size) ("_position" v2))
###           ("_applC" ("_position" fun_size) ("_position" t2))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" v1) ("_position" v3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.env_le" ("_position" v1) ("_position" v2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.val_le" ("_position" v2) ("_position" v3))
###               ("\<^const>Values.env_le" ("_position" v1)
###                 ("_position" v3)))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" t1) ("_position" t3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.fun_le" ("_position" t1) ("_position" t2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.fun_le" ("_position" t2) ("_position" t3))
###               ("\<^const>Values.fun_le" ("_position" t1)
###                 ("_position" t3)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" v2) ("_position" t2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" n)
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" val_size) ("_position" v2))
###           ("_applC" ("_position" fun_size) ("_position" t2))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" v1) ("_position" v3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.val_le" ("_position" v1) ("_position" v2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.val_le" ("_position" v2) ("_position" v3))
###               ("\<^const>Values.env_le" ("_position" v1)
###                 ("_position" v3)))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" t1) ("_position" t3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.fun_le" ("_position" t1) ("_position" t2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.fun_le" ("_position" t2) ("_position" t3))
###               ("\<^const>Values.fun_le" ("_position" t1)
###                 ("_position" t3)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" v2) ("_position" t2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" n)
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" val_size) ("_position" v2))
###           ("_applC" ("_position" fun_size) ("_position" t2))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" v1) ("_position" v3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.env_le" ("_position" v1) ("_position" v2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.env_le" ("_position" v2) ("_position" v3))
###               ("\<^const>Values.val_le" ("_position" v1)
###                 ("_position" v3)))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" t1) ("_position" t3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.fun_le" ("_position" t1) ("_position" t2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.fun_le" ("_position" t2) ("_position" t3))
###               ("\<^const>Values.fun_le" ("_position" t1)
###                 ("_position" t3)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" v2) ("_position" t2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" n)
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" val_size) ("_position" v2))
###           ("_applC" ("_position" fun_size) ("_position" t2))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" v1) ("_position" v3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.val_le" ("_position" v1) ("_position" v2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.env_le" ("_position" v2) ("_position" v3))
###               ("\<^const>Values.val_le" ("_position" v1)
###                 ("_position" v3)))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" t1) ("_position" t3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.fun_le" ("_position" t1) ("_position" t2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.fun_le" ("_position" t2) ("_position" t3))
###               ("\<^const>Values.fun_le" ("_position" t1)
###                 ("_position" t3)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" v2) ("_position" t2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" n)
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" val_size) ("_position" v2))
###           ("_applC" ("_position" fun_size) ("_position" t2))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" v1) ("_position" v3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.env_le" ("_position" v1) ("_position" v2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.val_le" ("_position" v2) ("_position" v3))
###               ("\<^const>Values.val_le" ("_position" v1)
###                 ("_position" v3)))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" t1) ("_position" t3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.fun_le" ("_position" t1) ("_position" t2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.fun_le" ("_position" t2) ("_position" t3))
###               ("\<^const>Values.fun_le" ("_position" t1)
###                 ("_position" t3)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" v2) ("_position" t2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" n)
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" val_size) ("_position" v2))
###           ("_applC" ("_position" fun_size) ("_position" t2))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" v1) ("_position" v3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.val_le" ("_position" v1) ("_position" v2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.val_le" ("_position" v2) ("_position" v3))
###               ("\<^const>Values.val_le" ("_position" v1)
###                 ("_position" v3)))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" t1) ("_position" t3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.fun_le" ("_position" t1) ("_position" t2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.fun_le" ("_position" t2) ("_position" t3))
###               ("\<^const>Values.fun_le" ("_position" t1)
###                 ("_position" t3)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 169 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Values.env_le" ("_position" v1) ("_position" v2)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Values.env_le" ("_position" v2) ("_position" v3)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.val_le" ("_position" v1) ("_position" v3))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Values.val_le" ("_position" v1) ("_position" v2)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Values.env_le" ("_position" v2) ("_position" v3)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.val_le" ("_position" v1) ("_position" v3))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Values.env_le" ("_position" v1) ("_position" v2)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Values.val_le" ("_position" v2) ("_position" v3)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.val_le" ("_position" v1) ("_position" v3))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Values.val_le" ("_position" v1) ("_position" v2)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Values.val_le" ("_position" v2) ("_position" v3)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.val_le" ("_position" v1) ("_position" v3))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Values.env_le" ("_position" v1) ("_position" v2)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Values.env_le" ("_position" v2) ("_position" v3)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.env_le" ("_position" v1) ("_position" v3))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Values.val_le" ("_position" v1) ("_position" v2)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Values.env_le" ("_position" v2) ("_position" v3)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.env_le" ("_position" v1) ("_position" v3))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Values.env_le" ("_position" v1) ("_position" v2)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Values.val_le" ("_position" v2) ("_position" v3)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.env_le" ("_position" v1) ("_position" v3))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Values.val_le" ("_position" v1) ("_position" v2)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Values.val_le" ("_position" v2) ("_position" v3)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.env_le" ("_position" v1) ("_position" v3))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 176 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.val_eq" ("_position" v1) ("_position" v2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.fun_eq" ("_position" v1) ("_position" v2)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 176 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.val_eq" ("_position" v2) ("_position" v3)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.fun_eq" ("_position" v2) ("_position" v3)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 176 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.val_eq" ("_position" v1) ("_position" v3)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.fun_eq" ("_position" v1) ("_position" v3)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 179 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.val_eq" ("_position" t) ("_position" t)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.fun_eq" ("_position" t) ("_position" t)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 183 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.val_eq" ("_position" t1) ("_position" t2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.fun_eq" ("_position" t1) ("_position" t2)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 183 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.val_eq" ("_position" t2) ("_position" t3)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.fun_eq" ("_position" t2) ("_position" t3)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 183 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.val_eq" ("_position" t1) ("_position" t3)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.fun_eq" ("_position" t1) ("_position" t3)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 194 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValueProps.fun_eq" ("_position" t1') ("_position" t1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValueProps.fun_eq" ("_position" t2') ("_position" t2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.val_eq"
###       ("\<^const>List.append" ("_position" t1') ("_position" t2'))
###       ("\<^const>List.append" ("_position" t1) ("_position" t2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValueProps.val_eq" ("_position" t1') ("_position" t1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValueProps.fun_eq" ("_position" t2') ("_position" t2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.val_eq"
###       ("\<^const>List.append" ("_position" t1') ("_position" t2'))
###       ("\<^const>List.append" ("_position" t1) ("_position" t2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValueProps.fun_eq" ("_position" t1') ("_position" t1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValueProps.val_eq" ("_position" t2') ("_position" t2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.val_eq"
###       ("\<^const>List.append" ("_position" t1') ("_position" t2'))
###       ("\<^const>List.append" ("_position" t1) ("_position" t2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValueProps.val_eq" ("_position" t1') ("_position" t1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValueProps.val_eq" ("_position" t2') ("_position" t2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.val_eq"
###       ("\<^const>List.append" ("_position" t1') ("_position" t2'))
###       ("\<^const>List.append" ("_position" t1) ("_position" t2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValueProps.fun_eq" ("_position" t1') ("_position" t1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValueProps.fun_eq" ("_position" t2') ("_position" t2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.fun_eq"
###       ("\<^const>List.append" ("_position" t1') ("_position" t2'))
###       ("\<^const>List.append" ("_position" t1) ("_position" t2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValueProps.val_eq" ("_position" t1') ("_position" t1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValueProps.fun_eq" ("_position" t2') ("_position" t2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.fun_eq"
###       ("\<^const>List.append" ("_position" t1') ("_position" t2'))
###       ("\<^const>List.append" ("_position" t1) ("_position" t2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValueProps.fun_eq" ("_position" t1') ("_position" t1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValueProps.val_eq" ("_position" t2') ("_position" t2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.fun_eq"
###       ("\<^const>List.append" ("_position" t1') ("_position" t2'))
###       ("\<^const>List.append" ("_position" t1) ("_position" t2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValueProps.val_eq" ("_position" t1') ("_position" t1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValueProps.val_eq" ("_position" t2') ("_position" t2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.fun_eq"
###       ("\<^const>List.append" ("_position" t1') ("_position" t2'))
###       ("\<^const>List.append" ("_position" t1) ("_position" t2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 200 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.val_eq"
###     ("\<^const>List.append" ("_position" t2) ("_position" t1))
###     ("\<^const>List.append" ("_position" t1) ("_position" t2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.fun_eq"
###     ("\<^const>List.append" ("_position" t2) ("_position" t1))
###     ("\<^const>List.append" ("_position" t1) ("_position" t2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 204 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.val_le" ("_applC" ("_position" VNat) ("_position" n))
###       ("_position" v)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" v)
###       ("_applC" ("_position" VNat) ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.env_le" ("_applC" ("_position" VNat) ("_position" n))
###       ("_position" v)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" v)
###       ("_applC" ("_position" VNat) ("_position" n)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 207 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.val_le" ("_position" v)
###       ("_applC" ("_position" VNat) ("_position" n))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" v)
###       ("_applC" ("_position" VNat) ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.env_le" ("_position" v)
###       ("_applC" ("_position" VNat) ("_position" n))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" v)
###       ("_applC" ("_position" VNat) ("_position" n)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 210 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.val_le" ("_applC" ("_position" VNat) ("_position" n))
###       ("_applC" ("_position" VNat) ("_position" n'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.env_le" ("_applC" ("_position" VNat) ("_position" n))
###       ("_applC" ("_position" VNat) ("_position" n'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.ValueProps"
### 0.253s elapsed time, 0.999s cpu time, 0.063s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.DeclSemAsDenot"
### 0.424s elapsed time, 1.550s cpu time, 0.147s GC time
Loading theory "Draft.DenotLam5" (required by "Draft.EquivDenotInterTypesMoreTemplates" via "Draft.EquivDenotInterTypes")
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 14 of "$AFP/Decl_Sem_Fun_PL/DenotLam5.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v3)
###         ("_applC" ("_position" E)
###           ("_cargs"
###             ("_applC" ("_position" EApp)
###               ("_cargs" ("_position" e1) ("_position" e2)))
###             ("_position" \<rho>)))))
###     ("_asm"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" f)
###           ("_idts" ("_position" v2)
###             ("_idts" ("_position" v2') ("_position" v3'))))
###         ("_bigimpl"
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member"
###                 ("_applC" ("_position" VFun) ("_position" f))
###                 ("_applC" ("_position" E)
###                   ("_cargs" ("_position" e1) ("_position" \<rho>)))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Set.member" ("_position" v2)
###                   ("_applC" ("_position" E)
###                     ("_cargs" ("_position" e2) ("_position" \<rho>)))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" v2')
###                       ("_tuple_arg" ("_position" v3')))
###                     ("_applC" ("_position" set) ("_position" f))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Values.val_le" ("_position" v2')
###                       ("_position" v2)))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Values.val_le" ("_position" v3)
###                         ("_position" v3'))))))))
###           ("\<^const>HOL.Trueprop" ("_position" P))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v3)
###         ("_applC" ("_position" E)
###           ("_cargs"
###             ("_applC" ("_position" EApp)
###               ("_cargs" ("_position" e1) ("_position" e2)))
###             ("_position" \<rho>)))))
###     ("_asm"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" f)
###           ("_idts" ("_position" v2)
###             ("_idts" ("_position" v2') ("_position" v3'))))
###         ("_bigimpl"
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member"
###                 ("_applC" ("_position" VFun) ("_position" f))
###                 ("_applC" ("_position" E)
###                   ("_cargs" ("_position" e1) ("_position" \<rho>)))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Set.member" ("_position" v2)
###                   ("_applC" ("_position" E)
###                     ("_cargs" ("_position" e2) ("_position" \<rho>)))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" v2')
###                       ("_tuple_arg" ("_position" v3')))
###                     ("_applC" ("_position" set) ("_position" f))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Values.env_le" ("_position" v2')
###                       ("_position" v2)))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Values.val_le" ("_position" v3)
###                         ("_position" v3'))))))))
###           ("\<^const>HOL.Trueprop" ("_position" P))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v3)
###         ("_applC" ("_position" E)
###           ("_cargs"
###             ("_applC" ("_position" EApp)
###               ("_cargs" ("_position" e1) ("_position" e2)))
###             ("_position" \<rho>)))))
###     ("_asm"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" f)
###           ("_idts" ("_position" v2)
###             ("_idts" ("_position" v2') ("_position" v3'))))
###         ("_bigimpl"
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member"
###                 ("_applC" ("_position" VFun) ("_position" f))
###                 ("_applC" ("_position" E)
###                   ("_cargs" ("_position" e1) ("_position" \<rho>)))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Set.member" ("_position" v2)
###                   ("_applC" ("_position" E)
###                     ("_cargs" ("_position" e2) ("_position" \<rho>)))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" v2')
###                       ("_tuple_arg" ("_position" v3')))
###                     ("_applC" ("_position" set) ("_position" f))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Values.val_le" ("_position" v2')
###                       ("_position" v2)))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Values.env_le" ("_position" v3)
###                         ("_position" v3'))))))))
###           ("\<^const>HOL.Trueprop" ("_position" P))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v3)
###         ("_applC" ("_position" E)
###           ("_cargs"
###             ("_applC" ("_position" EApp)
###               ("_cargs" ("_position" e1) ("_position" e2)))
###             ("_position" \<rho>)))))
###     ("_asm"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" f)
###           ("_idts" ("_position" v2)
###             ("_idts" ("_position" v2') ("_position" v3'))))
###         ("_bigimpl"
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member"
###                 ("_applC" ("_position" VFun) ("_position" f))
###                 ("_applC" ("_position" E)
###                   ("_cargs" ("_position" e1) ("_position" \<rho>)))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Set.member" ("_position" v2)
###                   ("_applC" ("_position" E)
###                     ("_cargs" ("_position" e2) ("_position" \<rho>)))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" v2')
###                       ("_tuple_arg" ("_position" v3')))
###                     ("_applC" ("_position" set) ("_position" f))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Values.env_le" ("_position" v2')
###                       ("_position" v2)))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Values.env_le" ("_position" v3)
###                         ("_position" v3'))))))))
###           ("\<^const>HOL.Trueprop" ("_position" P))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 19 of "$AFP/Decl_Sem_Fun_PL/DenotLam5.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_applC" ("_position" VFun) ("_position" f))
###         ("_applC" ("_position" E)
###           ("_cargs" ("_position" e1) ("_position" \<rho>)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v2)
###           ("_applC" ("_position" E)
###             ("_cargs" ("_position" e2) ("_position" \<rho>)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" v2') ("_tuple_arg" ("_position" v3')))
###             ("_applC" ("_position" set) ("_position" f))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Values.env_le" ("_position" v2') ("_position" v2)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Values.env_le" ("_position" v3)
###                 ("_position" v3'))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v3)
###       ("_applC" ("_position" E)
###         ("_cargs"
###           ("_applC" ("_position" EApp)
###             ("_cargs" ("_position" e1) ("_position" e2)))
###           ("_position" \<rho>))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_applC" ("_position" VFun) ("_position" f))
###         ("_applC" ("_position" E)
###           ("_cargs" ("_position" e1) ("_position" \<rho>)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v2)
###           ("_applC" ("_position" E)
###             ("_cargs" ("_position" e2) ("_position" \<rho>)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" v2') ("_tuple_arg" ("_position" v3')))
###             ("_applC" ("_position" set) ("_position" f))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Values.val_le" ("_position" v2') ("_position" v2)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Values.env_le" ("_position" v3)
###                 ("_position" v3'))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v3)
###       ("_applC" ("_position" E)
###         ("_cargs"
###           ("_applC" ("_position" EApp)
###             ("_cargs" ("_position" e1) ("_position" e2)))
###           ("_position" \<rho>))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_applC" ("_position" VFun) ("_position" f))
###         ("_applC" ("_position" E)
###           ("_cargs" ("_position" e1) ("_position" \<rho>)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v2)
###           ("_applC" ("_position" E)
###             ("_cargs" ("_position" e2) ("_position" \<rho>)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" v2') ("_tuple_arg" ("_position" v3')))
###             ("_applC" ("_position" set) ("_position" f))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Values.env_le" ("_position" v2') ("_position" v2)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Values.val_le" ("_position" v3)
###                 ("_position" v3'))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v3)
###       ("_applC" ("_position" E)
###         ("_cargs"
###           ("_applC" ("_position" EApp)
###             ("_cargs" ("_position" e1) ("_position" e2)))
###           ("_position" \<rho>))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_applC" ("_position" VFun) ("_position" f))
###         ("_applC" ("_position" E)
###           ("_cargs" ("_position" e1) ("_position" \<rho>)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v2)
###           ("_applC" ("_position" E)
###             ("_cargs" ("_position" e2) ("_position" \<rho>)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" v2') ("_tuple_arg" ("_position" v3')))
###             ("_applC" ("_position" set) ("_position" f))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Values.val_le" ("_position" v2') ("_position" v2)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Values.val_le" ("_position" v3)
###                 ("_position" v3'))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v3)
###       ("_applC" ("_position" E)
###         ("_cargs"
###           ("_applC" ("_position" EApp)
###             ("_cargs" ("_position" e1) ("_position" e2)))
###           ("_position" \<rho>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HOL-Library.Tree"
### 2.137s elapsed time, 7.716s cpu time, 1.257s GC time
Loading theory "Draft.Templates" (required by "Draft.EquivDenotInterTypesMoreTemplates" via "Draft.ExtrEqs")
### Ambiguous input (line 39 of "$AFP/Decl_Sem_Fun_PL/DenotLam5.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" lookup)
###           ("_cargs" ("_position" \<rho>) ("_position" x)))
###         ("_applC" ("_position" Some) ("_position" v'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Values.env_le" ("_position" v) ("_position" v')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v)
###       ("_applC" ("_position" E)
###         ("_cargs" ("_applC" ("_position" EVar) ("_position" x))
###           ("_position" \<rho>))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" lookup)
###           ("_cargs" ("_position" \<rho>) ("_position" x)))
###         ("_applC" ("_position" Some) ("_position" v'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Values.val_le" ("_position" v) ("_position" v')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v)
###       ("_applC" ("_position" E)
###         ("_cargs" ("_applC" ("_position" EVar) ("_position" x))
###           ("_position" \<rho>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 42 of "$AFP/Decl_Sem_Fun_PL/DenotLam5.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("_position" E)
###           ("_cargs" ("_applC" ("_position" EVar) ("_position" x))
###             ("_position" \<rho>)))))
###     ("_asm"
###       ("\<^const>Pure.all_binder" ("_position" v')
###         ("_bigimpl"
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" lookup)
###                   ("_cargs" ("_position" \<rho>) ("_position" x)))
###                 ("_applC" ("_position" Some) ("_position" v'))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Values.val_le" ("_position" v)
###                   ("_position" v')))))
###           ("\<^const>HOL.Trueprop" ("_position" P))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("_position" E)
###           ("_cargs" ("_applC" ("_position" EVar) ("_position" x))
###             ("_position" \<rho>)))))
###     ("_asm"
###       ("\<^const>Pure.all_binder" ("_position" v')
###         ("_bigimpl"
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" lookup)
###                   ("_cargs" ("_position" \<rho>) ("_position" x)))
###                 ("_applC" ("_position" Some) ("_position" v'))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Values.env_le" ("_position" v)
###                   ("_position" v')))))
###           ("\<^const>HOL.Trueprop" ("_position" P))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 60 of "$AFP/Decl_Sem_Fun_PL/DenotLam5.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>xenv_le" ("_position" X) ("_position" \<rho>)
###     ("_position" \<rho>'))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" x) ("_position" v))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" x) ("_position" X))
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" lookup)
###             ("_cargs" ("_position" \<rho>) ("_position" x)))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("\<^const>HOL.Ex_binder" ("_position" v')
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" lookup)
###               ("_cargs" ("_position" \<rho>') ("_position" x)))
###             ("_applC" ("_position" Some) ("_position" v')))
###           ("\<^const>Values.env_le" ("_position" v) ("_position" v')))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>xenv_le" ("_position" X) ("_position" \<rho>)
###     ("_position" \<rho>'))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" x) ("_position" v))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" x) ("_position" X))
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" lookup)
###             ("_cargs" ("_position" \<rho>) ("_position" x)))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("\<^const>HOL.Ex_binder" ("_position" v')
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" lookup)
###               ("_cargs" ("_position" \<rho>') ("_position" x)))
###             ("_applC" ("_position" Some) ("_position" v')))
###           ("\<^const>Values.val_le" ("_position" v) ("_position" v')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "subtype", "fsubtype"
### Ambiguous input (line 64 of "$AFP/Decl_Sem_Fun_PL/DenotLam5.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.val_le" ("_position" v') ("_position" v)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.env_le" ("_position" v') ("_position" v)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 124 of "$AFP/Decl_Sem_Fun_PL/DenotLam5.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("_position" E)
###           ("_cargs" ("_position" e) ("_position" \<rho>)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Values.env_le" ("_position" v') ("_position" v)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v')
###       ("_applC" ("_position" E)
###         ("_cargs" ("_position" e) ("_position" \<rho>))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("_position" E)
###           ("_cargs" ("_position" e) ("_position" \<rho>)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Values.val_le" ("_position" v') ("_position" v)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v')
###       ("_applC" ("_position" E)
###         ("_cargs" ("_position" e) ("_position" \<rho>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
  Proving monotonicity ...
### Ambiguous input (line 127 of "$AFP/Decl_Sem_Fun_PL/DenotLam5.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.val_le" ("_position" \<rho>) ("_position" \<rho>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.env_le" ("_position" \<rho>) ("_position" \<rho>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 127 of "$AFP/Decl_Sem_Fun_PL/DenotLam5.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.val_le"
###     ("\<^const>List.list.Cons"
###       ("_tuple" ("_position" x) ("_tuple_arg" ("_position" v)))
###       ("_position" \<rho>))
###     ("\<^const>List.list.Cons"
###       ("_tuple" ("_position" x) ("_tuple_arg" ("_position" v)))
###       ("_position" \<rho>'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.env_le"
###     ("\<^const>List.list.Cons"
###       ("_tuple" ("_position" x) ("_tuple_arg" ("_position" v)))
###       ("_position" \<rho>))
###     ("\<^const>List.list.Cons"
###       ("_tuple" ("_position" x) ("_tuple_arg" ("_position" v)))
###       ("_position" \<rho>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 136 of "$AFP/Decl_Sem_Fun_PL/DenotLam5.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.val_le" ("_position" \<rho>) ("_position" \<rho>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.env_le" ("_position" \<rho>) ("_position" \<rho>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 144 of "$AFP/Decl_Sem_Fun_PL/DenotLam5.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.env_eq" ("_position" \<rho>) ("_position" \<rho>')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.val_le" ("_position" \<rho>) ("_position" \<rho>'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.env_eq" ("_position" \<rho>) ("_position" \<rho>')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.env_le" ("_position" \<rho>) ("_position" \<rho>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.086s elapsed time, 0.264s cpu time, 0.058s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.EquivDenotInterTypesMoreTemplates")
### theory "Draft.DenotLam5"
### 0.269s elapsed time, 0.815s cpu time, 0.092s GC time
Proofs for inductive predicate(s) "wt"
  Proving monotonicity ...
### theory "Draft.InterTypeSystem"
### 1.162s elapsed time, 3.856s cpu time, 0.412s GC time
Loading theory "Draft.EquivDenotInterTypes" (required by "Draft.EquivDenotInterTypesMoreTemplates")
Found termination order: "case_sum size size <*mlex*> {}"
Found termination order: "size_list (%p. size (snd p)) <*mlex*> {}"
Found termination order: "size_list (%p. size (snd p)) <*mlex*> {}"
### Ambiguous input (line 82 of "$AFP/Decl_Sem_Fun_PL/EquivDenotInterTypes.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" v)
###       ("_idts" ("_position" v') ("_idts" ("_position" t) ("_position" t'))))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" n)
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Groups.plus_class.plus"
###               ("_applC" ("_position" val_size) ("_position" v))
###               ("_applC" ("_position" val_size) ("_position" v')))
###             ("_applC" ("_position" fun_size) ("_position" t)))
###           ("_applC" ("_position" fun_size) ("_position" t'))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.implies"
###           ("\<^const>Values.env_le" ("_position" v) ("_position" v'))
###           ("\<^const>InterTypeSystem.subtype"
###             ("_applC" ("_position" T) ("_position" v'))
###             ("_applC" ("_position" T) ("_position" v))))
###         ("\<^const>HOL.implies"
###           ("\<^const>Values.fun_le" ("_position" t) ("_position" t'))
###           ("\<^const>InterTypeSystem.fsubtype"
###             ("_applC" ("_position" Tf) ("_position" t'))
###             ("_applC" ("_position" Tf) ("_position" t))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" v)
###       ("_idts" ("_position" v') ("_idts" ("_position" t) ("_position" t'))))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" n)
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Groups.plus_class.plus"
###               ("_applC" ("_position" val_size) ("_position" v))
###               ("_applC" ("_position" val_size) ("_position" v')))
###             ("_applC" ("_position" fun_size) ("_position" t)))
###           ("_applC" ("_position" fun_size) ("_position" t'))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.implies"
###           ("\<^const>Values.val_le" ("_position" v) ("_position" v'))
###           ("\<^const>InterTypeSystem.subtype"
###             ("_applC" ("_position" T) ("_position" v'))
###             ("_applC" ("_position" T) ("_position" v))))
###         ("\<^const>HOL.implies"
###           ("\<^const>Values.fun_le" ("_position" t) ("_position" t'))
###           ("\<^const>InterTypeSystem.fsubtype"
###             ("_applC" ("_position" Tf) ("_position" t'))
###             ("_applC" ("_position" Tf) ("_position" t))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 182 of "$AFP/Decl_Sem_Fun_PL/EquivDenotInterTypes.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.val_le" ("_position" v) ("_position" v')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>InterTypeSystem.subtype"
###       ("_applC" ("_position" T) ("_position" v'))
###       ("_applC" ("_position" T) ("_position" v)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.env_le" ("_position" v) ("_position" v')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>InterTypeSystem.subtype"
###       ("_applC" ("_position" T) ("_position" v'))
###       ("_applC" ("_position" T) ("_position" v)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 221 of "$AFP/Decl_Sem_Fun_PL/EquivDenotInterTypes.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>InterTypeSystem.ty_eq"
###     ("_applC" ("_position" T) ("_applC" ("_position" V) ("_position" A)))
###     ("_position" A)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.env_eq"
###     ("_applC" ("_position" T) ("_applC" ("_position" V) ("_position" A)))
###     ("_position" A)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.567s elapsed time, 1.205s cpu time, 0.124s GC time
### Ambiguous input (line 360 of "$AFP/Decl_Sem_Fun_PL/EquivDenotInterTypes.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValueProps.fun_eq" ("_position" t1') ("_position" t1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValueProps.fun_eq" ("_position" t2') ("_position" t2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.val_eq"
###       ("\<^const>List.append" ("_position" t1') ("_position" t2'))
###       ("\<^const>List.append" ("_position" t1) ("_position" t2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValueProps.val_eq" ("_position" t1') ("_position" t1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValueProps.fun_eq" ("_position" t2') ("_position" t2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.val_eq"
###       ("\<^const>List.append" ("_position" t1') ("_position" t2'))
###       ("\<^const>List.append" ("_position" t1) ("_position" t2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValueProps.fun_eq" ("_position" t1') ("_position" t1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValueProps.val_eq" ("_position" t2') ("_position" t2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.val_eq"
###       ("\<^const>List.append" ("_position" t1') ("_position" t2'))
###       ("\<^const>List.append" ("_position" t1) ("_position" t2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValueProps.val_eq" ("_position" t1') ("_position" t1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValueProps.val_eq" ("_position" t2') ("_position" t2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.val_eq"
###       ("\<^const>List.append" ("_position" t1') ("_position" t2'))
###       ("\<^const>List.append" ("_position" t1) ("_position" t2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValueProps.fun_eq" ("_position" t1') ("_position" t1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValueProps.fun_eq" ("_position" t2') ("_position" t2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.fun_eq"
###       ("\<^const>List.append" ("_position" t1') ("_position" t2'))
###       ("\<^const>List.append" ("_position" t1) ("_position" t2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValueProps.val_eq" ("_position" t1') ("_position" t1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValueProps.fun_eq" ("_position" t2') ("_position" t2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.fun_eq"
###       ("\<^const>List.append" ("_position" t1') ("_position" t2'))
###       ("\<^const>List.append" ("_position" t1) ("_position" t2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValueProps.fun_eq" ("_position" t1') ("_position" t1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValueProps.val_eq" ("_position" t2') ("_position" t2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.fun_eq"
###       ("\<^const>List.append" ("_position" t1') ("_position" t2'))
###       ("\<^const>List.append" ("_position" t1) ("_position" t2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValueProps.val_eq" ("_position" t1') ("_position" t1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValueProps.val_eq" ("_position" t2') ("_position" t2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.fun_eq"
###       ("\<^const>List.append" ("_position" t1') ("_position" t2'))
###       ("\<^const>List.append" ("_position" t1) ("_position" t2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 365 of "$AFP/Decl_Sem_Fun_PL/EquivDenotInterTypes.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.val_eq"
###     ("\<^const>List.append" ("_position" t2) ("_position" t1))
###     ("\<^const>List.append" ("_position" t1) ("_position" t2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.fun_eq"
###     ("\<^const>List.append" ("_position" t2) ("_position" t1))
###     ("\<^const>List.append" ("_position" t1) ("_position" t2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 371 of "$AFP/Decl_Sem_Fun_PL/EquivDenotInterTypes.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("\<^const>InterTypeSystem.subtype" ("_position" A) ("_position" B))
###       ("\<^const>Values.env_le" ("_applC" ("_position" V) ("_position" B))
###         ("_applC" ("_position" V) ("_position" A))))
###     ("\<^const>HOL.implies"
###       ("\<^const>InterTypeSystem.fsubtype" ("_position" f1)
###         ("_position" f2))
###       ("\<^const>Values.fun_le" ("_applC" ("_position" Vf) ("_position" f2))
###         ("_applC" ("_position" Vf) ("_position" f1))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("\<^const>InterTypeSystem.subtype" ("_position" A) ("_position" B))
###       ("\<^const>Values.val_le" ("_applC" ("_position" V) ("_position" B))
###         ("_applC" ("_position" V) ("_position" A))))
###     ("\<^const>HOL.implies"
###       ("\<^const>InterTypeSystem.fsubtype" ("_position" f1)
###         ("_position" f2))
###       ("\<^const>Values.fun_le" ("_applC" ("_position" Vf) ("_position" f2))
###         ("_applC" ("_position" Vf) ("_position" f1))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.EquivDenotInterTypes"
### 0.498s elapsed time, 1.043s cpu time, 0.124s GC time
Loading theory "Draft.EquivDenotInterTypesMoreTemplates"
val templateLemmas =
   [("EquivDenotInterTypes.Tf_top", "Tf ?t <:: \<top>",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("EquivDenotInterTypes.vt_id", "Vf (Tf ?t) = ?t",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("EquivDenotInterTypes.vt_id", "V (T ?v) = ?v",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("EquivDenotInterTypes.tv_id", "Tf (Vf ?F) \<simeq> ?F",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0))),
           template_var 0)
         )),
    ("EquivDenotInterTypes.tv_id", "T (V ?A) \<approx> ?A",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0))),
           template_var 0)
         )),
    ("EquivDenotInterTypes.append_eq_symm",
     "?t2.0 @ ?t1.0 \<sim> ?t1.0 @ ?t2.0",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("EquivDenotInterTypes.Tf_append",
     "Tf (?t1.0 @ ?t2.0) <:: Tf ?t1.0 \<sqinter> Tf ?t2.0",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 1)),
             template_app (template_hole 2, template_var 0)))
         )),
    ("EquivDenotInterTypes.append_Tf",
     "Tf ?t1.0 \<sqinter> Tf ?t2.0 <:: Tf (?t1.0 @ ?t2.0)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_app (template_hole 1, template_var 0))),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))
         )),
    ("EquivDenotInterTypes.sub_inter_left1",
     "?A <:: ?C ==> ?A \<sqinter> ?B <:: ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("EquivDenotInterTypes.sub_inter_left2",
     "?B <:: ?C ==> ?A \<sqinter> ?B <:: ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_var 1)
           ))),
    ("EquivDenotInterTypes.le_sub_fun_flip",
     "?t \<lesssim> ?t' ==> Tf ?t' <:: Tf ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("EquivDenotInterTypes.le_sub_flip",
     "?v \<sqsubseteq> ?v' ==> T ?v' <: T ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("EquivDenotInterTypes.ts_implies_denot",
     "?\<Gamma> \<turnstile> ?e : ?A ==> V ?A : E ?e (Venv ?\<Gamma>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 2)))
           ))),
    ("EquivDenotInterTypes.denot_implies_ts",
     "?v : E ?e ?\<rho> ==> Tenv ?\<rho> \<turnstile> ?e : T ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_var 1),
             template_app (template_hole 0, template_var 2))
           ))),
    ("EquivDenotInterTypes.lookup_tenv",
     "lookup ?\<rho> ?x = Some ?v ==>
      lookup (Tenv ?\<rho>) ?x = Some (T ?v)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 2), template_var 1),
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 2)),
           template_var 1),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("EquivDenotInterTypes.venv_lookup",
     "lookup ?\<Gamma> ?x = Some ?A ==>
      lookup (Venv ?\<Gamma>) ?x = Some (V ?A)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 2), template_var 1),
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 2)),
           template_var 1),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("EquivDenotInterTypes.table_mem_sub",
     "(?v, ?v') : set ?t ==> Tf ?t <:: T ?v \<rightarrow> T ?v'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_app (template_hole 0, template_var 1)))
           ))),
    ("EquivDenotInterTypes.append_fun_equiv",
     "[| ?t1' \<sim> ?t1.0; ?t2' \<sim> ?t2.0 |]
      ==> ?t1' @ ?t2' \<sim> ?t1.0 @ ?t2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("EquivDenotInterTypes.sub_le_flip",
     "(?A <: ?B --> V ?B \<sqsubseteq> V ?A) &
      (?f1.0 <:: ?f2.0 --> Vf ?f2.0 \<lesssim> Vf ?f1.0)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 3),
                   template_var 2)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 2)),
                 template_app (template_hole 3, template_var 3)))),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_app (template_hole 0, template_var 1))))
         )),
    ("EquivDenotInterTypes.vf_cons",
     "Vf (Tf ((?v, ?v') # ?t)) = (V (T ?v), V (T ?v')) # Vf (Tf ?t)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)),
             template_var 0))),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2))),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)))),
         template_app
          (template_hole 5,
           template_app (template_hole 4, template_var 0))))),
    ("EquivDenotInterTypes.le_sub_flip_aux",
     "ALL v v' t t'.
         ?n = val_size v + val_size v' + fun_size t + fun_size t' -->
         (v \<sqsubseteq> v' --> T v' <: T v) &
         (t \<lesssim> t' --> Tf t' <:: Tf t)",
     template_predicate (template_app (template_hole 13, t_empty))),
    ("EquivDenotInterTypes.denot_lam_implies_ts",
     "[| ALL v \<rho>.
            v : E ?e \<rho> --> Tenv \<rho> \<turnstile> ?e : T v;
         ALL v1 v2. (v1, v2) : set ?f --> v2 : E ?e ((?x, v1) # ?\<rho>) |]
      ==> Tenv ?\<rho> \<turnstile> ELam ?x ?e : TFun (Tf ?f)",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 15, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 10,
                 template_app (template_hole 9, template_var 0)),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 3)),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)))
           )))]:
   (string * thm * template) list
### theory "Draft.EquivDenotInterTypesMoreTemplates"
### 0.373s elapsed time, 0.531s cpu time, 0.058s GC time
val it = (): unit
