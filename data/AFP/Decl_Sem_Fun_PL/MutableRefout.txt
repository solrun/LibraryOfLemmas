Loading theory "HOL-Library.Function_Algebras" (required by "Draft.MutableRefMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.MutableRefMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.MutableRefMoreTemplates" via "Draft.MutableRef" via "HOL-Library.FSet" via "HOL-Library.Countable")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.MutableRefMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.141s elapsed time, 0.585s cpu time, 0.041s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.MutableRefMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.212s elapsed time, 0.866s cpu time, 0.041s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.MutableRefMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.332s elapsed time, 1.330s cpu time, 0.113s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.MutableRefMoreTemplates" via "Draft.ExtrEqs")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.431s elapsed time, 1.728s cpu time, 0.113s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.MutableRefMoreTemplates" via "Draft.MutableRef" via "HOL-Library.FSet")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
### Additional type variable(s) in locale specification "countable": 'a
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.775s elapsed time, 3.056s cpu time, 0.283s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.034s elapsed time, 3.752s cpu time, 0.854s GC time
Found termination order: "size <*mlex*> {}"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
Found termination order: "size <*mlex*> {}"
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.303s elapsed time, 4.124s cpu time, 0.914s GC time
Loading theory "HOL-Library.FSet" (required by "Draft.MutableRefMoreTemplates" via "Draft.MutableRef")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  fset :: (finite) finite
instantiation
  fset :: (type) {minus,bounded_lattice_bot,distrib_lattice}
  inf_fset == inf :: 'a fset => 'a fset => 'a fset
  bot_fset == bot :: 'a fset
  sup_fset == sup :: 'a fset => 'a fset => 'a fset
  less_eq_fset == less_eq :: 'a fset => 'a fset => bool
  less_fset == less :: 'a fset => 'a fset => bool
  minus_fset == minus :: 'a fset => 'a fset => 'a fset
instantiation
  fset :: (equal) equal
  equal_fset == equal_class.equal :: 'a fset => 'a fset => bool
instantiation
  fset :: (type) conditionally_complete_lattice
  Inf_fset == Inf :: 'a fset set => 'a fset
  Sup_fset == Sup :: 'a fset set => 'a fset
Found termination order: "size <*mlex*> {}"
instantiation
  fset :: (finite) complete_lattice
  top_fset == top :: 'a fset
instantiation
  fset :: (finite) complete_boolean_algebra
  uminus_fset == uminus :: 'a fset => 'a fset
### theory "HOL-Library.Tree"
### 1.980s elapsed time, 6.100s cpu time, 1.090s GC time
Loading theory "Draft.Templates" (required by "Draft.MutableRefMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.123s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.MutableRefMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.535s elapsed time, 1.129s cpu time, 0.125s GC time
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
locale comp_fun_idem
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_idem f"
locale comm_monoid_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_fset (\<^bold>*) \<^bold>1"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### Cannot skip proof of schematic goal statement
locale semilattice_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
  assumes "semilattice_fset (\<^bold>*)"
locale semilattice_order_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
  assumes "semilattice_order_fset (\<^bold>*) (\<^bold>\<le>) (\<^bold><)"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  fset :: (type) size
  size_fset == size :: 'a fset => nat
instantiation
  fset :: (exhaustive) exhaustive
  exhaustive_fset == exhaustive_class.exhaustive ::
    ('a fset => (bool * term list) option)
    => natural => (bool * term list) option
Found termination order: "(%p. nat_of_natural (snd p)) <*mlex*> {}"
instantiation
  fset :: (full_exhaustive) full_exhaustive
  full_exhaustive_fset == full_exhaustive_class.full_exhaustive ::
    ('a fset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Found termination order: "(%p. nat_of_natural (snd p)) <*mlex*> {}"
instantiation
  fset :: (random) random
  random_fset == random_class.random ::
    natural
    => natural * natural => ('a fset * (unit => term)) * natural * natural
### Additional type variable(s) in specification of "random_aux_fset_rel": 'a
### Additional type variable(s) in specification of "random_aux_fset_dom": 'a
Found termination order: "(%p. nat_of_natural (fst p)) <*mlex*> {}"
### theory "HOL-Library.FSet"
### 2.032s elapsed time, 3.210s cpu time, 0.357s GC time
Loading theory "Draft.MutableRef" (required by "Draft.MutableRefMoreTemplates")
Proofs for inductive predicate(s) "val_le"
  Proving monotonicity ...
consts
  vsize :: "val => nat"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.MutableRef"
### 2.787s elapsed time, 3.645s cpu time, 0.983s GC time
Loading theory "Draft.MutableRefMoreTemplates"
val templateLemmas =
   [("MutableRef.Enat", "E (ENat ?n) ?\<rho> = return (VNat ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 1)))),
    ("MutableRef.Evar",
     "E (EVar ?n) ?\<rho> =
      (if ?n < length ?\<rho> then down (?\<rho> ! ?n) else return Wrong)",
     template_equation
      (template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_app (template_hole 4, template_var 0))),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1))),
         template_app (template_hole 1, template_hole 0)))),
    ("MutableRef.Epair",
     "E (EPair ?e1.0 ?e2.0) ?\<rho> = (v1 := E ?e1.0 ?\<rho>;
 v2 := E ?e2.0 ?\<rho>;
 return (VPair v1 v2))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 0)),
         t_empty))),
    ("MutableRef.Eread",
     "E (ERead ?e) ?\<rho> =
      err_bind (E ?e ?\<rho>)
       (case_val (%nat. return Wrong) (%fset. return Wrong)
         (%val1 val2. return Wrong) read (return Wrong))",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 6, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 3, t_empty), t_empty),
               t_empty),
             template_hole 0),
           template_app (template_hole 2, template_hole 1))))),
    ("MutableRef.Esnd",
     "E (ESnd ?e) ?\<rho> =
      err_bind (E ?e ?\<rho>)
       (case_val (%nat. return Wrong) (%fset. return Wrong) (%v1. return)
         (%nat. return Wrong) (return Wrong))",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, t_empty), t_empty),
               t_empty),
             t_empty),
           template_app (template_hole 1, template_hole 0))))),
    ("MutableRef.Efst",
     "E (EFst ?e) ?\<rho> =
      err_bind (E ?e ?\<rho>)
       (case_val (%nat. return Wrong) (%fset. return Wrong)
         (%v1 v2. return v1) (%nat. return Wrong) (return Wrong))",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, t_empty), t_empty),
               t_empty),
             t_empty),
           template_app (template_hole 1, template_hole 0))))),
    ("MutableRef.Ewrite",
     "E (EWrite ?e1.0 ?e2.0) ?\<rho> =
      (v1 := E ?e1.0 ?\<rho>;
       v2 := E ?e2.0 ?\<rho>;
       case v1 of VAddr a => update a v2 | _ => return Wrong)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 0)),
         t_empty))),
    ("MutableRef.Eref",
     "E (ERef ?e) ?\<rho> =
      (v := E ?e ?\<rho>;
       \<mu> \<leftarrow> get_store;
       a \<leftarrow> choose UNIV;
       if a : sdom \<mu> then zero
       else (_ \<leftarrow> put_store (finsert (VAddr a, v) \<mu>);
             return (VAddr a)))",
     template_equation
      (template_app
        (template_app
          (template_hole 17,
           template_app (template_hole 16, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 15,
           template_app
            (template_app (template_hole 17, template_var 1),
             template_var 0)),
         t_empty))),
    ("MutableRef.Eif",
     "E (EIf ?e1.0 ?e2.0 ?e3.0) ?\<rho> =
      err_bind (E ?e1.0 ?\<rho>)
       (case_val (%n. if n = 0 then E ?e3.0 ?\<rho> else E ?e2.0 ?\<rho>)
         (%fset. return Wrong) (%val1 val2. return Wrong)
         (%nat. return Wrong) (return Wrong))",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_app (template_hole 7, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 8, template_var 3),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 5, t_empty), t_empty),
               t_empty),
             t_empty),
           template_app (template_hole 1, template_hole 0))))),
    ("MutableRef.Elam",
     "E (ELam ?A ?e) ?\<rho> =
      (L \<leftarrow> vals;
       t \<leftarrow> mapM L
                       (%v. (\<mu> \<leftarrow> tables;
                             (v',
                             \<mu>') \<leftarrow> choose
             (run \<mu> (E ?e (v # ?\<rho>)));
                             return
                              (VPair v (VFun \<mu>),
                               VPair v' (VFun \<mu>'))));
       return (VFun t))",
     template_equation
      (template_app
        (template_app
          (template_hole 17,
           template_app
            (template_app (template_hole 16, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 15, template_hole 14), t_empty))),
    ("MutableRef.Eprim",
     "E (EPrim ?f ?e1.0 ?e2.0) ?\<rho> =
      (v1 := E ?e1.0 ?\<rho>;
       v2 := E ?e2.0 ?\<rho>;
       case (v1, v2) of (VNat n1, VNat n2) => return (VNat (?f n1 n2))
       | (VNat n1, _) => return Wrong | (_, b) => return Wrong)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_app (template_hole 7, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 8, template_var 2),
             template_var 0)),
         t_empty))),
    ("MutableRef.Eapp",
     "E (EApp ?e1.0 ?e2.0) ?\<rho> =
      apply_fun (E ?e1.0 ?\<rho>) (E ?e2.0 ?\<rho>)",
     template_equation
      (template_app
        (template_app
          (template_hole 20,
           template_app
            (template_app (template_hole 19, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 18,
           template_app
            (template_app (template_hole 20, template_var 2),
             template_var 0)),
         t_empty)))]:
   (string * thm * template) list
### theory "Draft.MutableRefMoreTemplates"
### 0.379s elapsed time, 0.525s cpu time, 0.036s GC time
val it = (): unit
