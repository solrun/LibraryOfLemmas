Loading theory "Draft.Lambda" (required by "Draft.BigStepLamMoreTemplates" via "Draft.BigStepLam")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.BigStepLamMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.BigStepLamMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.BigStepLamMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.135s elapsed time, 0.562s cpu time, 0.054s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.BigStepLamMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.275s elapsed time, 1.119s cpu time, 0.054s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.BigStepLamMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.334s elapsed time, 1.341s cpu time, 0.161s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.BigStepLamMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### theory "HOL-Library.BigO"
### 0.970s elapsed time, 3.687s cpu time, 0.795s GC time
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.010s elapsed time, 3.798s cpu time, 0.795s GC time
### theory "Draft.Lambda"
### 1.366s elapsed time, 5.200s cpu time, 0.956s GC time
Loading theory "Draft.SmallStepLam" (required by "Draft.BigStepLamMoreTemplates" via "Draft.BigStepLam")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Proofs for inductive predicate(s) "isval"
  Proving monotonicity ...
### Ambiguous input (line 35 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" is_val) ("_position" v))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" EApp)
###         ("_cargs"
###           ("_applC" ("_position" ELam)
###             ("_cargs" ("_position" x) ("_position" e)))
###           ("_position" v)))
###       ("_applC" ("_position" subst)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" v) ("_position" e)))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" is_val) ("_position" v))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduce"
###       ("_applC" ("_position" EApp)
###         ("_cargs"
###           ("_applC" ("_position" ELam)
###             ("_cargs" ("_position" x) ("_position" e)))
###           ("_position" v)))
###       ("_applC" ("_position" subst)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" v) ("_position" e)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 36 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>reduce" ("_position" e1) ("_position" e1'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1) ("_position" e2)))
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1') ("_position" e2))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies" ("_position" e1) ("_position" e1'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1) ("_position" e2)))
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1') ("_position" e2))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>reduce" ("_position" e1) ("_position" e1'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduce"
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1) ("_position" e2)))
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1') ("_position" e2))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies" ("_position" e1) ("_position" e1'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduce"
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1) ("_position" e2)))
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1') ("_position" e2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 37 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>reduce" ("_position" e2) ("_position" e2'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1) ("_position" e2)))
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1) ("_position" e2'))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies" ("_position" e2) ("_position" e2'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1) ("_position" e2)))
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1) ("_position" e2'))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>reduce" ("_position" e2) ("_position" e2'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduce"
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1) ("_position" e2)))
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1) ("_position" e2'))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies" ("_position" e2) ("_position" e2'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduce"
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1) ("_position" e2)))
###       ("_applC" ("_position" EApp)
###         ("_cargs" ("_position" e1) ("_position" e2'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 38 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("_applC" ("_position" EPrim)
###       ("_cargs" ("_position" f)
###         ("_cargs" ("_applC" ("_position" ENat) ("_position" n1))
###           ("_applC" ("_position" ENat) ("_position" n2)))))
###     ("_applC" ("_position" ENat)
###       ("_applC" ("_position" f)
###         ("_cargs" ("_position" n1) ("_position" n2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>reduce"
###     ("_applC" ("_position" EPrim)
###       ("_cargs" ("_position" f)
###         ("_cargs" ("_applC" ("_position" ENat) ("_position" n1))
###           ("_applC" ("_position" ENat) ("_position" n2)))))
###     ("_applC" ("_position" ENat)
###       ("_applC" ("_position" f)
###         ("_cargs" ("_position" n1) ("_position" n2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 39 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>reduce" ("_position" e1) ("_position" e1'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1) ("_position" e2))))
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1') ("_position" e2)))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies" ("_position" e1) ("_position" e1'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1) ("_position" e2))))
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1') ("_position" e2)))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>reduce" ("_position" e1) ("_position" e1'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduce"
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1) ("_position" e2))))
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1') ("_position" e2)))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies" ("_position" e1) ("_position" e1'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduce"
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1) ("_position" e2))))
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1') ("_position" e2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 40 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>reduce" ("_position" e2) ("_position" e2'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1) ("_position" e2))))
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1) ("_position" e2')))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies" ("_position" e2) ("_position" e2'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1) ("_position" e2))))
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1) ("_position" e2')))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>reduce" ("_position" e2) ("_position" e2'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduce"
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1) ("_position" e2))))
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1) ("_position" e2')))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies" ("_position" e2) ("_position" e2'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduce"
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1) ("_position" e2))))
###       ("_applC" ("_position" EPrim)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" e1) ("_position" e2')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 41 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("_applC" ("_position" EIf)
###       ("_cargs"
###         ("_applC" ("_position" ENat) ("\<^const>Groups.zero_class.zero"))
###         ("_cargs" ("_position" thn) ("_position" els))))
###     ("_position" els)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>reduce"
###     ("_applC" ("_position" EIf)
###       ("_cargs"
###         ("_applC" ("_position" ENat) ("\<^const>Groups.zero_class.zero"))
###         ("_cargs" ("_position" thn) ("_position" els))))
###     ("_position" els)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 42 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" n)
###       ("\<^const>Groups.zero_class.zero")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" EIf)
###         ("_cargs" ("_applC" ("_position" ENat) ("_position" n))
###           ("_cargs" ("_position" thn) ("_position" els))))
###       ("_position" thn))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" n)
###       ("\<^const>Groups.zero_class.zero")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduce"
###       ("_applC" ("_position" EIf)
###         ("_cargs" ("_applC" ("_position" ENat) ("_position" n))
###           ("_cargs" ("_position" thn) ("_position" els))))
###       ("_position" thn))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Ambiguous input (line 43 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>reduce" ("_position" cond) ("_position" cond'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" EIf)
###         ("_cargs" ("_position" cond)
###           ("_cargs" ("_position" thn) ("_position" els))))
###       ("_applC" ("_position" EIf)
###         ("_cargs" ("_position" cond')
###           ("_cargs" ("_position" thn) ("_position" els)))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies" ("_position" cond) ("_position" cond'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" EIf)
###         ("_cargs" ("_position" cond)
###           ("_cargs" ("_position" thn) ("_position" els))))
###       ("_applC" ("_position" EIf)
###         ("_cargs" ("_position" cond')
###           ("_cargs" ("_position" thn) ("_position" els)))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>reduce" ("_position" cond) ("_position" cond'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduce"
###       ("_applC" ("_position" EIf)
###         ("_cargs" ("_position" cond)
###           ("_cargs" ("_position" thn) ("_position" els))))
###       ("_applC" ("_position" EIf)
###         ("_cargs" ("_position" cond')
###           ("_cargs" ("_position" thn) ("_position" els)))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies" ("_position" cond) ("_position" cond'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduce"
###       ("_applC" ("_position" EIf)
###         ("_cargs" ("_position" cond)
###           ("_cargs" ("_position" thn) ("_position" els))))
###       ("_applC" ("_position" EIf)
###         ("_cargs" ("_position" cond')
###           ("_cargs" ("_position" thn) ("_position" els)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "reduce"
  Proving monotonicity ...
### Ambiguous input (line 47 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies" ("_applC" ("_position" EVar) ("_position" x))
###     ("_position" e)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStepLam.reduce"
###     ("_applC" ("_position" EVar) ("_position" x)) ("_position" e)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 48 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies" ("_applC" ("_position" ENat) ("_position" n))
###     ("_position" e)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStepLam.reduce"
###     ("_applC" ("_position" ENat) ("_position" n)) ("_position" e)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 49 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("_applC" ("_position" ELam) ("_cargs" ("_position" x) ("_position" e)))
###     ("_position" e')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStepLam.reduce"
###     ("_applC" ("_position" ELam) ("_cargs" ("_position" x) ("_position" e)))
###     ("_position" e')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 50 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("_applC" ("_position" EApp)
###       ("_cargs" ("_position" e1) ("_position" e2)))
###     ("_position" e')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStepLam.reduce"
###     ("_applC" ("_position" EApp)
###       ("_cargs" ("_position" e1) ("_position" e2)))
###     ("_position" e')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 54 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStepLam.reduce" ("_position" e1) ("_position" e2)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>multi_step" ("_position" e2) ("_position" e3)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>multi_step" ("_position" e1) ("_position" e3))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies" ("_position" e1) ("_position" e2)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>multi_step" ("_position" e2) ("_position" e3)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>multi_step" ("_position" e1) ("_position" e3))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "multi_step"
  Proving monotonicity ...
### Ambiguous input (line 57 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" diverge) ("_position" e))
###   ("\<^const>HOL.All_binder" ("_position" e')
###     ("\<^const>HOL.implies"
###       ("\<^const>SmallStepLam.multi_step" ("_position" e) ("_position" e'))
###       ("\<^const>HOL.Ex_binder" ("_position" e'')
###         ("\<^const>HOL.implies" ("_position" e') ("_position" e''))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" diverge) ("_position" e))
###   ("\<^const>HOL.All_binder" ("_position" e')
###     ("\<^const>HOL.implies"
###       ("\<^const>SmallStepLam.multi_step" ("_position" e) ("_position" e'))
###       ("\<^const>HOL.Ex_binder" ("_position" e'')
###         ("\<^const>SmallStepLam.reduce" ("_position" e')
###           ("_position" e''))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 60 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" stuck) ("_position" e))
###   ("\<^const>HOL.Not"
###     ("\<^const>HOL.Ex_binder" ("_position" e')
###       ("\<^const>SmallStepLam.reduce" ("_position" e) ("_position" e')))))
### ("\<^const>Pure.eq" ("_applC" ("_position" stuck) ("_position" e))
###   ("\<^const>HOL.Not"
###     ("\<^const>HOL.Ex_binder" ("_position" e')
###       ("\<^const>HOL.implies" ("_position" e) ("_position" e')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.978s elapsed time, 6.259s cpu time, 1.089s GC time
Loading theory "Draft.Templates" (required by "Draft.BigStepLamMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.068s elapsed time, 0.155s cpu time, 0.046s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.BigStepLamMoreTemplates")
### Ambiguous input (line 103 of "$AFP/Decl_Sem_Fun_PL/SmallStepLam.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies" ("_position" e) ("_position" e')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStepLam.reduce" ("_position" e) ("_position" e')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.SmallStepLam"
### 0.849s elapsed time, 1.858s cpu time, 0.233s GC time
Loading theory "Draft.BigStepLam" (required by "Draft.BigStepLamMoreTemplates")
Proofs for inductive predicate(s) "eval"
  Proving monotonicity ...
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.536s elapsed time, 1.134s cpu time, 0.112s GC time
Proofs for inductive predicate(s) "bs_val", "bs_env"
  Proving monotonicity ...
### Ambiguous input (line 99 of "$AFP/Decl_Sem_Fun_PL/BigStepLam.thy") produces 4 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" closed_env) ("_position" \<rho>))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" x) ("_position" v))
###     ("\<^const>HOL.eq"
###       ("\<^const>HOL.eq"
###         ("\<^const>Set.member" ("_position" x)
###           ("\<^const>SmallStepLam.reduce"
###             ("_applC" ("_position" sdom) ("_position" \<rho>))
###             ("_applC" ("_position" lookup)
###               ("_cargs" ("_position" \<rho>) ("_position" x)))))
###         ("\<^const>SmallStepLam.reduce"
###           ("_applC" ("_position" Some) ("_position" v))
###           ("_applC" ("_position" FV) ("_position" v))))
###       ("\<^const>Set.empty"))))
### ("\<^const>Pure.eq" ("_applC" ("_position" closed_env) ("_position" \<rho>))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" x) ("_position" v))
###     ("\<^const>HOL.implies"
###       ("\<^const>Set.member" ("_position" x)
###         ("_applC" ("_position" sdom) ("_position" \<rho>)))
###       ("\<^const>HOL.eq"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" lookup)
###             ("_cargs" ("_position" \<rho>) ("_position" x)))
###           ("\<^const>SmallStepLam.reduce"
###             ("_applC" ("_position" Some) ("_position" v))
###             ("_applC" ("_position" FV) ("_position" v))))
###         ("\<^const>Set.empty")))))
### ("\<^const>Pure.eq" ("_applC" ("_position" closed_env) ("_position" \<rho>))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" x) ("_position" v))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("\<^const>Set.member" ("_position" x)
###           ("\<^const>SmallStepLam.reduce"
###             ("_applC" ("_position" sdom) ("_position" \<rho>))
###             ("_applC" ("_position" lookup)
###               ("_cargs" ("_position" \<rho>) ("_position" x)))))
###         ("_applC" ("_position" Some) ("_position" v)))
###       ("\<^const>HOL.eq" ("_applC" ("_position" FV) ("_position" v))
###         ("\<^const>Set.empty")))))
### ("\<^const>Pure.eq" ("_applC" ("_position" closed_env) ("_position" \<rho>))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" x) ("_position" v))
###     ("\<^const>HOL.implies"
###       ("\<^const>Set.member" ("_position" x)
###         ("_applC" ("_position" sdom) ("_position" \<rho>)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" lookup)
###             ("_cargs" ("_position" \<rho>) ("_position" x)))
###           ("_applC" ("_position" Some) ("_position" v)))
###         ("\<^const>HOL.eq" ("_applC" ("_position" FV) ("_position" v))
###           ("\<^const>Set.empty"))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 102 of "$AFP/Decl_Sem_Fun_PL/BigStepLam.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" equiv_env)
###     ("_cargs" ("_position" \<rho>) ("_position" \<rho>')))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_applC" ("_position" sdom) ("_position" \<rho>))
###       ("_applC" ("_position" sdom) ("_position" \<rho>')))
###     ("\<^const>HOL.All_binder" ("_position" x)
###       ("\<^const>HOL.implies"
###         ("\<^const>Set.member" ("_position" x)
###           ("_applC" ("_position" sdom) ("_position" \<rho>)))
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" lookup)
###             ("_cargs" ("_position" \<rho>) ("_position" x)))
###           ("_applC" ("_position" lookup)
###             ("_cargs" ("_position" \<rho>') ("_position" x))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" equiv_env)
###     ("_cargs" ("_position" \<rho>) ("_position" \<rho>')))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_applC" ("_position" sdom) ("_position" \<rho>))
###       ("_applC" ("_position" sdom) ("_position" \<rho>')))
###     ("\<^const>HOL.All_binder" ("_position" x)
###       ("\<^const>HOL.eq"
###         ("\<^const>Set.member" ("_position" x)
###           ("\<^const>SmallStepLam.reduce"
###             ("_applC" ("_position" sdom) ("_position" \<rho>))
###             ("_applC" ("_position" lookup)
###               ("_cargs" ("_position" \<rho>) ("_position" x)))))
###         ("_applC" ("_position" lookup)
###           ("_cargs" ("_position" \<rho>') ("_position" x)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### theory "Draft.BigStepLam"
### 0.691s elapsed time, 1.259s cpu time, 0.112s GC time
Loading theory "Draft.BigStepLamMoreTemplates"
val templateLemmas =
   [("BigStepLam.bs_env_closed",
     "bs_env ?\<rho> ?\<rho>' ==> closed_env ?\<rho>'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("BigStepLam.bs_val_is_val", "bs_val ?w ?v ==> is_val ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("BigStepLam.bs_env_dom",
     "bs_env ?\<rho> ?\<rho>' ==> set (map fst ?\<rho>) = sdom ?\<rho>'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("BigStepLam.psubst_change",
     "equiv_env ?\<rho> ?\<rho>' ==>
      psubst ?\<rho> ?e = psubst ?\<rho>' ?e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("BigStepLam.app_red_cong1",
     "?e1.0 \<longrightarrow>* ?e1' ==>
      EApp ?e1.0 ?e2.0 \<longrightarrow>* EApp ?e1' ?e2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("BigStepLam.app_red_cong2",
     "?e2.0 \<longrightarrow>* ?e2' ==>
      EApp ?e1.0 ?e2.0 \<longrightarrow>* EApp ?e1.0 ?e2'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("BigStepLam.lookup_none_notin_dom",
     "lookup ?\<rho> ?x = None ==> ?x ~: sdom ?\<rho>",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 1), template_var 0),
          template_hole 3)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_var 1))
               )
           ))),
    ("BigStepLam.subst_id_fv", "?x ~: FV ?e ==> subst ?x ?v ?e = ?e",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_app (template_hole 2, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0),
           template_var 1),
         template_var 1))),
    ("BigStepLam.multi_step_trans",
     "[| ?e1.0 \<longrightarrow>* ?e2.0; ?e2.0 \<longrightarrow>* ?e3.0 |]
      ==> ?e1.0 \<longrightarrow>* ?e3.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("BigStepLam.sdom_cons_xx",
     "sdom ((?x, EVar ?x) # ?\<rho>) = sdom ?\<rho> - {?x}",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app (template_hole 3, template_var 1))),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 6, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0)))),
    ("BigStepLam.psubst_fv",
     "closed_env ?\<rho> ==> FV (psubst ?\<rho> ?e) = FV ?e - sdom ?\<rho>",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 0)),
           template_app (template_hole 0, template_var 1))))),
    ("BigStepLam.if_red_cong1",
     "?e1.0 \<longrightarrow>* ?e1' ==>
      EIf ?e1.0 ?e2.0 ?e3.0 \<longrightarrow>* EIf ?e1' ?e2.0 ?e3.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("BigStepLam.prim_red_cong1",
     "?e1.0 \<longrightarrow>* ?e1' ==>
      EPrim ?f ?e1.0 ?e2.0 \<longrightarrow>* EPrim ?f ?e1' ?e2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 3),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2),
               template_var 0))
           ))),
    ("BigStepLam.prim_red_cong2",
     "?e2.0 \<longrightarrow>* ?e2' ==>
      EPrim ?f ?e1.0 ?e2.0 \<longrightarrow>* EPrim ?f ?e1.0 ?e2'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("BigStepLam.psubst_id",
     "FV ?e Int sdom ?\<rho> = {} ==> psubst ?\<rho> ?e = ?e",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 1)),
            template_app (template_hole 3, template_var 0)),
          template_hole 2)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("BigStepLam.bsenv_nil",
     "[| bs_env [] ?\<rho>'; ?\<rho>' = [] ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 1, template_hole 0)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("BigStepLam.big_step_fun",
     "[| ?\<rho> \<turnstile> ?e \<Down> ?v;
         ?\<rho> \<turnstile> ?e \<Down> ?v' |]
      ==> ?v = ?v'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("BigStepLam.bs_nat_inv",
     "[| bs_val (BNat ?n) ?v; ?v = ENat ?n ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app (template_hole 0, template_var 2))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("BigStepLam.closed_env_cons",
     "[| FV ?v = {}; closed_env ?\<rho>'' |]
      ==> closed_env ((?a, ?v) # ?\<rho>'')",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 2), template_hole 3),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2)),
               template_var 1))
           ))),
    ("BigStepLam.sdom_cons_v",
     "FV ?v = {} ==> sdom ((?x, ?v) # ?\<rho>) = insert ?x (sdom ?\<rho>)",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 2), template_hole 4)],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2)),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_hole 3, template_var 0))))),
    ("BigStepLam.eval_nat_inv",
     "[| ?\<rho> \<turnstile> ENat ?n \<Down> ?v; ?v = BNat ?n ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_app (template_hole 2, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app (template_hole 0, template_var 2))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("BigStepLam.eval_var_inv",
     "[| ?\<rho> \<turnstile> EVar ?x \<Down> ?v;
         lookup ?\<rho> ?x = Some ?v ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_app (template_hole 3, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_app (template_hole 0, template_var 1))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("BigStepLam.lookup_some_in_dom",
     "[| lookup ?\<rho> ?x = Some ?v; ?v ~= EVar ?x |]
      ==> ?x : sdom ?\<rho>",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 2), template_var 1),
          template_app (template_hole 5, template_var 0)),
        template_negation
         (
            template_equation
             (template_var 0,
              template_app (template_hole 2, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 2))
           ))),
    ("BigStepLam.eval_lam_inv",
     "[| ?\<rho> \<turnstile> ELam ?x ?e \<Down> ?v;
         ?v = BClos ?x ?e ?\<rho> ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 4))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("BigStepLam.lookup_bs_env",
     "[| bs_env ?\<rho> ?\<rho>'; lookup ?\<rho> ?x = Some ?w |]
      ==> EX v. lookup ?\<rho>' ?x = Some v & bs_val ?w v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 3), template_var 1),
          template_app (template_hole 6, template_var 0))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("BigStepLam.subst_psubst",
     "[| closed_env ?\<rho>; FV ?v = {} |]
      ==> subst ?x ?v (psubst ((?x, EVar ?x) # ?\<rho>) ?e) =
          psubst ((?x, ?v) # ?\<rho>) ?e",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 3)),
        template_equation
         (template_app (template_hole 7, template_var 2), template_hole 6)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 1),
             template_var 2),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_app (template_hole 0, template_var 1))),
                 template_var 3)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 2)),
               template_var 3)),
           template_var 0)))),
    ("BigStepLam.sound_wrt_small_step",
     "[| [] \<turnstile> ?e \<Down> ?v; FV ?e = {} |]
      ==> EX v' ob.
             ?e \<longrightarrow>* v' &
             isval v' & observe v' ob & bs_observe ?v ob",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_hole 10),
                template_var 1),
              template_var 0)
            ),
        template_equation
         (template_app (template_hole 8, template_var 1), template_hole 7)],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("BigStepLam.big_small_step",
     "[| ?\<rho> \<turnstile> ?e \<Down> ?w; bs_env ?\<rho> ?\<rho>';
         FV ?e <= set (map fst ?\<rho>) |]
      ==> EX v. psubst ?\<rho>' ?e \<longrightarrow>* v &
                is_val v & bs_val ?w v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 12, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 3),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_app (template_hole 9, template_var 2),
          template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 3)))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("BigStepLam.bs_env_inv1",
     "[| bs_env ((?x, ?w) # ?\<rho>) ?\<rho>';
         !!v \<rho>'.
            [| ?\<rho>' = (?x, v) # \<rho>'; bs_val ?w v;
               bs_env ?\<rho> \<rho>' |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 4),
                      template_var 3)),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("BigStepLam.eval_prim_inv",
     "[| ?\<rho> \<turnstile> EPrim ?f ?e1.0 ?e2.0 \<Down> ?v;
         !!n1 n2.
            [| ?v = BNat (?f n1 n2);
               ?\<rho> \<turnstile> ?e1.0 \<Down> BNat n1;
               ?\<rho> \<turnstile> ?e2.0 \<Down> BNat n2 |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 5),
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("BigStepLam.eval_app_inv",
     "[| ?\<rho> \<turnstile> EApp ?e1.0 ?e2.0 \<Down> ?v;
         !!x e \<rho>' arg.
            [| ?\<rho> \<turnstile> ?e1.0 \<Down> BClos x e \<rho>';
               ?\<rho> \<turnstile> ?e2.0 \<Down> arg;
               (x, arg) # \<rho>' \<turnstile> e \<Down> ?v |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 4),
                template_app
                 (template_app (template_hole 7, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("BigStepLam.bs_clos_inv",
     "[| bs_val (BClos ?x ?e ?\<rho>'') ?v1.0;
         !!\<rho>'.
            [| ?v1.0 = ELam ?x (psubst ((?x, EVar ?x) # \<rho>') ?e);
               bs_env ?\<rho>'' \<rho>';
               FV (psubst ((?x, EVar ?x) # \<rho>') ?e) <= {?x} |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app
                   (template_app (template_hole 12, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate (template_var 0))),
    ("BigStepLam.eval_if_inv",
     "[| ?\<rho> \<turnstile> EIf ?e1.0 ?e2.0 ?e3.0 \<Down> ?v;
         [| ?\<rho> \<turnstile> ?e1.0 \<Down> BNat 0;
            ?\<rho> \<turnstile> ?e3.0 \<Down> ?v |]
         ==> ?P;
         !!n. [| ?\<rho> \<turnstile> ?e1.0 \<Down> BNat n; 0 < n;
                 ?\<rho> \<turnstile> ?e2.0 \<Down> ?v |]
              ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 5),
                template_app
                 (template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 5, template_var 5),
                   template_var 4),
                 template_app (template_hole 3, template_hole 2))
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_app (template_hole 5, template_var 5),
                     template_var 2),
                   template_var 1)
                 )],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.BigStepLamMoreTemplates"
### 0.359s elapsed time, 0.535s cpu time, 0.070s GC time
val it = (): unit
