Loading theory "Draft.Lambda" (required by "Draft.ValuePropsMoreTemplates" via "Draft.ValueProps" via "Draft.Values")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ValuePropsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ValuePropsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ValuePropsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.119s elapsed time, 0.494s cpu time, 0.043s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ValuePropsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.232s elapsed time, 0.946s cpu time, 0.043s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ValuePropsMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.322s elapsed time, 1.291s cpu time, 0.133s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ValuePropsMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.982s elapsed time, 3.654s cpu time, 0.896s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Lambda"
### 1.272s elapsed time, 4.800s cpu time, 0.940s GC time
Loading theory "Draft.Values" (required by "Draft.ValuePropsMoreTemplates" via "Draft.ValueProps")
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.087s elapsed time, 3.923s cpu time, 0.912s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "val_le", "fun_le"
  Proving monotonicity ...
### Ambiguous input (line 32 of "$AFP/Decl_Sem_Fun_PL/Values.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^const>Values.val_le" ("_position" \<rho>) ("_position" \<rho>'))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" x) ("_position" v))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" lookup)
###           ("_cargs" ("_position" \<rho>) ("_position" x)))
###         ("_applC" ("_position" Some) ("_position" v)))
###       ("\<^const>HOL.Ex_binder" ("_position" v')
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" lookup)
###               ("_cargs" ("_position" \<rho>') ("_position" x)))
###             ("_applC" ("_position" Some) ("_position" v')))
###           ("\<^fixed>env_le" ("_position" v) ("_position" v')))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>env_le" ("_position" \<rho>) ("_position" \<rho>'))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" x) ("_position" v))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" lookup)
###           ("_cargs" ("_position" \<rho>) ("_position" x)))
###         ("_applC" ("_position" Some) ("_position" v)))
###       ("\<^const>HOL.Ex_binder" ("_position" v')
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" lookup)
###               ("_cargs" ("_position" \<rho>') ("_position" x)))
###             ("_applC" ("_position" Some) ("_position" v')))
###           ("\<^fixed>env_le" ("_position" v) ("_position" v')))))))
### ("\<^const>Pure.eq"
###   ("\<^const>Values.val_le" ("_position" \<rho>) ("_position" \<rho>'))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" x) ("_position" v))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" lookup)
###           ("_cargs" ("_position" \<rho>) ("_position" x)))
###         ("_applC" ("_position" Some) ("_position" v)))
###       ("\<^const>HOL.Ex_binder" ("_position" v')
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" lookup)
###               ("_cargs" ("_position" \<rho>') ("_position" x)))
###             ("_applC" ("_position" Some) ("_position" v')))
###           ("\<^const>Values.val_le" ("_position" v) ("_position" v')))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>env_le" ("_position" \<rho>) ("_position" \<rho>'))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" x) ("_position" v))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" lookup)
###           ("_cargs" ("_position" \<rho>) ("_position" x)))
###         ("_applC" ("_position" Some) ("_position" v)))
###       ("\<^const>HOL.Ex_binder" ("_position" v')
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" lookup)
###               ("_cargs" ("_position" \<rho>') ("_position" x)))
###             ("_applC" ("_position" Some) ("_position" v')))
###           ("\<^const>Values.val_le" ("_position" v) ("_position" v')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Values"
### 0.345s elapsed time, 0.868s cpu time, 0.106s GC time
Loading theory "Draft.ValueProps" (required by "Draft.ValuePropsMoreTemplates")
### Ambiguous input (line 8 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.val_le" ("_applC" ("_position" VFun) ("_position" t1))
###     ("_applC" ("_position" VFun) ("_position" t2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.env_le" ("_applC" ("_position" VFun) ("_position" t1))
###     ("_applC" ("_position" VFun) ("_position" t2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 9 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.val_le" ("_applC" ("_position" VFun) ("_position" t2))
###     ("_applC" ("_position" VNat) ("_position" x1))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.env_le" ("_applC" ("_position" VFun) ("_position" t2))
###     ("_applC" ("_position" VNat) ("_position" x1))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 11 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.val_le" ("_position" v)
###     ("_applC" ("_position" VNat) ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.env_le" ("_position" v)
###     ("_applC" ("_position" VNat) ("_position" n))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 12 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.val_le" ("_applC" ("_position" VNat) ("_position" n))
###     ("_position" v)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.env_le" ("_applC" ("_position" VNat) ("_position" n))
###     ("_position" v)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 13 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.val_le" ("_applC" ("_position" VFun) ("_position" t))
###     ("_position" v)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.env_le" ("_applC" ("_position" VFun) ("_position" t))
###     ("_position" v)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 14 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.val_le" ("_position" v)
###     ("_applC" ("_position" VFun) ("_position" t))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.env_le" ("_position" v)
###     ("_applC" ("_position" VFun) ("_position" t))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 34 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" v) ("_position" t))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" n)
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" val_size) ("_position" v))
###           ("_applC" ("_position" fun_size) ("_position" t))))
###       ("\<^const>HOL.conj"
###         ("\<^const>Values.val_le" ("_position" v) ("_position" v))
###         ("\<^const>Values.fun_le" ("_position" t) ("_position" t))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" v) ("_position" t))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" n)
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" val_size) ("_position" v))
###           ("_applC" ("_position" fun_size) ("_position" t))))
###       ("\<^const>HOL.conj"
###         ("\<^const>Values.env_le" ("_position" v) ("_position" v))
###         ("\<^const>Values.fun_le" ("_position" t) ("_position" t))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Ambiguous input (line 73 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.val_le" ("_position" v) ("_position" v)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.env_le" ("_position" v) ("_position" v)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 78 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" val_eq)
###     ("_cargs" ("_position" v1) ("_position" v2)))
###   ("\<^const>HOL.conj"
###     ("\<^const>Values.env_le" ("_position" v1) ("_position" v2))
###     ("\<^const>Values.env_le" ("_position" v2) ("_position" v1))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" val_eq)
###     ("_cargs" ("_position" v1) ("_position" v2)))
###   ("\<^const>HOL.conj"
###     ("\<^const>Values.val_le" ("_position" v1) ("_position" v2))
###     ("\<^const>Values.env_le" ("_position" v2) ("_position" v1))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" val_eq)
###     ("_cargs" ("_position" v1) ("_position" v2)))
###   ("\<^const>HOL.conj"
###     ("\<^const>Values.env_le" ("_position" v1) ("_position" v2))
###     ("\<^const>Values.val_le" ("_position" v2) ("_position" v1))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" val_eq)
###     ("_cargs" ("_position" v1) ("_position" v2)))
###   ("\<^const>HOL.conj"
###     ("\<^const>Values.val_le" ("_position" v1) ("_position" v2))
###     ("\<^const>Values.val_le" ("_position" v2) ("_position" v1))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 83 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.val_eq" ("_position" t) ("_position" t')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.val_eq"
###       ("_applC" ("_position" VFun) ("_position" t))
###       ("_applC" ("_position" VFun) ("_position" t')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.fun_eq" ("_position" t) ("_position" t')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.val_eq"
###       ("_applC" ("_position" VFun) ("_position" t))
###       ("_applC" ("_position" VFun) ("_position" t')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.val_eq" ("_position" t) ("_position" t')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.fun_eq"
###       ("_applC" ("_position" VFun) ("_position" t))
###       ("_applC" ("_position" VFun) ("_position" t')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.fun_eq" ("_position" t) ("_position" t')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.fun_eq"
###       ("_applC" ("_position" VFun) ("_position" t))
###       ("_applC" ("_position" VFun) ("_position" t')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 89 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.val_eq" ("_position" v) ("_position" v)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.fun_eq" ("_position" v) ("_position" v)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 92 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.val_eq" ("_position" v1) ("_position" v2)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.val_eq" ("_position" v2) ("_position" v1))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.fun_eq" ("_position" v1) ("_position" v2)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.val_eq" ("_position" v2) ("_position" v1))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.val_eq" ("_position" v1) ("_position" v2)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.fun_eq" ("_position" v2) ("_position" v1))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.fun_eq" ("_position" v1) ("_position" v2)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.fun_eq" ("_position" v2) ("_position" v1))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 96 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" v2) ("_position" t2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" n)
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" val_size) ("_position" v2))
###           ("_applC" ("_position" fun_size) ("_position" t2))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" v1) ("_position" v3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.env_le" ("_position" v1) ("_position" v2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.env_le" ("_position" v2) ("_position" v3))
###               ("\<^const>Values.env_le" ("_position" v1)
###                 ("_position" v3)))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" t1) ("_position" t3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.fun_le" ("_position" t1) ("_position" t2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.fun_le" ("_position" t2) ("_position" t3))
###               ("\<^const>Values.fun_le" ("_position" t1)
###                 ("_position" t3)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" v2) ("_position" t2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" n)
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" val_size) ("_position" v2))
###           ("_applC" ("_position" fun_size) ("_position" t2))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" v1) ("_position" v3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.val_le" ("_position" v1) ("_position" v2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.env_le" ("_position" v2) ("_position" v3))
###               ("\<^const>Values.env_le" ("_position" v1)
###                 ("_position" v3)))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" t1) ("_position" t3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.fun_le" ("_position" t1) ("_position" t2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.fun_le" ("_position" t2) ("_position" t3))
###               ("\<^const>Values.fun_le" ("_position" t1)
###                 ("_position" t3)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" v2) ("_position" t2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" n)
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" val_size) ("_position" v2))
###           ("_applC" ("_position" fun_size) ("_position" t2))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" v1) ("_position" v3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.env_le" ("_position" v1) ("_position" v2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.val_le" ("_position" v2) ("_position" v3))
###               ("\<^const>Values.env_le" ("_position" v1)
###                 ("_position" v3)))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" t1) ("_position" t3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.fun_le" ("_position" t1) ("_position" t2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.fun_le" ("_position" t2) ("_position" t3))
###               ("\<^const>Values.fun_le" ("_position" t1)
###                 ("_position" t3)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" v2) ("_position" t2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" n)
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" val_size) ("_position" v2))
###           ("_applC" ("_position" fun_size) ("_position" t2))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" v1) ("_position" v3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.val_le" ("_position" v1) ("_position" v2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.val_le" ("_position" v2) ("_position" v3))
###               ("\<^const>Values.env_le" ("_position" v1)
###                 ("_position" v3)))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" t1) ("_position" t3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.fun_le" ("_position" t1) ("_position" t2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.fun_le" ("_position" t2) ("_position" t3))
###               ("\<^const>Values.fun_le" ("_position" t1)
###                 ("_position" t3)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" v2) ("_position" t2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" n)
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" val_size) ("_position" v2))
###           ("_applC" ("_position" fun_size) ("_position" t2))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" v1) ("_position" v3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.env_le" ("_position" v1) ("_position" v2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.env_le" ("_position" v2) ("_position" v3))
###               ("\<^const>Values.val_le" ("_position" v1)
###                 ("_position" v3)))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" t1) ("_position" t3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.fun_le" ("_position" t1) ("_position" t2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.fun_le" ("_position" t2) ("_position" t3))
###               ("\<^const>Values.fun_le" ("_position" t1)
###                 ("_position" t3)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" v2) ("_position" t2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" n)
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" val_size) ("_position" v2))
###           ("_applC" ("_position" fun_size) ("_position" t2))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" v1) ("_position" v3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.val_le" ("_position" v1) ("_position" v2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.env_le" ("_position" v2) ("_position" v3))
###               ("\<^const>Values.val_le" ("_position" v1)
###                 ("_position" v3)))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" t1) ("_position" t3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.fun_le" ("_position" t1) ("_position" t2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.fun_le" ("_position" t2) ("_position" t3))
###               ("\<^const>Values.fun_le" ("_position" t1)
###                 ("_position" t3)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" v2) ("_position" t2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" n)
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" val_size) ("_position" v2))
###           ("_applC" ("_position" fun_size) ("_position" t2))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" v1) ("_position" v3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.env_le" ("_position" v1) ("_position" v2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.val_le" ("_position" v2) ("_position" v3))
###               ("\<^const>Values.val_le" ("_position" v1)
###                 ("_position" v3)))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" t1) ("_position" t3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.fun_le" ("_position" t1) ("_position" t2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.fun_le" ("_position" t2) ("_position" t3))
###               ("\<^const>Values.fun_le" ("_position" t1)
###                 ("_position" t3)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" v2) ("_position" t2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" n)
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" val_size) ("_position" v2))
###           ("_applC" ("_position" fun_size) ("_position" t2))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" v1) ("_position" v3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.val_le" ("_position" v1) ("_position" v2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.val_le" ("_position" v2) ("_position" v3))
###               ("\<^const>Values.val_le" ("_position" v1)
###                 ("_position" v3)))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" t1) ("_position" t3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.fun_le" ("_position" t1) ("_position" t2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.fun_le" ("_position" t2) ("_position" t3))
###               ("\<^const>Values.fun_le" ("_position" t1)
###                 ("_position" t3)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 169 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Values.env_le" ("_position" v1) ("_position" v2)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Values.env_le" ("_position" v2) ("_position" v3)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.val_le" ("_position" v1) ("_position" v3))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Values.val_le" ("_position" v1) ("_position" v2)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Values.env_le" ("_position" v2) ("_position" v3)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.val_le" ("_position" v1) ("_position" v3))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Values.env_le" ("_position" v1) ("_position" v2)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Values.val_le" ("_position" v2) ("_position" v3)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.val_le" ("_position" v1) ("_position" v3))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Values.val_le" ("_position" v1) ("_position" v2)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Values.val_le" ("_position" v2) ("_position" v3)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.val_le" ("_position" v1) ("_position" v3))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Values.env_le" ("_position" v1) ("_position" v2)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Values.env_le" ("_position" v2) ("_position" v3)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.env_le" ("_position" v1) ("_position" v3))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Values.val_le" ("_position" v1) ("_position" v2)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Values.env_le" ("_position" v2) ("_position" v3)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.env_le" ("_position" v1) ("_position" v3))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Values.env_le" ("_position" v1) ("_position" v2)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Values.val_le" ("_position" v2) ("_position" v3)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.env_le" ("_position" v1) ("_position" v3))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Values.val_le" ("_position" v1) ("_position" v2)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Values.val_le" ("_position" v2) ("_position" v3)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.env_le" ("_position" v1) ("_position" v3))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 176 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.val_eq" ("_position" v1) ("_position" v2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.fun_eq" ("_position" v1) ("_position" v2)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 176 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.val_eq" ("_position" v2) ("_position" v3)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.fun_eq" ("_position" v2) ("_position" v3)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 176 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.val_eq" ("_position" v1) ("_position" v3)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.fun_eq" ("_position" v1) ("_position" v3)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 179 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.val_eq" ("_position" t) ("_position" t)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.fun_eq" ("_position" t) ("_position" t)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 183 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.val_eq" ("_position" t1) ("_position" t2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.fun_eq" ("_position" t1) ("_position" t2)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 183 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.val_eq" ("_position" t2) ("_position" t3)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.fun_eq" ("_position" t2) ("_position" t3)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 183 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.val_eq" ("_position" t1) ("_position" t3)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.fun_eq" ("_position" t1) ("_position" t3)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 194 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValueProps.fun_eq" ("_position" t1') ("_position" t1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValueProps.fun_eq" ("_position" t2') ("_position" t2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.val_eq"
###       ("\<^const>List.append" ("_position" t1') ("_position" t2'))
###       ("\<^const>List.append" ("_position" t1) ("_position" t2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValueProps.val_eq" ("_position" t1') ("_position" t1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValueProps.fun_eq" ("_position" t2') ("_position" t2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.val_eq"
###       ("\<^const>List.append" ("_position" t1') ("_position" t2'))
###       ("\<^const>List.append" ("_position" t1) ("_position" t2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValueProps.fun_eq" ("_position" t1') ("_position" t1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValueProps.val_eq" ("_position" t2') ("_position" t2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.val_eq"
###       ("\<^const>List.append" ("_position" t1') ("_position" t2'))
###       ("\<^const>List.append" ("_position" t1) ("_position" t2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValueProps.val_eq" ("_position" t1') ("_position" t1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValueProps.val_eq" ("_position" t2') ("_position" t2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.val_eq"
###       ("\<^const>List.append" ("_position" t1') ("_position" t2'))
###       ("\<^const>List.append" ("_position" t1) ("_position" t2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValueProps.fun_eq" ("_position" t1') ("_position" t1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValueProps.fun_eq" ("_position" t2') ("_position" t2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.fun_eq"
###       ("\<^const>List.append" ("_position" t1') ("_position" t2'))
###       ("\<^const>List.append" ("_position" t1) ("_position" t2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValueProps.val_eq" ("_position" t1') ("_position" t1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValueProps.fun_eq" ("_position" t2') ("_position" t2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.fun_eq"
###       ("\<^const>List.append" ("_position" t1') ("_position" t2'))
###       ("\<^const>List.append" ("_position" t1) ("_position" t2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValueProps.fun_eq" ("_position" t1') ("_position" t1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValueProps.val_eq" ("_position" t2') ("_position" t2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.fun_eq"
###       ("\<^const>List.append" ("_position" t1') ("_position" t2'))
###       ("\<^const>List.append" ("_position" t1) ("_position" t2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValueProps.val_eq" ("_position" t1') ("_position" t1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValueProps.val_eq" ("_position" t2') ("_position" t2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.fun_eq"
###       ("\<^const>List.append" ("_position" t1') ("_position" t2'))
###       ("\<^const>List.append" ("_position" t1) ("_position" t2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 200 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.val_eq"
###     ("\<^const>List.append" ("_position" t2) ("_position" t1))
###     ("\<^const>List.append" ("_position" t1) ("_position" t2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.fun_eq"
###     ("\<^const>List.append" ("_position" t2) ("_position" t1))
###     ("\<^const>List.append" ("_position" t1) ("_position" t2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 204 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.val_le" ("_applC" ("_position" VNat) ("_position" n))
###       ("_position" v)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" v)
###       ("_applC" ("_position" VNat) ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.env_le" ("_applC" ("_position" VNat) ("_position" n))
###       ("_position" v)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" v)
###       ("_applC" ("_position" VNat) ("_position" n)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 207 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.val_le" ("_position" v)
###       ("_applC" ("_position" VNat) ("_position" n))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" v)
###       ("_applC" ("_position" VNat) ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.env_le" ("_position" v)
###       ("_applC" ("_position" VNat) ("_position" n))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" v)
###       ("_applC" ("_position" VNat) ("_position" n)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 210 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.val_le" ("_applC" ("_position" VNat) ("_position" n))
###       ("_applC" ("_position" VNat) ("_position" n'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.env_le" ("_applC" ("_position" VNat) ("_position" n))
###       ("_applC" ("_position" VNat) ("_position" n'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.ValueProps"
### 0.226s elapsed time, 0.494s cpu time, 0.085s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.994s elapsed time, 5.983s cpu time, 1.156s GC time
Loading theory "Draft.Templates" (required by "Draft.ValuePropsMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.048s elapsed time, 0.062s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ValuePropsMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.458s elapsed time, 0.521s cpu time, 0.080s GC time
Loading theory "Draft.ValuePropsMoreTemplates"
val templateLemmas =
   [("ValueProps.fun_eq_refl", "?t \<sim> ?t",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("ValueProps.val_eq_refl", "?v \<sim> ?v",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("ValueProps.fun_le_refl", "?t \<lesssim> ?t",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("ValueProps.val_le_refl", "?v \<sqsubseteq> ?v",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("ValueProps.append_eq_symm", "?t2.0 @ ?t1.0 \<sim> ?t1.0 @ ?t2.0",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("ValueProps.append_leq_symm", "?t2.0 @ ?t1.0 \<lesssim> ?t1.0 @ ?t2.0",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("ValueProps.val_eq_symm", "?v1.0 \<sim> ?v2.0 ==> ?v2.0 \<sim> ?v1.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("ValueProps.le_fun_nat_inv",
     "VFun ?t2.0 \<sqsubseteq> VNat ?x1.0 ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_app (template_hole 0, template_var 1))
            )],
       template_predicate (template_var 0))),
    ("ValueProps.vfun_eq", "?t \<sim> ?t' ==> VFun ?t \<sim> VFun ?t'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("ValueProps.le_any_nat", "?v \<sqsubseteq> VNat ?n ==> ?v = VNat ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_equation
        (template_var 1, template_app (template_hole 1, template_var 0)))),
    ("ValueProps.le_nat_any", "VNat ?n \<sqsubseteq> ?v ==> ?v = VNat ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_var 0, template_app (template_hole 1, template_var 1)))),
    ("ValueProps.fun_le_cons",
     "?a # ?t1.0 \<lesssim> ?t2.0 ==> ?t1.0 \<lesssim> ?t2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), template_var 0)
           ))),
    ("ValueProps.le_nat_nat", "VNat ?n \<sqsubseteq> VNat ?n' ==> ?n = ?n'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)),
              template_app (template_hole 1, template_var 0))
            )],
       template_equation (template_var 1, template_var 0))),
    ("ValueProps.val_size_mem_l",
     "(?a, ?b) : set ?t ==> val_size ?a < fun_size ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_app (template_hole 3, template_var 0))
            )],
       template_inequation
        (less_than, template_app (template_hole 1, template_var 2),
         template_app (template_hole 0, template_var 0)))),
    ("ValueProps.val_size_mem_r",
     "(?a, ?b) : set ?t ==> val_size ?b < fun_size ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_app (template_hole 3, template_var 0))
            )],
       template_inequation
        (less_than, template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("ValueProps.fun_eq_trans",
     "[| ?t1.0 \<sim> ?t2.0; ?t2.0 \<sim> ?t3.0 |] ==> ?t1.0 \<sim> ?t3.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("ValueProps.val_eq_trans",
     "[| ?v1.0 \<sim> ?v2.0; ?v2.0 \<sim> ?v3.0 |] ==> ?v1.0 \<sim> ?v3.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("ValueProps.fun_le_trans",
     "[| ?t1.0 \<lesssim> ?t2.0; ?t2.0 \<lesssim> ?t3.0 |]
      ==> ?t1.0 \<lesssim> ?t3.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("ValueProps.val_le_trans",
     "[| ?v1.0 \<sqsubseteq> ?v2.0; ?v2.0 \<sqsubseteq> ?v3.0 |]
      ==> ?v1.0 \<sqsubseteq> ?v3.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("ValueProps.val_size_mem",
     "(?a, ?b) : set ?t ==> val_size ?a + val_size ?b < fun_size ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_app (template_hole 4, template_var 0))
            )],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("ValueProps.le_any_nat_inv",
     "[| ?v \<sqsubseteq> VNat ?n; ?v = VNat ?n ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            ),
        template_implication
         ([template_equation
            (template_var 2,
             template_app (template_hole 1, template_var 1))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("ValueProps.le_nat_any_inv",
     "[| VNat ?n \<sqsubseteq> ?v; ?v = VNat ?n ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app (template_hole 1, template_var 2))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("ValueProps.vfun_le_inv",
     "[| VFun ?t1.0 \<sqsubseteq> VFun ?t2.0;
         ?t1.0 \<lesssim> ?t2.0 ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_app (template_hole 1, template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("ValueProps.append_fun_equiv",
     "[| ?t1' \<sim> ?t1.0; ?t2' \<sim> ?t2.0 |]
      ==> ?t1' @ ?t2' \<sim> ?t1.0 @ ?t2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("ValueProps.append_fun_le",
     "[| ?t1' \<lesssim> ?t1.0; ?t2' \<lesssim> ?t2.0 |]
      ==> ?t1' @ ?t2' \<lesssim> ?t1.0 @ ?t2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("ValueProps.val_fun_le_refl",
     "ALL v t.
         ?n = val_size v + fun_size t -->
         v \<sqsubseteq> v & t \<lesssim> t",
     template_predicate (template_app (template_hole 9, t_empty))),
    ("ValueProps.le_any_fun_inv",
     "[| ?v \<sqsubseteq> VFun ?t;
         !!t1. [| ?v = VFun t1; t1 \<lesssim> ?t |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("ValueProps.le_fun_any_inv",
     "[| VFun ?t \<sqsubseteq> ?v;
         !!t2. [| ?v = VFun t2; ?t \<lesssim> t2 |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("ValueProps.val_le_fun_le_trans",
     "ALL v2 t2.
         ?n = val_size v2 + fun_size t2 -->
         (ALL v1 v3.
             v1 \<sqsubseteq> v2 -->
             v2 \<sqsubseteq> v3 --> v1 \<sqsubseteq> v3) &
         (ALL t1 t3.
             t1 \<lesssim> t2 --> t2 \<lesssim> t3 --> t1 \<lesssim> t3)",
     template_predicate (template_app (template_hole 9, t_empty))),
    ("ValueProps.fun_le_inv",
     "[| ?t1.0 \<lesssim> ?t2.0;
         ALL v1 v2.
            (v1, v2) : set ?t1.0 -->
            (EX v3 v4.
                (v3, v4) : set ?t2.0 &
                v1 \<sqsubseteq> v3 &
                v3 \<sqsubseteq> v1 &
                v2 \<sqsubseteq> v4 & v4 \<sqsubseteq> v2) ==>
         ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate (template_app (template_hole 7, t_empty))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("ValueProps.le_fun_cons_inv",
     "[| (?v1.0, ?v2.0) # ?t1.0 \<lesssim> ?t2.0;
         ALL v1 v2.
            (v1, v2) : set ((?v1.0, ?v2.0) # ?t1.0) -->
            (EX v3 v4.
                (v3, v4) : set ?t2.0 &
                v1 \<sqsubseteq> v3 &
                v3 \<sqsubseteq> v1 &
                v2 \<sqsubseteq> v4 & v4 \<sqsubseteq> v2) ==>
         ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_var 4),
                      template_var 3)),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate (template_app (template_hole 6, t_empty))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.ValuePropsMoreTemplates"
### 0.304s elapsed time, 0.395s cpu time, 0.000s GC time
val it = (): unit
