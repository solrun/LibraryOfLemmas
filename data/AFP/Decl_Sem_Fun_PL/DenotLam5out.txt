Loading theory "Draft.Lambda" (required by "Draft.DenotLam5MoreTemplates" via "Draft.DenotLam5")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.DenotLam5MoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.DenotLam5MoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.DenotLam5MoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.161s elapsed time, 0.662s cpu time, 0.043s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.DenotLam5MoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.271s elapsed time, 1.098s cpu time, 0.043s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.DenotLam5MoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.342s elapsed time, 1.370s cpu time, 0.131s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.DenotLam5MoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Lambda"
### 1.247s elapsed time, 4.741s cpu time, 0.914s GC time
Loading theory "Draft.Values" (required by "Draft.DenotLam5MoreTemplates" via "Draft.DenotLam5" via "Draft.DeclSemAsDenot")
### theory "HOL-Library.BigO"
### 0.964s elapsed time, 3.591s cpu time, 0.871s GC time
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.032s elapsed time, 3.747s cpu time, 0.783s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "val_le", "fun_le"
  Proving monotonicity ...
### Ambiguous input (line 32 of "$AFP/Decl_Sem_Fun_PL/Values.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^const>Values.val_le" ("_position" \<rho>) ("_position" \<rho>'))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" x) ("_position" v))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" lookup)
###           ("_cargs" ("_position" \<rho>) ("_position" x)))
###         ("_applC" ("_position" Some) ("_position" v)))
###       ("\<^const>HOL.Ex_binder" ("_position" v')
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" lookup)
###               ("_cargs" ("_position" \<rho>') ("_position" x)))
###             ("_applC" ("_position" Some) ("_position" v')))
###           ("\<^fixed>env_le" ("_position" v) ("_position" v')))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>env_le" ("_position" \<rho>) ("_position" \<rho>'))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" x) ("_position" v))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" lookup)
###           ("_cargs" ("_position" \<rho>) ("_position" x)))
###         ("_applC" ("_position" Some) ("_position" v)))
###       ("\<^const>HOL.Ex_binder" ("_position" v')
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" lookup)
###               ("_cargs" ("_position" \<rho>') ("_position" x)))
###             ("_applC" ("_position" Some) ("_position" v')))
###           ("\<^fixed>env_le" ("_position" v) ("_position" v')))))))
### ("\<^const>Pure.eq"
###   ("\<^const>Values.val_le" ("_position" \<rho>) ("_position" \<rho>'))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" x) ("_position" v))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" lookup)
###           ("_cargs" ("_position" \<rho>) ("_position" x)))
###         ("_applC" ("_position" Some) ("_position" v)))
###       ("\<^const>HOL.Ex_binder" ("_position" v')
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" lookup)
###               ("_cargs" ("_position" \<rho>') ("_position" x)))
###             ("_applC" ("_position" Some) ("_position" v')))
###           ("\<^const>Values.val_le" ("_position" v) ("_position" v')))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>env_le" ("_position" \<rho>) ("_position" \<rho>'))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" x) ("_position" v))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" lookup)
###           ("_cargs" ("_position" \<rho>) ("_position" x)))
###         ("_applC" ("_position" Some) ("_position" v)))
###       ("\<^const>HOL.Ex_binder" ("_position" v')
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" lookup)
###               ("_cargs" ("_position" \<rho>') ("_position" x)))
###             ("_applC" ("_position" Some) ("_position" v')))
###           ("\<^const>Values.val_le" ("_position" v) ("_position" v')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### theory "Draft.Values"
### 0.345s elapsed time, 0.884s cpu time, 0.089s GC time
Loading theory "Draft.DeclSemAsDenot" (required by "Draft.DenotLam5MoreTemplates" via "Draft.DenotLam5")
Loading theory "Draft.ValueProps" (required by "Draft.DenotLam5MoreTemplates" via "Draft.DenotLam5")
### Ambiguous input (line 9 of "$AFP/Decl_Sem_Fun_PL/DeclSemAsDenot.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" E)
###       ("_cargs" ("_applC" ("_position" EVar) ("_position" x))
###         ("_position" \<rho>)))
###     ("_Coll" ("_position" v)
###       ("\<^const>HOL.Ex_binder" ("_position" v')
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" lookup)
###               ("_cargs" ("_position" \<rho>) ("_position" x)))
###             ("_applC" ("_position" Some) ("_position" v')))
###           ("\<^const>Values.env_le" ("_position" v) ("_position" v')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" E)
###       ("_cargs" ("_applC" ("_position" EVar) ("_position" x))
###         ("_position" \<rho>)))
###     ("_Coll" ("_position" v)
###       ("\<^const>HOL.Ex_binder" ("_position" v')
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" lookup)
###               ("_cargs" ("_position" \<rho>) ("_position" x)))
###             ("_applC" ("_position" Some) ("_position" v')))
###           ("\<^const>Values.val_le" ("_position" v) ("_position" v')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 8 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.val_le" ("_applC" ("_position" VFun) ("_position" t1))
###     ("_applC" ("_position" VFun) ("_position" t2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.env_le" ("_applC" ("_position" VFun) ("_position" t1))
###     ("_applC" ("_position" VFun) ("_position" t2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 9 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.val_le" ("_applC" ("_position" VFun) ("_position" t2))
###     ("_applC" ("_position" VNat) ("_position" x1))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.env_le" ("_applC" ("_position" VFun) ("_position" t2))
###     ("_applC" ("_position" VNat) ("_position" x1))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 11 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.val_le" ("_position" v)
###     ("_applC" ("_position" VNat) ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.env_le" ("_position" v)
###     ("_applC" ("_position" VNat) ("_position" n))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 12 of "$AFP/Decl_Sem_Fun_PL/DeclSemAsDenot.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" E)
###       ("_cargs"
###         ("_applC" ("_position" EApp)
###           ("_cargs" ("_position" e1) ("_position" e2)))
###         ("_position" \<rho>)))
###     ("_Coll" ("_position" v3)
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" f)
###           ("_idts" ("_position" v2)
###             ("_idts" ("_position" v2') ("_position" v3'))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" VFun) ("_position" f))
###             ("_applC" ("_position" E)
###               ("_cargs" ("_position" e1) ("_position" \<rho>))))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" v2)
###               ("_applC" ("_position" E)
###                 ("_cargs" ("_position" e2) ("_position" \<rho>))))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" v2')
###                   ("_tuple_arg" ("_position" v3')))
###                 ("_applC" ("_position" set) ("_position" f)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Values.env_le" ("_position" v2')
###                   ("_position" v2))
###                 ("\<^const>Values.env_le" ("_position" v3)
###                   ("_position" v3'))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" E)
###       ("_cargs"
###         ("_applC" ("_position" EApp)
###           ("_cargs" ("_position" e1) ("_position" e2)))
###         ("_position" \<rho>)))
###     ("_Coll" ("_position" v3)
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" f)
###           ("_idts" ("_position" v2)
###             ("_idts" ("_position" v2') ("_position" v3'))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" VFun) ("_position" f))
###             ("_applC" ("_position" E)
###               ("_cargs" ("_position" e1) ("_position" \<rho>))))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" v2)
###               ("_applC" ("_position" E)
###                 ("_cargs" ("_position" e2) ("_position" \<rho>))))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" v2')
###                   ("_tuple_arg" ("_position" v3')))
###                 ("_applC" ("_position" set) ("_position" f)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Values.val_le" ("_position" v2')
###                   ("_position" v2))
###                 ("\<^const>Values.env_le" ("_position" v3)
###                   ("_position" v3'))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" E)
###       ("_cargs"
###         ("_applC" ("_position" EApp)
###           ("_cargs" ("_position" e1) ("_position" e2)))
###         ("_position" \<rho>)))
###     ("_Coll" ("_position" v3)
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" f)
###           ("_idts" ("_position" v2)
###             ("_idts" ("_position" v2') ("_position" v3'))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" VFun) ("_position" f))
###             ("_applC" ("_position" E)
###               ("_cargs" ("_position" e1) ("_position" \<rho>))))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" v2)
###               ("_applC" ("_position" E)
###                 ("_cargs" ("_position" e2) ("_position" \<rho>))))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" v2')
###                   ("_tuple_arg" ("_position" v3')))
###                 ("_applC" ("_position" set) ("_position" f)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Values.env_le" ("_position" v2')
###                   ("_position" v2))
###                 ("\<^const>Values.val_le" ("_position" v3)
###                   ("_position" v3'))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" E)
###       ("_cargs"
###         ("_applC" ("_position" EApp)
###           ("_cargs" ("_position" e1) ("_position" e2)))
###         ("_position" \<rho>)))
###     ("_Coll" ("_position" v3)
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" f)
###           ("_idts" ("_position" v2)
###             ("_idts" ("_position" v2') ("_position" v3'))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" VFun) ("_position" f))
###             ("_applC" ("_position" E)
###               ("_cargs" ("_position" e1) ("_position" \<rho>))))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" v2)
###               ("_applC" ("_position" E)
###                 ("_cargs" ("_position" e2) ("_position" \<rho>))))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" v2')
###                   ("_tuple_arg" ("_position" v3')))
###                 ("_applC" ("_position" set) ("_position" f)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Values.val_le" ("_position" v2')
###                   ("_position" v2))
###                 ("\<^const>Values.val_le" ("_position" v3)
###                   ("_position" v3'))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 12 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.val_le" ("_applC" ("_position" VNat) ("_position" n))
###     ("_position" v)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.env_le" ("_applC" ("_position" VNat) ("_position" n))
###     ("_position" v)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 13 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.val_le" ("_applC" ("_position" VFun) ("_position" t))
###     ("_position" v)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.env_le" ("_applC" ("_position" VFun) ("_position" t))
###     ("_position" v)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 14 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.val_le" ("_position" v)
###     ("_applC" ("_position" VFun) ("_position" t))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.env_le" ("_position" v)
###     ("_applC" ("_position" VFun) ("_position" t))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 34 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" v) ("_position" t))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" n)
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" val_size) ("_position" v))
###           ("_applC" ("_position" fun_size) ("_position" t))))
###       ("\<^const>HOL.conj"
###         ("\<^const>Values.val_le" ("_position" v) ("_position" v))
###         ("\<^const>Values.fun_le" ("_position" t) ("_position" t))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" v) ("_position" t))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" n)
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" val_size) ("_position" v))
###           ("_applC" ("_position" fun_size) ("_position" t))))
###       ("\<^const>HOL.conj"
###         ("\<^const>Values.env_le" ("_position" v) ("_position" v))
###         ("\<^const>Values.fun_le" ("_position" t) ("_position" t))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 73 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.val_le" ("_position" v) ("_position" v)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.env_le" ("_position" v) ("_position" v)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 78 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" val_eq)
###     ("_cargs" ("_position" v1) ("_position" v2)))
###   ("\<^const>HOL.conj"
###     ("\<^const>Values.env_le" ("_position" v1) ("_position" v2))
###     ("\<^const>Values.env_le" ("_position" v2) ("_position" v1))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" val_eq)
###     ("_cargs" ("_position" v1) ("_position" v2)))
###   ("\<^const>HOL.conj"
###     ("\<^const>Values.val_le" ("_position" v1) ("_position" v2))
###     ("\<^const>Values.env_le" ("_position" v2) ("_position" v1))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" val_eq)
###     ("_cargs" ("_position" v1) ("_position" v2)))
###   ("\<^const>HOL.conj"
###     ("\<^const>Values.env_le" ("_position" v1) ("_position" v2))
###     ("\<^const>Values.val_le" ("_position" v2) ("_position" v1))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" val_eq)
###     ("_cargs" ("_position" v1) ("_position" v2)))
###   ("\<^const>HOL.conj"
###     ("\<^const>Values.val_le" ("_position" v1) ("_position" v2))
###     ("\<^const>Values.val_le" ("_position" v2) ("_position" v1))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 83 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.val_eq" ("_position" t) ("_position" t')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.val_eq"
###       ("_applC" ("_position" VFun) ("_position" t))
###       ("_applC" ("_position" VFun) ("_position" t')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.fun_eq" ("_position" t) ("_position" t')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.val_eq"
###       ("_applC" ("_position" VFun) ("_position" t))
###       ("_applC" ("_position" VFun) ("_position" t')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.val_eq" ("_position" t) ("_position" t')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.fun_eq"
###       ("_applC" ("_position" VFun) ("_position" t))
###       ("_applC" ("_position" VFun) ("_position" t')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.fun_eq" ("_position" t) ("_position" t')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.fun_eq"
###       ("_applC" ("_position" VFun) ("_position" t))
###       ("_applC" ("_position" VFun) ("_position" t')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 89 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.val_eq" ("_position" v) ("_position" v)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.fun_eq" ("_position" v) ("_position" v)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 92 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.val_eq" ("_position" v1) ("_position" v2)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.val_eq" ("_position" v2) ("_position" v1))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.fun_eq" ("_position" v1) ("_position" v2)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.val_eq" ("_position" v2) ("_position" v1))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.val_eq" ("_position" v1) ("_position" v2)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.fun_eq" ("_position" v2) ("_position" v1))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.fun_eq" ("_position" v1) ("_position" v2)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.fun_eq" ("_position" v2) ("_position" v1))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 96 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" v2) ("_position" t2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" n)
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" val_size) ("_position" v2))
###           ("_applC" ("_position" fun_size) ("_position" t2))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" v1) ("_position" v3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.env_le" ("_position" v1) ("_position" v2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.env_le" ("_position" v2) ("_position" v3))
###               ("\<^const>Values.env_le" ("_position" v1)
###                 ("_position" v3)))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" t1) ("_position" t3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.fun_le" ("_position" t1) ("_position" t2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.fun_le" ("_position" t2) ("_position" t3))
###               ("\<^const>Values.fun_le" ("_position" t1)
###                 ("_position" t3)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" v2) ("_position" t2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" n)
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" val_size) ("_position" v2))
###           ("_applC" ("_position" fun_size) ("_position" t2))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" v1) ("_position" v3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.val_le" ("_position" v1) ("_position" v2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.env_le" ("_position" v2) ("_position" v3))
###               ("\<^const>Values.env_le" ("_position" v1)
###                 ("_position" v3)))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" t1) ("_position" t3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.fun_le" ("_position" t1) ("_position" t2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.fun_le" ("_position" t2) ("_position" t3))
###               ("\<^const>Values.fun_le" ("_position" t1)
###                 ("_position" t3)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" v2) ("_position" t2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" n)
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" val_size) ("_position" v2))
###           ("_applC" ("_position" fun_size) ("_position" t2))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" v1) ("_position" v3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.env_le" ("_position" v1) ("_position" v2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.val_le" ("_position" v2) ("_position" v3))
###               ("\<^const>Values.env_le" ("_position" v1)
###                 ("_position" v3)))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" t1) ("_position" t3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.fun_le" ("_position" t1) ("_position" t2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.fun_le" ("_position" t2) ("_position" t3))
###               ("\<^const>Values.fun_le" ("_position" t1)
###                 ("_position" t3)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" v2) ("_position" t2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" n)
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" val_size) ("_position" v2))
###           ("_applC" ("_position" fun_size) ("_position" t2))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" v1) ("_position" v3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.val_le" ("_position" v1) ("_position" v2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.val_le" ("_position" v2) ("_position" v3))
###               ("\<^const>Values.env_le" ("_position" v1)
###                 ("_position" v3)))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" t1) ("_position" t3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.fun_le" ("_position" t1) ("_position" t2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.fun_le" ("_position" t2) ("_position" t3))
###               ("\<^const>Values.fun_le" ("_position" t1)
###                 ("_position" t3)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" v2) ("_position" t2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" n)
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" val_size) ("_position" v2))
###           ("_applC" ("_position" fun_size) ("_position" t2))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" v1) ("_position" v3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.env_le" ("_position" v1) ("_position" v2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.env_le" ("_position" v2) ("_position" v3))
###               ("\<^const>Values.val_le" ("_position" v1)
###                 ("_position" v3)))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" t1) ("_position" t3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.fun_le" ("_position" t1) ("_position" t2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.fun_le" ("_position" t2) ("_position" t3))
###               ("\<^const>Values.fun_le" ("_position" t1)
###                 ("_position" t3)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" v2) ("_position" t2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" n)
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" val_size) ("_position" v2))
###           ("_applC" ("_position" fun_size) ("_position" t2))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" v1) ("_position" v3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.val_le" ("_position" v1) ("_position" v2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.env_le" ("_position" v2) ("_position" v3))
###               ("\<^const>Values.val_le" ("_position" v1)
###                 ("_position" v3)))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" t1) ("_position" t3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.fun_le" ("_position" t1) ("_position" t2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.fun_le" ("_position" t2) ("_position" t3))
###               ("\<^const>Values.fun_le" ("_position" t1)
###                 ("_position" t3)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" v2) ("_position" t2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" n)
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" val_size) ("_position" v2))
###           ("_applC" ("_position" fun_size) ("_position" t2))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" v1) ("_position" v3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.env_le" ("_position" v1) ("_position" v2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.val_le" ("_position" v2) ("_position" v3))
###               ("\<^const>Values.val_le" ("_position" v1)
###                 ("_position" v3)))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" t1) ("_position" t3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.fun_le" ("_position" t1) ("_position" t2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.fun_le" ("_position" t2) ("_position" t3))
###               ("\<^const>Values.fun_le" ("_position" t1)
###                 ("_position" t3)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" v2) ("_position" t2))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" n)
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" val_size) ("_position" v2))
###           ("_applC" ("_position" fun_size) ("_position" t2))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" v1) ("_position" v3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.val_le" ("_position" v1) ("_position" v2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.val_le" ("_position" v2) ("_position" v3))
###               ("\<^const>Values.val_le" ("_position" v1)
###                 ("_position" v3)))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" t1) ("_position" t3))
###           ("\<^const>HOL.implies"
###             ("\<^const>Values.fun_le" ("_position" t1) ("_position" t2))
###             ("\<^const>HOL.implies"
###               ("\<^const>Values.fun_le" ("_position" t2) ("_position" t3))
###               ("\<^const>Values.fun_le" ("_position" t1)
###                 ("_position" t3)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 169 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Values.env_le" ("_position" v1) ("_position" v2)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Values.env_le" ("_position" v2) ("_position" v3)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.val_le" ("_position" v1) ("_position" v3))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Values.val_le" ("_position" v1) ("_position" v2)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Values.env_le" ("_position" v2) ("_position" v3)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.val_le" ("_position" v1) ("_position" v3))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Values.env_le" ("_position" v1) ("_position" v2)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Values.val_le" ("_position" v2) ("_position" v3)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.val_le" ("_position" v1) ("_position" v3))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Values.val_le" ("_position" v1) ("_position" v2)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Values.val_le" ("_position" v2) ("_position" v3)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.val_le" ("_position" v1) ("_position" v3))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Values.env_le" ("_position" v1) ("_position" v2)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Values.env_le" ("_position" v2) ("_position" v3)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.env_le" ("_position" v1) ("_position" v3))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Values.val_le" ("_position" v1) ("_position" v2)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Values.env_le" ("_position" v2) ("_position" v3)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.env_le" ("_position" v1) ("_position" v3))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Values.env_le" ("_position" v1) ("_position" v2)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Values.val_le" ("_position" v2) ("_position" v3)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.env_le" ("_position" v1) ("_position" v3))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Values.val_le" ("_position" v1) ("_position" v2)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Values.val_le" ("_position" v2) ("_position" v3)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.env_le" ("_position" v1) ("_position" v3))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 176 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.val_eq" ("_position" v1) ("_position" v2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.fun_eq" ("_position" v1) ("_position" v2)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 176 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.val_eq" ("_position" v2) ("_position" v3)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.fun_eq" ("_position" v2) ("_position" v3)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 176 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.val_eq" ("_position" v1) ("_position" v3)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.fun_eq" ("_position" v1) ("_position" v3)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 179 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.val_eq" ("_position" t) ("_position" t)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.fun_eq" ("_position" t) ("_position" t)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 183 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.val_eq" ("_position" t1) ("_position" t2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.fun_eq" ("_position" t1) ("_position" t2)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 183 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.val_eq" ("_position" t2) ("_position" t3)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.fun_eq" ("_position" t2) ("_position" t3)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 183 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.val_eq" ("_position" t1) ("_position" t3)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.fun_eq" ("_position" t1) ("_position" t3)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 194 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValueProps.fun_eq" ("_position" t1') ("_position" t1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValueProps.fun_eq" ("_position" t2') ("_position" t2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.val_eq"
###       ("\<^const>List.append" ("_position" t1') ("_position" t2'))
###       ("\<^const>List.append" ("_position" t1) ("_position" t2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValueProps.val_eq" ("_position" t1') ("_position" t1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValueProps.fun_eq" ("_position" t2') ("_position" t2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.val_eq"
###       ("\<^const>List.append" ("_position" t1') ("_position" t2'))
###       ("\<^const>List.append" ("_position" t1) ("_position" t2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValueProps.fun_eq" ("_position" t1') ("_position" t1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValueProps.val_eq" ("_position" t2') ("_position" t2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.val_eq"
###       ("\<^const>List.append" ("_position" t1') ("_position" t2'))
###       ("\<^const>List.append" ("_position" t1) ("_position" t2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValueProps.val_eq" ("_position" t1') ("_position" t1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValueProps.val_eq" ("_position" t2') ("_position" t2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.val_eq"
###       ("\<^const>List.append" ("_position" t1') ("_position" t2'))
###       ("\<^const>List.append" ("_position" t1) ("_position" t2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValueProps.fun_eq" ("_position" t1') ("_position" t1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValueProps.fun_eq" ("_position" t2') ("_position" t2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.fun_eq"
###       ("\<^const>List.append" ("_position" t1') ("_position" t2'))
###       ("\<^const>List.append" ("_position" t1) ("_position" t2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValueProps.val_eq" ("_position" t1') ("_position" t1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValueProps.fun_eq" ("_position" t2') ("_position" t2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.fun_eq"
###       ("\<^const>List.append" ("_position" t1') ("_position" t2'))
###       ("\<^const>List.append" ("_position" t1) ("_position" t2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValueProps.fun_eq" ("_position" t1') ("_position" t1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValueProps.val_eq" ("_position" t2') ("_position" t2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.fun_eq"
###       ("\<^const>List.append" ("_position" t1') ("_position" t2'))
###       ("\<^const>List.append" ("_position" t1) ("_position" t2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValueProps.val_eq" ("_position" t1') ("_position" t1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>ValueProps.val_eq" ("_position" t2') ("_position" t2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValueProps.fun_eq"
###       ("\<^const>List.append" ("_position" t1') ("_position" t2'))
###       ("\<^const>List.append" ("_position" t1) ("_position" t2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 200 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.val_eq"
###     ("\<^const>List.append" ("_position" t2) ("_position" t1))
###     ("\<^const>List.append" ("_position" t1) ("_position" t2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ValueProps.fun_eq"
###     ("\<^const>List.append" ("_position" t2) ("_position" t1))
###     ("\<^const>List.append" ("_position" t1) ("_position" t2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 204 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.val_le" ("_applC" ("_position" VNat) ("_position" n))
###       ("_position" v)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" v)
###       ("_applC" ("_position" VNat) ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.env_le" ("_applC" ("_position" VNat) ("_position" n))
###       ("_position" v)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" v)
###       ("_applC" ("_position" VNat) ("_position" n)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 207 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.val_le" ("_position" v)
###       ("_applC" ("_position" VNat) ("_position" n))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" v)
###       ("_applC" ("_position" VNat) ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.env_le" ("_position" v)
###       ("_applC" ("_position" VNat) ("_position" n))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" v)
###       ("_applC" ("_position" VNat) ("_position" n)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 210 of "$AFP/Decl_Sem_Fun_PL/ValueProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.val_le" ("_applC" ("_position" VNat) ("_position" n))
###       ("_applC" ("_position" VNat) ("_position" n'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.env_le" ("_applC" ("_position" VNat) ("_position" n))
###       ("_applC" ("_position" VNat) ("_position" n'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.ValueProps"
### 0.236s elapsed time, 0.721s cpu time, 0.064s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.DeclSemAsDenot"
### 0.381s elapsed time, 1.077s cpu time, 0.137s GC time
Loading theory "Draft.DenotLam5" (required by "Draft.DenotLam5MoreTemplates")
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 14 of "$AFP/Decl_Sem_Fun_PL/DenotLam5.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v3)
###         ("_applC" ("_position" E)
###           ("_cargs"
###             ("_applC" ("_position" EApp)
###               ("_cargs" ("_position" e1) ("_position" e2)))
###             ("_position" \<rho>)))))
###     ("_asm"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" f)
###           ("_idts" ("_position" v2)
###             ("_idts" ("_position" v2') ("_position" v3'))))
###         ("_bigimpl"
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member"
###                 ("_applC" ("_position" VFun) ("_position" f))
###                 ("_applC" ("_position" E)
###                   ("_cargs" ("_position" e1) ("_position" \<rho>)))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Set.member" ("_position" v2)
###                   ("_applC" ("_position" E)
###                     ("_cargs" ("_position" e2) ("_position" \<rho>)))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" v2')
###                       ("_tuple_arg" ("_position" v3')))
###                     ("_applC" ("_position" set) ("_position" f))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Values.val_le" ("_position" v2')
###                       ("_position" v2)))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Values.val_le" ("_position" v3)
###                         ("_position" v3'))))))))
###           ("\<^const>HOL.Trueprop" ("_position" P))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v3)
###         ("_applC" ("_position" E)
###           ("_cargs"
###             ("_applC" ("_position" EApp)
###               ("_cargs" ("_position" e1) ("_position" e2)))
###             ("_position" \<rho>)))))
###     ("_asm"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" f)
###           ("_idts" ("_position" v2)
###             ("_idts" ("_position" v2') ("_position" v3'))))
###         ("_bigimpl"
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member"
###                 ("_applC" ("_position" VFun) ("_position" f))
###                 ("_applC" ("_position" E)
###                   ("_cargs" ("_position" e1) ("_position" \<rho>)))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Set.member" ("_position" v2)
###                   ("_applC" ("_position" E)
###                     ("_cargs" ("_position" e2) ("_position" \<rho>)))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" v2')
###                       ("_tuple_arg" ("_position" v3')))
###                     ("_applC" ("_position" set) ("_position" f))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Values.env_le" ("_position" v2')
###                       ("_position" v2)))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Values.val_le" ("_position" v3)
###                         ("_position" v3'))))))))
###           ("\<^const>HOL.Trueprop" ("_position" P))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v3)
###         ("_applC" ("_position" E)
###           ("_cargs"
###             ("_applC" ("_position" EApp)
###               ("_cargs" ("_position" e1) ("_position" e2)))
###             ("_position" \<rho>)))))
###     ("_asm"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" f)
###           ("_idts" ("_position" v2)
###             ("_idts" ("_position" v2') ("_position" v3'))))
###         ("_bigimpl"
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member"
###                 ("_applC" ("_position" VFun) ("_position" f))
###                 ("_applC" ("_position" E)
###                   ("_cargs" ("_position" e1) ("_position" \<rho>)))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Set.member" ("_position" v2)
###                   ("_applC" ("_position" E)
###                     ("_cargs" ("_position" e2) ("_position" \<rho>)))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" v2')
###                       ("_tuple_arg" ("_position" v3')))
###                     ("_applC" ("_position" set) ("_position" f))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Values.val_le" ("_position" v2')
###                       ("_position" v2)))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Values.env_le" ("_position" v3)
###                         ("_position" v3'))))))))
###           ("\<^const>HOL.Trueprop" ("_position" P))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v3)
###         ("_applC" ("_position" E)
###           ("_cargs"
###             ("_applC" ("_position" EApp)
###               ("_cargs" ("_position" e1) ("_position" e2)))
###             ("_position" \<rho>)))))
###     ("_asm"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" f)
###           ("_idts" ("_position" v2)
###             ("_idts" ("_position" v2') ("_position" v3'))))
###         ("_bigimpl"
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member"
###                 ("_applC" ("_position" VFun) ("_position" f))
###                 ("_applC" ("_position" E)
###                   ("_cargs" ("_position" e1) ("_position" \<rho>)))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Set.member" ("_position" v2)
###                   ("_applC" ("_position" E)
###                     ("_cargs" ("_position" e2) ("_position" \<rho>)))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" v2')
###                       ("_tuple_arg" ("_position" v3')))
###                     ("_applC" ("_position" set) ("_position" f))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Values.env_le" ("_position" v2')
###                       ("_position" v2)))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Values.env_le" ("_position" v3)
###                         ("_position" v3'))))))))
###           ("\<^const>HOL.Trueprop" ("_position" P))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 19 of "$AFP/Decl_Sem_Fun_PL/DenotLam5.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_applC" ("_position" VFun) ("_position" f))
###         ("_applC" ("_position" E)
###           ("_cargs" ("_position" e1) ("_position" \<rho>)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v2)
###           ("_applC" ("_position" E)
###             ("_cargs" ("_position" e2) ("_position" \<rho>)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" v2') ("_tuple_arg" ("_position" v3')))
###             ("_applC" ("_position" set) ("_position" f))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Values.env_le" ("_position" v2') ("_position" v2)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Values.env_le" ("_position" v3)
###                 ("_position" v3'))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v3)
###       ("_applC" ("_position" E)
###         ("_cargs"
###           ("_applC" ("_position" EApp)
###             ("_cargs" ("_position" e1) ("_position" e2)))
###           ("_position" \<rho>))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_applC" ("_position" VFun) ("_position" f))
###         ("_applC" ("_position" E)
###           ("_cargs" ("_position" e1) ("_position" \<rho>)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v2)
###           ("_applC" ("_position" E)
###             ("_cargs" ("_position" e2) ("_position" \<rho>)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" v2') ("_tuple_arg" ("_position" v3')))
###             ("_applC" ("_position" set) ("_position" f))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Values.val_le" ("_position" v2') ("_position" v2)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Values.env_le" ("_position" v3)
###                 ("_position" v3'))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v3)
###       ("_applC" ("_position" E)
###         ("_cargs"
###           ("_applC" ("_position" EApp)
###             ("_cargs" ("_position" e1) ("_position" e2)))
###           ("_position" \<rho>))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_applC" ("_position" VFun) ("_position" f))
###         ("_applC" ("_position" E)
###           ("_cargs" ("_position" e1) ("_position" \<rho>)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v2)
###           ("_applC" ("_position" E)
###             ("_cargs" ("_position" e2) ("_position" \<rho>)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" v2') ("_tuple_arg" ("_position" v3')))
###             ("_applC" ("_position" set) ("_position" f))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Values.env_le" ("_position" v2') ("_position" v2)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Values.val_le" ("_position" v3)
###                 ("_position" v3'))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v3)
###       ("_applC" ("_position" E)
###         ("_cargs"
###           ("_applC" ("_position" EApp)
###             ("_cargs" ("_position" e1) ("_position" e2)))
###           ("_position" \<rho>))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_applC" ("_position" VFun) ("_position" f))
###         ("_applC" ("_position" E)
###           ("_cargs" ("_position" e1) ("_position" \<rho>)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v2)
###           ("_applC" ("_position" E)
###             ("_cargs" ("_position" e2) ("_position" \<rho>)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" v2') ("_tuple_arg" ("_position" v3')))
###             ("_applC" ("_position" set) ("_position" f))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Values.val_le" ("_position" v2') ("_position" v2)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Values.val_le" ("_position" v3)
###                 ("_position" v3'))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v3)
###       ("_applC" ("_position" E)
###         ("_cargs"
###           ("_applC" ("_position" EApp)
###             ("_cargs" ("_position" e1) ("_position" e2)))
###           ("_position" \<rho>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 39 of "$AFP/Decl_Sem_Fun_PL/DenotLam5.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" lookup)
###           ("_cargs" ("_position" \<rho>) ("_position" x)))
###         ("_applC" ("_position" Some) ("_position" v'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Values.env_le" ("_position" v) ("_position" v')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v)
###       ("_applC" ("_position" E)
###         ("_cargs" ("_applC" ("_position" EVar) ("_position" x))
###           ("_position" \<rho>))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" lookup)
###           ("_cargs" ("_position" \<rho>) ("_position" x)))
###         ("_applC" ("_position" Some) ("_position" v'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Values.val_le" ("_position" v) ("_position" v')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v)
###       ("_applC" ("_position" E)
###         ("_cargs" ("_applC" ("_position" EVar) ("_position" x))
###           ("_position" \<rho>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 42 of "$AFP/Decl_Sem_Fun_PL/DenotLam5.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("_position" E)
###           ("_cargs" ("_applC" ("_position" EVar) ("_position" x))
###             ("_position" \<rho>)))))
###     ("_asm"
###       ("\<^const>Pure.all_binder" ("_position" v')
###         ("_bigimpl"
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" lookup)
###                   ("_cargs" ("_position" \<rho>) ("_position" x)))
###                 ("_applC" ("_position" Some) ("_position" v'))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Values.val_le" ("_position" v)
###                   ("_position" v')))))
###           ("\<^const>HOL.Trueprop" ("_position" P))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("_position" E)
###           ("_cargs" ("_applC" ("_position" EVar) ("_position" x))
###             ("_position" \<rho>)))))
###     ("_asm"
###       ("\<^const>Pure.all_binder" ("_position" v')
###         ("_bigimpl"
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" lookup)
###                   ("_cargs" ("_position" \<rho>) ("_position" x)))
###                 ("_applC" ("_position" Some) ("_position" v'))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Values.env_le" ("_position" v)
###                   ("_position" v')))))
###           ("\<^const>HOL.Trueprop" ("_position" P))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 60 of "$AFP/Decl_Sem_Fun_PL/DenotLam5.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>xenv_le" ("_position" X) ("_position" \<rho>)
###     ("_position" \<rho>'))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" x) ("_position" v))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" x) ("_position" X))
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" lookup)
###             ("_cargs" ("_position" \<rho>) ("_position" x)))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("\<^const>HOL.Ex_binder" ("_position" v')
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" lookup)
###               ("_cargs" ("_position" \<rho>') ("_position" x)))
###             ("_applC" ("_position" Some) ("_position" v')))
###           ("\<^const>Values.env_le" ("_position" v) ("_position" v')))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>xenv_le" ("_position" X) ("_position" \<rho>)
###     ("_position" \<rho>'))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" x) ("_position" v))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" x) ("_position" X))
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" lookup)
###             ("_cargs" ("_position" \<rho>) ("_position" x)))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("\<^const>HOL.Ex_binder" ("_position" v')
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" lookup)
###               ("_cargs" ("_position" \<rho>') ("_position" x)))
###             ("_applC" ("_position" Some) ("_position" v')))
###           ("\<^const>Values.val_le" ("_position" v) ("_position" v')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 64 of "$AFP/Decl_Sem_Fun_PL/DenotLam5.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.val_le" ("_position" v') ("_position" v)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.env_le" ("_position" v') ("_position" v)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 124 of "$AFP/Decl_Sem_Fun_PL/DenotLam5.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("_position" E)
###           ("_cargs" ("_position" e) ("_position" \<rho>)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Values.env_le" ("_position" v') ("_position" v)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v')
###       ("_applC" ("_position" E)
###         ("_cargs" ("_position" e) ("_position" \<rho>))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("_position" E)
###           ("_cargs" ("_position" e) ("_position" \<rho>)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Values.val_le" ("_position" v') ("_position" v)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v')
###       ("_applC" ("_position" E)
###         ("_cargs" ("_position" e) ("_position" \<rho>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 127 of "$AFP/Decl_Sem_Fun_PL/DenotLam5.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.val_le" ("_position" \<rho>) ("_position" \<rho>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.env_le" ("_position" \<rho>) ("_position" \<rho>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 127 of "$AFP/Decl_Sem_Fun_PL/DenotLam5.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.val_le"
###     ("\<^const>List.list.Cons"
###       ("_tuple" ("_position" x) ("_tuple_arg" ("_position" v)))
###       ("_position" \<rho>))
###     ("\<^const>List.list.Cons"
###       ("_tuple" ("_position" x) ("_tuple_arg" ("_position" v)))
###       ("_position" \<rho>'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.env_le"
###     ("\<^const>List.list.Cons"
###       ("_tuple" ("_position" x) ("_tuple_arg" ("_position" v)))
###       ("_position" \<rho>))
###     ("\<^const>List.list.Cons"
###       ("_tuple" ("_position" x) ("_tuple_arg" ("_position" v)))
###       ("_position" \<rho>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 136 of "$AFP/Decl_Sem_Fun_PL/DenotLam5.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.val_le" ("_position" \<rho>) ("_position" \<rho>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Values.env_le" ("_position" \<rho>) ("_position" \<rho>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 144 of "$AFP/Decl_Sem_Fun_PL/DenotLam5.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.env_eq" ("_position" \<rho>) ("_position" \<rho>')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.val_le" ("_position" \<rho>) ("_position" \<rho>'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.env_eq" ("_position" \<rho>) ("_position" \<rho>')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Values.env_le" ("_position" \<rho>) ("_position" \<rho>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.DenotLam5"
### 0.221s elapsed time, 0.464s cpu time, 0.042s GC time
### theory "HOL-Library.Tree"
### 2.076s elapsed time, 6.533s cpu time, 1.139s GC time
Loading theory "Draft.Templates" (required by "Draft.DenotLam5MoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.056s elapsed time, 0.073s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.DenotLam5MoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.488s elapsed time, 0.561s cpu time, 0.093s GC time
Loading theory "Draft.DenotLam5MoreTemplates"
val templateLemmas =
   [("DenotLam5.env_eq_refl", "?\<rho> \<approx> ?\<rho>",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("DenotLam5.e_lam_intro3", "VFun [] : E (ELam ?x ?e) ?\<rho>",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2)),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0))
         )),
    ("DenotLam5.eq_implies_le",
     "?\<rho> \<approx> ?\<rho>' ==> ?\<rho> \<sqsubseteq> ?\<rho>'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("DenotLam5.env_eq_ext",
     "?\<rho> \<approx> ?\<rho>' ==>
      (?x, ?v) # ?\<rho> \<approx> (?x, ?v) # ?\<rho>'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)),
               template_var 2))
           ))),
    ("DenotLam5.env_le_ext",
     "?\<rho> \<sqsubseteq> ?\<rho>' ==>
      (?x, ?v) # ?\<rho> \<sqsubseteq> (?x, ?v) # ?\<rho>'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)),
               template_var 2))
           ))),
    ("DenotLam5.env_swap",
     "[| ?\<rho> \<approx> ?\<rho>'; ?v : E ?e ?\<rho> |]
      ==> ?v : E ?e ?\<rho>'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_app
               (template_app (template_hole 0, template_var 0),
                template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("DenotLam5.raise_env",
     "[| ?v : E ?e ?\<rho>; ?\<rho> \<sqsubseteq> ?\<rho>' |]
      ==> ?v : E ?e ?\<rho>'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0))
           ))),
    ("DenotLam5.e_sub",
     "[| ?v : E ?e ?\<rho>; ?v' \<sqsubseteq> ?v |] ==> ?v' : E ?e ?\<rho>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))
           ))),
    ("DenotLam5.change_env",
     "[| ?v : E ?e ?\<rho>;
         FV ?e \<turnstile> ?\<rho> \<sqsubseteq> ?\<rho>' |]
      ==> ?v : E ?e ?\<rho>'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 1,
                  template_app (template_hole 0, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0))
           ))),
    ("DenotLam5.e_var_intro",
     "[| lookup ?\<rho> ?x = Some ?v'; ?v \<sqsubseteq> ?v' |]
      ==> ?v : E (EVar ?x) ?\<rho>",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 3), template_var 2),
          template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 3))
           ))),
    ("DenotLam5.change_env_le",
     "[| ?v : E ?e ?\<rho>; ?v' \<sqsubseteq> ?v;
         FV ?e \<turnstile> ?\<rho> \<sqsubseteq> ?\<rho>' |]
      ==> ?v' : E ?e ?\<rho>'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 1,
                  template_app (template_hole 0, template_var 3)),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 0))
           ))),
    ("DenotLam5.e_var_elim",
     "[| ?v : E (EVar ?x) ?\<rho>;
         !!v'. [| lookup ?\<rho> ?x = Some v'; ?v \<sqsubseteq> v' |]
               ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_var 2)),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("DenotLam5.env_strengthen",
     "[| ?v : E ?e ?\<rho>;
         ALL x. x : FV ?e --> lookup ?\<rho>' x = lookup ?\<rho> x |]
      ==> ?v : E ?e ?\<rho>'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 3),
             template_app
              (template_app (template_hole 6, template_var 2),
               template_var 0))
           ))),
    ("DenotLam5.e_lam_elim2",
     "[| VFun ((?v1.0, ?v2.0) # ?f) : E (ELam ?x ?e) ?\<rho>;
         ?v2.0 : E ?e ((?x, ?v1.0) # ?\<rho>) ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_hole 6,
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_app (template_hole 4, template_var 6),
                        template_var 5)),
                    template_var 4))),
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2)),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 7, template_var 5),
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 0, template_var 3),
                         template_var 6)),
                     template_var 1)))
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("DenotLam5.e_prim_intro",
     "[| VNat ?n1.0 : E ?e1.0 ?\<rho>; VNat ?n2.0 : E ?e2.0 ?\<rho>;
         ?v = VNat (?f ?n1.0 ?n2.0) |]
      ==> ?v : E (EPrim ?f ?e1.0 ?e2.0) ?\<rho>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 6)),
              template_app
               (template_app (template_hole 2, template_var 5),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 3)),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 4))
            ),
        template_equation
         (template_var 1,
          template_app
           (template_hole 3,
            template_app
             (template_app (template_var 0, template_var 6),
              template_var 3)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 5),
                   template_var 2)),
               template_var 4))
           ))),
    ("DenotLam5.e_lam_intro2",
     "[| VFun ?f : E (ELam ?x ?e) ?\<rho>;
         ?v2.0 : E ?e ((?x, ?v1.0) # ?\<rho>) |]
      ==> VFun ((?v1.0, ?v2.0) # ?f) : E (ELam ?x ?e) ?\<rho>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 5)),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 3)),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_app (template_hole 5, template_var 3),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 4),
                      template_var 0)),
                  template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 1)),
                   template_var 5))),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 4),
                   template_var 3)),
               template_var 2))
           ))),
    ("DenotLam5.e_lam_intro",
     "[| ?v = VFun ?f;
         ALL v1 v2. (v1, v2) : set ?f --> v2 : E ?e ((?x, v1) # ?\<rho>) |]
      ==> ?v : E (ELam ?x ?e) ?\<rho>",
     template_implication
      ([template_equation
         (template_var 4, template_app (template_hole 10, template_var 3)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 4),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 2)),
               template_var 0))
           ))),
    ("DenotLam5.e_if_intro",
     "[| VNat ?n : E ?e1.0 ?\<rho>; ?n = 0 --> ?v : E ?e3.0 ?\<rho>;
         ?n ~= 0 --> ?v : E ?e2.0 ?\<rho> |]
      ==> ?v : E (EIf ?e1.0 ?e2.0 ?e3.0) ?\<rho>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 5)),
              template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 5),
                  template_hole 2)),
              template_app
               (template_app (template_hole 7, template_var 2),
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 3, template_var 5),
                    template_hole 2))),
              template_app
               (template_app (template_hole 7, template_var 2),
                template_app
                 (template_app (template_hole 5, template_var 0),
                  template_var 3)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 2),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 0),
                   template_var 1)),
               template_var 3))
           ))),
    ("DenotLam5.e_app_intro",
     "[| VFun ?f : E ?e1.0 ?\<rho>; ?v2.0 : E ?e2.0 ?\<rho>;
         (?v2', ?v3') : set ?f; ?v2' \<sqsubseteq> ?v2.0;
         ?v3.0 \<sqsubseteq> ?v3' |]
      ==> ?v3.0 : E (EApp ?e1.0 ?e2.0) ?\<rho>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 7)),
              template_app
               (template_app (template_hole 5, template_var 6),
                template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_app
               (template_app (template_hole 5, template_var 3),
                template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_app (template_hole 2, template_var 7))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 0),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 0, template_var 6),
                   template_var 3)),
               template_var 5))
           ))),
    ("DenotLam5.e_prim_elim",
     "[| ?v : E (EPrim ?f ?e1.0 ?e2.0) ?\<rho>;
         !!n1 n2.
            [| VNat n1 : E ?e1.0 ?\<rho>; VNat n2 : E ?e2.0 ?\<rho>;
               ?v = VNat (?f n1 n2) |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 5),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app
                     (template_app (template_hole 3, template_var 4),
                      template_var 3),
                    template_var 2)),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("DenotLam5.e_lam_elim",
     "[| ?v : E (ELam ?x ?e) ?\<rho>;
         !!f. [| ?v = VFun f;
                 ALL v1 v2.
                    (v1, v2) : set f --> v2 : E ?e ((?x, v1) # ?\<rho>) |]
              ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 4),
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app (template_hole 10, template_var 3),
                    template_var 2)),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate (template_var 0))),
    ("DenotLam5.e_if_elim",
     "[| ?v : E (EIf ?e1.0 ?e2.0 ?e3.0) ?\<rho>;
         !!n. [| VNat n : E ?e1.0 ?\<rho>; n = 0 --> ?v : E ?e3.0 ?\<rho>;
                 n ~= 0 --> ?v : E ?e2.0 ?\<rho> |]
              ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 5),
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app
                     (template_app (template_hole 6, template_var 4),
                      template_var 3),
                    template_var 2)),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("DenotLam5.e_app_elim",
     "[| ?v3.0 : E (EApp ?e1.0 ?e2.0) ?\<rho>;
         !!f v2 v2' v3'.
            [| VFun f : E ?e1.0 ?\<rho>; v2 : E ?e2.0 ?\<rho>;
               (v2', v3') : set f; v2' \<sqsubseteq> v2;
               ?v3.0 \<sqsubseteq> v3' |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 4),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_var 3),
                    template_var 2)),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.DenotLam5MoreTemplates"
### 0.522s elapsed time, 1.113s cpu time, 0.692s GC time
val it = (): unit
