   [("Quant_VCG.vc_sound",
     "vc ?C ?Q ==> \<turnstile>\<^sub>2 {pre ?C ?Q} strip ?C {?Q}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0)),
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Quant_VCG.vc_mono",
     "[| !!s. ?P' s <= ?P s; vc ?C ?P |] ==> vc ?C ?P'",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 2)
           ))),
    ("Quant_VCG.pre_mono",
     "(!!s. ?P' s <= ?P s) ==> pre ?C ?P' ?s <= pre ?C ?P ?s",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 3),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2),
           template_var 0)))),
    ("Quant_VCG.vc_sound'",
     "[| vc ?C ?Q; ALL s. pre ?C ?Q s <= ?P s |]
      ==> \<turnstile>\<^sub>2 {?P} strip ?C {?Q}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 2)),
             template_var 1)
           )))]
