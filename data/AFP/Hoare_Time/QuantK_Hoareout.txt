Loading theory "Draft.AExp" (required by "Draft.QuantK_HoareTemplates" via "Draft.QuantK_Hoare" via "Draft.Big_StepT" via "Draft.Big_Step" via "Draft.Com" via "Draft.BExp")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.QuantK_HoareTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.QuantK_HoareTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.QuantK_HoareTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.138s elapsed time, 0.556s cpu time, 0.056s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.QuantK_HoareTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.208s elapsed time, 0.841s cpu time, 0.056s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.QuantK_HoareTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  left :: "'a tree => 'a tree"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  right :: "'a tree => 'a tree"
### theory "Draft.AExp"
### 0.712s elapsed time, 2.818s cpu time, 0.308s GC time
Loading theory "Draft.BExp" (required by "Draft.QuantK_HoareTemplates" via "Draft.QuantK_Hoare" via "Draft.Big_StepT" via "Draft.Big_Step" via "Draft.Com")
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.901s elapsed time, 3.551s cpu time, 0.395s GC time
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.049s elapsed time, 3.959s cpu time, 0.952s GC time
Found termination order: "size <*mlex*> {}"
"12"
  :: "int"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
"12"
  :: "int"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.BExp"
### 0.808s elapsed time, 2.793s cpu time, 0.743s GC time
Loading theory "Draft.Com" (required by "Draft.QuantK_HoareTemplates" via "Draft.QuantK_Hoare" via "Draft.Big_StepT" via "Draft.Big_Step")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
"True"
  :: "bool"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Com"
### 0.532s elapsed time, 1.302s cpu time, 0.137s GC time
Loading theory "Draft.Big_Step" (required by "Draft.QuantK_HoareTemplates" via "Draft.QuantK_Hoare" via "Draft.Big_StepT")
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "big_step"
  Proving monotonicity ...
### theory "HOL-Library.Tree"
### 2.051s elapsed time, 6.631s cpu time, 1.158s GC time
Loading theory "Draft.Templates" (required by "Draft.QuantK_HoareTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.105s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.QuantK_HoareTemplates")
### theory "Draft.Big_Step"
### 0.359s elapsed time, 0.993s cpu time, 0.079s GC time
Loading theory "Draft.Big_StepT" (required by "Draft.QuantK_HoareTemplates" via "Draft.QuantK_Hoare")
Proofs for inductive predicate(s) "big_step_t"
  Proving monotonicity ...
"{_}"
  :: "(char list => int) set"
"{[42]}"
  :: "int list set"
"{[2]}"
  :: "int list set"
[| ?x1.0 \<Rightarrow> ?x2.0; !!s. ?P (SKIP, s) s;
   !!x a s. ?P (x ::= a, s) (s(x := aval a s));
   !!c\<^sub>1 s\<^sub>1 s\<^sub>2 c\<^sub>2 s\<^sub>3.
      [| (c\<^sub>1, s\<^sub>1) \<Rightarrow> s\<^sub>2;
         ?P (c\<^sub>1, s\<^sub>1) s\<^sub>2;
         (c\<^sub>2, s\<^sub>2) \<Rightarrow> s\<^sub>3;
         ?P (c\<^sub>2, s\<^sub>2) s\<^sub>3 |]
      ==> ?P (c\<^sub>1;; c\<^sub>2, s\<^sub>1) s\<^sub>3;
   !!b s c\<^sub>1 t c\<^sub>2.
      [| bval b s; (c\<^sub>1, s) \<Rightarrow> t; ?P (c\<^sub>1, s) t |]
      ==> ?P (IF b THEN c\<^sub>1 ELSE c\<^sub>2, s) t;
   !!b s c\<^sub>2 t c\<^sub>1.
      [| ~ bval b s; (c\<^sub>2, s) \<Rightarrow> t; ?P (c\<^sub>2, s) t |]
      ==> ?P (IF b THEN c\<^sub>1 ELSE c\<^sub>2, s) t;
   !!b s c. ~ bval b s ==> ?P (WHILE b DO c, s) s;
   !!b s\<^sub>1 c s\<^sub>2 s\<^sub>3.
      [| bval b s\<^sub>1; (c, s\<^sub>1) \<Rightarrow> s\<^sub>2;
         ?P (c, s\<^sub>1) s\<^sub>2;
         (WHILE b DO c, s\<^sub>2) \<Rightarrow> s\<^sub>3;
         ?P (WHILE b DO c, s\<^sub>2) s\<^sub>3 |]
      ==> ?P (WHILE b DO c, s\<^sub>1) s\<^sub>3 |]
==> ?P ?x1.0 ?x2.0
[| (?x1a, ?x1b) \<Rightarrow> ?x2a; !!s. ?P SKIP s s;
   !!x a s. ?P (x ::= a) s (s(x := aval a s));
   !!c\<^sub>1 s\<^sub>1 s\<^sub>2 c\<^sub>2 s\<^sub>3.
      [| (c\<^sub>1, s\<^sub>1) \<Rightarrow> s\<^sub>2;
         ?P c\<^sub>1 s\<^sub>1 s\<^sub>2;
         (c\<^sub>2, s\<^sub>2) \<Rightarrow> s\<^sub>3;
         ?P c\<^sub>2 s\<^sub>2 s\<^sub>3 |]
      ==> ?P (c\<^sub>1;; c\<^sub>2) s\<^sub>1 s\<^sub>3;
   !!b s c\<^sub>1 t c\<^sub>2.
      [| bval b s; (c\<^sub>1, s) \<Rightarrow> t; ?P c\<^sub>1 s t |]
      ==> ?P (IF b THEN c\<^sub>1 ELSE c\<^sub>2) s t;
   !!b s c\<^sub>2 t c\<^sub>1.
      [| ~ bval b s; (c\<^sub>2, s) \<Rightarrow> t; ?P c\<^sub>2 s t |]
      ==> ?P (IF b THEN c\<^sub>1 ELSE c\<^sub>2) s t;
   !!b s c. ~ bval b s ==> ?P (WHILE b DO c) s s;
   !!b s\<^sub>1 c s\<^sub>2 s\<^sub>3.
      [| bval b s\<^sub>1; (c, s\<^sub>1) \<Rightarrow> s\<^sub>2;
         ?P c s\<^sub>1 s\<^sub>2;
         (WHILE b DO c, s\<^sub>2) \<Rightarrow> s\<^sub>3;
         ?P (WHILE b DO c) s\<^sub>2 s\<^sub>3 |]
      ==> ?P (WHILE b DO c) s\<^sub>1 s\<^sub>3 |]
==> ?P ?x1a ?x1b ?x2a
[| (SKIP, ?s) \<Rightarrow> ?t; ?t = ?s ==> ?P |] ==> ?P
[| (?x ::= ?a, ?s) \<Rightarrow> ?t; ?t = ?s(?x := aval ?a ?s) ==> ?P |]
==> ?P
[| (?c1.0;; ?c2.0, ?s1.0) \<Rightarrow> ?s3.0;
   !!s\<^sub>2.
      [| (?c1.0, ?s1.0) \<Rightarrow> s\<^sub>2;
         (?c2.0, s\<^sub>2) \<Rightarrow> ?s3.0 |]
      ==> ?P |]
==> ?P
[| (IF ?b THEN ?c1.0 ELSE ?c2.0, ?s) \<Rightarrow> ?t;
   [| bval ?b ?s; (?c1.0, ?s) \<Rightarrow> ?t |] ==> ?P;
   [| ~ bval ?b ?s; (?c2.0, ?s) \<Rightarrow> ?t |] ==> ?P |]
==> ?P
[| (WHILE ?b DO ?c, ?s) \<Rightarrow> ?t;
   [| ?t = ?s; ~ bval ?b ?s |] ==> ?P;
   !!s\<^sub>2.
      [| bval ?b ?s; (?c, ?s) \<Rightarrow> s\<^sub>2;
         (WHILE ?b DO ?c, s\<^sub>2) \<Rightarrow> ?t |]
      ==> ?P |]
==> ?P
[| bval ?b ?s; (?c\<^sub>1, ?s) \<Rightarrow> ?t |]
==> (IF ?b THEN ?c\<^sub>1 ELSE ?c\<^sub>2, ?s) \<Rightarrow> ?t
"{[15, 13]}"
  :: "int list set"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.629s elapsed time, 2.056s cpu time, 0.173s GC time
### Ambiguous input (line 92 of "$AFP/Hoare_Time/Big_StepT.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Big_StepT.big_step_t"
###       ("_tuple" ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###         ("_tuple_arg" ("_position" s)))
###       ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero"))
###       ("_position" s'))
###     ("\<^const>HOL.eq" ("_position" s')
###       ("_Update" ("_position" s)
###         ("_updbind" ("_position" x)
###           ("_applC" ("_position" aval)
###             ("_cargs" ("_position" a) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Big_StepT.big_step_t"
###     ("_tuple" ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###       ("_tuple_arg" ("_position" s)))
###     ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero"))
###     ("\<^const>HOL.iff" ("_position" s')
###       ("\<^const>HOL.eq" ("_position" s')
###         ("_Update" ("_position" s)
###           ("_updbind" ("_position" x)
###             ("_applC" ("_position" aval)
###               ("_cargs" ("_position" a) ("_position" s)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 191 of "$AFP/Hoare_Time/Big_StepT.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Big_StepT.big_step_t"
###       ("\<^const>HOL.Not"
###         ("_tuple" ("_position" SKIP) ("_tuple_arg" ("_position" s))))
###       ("_position" p) ("_position" t))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.not_equal" ("_position" s) ("_position" t))
###       ("\<^const>HOL.not_equal" ("_position" p)
###         ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.Not"
###       ("\<^const>Big_StepT.big_step_t"
###         ("_tuple" ("_position" SKIP) ("_tuple_arg" ("_position" s)))
###         ("_position" p) ("_position" t)))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.not_equal" ("_position" s) ("_position" t))
###       ("\<^const>HOL.not_equal" ("_position" p)
###         ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero"))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 210 of "$AFP/Hoare_Time/Big_StepT.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_The" ("_position" t)
###       ("\<^const>HOL.Ex_binder" ("_position" p)
###         ("\<^const>Big_StepT.big_step_t"
###           ("_tuple"
###             ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))
###             ("_tuple_arg" ("_position" s)))
###           ("_position" p) ("_position" t))))
###     ("_Update" ("_position" s)
###       ("_updbind" ("_position" x)
###         ("_applC" ("_position" aval)
###           ("_cargs" ("_position" e) ("_position" s)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Big_StepT.big_step_t"
###       ("_The" ("_position" t)
###         ("\<^const>HOL.Ex_binder" ("_position" p)
###           ("_tuple"
###             ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))
###             ("_tuple_arg" ("_position" s)))))
###       ("_position" p) ("_position" t))
###     ("_Update" ("_position" s)
###       ("_updbind" ("_position" x)
###         ("_applC" ("_position" aval)
###           ("_cargs" ("_position" e) ("_position" s)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_The" ("_position" t)
###       ("\<^const>Big_StepT.big_step_t"
###         ("\<^const>HOL.Ex_binder" ("_position" p)
###           ("_tuple"
###             ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))
###             ("_tuple_arg" ("_position" s))))
###         ("_position" p) ("_position" t)))
###     ("_Update" ("_position" s)
###       ("_updbind" ("_position" x)
###         ("_applC" ("_position" aval)
###           ("_cargs" ("_position" e) ("_position" s)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 215 of "$AFP/Hoare_Time/Big_StepT.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Big_StepT.big_step_t"
###       ("\<^const>HOL.Not"
###         ("_tuple"
###           ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))
###           ("_tuple_arg" ("_position" s))))
###       ("_position" p) ("_position" t))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.not_equal" ("_position" p)
###         ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero")))
###       ("\<^const>HOL.not_equal" ("_position" t)
###         ("_Update" ("_position" s)
###           ("_updbind" ("_position" x)
###             ("_applC" ("_position" aval)
###               ("_cargs" ("_position" e) ("_position" s)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.Not"
###       ("\<^const>Big_StepT.big_step_t"
###         ("_tuple"
###           ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))
###           ("_tuple_arg" ("_position" s)))
###         ("_position" p) ("_position" t)))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.not_equal" ("_position" p)
###         ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero")))
###       ("\<^const>HOL.not_equal" ("_position" t)
###         ("_Update" ("_position" s)
###           ("_updbind" ("_position" x)
###             ("_applC" ("_position" aval)
###               ("_cargs" ("_position" e) ("_position" s)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 220 of "$AFP/Hoare_Time/Big_StepT.thy") produces 9 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("\<^const>Big_StepT.big_step_t"
###             ("_tuple" ("_position" c1) ("_tuple_arg" ("_position" s)))
###             ("_position" n) ("_position" a)))))
###     ("_The" ("_position" n)
###       ("\<^const>HOL.Ex_binder" ("_position" a)
###         ("\<^const>Big_StepT.big_step_t"
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))
###           ("_position" n) ("_position" a))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("\<^const>Big_StepT.big_step_t"
###         ("_The" ("_position" n)
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c1) ("_tuple_arg" ("_position" s)))))
###         ("_position" n) ("_position" a)))
###     ("_The" ("_position" n)
###       ("\<^const>HOL.Ex_binder" ("_position" a)
###         ("\<^const>Big_StepT.big_step_t"
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))
###           ("_position" n) ("_position" a))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>Big_StepT.big_step_t"
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c1) ("_tuple_arg" ("_position" s))))
###           ("_position" n) ("_position" a))))
###     ("_The" ("_position" n)
###       ("\<^const>HOL.Ex_binder" ("_position" a)
###         ("\<^const>Big_StepT.big_step_t"
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))
###           ("_position" n) ("_position" a))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("\<^const>Big_StepT.big_step_t"
###             ("_tuple" ("_position" c1) ("_tuple_arg" ("_position" s)))
###             ("_position" n) ("_position" a)))))
###     ("\<^const>Big_StepT.big_step_t"
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))))
###       ("_position" n) ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("\<^const>Big_StepT.big_step_t"
###         ("_The" ("_position" n)
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c1) ("_tuple_arg" ("_position" s)))))
###         ("_position" n) ("_position" a)))
###     ("\<^const>Big_StepT.big_step_t"
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))))
###       ("_position" n) ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>Big_StepT.big_step_t"
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c1) ("_tuple_arg" ("_position" s))))
###           ("_position" n) ("_position" a))))
###     ("\<^const>Big_StepT.big_step_t"
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))))
###       ("_position" n) ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("\<^const>Big_StepT.big_step_t"
###             ("_tuple" ("_position" c1) ("_tuple_arg" ("_position" s)))
###             ("_position" n) ("_position" a)))))
###     ("_The" ("_position" n)
###       ("\<^const>Big_StepT.big_step_t"
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s))))
###         ("_position" n) ("_position" a)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("\<^const>Big_StepT.big_step_t"
###         ("_The" ("_position" n)
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c1) ("_tuple_arg" ("_position" s)))))
###         ("_position" n) ("_position" a)))
###     ("_The" ("_position" n)
###       ("\<^const>Big_StepT.big_step_t"
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s))))
###         ("_position" n) ("_position" a)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>Big_StepT.big_step_t"
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c1) ("_tuple_arg" ("_position" s))))
###           ("_position" n) ("_position" a))))
###     ("_The" ("_position" n)
###       ("\<^const>Big_StepT.big_step_t"
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s))))
###         ("_position" n) ("_position" a)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 232 of "$AFP/Hoare_Time/Big_StepT.thy") produces 9 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("\<^const>Big_StepT.big_step_t"
###             ("_tuple" ("_position" c2) ("_tuple_arg" ("_position" s)))
###             ("_position" n) ("_position" a)))))
###     ("_The" ("_position" n)
###       ("\<^const>HOL.Ex_binder" ("_position" a)
###         ("\<^const>Big_StepT.big_step_t"
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))
###           ("_position" n) ("_position" a))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("\<^const>Big_StepT.big_step_t"
###         ("_The" ("_position" n)
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c2) ("_tuple_arg" ("_position" s)))))
###         ("_position" n) ("_position" a)))
###     ("_The" ("_position" n)
###       ("\<^const>HOL.Ex_binder" ("_position" a)
###         ("\<^const>Big_StepT.big_step_t"
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))
###           ("_position" n) ("_position" a))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>Big_StepT.big_step_t"
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c2) ("_tuple_arg" ("_position" s))))
###           ("_position" n) ("_position" a))))
###     ("_The" ("_position" n)
###       ("\<^const>HOL.Ex_binder" ("_position" a)
###         ("\<^const>Big_StepT.big_step_t"
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))
###           ("_position" n) ("_position" a))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("\<^const>Big_StepT.big_step_t"
###             ("_tuple" ("_position" c2) ("_tuple_arg" ("_position" s)))
###             ("_position" n) ("_position" a)))))
###     ("\<^const>Big_StepT.big_step_t"
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))))
###       ("_position" n) ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("\<^const>Big_StepT.big_step_t"
###         ("_The" ("_position" n)
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c2) ("_tuple_arg" ("_position" s)))))
###         ("_position" n) ("_position" a)))
###     ("\<^const>Big_StepT.big_step_t"
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))))
###       ("_position" n) ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>Big_StepT.big_step_t"
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c2) ("_tuple_arg" ("_position" s))))
###           ("_position" n) ("_position" a))))
###     ("\<^const>Big_StepT.big_step_t"
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))))
###       ("_position" n) ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("\<^const>Big_StepT.big_step_t"
###             ("_tuple" ("_position" c2) ("_tuple_arg" ("_position" s)))
###             ("_position" n) ("_position" a)))))
###     ("_The" ("_position" n)
###       ("\<^const>Big_StepT.big_step_t"
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s))))
###         ("_position" n) ("_position" a)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("\<^const>Big_StepT.big_step_t"
###         ("_The" ("_position" n)
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c2) ("_tuple_arg" ("_position" s)))))
###         ("_position" n) ("_position" a)))
###     ("_The" ("_position" n)
###       ("\<^const>Big_StepT.big_step_t"
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s))))
###         ("_position" n) ("_position" a)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>Big_StepT.big_step_t"
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c2) ("_tuple_arg" ("_position" s))))
###           ("_position" n) ("_position" a))))
###     ("_The" ("_position" n)
###       ("\<^const>Big_StepT.big_step_t"
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s))))
###         ("_position" n) ("_position" a)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Big_StepT"
### 0.833s elapsed time, 2.286s cpu time, 0.135s GC time
Loading theory "Draft.QuantK_Hoare" (required by "Draft.QuantK_HoareTemplates")
"{(_, 1)}"
  :: "((char list => int) * nat) set"
"{[2]}"
  :: "int list set"
"{[42]}"
  :: "int list set"
[| (SKIP, ?s) \<Rightarrow> ?x \<Down> ?t;
   [| ?x = Suc 0; ?t = ?s |] ==> ?P |]
==> ?P
[| (?x ::= ?a, ?s) \<Rightarrow> ?p \<Down> ?t;
   [| ?p = Suc 0; ?t = ?s(?x := aval ?a ?s) |] ==> ?P |]
==> ?P
[| (?c1.0;; ?c2.0, ?s1.0) \<Rightarrow> ?p \<Down> ?s3.0;
   !!x s2 y.
      [| ?p = x + y; (?c1.0, ?s1.0) \<Rightarrow> x \<Down> s2;
         (?c2.0, s2) \<Rightarrow> y \<Down> ?s3.0 |]
      ==> ?P |]
==> ?P
[| (IF ?b THEN ?c1.0 ELSE ?c2.0, ?s) \<Rightarrow> ?x \<Down> ?t;
   !!x. [| ?x = Suc x; bval ?b ?s; (?c1.0, ?s) \<Rightarrow> x \<Down> ?t |]
        ==> ?P;
   !!x. [| ?x = Suc x; ~ bval ?b ?s;
           (?c2.0, ?s) \<Rightarrow> x \<Down> ?t |]
        ==> ?P |]
==> ?P
[| (WHILE ?b DO ?c, ?s) \<Rightarrow> ?x \<Down> ?t;
   [| ?x = Suc 0; ?t = ?s; ~ bval ?b ?s |] ==> ?P;
   !!x s2 y.
      [| bval ?b ?s; (?c, ?s) \<Rightarrow> x \<Down> s2;
         (WHILE ?b DO ?c, s2) \<Rightarrow> y \<Down> ?t;
         Suc (x + y) = ?x |]
      ==> ?P |]
==> ?P
"{[15, 13]}"
  :: "int list set"
### Ambiguous input (line 18 of "$AFP/Hoare_Time/QuantK_Hoare.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" s)
###     ("_list"
###       ("\<^const>Fields.inverse_class.inverse_divide" ("_position" a)
###         ("_position" x))))
###   ("_Update" ("_position" s)
###     ("_updbind" ("_position" x)
###       ("_applC" ("_position" aval)
###         ("_cargs" ("_position" a) ("_position" s))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>state_subst" ("_position" s) ("_position" a) ("_position" x))
###   ("_Update" ("_position" s)
###     ("_updbind" ("_position" x)
###       ("_applC" ("_position" aval)
###         ("_cargs" ("_position" a) ("_position" s))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 40 of "$AFP/Hoare_Time/QuantK_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>hoareQ"
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" eSuc)
###         ("_applC" ("_position" P)
###           ("\<^const>QuantK_Hoare.state_subst" ("_position" s)
###             ("_position" a) ("_position" x)))))
###     ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>hoareQ"
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" eSuc)
###         ("_applC" ("_position" P)
###           ("_applC" ("_position" s)
###             ("_list"
###               ("\<^const>Fields.inverse_class.inverse_divide"
###                 ("_position" a) ("_position" x)))))))
###     ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "hoareQ"
  Proving monotonicity ...
### Ambiguous input (line 67 of "$AFP/Hoare_Time/QuantK_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>hoareQ'"
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" eSuc)
###         ("_applC" ("_position" P)
###           ("\<^const>QuantK_Hoare.state_subst" ("_position" s)
###             ("_position" a) ("_position" x)))))
###     ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>hoareQ'"
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" eSuc)
###         ("_applC" ("_position" P)
###           ("_applC" ("_position" s)
###             ("_list"
###               ("\<^const>Fields.inverse_class.inverse_divide"
###                 ("_position" a) ("_position" x)))))))
###     ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "hoareQ'"
  Proving monotonicity ...
### Ambiguous input (line 371 of "$AFP/Hoare_Time/QuantK_Hoare.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" s)
###       ("\<^const>Orderings.ord_class.greater_eq"
###         ("_applC" ("_position" P) ("_position" s))
###         ("_applC" ("_position" eSuc)
###           ("_applC" ("_position" Q)
###             ("_applC" ("_position" s)
###               ("_list"
###                 ("\<^const>Fields.inverse_class.inverse_divide"
###                   ("_position" a) ("_position" x)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>QuantK_Hoare.hoareQ" ("_position" P)
###       ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###       ("_position" Q))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" s)
###       ("\<^const>Orderings.ord_class.greater_eq"
###         ("_applC" ("_position" P) ("_position" s))
###         ("_applC" ("_position" eSuc)
###           ("_applC" ("_position" Q)
###             ("\<^const>QuantK_Hoare.state_subst" ("_position" s)
###               ("_position" a) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>QuantK_Hoare.hoareQ" ("_position" P)
###       ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###       ("_position" Q))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 380 of "$AFP/Hoare_Time/QuantK_Hoare.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Big_StepT.big_step_t"
###       ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###       ("_position" P) ("_position" T)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("\<^const>Big_StepT.big_step_t"
###             ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###             ("_position" n) ("_position" a))))
###       ("_position" P))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Big_StepT.big_step_t"
###       ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###       ("_position" P) ("_position" T)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Big_StepT.big_step_t"
###         ("_The" ("_position" n)
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))))
###         ("_position" n) ("_position" a))
###       ("_position" P))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Big_StepT.big_step_t"
###       ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###       ("_position" P) ("_position" T)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_The" ("_position" n)
###         ("\<^const>Big_StepT.big_step_t"
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s))))
###           ("_position" n) ("_position" a)))
###       ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 383 of "$AFP/Hoare_Time/QuantK_Hoare.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Big_StepT.big_step_t"
###       ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###       ("_position" P) ("_position" T)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_The" ("_position" a)
###         ("\<^const>HOL.Ex_binder" ("_position" n)
###           ("\<^const>Big_StepT.big_step_t"
###             ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###             ("_position" n) ("_position" a))))
###       ("_position" T))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Big_StepT.big_step_t"
###       ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###       ("_position" P) ("_position" T)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Big_StepT.big_step_t"
###         ("_The" ("_position" a)
###           ("\<^const>HOL.Ex_binder" ("_position" n)
###             ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))))
###         ("_position" n) ("_position" a))
###       ("_position" T))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Big_StepT.big_step_t"
###       ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###       ("_position" P) ("_position" T)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_The" ("_position" a)
###         ("\<^const>Big_StepT.big_step_t"
###           ("\<^const>HOL.Ex_binder" ("_position" n)
###             ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s))))
###           ("_position" n) ("_position" a)))
###       ("_position" T))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 387 of "$AFP/Hoare_Time/QuantK_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Big_StepT.big_step_t"
###       ("\<^const>HOL.Not"
###         ("_tuple" ("_position" SKIP) ("_tuple_arg" ("_position" s))))
###       ("_position" p) ("_position" t))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.not_equal" ("_position" s) ("_position" t))
###       ("\<^const>HOL.not_equal" ("_position" p)
###         ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.Not"
###       ("\<^const>Big_StepT.big_step_t"
###         ("_tuple" ("_position" SKIP) ("_tuple_arg" ("_position" s)))
###         ("_position" p) ("_position" t)))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.not_equal" ("_position" s) ("_position" t))
###       ("\<^const>HOL.not_equal" ("_position" p)
###         ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero"))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 390 of "$AFP/Hoare_Time/QuantK_Hoare.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_The" ("_position" p)
###       ("\<^const>HOL.Ex_binder" ("_position" t)
###         ("\<^const>Big_StepT.big_step_t"
###           ("_tuple" ("_position" SKIP) ("_tuple_arg" ("_position" s)))
###           ("_position" p) ("_position" t))))
###     ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Big_StepT.big_step_t"
###       ("_The" ("_position" p)
###         ("\<^const>HOL.Ex_binder" ("_position" t)
###           ("_tuple" ("_position" SKIP) ("_tuple_arg" ("_position" s)))))
###       ("_position" p) ("_position" t))
###     ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_The" ("_position" p)
###       ("\<^const>Big_StepT.big_step_t"
###         ("\<^const>HOL.Ex_binder" ("_position" t)
###           ("_tuple" ("_position" SKIP) ("_tuple_arg" ("_position" s))))
###         ("_position" p) ("_position" t)))
###     ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 395 of "$AFP/Hoare_Time/QuantK_Hoare.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_The" ("_position" t)
###       ("\<^const>HOL.Ex_binder" ("_position" p)
###         ("\<^const>Big_StepT.big_step_t"
###           ("_tuple" ("_position" SKIP) ("_tuple_arg" ("_position" s)))
###           ("_position" p) ("_position" t))))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Big_StepT.big_step_t"
###       ("_The" ("_position" t)
###         ("\<^const>HOL.Ex_binder" ("_position" p)
###           ("_tuple" ("_position" SKIP) ("_tuple_arg" ("_position" s)))))
###       ("_position" p) ("_position" t))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_The" ("_position" t)
###       ("\<^const>Big_StepT.big_step_t"
###         ("\<^const>HOL.Ex_binder" ("_position" p)
###           ("_tuple" ("_position" SKIP) ("_tuple_arg" ("_position" s))))
###         ("_position" p) ("_position" t)))
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 406 of "$AFP/Hoare_Time/QuantK_Hoare.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_The" ("_position" t)
###       ("\<^const>HOL.Ex_binder" ("_position" p)
###         ("\<^const>Big_StepT.big_step_t"
###           ("_tuple"
###             ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))
###             ("_tuple_arg" ("_position" s)))
###           ("_position" p) ("_position" t))))
###     ("_Update" ("_position" s)
###       ("_updbind" ("_position" x)
###         ("_applC" ("_position" aval)
###           ("_cargs" ("_position" e) ("_position" s)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Big_StepT.big_step_t"
###       ("_The" ("_position" t)
###         ("\<^const>HOL.Ex_binder" ("_position" p)
###           ("_tuple"
###             ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))
###             ("_tuple_arg" ("_position" s)))))
###       ("_position" p) ("_position" t))
###     ("_Update" ("_position" s)
###       ("_updbind" ("_position" x)
###         ("_applC" ("_position" aval)
###           ("_cargs" ("_position" e) ("_position" s)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_The" ("_position" t)
###       ("\<^const>Big_StepT.big_step_t"
###         ("\<^const>HOL.Ex_binder" ("_position" p)
###           ("_tuple"
###             ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))
###             ("_tuple_arg" ("_position" s))))
###         ("_position" p) ("_position" t)))
###     ("_Update" ("_position" s)
###       ("_updbind" ("_position" x)
###         ("_applC" ("_position" aval)
###           ("_cargs" ("_position" e) ("_position" s)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 411 of "$AFP/Hoare_Time/QuantK_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Big_StepT.big_step_t"
###       ("\<^const>HOL.Not"
###         ("_tuple"
###           ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))
###           ("_tuple_arg" ("_position" s))))
###       ("_position" p) ("_position" t))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.not_equal" ("_position" p)
###         ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero")))
###       ("\<^const>HOL.not_equal" ("_position" t)
###         ("_Update" ("_position" s)
###           ("_updbind" ("_position" x)
###             ("_applC" ("_position" aval)
###               ("_cargs" ("_position" e) ("_position" s)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.Not"
###       ("\<^const>Big_StepT.big_step_t"
###         ("_tuple"
###           ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))
###           ("_tuple_arg" ("_position" s)))
###         ("_position" p) ("_position" t)))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.not_equal" ("_position" p)
###         ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero")))
###       ("\<^const>HOL.not_equal" ("_position" t)
###         ("_Update" ("_position" s)
###           ("_updbind" ("_position" x)
###             ("_applC" ("_position" aval)
###               ("_cargs" ("_position" e) ("_position" s)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 420 of "$AFP/Hoare_Time/QuantK_Hoare.thy") produces 54 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>wpQ") ("_cargs" ("_position" c) ("_position" Q)))
###     ("_lambda" ("_position" s)
###       ("\<^const>HOL.If"
###         ("\<^const>Orderings.ord_class.less"
###           ("\<^const>Big_StepT.big_step_t"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" t) ("_position" p))
###               ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s))))
###             ("_position" p)
###             ("\<^const>HOL.conj" ("_position" t)
###               ("_applC" ("_position" Q) ("_position" t))))
###           ("\<^const>Extended_Nat.infinity_class.infinity"))
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" enat)
###             ("_The" ("_position" p)
###               ("\<^const>HOL.Ex_binder" ("_position" t)
###                 ("\<^const>Big_StepT.big_step_t"
###                   ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###                   ("_position" p) ("_position" t)))))
###           ("_applC" ("_position" Q)
###             ("_The" ("_position" t)
###               ("\<^const>HOL.Ex_binder" ("_position" p)
###                 ("\<^const>Big_StepT.big_step_t"
###                   ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###                   ("_position" p) ("_position" t))))))
###         ("\<^const>Extended_Nat.infinity_class.infinity")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>wpQ") ("_cargs" ("_position" c) ("_position" Q)))
###     ("_lambda" ("_position" s)
###       ("\<^const>HOL.If"
###         ("\<^const>HOL.Ex_binder" ("_idts" ("_position" t) ("_position" p))
###           ("\<^const>Orderings.ord_class.less"
###             ("\<^const>Big_StepT.big_step_t"
###               ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###               ("_position" p)
###               ("\<^const>HOL.conj" ("_position" t)
###                 ("_applC" ("_position" Q) ("_position" t))))
###             ("\<^const>Extended_Nat.infinity_class.infinity")))
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" enat)
###             ("_The" ("_position" p)
###               ("\<^const>HOL.Ex_binder" ("_position" t)
###                 ("\<^const>Big_StepT.big_step_t"
###                   ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###                   ("_position" p) ("_position" t)))))
###           ("_applC" ("_position" Q)
###             ("_The" ("_position" t)
###               ("\<^const>HOL.Ex_binder" ("_position" p)
###                 ("\<^const>Big_StepT.big_step_t"
###                   ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###                   ("_position" p) ("_position" t))))))
###         ("\<^const>Extended_Nat.infinity_class.infinity")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>wpQ") ("_cargs" ("_position" c) ("_position" Q)))
###     ("_lambda" ("_position" s)
###       ("\<^const>HOL.If"
###         ("\<^const>HOL.conj"
###           ("\<^const>Big_StepT.big_step_t"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" t) ("_position" p))
###               ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s))))
###             ("_position" p) ("_position" t))
###           ("\<^const>Orderings.ord_class.less"
###             ("_applC" ("_position" Q) ("_position" t))
###             ("\<^const>Extended_Nat.infinity_class.infinity")))
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" enat)
###             ("_The" ("_position" p)
###               ("\<^const>HOL.Ex_binder" ("_position" t)
###                 ("\<^const>Big_StepT.big_step_t"
###                   ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###                   ("_position" p) ("_position" t)))))
###           ("_applC" ("_position" Q)
###             ("_The" ("_position" t)
###               ("\<^const>HOL.Ex_binder" ("_position" p)
###                 ("\<^const>Big_StepT.big_step_t"
###                   ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###                   ("_position" p) ("_position" t))))))
###         ("\<^const>Extended_Nat.infinity_class.infinity")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>wpQ") ("_cargs" ("_position" c) ("_position" Q)))
###     ("_lambda" ("_position" s)
###       ("\<^const>HOL.If"
###         ("\<^const>HOL.Ex_binder" ("_idts" ("_position" t) ("_position" p))
###           ("\<^const>HOL.conj"
###             ("\<^const>Big_StepT.big_step_t"
###               ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###               ("_position" p) ("_position" t))
###             ("\<^const>Orderings.ord_class.less"
###               ("_applC" ("_position" Q) ("_position" t))
###               ("\<^const>Extended_Nat.infinity_class.infinity"))))
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" enat)
###             ("_The" ("_position" p)
###               ("\<^const>HOL.Ex_binder" ("_position" t)
###                 ("\<^const>Big_StepT.big_step_t"
###                   ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###                   ("_position" p) ("_position" t)))))
###           ("_applC" ("_position" Q)
###             ("_The" ("_position" t)
###               ("\<^const>HOL.Ex_binder" ("_position" p)
###                 ("\<^const>Big_StepT.big_step_t"
###                   ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###                   ("_position" p) ("_position" t))))))
###         ("\<^const>Extended_Nat.infinity_class.infinity")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>wpQ") ("_cargs" ("_position" c) ("_position" Q)))
###     ("_lambda" ("_position" s)
###       ("\<^const>HOL.If"
###         ("\<^const>Big_StepT.big_step_t"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" t) ("_position" p))
###             ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s))))
###           ("_position" p)
###           ("\<^const>HOL.conj" ("_position" t)
###             ("\<^const>Orderings.ord_class.less"
###               ("_applC" ("_position" Q) ("_position" t))
###               ("\<^const>Extended_Nat.infinity_class.infinity"))))
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" enat)
###             ("_The" ("_position" p)
###               ("\<^const>HOL.Ex_binder" ("_position" t)
###                 ("\<^const>Big_StepT.big_step_t"
###                   ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###                   ("_position" p) ("_position" t)))))
###           ("_applC" ("_position" Q)
###             ("_The" ("_position" t)
###               ("\<^const>HOL.Ex_binder" ("_position" p)
###                 ("\<^const>Big_StepT.big_step_t"
###                   ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###                   ("_position" p) ("_position" t))))))
###         ("\<^const>Extended_Nat.infinity_class.infinity")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>wpQ") ("_cargs" ("_position" c) ("_position" Q)))
###     ("_lambda" ("_position" s)
###       ("\<^const>HOL.If"
###         ("\<^const>HOL.Ex_binder" ("_idts" ("_position" t) ("_position" p))
###           ("\<^const>Big_StepT.big_step_t"
###             ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###             ("_position" p)
###             ("\<^const>HOL.conj" ("_position" t)
###               ("\<^const>Orderings.ord_class.less"
###                 ("_applC" ("_position" Q) ("_position" t))
###                 ("\<^const>Extended_Nat.infinity_class.infinity")))))
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" enat)
###             ("_The" ("_position" p)
###               ("\<^const>HOL.Ex_binder" ("_position" t)
###                 ("\<^const>Big_StepT.big_step_t"
###                   ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###                   ("_position" p) ("_position" t)))))
###           ("_applC" ("_position" Q)
###             ("_The" ("_position" t)
###               ("\<^const>HOL.Ex_binder" ("_position" p)
###                 ("\<^const>Big_StepT.big_step_t"
###                   ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###                   ("_position" p) ("_position" t))))))
###         ("\<^const>Extended_Nat.infinity_class.infinity")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>wpQ") ("_cargs" ("_position" c) ("_position" Q)))
###     ("_lambda" ("_position" s)
###       ("\<^const>HOL.If"
###         ("\<^const>Orderings.ord_class.less"
###           ("\<^const>Big_StepT.big_step_t"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" t) ("_position" p))
###               ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s))))
###             ("_position" p)
###             ("\<^const>HOL.conj" ("_position" t)
###               ("_applC" ("_position" Q) ("_position" t))))
###           ("\<^const>Extended_Nat.infinity_class.infinity"))
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" enat)
###             ("\<^const>Big_StepT.big_step_t"
###               ("_The" ("_position" p)
###                 ("\<^const>HOL.Ex_binder" ("_position" t)
###                   ("_tuple" ("_position" c)
###                     ("_tuple_arg" ("_position" s)))))
###               ("_position" p) ("_position" t)))
###           ("_applC" ("_position" Q)
###             ("_The" ("_position" t)
###               ("\<^const>HOL.Ex_binder" ("_position" p)
###                 ("\<^const>Big_StepT.big_step_t"
###                   ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###                   ("_position" p) ("_position" t))))))
###         ("\<^const>Extended_Nat.infinity_class.infinity")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>wpQ") ("_cargs" ("_position" c) ("_position" Q)))
###     ("_lambda" ("_position" s)
###       ("\<^const>HOL.If"
###         ("\<^const>HOL.Ex_binder" ("_idts" ("_position" t) ("_position" p))
###           ("\<^const>Orderings.ord_class.less"
###             ("\<^const>Big_StepT.big_step_t"
###               ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###               ("_position" p)
###               ("\<^const>HOL.conj" ("_position" t)
###                 ("_applC" ("_position" Q) ("_position" t))))
###             ("\<^const>Extended_Nat.infinity_class.infinity")))
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" enat)
###             ("\<^const>Big_StepT.big_step_t"
###               ("_The" ("_position" p)
###                 ("\<^const>HOL.Ex_binder" ("_position" t)
###                   ("_tuple" ("_position" c)
###                     ("_tuple_arg" ("_position" s)))))
###               ("_position" p) ("_position" t)))
###           ("_applC" ("_position" Q)
###             ("_The" ("_position" t)
###               ("\<^const>HOL.Ex_binder" ("_position" p)
###                 ("\<^const>Big_StepT.big_step_t"
###                   ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###                   ("_position" p) ("_position" t))))))
###         ("\<^const>Extended_Nat.infinity_class.infinity")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>wpQ") ("_cargs" ("_position" c) ("_position" Q)))
###     ("_lambda" ("_position" s)
###       ("\<^const>HOL.If"
###         ("\<^const>HOL.conj"
###           ("\<^const>Big_StepT.big_step_t"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" t) ("_position" p))
###               ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s))))
###             ("_position" p) ("_position" t))
###           ("\<^const>Orderings.ord_class.less"
###             ("_applC" ("_position" Q) ("_position" t))
###             ("\<^const>Extended_Nat.infinity_class.infinity")))
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" enat)
###             ("\<^const>Big_StepT.big_step_t"
###               ("_The" ("_position" p)
###                 ("\<^const>HOL.Ex_binder" ("_position" t)
###                   ("_tuple" ("_position" c)
###                     ("_tuple_arg" ("_position" s)))))
###               ("_position" p) ("_position" t)))
###           ("_applC" ("_position" Q)
###             ("_The" ("_position" t)
###               ("\<^const>HOL.Ex_binder" ("_position" p)
###                 ("\<^const>Big_StepT.big_step_t"
###                   ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###                   ("_position" p) ("_position" t))))))
###         ("\<^const>Extended_Nat.infinity_class.infinity")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>wpQ") ("_cargs" ("_position" c) ("_position" Q)))
###     ("_lambda" ("_position" s)
###       ("\<^const>HOL.If"
###         ("\<^const>HOL.Ex_binder" ("_idts" ("_position" t) ("_position" p))
###           ("\<^const>HOL.conj"
###             ("\<^const>Big_StepT.big_step_t"
###               ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###               ("_position" p) ("_position" t))
###             ("\<^const>Orderings.ord_class.less"
###               ("_applC" ("_position" Q) ("_position" t))
###               ("\<^const>Extended_Nat.infinity_class.infinity"))))
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" enat)
###             ("\<^const>Big_StepT.big_step_t"
###               ("_The" ("_position" p)
###                 ("\<^const>HOL.Ex_binder" ("_position" t)
###                   ("_tuple" ("_position" c)
###                     ("_tuple_arg" ("_position" s)))))
###               ("_position" p) ("_position" t)))
###           ("_applC" ("_position" Q)
###             ("_The" ("_position" t)
###               ("\<^const>HOL.Ex_binder" ("_position" p)
###                 ("\<^const>Big_StepT.big_step_t"
###                   ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###                   ("_position" p) ("_position" t))))))
###         ("\<^const>Extended_Nat.infinity_class.infinity")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.QuantK_Hoare"
### 0.745s elapsed time, 1.457s cpu time, 0.199s GC time
Loading theory "Draft.QuantK_HoareTemplates"
val templateLemmas =
   [("QuantK_Hoare.hoareQ_inf",
     "\<turnstile>\<^sub>2\<^sub>' {%s. \<infinity>} ?c {?Q}",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, t_empty), template_var 1),
           template_var 0)
         )),
    ("QuantK_Hoare.wpQ_is_pre",
     "\<turnstile>\<^sub>2\<^sub>' {wp\<^sub>Q ?c ?Q} ?c {?Q}",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 1),
           template_var 0)
         )),
    ("QuantK_Hoare.enatSuc0", "enat (Suc 0) * ?x = ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0))),
         template_var 0),
       template_var 0)),
    ("QuantK_Hoare.wpQ_skip", "wp\<^sub>Q SKIP ?Q = (%s. eSuc (?Q s))",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       t_empty)),
    ("QuantK_Hoare.hoareQ_sound_complete",
     "(\<turnstile>\<^sub>2\<^sub>' {?P} ?c {?Q}) =
      (\<Turnstile>\<^sub>2\<^sub>' {?P} ?c {?Q})",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("QuantK_Hoare.QZ_iff",
     "(\<turnstile>\<^sub>2\<^sub>' {?P} ?c {?Q}) =
      (\<turnstile>\<^sub>Z {?P} ?c {?Q})",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("QuantK_Hoare.hoareQ_complete",
     "\<Turnstile>\<^sub>2\<^sub>' {?P} ?c {?Q} ==>
      \<turnstile>\<^sub>2\<^sub>' {?P} ?c {?Q}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("QuantK_Hoare.hoareQ_sound",
     "\<turnstile>\<^sub>2\<^sub>' {?P} ?c {?Q} ==>
      \<Turnstile>\<^sub>2\<^sub>' {?P} ?c {?Q}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("QuantK_Hoare.QZ",
     "\<turnstile>\<^sub>2\<^sub>' {?P} ?c {?Q} ==>
      \<turnstile>\<^sub>Z {?P} ?c {?Q}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("QuantK_Hoare.ZQ",
     "\<turnstile>\<^sub>Z {?P} ?c {?Q} ==>
      \<turnstile>\<^sub>2\<^sub>' {?P} ?c {?Q}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("QuantK_Hoare.wpt_Seq",
     "wp\<^sub>Q (?c\<^sub>1;; ?c\<^sub>2) ?Q =
      wp\<^sub>Q ?c\<^sub>1 (wp\<^sub>Q ?c\<^sub>2 ?Q)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("QuantK_Hoare.SKIPt", "\<down>\<^sub>s (SKIP, ?s) = ?s",
     template_equation
      (template_app (template_hole 4, t_empty), template_var 0)),
    ("QuantK_Hoare.SKIPp", "\<down>\<^sub>t (SKIP, ?s) = Suc 0",
     template_equation
      (template_app (template_hole 6, t_empty),
       template_app (template_hole 1, template_hole 0))),
    ("QuantK_Hoare.ASSp", "\<down>\<^sub>t (?x ::= ?e, ?s) = Suc 0",
     template_equation
      (template_app (template_hole 6, t_empty),
       template_app (template_hole 1, template_hole 0))),
    ("QuantK_Hoare.wpQ_ass",
     "wp\<^sub>Q (?x ::= ?e) ?Q = (%s. eSuc (?Q (s[?e/?x])))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       t_empty)),
    ("QuantK_Hoare.wpQ_is_pre'",
     "\<turnstile>\<^sub>2\<^sub>' {wp\<^sub>Q ?c (%s. enat ?k * ?Q s)} ?c
                                   {%s. enat ?k * ?Q s}",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2), t_empty)),
             template_var 2),
           t_empty)
         )),
    ("QuantK_Hoare.wpQ_WhileFalse",
     "~ bval ?b ?s ==> ?Q ?s + 1 <= wp\<^sub>Q (WHILE ?b DO ?c) ?Q ?s",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)
                )
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_var 1, template_var 2)),
           template_hole 2),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)),
             template_var 1),
           template_var 2)))),
    ("QuantK_Hoare.wpQ_If",
     "wp\<^sub>Q (IF ?b THEN ?c\<^sub>1 ELSE ?c\<^sub>2) ?Q =
      (%s. eSuc
            (wp\<^sub>Q (if bval ?b s then ?c\<^sub>1 else ?c\<^sub>2) ?Q
              s))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       t_empty)),
    ("QuantK_Hoare.SKIPnot",
     "(~ (SKIP, ?s) \<Rightarrow> ?p \<Down> ?t) =
      (?s ~= ?t | ?p ~= Suc 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_hole 5),
                      template_var 2)),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 0))),
             template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app (template_hole 1, template_hole 0))))
           ))),
    ("QuantK_Hoare.ASSt", "\<down>\<^sub>s (?x ::= ?e, ?s) = ?s[?e/?x]",
     template_equation
      (template_app (template_hole 6, t_empty),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("QuantK_Hoare.weakenpre",
     "[| \<turnstile>\<^sub>2\<^sub>' {?P} ?c {?Q}; ALL s. ?P s <= ?P' s |]
      ==> \<turnstile>\<^sub>2\<^sub>' {?P'} ?c {?Q}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("QuantK_Hoare.weaken_post",
     "[| \<turnstile>\<^sub>2\<^sub>' {?P} ?c {?Q}; ALL s. ?Q' s <= ?Q s |]
      ==> \<turnstile>\<^sub>2\<^sub>' {?P} ?c {?Q'}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("QuantK_Hoare.strengthen_pre",
     "[| ALL s. ?P s <= ?P' s; \<turnstile>\<^sub>2\<^sub>' {?P} ?c {?Q} |]
      ==> \<turnstile>\<^sub>2\<^sub>' {?P'} ?c {?Q}",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("QuantK_Hoare.bigstepT_the_state",
     "(?c, ?s) \<Rightarrow> ?P \<Down> ?T ==>
      \<down>\<^sub>s (?c, ?s) = ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 1, t_empty), template_var 0))),
    ("QuantK_Hoare.bigstepT_the_cost",
     "(?c, ?s) \<Rightarrow> ?P \<Down> ?T ==>
      \<down>\<^sub>t (?c, ?s) = ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 1, t_empty), template_var 1))),
    ("QuantK_Hoare.Assign'",
     "ALL s. eSuc (?Q (s[?a/?x])) <= ?P s ==>
      \<turnstile>\<^sub>2\<^sub>' {?P} ?x ::= ?a {?Q}",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 3)
           ))),
    ("QuantK_Hoare.wpQ_WhileTrue",
     "bval ?b ?s ==>
      wp\<^sub>Q ?c (wp\<^sub>Q (WHILE ?b DO ?c) ?Q) ?s + 1
      <= wp\<^sub>Q (WHILE ?b DO ?c) ?Q ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 3),
                       template_var 1)),
                   template_var 0)),
               template_var 2)),
           template_hole 0),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_var 0),
           template_var 2)))),
    ("QuantK_Hoare.bigstep_det",
     "[| (?c1.0, ?s) \<Rightarrow> ?p1.0 \<Down> ?t1.0;
         (?c1.0, ?s) \<Rightarrow> ?p \<Down> ?t |]
      ==> ?p1.0 = ?p & ?t1.0 = ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 5),
                    template_var 4)),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 5),
                    template_var 4)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("QuantK_Hoare.ASSnot",
     "(~ (?x ::= ?e, ?s) \<Rightarrow> ?p \<Down> ?t) =
      (?p ~= Suc 0 | ?t ~= ?s[?e/?x])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 10,
              template_app
               (template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app
                       (template_hole 8,
                        template_app
                         (template_app (template_hole 7, template_var 4),
                          template_var 3)),
                      template_var 2)),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 10,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_app (template_hole 4, template_hole 3)))),
             template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 4),
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 2)))))
           ))),
    ("QuantK_Hoare.const",
     "[| \<turnstile>\<^sub>2\<^sub>' {%s. enat ?k * ?P s} ?c
{%s. enat ?k * ?Q s};
         0 < ?k |]
      ==> \<turnstile>\<^sub>2\<^sub>' {?P} ?c {?Q}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, t_empty), template_var 1),
              t_empty)
            ),
        template_inequation (less_than, template_hole 0, template_var 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("QuantK_Hoare.conseq'",
     "[| \<turnstile>\<^sub>2\<^sub>' {?P} ?c {?Q}; ALL s. ?P s <= ?P' s;
         ALL s. ?Q' s <= ?Q s |]
      ==> \<turnstile>\<^sub>2\<^sub>' {?P'} ?c {?Q'}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 1, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 3),
             template_var 0)
           ))),
    ("QuantK_Hoare.wpQ_is_weakestprePotential1",
     "\<Turnstile>\<^sub>2\<^sub>' {?P} ?c {?Q} ==>
      EX k>0. ALL s. wp\<^sub>Q ?c (%s. enat k * ?Q s) s <= enat k * ?P s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("QuantK_Hoare.Z",
     "0 < ?X ==>
      eSuc (enat (nat (2 * ?X) * nat (2 * ?X)))
      <= enat (5 * nat (?X * ?X))",
     template_implication
      ([template_inequation (less_than, template_hole 11, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 9,
           template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4,
                         template_app (template_hole 3, template_hole 2))),
                     template_var 0))),
               template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_hole 2))),
                   template_var 0))))),
         template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 0,
                   template_app (template_hole 3, template_hole 2)))),
             template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_var 0))))))),
    ("QuantK_Hoare.Zconseq",
     "[| \<turnstile>\<^sub>Z {?P} ?c {?Q}; !!s. ?P s <= enat ?k * ?P' s;
         !!s. enat ?k * ?Q' s <= ?Q s; 0 < ?k |]
      ==> \<turnstile>\<^sub>Z {?P'} ?c {?Q'}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_inequation (less_than, template_hole 0, template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, template_var 1),
               template_var 4),
             template_var 0)
           )))]:
   (string * thm * template) list
### theory "Draft.QuantK_HoareTemplates"
### 0.371s elapsed time, 0.470s cpu time, 0.000s GC time
val it = (): unit
