   [("Quant_Hoare.FalseImplies",
     "\<turnstile>\<^sub>2 {%s. \<infinity>} ?c {?Q}",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, t_empty), template_var 1),
           template_var 0)
         )),
    ("Quant_Hoare.wp2_is_pre",
     "\<turnstile>\<^sub>2 {wp\<^sub>2 ?c ?Q} ?c {?Q}",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 1),
           template_var 0)
         )),
    ("Quant_Hoare.wp2_Skip", "wp\<^sub>2 SKIP ?Q = (%s. eSuc (?Q s))",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       t_empty)),
    ("Quant_Hoare.hoare2_sound_complete",
     "(\<turnstile>\<^sub>2 {?P} ?c {?Q}) =
      (\<Turnstile>\<^sub>2 {?P} ?c {?Q})",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Quant_Hoare.hoare2_sound",
     "\<turnstile>\<^sub>2 {?P} ?c {?Q} ==>
      \<Turnstile>\<^sub>2 {?P} ?c {?Q}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Quant_Hoare.hoare2_complete",
     "\<Turnstile>\<^sub>2 {?P} ?c {?Q} ==>
      \<turnstile>\<^sub>2 {?P} ?c {?Q}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Quant_Hoare.wp2_Seq",
     "wp\<^sub>2 (?c\<^sub>1;; ?c\<^sub>2) ?Q =
      wp\<^sub>2 ?c\<^sub>1 (wp\<^sub>2 ?c\<^sub>2 ?Q)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Quant_Hoare.progress",
     "(?c, ?s) \<Rightarrow> ?p \<Down> ?t ==> 0 < ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_inequation (less_than, template_hole 0, template_var 1))),
    ("Quant_Hoare.wp2_is_weakestprePotential",
     "(ALL s. wp\<^sub>2 ?c ?Q s <= ?P s) =
      (\<Turnstile>\<^sub>2 {?P} ?c {?Q})",
     template_equation
      (template_app (template_hole 3, t_empty),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_var 1))),
    ("Quant_Hoare.wp2_Assign",
     "wp\<^sub>2 (?x ::= ?e) ?Q = (%s. eSuc (?Q (s[?e/?x])))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       t_empty)),
    ("Quant_Hoare.wp2_is_weakestprePotential1",
     "\<Turnstile>\<^sub>2 {?P} ?c {?Q} ==>
      ALL s. wp\<^sub>2 ?c ?Q s <= ?P s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Quant_Hoare.wp2_is_weakestprePotential2",
     "ALL s. wp\<^sub>2 ?c ?Q s <= ?P s ==>
      \<Turnstile>\<^sub>2 {?P} ?c {?Q}",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("Quant_Hoare.wp2WhileFalse'",
     "~ bval ?b ?s ==> ?Q ?s + 1 = wp\<^sub>2 (WHILE ?b DO ?c) ?Q ?s",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_var 1, template_var 2)),
           template_hole 2),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)),
             template_var 1),
           template_var 2)))),
    ("Quant_Hoare.wp2WhileFalse",
     "~ bval ?b ?s ==> ?Q ?s + 1 <= wp\<^sub>2 (WHILE ?b DO ?c) ?Q ?s",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)
                )
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_var 1, template_var 2)),
           template_hole 2),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)),
             template_var 1),
           template_var 2)))),
    ("Quant_Hoare.wp2_If",
     "wp\<^sub>2 (IF ?b THEN ?c\<^sub>1 ELSE ?c\<^sub>2) ?Q =
      (%s. eSuc
            (wp\<^sub>2 (if bval ?b s then ?c\<^sub>1 else ?c\<^sub>2) ?Q
              s))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       t_empty)),
    ("Quant_Hoare.Seq_sound",
     "[| \<Turnstile>\<^sub>2 {?P1.0} ?C1.0 {?P2.0};
         \<Turnstile>\<^sub>2 {?P2.0} ?C2.0 {?P3.0} |]
      ==> \<Turnstile>\<^sub>2 {?P1.0} ?C1.0;; ?C2.0 {?P3.0}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_var 0)
           ))),
    ("Quant_Hoare.weaken_post",
     "[| \<turnstile>\<^sub>2 {?P} ?c {?Q}; ALL s. ?Q' s <= ?Q s |]
      ==> \<turnstile>\<^sub>2 {?P} ?c {?Q'}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Quant_Hoare.strengthen_pre",
     "[| ALL s. ?P s <= ?P' s; \<turnstile>\<^sub>2 {?P} ?c {?Q} |]
      ==> \<turnstile>\<^sub>2 {?P'} ?c {?Q}",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Quant_Hoare.thes_WhileFalse",
     "~ bval ?b ?s ==> \<down>\<^sub>s (WHILE ?b DO ?c, ?s) = ?s",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)
                )
            )],
       template_equation
        (template_app (template_hole 4, t_empty), template_var 1))),
    ("Quant_Hoare.thet_WhileFalse",
     "~ bval ?b ?s ==> \<down>\<^sub>t (WHILE ?b DO ?c, ?s) = 1",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_var 1)
                )
            )],
       template_equation
        (template_app (template_hole 5, t_empty), template_hole 0))),
    ("Quant_Hoare.Assign'",
     "ALL s. eSuc (?Q (s[?a/?x])) <= ?P s ==>
      \<turnstile>\<^sub>2 {?P} ?x ::= ?a {?Q}",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 3)
           ))),
    ("Quant_Hoare.wp2WhileTrue'",
     "bval ?b ?s ==>
      wp\<^sub>2 ?c (wp\<^sub>2 (WHILE ?b DO ?c) ?Q) ?s + 1 =
      wp\<^sub>2 (WHILE ?b DO ?c) ?Q ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 3),
                       template_var 1)),
                   template_var 0)),
               template_var 2)),
           template_hole 0),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_var 0),
           template_var 2)))),
    ("Quant_Hoare.wp2WhileTrue",
     "bval ?b ?s ==>
      wp\<^sub>2 ?c (wp\<^sub>2 (WHILE ?b DO ?c) ?Q) ?s + 1
      <= wp\<^sub>2 (WHILE ?b DO ?c) ?Q ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 3),
                       template_var 1)),
                   template_var 0)),
               template_var 2)),
           template_hole 0),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_var 0),
           template_var 2)))),
    ("Quant_Hoare.wp2While",
     "(if bval ?b ?s then wp\<^sub>2 ?c (wp\<^sub>2 (WHILE ?b DO ?c) ?Q) ?s
       else ?Q ?s) +
      1 =
      wp\<^sub>2 (WHILE ?b DO ?c) ?Q ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 3),
                   template_var 2)),
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 1),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 1, template_var 3),
                         template_var 1)),
                     template_var 0)),
                 template_var 2)),
             template_app (template_var 0, template_var 2))),
         template_hole 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1)),
           template_var 0),
         template_var 2))),
    ("Quant_Hoare.help1",
     "[| enat ?a + ?X <= ?Y; enat ?b + ?Z <= ?X |]
      ==> enat (?a + ?b) + ?Z <= ?Y",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 4)),
            template_var 3),
          template_var 2),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 1)),
            template_var 0),
          template_var 3)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 1))),
           template_var 0),
         template_var 2))),
    ("Quant_Hoare.help2",
     "[| enat ?p + ?INV ?t + 1 <= ?INV ?s; ?INV ?s = enat ?n |]
      ==> ?INV ?t < ?INV ?s",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 4)),
                template_app (template_var 3, template_var 2))),
            template_hole 2),
          template_app (template_var 3, template_var 1)),
        template_equation
         (template_app (template_var 3, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_inequation
        (less_than, template_app (template_var 3, template_var 2),
         template_app (template_var 3, template_var 1)))),
    ("Quant_Hoare.help2'",
     "[| enat ?p + ?INV ?t <= ?INV ?s; 0 < ?p; ?INV ?s = enat ?n |]
      ==> ?INV ?t < ?INV ?s",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 4)),
            template_app (template_var 3, template_var 2)),
          template_app (template_var 3, template_var 1)),
        template_inequation (less_than, template_hole 2, template_var 4),
        template_equation
         (template_app (template_var 3, template_var 1),
          template_app (template_hole 4, template_var 0))],
       template_inequation
        (less_than, template_app (template_var 3, template_var 2),
         template_app (template_var 3, template_var 1)))),
    ("Quant_Hoare.wp2_alt",
     "wp\<^sub>2 ?c ?Q =
      (%s. if \<down> (?c, s)
           then enat (\<down>\<^sub>t (?c, s)) +
                ?Q (\<down>\<^sub>s (?c, s))
           else \<infinity>)",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 1), template_var 0),
       t_empty))]
