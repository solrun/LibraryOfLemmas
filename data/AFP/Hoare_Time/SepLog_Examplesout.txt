Loading theory "Draft.AExp" (required by "Draft.SepLog_ExamplesTemplates" via "Draft.SepLog_Examples" via "Draft.SepLog_Hoare" via "Draft.Big_StepT_Partial" via "Draft.Partial_Evaluation")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SepLog_ExamplesTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SepLog_ExamplesTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.SepLog_ExamplesTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.148s elapsed time, 0.599s cpu time, 0.058s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SepLog_ExamplesTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.239s elapsed time, 0.962s cpu time, 0.058s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SepLog_ExamplesTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.AExp"
### 0.731s elapsed time, 2.894s cpu time, 0.285s GC time
Loading theory "Draft.BExp" (required by "Draft.SepLog_ExamplesTemplates" via "Draft.SepLog_Examples" via "Draft.SepLog_Hoare" via "Draft.Big_StepT_Partial" via "Draft.Partial_Evaluation" via "Draft.Vars" via "Draft.Com")
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.900s elapsed time, 3.558s cpu time, 0.364s GC time
Loading theory "Draft.Product_Separation_Algebra" (required by "Draft.SepLog_ExamplesTemplates" via "Draft.SepLog_Examples" via "Draft.SepLog_Hoare" via "Draft.Big_StepT_Partial" via "Draft.Sep_Algebra_Add")
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
instantiation
  prod :: (sep_algebra, sep_algebra) sep_algebra
  sep_disj_prod == sep_disj :: 'a * 'b => 'a * 'b => bool
  plus_prod == plus :: 'a * 'b => 'a * 'b => 'a * 'b
  zero_prod == zero_class.zero :: 'a * 'b
instantiation
  nat :: sep_algebra
  sep_disj_nat == sep_disj :: nat => nat => bool
Found termination order: "size <*mlex*> {}"
### theory "Draft.Product_Separation_Algebra"
### 0.227s elapsed time, 0.774s cpu time, 0.476s GC time
Loading theory "Draft.Sep_Algebra_Add" (required by "Draft.SepLog_ExamplesTemplates" via "Draft.SepLog_Examples" via "Draft.SepLog_Hoare" via "Draft.Big_StepT_Partial")
### theory "HOL-Library.BigO"
### 0.910s elapsed time, 3.460s cpu time, 0.782s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
"12"
  :: "int"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Sep_Algebra_Add"
### 0.321s elapsed time, 1.254s cpu time, 0.102s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.BExp"
### 0.746s elapsed time, 2.802s cpu time, 0.656s GC time
Loading theory "Draft.Com" (required by "Draft.SepLog_ExamplesTemplates" via "Draft.SepLog_Examples" via "Draft.SepLog_Hoare" via "Draft.Big_StepT_Partial" via "Draft.Partial_Evaluation" via "Draft.Vars")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
"12"
  :: "int"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
"True"
  :: "bool"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Com"
### 0.576s elapsed time, 1.540s cpu time, 0.218s GC time
Loading theory "Draft.Big_Step" (required by "Draft.SepLog_ExamplesTemplates" via "Draft.SepLog_Examples" via "Draft.SepLog_Hoare" via "Draft.Big_StepT_Partial" via "Draft.Big_StepT")
Loading theory "Draft.Vars" (required by "Draft.SepLog_ExamplesTemplates" via "Draft.SepLog_Examples" via "Draft.SepLog_Hoare" via "Draft.Big_StepT_Partial" via "Draft.Partial_Evaluation")
Proofs for inductive predicate(s) "big_step"
  Proving monotonicity ...
class vars = type +
  fixes vars :: "'a => char list set"
instantiation
  aexp :: vars
  vars_aexp == vars :: aexp => char list set
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.240s elapsed time, 7.720s cpu time, 1.818s GC time
Loading theory "Draft.Templates" (required by "Draft.SepLog_ExamplesTemplates" via "Draft.ExtrEqs")
instantiation
  bexp :: vars
  vars_bexp == vars :: bexp => char list set
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
Found termination order: "size <*mlex*> {}"
### theory "Draft.Templates"
### 0.085s elapsed time, 0.320s cpu time, 0.025s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SepLog_ExamplesTemplates")
Found termination order: "size <*mlex*> {}"
"{''x'', ''y''}"
  :: "char list set"
### theory "Draft.Big_Step"
### 0.616s elapsed time, 2.179s cpu time, 0.805s GC time
Loading theory "Draft.Big_StepT" (required by "Draft.SepLog_ExamplesTemplates" via "Draft.SepLog_Examples" via "Draft.SepLog_Hoare" via "Draft.Big_StepT_Partial")
Found termination order: "size <*mlex*> {}"
instantiation
  com :: vars
  vars_com == vars :: com => char list set
Proofs for inductive predicate(s) "big_step_t"
### theory "Draft.Vars"
### 0.666s elapsed time, 2.376s cpu time, 0.805s GC time
Loading theory "Draft.Partial_Evaluation" (required by "Draft.SepLog_ExamplesTemplates" via "Draft.SepLog_Examples" via "Draft.SepLog_Hoare" via "Draft.Big_StepT_Partial")
  Proving monotonicity ...
"{''y'', ''z'', ''x''}"
  :: "char list set"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
"{_}"
  :: "(char list => int) set"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.686s elapsed time, 2.703s cpu time, 0.203s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Partial_Evaluation"
### 0.716s elapsed time, 2.820s cpu time, 0.242s GC time
"{[42]}"
  :: "int list set"
[| ?x1.0 \<Rightarrow> ?x2.0; !!s. ?P (SKIP, s) s;
   !!x a s. ?P (x ::= a, s) (s(x := aval a s));
   !!c\<^sub>1 s\<^sub>1 s\<^sub>2 c\<^sub>2 s\<^sub>3.
      [| (c\<^sub>1, s\<^sub>1) \<Rightarrow> s\<^sub>2;
         ?P (c\<^sub>1, s\<^sub>1) s\<^sub>2;
         (c\<^sub>2, s\<^sub>2) \<Rightarrow> s\<^sub>3;
         ?P (c\<^sub>2, s\<^sub>2) s\<^sub>3 |]
      ==> ?P (c\<^sub>1;; c\<^sub>2, s\<^sub>1) s\<^sub>3;
   !!b s c\<^sub>1 t c\<^sub>2.
      [| bval b s; (c\<^sub>1, s) \<Rightarrow> t; ?P (c\<^sub>1, s) t |]
      ==> ?P (IF b THEN c\<^sub>1 ELSE c\<^sub>2, s) t;
   !!b s c\<^sub>2 t c\<^sub>1.
      [| ~ bval b s; (c\<^sub>2, s) \<Rightarrow> t; ?P (c\<^sub>2, s) t |]
      ==> ?P (IF b THEN c\<^sub>1 ELSE c\<^sub>2, s) t;
   !!b s c. ~ bval b s ==> ?P (WHILE b DO c, s) s;
   !!b s\<^sub>1 c s\<^sub>2 s\<^sub>3.
      [| bval b s\<^sub>1; (c, s\<^sub>1) \<Rightarrow> s\<^sub>2;
         ?P (c, s\<^sub>1) s\<^sub>2;
         (WHILE b DO c, s\<^sub>2) \<Rightarrow> s\<^sub>3;
         ?P (WHILE b DO c, s\<^sub>2) s\<^sub>3 |]
      ==> ?P (WHILE b DO c, s\<^sub>1) s\<^sub>3 |]
==> ?P ?x1.0 ?x2.0
[| (?x1a, ?x1b) \<Rightarrow> ?x2a; !!s. ?P SKIP s s;
   !!x a s. ?P (x ::= a) s (s(x := aval a s));
   !!c\<^sub>1 s\<^sub>1 s\<^sub>2 c\<^sub>2 s\<^sub>3.
      [| (c\<^sub>1, s\<^sub>1) \<Rightarrow> s\<^sub>2;
         ?P c\<^sub>1 s\<^sub>1 s\<^sub>2;
         (c\<^sub>2, s\<^sub>2) \<Rightarrow> s\<^sub>3;
         ?P c\<^sub>2 s\<^sub>2 s\<^sub>3 |]
      ==> ?P (c\<^sub>1;; c\<^sub>2) s\<^sub>1 s\<^sub>3;
   !!b s c\<^sub>1 t c\<^sub>2.
      [| bval b s; (c\<^sub>1, s) \<Rightarrow> t; ?P c\<^sub>1 s t |]
      ==> ?P (IF b THEN c\<^sub>1 ELSE c\<^sub>2) s t;
   !!b s c\<^sub>2 t c\<^sub>1.
      [| ~ bval b s; (c\<^sub>2, s) \<Rightarrow> t; ?P c\<^sub>2 s t |]
      ==> ?P (IF b THEN c\<^sub>1 ELSE c\<^sub>2) s t;
   !!b s c. ~ bval b s ==> ?P (WHILE b DO c) s s;
   !!b s\<^sub>1 c s\<^sub>2 s\<^sub>3.
      [| bval b s\<^sub>1; (c, s\<^sub>1) \<Rightarrow> s\<^sub>2;
         ?P c s\<^sub>1 s\<^sub>2;
         (WHILE b DO c, s\<^sub>2) \<Rightarrow> s\<^sub>3;
         ?P (WHILE b DO c) s\<^sub>2 s\<^sub>3 |]
      ==> ?P (WHILE b DO c) s\<^sub>1 s\<^sub>3 |]
==> ?P ?x1a ?x1b ?x2a
[| (SKIP, ?s) \<Rightarrow> ?t; ?t = ?s ==> ?P |] ==> ?P
[| (?x ::= ?a, ?s) \<Rightarrow> ?t; ?t = ?s(?x := aval ?a ?s) ==> ?P |]
==> ?P
[| (?c1.0;; ?c2.0, ?s1.0) \<Rightarrow> ?s3.0;
   !!s\<^sub>2.
      [| (?c1.0, ?s1.0) \<Rightarrow> s\<^sub>2;
         (?c2.0, s\<^sub>2) \<Rightarrow> ?s3.0 |]
      ==> ?P |]
==> ?P
[| (IF ?b THEN ?c1.0 ELSE ?c2.0, ?s) \<Rightarrow> ?t;
   [| bval ?b ?s; (?c1.0, ?s) \<Rightarrow> ?t |] ==> ?P;
   [| ~ bval ?b ?s; (?c2.0, ?s) \<Rightarrow> ?t |] ==> ?P |]
==> ?P
[| (WHILE ?b DO ?c, ?s) \<Rightarrow> ?t;
   [| ?t = ?s; ~ bval ?b ?s |] ==> ?P;
   !!s\<^sub>2.
      [| bval ?b ?s; (?c, ?s) \<Rightarrow> s\<^sub>2;
         (WHILE ?b DO ?c, s\<^sub>2) \<Rightarrow> ?t |]
      ==> ?P |]
==> ?P
[| bval ?b ?s; (?c\<^sub>1, ?s) \<Rightarrow> ?t |]
==> (IF ?b THEN ?c\<^sub>1 ELSE ?c\<^sub>2, ?s) \<Rightarrow> ?t
"{[15, 13]}"
  :: "int list set"
"{[2]}"
  :: "int list set"
### Ambiguous input (line 92 of "$AFP/Hoare_Time/Big_StepT.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Big_StepT.big_step_t"
###       ("_tuple" ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###         ("_tuple_arg" ("_position" s)))
###       ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero"))
###       ("_position" s'))
###     ("\<^const>HOL.eq" ("_position" s')
###       ("_Update" ("_position" s)
###         ("_updbind" ("_position" x)
###           ("_applC" ("_position" aval)
###             ("_cargs" ("_position" a) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Big_StepT.big_step_t"
###     ("_tuple" ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###       ("_tuple_arg" ("_position" s)))
###     ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero"))
###     ("\<^const>HOL.iff" ("_position" s')
###       ("\<^const>HOL.eq" ("_position" s')
###         ("_Update" ("_position" s)
###           ("_updbind" ("_position" x)
###             ("_applC" ("_position" aval)
###               ("_cargs" ("_position" a) ("_position" s)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 191 of "$AFP/Hoare_Time/Big_StepT.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Big_StepT.big_step_t"
###       ("\<^const>HOL.Not"
###         ("_tuple" ("_position" SKIP) ("_tuple_arg" ("_position" s))))
###       ("_position" p) ("_position" t))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.not_equal" ("_position" s) ("_position" t))
###       ("\<^const>HOL.not_equal" ("_position" p)
###         ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.Not"
###       ("\<^const>Big_StepT.big_step_t"
###         ("_tuple" ("_position" SKIP) ("_tuple_arg" ("_position" s)))
###         ("_position" p) ("_position" t)))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.not_equal" ("_position" s) ("_position" t))
###       ("\<^const>HOL.not_equal" ("_position" p)
###         ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero"))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 210 of "$AFP/Hoare_Time/Big_StepT.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_The" ("_position" t)
###       ("\<^const>HOL.Ex_binder" ("_position" p)
###         ("\<^const>Big_StepT.big_step_t"
###           ("_tuple"
###             ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))
###             ("_tuple_arg" ("_position" s)))
###           ("_position" p) ("_position" t))))
###     ("_Update" ("_position" s)
###       ("_updbind" ("_position" x)
###         ("_applC" ("_position" aval)
###           ("_cargs" ("_position" e) ("_position" s)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Big_StepT.big_step_t"
###       ("_The" ("_position" t)
###         ("\<^const>HOL.Ex_binder" ("_position" p)
###           ("_tuple"
###             ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))
###             ("_tuple_arg" ("_position" s)))))
###       ("_position" p) ("_position" t))
###     ("_Update" ("_position" s)
###       ("_updbind" ("_position" x)
###         ("_applC" ("_position" aval)
###           ("_cargs" ("_position" e) ("_position" s)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_The" ("_position" t)
###       ("\<^const>Big_StepT.big_step_t"
###         ("\<^const>HOL.Ex_binder" ("_position" p)
###           ("_tuple"
###             ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))
###             ("_tuple_arg" ("_position" s))))
###         ("_position" p) ("_position" t)))
###     ("_Update" ("_position" s)
###       ("_updbind" ("_position" x)
###         ("_applC" ("_position" aval)
###           ("_cargs" ("_position" e) ("_position" s)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 215 of "$AFP/Hoare_Time/Big_StepT.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Big_StepT.big_step_t"
###       ("\<^const>HOL.Not"
###         ("_tuple"
###           ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))
###           ("_tuple_arg" ("_position" s))))
###       ("_position" p) ("_position" t))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.not_equal" ("_position" p)
###         ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero")))
###       ("\<^const>HOL.not_equal" ("_position" t)
###         ("_Update" ("_position" s)
###           ("_updbind" ("_position" x)
###             ("_applC" ("_position" aval)
###               ("_cargs" ("_position" e) ("_position" s)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.Not"
###       ("\<^const>Big_StepT.big_step_t"
###         ("_tuple"
###           ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))
###           ("_tuple_arg" ("_position" s)))
###         ("_position" p) ("_position" t)))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.not_equal" ("_position" p)
###         ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero")))
###       ("\<^const>HOL.not_equal" ("_position" t)
###         ("_Update" ("_position" s)
###           ("_updbind" ("_position" x)
###             ("_applC" ("_position" aval)
###               ("_cargs" ("_position" e) ("_position" s)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 220 of "$AFP/Hoare_Time/Big_StepT.thy") produces 9 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("\<^const>Big_StepT.big_step_t"
###             ("_tuple" ("_position" c1) ("_tuple_arg" ("_position" s)))
###             ("_position" n) ("_position" a)))))
###     ("_The" ("_position" n)
###       ("\<^const>HOL.Ex_binder" ("_position" a)
###         ("\<^const>Big_StepT.big_step_t"
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))
###           ("_position" n) ("_position" a))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("\<^const>Big_StepT.big_step_t"
###         ("_The" ("_position" n)
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c1) ("_tuple_arg" ("_position" s)))))
###         ("_position" n) ("_position" a)))
###     ("_The" ("_position" n)
###       ("\<^const>HOL.Ex_binder" ("_position" a)
###         ("\<^const>Big_StepT.big_step_t"
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))
###           ("_position" n) ("_position" a))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>Big_StepT.big_step_t"
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c1) ("_tuple_arg" ("_position" s))))
###           ("_position" n) ("_position" a))))
###     ("_The" ("_position" n)
###       ("\<^const>HOL.Ex_binder" ("_position" a)
###         ("\<^const>Big_StepT.big_step_t"
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))
###           ("_position" n) ("_position" a))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("\<^const>Big_StepT.big_step_t"
###             ("_tuple" ("_position" c1) ("_tuple_arg" ("_position" s)))
###             ("_position" n) ("_position" a)))))
###     ("\<^const>Big_StepT.big_step_t"
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))))
###       ("_position" n) ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("\<^const>Big_StepT.big_step_t"
###         ("_The" ("_position" n)
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c1) ("_tuple_arg" ("_position" s)))))
###         ("_position" n) ("_position" a)))
###     ("\<^const>Big_StepT.big_step_t"
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))))
###       ("_position" n) ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>Big_StepT.big_step_t"
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c1) ("_tuple_arg" ("_position" s))))
###           ("_position" n) ("_position" a))))
###     ("\<^const>Big_StepT.big_step_t"
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))))
###       ("_position" n) ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("\<^const>Big_StepT.big_step_t"
###             ("_tuple" ("_position" c1) ("_tuple_arg" ("_position" s)))
###             ("_position" n) ("_position" a)))))
###     ("_The" ("_position" n)
###       ("\<^const>Big_StepT.big_step_t"
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s))))
###         ("_position" n) ("_position" a)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("\<^const>Big_StepT.big_step_t"
###         ("_The" ("_position" n)
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c1) ("_tuple_arg" ("_position" s)))))
###         ("_position" n) ("_position" a)))
###     ("_The" ("_position" n)
###       ("\<^const>Big_StepT.big_step_t"
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s))))
###         ("_position" n) ("_position" a)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>Big_StepT.big_step_t"
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c1) ("_tuple_arg" ("_position" s))))
###           ("_position" n) ("_position" a))))
###     ("_The" ("_position" n)
###       ("\<^const>Big_StepT.big_step_t"
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s))))
###         ("_position" n) ("_position" a)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 232 of "$AFP/Hoare_Time/Big_StepT.thy") produces 9 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("\<^const>Big_StepT.big_step_t"
###             ("_tuple" ("_position" c2) ("_tuple_arg" ("_position" s)))
###             ("_position" n) ("_position" a)))))
###     ("_The" ("_position" n)
###       ("\<^const>HOL.Ex_binder" ("_position" a)
###         ("\<^const>Big_StepT.big_step_t"
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))
###           ("_position" n) ("_position" a))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("\<^const>Big_StepT.big_step_t"
###         ("_The" ("_position" n)
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c2) ("_tuple_arg" ("_position" s)))))
###         ("_position" n) ("_position" a)))
###     ("_The" ("_position" n)
###       ("\<^const>HOL.Ex_binder" ("_position" a)
###         ("\<^const>Big_StepT.big_step_t"
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))
###           ("_position" n) ("_position" a))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>Big_StepT.big_step_t"
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c2) ("_tuple_arg" ("_position" s))))
###           ("_position" n) ("_position" a))))
###     ("_The" ("_position" n)
###       ("\<^const>HOL.Ex_binder" ("_position" a)
###         ("\<^const>Big_StepT.big_step_t"
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))
###           ("_position" n) ("_position" a))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("\<^const>Big_StepT.big_step_t"
###             ("_tuple" ("_position" c2) ("_tuple_arg" ("_position" s)))
###             ("_position" n) ("_position" a)))))
###     ("\<^const>Big_StepT.big_step_t"
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))))
###       ("_position" n) ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("\<^const>Big_StepT.big_step_t"
###         ("_The" ("_position" n)
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c2) ("_tuple_arg" ("_position" s)))))
###         ("_position" n) ("_position" a)))
###     ("\<^const>Big_StepT.big_step_t"
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))))
###       ("_position" n) ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>Big_StepT.big_step_t"
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c2) ("_tuple_arg" ("_position" s))))
###           ("_position" n) ("_position" a))))
###     ("\<^const>Big_StepT.big_step_t"
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))))
###       ("_position" n) ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("\<^const>Big_StepT.big_step_t"
###             ("_tuple" ("_position" c2) ("_tuple_arg" ("_position" s)))
###             ("_position" n) ("_position" a)))))
###     ("_The" ("_position" n)
###       ("\<^const>Big_StepT.big_step_t"
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s))))
###         ("_position" n) ("_position" a)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("\<^const>Big_StepT.big_step_t"
###         ("_The" ("_position" n)
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c2) ("_tuple_arg" ("_position" s)))))
###         ("_position" n) ("_position" a)))
###     ("_The" ("_position" n)
###       ("\<^const>Big_StepT.big_step_t"
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s))))
###         ("_position" n) ("_position" a)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>Big_StepT.big_step_t"
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c2) ("_tuple_arg" ("_position" s))))
###           ("_position" n) ("_position" a))))
###     ("_The" ("_position" n)
###       ("\<^const>Big_StepT.big_step_t"
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s))))
###         ("_position" n) ("_position" a)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Big_StepT"
### 1.002s elapsed time, 3.944s cpu time, 0.277s GC time
Loading theory "Draft.Big_StepT_Partial" (required by "Draft.SepLog_ExamplesTemplates" via "Draft.SepLog_Examples" via "Draft.SepLog_Hoare")
"{(_, 1)}"
  :: "((char list => int) * nat) set"
"{[42]}"
  :: "int list set"
[| (SKIP, ?s) \<Rightarrow> ?x \<Down> ?t;
   [| ?x = Suc 0; ?t = ?s |] ==> ?P |]
==> ?P
[| (?x ::= ?a, ?s) \<Rightarrow> ?p \<Down> ?t;
   [| ?p = Suc 0; ?t = ?s(?x := aval ?a ?s) |] ==> ?P |]
==> ?P
[| (?c1.0;; ?c2.0, ?s1.0) \<Rightarrow> ?p \<Down> ?s3.0;
   !!x s2 y.
      [| ?p = x + y; (?c1.0, ?s1.0) \<Rightarrow> x \<Down> s2;
         (?c2.0, s2) \<Rightarrow> y \<Down> ?s3.0 |]
      ==> ?P |]
==> ?P
[| (IF ?b THEN ?c1.0 ELSE ?c2.0, ?s) \<Rightarrow> ?x \<Down> ?t;
   !!x. [| ?x = Suc x; bval ?b ?s; (?c1.0, ?s) \<Rightarrow> x \<Down> ?t |]
        ==> ?P;
   !!x. [| ?x = Suc x; ~ bval ?b ?s;
           (?c2.0, ?s) \<Rightarrow> x \<Down> ?t |]
        ==> ?P |]
==> ?P
[| (WHILE ?b DO ?c, ?s) \<Rightarrow> ?x \<Down> ?t;
   [| ?x = Suc 0; ?t = ?s; ~ bval ?b ?s |] ==> ?P;
   !!x s2 y.
      [| bval ?b ?s; (?c, ?s) \<Rightarrow> x \<Down> s2;
         (WHILE ?b DO ?c, s2) \<Rightarrow> y \<Down> ?t;
         Suc (x + y) = ?x |]
      ==> ?P |]
==> ?P
"{[2]}"
  :: "int list set"
"{[15, 13]}"
  :: "int list set"
Found termination order: "{}"
Found termination order: "{}"
Proofs for inductive predicate(s) "big_step_t_part"
  Proving monotonicity ...
[| (SKIP, ?s) \<Rightarrow>\<^sub>A ?x \<Down> ?t;
   [| ?x = Suc 0; ?t = ?s |] ==> ?P |]
==> ?P
[| (?x ::= ?a, ?s) \<Rightarrow>\<^sub>A ?p \<Down> ?t;
   [| ?p = Suc 0; ?t = ?s(?x |-> paval ?a ?s); ?x : dom ?s;
      vars ?a <= dom ?s |]
   ==> ?P |]
==> ?P
[| (?c1.0;; ?c2.0, ?s1.0) \<Rightarrow>\<^sub>A ?p \<Down> ?s3.0;
   !!x s2 y.
      [| ?p = x + y; (?c1.0, ?s1.0) \<Rightarrow>\<^sub>A x \<Down> s2;
         (?c2.0, s2) \<Rightarrow>\<^sub>A y \<Down> ?s3.0 |]
      ==> ?P |]
==> ?P
[| (IF ?b THEN ?c1.0 ELSE ?c2.0, ?s) \<Rightarrow>\<^sub>A ?x \<Down> ?t;
   !!x. [| ?x = Suc x; vars ?b <= dom ?s; dom ?t = dom ?s; pbval ?b ?s;
           (?c1.0, ?s) \<Rightarrow>\<^sub>A x \<Down> ?t |]
        ==> ?P;
   !!x. [| ?x = Suc x; vars ?b <= dom ?s; dom ?t = dom ?s; ~ pbval ?b ?s;
           (?c2.0, ?s) \<Rightarrow>\<^sub>A x \<Down> ?t |]
        ==> ?P |]
==> ?P
[| (WHILE ?b DO ?c, ?s) \<Rightarrow>\<^sub>A ?x \<Down> ?t;
   [| ?x = Suc 0; ?t = ?s; vars ?b <= dom ?s; ~ pbval ?b ?s |] ==> ?P;
   !!x s2 y.
      [| pbval ?b ?s; vars ?b <= dom ?s;
         (?c, ?s) \<Rightarrow>\<^sub>A x \<Down> s2;
         (WHILE ?b DO ?c, s2) \<Rightarrow>\<^sub>A y \<Down> ?t;
         Suc (x + y) = ?x |]
      ==> ?P |]
==> ?P
### Ambiguous input (line 230 of "$AFP/Hoare_Time/Big_StepT_Partial.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Big_StepT_Partial.big_step_t_part"
###     ("\<^const>HOL.iff"
###       ("\<^const>Big_StepT.big_step_t"
###         ("_tuple" ("_position" C) ("_tuple_arg" ("_position" s)))
###         ("_position" m) ("_position" s'))
###       ("_tuple" ("_position" C)
###         ("_tuple_arg" ("_applC" ("_position" part) ("_position" s)))))
###     ("_position" m) ("_applC" ("_position" part) ("_position" s'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Big_StepT.big_step_t"
###       ("_tuple" ("_position" C) ("_tuple_arg" ("_position" s)))
###       ("_position" m) ("_position" s'))
###     ("\<^const>Big_StepT_Partial.big_step_t_part"
###       ("_tuple" ("_position" C)
###         ("_tuple_arg" ("_applC" ("_position" part) ("_position" s))))
###       ("_position" m) ("_applC" ("_position" part) ("_position" s')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Big_StepT.big_step_t"
###     ("_tuple" ("_position" C) ("_tuple_arg" ("_position" s)))
###     ("_position" m)
###     ("\<^const>HOL.iff" ("_position" s')
###       ("\<^const>Big_StepT_Partial.big_step_t_part"
###         ("_tuple" ("_position" C)
###           ("_tuple_arg" ("_applC" ("_position" part) ("_position" s))))
###         ("_position" m) ("_applC" ("_position" part) ("_position" s'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Big_StepT_Partial.big_step_t_part"
###     ("\<^const>Big_StepT.big_step_t"
###       ("_tuple" ("_position" C) ("_tuple_arg" ("_position" s)))
###       ("_position" m)
###       ("\<^const>HOL.iff" ("_position" s')
###         ("_tuple" ("_position" C)
###           ("_tuple_arg" ("_applC" ("_position" part) ("_position" s))))))
###     ("_position" m) ("_applC" ("_position" part) ("_position" s'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Big_StepT.big_step_t"
###     ("_tuple" ("_position" C) ("_tuple_arg" ("_position" s)))
###     ("_position" m)
###     ("\<^const>Big_StepT_Partial.big_step_t_part"
###       ("\<^const>HOL.iff" ("_position" s')
###         ("_tuple" ("_position" C)
###           ("_tuple_arg" ("_applC" ("_position" part) ("_position" s)))))
###       ("_position" m) ("_applC" ("_position" part) ("_position" s')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 343 of "$AFP/Hoare_Time/Big_StepT_Partial.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>maps_to_ex" ("_position" x))
###   ("\<^const>Separation_Algebra.pred_ex_binder" ("_position" y)
###     ("\<^const>Big_StepT_Partial.pointsto" ("_position" x)
###       ("_position" y))))
### ("\<^const>Pure.eq" ("\<^fixed>maps_to_ex" ("_position" x))
###   ("\<^const>HOL.Ex_binder" ("_position" y)
###     ("\<^const>Big_StepT_Partial.pointsto" ("_position" x)
###       ("_position" y))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "{}"
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### theory "Draft.Big_StepT_Partial"
### 0.987s elapsed time, 1.813s cpu time, 0.170s GC time
Loading theory "Draft.SepLog_Hoare" (required by "Draft.SepLog_ExamplesTemplates" via "Draft.SepLog_Examples")
### Ambiguous input (line 12 of "$AFP/Hoare_Time/SepLog_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^fixed>hoare3_valid" ("_position" P) ("_position" c)
###       ("_position" Q))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" ps) ("_position" n))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" ps) ("_tuple_arg" ("_position" n))))
###         ("\<^const>Separation_Algebra.pred_ex_binder"
###           ("_idts" ("_position" ps') ("_position" m))
###           ("\<^const>HOL.conj"
###             ("\<^const>Big_StepT_Partial.big_step_t_part"
###               ("_tuple" ("_position" c) ("_tuple_arg" ("_position" ps)))
###               ("_position" m) ("_position" ps'))
###             ("\<^const>HOL.conj"
###               ("\<^const>Orderings.ord_class.greater_eq" ("_position" n)
###                 ("_position" m))
###               ("_applC" ("_position" Q)
###                 ("_tuple" ("_position" ps')
###                   ("_tuple_arg"
###                     ("\<^const>Groups.minus_class.minus" ("_position" n)
###                       ("_position" m))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^fixed>hoare3_valid" ("_position" P) ("_position" c)
###       ("_position" Q))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" ps) ("_position" n))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" ps) ("_tuple_arg" ("_position" n))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" ps') ("_position" m))
###           ("\<^const>HOL.conj"
###             ("\<^const>Big_StepT_Partial.big_step_t_part"
###               ("_tuple" ("_position" c) ("_tuple_arg" ("_position" ps)))
###               ("_position" m) ("_position" ps'))
###             ("\<^const>HOL.conj"
###               ("\<^const>Orderings.ord_class.greater_eq" ("_position" n)
###                 ("_position" m))
###               ("_applC" ("_position" Q)
###                 ("_tuple" ("_position" ps')
###                   ("_tuple_arg"
###                     ("\<^const>Groups.minus_class.minus" ("_position" n)
###                       ("_position" m))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 17 of "$AFP/Hoare_Time/SepLog_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>SepLog_Hoare.hoare3_valid" ("_position" P) ("_position" c)
###       ("_position" Q))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" ps) ("_position" n))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" ps) ("_tuple_arg" ("_position" n))))
###         ("\<^const>Separation_Algebra.pred_ex_binder"
###           ("_idts" ("_position" ps')
###             ("_idts" ("_position" t) ("_position" n')))
###           ("\<^const>HOL.conj"
###             ("\<^const>Big_StepT_Partial.big_step_t_part"
###               ("_tuple" ("_position" c) ("_tuple_arg" ("_position" ps)))
###               ("_position" t) ("_position" ps'))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" n)
###                 ("\<^const>Groups.plus_class.plus" ("_position" n')
###                   ("_position" t)))
###               ("_applC" ("_position" Q)
###                 ("_tuple" ("_position" ps')
###                   ("_tuple_arg" ("_position" n')))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>SepLog_Hoare.hoare3_valid" ("_position" P) ("_position" c)
###       ("_position" Q))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" ps) ("_position" n))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" ps) ("_tuple_arg" ("_position" n))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" ps')
###             ("_idts" ("_position" t) ("_position" n')))
###           ("\<^const>HOL.conj"
###             ("\<^const>Big_StepT_Partial.big_step_t_part"
###               ("_tuple" ("_position" c) ("_tuple_arg" ("_position" ps)))
###               ("_position" t) ("_position" ps'))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" n)
###                 ("\<^const>Groups.plus_class.plus" ("_position" n')
###                   ("_position" t)))
###               ("_applC" ("_position" Q)
###                 ("_tuple" ("_position" ps')
###                   ("_tuple_arg" ("_position" n')))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "hoareT3"
  Proving monotonicity ...
### Ambiguous input (line 382 of "$AFP/Hoare_Time/SepLog_Hoare.thy") produces 20 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>wp3") ("_cargs" ("_position" c) ("_position" Q)))
###     ("_lambda" ("_pattern" ("_position" s) ("_position" n))
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" t) ("_position" m))
###         ("\<^const>HOL.conj"
###           ("\<^const>Orderings.ord_class.greater_eq" ("_position" n)
###             ("\<^const>Big_StepT_Partial.big_step_t_part"
###               ("\<^const>HOL.conj" ("_position" m)
###                 ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s))))
###               ("_position" m) ("_position" t)))
###           ("_applC" ("_position" Q)
###             ("_tuple" ("_position" t)
###               ("_tuple_arg"
###                 ("\<^const>Groups.minus_class.minus" ("_position" n)
###                   ("_position" m))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>wp3") ("_cargs" ("_position" c) ("_position" Q)))
###     ("_lambda" ("_pattern" ("_position" s) ("_position" n))
###       ("\<^const>Separation_Algebra.pred_ex_binder"
###         ("_idts" ("_position" t) ("_position" m))
###         ("\<^const>HOL.conj"
###           ("\<^const>Orderings.ord_class.greater_eq" ("_position" n)
###             ("\<^const>Big_StepT_Partial.big_step_t_part"
###               ("\<^const>HOL.conj" ("_position" m)
###                 ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s))))
###               ("_position" m) ("_position" t)))
###           ("_applC" ("_position" Q)
###             ("_tuple" ("_position" t)
###               ("_tuple_arg"
###                 ("\<^const>Groups.minus_class.minus" ("_position" n)
###                   ("_position" m))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>wp3") ("_cargs" ("_position" c) ("_position" Q)))
###     ("_lambda" ("_pattern" ("_position" s) ("_position" n))
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" t) ("_position" m))
###         ("\<^const>HOL.conj"
###           ("\<^const>Orderings.ord_class.greater_eq" ("_position" n)
###             ("_position" m))
###           ("\<^const>HOL.conj"
###             ("\<^const>Big_StepT_Partial.big_step_t_part"
###               ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###               ("_position" m) ("_position" t))
###             ("_applC" ("_position" Q)
###               ("_tuple" ("_position" t)
###                 ("_tuple_arg"
###                   ("\<^const>Groups.minus_class.minus" ("_position" n)
###                     ("_position" m)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>wp3") ("_cargs" ("_position" c) ("_position" Q)))
###     ("_lambda" ("_pattern" ("_position" s) ("_position" n))
###       ("\<^const>Separation_Algebra.pred_ex_binder"
###         ("_idts" ("_position" t) ("_position" m))
###         ("\<^const>HOL.conj"
###           ("\<^const>Orderings.ord_class.greater_eq" ("_position" n)
###             ("_position" m))
###           ("\<^const>HOL.conj"
###             ("\<^const>Big_StepT_Partial.big_step_t_part"
###               ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###               ("_position" m) ("_position" t))
###             ("_applC" ("_position" Q)
###               ("_tuple" ("_position" t)
###                 ("_tuple_arg"
###                   ("\<^const>Groups.minus_class.minus" ("_position" n)
###                     ("_position" m)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>wp3") ("_cargs" ("_position" c) ("_position" Q)))
###     ("\<^const>HOL.conj"
###       ("\<^const>Big_StepT_Partial.big_step_t_part"
###         ("_lambda" ("_pattern" ("_position" s) ("_position" n))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" t) ("_position" m))
###             ("\<^const>HOL.conj"
###               ("\<^const>Orderings.ord_class.greater_eq" ("_position" n)
###                 ("_position" m))
###               ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s))))))
###         ("_position" m) ("_position" t))
###       ("_applC" ("_position" Q)
###         ("_tuple" ("_position" t)
###           ("_tuple_arg"
###             ("\<^const>Groups.minus_class.minus" ("_position" n)
###               ("_position" m))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>wp3") ("_cargs" ("_position" c) ("_position" Q)))
###     ("_lambda" ("_pattern" ("_position" s) ("_position" n))
###       ("\<^const>HOL.conj"
###         ("\<^const>Big_StepT_Partial.big_step_t_part"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" t) ("_position" m))
###             ("\<^const>HOL.conj"
###               ("\<^const>Orderings.ord_class.greater_eq" ("_position" n)
###                 ("_position" m))
###               ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))))
###           ("_position" m) ("_position" t))
###         ("_applC" ("_position" Q)
###           ("_tuple" ("_position" t)
###             ("_tuple_arg"
###               ("\<^const>Groups.minus_class.minus" ("_position" n)
###                 ("_position" m)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>wp3") ("_cargs" ("_position" c) ("_position" Q)))
###     ("_lambda" ("_pattern" ("_position" s) ("_position" n))
###       ("\<^const>HOL.conj"
###         ("\<^const>Big_StepT_Partial.big_step_t_part"
###           ("\<^const>Separation_Algebra.pred_ex_binder"
###             ("_idts" ("_position" t) ("_position" m))
###             ("\<^const>HOL.conj"
###               ("\<^const>Orderings.ord_class.greater_eq" ("_position" n)
###                 ("_position" m))
###               ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))))
###           ("_position" m) ("_position" t))
###         ("_applC" ("_position" Q)
###           ("_tuple" ("_position" t)
###             ("_tuple_arg"
###               ("\<^const>Groups.minus_class.minus" ("_position" n)
###                 ("_position" m)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>wp3") ("_cargs" ("_position" c) ("_position" Q)))
###     ("_lambda" ("_pattern" ("_position" s) ("_position" n))
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" t) ("_position" m))
###         ("\<^const>HOL.conj"
###           ("\<^const>Big_StepT_Partial.big_step_t_part"
###             ("\<^const>HOL.conj"
###               ("\<^const>Orderings.ord_class.greater_eq" ("_position" n)
###                 ("_position" m))
###               ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s))))
###             ("_position" m) ("_position" t))
###           ("_applC" ("_position" Q)
###             ("_tuple" ("_position" t)
###               ("_tuple_arg"
###                 ("\<^const>Groups.minus_class.minus" ("_position" n)
###                   ("_position" m))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>wp3") ("_cargs" ("_position" c) ("_position" Q)))
###     ("_lambda" ("_pattern" ("_position" s) ("_position" n))
###       ("\<^const>Separation_Algebra.pred_ex_binder"
###         ("_idts" ("_position" t) ("_position" m))
###         ("\<^const>HOL.conj"
###           ("\<^const>Big_StepT_Partial.big_step_t_part"
###             ("\<^const>HOL.conj"
###               ("\<^const>Orderings.ord_class.greater_eq" ("_position" n)
###                 ("_position" m))
###               ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s))))
###             ("_position" m) ("_position" t))
###           ("_applC" ("_position" Q)
###             ("_tuple" ("_position" t)
###               ("_tuple_arg"
###                 ("\<^const>Groups.minus_class.minus" ("_position" n)
###                   ("_position" m))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>wp3") ("_cargs" ("_position" c) ("_position" Q)))
###     ("_lambda" ("_pattern" ("_position" s) ("_position" n))
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" t) ("_position" m))
###         ("\<^const>Orderings.ord_class.greater_eq" ("_position" n)
###           ("\<^const>Big_StepT_Partial.big_step_t_part"
###             ("\<^const>HOL.conj" ("_position" m)
###               ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s))))
###             ("_position" m)
###             ("\<^const>HOL.conj" ("_position" t)
###               ("_applC" ("_position" Q)
###                 ("_tuple" ("_position" t)
###                   ("_tuple_arg"
###                     ("\<^const>Groups.minus_class.minus" ("_position" n)
###                       ("_position" m))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 567 of "$AFP/Hoare_Time/SepLog_Hoare.thy") produces 30 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" F) ("_cargs" ("_position" C) ("_position" Q)))
###     ("\<^const>HOL.conj"
###       ("\<^const>Big_StepT_Partial.big_step_t_part"
###         ("_lambda" ("_pattern" ("_position" ps) ("_position" n))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" ps1')
###               ("_idts" ("_position" ps2')
###                 ("_idts" ("_position" m)
###                   ("_idts" ("_position" e1) ("_position" e2)))))
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" ps)))))
###         ("_position" m)
###         ("\<^const>HOL.conj"
###           ("\<^const>Groups.plus_class.plus" ("_position" ps1')
###             ("_position" ps2'))
###           ("\<^const>Separation_Algebra.pre_sep_algebra_class.sep_disj"
###             ("_position" ps1') ("_position" ps2'))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" n)
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Groups.plus_class.plus" ("_position" e1)
###               ("_position" e2))
###             ("_position" m)))
###         ("_applC" ("_position" Q)
###           ("_tuple" ("_position" ps1') ("_tuple_arg" ("_position" e1))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" F) ("_cargs" ("_position" C) ("_position" Q)))
###     ("_lambda" ("_pattern" ("_position" ps) ("_position" n))
###       ("\<^const>HOL.conj"
###         ("\<^const>Big_StepT_Partial.big_step_t_part"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" ps1')
###               ("_idts" ("_position" ps2')
###                 ("_idts" ("_position" m)
###                   ("_idts" ("_position" e1) ("_position" e2)))))
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" ps))))
###           ("_position" m)
###           ("\<^const>HOL.conj"
###             ("\<^const>Groups.plus_class.plus" ("_position" ps1')
###               ("_position" ps2'))
###             ("\<^const>Separation_Algebra.pre_sep_algebra_class.sep_disj"
###               ("_position" ps1') ("_position" ps2'))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("\<^const>Groups.plus_class.plus"
###               ("\<^const>Groups.plus_class.plus" ("_position" e1)
###                 ("_position" e2))
###               ("_position" m)))
###           ("_applC" ("_position" Q)
###             ("_tuple" ("_position" ps1')
###               ("_tuple_arg" ("_position" e1)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" F) ("_cargs" ("_position" C) ("_position" Q)))
###     ("_lambda" ("_pattern" ("_position" ps) ("_position" n))
###       ("\<^const>HOL.conj"
###         ("\<^const>Big_StepT_Partial.big_step_t_part"
###           ("\<^const>Separation_Algebra.pred_ex_binder"
###             ("_idts" ("_position" ps1')
###               ("_idts" ("_position" ps2')
###                 ("_idts" ("_position" m)
###                   ("_idts" ("_position" e1) ("_position" e2)))))
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" ps))))
###           ("_position" m)
###           ("\<^const>HOL.conj"
###             ("\<^const>Groups.plus_class.plus" ("_position" ps1')
###               ("_position" ps2'))
###             ("\<^const>Separation_Algebra.pre_sep_algebra_class.sep_disj"
###               ("_position" ps1') ("_position" ps2'))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("\<^const>Groups.plus_class.plus"
###               ("\<^const>Groups.plus_class.plus" ("_position" e1)
###                 ("_position" e2))
###               ("_position" m)))
###           ("_applC" ("_position" Q)
###             ("_tuple" ("_position" ps1')
###               ("_tuple_arg" ("_position" e1)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" F) ("_cargs" ("_position" C) ("_position" Q)))
###     ("_lambda" ("_pattern" ("_position" ps) ("_position" n))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" ps1')
###           ("_idts" ("_position" ps2')
###             ("_idts" ("_position" m)
###               ("_idts" ("_position" e1) ("_position" e2)))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Big_StepT_Partial.big_step_t_part"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" ps)))
###             ("_position" m)
###             ("\<^const>HOL.conj"
###               ("\<^const>Groups.plus_class.plus" ("_position" ps1')
###                 ("_position" ps2'))
###               ("\<^const>Separation_Algebra.pre_sep_algebra_class.sep_disj"
###                 ("_position" ps1') ("_position" ps2'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" n)
###               ("\<^const>Groups.plus_class.plus"
###                 ("\<^const>Groups.plus_class.plus" ("_position" e1)
###                   ("_position" e2))
###                 ("_position" m)))
###             ("_applC" ("_position" Q)
###               ("_tuple" ("_position" ps1')
###                 ("_tuple_arg" ("_position" e1))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" F) ("_cargs" ("_position" C) ("_position" Q)))
###     ("_lambda" ("_pattern" ("_position" ps) ("_position" n))
###       ("\<^const>Separation_Algebra.pred_ex_binder"
###         ("_idts" ("_position" ps1')
###           ("_idts" ("_position" ps2')
###             ("_idts" ("_position" m)
###               ("_idts" ("_position" e1) ("_position" e2)))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Big_StepT_Partial.big_step_t_part"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" ps)))
###             ("_position" m)
###             ("\<^const>HOL.conj"
###               ("\<^const>Groups.plus_class.plus" ("_position" ps1')
###                 ("_position" ps2'))
###               ("\<^const>Separation_Algebra.pre_sep_algebra_class.sep_disj"
###                 ("_position" ps1') ("_position" ps2'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" n)
###               ("\<^const>Groups.plus_class.plus"
###                 ("\<^const>Groups.plus_class.plus" ("_position" e1)
###                   ("_position" e2))
###                 ("_position" m)))
###             ("_applC" ("_position" Q)
###               ("_tuple" ("_position" ps1')
###                 ("_tuple_arg" ("_position" e1))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" F) ("_cargs" ("_position" C) ("_position" Q)))
###     ("\<^const>HOL.conj"
###       ("\<^const>Big_StepT_Partial.big_step_t_part"
###         ("_lambda" ("_pattern" ("_position" ps) ("_position" n))
###           ("\<^const>Separation_Algebra.pred_ex_binder"
###             ("_idts" ("_position" ps1')
###               ("_idts" ("_position" ps2')
###                 ("_idts" ("_position" m)
###                   ("_idts" ("_position" e1) ("_position" e2)))))
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" ps)))))
###         ("_position" m)
###         ("\<^const>HOL.conj"
###           ("\<^const>Groups.plus_class.plus" ("_position" ps1')
###             ("_position" ps2'))
###           ("\<^const>Separation_Algebra.pre_sep_algebra_class.sep_disj"
###             ("_position" ps1') ("_position" ps2'))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" n)
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Groups.plus_class.plus" ("_position" e1)
###               ("_position" e2))
###             ("_position" m)))
###         ("_applC" ("_position" Q)
###           ("_tuple" ("_position" ps1') ("_tuple_arg" ("_position" e1))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" F) ("_cargs" ("_position" C) ("_position" Q)))
###     ("\<^const>HOL.conj"
###       ("\<^const>Big_StepT_Partial.big_step_t_part"
###         ("_lambda" ("_pattern" ("_position" ps) ("_position" n))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" ps1')
###               ("_idts" ("_position" ps2')
###                 ("_idts" ("_position" m)
###                   ("_idts" ("_position" e1) ("_position" e2)))))
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" ps)))))
###         ("_position" m)
###         ("\<^const>Groups.plus_class.plus" ("_position" ps1')
###           ("_position" ps2')))
###       ("\<^const>HOL.conj"
###         ("\<^const>Separation_Algebra.pre_sep_algebra_class.sep_disj"
###           ("_position" ps1') ("_position" ps2'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("\<^const>Groups.plus_class.plus"
###               ("\<^const>Groups.plus_class.plus" ("_position" e1)
###                 ("_position" e2))
###               ("_position" m)))
###           ("_applC" ("_position" Q)
###             ("_tuple" ("_position" ps1')
###               ("_tuple_arg" ("_position" e1)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" F) ("_cargs" ("_position" C) ("_position" Q)))
###     ("_lambda" ("_pattern" ("_position" ps) ("_position" n))
###       ("\<^const>HOL.conj"
###         ("\<^const>Big_StepT_Partial.big_step_t_part"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" ps1')
###               ("_idts" ("_position" ps2')
###                 ("_idts" ("_position" m)
###                   ("_idts" ("_position" e1) ("_position" e2)))))
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" ps))))
###           ("_position" m)
###           ("\<^const>Groups.plus_class.plus" ("_position" ps1')
###             ("_position" ps2')))
###         ("\<^const>HOL.conj"
###           ("\<^const>Separation_Algebra.pre_sep_algebra_class.sep_disj"
###             ("_position" ps1') ("_position" ps2'))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" n)
###               ("\<^const>Groups.plus_class.plus"
###                 ("\<^const>Groups.plus_class.plus" ("_position" e1)
###                   ("_position" e2))
###                 ("_position" m)))
###             ("_applC" ("_position" Q)
###               ("_tuple" ("_position" ps1')
###                 ("_tuple_arg" ("_position" e1))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" F) ("_cargs" ("_position" C) ("_position" Q)))
###     ("_lambda" ("_pattern" ("_position" ps) ("_position" n))
###       ("\<^const>HOL.conj"
###         ("\<^const>Big_StepT_Partial.big_step_t_part"
###           ("\<^const>Separation_Algebra.pred_ex_binder"
###             ("_idts" ("_position" ps1')
###               ("_idts" ("_position" ps2')
###                 ("_idts" ("_position" m)
###                   ("_idts" ("_position" e1) ("_position" e2)))))
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" ps))))
###           ("_position" m)
###           ("\<^const>Groups.plus_class.plus" ("_position" ps1')
###             ("_position" ps2')))
###         ("\<^const>HOL.conj"
###           ("\<^const>Separation_Algebra.pre_sep_algebra_class.sep_disj"
###             ("_position" ps1') ("_position" ps2'))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" n)
###               ("\<^const>Groups.plus_class.plus"
###                 ("\<^const>Groups.plus_class.plus" ("_position" e1)
###                   ("_position" e2))
###                 ("_position" m)))
###             ("_applC" ("_position" Q)
###               ("_tuple" ("_position" ps1')
###                 ("_tuple_arg" ("_position" e1))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" F) ("_cargs" ("_position" C) ("_position" Q)))
###     ("_lambda" ("_pattern" ("_position" ps) ("_position" n))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" ps1')
###           ("_idts" ("_position" ps2')
###             ("_idts" ("_position" m)
###               ("_idts" ("_position" e1) ("_position" e2)))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Big_StepT_Partial.big_step_t_part"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" ps)))
###             ("_position" m)
###             ("\<^const>Groups.plus_class.plus" ("_position" ps1')
###               ("_position" ps2')))
###           ("\<^const>HOL.conj"
###             ("\<^const>Separation_Algebra.pre_sep_algebra_class.sep_disj"
###               ("_position" ps1') ("_position" ps2'))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" n)
###                 ("\<^const>Groups.plus_class.plus"
###                   ("\<^const>Groups.plus_class.plus" ("_position" e1)
###                     ("_position" e2))
###                   ("_position" m)))
###               ("_applC" ("_position" Q)
###                 ("_tuple" ("_position" ps1')
###                   ("_tuple_arg" ("_position" e1)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.SepLog_Hoare"
### 0.234s elapsed time, 0.250s cpu time, 0.000s GC time
Loading theory "Draft.SepLog_Examples" (required by "Draft.SepLog_ExamplesTemplates")
Found termination order: "(nat o abs) <*mlex*> {}"
### theory "Draft.SepLog_Examples"
### 0.097s elapsed time, 0.172s cpu time, 0.100s GC time
Loading theory "Draft.SepLog_ExamplesTemplates"
### theory "Draft.SepLog_ExamplesTemplates"
### 0.067s elapsed time, 0.068s cpu time, 0.000s GC time
*** Conflict of type arities:
***   fun :: (type, ??.Sep_Heap_Instance.opt) zero and
***   fun :: (type, zero) zero
*** At command "theory" (line 1 of "~/ResearchIdeas/templateAnalysis/Isabelle/GeneratedThys/DebugAFP/Hoare_Time/SepLog_ExamplesTemplates.thy")
Exception- TOPLEVEL_ERROR raised
