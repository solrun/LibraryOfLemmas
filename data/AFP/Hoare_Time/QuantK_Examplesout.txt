Loading theory "Draft.AExp" (required by "Draft.QuantK_ExamplesTemplates" via "Draft.QuantK_Examples" via "Draft.QuantK_VCG" via "Draft.QuantK_Hoare" via "Draft.Big_StepT" via "Draft.Big_Step" via "Draft.Com" via "Draft.BExp")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.QuantK_ExamplesTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.QuantK_ExamplesTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.QuantK_ExamplesTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.125s elapsed time, 0.505s cpu time, 0.052s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.QuantK_ExamplesTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.254s elapsed time, 1.024s cpu time, 0.052s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.QuantK_ExamplesTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.AExp"
### 0.728s elapsed time, 2.885s cpu time, 0.245s GC time
Loading theory "Draft.BExp" (required by "Draft.QuantK_ExamplesTemplates" via "Draft.QuantK_Examples" via "Draft.QuantK_VCG" via "Draft.QuantK_Hoare" via "Draft.Big_StepT" via "Draft.Big_Step" via "Draft.Com")
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### theory "HOL-Library.Stream"
### 0.882s elapsed time, 3.484s cpu time, 0.309s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.982s elapsed time, 3.728s cpu time, 0.796s GC time
"12"
  :: "int"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
"12"
  :: "int"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.BExp"
### 0.811s elapsed time, 2.741s cpu time, 0.651s GC time
Loading theory "Draft.Com" (required by "Draft.QuantK_ExamplesTemplates" via "Draft.QuantK_Examples" via "Draft.QuantK_VCG" via "Draft.QuantK_Hoare" via "Draft.Big_StepT" via "Draft.Big_Step")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
"True"
  :: "bool"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Com"
### 0.539s elapsed time, 1.317s cpu time, 0.144s GC time
Loading theory "Draft.Big_Step" (required by "Draft.QuantK_ExamplesTemplates" via "Draft.QuantK_Examples" via "Draft.QuantK_VCG" via "Draft.QuantK_Hoare" via "Draft.Big_StepT")
### theory "HOL-Library.Tree"
### 1.982s elapsed time, 6.488s cpu time, 0.989s GC time
Loading theory "Draft.Templates" (required by "Draft.QuantK_ExamplesTemplates" via "Draft.ExtrEqs")
Proofs for inductive predicate(s) "big_step"
  Proving monotonicity ...
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.056s elapsed time, 0.112s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.QuantK_ExamplesTemplates")
### theory "Draft.Big_Step"
### 0.326s elapsed time, 0.859s cpu time, 0.049s GC time
Loading theory "Draft.Big_StepT" (required by "Draft.QuantK_ExamplesTemplates" via "Draft.QuantK_Examples" via "Draft.QuantK_VCG" via "Draft.QuantK_Hoare")
Proofs for inductive predicate(s) "big_step_t"
  Proving monotonicity ...
"{_}"
  :: "(char list => int) set"
"{[42]}"
  :: "int list set"
"{[2]}"
  :: "int list set"
[| ?x1.0 \<Rightarrow> ?x2.0; !!s. ?P (SKIP, s) s;
   !!x a s. ?P (x ::= a, s) (s(x := aval a s));
   !!c\<^sub>1 s\<^sub>1 s\<^sub>2 c\<^sub>2 s\<^sub>3.
      [| (c\<^sub>1, s\<^sub>1) \<Rightarrow> s\<^sub>2;
         ?P (c\<^sub>1, s\<^sub>1) s\<^sub>2;
         (c\<^sub>2, s\<^sub>2) \<Rightarrow> s\<^sub>3;
         ?P (c\<^sub>2, s\<^sub>2) s\<^sub>3 |]
      ==> ?P (c\<^sub>1;; c\<^sub>2, s\<^sub>1) s\<^sub>3;
   !!b s c\<^sub>1 t c\<^sub>2.
      [| bval b s; (c\<^sub>1, s) \<Rightarrow> t; ?P (c\<^sub>1, s) t |]
      ==> ?P (IF b THEN c\<^sub>1 ELSE c\<^sub>2, s) t;
   !!b s c\<^sub>2 t c\<^sub>1.
      [| ~ bval b s; (c\<^sub>2, s) \<Rightarrow> t; ?P (c\<^sub>2, s) t |]
      ==> ?P (IF b THEN c\<^sub>1 ELSE c\<^sub>2, s) t;
   !!b s c. ~ bval b s ==> ?P (WHILE b DO c, s) s;
   !!b s\<^sub>1 c s\<^sub>2 s\<^sub>3.
      [| bval b s\<^sub>1; (c, s\<^sub>1) \<Rightarrow> s\<^sub>2;
         ?P (c, s\<^sub>1) s\<^sub>2;
         (WHILE b DO c, s\<^sub>2) \<Rightarrow> s\<^sub>3;
         ?P (WHILE b DO c, s\<^sub>2) s\<^sub>3 |]
      ==> ?P (WHILE b DO c, s\<^sub>1) s\<^sub>3 |]
==> ?P ?x1.0 ?x2.0
[| (?x1a, ?x1b) \<Rightarrow> ?x2a; !!s. ?P SKIP s s;
   !!x a s. ?P (x ::= a) s (s(x := aval a s));
   !!c\<^sub>1 s\<^sub>1 s\<^sub>2 c\<^sub>2 s\<^sub>3.
      [| (c\<^sub>1, s\<^sub>1) \<Rightarrow> s\<^sub>2;
         ?P c\<^sub>1 s\<^sub>1 s\<^sub>2;
         (c\<^sub>2, s\<^sub>2) \<Rightarrow> s\<^sub>3;
         ?P c\<^sub>2 s\<^sub>2 s\<^sub>3 |]
      ==> ?P (c\<^sub>1;; c\<^sub>2) s\<^sub>1 s\<^sub>3;
   !!b s c\<^sub>1 t c\<^sub>2.
      [| bval b s; (c\<^sub>1, s) \<Rightarrow> t; ?P c\<^sub>1 s t |]
      ==> ?P (IF b THEN c\<^sub>1 ELSE c\<^sub>2) s t;
   !!b s c\<^sub>2 t c\<^sub>1.
      [| ~ bval b s; (c\<^sub>2, s) \<Rightarrow> t; ?P c\<^sub>2 s t |]
      ==> ?P (IF b THEN c\<^sub>1 ELSE c\<^sub>2) s t;
   !!b s c. ~ bval b s ==> ?P (WHILE b DO c) s s;
   !!b s\<^sub>1 c s\<^sub>2 s\<^sub>3.
      [| bval b s\<^sub>1; (c, s\<^sub>1) \<Rightarrow> s\<^sub>2;
         ?P c s\<^sub>1 s\<^sub>2;
         (WHILE b DO c, s\<^sub>2) \<Rightarrow> s\<^sub>3;
         ?P (WHILE b DO c) s\<^sub>2 s\<^sub>3 |]
      ==> ?P (WHILE b DO c) s\<^sub>1 s\<^sub>3 |]
==> ?P ?x1a ?x1b ?x2a
[| (SKIP, ?s) \<Rightarrow> ?t; ?t = ?s ==> ?P |] ==> ?P
[| (?x ::= ?a, ?s) \<Rightarrow> ?t; ?t = ?s(?x := aval ?a ?s) ==> ?P |]
==> ?P
[| (?c1.0;; ?c2.0, ?s1.0) \<Rightarrow> ?s3.0;
   !!s\<^sub>2.
      [| (?c1.0, ?s1.0) \<Rightarrow> s\<^sub>2;
         (?c2.0, s\<^sub>2) \<Rightarrow> ?s3.0 |]
      ==> ?P |]
==> ?P
[| (IF ?b THEN ?c1.0 ELSE ?c2.0, ?s) \<Rightarrow> ?t;
   [| bval ?b ?s; (?c1.0, ?s) \<Rightarrow> ?t |] ==> ?P;
   [| ~ bval ?b ?s; (?c2.0, ?s) \<Rightarrow> ?t |] ==> ?P |]
==> ?P
[| (WHILE ?b DO ?c, ?s) \<Rightarrow> ?t;
   [| ?t = ?s; ~ bval ?b ?s |] ==> ?P;
   !!s\<^sub>2.
      [| bval ?b ?s; (?c, ?s) \<Rightarrow> s\<^sub>2;
         (WHILE ?b DO ?c, s\<^sub>2) \<Rightarrow> ?t |]
      ==> ?P |]
==> ?P
[| bval ?b ?s; (?c\<^sub>1, ?s) \<Rightarrow> ?t |]
==> (IF ?b THEN ?c\<^sub>1 ELSE ?c\<^sub>2, ?s) \<Rightarrow> ?t
"{[15, 13]}"
  :: "int list set"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.627s elapsed time, 2.020s cpu time, 0.168s GC time
### Ambiguous input (line 92 of "$AFP/Hoare_Time/Big_StepT.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Big_StepT.big_step_t"
###       ("_tuple" ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###         ("_tuple_arg" ("_position" s)))
###       ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero"))
###       ("_position" s'))
###     ("\<^const>HOL.eq" ("_position" s')
###       ("_Update" ("_position" s)
###         ("_updbind" ("_position" x)
###           ("_applC" ("_position" aval)
###             ("_cargs" ("_position" a) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Big_StepT.big_step_t"
###     ("_tuple" ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###       ("_tuple_arg" ("_position" s)))
###     ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero"))
###     ("\<^const>HOL.iff" ("_position" s')
###       ("\<^const>HOL.eq" ("_position" s')
###         ("_Update" ("_position" s)
###           ("_updbind" ("_position" x)
###             ("_applC" ("_position" aval)
###               ("_cargs" ("_position" a) ("_position" s)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 191 of "$AFP/Hoare_Time/Big_StepT.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Big_StepT.big_step_t"
###       ("\<^const>HOL.Not"
###         ("_tuple" ("_position" SKIP) ("_tuple_arg" ("_position" s))))
###       ("_position" p) ("_position" t))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.not_equal" ("_position" s) ("_position" t))
###       ("\<^const>HOL.not_equal" ("_position" p)
###         ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.Not"
###       ("\<^const>Big_StepT.big_step_t"
###         ("_tuple" ("_position" SKIP) ("_tuple_arg" ("_position" s)))
###         ("_position" p) ("_position" t)))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.not_equal" ("_position" s) ("_position" t))
###       ("\<^const>HOL.not_equal" ("_position" p)
###         ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero"))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 210 of "$AFP/Hoare_Time/Big_StepT.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_The" ("_position" t)
###       ("\<^const>HOL.Ex_binder" ("_position" p)
###         ("\<^const>Big_StepT.big_step_t"
###           ("_tuple"
###             ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))
###             ("_tuple_arg" ("_position" s)))
###           ("_position" p) ("_position" t))))
###     ("_Update" ("_position" s)
###       ("_updbind" ("_position" x)
###         ("_applC" ("_position" aval)
###           ("_cargs" ("_position" e) ("_position" s)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Big_StepT.big_step_t"
###       ("_The" ("_position" t)
###         ("\<^const>HOL.Ex_binder" ("_position" p)
###           ("_tuple"
###             ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))
###             ("_tuple_arg" ("_position" s)))))
###       ("_position" p) ("_position" t))
###     ("_Update" ("_position" s)
###       ("_updbind" ("_position" x)
###         ("_applC" ("_position" aval)
###           ("_cargs" ("_position" e) ("_position" s)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_The" ("_position" t)
###       ("\<^const>Big_StepT.big_step_t"
###         ("\<^const>HOL.Ex_binder" ("_position" p)
###           ("_tuple"
###             ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))
###             ("_tuple_arg" ("_position" s))))
###         ("_position" p) ("_position" t)))
###     ("_Update" ("_position" s)
###       ("_updbind" ("_position" x)
###         ("_applC" ("_position" aval)
###           ("_cargs" ("_position" e) ("_position" s)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 215 of "$AFP/Hoare_Time/Big_StepT.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Big_StepT.big_step_t"
###       ("\<^const>HOL.Not"
###         ("_tuple"
###           ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))
###           ("_tuple_arg" ("_position" s))))
###       ("_position" p) ("_position" t))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.not_equal" ("_position" p)
###         ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero")))
###       ("\<^const>HOL.not_equal" ("_position" t)
###         ("_Update" ("_position" s)
###           ("_updbind" ("_position" x)
###             ("_applC" ("_position" aval)
###               ("_cargs" ("_position" e) ("_position" s)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.Not"
###       ("\<^const>Big_StepT.big_step_t"
###         ("_tuple"
###           ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))
###           ("_tuple_arg" ("_position" s)))
###         ("_position" p) ("_position" t)))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.not_equal" ("_position" p)
###         ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero")))
###       ("\<^const>HOL.not_equal" ("_position" t)
###         ("_Update" ("_position" s)
###           ("_updbind" ("_position" x)
###             ("_applC" ("_position" aval)
###               ("_cargs" ("_position" e) ("_position" s)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 220 of "$AFP/Hoare_Time/Big_StepT.thy") produces 9 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("\<^const>Big_StepT.big_step_t"
###             ("_tuple" ("_position" c1) ("_tuple_arg" ("_position" s)))
###             ("_position" n) ("_position" a)))))
###     ("_The" ("_position" n)
###       ("\<^const>HOL.Ex_binder" ("_position" a)
###         ("\<^const>Big_StepT.big_step_t"
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))
###           ("_position" n) ("_position" a))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("\<^const>Big_StepT.big_step_t"
###         ("_The" ("_position" n)
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c1) ("_tuple_arg" ("_position" s)))))
###         ("_position" n) ("_position" a)))
###     ("_The" ("_position" n)
###       ("\<^const>HOL.Ex_binder" ("_position" a)
###         ("\<^const>Big_StepT.big_step_t"
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))
###           ("_position" n) ("_position" a))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>Big_StepT.big_step_t"
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c1) ("_tuple_arg" ("_position" s))))
###           ("_position" n) ("_position" a))))
###     ("_The" ("_position" n)
###       ("\<^const>HOL.Ex_binder" ("_position" a)
###         ("\<^const>Big_StepT.big_step_t"
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))
###           ("_position" n) ("_position" a))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("\<^const>Big_StepT.big_step_t"
###             ("_tuple" ("_position" c1) ("_tuple_arg" ("_position" s)))
###             ("_position" n) ("_position" a)))))
###     ("\<^const>Big_StepT.big_step_t"
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))))
###       ("_position" n) ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("\<^const>Big_StepT.big_step_t"
###         ("_The" ("_position" n)
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c1) ("_tuple_arg" ("_position" s)))))
###         ("_position" n) ("_position" a)))
###     ("\<^const>Big_StepT.big_step_t"
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))))
###       ("_position" n) ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>Big_StepT.big_step_t"
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c1) ("_tuple_arg" ("_position" s))))
###           ("_position" n) ("_position" a))))
###     ("\<^const>Big_StepT.big_step_t"
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))))
###       ("_position" n) ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("\<^const>Big_StepT.big_step_t"
###             ("_tuple" ("_position" c1) ("_tuple_arg" ("_position" s)))
###             ("_position" n) ("_position" a)))))
###     ("_The" ("_position" n)
###       ("\<^const>Big_StepT.big_step_t"
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s))))
###         ("_position" n) ("_position" a)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("\<^const>Big_StepT.big_step_t"
###         ("_The" ("_position" n)
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c1) ("_tuple_arg" ("_position" s)))))
###         ("_position" n) ("_position" a)))
###     ("_The" ("_position" n)
###       ("\<^const>Big_StepT.big_step_t"
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s))))
###         ("_position" n) ("_position" a)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>Big_StepT.big_step_t"
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c1) ("_tuple_arg" ("_position" s))))
###           ("_position" n) ("_position" a))))
###     ("_The" ("_position" n)
###       ("\<^const>Big_StepT.big_step_t"
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s))))
###         ("_position" n) ("_position" a)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 232 of "$AFP/Hoare_Time/Big_StepT.thy") produces 9 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("\<^const>Big_StepT.big_step_t"
###             ("_tuple" ("_position" c2) ("_tuple_arg" ("_position" s)))
###             ("_position" n) ("_position" a)))))
###     ("_The" ("_position" n)
###       ("\<^const>HOL.Ex_binder" ("_position" a)
###         ("\<^const>Big_StepT.big_step_t"
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))
###           ("_position" n) ("_position" a))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("\<^const>Big_StepT.big_step_t"
###         ("_The" ("_position" n)
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c2) ("_tuple_arg" ("_position" s)))))
###         ("_position" n) ("_position" a)))
###     ("_The" ("_position" n)
###       ("\<^const>HOL.Ex_binder" ("_position" a)
###         ("\<^const>Big_StepT.big_step_t"
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))
###           ("_position" n) ("_position" a))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>Big_StepT.big_step_t"
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c2) ("_tuple_arg" ("_position" s))))
###           ("_position" n) ("_position" a))))
###     ("_The" ("_position" n)
###       ("\<^const>HOL.Ex_binder" ("_position" a)
###         ("\<^const>Big_StepT.big_step_t"
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))
###           ("_position" n) ("_position" a))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("\<^const>Big_StepT.big_step_t"
###             ("_tuple" ("_position" c2) ("_tuple_arg" ("_position" s)))
###             ("_position" n) ("_position" a)))))
###     ("\<^const>Big_StepT.big_step_t"
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))))
###       ("_position" n) ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("\<^const>Big_StepT.big_step_t"
###         ("_The" ("_position" n)
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c2) ("_tuple_arg" ("_position" s)))))
###         ("_position" n) ("_position" a)))
###     ("\<^const>Big_StepT.big_step_t"
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))))
###       ("_position" n) ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>Big_StepT.big_step_t"
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c2) ("_tuple_arg" ("_position" s))))
###           ("_position" n) ("_position" a))))
###     ("\<^const>Big_StepT.big_step_t"
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))))
###       ("_position" n) ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("\<^const>Big_StepT.big_step_t"
###             ("_tuple" ("_position" c2) ("_tuple_arg" ("_position" s)))
###             ("_position" n) ("_position" a)))))
###     ("_The" ("_position" n)
###       ("\<^const>Big_StepT.big_step_t"
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s))))
###         ("_position" n) ("_position" a)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("\<^const>Big_StepT.big_step_t"
###         ("_The" ("_position" n)
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c2) ("_tuple_arg" ("_position" s)))))
###         ("_position" n) ("_position" a)))
###     ("_The" ("_position" n)
###       ("\<^const>Big_StepT.big_step_t"
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s))))
###         ("_position" n) ("_position" a)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>Big_StepT.big_step_t"
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c2) ("_tuple_arg" ("_position" s))))
###           ("_position" n) ("_position" a))))
###     ("_The" ("_position" n)
###       ("\<^const>Big_StepT.big_step_t"
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s))))
###         ("_position" n) ("_position" a)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Big_StepT"
### 0.878s elapsed time, 2.547s cpu time, 0.182s GC time
Loading theory "Draft.QuantK_Hoare" (required by "Draft.QuantK_ExamplesTemplates" via "Draft.QuantK_Examples" via "Draft.QuantK_VCG")
"{[42]}"
  :: "int list set"
"{(_, 1)}"
  :: "((char list => int) * nat) set"
[| (SKIP, ?s) \<Rightarrow> ?x \<Down> ?t;
   [| ?x = Suc 0; ?t = ?s |] ==> ?P |]
==> ?P
[| (?x ::= ?a, ?s) \<Rightarrow> ?p \<Down> ?t;
   [| ?p = Suc 0; ?t = ?s(?x := aval ?a ?s) |] ==> ?P |]
==> ?P
[| (?c1.0;; ?c2.0, ?s1.0) \<Rightarrow> ?p \<Down> ?s3.0;
   !!x s2 y.
      [| ?p = x + y; (?c1.0, ?s1.0) \<Rightarrow> x \<Down> s2;
         (?c2.0, s2) \<Rightarrow> y \<Down> ?s3.0 |]
      ==> ?P |]
==> ?P
[| (IF ?b THEN ?c1.0 ELSE ?c2.0, ?s) \<Rightarrow> ?x \<Down> ?t;
   !!x. [| ?x = Suc x; bval ?b ?s; (?c1.0, ?s) \<Rightarrow> x \<Down> ?t |]
        ==> ?P;
   !!x. [| ?x = Suc x; ~ bval ?b ?s;
           (?c2.0, ?s) \<Rightarrow> x \<Down> ?t |]
        ==> ?P |]
==> ?P
[| (WHILE ?b DO ?c, ?s) \<Rightarrow> ?x \<Down> ?t;
   [| ?x = Suc 0; ?t = ?s; ~ bval ?b ?s |] ==> ?P;
   !!x s2 y.
      [| bval ?b ?s; (?c, ?s) \<Rightarrow> x \<Down> s2;
         (WHILE ?b DO ?c, s2) \<Rightarrow> y \<Down> ?t;
         Suc (x + y) = ?x |]
      ==> ?P |]
==> ?P
"{[2]}"
  :: "int list set"
"{[15, 13]}"
  :: "int list set"
### Ambiguous input (line 18 of "$AFP/Hoare_Time/QuantK_Hoare.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" s)
###     ("_list"
###       ("\<^const>Fields.inverse_class.inverse_divide" ("_position" a)
###         ("_position" x))))
###   ("_Update" ("_position" s)
###     ("_updbind" ("_position" x)
###       ("_applC" ("_position" aval)
###         ("_cargs" ("_position" a) ("_position" s))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>state_subst" ("_position" s) ("_position" a) ("_position" x))
###   ("_Update" ("_position" s)
###     ("_updbind" ("_position" x)
###       ("_applC" ("_position" aval)
###         ("_cargs" ("_position" a) ("_position" s))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 40 of "$AFP/Hoare_Time/QuantK_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>hoareQ"
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" eSuc)
###         ("_applC" ("_position" P)
###           ("\<^const>QuantK_Hoare.state_subst" ("_position" s)
###             ("_position" a) ("_position" x)))))
###     ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>hoareQ"
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" eSuc)
###         ("_applC" ("_position" P)
###           ("_applC" ("_position" s)
###             ("_list"
###               ("\<^const>Fields.inverse_class.inverse_divide"
###                 ("_position" a) ("_position" x)))))))
###     ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "hoareQ"
  Proving monotonicity ...
### Ambiguous input (line 67 of "$AFP/Hoare_Time/QuantK_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>hoareQ'"
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" eSuc)
###         ("_applC" ("_position" P)
###           ("\<^const>QuantK_Hoare.state_subst" ("_position" s)
###             ("_position" a) ("_position" x)))))
###     ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>hoareQ'"
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" eSuc)
###         ("_applC" ("_position" P)
###           ("_applC" ("_position" s)
###             ("_list"
###               ("\<^const>Fields.inverse_class.inverse_divide"
###                 ("_position" a) ("_position" x)))))))
###     ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "hoareQ'"
  Proving monotonicity ...
### Ambiguous input (line 371 of "$AFP/Hoare_Time/QuantK_Hoare.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" s)
###       ("\<^const>Orderings.ord_class.greater_eq"
###         ("_applC" ("_position" P) ("_position" s))
###         ("_applC" ("_position" eSuc)
###           ("_applC" ("_position" Q)
###             ("_applC" ("_position" s)
###               ("_list"
###                 ("\<^const>Fields.inverse_class.inverse_divide"
###                   ("_position" a) ("_position" x)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>QuantK_Hoare.hoareQ" ("_position" P)
###       ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###       ("_position" Q))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" s)
###       ("\<^const>Orderings.ord_class.greater_eq"
###         ("_applC" ("_position" P) ("_position" s))
###         ("_applC" ("_position" eSuc)
###           ("_applC" ("_position" Q)
###             ("\<^const>QuantK_Hoare.state_subst" ("_position" s)
###               ("_position" a) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>QuantK_Hoare.hoareQ" ("_position" P)
###       ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###       ("_position" Q))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 380 of "$AFP/Hoare_Time/QuantK_Hoare.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Big_StepT.big_step_t"
###       ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###       ("_position" P) ("_position" T)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("\<^const>Big_StepT.big_step_t"
###             ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###             ("_position" n) ("_position" a))))
###       ("_position" P))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Big_StepT.big_step_t"
###       ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###       ("_position" P) ("_position" T)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Big_StepT.big_step_t"
###         ("_The" ("_position" n)
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))))
###         ("_position" n) ("_position" a))
###       ("_position" P))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Big_StepT.big_step_t"
###       ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###       ("_position" P) ("_position" T)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_The" ("_position" n)
###         ("\<^const>Big_StepT.big_step_t"
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s))))
###           ("_position" n) ("_position" a)))
###       ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 383 of "$AFP/Hoare_Time/QuantK_Hoare.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Big_StepT.big_step_t"
###       ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###       ("_position" P) ("_position" T)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_The" ("_position" a)
###         ("\<^const>HOL.Ex_binder" ("_position" n)
###           ("\<^const>Big_StepT.big_step_t"
###             ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###             ("_position" n) ("_position" a))))
###       ("_position" T))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Big_StepT.big_step_t"
###       ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###       ("_position" P) ("_position" T)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Big_StepT.big_step_t"
###         ("_The" ("_position" a)
###           ("\<^const>HOL.Ex_binder" ("_position" n)
###             ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))))
###         ("_position" n) ("_position" a))
###       ("_position" T))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Big_StepT.big_step_t"
###       ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###       ("_position" P) ("_position" T)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_The" ("_position" a)
###         ("\<^const>Big_StepT.big_step_t"
###           ("\<^const>HOL.Ex_binder" ("_position" n)
###             ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s))))
###           ("_position" n) ("_position" a)))
###       ("_position" T))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 387 of "$AFP/Hoare_Time/QuantK_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Big_StepT.big_step_t"
###       ("\<^const>HOL.Not"
###         ("_tuple" ("_position" SKIP) ("_tuple_arg" ("_position" s))))
###       ("_position" p) ("_position" t))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.not_equal" ("_position" s) ("_position" t))
###       ("\<^const>HOL.not_equal" ("_position" p)
###         ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.Not"
###       ("\<^const>Big_StepT.big_step_t"
###         ("_tuple" ("_position" SKIP) ("_tuple_arg" ("_position" s)))
###         ("_position" p) ("_position" t)))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.not_equal" ("_position" s) ("_position" t))
###       ("\<^const>HOL.not_equal" ("_position" p)
###         ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero"))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 390 of "$AFP/Hoare_Time/QuantK_Hoare.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_The" ("_position" p)
###       ("\<^const>HOL.Ex_binder" ("_position" t)
###         ("\<^const>Big_StepT.big_step_t"
###           ("_tuple" ("_position" SKIP) ("_tuple_arg" ("_position" s)))
###           ("_position" p) ("_position" t))))
###     ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Big_StepT.big_step_t"
###       ("_The" ("_position" p)
###         ("\<^const>HOL.Ex_binder" ("_position" t)
###           ("_tuple" ("_position" SKIP) ("_tuple_arg" ("_position" s)))))
###       ("_position" p) ("_position" t))
###     ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_The" ("_position" p)
###       ("\<^const>Big_StepT.big_step_t"
###         ("\<^const>HOL.Ex_binder" ("_position" t)
###           ("_tuple" ("_position" SKIP) ("_tuple_arg" ("_position" s))))
###         ("_position" p) ("_position" t)))
###     ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 395 of "$AFP/Hoare_Time/QuantK_Hoare.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_The" ("_position" t)
###       ("\<^const>HOL.Ex_binder" ("_position" p)
###         ("\<^const>Big_StepT.big_step_t"
###           ("_tuple" ("_position" SKIP) ("_tuple_arg" ("_position" s)))
###           ("_position" p) ("_position" t))))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Big_StepT.big_step_t"
###       ("_The" ("_position" t)
###         ("\<^const>HOL.Ex_binder" ("_position" p)
###           ("_tuple" ("_position" SKIP) ("_tuple_arg" ("_position" s)))))
###       ("_position" p) ("_position" t))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_The" ("_position" t)
###       ("\<^const>Big_StepT.big_step_t"
###         ("\<^const>HOL.Ex_binder" ("_position" p)
###           ("_tuple" ("_position" SKIP) ("_tuple_arg" ("_position" s))))
###         ("_position" p) ("_position" t)))
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 406 of "$AFP/Hoare_Time/QuantK_Hoare.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_The" ("_position" t)
###       ("\<^const>HOL.Ex_binder" ("_position" p)
###         ("\<^const>Big_StepT.big_step_t"
###           ("_tuple"
###             ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))
###             ("_tuple_arg" ("_position" s)))
###           ("_position" p) ("_position" t))))
###     ("_Update" ("_position" s)
###       ("_updbind" ("_position" x)
###         ("_applC" ("_position" aval)
###           ("_cargs" ("_position" e) ("_position" s)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Big_StepT.big_step_t"
###       ("_The" ("_position" t)
###         ("\<^const>HOL.Ex_binder" ("_position" p)
###           ("_tuple"
###             ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))
###             ("_tuple_arg" ("_position" s)))))
###       ("_position" p) ("_position" t))
###     ("_Update" ("_position" s)
###       ("_updbind" ("_position" x)
###         ("_applC" ("_position" aval)
###           ("_cargs" ("_position" e) ("_position" s)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_The" ("_position" t)
###       ("\<^const>Big_StepT.big_step_t"
###         ("\<^const>HOL.Ex_binder" ("_position" p)
###           ("_tuple"
###             ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))
###             ("_tuple_arg" ("_position" s))))
###         ("_position" p) ("_position" t)))
###     ("_Update" ("_position" s)
###       ("_updbind" ("_position" x)
###         ("_applC" ("_position" aval)
###           ("_cargs" ("_position" e) ("_position" s)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 411 of "$AFP/Hoare_Time/QuantK_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Big_StepT.big_step_t"
###       ("\<^const>HOL.Not"
###         ("_tuple"
###           ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))
###           ("_tuple_arg" ("_position" s))))
###       ("_position" p) ("_position" t))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.not_equal" ("_position" p)
###         ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero")))
###       ("\<^const>HOL.not_equal" ("_position" t)
###         ("_Update" ("_position" s)
###           ("_updbind" ("_position" x)
###             ("_applC" ("_position" aval)
###               ("_cargs" ("_position" e) ("_position" s)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.Not"
###       ("\<^const>Big_StepT.big_step_t"
###         ("_tuple"
###           ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))
###           ("_tuple_arg" ("_position" s)))
###         ("_position" p) ("_position" t)))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.not_equal" ("_position" p)
###         ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero")))
###       ("\<^const>HOL.not_equal" ("_position" t)
###         ("_Update" ("_position" s)
###           ("_updbind" ("_position" x)
###             ("_applC" ("_position" aval)
###               ("_cargs" ("_position" e) ("_position" s)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 420 of "$AFP/Hoare_Time/QuantK_Hoare.thy") produces 54 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>wpQ") ("_cargs" ("_position" c) ("_position" Q)))
###     ("_lambda" ("_position" s)
###       ("\<^const>HOL.If"
###         ("\<^const>Orderings.ord_class.less"
###           ("\<^const>Big_StepT.big_step_t"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" t) ("_position" p))
###               ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s))))
###             ("_position" p)
###             ("\<^const>HOL.conj" ("_position" t)
###               ("_applC" ("_position" Q) ("_position" t))))
###           ("\<^const>Extended_Nat.infinity_class.infinity"))
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" enat)
###             ("_The" ("_position" p)
###               ("\<^const>HOL.Ex_binder" ("_position" t)
###                 ("\<^const>Big_StepT.big_step_t"
###                   ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###                   ("_position" p) ("_position" t)))))
###           ("_applC" ("_position" Q)
###             ("_The" ("_position" t)
###               ("\<^const>HOL.Ex_binder" ("_position" p)
###                 ("\<^const>Big_StepT.big_step_t"
###                   ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###                   ("_position" p) ("_position" t))))))
###         ("\<^const>Extended_Nat.infinity_class.infinity")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>wpQ") ("_cargs" ("_position" c) ("_position" Q)))
###     ("_lambda" ("_position" s)
###       ("\<^const>HOL.If"
###         ("\<^const>HOL.Ex_binder" ("_idts" ("_position" t) ("_position" p))
###           ("\<^const>Orderings.ord_class.less"
###             ("\<^const>Big_StepT.big_step_t"
###               ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###               ("_position" p)
###               ("\<^const>HOL.conj" ("_position" t)
###                 ("_applC" ("_position" Q) ("_position" t))))
###             ("\<^const>Extended_Nat.infinity_class.infinity")))
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" enat)
###             ("_The" ("_position" p)
###               ("\<^const>HOL.Ex_binder" ("_position" t)
###                 ("\<^const>Big_StepT.big_step_t"
###                   ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###                   ("_position" p) ("_position" t)))))
###           ("_applC" ("_position" Q)
###             ("_The" ("_position" t)
###               ("\<^const>HOL.Ex_binder" ("_position" p)
###                 ("\<^const>Big_StepT.big_step_t"
###                   ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###                   ("_position" p) ("_position" t))))))
###         ("\<^const>Extended_Nat.infinity_class.infinity")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>wpQ") ("_cargs" ("_position" c) ("_position" Q)))
###     ("_lambda" ("_position" s)
###       ("\<^const>HOL.If"
###         ("\<^const>HOL.conj"
###           ("\<^const>Big_StepT.big_step_t"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" t) ("_position" p))
###               ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s))))
###             ("_position" p) ("_position" t))
###           ("\<^const>Orderings.ord_class.less"
###             ("_applC" ("_position" Q) ("_position" t))
###             ("\<^const>Extended_Nat.infinity_class.infinity")))
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" enat)
###             ("_The" ("_position" p)
###               ("\<^const>HOL.Ex_binder" ("_position" t)
###                 ("\<^const>Big_StepT.big_step_t"
###                   ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###                   ("_position" p) ("_position" t)))))
###           ("_applC" ("_position" Q)
###             ("_The" ("_position" t)
###               ("\<^const>HOL.Ex_binder" ("_position" p)
###                 ("\<^const>Big_StepT.big_step_t"
###                   ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###                   ("_position" p) ("_position" t))))))
###         ("\<^const>Extended_Nat.infinity_class.infinity")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>wpQ") ("_cargs" ("_position" c) ("_position" Q)))
###     ("_lambda" ("_position" s)
###       ("\<^const>HOL.If"
###         ("\<^const>HOL.Ex_binder" ("_idts" ("_position" t) ("_position" p))
###           ("\<^const>HOL.conj"
###             ("\<^const>Big_StepT.big_step_t"
###               ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###               ("_position" p) ("_position" t))
###             ("\<^const>Orderings.ord_class.less"
###               ("_applC" ("_position" Q) ("_position" t))
###               ("\<^const>Extended_Nat.infinity_class.infinity"))))
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" enat)
###             ("_The" ("_position" p)
###               ("\<^const>HOL.Ex_binder" ("_position" t)
###                 ("\<^const>Big_StepT.big_step_t"
###                   ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###                   ("_position" p) ("_position" t)))))
###           ("_applC" ("_position" Q)
###             ("_The" ("_position" t)
###               ("\<^const>HOL.Ex_binder" ("_position" p)
###                 ("\<^const>Big_StepT.big_step_t"
###                   ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###                   ("_position" p) ("_position" t))))))
###         ("\<^const>Extended_Nat.infinity_class.infinity")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>wpQ") ("_cargs" ("_position" c) ("_position" Q)))
###     ("_lambda" ("_position" s)
###       ("\<^const>HOL.If"
###         ("\<^const>Big_StepT.big_step_t"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" t) ("_position" p))
###             ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s))))
###           ("_position" p)
###           ("\<^const>HOL.conj" ("_position" t)
###             ("\<^const>Orderings.ord_class.less"
###               ("_applC" ("_position" Q) ("_position" t))
###               ("\<^const>Extended_Nat.infinity_class.infinity"))))
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" enat)
###             ("_The" ("_position" p)
###               ("\<^const>HOL.Ex_binder" ("_position" t)
###                 ("\<^const>Big_StepT.big_step_t"
###                   ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###                   ("_position" p) ("_position" t)))))
###           ("_applC" ("_position" Q)
###             ("_The" ("_position" t)
###               ("\<^const>HOL.Ex_binder" ("_position" p)
###                 ("\<^const>Big_StepT.big_step_t"
###                   ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###                   ("_position" p) ("_position" t))))))
###         ("\<^const>Extended_Nat.infinity_class.infinity")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>wpQ") ("_cargs" ("_position" c) ("_position" Q)))
###     ("_lambda" ("_position" s)
###       ("\<^const>HOL.If"
###         ("\<^const>HOL.Ex_binder" ("_idts" ("_position" t) ("_position" p))
###           ("\<^const>Big_StepT.big_step_t"
###             ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###             ("_position" p)
###             ("\<^const>HOL.conj" ("_position" t)
###               ("\<^const>Orderings.ord_class.less"
###                 ("_applC" ("_position" Q) ("_position" t))
###                 ("\<^const>Extended_Nat.infinity_class.infinity")))))
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" enat)
###             ("_The" ("_position" p)
###               ("\<^const>HOL.Ex_binder" ("_position" t)
###                 ("\<^const>Big_StepT.big_step_t"
###                   ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###                   ("_position" p) ("_position" t)))))
###           ("_applC" ("_position" Q)
###             ("_The" ("_position" t)
###               ("\<^const>HOL.Ex_binder" ("_position" p)
###                 ("\<^const>Big_StepT.big_step_t"
###                   ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###                   ("_position" p) ("_position" t))))))
###         ("\<^const>Extended_Nat.infinity_class.infinity")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>wpQ") ("_cargs" ("_position" c) ("_position" Q)))
###     ("_lambda" ("_position" s)
###       ("\<^const>HOL.If"
###         ("\<^const>Orderings.ord_class.less"
###           ("\<^const>Big_StepT.big_step_t"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" t) ("_position" p))
###               ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s))))
###             ("_position" p)
###             ("\<^const>HOL.conj" ("_position" t)
###               ("_applC" ("_position" Q) ("_position" t))))
###           ("\<^const>Extended_Nat.infinity_class.infinity"))
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" enat)
###             ("\<^const>Big_StepT.big_step_t"
###               ("_The" ("_position" p)
###                 ("\<^const>HOL.Ex_binder" ("_position" t)
###                   ("_tuple" ("_position" c)
###                     ("_tuple_arg" ("_position" s)))))
###               ("_position" p) ("_position" t)))
###           ("_applC" ("_position" Q)
###             ("_The" ("_position" t)
###               ("\<^const>HOL.Ex_binder" ("_position" p)
###                 ("\<^const>Big_StepT.big_step_t"
###                   ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###                   ("_position" p) ("_position" t))))))
###         ("\<^const>Extended_Nat.infinity_class.infinity")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>wpQ") ("_cargs" ("_position" c) ("_position" Q)))
###     ("_lambda" ("_position" s)
###       ("\<^const>HOL.If"
###         ("\<^const>HOL.Ex_binder" ("_idts" ("_position" t) ("_position" p))
###           ("\<^const>Orderings.ord_class.less"
###             ("\<^const>Big_StepT.big_step_t"
###               ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###               ("_position" p)
###               ("\<^const>HOL.conj" ("_position" t)
###                 ("_applC" ("_position" Q) ("_position" t))))
###             ("\<^const>Extended_Nat.infinity_class.infinity")))
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" enat)
###             ("\<^const>Big_StepT.big_step_t"
###               ("_The" ("_position" p)
###                 ("\<^const>HOL.Ex_binder" ("_position" t)
###                   ("_tuple" ("_position" c)
###                     ("_tuple_arg" ("_position" s)))))
###               ("_position" p) ("_position" t)))
###           ("_applC" ("_position" Q)
###             ("_The" ("_position" t)
###               ("\<^const>HOL.Ex_binder" ("_position" p)
###                 ("\<^const>Big_StepT.big_step_t"
###                   ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###                   ("_position" p) ("_position" t))))))
###         ("\<^const>Extended_Nat.infinity_class.infinity")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>wpQ") ("_cargs" ("_position" c) ("_position" Q)))
###     ("_lambda" ("_position" s)
###       ("\<^const>HOL.If"
###         ("\<^const>HOL.conj"
###           ("\<^const>Big_StepT.big_step_t"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" t) ("_position" p))
###               ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s))))
###             ("_position" p) ("_position" t))
###           ("\<^const>Orderings.ord_class.less"
###             ("_applC" ("_position" Q) ("_position" t))
###             ("\<^const>Extended_Nat.infinity_class.infinity")))
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" enat)
###             ("\<^const>Big_StepT.big_step_t"
###               ("_The" ("_position" p)
###                 ("\<^const>HOL.Ex_binder" ("_position" t)
###                   ("_tuple" ("_position" c)
###                     ("_tuple_arg" ("_position" s)))))
###               ("_position" p) ("_position" t)))
###           ("_applC" ("_position" Q)
###             ("_The" ("_position" t)
###               ("\<^const>HOL.Ex_binder" ("_position" p)
###                 ("\<^const>Big_StepT.big_step_t"
###                   ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###                   ("_position" p) ("_position" t))))))
###         ("\<^const>Extended_Nat.infinity_class.infinity")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>wpQ") ("_cargs" ("_position" c) ("_position" Q)))
###     ("_lambda" ("_position" s)
###       ("\<^const>HOL.If"
###         ("\<^const>HOL.Ex_binder" ("_idts" ("_position" t) ("_position" p))
###           ("\<^const>HOL.conj"
###             ("\<^const>Big_StepT.big_step_t"
###               ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###               ("_position" p) ("_position" t))
###             ("\<^const>Orderings.ord_class.less"
###               ("_applC" ("_position" Q) ("_position" t))
###               ("\<^const>Extended_Nat.infinity_class.infinity"))))
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" enat)
###             ("\<^const>Big_StepT.big_step_t"
###               ("_The" ("_position" p)
###                 ("\<^const>HOL.Ex_binder" ("_position" t)
###                   ("_tuple" ("_position" c)
###                     ("_tuple_arg" ("_position" s)))))
###               ("_position" p) ("_position" t)))
###           ("_applC" ("_position" Q)
###             ("_The" ("_position" t)
###               ("\<^const>HOL.Ex_binder" ("_position" p)
###                 ("\<^const>Big_StepT.big_step_t"
###                   ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###                   ("_position" p) ("_position" t))))))
###         ("\<^const>Extended_Nat.infinity_class.infinity")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.QuantK_Hoare"
### 0.736s elapsed time, 1.282s cpu time, 0.149s GC time
Loading theory "Draft.QuantK_VCG" (required by "Draft.QuantK_ExamplesTemplates" via "Draft.QuantK_Examples")
### Ambiguous input (line 72 of "$AFP/Hoare_Time/QuantK_VCG.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip) ("\<^const>QuantK_VCG.acom.Askip"))
###     ("\<^const>QuantK_VCG.acom.Askip")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip) ("\<^const>Com.com.SKIP"))
###     ("\<^const>QuantK_VCG.acom.Askip")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip) ("\<^const>QuantK_VCG.acom.Askip"))
###     ("\<^const>Com.com.SKIP")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip) ("\<^const>Com.com.SKIP"))
###     ("\<^const>Com.com.SKIP")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 73 of "$AFP/Hoare_Time/QuantK_VCG.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>QuantK_VCG.acom.Aassign" ("_position" x) ("_position" a)))
###     ("\<^const>QuantK_VCG.acom.Aassign" ("_position" x) ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>Com.com.Assign" ("_position" x) ("_position" a)))
###     ("\<^const>QuantK_VCG.acom.Aassign" ("_position" x) ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>QuantK_VCG.acom.Aassign" ("_position" x) ("_position" a)))
###     ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>Com.com.Assign" ("_position" x) ("_position" a)))
###     ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 74 of "$AFP/Hoare_Time/QuantK_VCG.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>QuantK_VCG.acom.Aseq" ("_position" C\<^sub>1)
###         ("_position" C\<^sub>2)))
###     ("\<^const>QuantK_VCG.acom.Aseq"
###       ("_applC" ("_position" strip) ("_position" C\<^sub>1))
###       ("_applC" ("_position" strip) ("_position" C\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>Com.com.Seq" ("_position" C\<^sub>1)
###         ("_position" C\<^sub>2)))
###     ("\<^const>QuantK_VCG.acom.Aseq"
###       ("_applC" ("_position" strip) ("_position" C\<^sub>1))
###       ("_applC" ("_position" strip) ("_position" C\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>QuantK_VCG.acom.Aseq" ("_position" C\<^sub>1)
###         ("_position" C\<^sub>2)))
###     ("\<^const>Com.com.Seq"
###       ("_applC" ("_position" strip) ("_position" C\<^sub>1))
###       ("_applC" ("_position" strip) ("_position" C\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>Com.com.Seq" ("_position" C\<^sub>1)
###         ("_position" C\<^sub>2)))
###     ("\<^const>Com.com.Seq"
###       ("_applC" ("_position" strip) ("_position" C\<^sub>1))
###       ("_applC" ("_position" strip) ("_position" C\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 75 of "$AFP/Hoare_Time/QuantK_VCG.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>Com.com.If" ("_position" b) ("_position" C\<^sub>1)
###         ("_position" C\<^sub>2)))
###     ("\<^const>Com.com.If" ("_position" b)
###       ("_applC" ("_position" strip) ("_position" C\<^sub>1))
###       ("_applC" ("_position" strip) ("_position" C\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>QuantK_VCG.acom.Aif" ("_position" b)
###         ("_position" C\<^sub>1) ("_position" C\<^sub>2)))
###     ("\<^const>Com.com.If" ("_position" b)
###       ("_applC" ("_position" strip) ("_position" C\<^sub>1))
###       ("_applC" ("_position" strip) ("_position" C\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>Com.com.If" ("_position" b) ("_position" C\<^sub>1)
###         ("_position" C\<^sub>2)))
###     ("\<^const>QuantK_VCG.acom.Aif" ("_position" b)
###       ("_applC" ("_position" strip) ("_position" C\<^sub>1))
###       ("_applC" ("_position" strip) ("_position" C\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>QuantK_VCG.acom.Aif" ("_position" b)
###         ("_position" C\<^sub>1) ("_position" C\<^sub>2)))
###     ("\<^const>QuantK_VCG.acom.Aif" ("_position" b)
###       ("_applC" ("_position" strip) ("_position" C\<^sub>1))
###       ("_applC" ("_position" strip) ("_position" C\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 80 of "$AFP/Hoare_Time/QuantK_VCG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" pre)
###       ("_cargs" ("\<^const>Com.com.SKIP") ("_position" Q)))
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" eSuc)
###         ("_applC" ("_position" Q) ("_position" s))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" pre)
###       ("_cargs" ("\<^const>QuantK_VCG.acom.Askip") ("_position" Q)))
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" eSuc)
###         ("_applC" ("_position" Q) ("_position" s))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 81 of "$AFP/Hoare_Time/QuantK_VCG.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" pre)
###       ("_cargs" ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###         ("_position" Q)))
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" eSuc)
###         ("_applC" ("_position" Q)
###           ("\<^const>QuantK_Hoare.state_subst" ("_position" s)
###             ("_position" a) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" pre)
###       ("_cargs"
###         ("\<^const>QuantK_VCG.acom.Aassign" ("_position" x) ("_position" a))
###         ("_position" Q)))
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" eSuc)
###         ("_applC" ("_position" Q)
###           ("\<^const>QuantK_Hoare.state_subst" ("_position" s)
###             ("_position" a) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" pre)
###       ("_cargs" ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###         ("_position" Q)))
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" eSuc)
###         ("_applC" ("_position" Q)
###           ("_applC" ("_position" s)
###             ("_list"
###               ("\<^const>Fields.inverse_class.inverse_divide"
###                 ("_position" a) ("_position" x)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" pre)
###       ("_cargs"
###         ("\<^const>QuantK_VCG.acom.Aassign" ("_position" x) ("_position" a))
###         ("_position" Q)))
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" eSuc)
###         ("_applC" ("_position" Q)
###           ("_applC" ("_position" s)
###             ("_list"
###               ("\<^const>Fields.inverse_class.inverse_divide"
###                 ("_position" a) ("_position" x)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 82 of "$AFP/Hoare_Time/QuantK_VCG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" pre)
###       ("_cargs"
###         ("\<^const>Com.com.Seq" ("_position" C\<^sub>1)
###           ("_position" C\<^sub>2))
###         ("_position" Q)))
###     ("_applC" ("_position" pre)
###       ("_cargs" ("_position" C\<^sub>1)
###         ("_applC" ("_position" pre)
###           ("_cargs" ("_position" C\<^sub>2) ("_position" Q)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" pre)
###       ("_cargs"
###         ("\<^const>QuantK_VCG.acom.Aseq" ("_position" C\<^sub>1)
###           ("_position" C\<^sub>2))
###         ("_position" Q)))
###     ("_applC" ("_position" pre)
###       ("_cargs" ("_position" C\<^sub>1)
###         ("_applC" ("_position" pre)
###           ("_cargs" ("_position" C\<^sub>2) ("_position" Q)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 83 of "$AFP/Hoare_Time/QuantK_VCG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" pre)
###       ("_cargs"
###         ("\<^const>QuantK_VCG.acom.Aif" ("_position" b)
###           ("_position" C\<^sub>1) ("_position" C\<^sub>2))
###         ("_position" Q)))
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" eSuc)
###         ("\<^const>HOL.If"
###           ("_applC" ("_position" bval)
###             ("_cargs" ("_position" b) ("_position" s)))
###           ("_applC" ("_position" pre)
###             ("_cargs" ("_position" C\<^sub>1)
###               ("_cargs" ("_position" Q) ("_position" s))))
###           ("_applC" ("_position" pre)
###             ("_cargs" ("_position" C\<^sub>2)
###               ("_cargs" ("_position" Q) ("_position" s)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" pre)
###       ("_cargs"
###         ("\<^const>Com.com.If" ("_position" b) ("_position" C\<^sub>1)
###           ("_position" C\<^sub>2))
###         ("_position" Q)))
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" eSuc)
###         ("\<^const>HOL.If"
###           ("_applC" ("_position" bval)
###             ("_cargs" ("_position" b) ("_position" s)))
###           ("_applC" ("_position" pre)
###             ("_cargs" ("_position" C\<^sub>1)
###               ("_cargs" ("_position" Q) ("_position" s))))
###           ("_applC" ("_position" pre)
###             ("_cargs" ("_position" C\<^sub>2)
###               ("_cargs" ("_position" Q) ("_position" s)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Ambiguous input (line 91 of "$AFP/Hoare_Time/QuantK_VCG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" vc)
###       ("_cargs" ("\<^const>Com.com.SKIP") ("_position" Q)))
###     ("_position" True)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" vc)
###       ("_cargs" ("\<^const>QuantK_VCG.acom.Askip") ("_position" Q)))
###     ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 92 of "$AFP/Hoare_Time/QuantK_VCG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" vc)
###       ("_cargs" ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###         ("_position" Q)))
###     ("_position" True)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" vc)
###       ("_cargs"
###         ("\<^const>QuantK_VCG.acom.Aassign" ("_position" x) ("_position" a))
###         ("_position" Q)))
###     ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 93 of "$AFP/Hoare_Time/QuantK_VCG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" vc)
###       ("_cargs"
###         ("\<^const>Com.com.Seq" ("_position" C\<^sub>1)
###           ("_position" C\<^sub>2))
###         ("_position" Q)))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" vc)
###         ("_cargs" ("_position" C\<^sub>1)
###           ("_applC" ("_position" pre)
###             ("_cargs" ("_position" C\<^sub>2) ("_position" Q)))))
###       ("_applC" ("_position" vc)
###         ("_cargs" ("_position" C\<^sub>2) ("_position" Q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" vc)
###       ("_cargs"
###         ("\<^const>QuantK_VCG.acom.Aseq" ("_position" C\<^sub>1)
###           ("_position" C\<^sub>2))
###         ("_position" Q)))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" vc)
###         ("_cargs" ("_position" C\<^sub>1)
###           ("_applC" ("_position" pre)
###             ("_cargs" ("_position" C\<^sub>2) ("_position" Q)))))
###       ("_applC" ("_position" vc)
###         ("_cargs" ("_position" C\<^sub>2) ("_position" Q))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 94 of "$AFP/Hoare_Time/QuantK_VCG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" vc)
###       ("_cargs"
###         ("\<^const>QuantK_VCG.acom.Aif" ("_position" b)
###           ("_position" C\<^sub>1) ("_position" C\<^sub>2))
###         ("_position" Q)))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" vc)
###         ("_cargs" ("_position" C\<^sub>1) ("_position" Q)))
###       ("_applC" ("_position" vc)
###         ("_cargs" ("_position" C\<^sub>2) ("_position" Q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" vc)
###       ("_cargs"
###         ("\<^const>Com.com.If" ("_position" b) ("_position" C\<^sub>1)
###           ("_position" C\<^sub>2))
###         ("_position" Q)))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" vc)
###         ("_cargs" ("_position" C\<^sub>1) ("_position" Q)))
###       ("_applC" ("_position" vc)
###         ("_cargs" ("_position" C\<^sub>2) ("_position" Q))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.QuantK_VCG"
### 1.177s elapsed time, 1.812s cpu time, 0.854s GC time
Loading theory "Draft.QuantK_Examples" (required by "Draft.QuantK_ExamplesTemplates")
Found termination order: "(nat o abs) <*mlex*> {}"
### Ambiguous input (line 13 of "$AFP/Hoare_Time/QuantK_Examples.thy") produces 8 parse trees:
### ("\<^const>Pure.eq" ("_position" wsum)
###   ("\<^const>Com.com.While"
###     ("_applC" ("_position" Less)
###       ("_cargs"
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" V) ("_String" ("_position" ''x'')))))
###     ("\<^const>QuantK_VCG.acom.Aseq"
###       ("\<^const>QuantK_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''x''))))))
###       ("\<^const>QuantK_VCG.acom.Aassign" ("_String" ("_position" ''x''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" N)
###               ("\<^const>Groups.uminus_class.uminus"
###                 ("\<^const>Groups.one_class.one")))))))))
### ("\<^const>Pure.eq" ("_position" wsum)
###   ("\<^const>Com.com.While"
###     ("_applC" ("_position" Less)
###       ("_cargs"
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" V) ("_String" ("_position" ''x'')))))
###     ("\<^const>Com.com.Seq"
###       ("\<^const>QuantK_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''x''))))))
###       ("\<^const>QuantK_VCG.acom.Aassign" ("_String" ("_position" ''x''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" N)
###               ("\<^const>Groups.uminus_class.uminus"
###                 ("\<^const>Groups.one_class.one")))))))))
### ("\<^const>Pure.eq" ("_position" wsum)
###   ("\<^const>Com.com.While"
###     ("_applC" ("_position" Less)
###       ("_cargs"
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" V) ("_String" ("_position" ''x'')))))
###     ("\<^const>QuantK_VCG.acom.Aseq"
###       ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''x''))))))
###       ("\<^const>QuantK_VCG.acom.Aassign" ("_String" ("_position" ''x''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" N)
###               ("\<^const>Groups.uminus_class.uminus"
###                 ("\<^const>Groups.one_class.one")))))))))
### ("\<^const>Pure.eq" ("_position" wsum)
###   ("\<^const>Com.com.While"
###     ("_applC" ("_position" Less)
###       ("_cargs"
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" V) ("_String" ("_position" ''x'')))))
###     ("\<^const>Com.com.Seq"
###       ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''x''))))))
###       ("\<^const>QuantK_VCG.acom.Aassign" ("_String" ("_position" ''x''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" N)
###               ("\<^const>Groups.uminus_class.uminus"
###                 ("\<^const>Groups.one_class.one")))))))))
### ("\<^const>Pure.eq" ("_position" wsum)
###   ("\<^const>Com.com.While"
###     ("_applC" ("_position" Less)
###       ("_cargs"
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" V) ("_String" ("_position" ''x'')))))
###     ("\<^const>QuantK_VCG.acom.Aseq"
###       ("\<^const>QuantK_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''x''))))))
###       ("\<^const>Com.com.Assign" ("_String" ("_position" ''x''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" N)
###               ("\<^const>Groups.uminus_class.uminus"
###                 ("\<^const>Groups.one_class.one")))))))))
### ("\<^const>Pure.eq" ("_position" wsum)
###   ("\<^const>Com.com.While"
###     ("_applC" ("_position" Less)
###       ("_cargs"
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" V) ("_String" ("_position" ''x'')))))
###     ("\<^const>Com.com.Seq"
###       ("\<^const>QuantK_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''x''))))))
###       ("\<^const>Com.com.Assign" ("_String" ("_position" ''x''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" N)
###               ("\<^const>Groups.uminus_class.uminus"
###                 ("\<^const>Groups.one_class.one")))))))))
### ("\<^const>Pure.eq" ("_position" wsum)
###   ("\<^const>Com.com.While"
###     ("_applC" ("_position" Less)
###       ("_cargs"
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" V) ("_String" ("_position" ''x'')))))
###     ("\<^const>QuantK_VCG.acom.Aseq"
###       ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''x''))))))
###       ("\<^const>Com.com.Assign" ("_String" ("_position" ''x''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" N)
###               ("\<^const>Groups.uminus_class.uminus"
###                 ("\<^const>Groups.one_class.one")))))))))
### ("\<^const>Pure.eq" ("_position" wsum)
###   ("\<^const>Com.com.While"
###     ("_applC" ("_position" Less)
###       ("_cargs"
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" V) ("_String" ("_position" ''x'')))))
###     ("\<^const>Com.com.Seq"
###       ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''x''))))))
###       ("\<^const>Com.com.Assign" ("_String" ("_position" ''x''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" N)
###               ("\<^const>Groups.uminus_class.uminus"
###                 ("\<^const>Groups.one_class.one")))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 18 of "$AFP/Hoare_Time/QuantK_Examples.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>QuantK_Hoare.hoareQ"
###     ("_lambda" ("_position" s)
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" enat)
###           ("\<^const>Groups.plus_class.plus"
###             ("_Numeral" ("_constify" ("_position" 2)))
###             ("\<^const>Groups.times_class.times"
###               ("_Numeral" ("_constify" ("_position" 3))) ("_position" n))))
###         ("_applC" ("_position" emb)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" s) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" int) ("_position" n))))))
###     ("\<^const>QuantK_VCG.acom.Aseq"
###       ("\<^const>QuantK_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###       ("_position" wsum))
###     ("_lambda" ("_position" s) ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>QuantK_Hoare.hoareQ"
###     ("_lambda" ("_position" s)
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" enat)
###           ("\<^const>Groups.plus_class.plus"
###             ("_Numeral" ("_constify" ("_position" 2)))
###             ("\<^const>Groups.times_class.times"
###               ("_Numeral" ("_constify" ("_position" 3))) ("_position" n))))
###         ("_applC" ("_position" emb)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" s) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" int) ("_position" n))))))
###     ("\<^const>Com.com.Seq"
###       ("\<^const>QuantK_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###       ("_position" wsum))
###     ("_lambda" ("_position" s) ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>QuantK_Hoare.hoareQ"
###     ("_lambda" ("_position" s)
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" enat)
###           ("\<^const>Groups.plus_class.plus"
###             ("_Numeral" ("_constify" ("_position" 2)))
###             ("\<^const>Groups.times_class.times"
###               ("_Numeral" ("_constify" ("_position" 3))) ("_position" n))))
###         ("_applC" ("_position" emb)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" s) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" int) ("_position" n))))))
###     ("\<^const>QuantK_VCG.acom.Aseq"
###       ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###       ("_position" wsum))
###     ("_lambda" ("_position" s) ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>QuantK_Hoare.hoareQ"
###     ("_lambda" ("_position" s)
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" enat)
###           ("\<^const>Groups.plus_class.plus"
###             ("_Numeral" ("_constify" ("_position" 2)))
###             ("\<^const>Groups.times_class.times"
###               ("_Numeral" ("_constify" ("_position" 3))) ("_position" n))))
###         ("_applC" ("_position" emb)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" s) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" int) ("_position" n))))))
###     ("\<^const>Com.com.Seq"
###       ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###       ("_position" wsum))
###     ("_lambda" ("_position" s) ("\<^const>Groups.zero_class.zero"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 41 of "$AFP/Hoare_Time/QuantK_Examples.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>QuantK_Hoare.hoare2o_valid"
###     ("_lambda" ("_position" s)
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" enat)
###           ("\<^const>Groups.plus_class.plus"
###             ("_Numeral" ("_constify" ("_position" 2)))
###             ("\<^const>Groups.times_class.times"
###               ("_Numeral" ("_constify" ("_position" 3))) ("_position" n))))
###         ("_applC" ("_position" emb)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" s) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" int) ("_position" n))))))
###     ("\<^const>QuantK_VCG.acom.Aseq"
###       ("\<^const>QuantK_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###       ("_position" wsum))
###     ("_lambda" ("_position" s) ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>QuantK_Hoare.hoare2o_valid"
###     ("_lambda" ("_position" s)
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" enat)
###           ("\<^const>Groups.plus_class.plus"
###             ("_Numeral" ("_constify" ("_position" 2)))
###             ("\<^const>Groups.times_class.times"
###               ("_Numeral" ("_constify" ("_position" 3))) ("_position" n))))
###         ("_applC" ("_position" emb)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" s) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" int) ("_position" n))))))
###     ("\<^const>Com.com.Seq"
###       ("\<^const>QuantK_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###       ("_position" wsum))
###     ("_lambda" ("_position" s) ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>QuantK_Hoare.hoare2o_valid"
###     ("_lambda" ("_position" s)
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" enat)
###           ("\<^const>Groups.plus_class.plus"
###             ("_Numeral" ("_constify" ("_position" 2)))
###             ("\<^const>Groups.times_class.times"
###               ("_Numeral" ("_constify" ("_position" 3))) ("_position" n))))
###         ("_applC" ("_position" emb)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" s) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" int) ("_position" n))))))
###     ("\<^const>QuantK_VCG.acom.Aseq"
###       ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###       ("_position" wsum))
###     ("_lambda" ("_position" s) ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>QuantK_Hoare.hoare2o_valid"
###     ("_lambda" ("_position" s)
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" enat)
###           ("\<^const>Groups.plus_class.plus"
###             ("_Numeral" ("_constify" ("_position" 2)))
###             ("\<^const>Groups.times_class.times"
###               ("_Numeral" ("_constify" ("_position" 3))) ("_position" n))))
###         ("_applC" ("_position" emb)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" s) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" int) ("_position" n))))))
###     ("\<^const>Com.com.Seq"
###       ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###       ("_position" wsum))
###     ("_lambda" ("_position" s) ("\<^const>Groups.zero_class.zero"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 44 of "$AFP/Hoare_Time/QuantK_Examples.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>QuantK_Hoare.hoareQ"
###     ("_lambda" ("_position" s)
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" ?A) ("_position" s))
###         ("_applC" ("_position" emb)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" s) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" int) ("_position" n))))))
###     ("\<^const>QuantK_VCG.acom.Aseq"
###       ("\<^const>QuantK_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###       ("_position" wsum))
###     ("_lambda" ("_position" s) ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>QuantK_Hoare.hoareQ"
###     ("_lambda" ("_position" s)
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" ?A) ("_position" s))
###         ("_applC" ("_position" emb)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" s) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" int) ("_position" n))))))
###     ("\<^const>Com.com.Seq"
###       ("\<^const>QuantK_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###       ("_position" wsum))
###     ("_lambda" ("_position" s) ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>QuantK_Hoare.hoareQ"
###     ("_lambda" ("_position" s)
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" ?A) ("_position" s))
###         ("_applC" ("_position" emb)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" s) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" int) ("_position" n))))))
###     ("\<^const>QuantK_VCG.acom.Aseq"
###       ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###       ("_position" wsum))
###     ("_lambda" ("_position" s) ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>QuantK_Hoare.hoareQ"
###     ("_lambda" ("_position" s)
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" ?A) ("_position" s))
###         ("_applC" ("_position" emb)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" s) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" int) ("_position" n))))))
###     ("\<^const>Com.com.Seq"
###       ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###       ("_position" wsum))
###     ("_lambda" ("_position" s) ("\<^const>Groups.zero_class.zero"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Cannot skip proof of schematic goal statement
### Ambiguous input (line 73 of "$AFP/Hoare_Time/QuantK_Examples.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>QuantK_Hoare.hoareQ"
###     ("_lambda" ("_position" s) ("\<^const>Groups.one_class.one"))
###     ("\<^const>QuantK_VCG.acom.Aseq" ("\<^const>Com.com.SKIP")
###       ("\<^const>Com.com.SKIP"))
###     ("_lambda" ("_position" s) ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>QuantK_Hoare.hoareQ"
###     ("_lambda" ("_position" s) ("\<^const>Groups.one_class.one"))
###     ("\<^const>Com.com.Seq" ("\<^const>Com.com.SKIP")
###       ("\<^const>Com.com.SKIP"))
###     ("_lambda" ("_position" s) ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>QuantK_Hoare.hoareQ"
###     ("_lambda" ("_position" s) ("\<^const>Groups.one_class.one"))
###     ("\<^const>QuantK_VCG.acom.Aseq" ("\<^const>QuantK_VCG.acom.Askip")
###       ("\<^const>Com.com.SKIP"))
###     ("_lambda" ("_position" s) ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>QuantK_Hoare.hoareQ"
###     ("_lambda" ("_position" s) ("\<^const>Groups.one_class.one"))
###     ("\<^const>Com.com.Seq" ("\<^const>QuantK_VCG.acom.Askip")
###       ("\<^const>Com.com.SKIP"))
###     ("_lambda" ("_position" s) ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>QuantK_Hoare.hoareQ"
###     ("_lambda" ("_position" s) ("\<^const>Groups.one_class.one"))
###     ("\<^const>QuantK_VCG.acom.Aseq" ("\<^const>Com.com.SKIP")
###       ("\<^const>QuantK_VCG.acom.Askip"))
###     ("_lambda" ("_position" s) ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>QuantK_Hoare.hoareQ"
###     ("_lambda" ("_position" s) ("\<^const>Groups.one_class.one"))
###     ("\<^const>Com.com.Seq" ("\<^const>Com.com.SKIP")
###       ("\<^const>QuantK_VCG.acom.Askip"))
###     ("_lambda" ("_position" s) ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>QuantK_Hoare.hoareQ"
###     ("_lambda" ("_position" s) ("\<^const>Groups.one_class.one"))
###     ("\<^const>QuantK_VCG.acom.Aseq" ("\<^const>QuantK_VCG.acom.Askip")
###       ("\<^const>QuantK_VCG.acom.Askip"))
###     ("_lambda" ("_position" s) ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>QuantK_Hoare.hoareQ"
###     ("_lambda" ("_position" s) ("\<^const>Groups.one_class.one"))
###     ("\<^const>Com.com.Seq" ("\<^const>QuantK_VCG.acom.Askip")
###       ("\<^const>QuantK_VCG.acom.Askip"))
###     ("_lambda" ("_position" s) ("\<^const>Groups.zero_class.zero"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 83 of "$AFP/Hoare_Time/QuantK_Examples.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>QuantK_Hoare.hoareQ" ("_position" P)
###       ("\<^const>QuantK_VCG.acom.Aseq"
###         ("\<^const>QuantK_VCG.acom.Aseq" ("_position" A) ("_position" B))
###         ("_position" C))
###       ("_position" Q))
###     ("\<^const>QuantK_Hoare.hoareQ" ("_position" P)
###       ("\<^const>Com.com.Seq" ("_position" A)
###         ("\<^const>QuantK_VCG.acom.Aseq" ("_position" B) ("_position" C)))
###       ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>QuantK_Hoare.hoareQ" ("_position" P)
###       ("\<^const>Com.com.Seq"
###         ("\<^const>QuantK_VCG.acom.Aseq" ("_position" A) ("_position" B))
###         ("_position" C))
###       ("_position" Q))
###     ("\<^const>QuantK_Hoare.hoareQ" ("_position" P)
###       ("\<^const>Com.com.Seq" ("_position" A)
###         ("\<^const>QuantK_VCG.acom.Aseq" ("_position" B) ("_position" C)))
###       ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>QuantK_Hoare.hoareQ" ("_position" P)
###       ("\<^const>QuantK_VCG.acom.Aseq"
###         ("\<^const>Com.com.Seq" ("_position" A) ("_position" B))
###         ("_position" C))
###       ("_position" Q))
###     ("\<^const>QuantK_Hoare.hoareQ" ("_position" P)
###       ("\<^const>Com.com.Seq" ("_position" A)
###         ("\<^const>QuantK_VCG.acom.Aseq" ("_position" B) ("_position" C)))
###       ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>QuantK_Hoare.hoareQ" ("_position" P)
###       ("\<^const>Com.com.Seq"
###         ("\<^const>Com.com.Seq" ("_position" A) ("_position" B))
###         ("_position" C))
###       ("_position" Q))
###     ("\<^const>QuantK_Hoare.hoareQ" ("_position" P)
###       ("\<^const>Com.com.Seq" ("_position" A)
###         ("\<^const>QuantK_VCG.acom.Aseq" ("_position" B) ("_position" C)))
###       ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>QuantK_Hoare.hoareQ" ("_position" P)
###       ("\<^const>QuantK_VCG.acom.Aseq"
###         ("\<^const>QuantK_VCG.acom.Aseq" ("_position" A) ("_position" B))
###         ("_position" C))
###       ("_position" Q))
###     ("\<^const>QuantK_Hoare.hoareQ" ("_position" P)
###       ("\<^const>QuantK_VCG.acom.Aseq" ("_position" A)
###         ("\<^const>QuantK_VCG.acom.Aseq" ("_position" B) ("_position" C)))
###       ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>QuantK_Hoare.hoareQ" ("_position" P)
###       ("\<^const>Com.com.Seq"
###         ("\<^const>QuantK_VCG.acom.Aseq" ("_position" A) ("_position" B))
###         ("_position" C))
###       ("_position" Q))
###     ("\<^const>QuantK_Hoare.hoareQ" ("_position" P)
###       ("\<^const>QuantK_VCG.acom.Aseq" ("_position" A)
###         ("\<^const>QuantK_VCG.acom.Aseq" ("_position" B) ("_position" C)))
###       ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>QuantK_Hoare.hoareQ" ("_position" P)
###       ("\<^const>QuantK_VCG.acom.Aseq"
###         ("\<^const>Com.com.Seq" ("_position" A) ("_position" B))
###         ("_position" C))
###       ("_position" Q))
###     ("\<^const>QuantK_Hoare.hoareQ" ("_position" P)
###       ("\<^const>QuantK_VCG.acom.Aseq" ("_position" A)
###         ("\<^const>QuantK_VCG.acom.Aseq" ("_position" B) ("_position" C)))
###       ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>QuantK_Hoare.hoareQ" ("_position" P)
###       ("\<^const>Com.com.Seq"
###         ("\<^const>Com.com.Seq" ("_position" A) ("_position" B))
###         ("_position" C))
###       ("_position" Q))
###     ("\<^const>QuantK_Hoare.hoareQ" ("_position" P)
###       ("\<^const>QuantK_VCG.acom.Aseq" ("_position" A)
###         ("\<^const>QuantK_VCG.acom.Aseq" ("_position" B) ("_position" C)))
###       ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>QuantK_Hoare.hoareQ" ("_position" P)
###       ("\<^const>QuantK_VCG.acom.Aseq"
###         ("\<^const>QuantK_VCG.acom.Aseq" ("_position" A) ("_position" B))
###         ("_position" C))
###       ("_position" Q))
###     ("\<^const>QuantK_Hoare.hoareQ" ("_position" P)
###       ("\<^const>Com.com.Seq" ("_position" A)
###         ("\<^const>Com.com.Seq" ("_position" B) ("_position" C)))
###       ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>QuantK_Hoare.hoareQ" ("_position" P)
###       ("\<^const>Com.com.Seq"
###         ("\<^const>QuantK_VCG.acom.Aseq" ("_position" A) ("_position" B))
###         ("_position" C))
###       ("_position" Q))
###     ("\<^const>QuantK_Hoare.hoareQ" ("_position" P)
###       ("\<^const>Com.com.Seq" ("_position" A)
###         ("\<^const>Com.com.Seq" ("_position" B) ("_position" C)))
###       ("_position" Q))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 87 of "$AFP/Hoare_Time/QuantK_Examples.thy") produces 32 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>QuantK_Hoare.hoareQ"
###     ("_lambda" ("_position" s) ("\<^const>Groups.one_class.one"))
###     ("\<^const>QuantK_VCG.acom.Aseq"
###       ("\<^const>QuantK_VCG.acom.Aseq" ("\<^const>Com.com.SKIP")
###         ("\<^const>Com.com.SKIP"))
###       ("\<^const>Com.com.SKIP"))
###     ("_lambda" ("_position" s) ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>QuantK_Hoare.hoareQ"
###     ("_lambda" ("_position" s) ("\<^const>Groups.one_class.one"))
###     ("\<^const>Com.com.Seq"
###       ("\<^const>QuantK_VCG.acom.Aseq" ("\<^const>Com.com.SKIP")
###         ("\<^const>Com.com.SKIP"))
###       ("\<^const>Com.com.SKIP"))
###     ("_lambda" ("_position" s) ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>QuantK_Hoare.hoareQ"
###     ("_lambda" ("_position" s) ("\<^const>Groups.one_class.one"))
###     ("\<^const>QuantK_VCG.acom.Aseq"
###       ("\<^const>Com.com.Seq" ("\<^const>Com.com.SKIP")
###         ("\<^const>Com.com.SKIP"))
###       ("\<^const>Com.com.SKIP"))
###     ("_lambda" ("_position" s) ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>QuantK_Hoare.hoareQ"
###     ("_lambda" ("_position" s) ("\<^const>Groups.one_class.one"))
###     ("\<^const>Com.com.Seq"
###       ("\<^const>Com.com.Seq" ("\<^const>Com.com.SKIP")
###         ("\<^const>Com.com.SKIP"))
###       ("\<^const>Com.com.SKIP"))
###     ("_lambda" ("_position" s) ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>QuantK_Hoare.hoareQ"
###     ("_lambda" ("_position" s) ("\<^const>Groups.one_class.one"))
###     ("\<^const>QuantK_VCG.acom.Aseq"
###       ("\<^const>QuantK_VCG.acom.Aseq" ("\<^const>QuantK_VCG.acom.Askip")
###         ("\<^const>Com.com.SKIP"))
###       ("\<^const>Com.com.SKIP"))
###     ("_lambda" ("_position" s) ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>QuantK_Hoare.hoareQ"
###     ("_lambda" ("_position" s) ("\<^const>Groups.one_class.one"))
###     ("\<^const>Com.com.Seq"
###       ("\<^const>QuantK_VCG.acom.Aseq" ("\<^const>QuantK_VCG.acom.Askip")
###         ("\<^const>Com.com.SKIP"))
###       ("\<^const>Com.com.SKIP"))
###     ("_lambda" ("_position" s) ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>QuantK_Hoare.hoareQ"
###     ("_lambda" ("_position" s) ("\<^const>Groups.one_class.one"))
###     ("\<^const>QuantK_VCG.acom.Aseq"
###       ("\<^const>Com.com.Seq" ("\<^const>QuantK_VCG.acom.Askip")
###         ("\<^const>Com.com.SKIP"))
###       ("\<^const>Com.com.SKIP"))
###     ("_lambda" ("_position" s) ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>QuantK_Hoare.hoareQ"
###     ("_lambda" ("_position" s) ("\<^const>Groups.one_class.one"))
###     ("\<^const>Com.com.Seq"
###       ("\<^const>Com.com.Seq" ("\<^const>QuantK_VCG.acom.Askip")
###         ("\<^const>Com.com.SKIP"))
###       ("\<^const>Com.com.SKIP"))
###     ("_lambda" ("_position" s) ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>QuantK_Hoare.hoareQ"
###     ("_lambda" ("_position" s) ("\<^const>Groups.one_class.one"))
###     ("\<^const>QuantK_VCG.acom.Aseq"
###       ("\<^const>QuantK_VCG.acom.Aseq" ("\<^const>Com.com.SKIP")
###         ("\<^const>QuantK_VCG.acom.Askip"))
###       ("\<^const>Com.com.SKIP"))
###     ("_lambda" ("_position" s) ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>QuantK_Hoare.hoareQ"
###     ("_lambda" ("_position" s) ("\<^const>Groups.one_class.one"))
###     ("\<^const>Com.com.Seq"
###       ("\<^const>QuantK_VCG.acom.Aseq" ("\<^const>Com.com.SKIP")
###         ("\<^const>QuantK_VCG.acom.Askip"))
###       ("\<^const>Com.com.SKIP"))
###     ("_lambda" ("_position" s) ("\<^const>Groups.zero_class.zero"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 100 of "$AFP/Hoare_Time/QuantK_Examples.thy") produces 8 parse trees:
### ("\<^const>Pure.eq" ("_position" Wsum)
###   ("\<^const>QuantK_VCG.acom.Awhile"
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" enat)
###         ("\<^const>Groups.times_class.times"
###           ("_Numeral" ("_constify" ("_position" 3)))
###           ("_applC" ("_position" nat)
###             ("_applC" ("_position" s) ("_String" ("_position" ''x'')))))))
###     ("_applC" ("_position" Less)
###       ("_cargs"
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" V) ("_String" ("_position" ''x'')))))
###     ("\<^const>QuantK_VCG.acom.Aseq"
###       ("\<^const>QuantK_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''x''))))))
###       ("\<^const>QuantK_VCG.acom.Aassign" ("_String" ("_position" ''x''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" N)
###               ("\<^const>Groups.uminus_class.uminus"
###                 ("\<^const>Groups.one_class.one")))))))))
### ("\<^const>Pure.eq" ("_position" Wsum)
###   ("\<^const>QuantK_VCG.acom.Awhile"
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" enat)
###         ("\<^const>Groups.times_class.times"
###           ("_Numeral" ("_constify" ("_position" 3)))
###           ("_applC" ("_position" nat)
###             ("_applC" ("_position" s) ("_String" ("_position" ''x'')))))))
###     ("_applC" ("_position" Less)
###       ("_cargs"
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" V) ("_String" ("_position" ''x'')))))
###     ("\<^const>Com.com.Seq"
###       ("\<^const>QuantK_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''x''))))))
###       ("\<^const>QuantK_VCG.acom.Aassign" ("_String" ("_position" ''x''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" N)
###               ("\<^const>Groups.uminus_class.uminus"
###                 ("\<^const>Groups.one_class.one")))))))))
### ("\<^const>Pure.eq" ("_position" Wsum)
###   ("\<^const>QuantK_VCG.acom.Awhile"
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" enat)
###         ("\<^const>Groups.times_class.times"
###           ("_Numeral" ("_constify" ("_position" 3)))
###           ("_applC" ("_position" nat)
###             ("_applC" ("_position" s) ("_String" ("_position" ''x'')))))))
###     ("_applC" ("_position" Less)
###       ("_cargs"
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" V) ("_String" ("_position" ''x'')))))
###     ("\<^const>QuantK_VCG.acom.Aseq"
###       ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''x''))))))
###       ("\<^const>QuantK_VCG.acom.Aassign" ("_String" ("_position" ''x''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" N)
###               ("\<^const>Groups.uminus_class.uminus"
###                 ("\<^const>Groups.one_class.one")))))))))
### ("\<^const>Pure.eq" ("_position" Wsum)
###   ("\<^const>QuantK_VCG.acom.Awhile"
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" enat)
###         ("\<^const>Groups.times_class.times"
###           ("_Numeral" ("_constify" ("_position" 3)))
###           ("_applC" ("_position" nat)
###             ("_applC" ("_position" s) ("_String" ("_position" ''x'')))))))
###     ("_applC" ("_position" Less)
###       ("_cargs"
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" V) ("_String" ("_position" ''x'')))))
###     ("\<^const>Com.com.Seq"
###       ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''x''))))))
###       ("\<^const>QuantK_VCG.acom.Aassign" ("_String" ("_position" ''x''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" N)
###               ("\<^const>Groups.uminus_class.uminus"
###                 ("\<^const>Groups.one_class.one")))))))))
### ("\<^const>Pure.eq" ("_position" Wsum)
###   ("\<^const>QuantK_VCG.acom.Awhile"
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" enat)
###         ("\<^const>Groups.times_class.times"
###           ("_Numeral" ("_constify" ("_position" 3)))
###           ("_applC" ("_position" nat)
###             ("_applC" ("_position" s) ("_String" ("_position" ''x'')))))))
###     ("_applC" ("_position" Less)
###       ("_cargs"
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" V) ("_String" ("_position" ''x'')))))
###     ("\<^const>QuantK_VCG.acom.Aseq"
###       ("\<^const>QuantK_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''x''))))))
###       ("\<^const>Com.com.Assign" ("_String" ("_position" ''x''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" N)
###               ("\<^const>Groups.uminus_class.uminus"
###                 ("\<^const>Groups.one_class.one")))))))))
### ("\<^const>Pure.eq" ("_position" Wsum)
###   ("\<^const>QuantK_VCG.acom.Awhile"
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" enat)
###         ("\<^const>Groups.times_class.times"
###           ("_Numeral" ("_constify" ("_position" 3)))
###           ("_applC" ("_position" nat)
###             ("_applC" ("_position" s) ("_String" ("_position" ''x'')))))))
###     ("_applC" ("_position" Less)
###       ("_cargs"
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" V) ("_String" ("_position" ''x'')))))
###     ("\<^const>Com.com.Seq"
###       ("\<^const>QuantK_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''x''))))))
###       ("\<^const>Com.com.Assign" ("_String" ("_position" ''x''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" N)
###               ("\<^const>Groups.uminus_class.uminus"
###                 ("\<^const>Groups.one_class.one")))))))))
### ("\<^const>Pure.eq" ("_position" Wsum)
###   ("\<^const>QuantK_VCG.acom.Awhile"
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" enat)
###         ("\<^const>Groups.times_class.times"
###           ("_Numeral" ("_constify" ("_position" 3)))
###           ("_applC" ("_position" nat)
###             ("_applC" ("_position" s) ("_String" ("_position" ''x'')))))))
###     ("_applC" ("_position" Less)
###       ("_cargs"
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" V) ("_String" ("_position" ''x'')))))
###     ("\<^const>QuantK_VCG.acom.Aseq"
###       ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''x''))))))
###       ("\<^const>Com.com.Assign" ("_String" ("_position" ''x''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" N)
###               ("\<^const>Groups.uminus_class.uminus"
###                 ("\<^const>Groups.one_class.one")))))))))
### ("\<^const>Pure.eq" ("_position" Wsum)
###   ("\<^const>QuantK_VCG.acom.Awhile"
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" enat)
###         ("\<^const>Groups.times_class.times"
###           ("_Numeral" ("_constify" ("_position" 3)))
###           ("_applC" ("_position" nat)
###             ("_applC" ("_position" s) ("_String" ("_position" ''x'')))))))
###     ("_applC" ("_position" Less)
###       ("_cargs"
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" V) ("_String" ("_position" ''x'')))))
###     ("\<^const>Com.com.Seq"
###       ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''x''))))))
###       ("\<^const>Com.com.Assign" ("_String" ("_position" ''x''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" N)
###               ("\<^const>Groups.uminus_class.uminus"
###                 ("\<^const>Groups.one_class.one")))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 106 of "$AFP/Hoare_Time/QuantK_Examples.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>QuantK_Hoare.hoareQ"
###     ("_lambda" ("_position" s)
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" enat)
###           ("\<^const>Groups.plus_class.plus"
###             ("_Numeral" ("_constify" ("_position" 2)))
###             ("\<^const>Groups.times_class.times"
###               ("_Numeral" ("_constify" ("_position" 3))) ("_position" n))))
###         ("_applC" ("_position" emb)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" s) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" int) ("_position" n))))))
###     ("\<^const>QuantK_VCG.acom.Aseq"
###       ("\<^const>QuantK_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###       ("_position" wsum))
###     ("_lambda" ("_position" s) ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>QuantK_Hoare.hoareQ"
###     ("_lambda" ("_position" s)
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" enat)
###           ("\<^const>Groups.plus_class.plus"
###             ("_Numeral" ("_constify" ("_position" 2)))
###             ("\<^const>Groups.times_class.times"
###               ("_Numeral" ("_constify" ("_position" 3))) ("_position" n))))
###         ("_applC" ("_position" emb)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" s) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" int) ("_position" n))))))
###     ("\<^const>Com.com.Seq"
###       ("\<^const>QuantK_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###       ("_position" wsum))
###     ("_lambda" ("_position" s) ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>QuantK_Hoare.hoareQ"
###     ("_lambda" ("_position" s)
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" enat)
###           ("\<^const>Groups.plus_class.plus"
###             ("_Numeral" ("_constify" ("_position" 2)))
###             ("\<^const>Groups.times_class.times"
###               ("_Numeral" ("_constify" ("_position" 3))) ("_position" n))))
###         ("_applC" ("_position" emb)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" s) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" int) ("_position" n))))))
###     ("\<^const>QuantK_VCG.acom.Aseq"
###       ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###       ("_position" wsum))
###     ("_lambda" ("_position" s) ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>QuantK_Hoare.hoareQ"
###     ("_lambda" ("_position" s)
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" enat)
###           ("\<^const>Groups.plus_class.plus"
###             ("_Numeral" ("_constify" ("_position" 2)))
###             ("\<^const>Groups.times_class.times"
###               ("_Numeral" ("_constify" ("_position" 3))) ("_position" n))))
###         ("_applC" ("_position" emb)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" s) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" int) ("_position" n))))))
###     ("\<^const>Com.com.Seq"
###       ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###       ("_position" wsum))
###     ("_lambda" ("_position" s) ("\<^const>Groups.zero_class.zero"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 128 of "$AFP/Hoare_Time/QuantK_Examples.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>QuantK_Hoare.hoareQ"
###     ("_lambda" ("_position" s)
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" enat) ("_position" n))
###         ("_applC" ("_position" emb)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" s) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" int) ("_position" n))))))
###     ("\<^const>QuantK_VCG.acom.Aseq"
###       ("\<^const>QuantK_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###       ("_position" wsum))
###     ("_lambda" ("_position" s) ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>QuantK_Hoare.hoareQ"
###     ("_lambda" ("_position" s)
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" enat) ("_position" n))
###         ("_applC" ("_position" emb)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" s) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" int) ("_position" n))))))
###     ("\<^const>Com.com.Seq"
###       ("\<^const>QuantK_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###       ("_position" wsum))
###     ("_lambda" ("_position" s) ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>QuantK_Hoare.hoareQ"
###     ("_lambda" ("_position" s)
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" enat) ("_position" n))
###         ("_applC" ("_position" emb)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" s) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" int) ("_position" n))))))
###     ("\<^const>QuantK_VCG.acom.Aseq"
###       ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###       ("_position" wsum))
###     ("_lambda" ("_position" s) ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>QuantK_Hoare.hoareQ"
###     ("_lambda" ("_position" s)
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" enat) ("_position" n))
###         ("_applC" ("_position" emb)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" s) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" int) ("_position" n))))))
###     ("\<^const>Com.com.Seq"
###       ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###       ("_position" wsum))
###     ("_lambda" ("_position" s) ("\<^const>Groups.zero_class.zero"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 153 of "$AFP/Hoare_Time/QuantK_Examples.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>QuantK_Hoare.hoareQ"
###     ("_lambda" ("_position" s)
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" enat)
###           ("\<^const>Groups.plus_class.plus" ("_position" n)
###             ("\<^const>Groups.one_class.one")))
###         ("_applC" ("_position" emb)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" s) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" int) ("_position" n))))))
###     ("\<^const>QuantK_VCG.acom.Aseq"
###       ("\<^const>QuantK_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###       ("_position" wsum))
###     ("_lambda" ("_position" s) ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>QuantK_Hoare.hoareQ"
###     ("_lambda" ("_position" s)
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" enat)
###           ("\<^const>Groups.plus_class.plus" ("_position" n)
###             ("\<^const>Groups.one_class.one")))
###         ("_applC" ("_position" emb)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" s) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" int) ("_position" n))))))
###     ("\<^const>Com.com.Seq"
###       ("\<^const>QuantK_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###       ("_position" wsum))
###     ("_lambda" ("_position" s) ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>QuantK_Hoare.hoareQ"
###     ("_lambda" ("_position" s)
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" enat)
###           ("\<^const>Groups.plus_class.plus" ("_position" n)
###             ("\<^const>Groups.one_class.one")))
###         ("_applC" ("_position" emb)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" s) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" int) ("_position" n))))))
###     ("\<^const>QuantK_VCG.acom.Aseq"
###       ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###       ("_position" wsum))
###     ("_lambda" ("_position" s) ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>QuantK_Hoare.hoareQ"
###     ("_lambda" ("_position" s)
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" enat)
###           ("\<^const>Groups.plus_class.plus" ("_position" n)
###             ("\<^const>Groups.one_class.one")))
###         ("_applC" ("_position" emb)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" s) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" int) ("_position" n))))))
###     ("\<^const>Com.com.Seq"
###       ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###       ("_position" wsum))
###     ("_lambda" ("_position" s) ("\<^const>Groups.zero_class.zero"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 178 of "$AFP/Hoare_Time/QuantK_Examples.thy") produces 8 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" Wsum1) ("_position" z))
###   ("\<^const>QuantK_VCG.acom.Awhile"
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" enat)
###         ("\<^const>Groups.times_class.times" ("_position" z)
###           ("_applC" ("_position" nat)
###             ("_applC" ("_position" s) ("_String" ("_position" ''x'')))))))
###     ("_applC" ("_position" Less)
###       ("_cargs"
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" V) ("_String" ("_position" ''x'')))))
###     ("\<^const>QuantK_VCG.acom.Aseq"
###       ("\<^const>QuantK_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''x''))))))
###       ("\<^const>QuantK_VCG.acom.Aassign" ("_String" ("_position" ''x''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" N)
###               ("\<^const>Groups.uminus_class.uminus"
###                 ("\<^const>Groups.one_class.one")))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" Wsum1) ("_position" z))
###   ("\<^const>QuantK_VCG.acom.Awhile"
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" enat)
###         ("\<^const>Groups.times_class.times" ("_position" z)
###           ("_applC" ("_position" nat)
###             ("_applC" ("_position" s) ("_String" ("_position" ''x'')))))))
###     ("_applC" ("_position" Less)
###       ("_cargs"
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" V) ("_String" ("_position" ''x'')))))
###     ("\<^const>Com.com.Seq"
###       ("\<^const>QuantK_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''x''))))))
###       ("\<^const>QuantK_VCG.acom.Aassign" ("_String" ("_position" ''x''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" N)
###               ("\<^const>Groups.uminus_class.uminus"
###                 ("\<^const>Groups.one_class.one")))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" Wsum1) ("_position" z))
###   ("\<^const>QuantK_VCG.acom.Awhile"
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" enat)
###         ("\<^const>Groups.times_class.times" ("_position" z)
###           ("_applC" ("_position" nat)
###             ("_applC" ("_position" s) ("_String" ("_position" ''x'')))))))
###     ("_applC" ("_position" Less)
###       ("_cargs"
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" V) ("_String" ("_position" ''x'')))))
###     ("\<^const>QuantK_VCG.acom.Aseq"
###       ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''x''))))))
###       ("\<^const>QuantK_VCG.acom.Aassign" ("_String" ("_position" ''x''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" N)
###               ("\<^const>Groups.uminus_class.uminus"
###                 ("\<^const>Groups.one_class.one")))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" Wsum1) ("_position" z))
###   ("\<^const>QuantK_VCG.acom.Awhile"
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" enat)
###         ("\<^const>Groups.times_class.times" ("_position" z)
###           ("_applC" ("_position" nat)
###             ("_applC" ("_position" s) ("_String" ("_position" ''x'')))))))
###     ("_applC" ("_position" Less)
###       ("_cargs"
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" V) ("_String" ("_position" ''x'')))))
###     ("\<^const>Com.com.Seq"
###       ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''x''))))))
###       ("\<^const>QuantK_VCG.acom.Aassign" ("_String" ("_position" ''x''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" N)
###               ("\<^const>Groups.uminus_class.uminus"
###                 ("\<^const>Groups.one_class.one")))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" Wsum1) ("_position" z))
###   ("\<^const>QuantK_VCG.acom.Awhile"
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" enat)
###         ("\<^const>Groups.times_class.times" ("_position" z)
###           ("_applC" ("_position" nat)
###             ("_applC" ("_position" s) ("_String" ("_position" ''x'')))))))
###     ("_applC" ("_position" Less)
###       ("_cargs"
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" V) ("_String" ("_position" ''x'')))))
###     ("\<^const>QuantK_VCG.acom.Aseq"
###       ("\<^const>QuantK_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''x''))))))
###       ("\<^const>Com.com.Assign" ("_String" ("_position" ''x''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" N)
###               ("\<^const>Groups.uminus_class.uminus"
###                 ("\<^const>Groups.one_class.one")))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" Wsum1) ("_position" z))
###   ("\<^const>QuantK_VCG.acom.Awhile"
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" enat)
###         ("\<^const>Groups.times_class.times" ("_position" z)
###           ("_applC" ("_position" nat)
###             ("_applC" ("_position" s) ("_String" ("_position" ''x'')))))))
###     ("_applC" ("_position" Less)
###       ("_cargs"
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" V) ("_String" ("_position" ''x'')))))
###     ("\<^const>Com.com.Seq"
###       ("\<^const>QuantK_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''x''))))))
###       ("\<^const>Com.com.Assign" ("_String" ("_position" ''x''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" N)
###               ("\<^const>Groups.uminus_class.uminus"
###                 ("\<^const>Groups.one_class.one")))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" Wsum1) ("_position" z))
###   ("\<^const>QuantK_VCG.acom.Awhile"
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" enat)
###         ("\<^const>Groups.times_class.times" ("_position" z)
###           ("_applC" ("_position" nat)
###             ("_applC" ("_position" s) ("_String" ("_position" ''x'')))))))
###     ("_applC" ("_position" Less)
###       ("_cargs"
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" V) ("_String" ("_position" ''x'')))))
###     ("\<^const>QuantK_VCG.acom.Aseq"
###       ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''x''))))))
###       ("\<^const>Com.com.Assign" ("_String" ("_position" ''x''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" N)
###               ("\<^const>Groups.uminus_class.uminus"
###                 ("\<^const>Groups.one_class.one")))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" Wsum1) ("_position" z))
###   ("\<^const>QuantK_VCG.acom.Awhile"
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" enat)
###         ("\<^const>Groups.times_class.times" ("_position" z)
###           ("_applC" ("_position" nat)
###             ("_applC" ("_position" s) ("_String" ("_position" ''x'')))))))
###     ("_applC" ("_position" Less)
###       ("_cargs"
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" V) ("_String" ("_position" ''x'')))))
###     ("\<^const>Com.com.Seq"
###       ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''x''))))))
###       ("\<^const>Com.com.Assign" ("_String" ("_position" ''x''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" N)
###               ("\<^const>Groups.uminus_class.uminus"
###                 ("\<^const>Groups.one_class.one")))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 183 of "$AFP/Hoare_Time/QuantK_Examples.thy") produces 8 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" Wsum2)
###     ("_cargs" ("_position" n) ("_position" vier)))
###   ("\<^const>QuantK_VCG.acom.Awhile"
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" enat)
###         ("\<^const>Groups.times_class.times" ("_position" vier)
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Groups.plus_class.plus"
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" s) ("_String" ("_position" ''x''))))
###               ("_position" n))
###             ("\<^const>Groups.one_class.one")))))
###     ("_applC" ("_position" Less)
###       ("_cargs"
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" V) ("_String" ("_position" ''x'')))))
###     ("\<^const>QuantK_VCG.acom.Aseq"
###       ("\<^const>QuantK_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''x''))))))
###       ("\<^const>QuantK_VCG.acom.Aassign" ("_String" ("_position" ''x''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" N)
###               ("\<^const>Groups.uminus_class.uminus"
###                 ("\<^const>Groups.one_class.one")))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" Wsum2)
###     ("_cargs" ("_position" n) ("_position" vier)))
###   ("\<^const>QuantK_VCG.acom.Awhile"
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" enat)
###         ("\<^const>Groups.times_class.times" ("_position" vier)
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Groups.plus_class.plus"
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" s) ("_String" ("_position" ''x''))))
###               ("_position" n))
###             ("\<^const>Groups.one_class.one")))))
###     ("_applC" ("_position" Less)
###       ("_cargs"
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" V) ("_String" ("_position" ''x'')))))
###     ("\<^const>Com.com.Seq"
###       ("\<^const>QuantK_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''x''))))))
###       ("\<^const>QuantK_VCG.acom.Aassign" ("_String" ("_position" ''x''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" N)
###               ("\<^const>Groups.uminus_class.uminus"
###                 ("\<^const>Groups.one_class.one")))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" Wsum2)
###     ("_cargs" ("_position" n) ("_position" vier)))
###   ("\<^const>QuantK_VCG.acom.Awhile"
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" enat)
###         ("\<^const>Groups.times_class.times" ("_position" vier)
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Groups.plus_class.plus"
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" s) ("_String" ("_position" ''x''))))
###               ("_position" n))
###             ("\<^const>Groups.one_class.one")))))
###     ("_applC" ("_position" Less)
###       ("_cargs"
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" V) ("_String" ("_position" ''x'')))))
###     ("\<^const>QuantK_VCG.acom.Aseq"
###       ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''x''))))))
###       ("\<^const>QuantK_VCG.acom.Aassign" ("_String" ("_position" ''x''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" N)
###               ("\<^const>Groups.uminus_class.uminus"
###                 ("\<^const>Groups.one_class.one")))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" Wsum2)
###     ("_cargs" ("_position" n) ("_position" vier)))
###   ("\<^const>QuantK_VCG.acom.Awhile"
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" enat)
###         ("\<^const>Groups.times_class.times" ("_position" vier)
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Groups.plus_class.plus"
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" s) ("_String" ("_position" ''x''))))
###               ("_position" n))
###             ("\<^const>Groups.one_class.one")))))
###     ("_applC" ("_position" Less)
###       ("_cargs"
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" V) ("_String" ("_position" ''x'')))))
###     ("\<^const>Com.com.Seq"
###       ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''x''))))))
###       ("\<^const>QuantK_VCG.acom.Aassign" ("_String" ("_position" ''x''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" N)
###               ("\<^const>Groups.uminus_class.uminus"
###                 ("\<^const>Groups.one_class.one")))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" Wsum2)
###     ("_cargs" ("_position" n) ("_position" vier)))
###   ("\<^const>QuantK_VCG.acom.Awhile"
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" enat)
###         ("\<^const>Groups.times_class.times" ("_position" vier)
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Groups.plus_class.plus"
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" s) ("_String" ("_position" ''x''))))
###               ("_position" n))
###             ("\<^const>Groups.one_class.one")))))
###     ("_applC" ("_position" Less)
###       ("_cargs"
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" V) ("_String" ("_position" ''x'')))))
###     ("\<^const>QuantK_VCG.acom.Aseq"
###       ("\<^const>QuantK_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''x''))))))
###       ("\<^const>Com.com.Assign" ("_String" ("_position" ''x''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" N)
###               ("\<^const>Groups.uminus_class.uminus"
###                 ("\<^const>Groups.one_class.one")))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" Wsum2)
###     ("_cargs" ("_position" n) ("_position" vier)))
###   ("\<^const>QuantK_VCG.acom.Awhile"
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" enat)
###         ("\<^const>Groups.times_class.times" ("_position" vier)
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Groups.plus_class.plus"
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" s) ("_String" ("_position" ''x''))))
###               ("_position" n))
###             ("\<^const>Groups.one_class.one")))))
###     ("_applC" ("_position" Less)
###       ("_cargs"
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" V) ("_String" ("_position" ''x'')))))
###     ("\<^const>Com.com.Seq"
###       ("\<^const>QuantK_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''x''))))))
###       ("\<^const>Com.com.Assign" ("_String" ("_position" ''x''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" N)
###               ("\<^const>Groups.uminus_class.uminus"
###                 ("\<^const>Groups.one_class.one")))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" Wsum2)
###     ("_cargs" ("_position" n) ("_position" vier)))
###   ("\<^const>QuantK_VCG.acom.Awhile"
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" enat)
###         ("\<^const>Groups.times_class.times" ("_position" vier)
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Groups.plus_class.plus"
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" s) ("_String" ("_position" ''x''))))
###               ("_position" n))
###             ("\<^const>Groups.one_class.one")))))
###     ("_applC" ("_position" Less)
###       ("_cargs"
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" V) ("_String" ("_position" ''x'')))))
###     ("\<^const>QuantK_VCG.acom.Aseq"
###       ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''x''))))))
###       ("\<^const>Com.com.Assign" ("_String" ("_position" ''x''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" N)
###               ("\<^const>Groups.uminus_class.uminus"
###                 ("\<^const>Groups.one_class.one")))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" Wsum2)
###     ("_cargs" ("_position" n) ("_position" vier)))
###   ("\<^const>QuantK_VCG.acom.Awhile"
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" enat)
###         ("\<^const>Groups.times_class.times" ("_position" vier)
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Groups.plus_class.plus"
###               ("_applC" ("_position" nat)
###                 ("_applC" ("_position" s) ("_String" ("_position" ''x''))))
###               ("_position" n))
###             ("\<^const>Groups.one_class.one")))))
###     ("_applC" ("_position" Less)
###       ("_cargs"
###         ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" V) ("_String" ("_position" ''x'')))))
###     ("\<^const>Com.com.Seq"
###       ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''x''))))))
###       ("\<^const>Com.com.Assign" ("_String" ("_position" ''x''))
###         ("_applC" ("_position" Plus)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''x'')))
###             ("_applC" ("_position" N)
###               ("\<^const>Groups.uminus_class.uminus"
###                 ("\<^const>Groups.one_class.one")))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.QuantK_Examples"
### 0.193s elapsed time, 0.206s cpu time, 0.000s GC time
Loading theory "Draft.QuantK_ExamplesTemplates"
val templateLemmas =
   [("QuantK_Examples.hoareQ_Seq_assoc",
     "(\<turnstile>\<^sub>2\<^sub>' {?P} ?A;; ?B;; ?C {?Q}) =
      (\<turnstile>\<^sub>2\<^sub>' {?P} ?A;; (?B;; ?C) {?Q})",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 4),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 4),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))),
         template_var 0))),
    ("QuantK_Examples.example_sound",
     "\<Turnstile>\<^sub>2\<^sub>' {%s.
 enat (2 + 3 * ?n) + \<up> (s ''x'' = int ?n)}
      ''y'' ::= N 0;; wsum {%s. 0}",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 27, t_empty),
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app
                        (template_hole 16,
                         template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app (template_hole 15, template_hole 13), template_hole 14),
                                     template_hole 14),
                                   template_hole 13),
                                 template_hole 13),
                               template_hole 13),
                             template_hole 13),
                           template_hole 14)),
                       template_hole 12)),
                   template_app (template_hole 8, template_hole 7))),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app (template_hole 8, template_hole 7)),
                     template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_hole 16,
                           template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app (template_hole 15, template_hole 14), template_hole 14),
 template_hole 14),
                                     template_hole 13),
                                   template_hole 13),
                                 template_hole 13),
                               template_hole 13),
                             template_hole 14)),
                         template_hole 12)))),
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app
                        (template_hole 9,
                         template_app
                          (template_app
                            (template_hole 16,
                             template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app (template_hole 15, template_hole 13), template_hole 14),
   template_hole 14),
 template_hole 13),
                                     template_hole 13),
                                   template_hole 13),
                                 template_hole 13),
                               template_hole 14)),
                           template_hole 12)),
                       template_app
                        (template_app
                          (template_hole 3,
                           template_app
                            (template_hole 4,
                             template_app
                              (template_app
                                (template_hole 16,
                                 template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app (template_hole 15, template_hole 13),
         template_hole 14),
       template_hole 14),
     template_hole 13),
   template_hole 13),
 template_hole 13),
                                     template_hole 13),
                                   template_hole 14)),
                               template_hole 12))),
                         template_app
                          (template_hole 4,
                           template_app
                            (template_app
                              (template_hole 16,
                               template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app (template_hole 15, template_hole 14), template_hole 14),
     template_hole 14),
   template_hole 13),
 template_hole 13),
                                     template_hole 13),
                                   template_hole 13),
                                 template_hole 14)),
                             template_hole 12))))),
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app
                        (template_app
                          (template_hole 16,
                           template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app (template_hole 15, template_hole 14), template_hole 14),
 template_hole 14),
                                     template_hole 13),
                                   template_hole 13),
                                 template_hole 13),
                               template_hole 13),
                             template_hole 14)),
                         template_hole 12)),
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_hole 4,
                           template_app
                            (template_app
                              (template_hole 16,
                               template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app (template_hole 15, template_hole 14), template_hole 14),
     template_hole 14),
   template_hole 13),
 template_hole 13),
                                     template_hole 13),
                                   template_hole 13),
                                 template_hole 14)),
                             template_hole 12))),
                       template_app
                        (template_hole 8,
                         template_app
                          (template_hole 2, template_hole 1)))))))),
           t_empty)
         )),
    ("QuantK_Examples.example",
     "\<turnstile>\<^sub>2\<^sub>' {%s.
 enat (2 + 3 * ?n) + \<up> (s ''x'' = int ?n)}
                                   ''y'' ::= N 0;; wsum {%s. 0}",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 27, t_empty),
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app
                        (template_hole 16,
                         template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app (template_hole 15, template_hole 13), template_hole 14),
                                     template_hole 14),
                                   template_hole 13),
                                 template_hole 13),
                               template_hole 13),
                             template_hole 13),
                           template_hole 14)),
                       template_hole 12)),
                   template_app (template_hole 8, template_hole 7))),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app (template_hole 8, template_hole 7)),
                     template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_hole 16,
                           template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app (template_hole 15, template_hole 14), template_hole 14),
 template_hole 14),
                                     template_hole 13),
                                   template_hole 13),
                                 template_hole 13),
                               template_hole 13),
                             template_hole 14)),
                         template_hole 12)))),
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app
                        (template_hole 9,
                         template_app
                          (template_app
                            (template_hole 16,
                             template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app (template_hole 15, template_hole 13), template_hole 14),
   template_hole 14),
 template_hole 13),
                                     template_hole 13),
                                   template_hole 13),
                                 template_hole 13),
                               template_hole 14)),
                           template_hole 12)),
                       template_app
                        (template_app
                          (template_hole 3,
                           template_app
                            (template_hole 4,
                             template_app
                              (template_app
                                (template_hole 16,
                                 template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app (template_hole 15, template_hole 13),
         template_hole 14),
       template_hole 14),
     template_hole 13),
   template_hole 13),
 template_hole 13),
                                     template_hole 13),
                                   template_hole 14)),
                               template_hole 12))),
                         template_app
                          (template_hole 4,
                           template_app
                            (template_app
                              (template_hole 16,
                               template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app (template_hole 15, template_hole 14), template_hole 14),
     template_hole 14),
   template_hole 13),
 template_hole 13),
                                     template_hole 13),
                                   template_hole 13),
                                 template_hole 14)),
                             template_hole 12))))),
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app
                        (template_app
                          (template_hole 16,
                           template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app (template_hole 15, template_hole 14), template_hole 14),
 template_hole 14),
                                     template_hole 13),
                                   template_hole 13),
                                 template_hole 13),
                               template_hole 13),
                             template_hole 14)),
                         template_hole 12)),
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_hole 4,
                           template_app
                            (template_app
                              (template_hole 16,
                               template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app (template_hole 15, template_hole 14), template_hole 14),
     template_hole 14),
   template_hole 13),
 template_hole 13),
                                     template_hole 13),
                                   template_hole 13),
                                 template_hole 14)),
                             template_hole 12))),
                       template_app
                        (template_hole 8,
                         template_app
                          (template_hole 2, template_hole 1)))))))),
           t_empty)
         ))]:
   (string * thm * template) list
### theory "Draft.QuantK_ExamplesTemplates"
### 0.387s elapsed time, 0.519s cpu time, 0.051s GC time
val it = (): unit
