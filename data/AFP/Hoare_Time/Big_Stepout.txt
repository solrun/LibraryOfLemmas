Loading theory "Draft.AExp" (required by "Draft.Big_StepTemplates" via "Draft.Big_Step" via "Draft.Com" via "Draft.BExp")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Big_StepTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Big_StepTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.Big_StepTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.132s elapsed time, 0.542s cpu time, 0.056s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Big_StepTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.247s elapsed time, 1.005s cpu time, 0.056s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Big_StepTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "Draft.AExp"
### 0.712s elapsed time, 2.834s cpu time, 0.250s GC time
Loading theory "Draft.BExp" (required by "Draft.Big_StepTemplates" via "Draft.Big_Step" via "Draft.Com")
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.850s elapsed time, 3.375s cpu time, 0.323s GC time
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.970s elapsed time, 3.690s cpu time, 0.843s GC time
"12"
  :: "int"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
"12"
  :: "int"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.BExp"
### 0.780s elapsed time, 2.677s cpu time, 0.698s GC time
Loading theory "Draft.Com" (required by "Draft.Big_StepTemplates" via "Draft.Big_Step")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
"True"
  :: "bool"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Com"
### 0.533s elapsed time, 1.297s cpu time, 0.130s GC time
Loading theory "Draft.Big_Step" (required by "Draft.Big_StepTemplates")
Proofs for inductive predicate(s) "big_step"
  Proving monotonicity ...
### theory "HOL-Library.Tree"
### 2.006s elapsed time, 6.493s cpu time, 1.054s GC time
Loading theory "Draft.Templates" (required by "Draft.Big_StepTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.111s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Big_StepTemplates")
### theory "Draft.Big_Step"
### 0.336s elapsed time, 0.896s cpu time, 0.084s GC time
"{_}"
  :: "(char list => int) set"
"{[42]}"
  :: "int list set"
[| ?x1.0 \<Rightarrow> ?x2.0; !!s. ?P (SKIP, s) s;
   !!x a s. ?P (x ::= a, s) (s(x := aval a s));
   !!c\<^sub>1 s\<^sub>1 s\<^sub>2 c\<^sub>2 s\<^sub>3.
      [| (c\<^sub>1, s\<^sub>1) \<Rightarrow> s\<^sub>2;
         ?P (c\<^sub>1, s\<^sub>1) s\<^sub>2;
         (c\<^sub>2, s\<^sub>2) \<Rightarrow> s\<^sub>3;
         ?P (c\<^sub>2, s\<^sub>2) s\<^sub>3 |]
      ==> ?P (c\<^sub>1;; c\<^sub>2, s\<^sub>1) s\<^sub>3;
   !!b s c\<^sub>1 t c\<^sub>2.
      [| bval b s; (c\<^sub>1, s) \<Rightarrow> t; ?P (c\<^sub>1, s) t |]
      ==> ?P (IF b THEN c\<^sub>1 ELSE c\<^sub>2, s) t;
   !!b s c\<^sub>2 t c\<^sub>1.
      [| ~ bval b s; (c\<^sub>2, s) \<Rightarrow> t; ?P (c\<^sub>2, s) t |]
      ==> ?P (IF b THEN c\<^sub>1 ELSE c\<^sub>2, s) t;
   !!b s c. ~ bval b s ==> ?P (WHILE b DO c, s) s;
   !!b s\<^sub>1 c s\<^sub>2 s\<^sub>3.
      [| bval b s\<^sub>1; (c, s\<^sub>1) \<Rightarrow> s\<^sub>2;
         ?P (c, s\<^sub>1) s\<^sub>2;
         (WHILE b DO c, s\<^sub>2) \<Rightarrow> s\<^sub>3;
         ?P (WHILE b DO c, s\<^sub>2) s\<^sub>3 |]
      ==> ?P (WHILE b DO c, s\<^sub>1) s\<^sub>3 |]
==> ?P ?x1.0 ?x2.0
[| (?x1a, ?x1b) \<Rightarrow> ?x2a; !!s. ?P SKIP s s;
   !!x a s. ?P (x ::= a) s (s(x := aval a s));
   !!c\<^sub>1 s\<^sub>1 s\<^sub>2 c\<^sub>2 s\<^sub>3.
      [| (c\<^sub>1, s\<^sub>1) \<Rightarrow> s\<^sub>2;
         ?P c\<^sub>1 s\<^sub>1 s\<^sub>2;
         (c\<^sub>2, s\<^sub>2) \<Rightarrow> s\<^sub>3;
         ?P c\<^sub>2 s\<^sub>2 s\<^sub>3 |]
      ==> ?P (c\<^sub>1;; c\<^sub>2) s\<^sub>1 s\<^sub>3;
   !!b s c\<^sub>1 t c\<^sub>2.
      [| bval b s; (c\<^sub>1, s) \<Rightarrow> t; ?P c\<^sub>1 s t |]
      ==> ?P (IF b THEN c\<^sub>1 ELSE c\<^sub>2) s t;
   !!b s c\<^sub>2 t c\<^sub>1.
      [| ~ bval b s; (c\<^sub>2, s) \<Rightarrow> t; ?P c\<^sub>2 s t |]
      ==> ?P (IF b THEN c\<^sub>1 ELSE c\<^sub>2) s t;
   !!b s c. ~ bval b s ==> ?P (WHILE b DO c) s s;
   !!b s\<^sub>1 c s\<^sub>2 s\<^sub>3.
      [| bval b s\<^sub>1; (c, s\<^sub>1) \<Rightarrow> s\<^sub>2;
         ?P c s\<^sub>1 s\<^sub>2;
         (WHILE b DO c, s\<^sub>2) \<Rightarrow> s\<^sub>3;
         ?P (WHILE b DO c) s\<^sub>2 s\<^sub>3 |]
      ==> ?P (WHILE b DO c) s\<^sub>1 s\<^sub>3 |]
==> ?P ?x1a ?x1b ?x2a
[| (SKIP, ?s) \<Rightarrow> ?t; ?t = ?s ==> ?P |] ==> ?P
[| (?x ::= ?a, ?s) \<Rightarrow> ?t; ?t = ?s(?x := aval ?a ?s) ==> ?P |]
==> ?P
[| (?c1.0;; ?c2.0, ?s1.0) \<Rightarrow> ?s3.0;
   !!s\<^sub>2.
      [| (?c1.0, ?s1.0) \<Rightarrow> s\<^sub>2;
         (?c2.0, s\<^sub>2) \<Rightarrow> ?s3.0 |]
      ==> ?P |]
==> ?P
[| (IF ?b THEN ?c1.0 ELSE ?c2.0, ?s) \<Rightarrow> ?t;
   [| bval ?b ?s; (?c1.0, ?s) \<Rightarrow> ?t |] ==> ?P;
   [| ~ bval ?b ?s; (?c2.0, ?s) \<Rightarrow> ?t |] ==> ?P |]
==> ?P
[| (WHILE ?b DO ?c, ?s) \<Rightarrow> ?t;
   [| ?t = ?s; ~ bval ?b ?s |] ==> ?P;
   !!s\<^sub>2.
      [| bval ?b ?s; (?c, ?s) \<Rightarrow> s\<^sub>2;
         (WHILE ?b DO ?c, s\<^sub>2) \<Rightarrow> ?t |]
      ==> ?P |]
==> ?P
[| bval ?b ?s; (?c\<^sub>1, ?s) \<Rightarrow> ?t |]
==> (IF ?b THEN ?c\<^sub>1 ELSE ?c\<^sub>2, ?s) \<Rightarrow> ?t
"{[2]}"
  :: "int list set"
"{[15, 13]}"
  :: "int list set"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.626s elapsed time, 1.889s cpu time, 0.153s GC time
Loading theory "Draft.Big_StepTemplates"
val templateLemmas =
   [("Big_Step.big_step_Pii_oI",
     "?x \<Rightarrow> ?xa ==> pred.eval (big_step_Pii_o ?x) ?xa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Big_Step.big_step_Pii_iI",
     "?x \<Rightarrow> ?xa ==> pred.eval (big_step_Pii_i ?x ?xa) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Big_Step.sim_refl", "?c \<sim> ?c",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("Big_Step.big_step_Pii_oE",
     "[| pred.eval (big_step_Pii_o ?x) ?xa; ?x \<Rightarrow> ?xa ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Big_Step.assign_simp",
     "(?x ::= ?a, ?s) \<Rightarrow> ?s' = (?s' = ?s(?x := aval ?a ?s))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 3),
                      template_var 2)),
                  template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_var 0,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))))),
    ("Big_Step.SkipE",
     "[| (SKIP, ?s) \<Rightarrow> ?t; ?t = ?s ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 1, template_var 2)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Big_Step.big_step_Pii_iE",
     "[| pred.eval (big_step_Pii_i ?x ?xa) ?y;
         ?x \<Rightarrow> ?xa ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Big_Step.big_step_determ",
     "[| (?c, ?s) \<Rightarrow> ?t; (?c, ?s) \<Rightarrow> ?u |]
      ==> ?u = ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 0)
            )],
       template_equation (template_var 0, template_var 1))),
    ("Big_Step.triv_if", "IF ?b THEN ?c ELSE ?c \<sim> ?c",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("Big_Step.Seq_assoc",
     "(?c1.0;; ?c2.0;; ?c3.0, ?s) \<Rightarrow> ?s' =
      (?c1.0;; (?c2.0;; ?c3.0), ?s) \<Rightarrow> ?s'",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3)),
                 template_var 2)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2))),
             template_var 1)),
         template_var 0))),
    ("Big_Step.AssignE",
     "[| (?x ::= ?a, ?s) \<Rightarrow> ?t;
         ?t = ?s(?x := aval ?a ?s) ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 4),
                      template_var 3)),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 4),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Big_Step.unfold_while",
     "WHILE ?b DO ?c \<sim> IF ?b THEN ?c;; WHILE ?b DO ?c ELSE SKIP",
     template_predicate (template_app (template_hole 7, t_empty))),
    ("Big_Step.SeqE",
     "[| (?c1.0;; ?c2.0, ?s1.0) \<Rightarrow> ?s3.0;
         !!s\<^sub>2.
            [| (?c1.0, ?s1.0) \<Rightarrow> s\<^sub>2;
               (?c2.0, s\<^sub>2) \<Rightarrow> ?s3.0 |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_hole 2,
                    template_app
                     (template_app (template_hole 1, template_var 4),
                      template_var 3)),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Big_Step.commute_if",
     "IF ?b1.0 THEN IF ?b2.0 THEN ?c11.0 ELSE ?c12.0 ELSE ?c2.0 \<sim>
      IF ?b2.0 THEN IF ?b1.0 THEN ?c11.0 ELSE ?c2.0
      ELSE IF ?b1.0 THEN ?c12.0 ELSE ?c2.0",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("Big_Step.sim_sym", "(?c \<sim> ?c') = (?c' \<sim> ?c)",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app (template_hole 2, t_empty))),
    ("Big_Step.sim_while_cong_aux",
     "[| (WHILE ?b DO ?c, ?s) \<Rightarrow> ?t; ?c \<sim> ?c' |]
      ==> (WHILE ?b DO ?c', ?s) \<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 4),
                      template_var 3)),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 4),
                     template_var 0)),
                 template_var 2)),
             template_var 1)
           ))),
    ("Big_Step.sim_while_cong",
     "?c \<sim> ?c' ==> WHILE ?b DO ?c \<sim> WHILE ?b DO ?c'",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Big_Step.IfE",
     "[| (IF ?b THEN ?c1.0 ELSE ?c2.0, ?s) \<Rightarrow> ?t;
         [| bval ?b ?s; (?c1.0, ?s) \<Rightarrow> ?t |] ==> ?P;
         [| ~ bval ?b ?s; (?c2.0, ?s) \<Rightarrow> ?t |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app
                       (template_app (template_hole 2, template_var 5),
                        template_var 4),
                      template_var 3)),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 5),
                 template_var 2)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 4),
                       template_var 2)),
                   template_var 1)
                 )],
            template_predicate (template_var 0))),
        template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 1, template_var 5),
                     template_var 2)
                   )
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 3),
                       template_var 2)),
                   template_var 1)
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Big_Step.sim_trans",
     "[| ?c \<sim> ?c'; ?c' \<sim> ?c'' |] ==> ?c \<sim> ?c''",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Big_Step.WhileE",
     "[| (WHILE ?b DO ?c, ?s) \<Rightarrow> ?t;
         [| ?t = ?s; ~ bval ?b ?s |] ==> ?P;
         !!s\<^sub>2.
            [| bval ?b ?s; (?c, ?s) \<Rightarrow> s\<^sub>2;
               (WHILE ?b DO ?c, s\<^sub>2) \<Rightarrow> ?t |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 4),
                      template_var 3)),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 1, template_var 2)],
          template_implication
           ([template_negation
              (
                 template_predicate
                  (
                     template_app
                      (template_app (template_hole 1, template_var 4),
                       template_var 2)
                     )
                 )],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Big_Step.big_step_induct",
     "[| (?x1a, ?x1b) \<Rightarrow> ?x2a; !!s. ?P SKIP s s;
         !!x a s. ?P (x ::= a) s (s(x := aval a s));
         !!c\<^sub>1 s\<^sub>1 s\<^sub>2 c\<^sub>2 s\<^sub>3.
            [| (c\<^sub>1, s\<^sub>1) \<Rightarrow> s\<^sub>2;
               ?P c\<^sub>1 s\<^sub>1 s\<^sub>2;
               (c\<^sub>2, s\<^sub>2) \<Rightarrow> s\<^sub>3;
               ?P c\<^sub>2 s\<^sub>2 s\<^sub>3 |]
            ==> ?P (c\<^sub>1;; c\<^sub>2) s\<^sub>1 s\<^sub>3;
         !!b s c\<^sub>1 t c\<^sub>2.
            [| bval b s; (c\<^sub>1, s) \<Rightarrow> t; ?P c\<^sub>1 s t |]
            ==> ?P (IF b THEN c\<^sub>1 ELSE c\<^sub>2) s t;
         !!b s c\<^sub>2 t c\<^sub>1.
            [| ~ bval b s; (c\<^sub>2, s) \<Rightarrow> t;
               ?P c\<^sub>2 s t |]
            ==> ?P (IF b THEN c\<^sub>1 ELSE c\<^sub>2) s t;
         !!b s c. ~ bval b s ==> ?P (WHILE b DO c) s s;
         !!b s\<^sub>1 c s\<^sub>2 s\<^sub>3.
            [| bval b s\<^sub>1; (c, s\<^sub>1) \<Rightarrow> s\<^sub>2;
               ?P c s\<^sub>1 s\<^sub>2;
               (WHILE b DO c, s\<^sub>2) \<Rightarrow> s\<^sub>3;
               ?P (WHILE b DO c) s\<^sub>2 s\<^sub>3 |]
            ==> ?P (WHILE b DO c) s\<^sub>1 s\<^sub>3 |]
      ==> ?P ?x1a ?x1b ?x2a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app (template_hole 14, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 0, template_var 3),
               template_var 2),
             template_var 1)
           )))]:
   (string * thm * template) list
### theory "Draft.Big_StepTemplates"
### 0.338s elapsed time, 0.420s cpu time, 0.000s GC time
val it = (): unit
