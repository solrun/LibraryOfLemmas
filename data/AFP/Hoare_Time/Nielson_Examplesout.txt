Loading theory "Draft.AExp" (required by "Draft.Nielson_ExamplesTemplates" via "Draft.Nielson_Examples" via "Draft.Nielson_VCG" via "Draft.Nielson_Hoare" via "Draft.Big_StepT" via "Draft.Big_Step" via "Draft.Com" via "Draft.BExp")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Nielson_ExamplesTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.Nielson_ExamplesTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Nielson_ExamplesTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.151s elapsed time, 0.615s cpu time, 0.052s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Nielson_ExamplesTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.206s elapsed time, 0.836s cpu time, 0.052s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Nielson_ExamplesTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
### theory "Draft.AExp"
### 0.710s elapsed time, 2.821s cpu time, 0.268s GC time
Loading theory "Draft.BExp" (required by "Draft.Nielson_ExamplesTemplates" via "Draft.Nielson_Examples" via "Draft.Nielson_VCG" via "Draft.Nielson_Hoare" via "Draft.Big_StepT" via "Draft.Big_Step" via "Draft.Com")
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.911s elapsed time, 3.600s cpu time, 0.360s GC time
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.017s elapsed time, 3.848s cpu time, 0.887s GC time
Found termination order: "size <*mlex*> {}"
"12"
  :: "int"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
"12"
  :: "int"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.BExp"
### 0.796s elapsed time, 2.757s cpu time, 0.717s GC time
Loading theory "Draft.Com" (required by "Draft.Nielson_ExamplesTemplates" via "Draft.Nielson_Examples" via "Draft.Nielson_VCG" via "Draft.Nielson_Hoare" via "Draft.Big_StepT" via "Draft.Big_Step")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
"True"
  :: "bool"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Com"
### 0.530s elapsed time, 1.288s cpu time, 0.125s GC time
Loading theory "Draft.Big_Step" (required by "Draft.Nielson_ExamplesTemplates" via "Draft.Nielson_Examples" via "Draft.Nielson_VCG" via "Draft.Nielson_Hoare" via "Draft.Big_StepT")
Proofs for inductive predicate(s) "big_step"
  Proving monotonicity ...
### theory "HOL-Library.Tree"
### 2.021s elapsed time, 6.532s cpu time, 1.099s GC time
Loading theory "Draft.Templates" (required by "Draft.Nielson_ExamplesTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.106s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Nielson_ExamplesTemplates")
### theory "Draft.Big_Step"
### 0.342s elapsed time, 0.918s cpu time, 0.112s GC time
Loading theory "Draft.Big_StepT" (required by "Draft.Nielson_ExamplesTemplates" via "Draft.Nielson_Examples" via "Draft.Nielson_VCG" via "Draft.Nielson_Hoare")
Proofs for inductive predicate(s) "big_step_t"
  Proving monotonicity ...
"{_}"
  :: "(char list => int) set"
"{[42]}"
  :: "int list set"
"{[2]}"
  :: "int list set"
[| ?x1.0 \<Rightarrow> ?x2.0; !!s. ?P (SKIP, s) s;
   !!x a s. ?P (x ::= a, s) (s(x := aval a s));
   !!c\<^sub>1 s\<^sub>1 s\<^sub>2 c\<^sub>2 s\<^sub>3.
      [| (c\<^sub>1, s\<^sub>1) \<Rightarrow> s\<^sub>2;
         ?P (c\<^sub>1, s\<^sub>1) s\<^sub>2;
         (c\<^sub>2, s\<^sub>2) \<Rightarrow> s\<^sub>3;
         ?P (c\<^sub>2, s\<^sub>2) s\<^sub>3 |]
      ==> ?P (c\<^sub>1;; c\<^sub>2, s\<^sub>1) s\<^sub>3;
   !!b s c\<^sub>1 t c\<^sub>2.
      [| bval b s; (c\<^sub>1, s) \<Rightarrow> t; ?P (c\<^sub>1, s) t |]
      ==> ?P (IF b THEN c\<^sub>1 ELSE c\<^sub>2, s) t;
   !!b s c\<^sub>2 t c\<^sub>1.
      [| ~ bval b s; (c\<^sub>2, s) \<Rightarrow> t; ?P (c\<^sub>2, s) t |]
      ==> ?P (IF b THEN c\<^sub>1 ELSE c\<^sub>2, s) t;
   !!b s c. ~ bval b s ==> ?P (WHILE b DO c, s) s;
   !!b s\<^sub>1 c s\<^sub>2 s\<^sub>3.
      [| bval b s\<^sub>1; (c, s\<^sub>1) \<Rightarrow> s\<^sub>2;
         ?P (c, s\<^sub>1) s\<^sub>2;
         (WHILE b DO c, s\<^sub>2) \<Rightarrow> s\<^sub>3;
         ?P (WHILE b DO c, s\<^sub>2) s\<^sub>3 |]
      ==> ?P (WHILE b DO c, s\<^sub>1) s\<^sub>3 |]
==> ?P ?x1.0 ?x2.0
[| (?x1a, ?x1b) \<Rightarrow> ?x2a; !!s. ?P SKIP s s;
   !!x a s. ?P (x ::= a) s (s(x := aval a s));
   !!c\<^sub>1 s\<^sub>1 s\<^sub>2 c\<^sub>2 s\<^sub>3.
      [| (c\<^sub>1, s\<^sub>1) \<Rightarrow> s\<^sub>2;
         ?P c\<^sub>1 s\<^sub>1 s\<^sub>2;
         (c\<^sub>2, s\<^sub>2) \<Rightarrow> s\<^sub>3;
         ?P c\<^sub>2 s\<^sub>2 s\<^sub>3 |]
      ==> ?P (c\<^sub>1;; c\<^sub>2) s\<^sub>1 s\<^sub>3;
   !!b s c\<^sub>1 t c\<^sub>2.
      [| bval b s; (c\<^sub>1, s) \<Rightarrow> t; ?P c\<^sub>1 s t |]
      ==> ?P (IF b THEN c\<^sub>1 ELSE c\<^sub>2) s t;
   !!b s c\<^sub>2 t c\<^sub>1.
      [| ~ bval b s; (c\<^sub>2, s) \<Rightarrow> t; ?P c\<^sub>2 s t |]
      ==> ?P (IF b THEN c\<^sub>1 ELSE c\<^sub>2) s t;
   !!b s c. ~ bval b s ==> ?P (WHILE b DO c) s s;
   !!b s\<^sub>1 c s\<^sub>2 s\<^sub>3.
      [| bval b s\<^sub>1; (c, s\<^sub>1) \<Rightarrow> s\<^sub>2;
         ?P c s\<^sub>1 s\<^sub>2;
         (WHILE b DO c, s\<^sub>2) \<Rightarrow> s\<^sub>3;
         ?P (WHILE b DO c) s\<^sub>2 s\<^sub>3 |]
      ==> ?P (WHILE b DO c) s\<^sub>1 s\<^sub>3 |]
==> ?P ?x1a ?x1b ?x2a
[| (SKIP, ?s) \<Rightarrow> ?t; ?t = ?s ==> ?P |] ==> ?P
[| (?x ::= ?a, ?s) \<Rightarrow> ?t; ?t = ?s(?x := aval ?a ?s) ==> ?P |]
==> ?P
[| (?c1.0;; ?c2.0, ?s1.0) \<Rightarrow> ?s3.0;
   !!s\<^sub>2.
      [| (?c1.0, ?s1.0) \<Rightarrow> s\<^sub>2;
         (?c2.0, s\<^sub>2) \<Rightarrow> ?s3.0 |]
      ==> ?P |]
==> ?P
[| (IF ?b THEN ?c1.0 ELSE ?c2.0, ?s) \<Rightarrow> ?t;
   [| bval ?b ?s; (?c1.0, ?s) \<Rightarrow> ?t |] ==> ?P;
   [| ~ bval ?b ?s; (?c2.0, ?s) \<Rightarrow> ?t |] ==> ?P |]
==> ?P
[| (WHILE ?b DO ?c, ?s) \<Rightarrow> ?t;
   [| ?t = ?s; ~ bval ?b ?s |] ==> ?P;
   !!s\<^sub>2.
      [| bval ?b ?s; (?c, ?s) \<Rightarrow> s\<^sub>2;
         (WHILE ?b DO ?c, s\<^sub>2) \<Rightarrow> ?t |]
      ==> ?P |]
==> ?P
[| bval ?b ?s; (?c\<^sub>1, ?s) \<Rightarrow> ?t |]
==> (IF ?b THEN ?c\<^sub>1 ELSE ?c\<^sub>2, ?s) \<Rightarrow> ?t
"{[15, 13]}"
  :: "int list set"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.627s elapsed time, 2.126s cpu time, 0.177s GC time
### Ambiguous input (line 92 of "$AFP/Hoare_Time/Big_StepT.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Big_StepT.big_step_t"
###       ("_tuple" ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###         ("_tuple_arg" ("_position" s)))
###       ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero"))
###       ("_position" s'))
###     ("\<^const>HOL.eq" ("_position" s')
###       ("_Update" ("_position" s)
###         ("_updbind" ("_position" x)
###           ("_applC" ("_position" aval)
###             ("_cargs" ("_position" a) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Big_StepT.big_step_t"
###     ("_tuple" ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###       ("_tuple_arg" ("_position" s)))
###     ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero"))
###     ("\<^const>HOL.iff" ("_position" s')
###       ("\<^const>HOL.eq" ("_position" s')
###         ("_Update" ("_position" s)
###           ("_updbind" ("_position" x)
###             ("_applC" ("_position" aval)
###               ("_cargs" ("_position" a) ("_position" s)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 191 of "$AFP/Hoare_Time/Big_StepT.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Big_StepT.big_step_t"
###       ("\<^const>HOL.Not"
###         ("_tuple" ("_position" SKIP) ("_tuple_arg" ("_position" s))))
###       ("_position" p) ("_position" t))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.not_equal" ("_position" s) ("_position" t))
###       ("\<^const>HOL.not_equal" ("_position" p)
###         ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.Not"
###       ("\<^const>Big_StepT.big_step_t"
###         ("_tuple" ("_position" SKIP) ("_tuple_arg" ("_position" s)))
###         ("_position" p) ("_position" t)))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.not_equal" ("_position" s) ("_position" t))
###       ("\<^const>HOL.not_equal" ("_position" p)
###         ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero"))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 210 of "$AFP/Hoare_Time/Big_StepT.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_The" ("_position" t)
###       ("\<^const>HOL.Ex_binder" ("_position" p)
###         ("\<^const>Big_StepT.big_step_t"
###           ("_tuple"
###             ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))
###             ("_tuple_arg" ("_position" s)))
###           ("_position" p) ("_position" t))))
###     ("_Update" ("_position" s)
###       ("_updbind" ("_position" x)
###         ("_applC" ("_position" aval)
###           ("_cargs" ("_position" e) ("_position" s)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Big_StepT.big_step_t"
###       ("_The" ("_position" t)
###         ("\<^const>HOL.Ex_binder" ("_position" p)
###           ("_tuple"
###             ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))
###             ("_tuple_arg" ("_position" s)))))
###       ("_position" p) ("_position" t))
###     ("_Update" ("_position" s)
###       ("_updbind" ("_position" x)
###         ("_applC" ("_position" aval)
###           ("_cargs" ("_position" e) ("_position" s)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_The" ("_position" t)
###       ("\<^const>Big_StepT.big_step_t"
###         ("\<^const>HOL.Ex_binder" ("_position" p)
###           ("_tuple"
###             ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))
###             ("_tuple_arg" ("_position" s))))
###         ("_position" p) ("_position" t)))
###     ("_Update" ("_position" s)
###       ("_updbind" ("_position" x)
###         ("_applC" ("_position" aval)
###           ("_cargs" ("_position" e) ("_position" s)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 215 of "$AFP/Hoare_Time/Big_StepT.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Big_StepT.big_step_t"
###       ("\<^const>HOL.Not"
###         ("_tuple"
###           ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))
###           ("_tuple_arg" ("_position" s))))
###       ("_position" p) ("_position" t))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.not_equal" ("_position" p)
###         ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero")))
###       ("\<^const>HOL.not_equal" ("_position" t)
###         ("_Update" ("_position" s)
###           ("_updbind" ("_position" x)
###             ("_applC" ("_position" aval)
###               ("_cargs" ("_position" e) ("_position" s)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.Not"
###       ("\<^const>Big_StepT.big_step_t"
###         ("_tuple"
###           ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))
###           ("_tuple_arg" ("_position" s)))
###         ("_position" p) ("_position" t)))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.not_equal" ("_position" p)
###         ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero")))
###       ("\<^const>HOL.not_equal" ("_position" t)
###         ("_Update" ("_position" s)
###           ("_updbind" ("_position" x)
###             ("_applC" ("_position" aval)
###               ("_cargs" ("_position" e) ("_position" s)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 220 of "$AFP/Hoare_Time/Big_StepT.thy") produces 9 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("\<^const>Big_StepT.big_step_t"
###             ("_tuple" ("_position" c1) ("_tuple_arg" ("_position" s)))
###             ("_position" n) ("_position" a)))))
###     ("_The" ("_position" n)
###       ("\<^const>HOL.Ex_binder" ("_position" a)
###         ("\<^const>Big_StepT.big_step_t"
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))
###           ("_position" n) ("_position" a))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("\<^const>Big_StepT.big_step_t"
###         ("_The" ("_position" n)
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c1) ("_tuple_arg" ("_position" s)))))
###         ("_position" n) ("_position" a)))
###     ("_The" ("_position" n)
###       ("\<^const>HOL.Ex_binder" ("_position" a)
###         ("\<^const>Big_StepT.big_step_t"
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))
###           ("_position" n) ("_position" a))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>Big_StepT.big_step_t"
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c1) ("_tuple_arg" ("_position" s))))
###           ("_position" n) ("_position" a))))
###     ("_The" ("_position" n)
###       ("\<^const>HOL.Ex_binder" ("_position" a)
###         ("\<^const>Big_StepT.big_step_t"
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))
###           ("_position" n) ("_position" a))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("\<^const>Big_StepT.big_step_t"
###             ("_tuple" ("_position" c1) ("_tuple_arg" ("_position" s)))
###             ("_position" n) ("_position" a)))))
###     ("\<^const>Big_StepT.big_step_t"
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))))
###       ("_position" n) ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("\<^const>Big_StepT.big_step_t"
###         ("_The" ("_position" n)
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c1) ("_tuple_arg" ("_position" s)))))
###         ("_position" n) ("_position" a)))
###     ("\<^const>Big_StepT.big_step_t"
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))))
###       ("_position" n) ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>Big_StepT.big_step_t"
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c1) ("_tuple_arg" ("_position" s))))
###           ("_position" n) ("_position" a))))
###     ("\<^const>Big_StepT.big_step_t"
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))))
###       ("_position" n) ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("\<^const>Big_StepT.big_step_t"
###             ("_tuple" ("_position" c1) ("_tuple_arg" ("_position" s)))
###             ("_position" n) ("_position" a)))))
###     ("_The" ("_position" n)
###       ("\<^const>Big_StepT.big_step_t"
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s))))
###         ("_position" n) ("_position" a)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("\<^const>Big_StepT.big_step_t"
###         ("_The" ("_position" n)
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c1) ("_tuple_arg" ("_position" s)))))
###         ("_position" n) ("_position" a)))
###     ("_The" ("_position" n)
###       ("\<^const>Big_StepT.big_step_t"
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s))))
###         ("_position" n) ("_position" a)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>Big_StepT.big_step_t"
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c1) ("_tuple_arg" ("_position" s))))
###           ("_position" n) ("_position" a))))
###     ("_The" ("_position" n)
###       ("\<^const>Big_StepT.big_step_t"
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s))))
###         ("_position" n) ("_position" a)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 232 of "$AFP/Hoare_Time/Big_StepT.thy") produces 9 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("\<^const>Big_StepT.big_step_t"
###             ("_tuple" ("_position" c2) ("_tuple_arg" ("_position" s)))
###             ("_position" n) ("_position" a)))))
###     ("_The" ("_position" n)
###       ("\<^const>HOL.Ex_binder" ("_position" a)
###         ("\<^const>Big_StepT.big_step_t"
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))
###           ("_position" n) ("_position" a))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("\<^const>Big_StepT.big_step_t"
###         ("_The" ("_position" n)
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c2) ("_tuple_arg" ("_position" s)))))
###         ("_position" n) ("_position" a)))
###     ("_The" ("_position" n)
###       ("\<^const>HOL.Ex_binder" ("_position" a)
###         ("\<^const>Big_StepT.big_step_t"
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))
###           ("_position" n) ("_position" a))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>Big_StepT.big_step_t"
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c2) ("_tuple_arg" ("_position" s))))
###           ("_position" n) ("_position" a))))
###     ("_The" ("_position" n)
###       ("\<^const>HOL.Ex_binder" ("_position" a)
###         ("\<^const>Big_StepT.big_step_t"
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))
###           ("_position" n) ("_position" a))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("\<^const>Big_StepT.big_step_t"
###             ("_tuple" ("_position" c2) ("_tuple_arg" ("_position" s)))
###             ("_position" n) ("_position" a)))))
###     ("\<^const>Big_StepT.big_step_t"
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))))
###       ("_position" n) ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("\<^const>Big_StepT.big_step_t"
###         ("_The" ("_position" n)
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c2) ("_tuple_arg" ("_position" s)))))
###         ("_position" n) ("_position" a)))
###     ("\<^const>Big_StepT.big_step_t"
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))))
###       ("_position" n) ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>Big_StepT.big_step_t"
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c2) ("_tuple_arg" ("_position" s))))
###           ("_position" n) ("_position" a))))
###     ("\<^const>Big_StepT.big_step_t"
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))))
###       ("_position" n) ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("\<^const>Big_StepT.big_step_t"
###             ("_tuple" ("_position" c2) ("_tuple_arg" ("_position" s)))
###             ("_position" n) ("_position" a)))))
###     ("_The" ("_position" n)
###       ("\<^const>Big_StepT.big_step_t"
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s))))
###         ("_position" n) ("_position" a)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("\<^const>Big_StepT.big_step_t"
###         ("_The" ("_position" n)
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c2) ("_tuple_arg" ("_position" s)))))
###         ("_position" n) ("_position" a)))
###     ("_The" ("_position" n)
###       ("\<^const>Big_StepT.big_step_t"
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s))))
###         ("_position" n) ("_position" a)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>Big_StepT.big_step_t"
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c2) ("_tuple_arg" ("_position" s))))
###           ("_position" n) ("_position" a))))
###     ("_The" ("_position" n)
###       ("\<^const>Big_StepT.big_step_t"
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s))))
###         ("_position" n) ("_position" a)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Big_StepT"
### 0.872s elapsed time, 2.688s cpu time, 0.180s GC time
Loading theory "Draft.Nielson_Hoare" (required by "Draft.Nielson_ExamplesTemplates" via "Draft.Nielson_Examples" via "Draft.Nielson_VCG")
### Ambiguous input (line 49 of "$AFP/Hoare_Time/Nielson_Hoare.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" s)
###     ("_list"
###       ("\<^const>Fields.inverse_class.inverse_divide" ("_position" a)
###         ("_position" x))))
###   ("_Update" ("_position" s)
###     ("_updbind" ("_position" x)
###       ("_applC" ("_position" aval)
###         ("_cargs" ("_position" a) ("_position" s))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>state_subst" ("_position" s) ("_position" a) ("_position" x))
###   ("_Update" ("_position" s)
###     ("_updbind" ("_position" x)
###       ("_applC" ("_position" aval)
###         ("_cargs" ("_position" a) ("_position" s))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 64 of "$AFP/Hoare_Time/Nielson_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>hoare1"
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" l)
###           ("_applC" ("_position" s)
###             ("_list"
###               ("\<^const>Fields.inverse_class.inverse_divide"
###                 ("_position" a) ("_position" x)))))))
###     ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero")))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>hoare1"
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" l)
###           ("\<^const>Nielson_Hoare.state_subst" ("_position" s)
###             ("_position" a) ("_position" x)))))
###     ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero")))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
"{[42]}"
  :: "int list set"
Proofs for inductive predicate(s) "hoare1"
  Proving monotonicity ...
"{(_, 1)}"
  :: "((char list => int) * nat) set"
[| (SKIP, ?s) \<Rightarrow> ?x \<Down> ?t;
   [| ?x = Suc 0; ?t = ?s |] ==> ?P |]
==> ?P
[| (?x ::= ?a, ?s) \<Rightarrow> ?p \<Down> ?t;
   [| ?p = Suc 0; ?t = ?s(?x := aval ?a ?s) |] ==> ?P |]
==> ?P
[| (?c1.0;; ?c2.0, ?s1.0) \<Rightarrow> ?p \<Down> ?s3.0;
   !!x s2 y.
      [| ?p = x + y; (?c1.0, ?s1.0) \<Rightarrow> x \<Down> s2;
         (?c2.0, s2) \<Rightarrow> y \<Down> ?s3.0 |]
      ==> ?P |]
==> ?P
[| (IF ?b THEN ?c1.0 ELSE ?c2.0, ?s) \<Rightarrow> ?x \<Down> ?t;
   !!x. [| ?x = Suc x; bval ?b ?s; (?c1.0, ?s) \<Rightarrow> x \<Down> ?t |]
        ==> ?P;
   !!x. [| ?x = Suc x; ~ bval ?b ?s;
           (?c2.0, ?s) \<Rightarrow> x \<Down> ?t |]
        ==> ?P |]
==> ?P
[| (WHILE ?b DO ?c, ?s) \<Rightarrow> ?x \<Down> ?t;
   [| ?x = Suc 0; ?t = ?s; ~ bval ?b ?s |] ==> ?P;
   !!x s2 y.
      [| bval ?b ?s; (?c, ?s) \<Rightarrow> x \<Down> s2;
         (WHILE ?b DO ?c, s2) \<Rightarrow> y \<Down> ?t;
         Suc (x + y) = ?x |]
      ==> ?P |]
==> ?P
"{[2]}"
  :: "int list set"
"{[15, 13]}"
  :: "int list set"
### Ambiguous input (line 113 of "$AFP/Hoare_Time/Nielson_Hoare.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" l) ("_position" s))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" P)
###           ("_cargs" ("_position" l) ("_position" s)))
###         ("_applC" ("_position" Q)
###           ("_cargs" ("_position" l)
###             ("\<^const>Nielson_Hoare.state_subst" ("_position" s)
###               ("_position" a) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nielson_Hoare.hoare1" ("_position" P)
###       ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###       ("_lambda" ("_position" s) ("\<^const>Groups.one_class.one"))
###       ("_position" Q))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" l) ("_position" s))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" P)
###           ("_cargs" ("_position" l) ("_position" s)))
###         ("_applC" ("_position" Q)
###           ("_cargs" ("_position" l)
###             ("_applC" ("_position" s)
###               ("_list"
###                 ("\<^const>Fields.inverse_class.inverse_divide"
###                   ("_position" a) ("_position" x)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nielson_Hoare.hoare1" ("_position" P)
###       ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###       ("_lambda" ("_position" s) ("\<^const>Groups.one_class.one"))
###       ("_position" Q))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 315 of "$AFP/Hoare_Time/Nielson_Hoare.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>wp1") ("_cargs" ("_position" c) ("_position" Q)))
###     ("\<^const>HOL.conj"
###       ("\<^const>Big_StepT.big_step_t"
###         ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" t) ("_position" p))
###             ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))))
###         ("_position" p) ("_position" t))
###       ("_applC" ("_position" Q)
###         ("_cargs" ("_position" l) ("_position" t))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>wp1") ("_cargs" ("_position" c) ("_position" Q)))
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" t) ("_position" p))
###         ("\<^const>HOL.conj"
###           ("\<^const>Big_StepT.big_step_t"
###             ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###             ("_position" p) ("_position" t))
###           ("_applC" ("_position" Q)
###             ("_cargs" ("_position" l) ("_position" t))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>wp1") ("_cargs" ("_position" c) ("_position" Q)))
###     ("\<^const>Big_StepT.big_step_t"
###       ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###         ("\<^const>HOL.Ex_binder" ("_idts" ("_position" t) ("_position" p))
###           ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))))
###       ("_position" p)
###       ("\<^const>HOL.conj" ("_position" t)
###         ("_applC" ("_position" Q)
###           ("_cargs" ("_position" l) ("_position" t)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>wp1") ("_cargs" ("_position" c) ("_position" Q)))
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" t) ("_position" p))
###         ("\<^const>Big_StepT.big_step_t"
###           ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###           ("_position" p)
###           ("\<^const>HOL.conj" ("_position" t)
###             ("_applC" ("_position" Q)
###               ("_cargs" ("_position" l) ("_position" t)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>wp1") ("_cargs" ("_position" c) ("_position" Q)))
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("\<^const>Big_StepT.big_step_t"
###         ("\<^const>HOL.Ex_binder" ("_idts" ("_position" t) ("_position" p))
###           ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s))))
###         ("_position" p)
###         ("\<^const>HOL.conj" ("_position" t)
###           ("_applC" ("_position" Q)
###             ("_cargs" ("_position" l) ("_position" t))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>wp1") ("_cargs" ("_position" c) ("_position" Q)))
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("\<^const>HOL.conj"
###         ("\<^const>Big_StepT.big_step_t"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" t) ("_position" p))
###             ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s))))
###           ("_position" p) ("_position" t))
###         ("_applC" ("_position" Q)
###           ("_cargs" ("_position" l) ("_position" t)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 334 of "$AFP/Hoare_Time/Nielson_Hoare.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" prec) ("_cargs" ("_position" c) ("_position" E)))
###   ("_lambda" ("_position" s)
###     ("_applC" ("_position" E)
###       ("_The" ("_position" t)
###         ("\<^const>HOL.Ex_binder" ("_position" p)
###           ("\<^const>Big_StepT.big_step_t"
###             ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###             ("_position" p) ("_position" t)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" prec) ("_cargs" ("_position" c) ("_position" E)))
###   ("_lambda" ("_position" s)
###     ("_applC" ("_position" E)
###       ("_The" ("_position" t)
###         ("\<^const>Big_StepT.big_step_t"
###           ("\<^const>HOL.Ex_binder" ("_position" p)
###             ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s))))
###           ("_position" p) ("_position" t))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 377 of "$AFP/Hoare_Time/Nielson_Hoare.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Big_StepT.big_step_t"
###       ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###       ("_position" P) ("_position" T)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("\<^const>Big_StepT.big_step_t"
###             ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###             ("_position" n) ("_position" a))))
###       ("_position" P))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Big_StepT.big_step_t"
###       ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###       ("_position" P) ("_position" T)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Big_StepT.big_step_t"
###         ("_The" ("_position" n)
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))))
###         ("_position" n) ("_position" a))
###       ("_position" P))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Big_StepT.big_step_t"
###       ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###       ("_position" P) ("_position" T)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_The" ("_position" n)
###         ("\<^const>Big_StepT.big_step_t"
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s))))
###           ("_position" n) ("_position" a)))
###       ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 380 of "$AFP/Hoare_Time/Nielson_Hoare.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Big_StepT.big_step_t"
###       ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###       ("_position" P) ("_position" T)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_The" ("_position" a)
###         ("\<^const>HOL.Ex_binder" ("_position" n)
###           ("\<^const>Big_StepT.big_step_t"
###             ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###             ("_position" n) ("_position" a))))
###       ("_position" T))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Big_StepT.big_step_t"
###       ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###       ("_position" P) ("_position" T)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Big_StepT.big_step_t"
###         ("_The" ("_position" a)
###           ("\<^const>HOL.Ex_binder" ("_position" n)
###             ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))))
###         ("_position" n) ("_position" a))
###       ("_position" T))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Big_StepT.big_step_t"
###       ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###       ("_position" P) ("_position" T)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_The" ("_position" a)
###         ("\<^const>Big_StepT.big_step_t"
###           ("\<^const>HOL.Ex_binder" ("_position" n)
###             ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s))))
###           ("_position" n) ("_position" a)))
###       ("_position" T))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Nielson_Hoare"
### 0.293s elapsed time, 0.733s cpu time, 0.041s GC time
Loading theory "Draft.Nielson_VCG" (required by "Draft.Nielson_ExamplesTemplates" via "Draft.Nielson_Examples")
### Ambiguous input (line 24 of "$AFP/Hoare_Time/Nielson_VCG.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip) ("\<^const>Nielson_VCG.acom.Askip"))
###     ("\<^const>Nielson_VCG.acom.Askip")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip) ("\<^const>Com.com.SKIP"))
###     ("\<^const>Nielson_VCG.acom.Askip")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip) ("\<^const>Nielson_VCG.acom.Askip"))
###     ("\<^const>Com.com.SKIP")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip) ("\<^const>Com.com.SKIP"))
###     ("\<^const>Com.com.SKIP")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 25 of "$AFP/Hoare_Time/Nielson_VCG.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>Nielson_VCG.acom.Aassign" ("_position" x) ("_position" a)))
###     ("\<^const>Nielson_VCG.acom.Aassign" ("_position" x) ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>Com.com.Assign" ("_position" x) ("_position" a)))
###     ("\<^const>Nielson_VCG.acom.Aassign" ("_position" x) ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>Nielson_VCG.acom.Aassign" ("_position" x) ("_position" a)))
###     ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>Com.com.Assign" ("_position" x) ("_position" a)))
###     ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 26 of "$AFP/Hoare_Time/Nielson_VCG.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>Nielson_VCG.acom.Aseq" ("_position" C\<^sub>1)
###         ("_position" C\<^sub>2)))
###     ("\<^const>Nielson_VCG.acom.Aseq"
###       ("_applC" ("_position" strip) ("_position" C\<^sub>1))
###       ("_applC" ("_position" strip) ("_position" C\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>Com.com.Seq" ("_position" C\<^sub>1)
###         ("_position" C\<^sub>2)))
###     ("\<^const>Nielson_VCG.acom.Aseq"
###       ("_applC" ("_position" strip) ("_position" C\<^sub>1))
###       ("_applC" ("_position" strip) ("_position" C\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>Nielson_VCG.acom.Aseq" ("_position" C\<^sub>1)
###         ("_position" C\<^sub>2)))
###     ("\<^const>Com.com.Seq"
###       ("_applC" ("_position" strip) ("_position" C\<^sub>1))
###       ("_applC" ("_position" strip) ("_position" C\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>Com.com.Seq" ("_position" C\<^sub>1)
###         ("_position" C\<^sub>2)))
###     ("\<^const>Com.com.Seq"
###       ("_applC" ("_position" strip) ("_position" C\<^sub>1))
###       ("_applC" ("_position" strip) ("_position" C\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 27 of "$AFP/Hoare_Time/Nielson_VCG.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>Com.com.If" ("_position" b) ("_position" C\<^sub>1)
###         ("_position" C\<^sub>2)))
###     ("\<^const>Com.com.If" ("_position" b)
###       ("_applC" ("_position" strip) ("_position" C\<^sub>1))
###       ("_applC" ("_position" strip) ("_position" C\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>Nielson_VCG.acom.Aif" ("_position" b)
###         ("_position" C\<^sub>1) ("_position" C\<^sub>2)))
###     ("\<^const>Com.com.If" ("_position" b)
###       ("_applC" ("_position" strip) ("_position" C\<^sub>1))
###       ("_applC" ("_position" strip) ("_position" C\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>Com.com.If" ("_position" b) ("_position" C\<^sub>1)
###         ("_position" C\<^sub>2)))
###     ("\<^const>Nielson_VCG.acom.Aif" ("_position" b)
###       ("_applC" ("_position" strip) ("_position" C\<^sub>1))
###       ("_applC" ("_position" strip) ("_position" C\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>Nielson_VCG.acom.Aif" ("_position" b)
###         ("_position" C\<^sub>1) ("_position" C\<^sub>2)))
###     ("\<^const>Nielson_VCG.acom.Aif" ("_position" b)
###       ("_applC" ("_position" strip) ("_position" C\<^sub>1))
###       ("_applC" ("_position" strip) ("_position" C\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 85 of "$AFP/Hoare_Time/Nielson_VCG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" varacom)
###       ("\<^const>Nielson_VCG.acom.Aseq" ("_position" C\<^sub>1)
###         ("_position" C\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" varacom) ("_position" C\<^sub>1))
###       ("_applC" ("_position" varacom) ("_position" C\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" varacom)
###       ("\<^const>Com.com.Seq" ("_position" C\<^sub>1)
###         ("_position" C\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" varacom) ("_position" C\<^sub>1))
###       ("_applC" ("_position" varacom) ("_position" C\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 86 of "$AFP/Hoare_Time/Nielson_VCG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" varacom)
###       ("\<^const>Com.com.If" ("_position" b) ("_position" C\<^sub>1)
###         ("_position" C\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" varacom) ("_position" C\<^sub>1))
###       ("_applC" ("_position" varacom) ("_position" C\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" varacom)
###       ("\<^const>Nielson_VCG.acom.Aif" ("_position" b)
###         ("_position" C\<^sub>1) ("_position" C\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" varacom) ("_position" C\<^sub>1))
###       ("_applC" ("_position" varacom) ("_position" C\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 94 of "$AFP/Hoare_Time/Nielson_VCG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" preT)
###       ("_cargs" ("\<^const>Com.com.SKIP") ("_position" e)))
###     ("_position" e)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" preT)
###       ("_cargs" ("\<^const>Nielson_VCG.acom.Askip") ("_position" e)))
###     ("_position" e)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 95 of "$AFP/Hoare_Time/Nielson_VCG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" preT)
###       ("_cargs" ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###         ("_position" e)))
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" e)
###         ("_Update" ("_position" s)
###           ("_updbind" ("_position" x)
###             ("_applC" ("_position" aval)
###               ("_cargs" ("_position" a) ("_position" s)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" preT)
###       ("_cargs"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_position" x)
###           ("_position" a))
###         ("_position" e)))
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" e)
###         ("_Update" ("_position" s)
###           ("_updbind" ("_position" x)
###             ("_applC" ("_position" aval)
###               ("_cargs" ("_position" a) ("_position" s)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 96 of "$AFP/Hoare_Time/Nielson_VCG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" preT)
###       ("_cargs"
###         ("\<^const>Com.com.Seq" ("_position" C\<^sub>1)
###           ("_position" C\<^sub>2))
###         ("_position" e)))
###     ("_applC" ("_position" preT)
###       ("_cargs" ("_position" C\<^sub>1)
###         ("_applC" ("_position" preT)
###           ("_cargs" ("_position" C\<^sub>2) ("_position" e)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" preT)
###       ("_cargs"
###         ("\<^const>Nielson_VCG.acom.Aseq" ("_position" C\<^sub>1)
###           ("_position" C\<^sub>2))
###         ("_position" e)))
###     ("_applC" ("_position" preT)
###       ("_cargs" ("_position" C\<^sub>1)
###         ("_applC" ("_position" preT)
###           ("_cargs" ("_position" C\<^sub>2) ("_position" e)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 98 of "$AFP/Hoare_Time/Nielson_VCG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" preT)
###       ("_cargs"
###         ("\<^const>Nielson_VCG.acom.Aif" ("_position" b)
###           ("_position" C\<^sub>1) ("_position" C\<^sub>2))
###         ("_position" e)))
###     ("_lambda" ("_position" s)
###       ("\<^const>HOL.If"
###         ("_applC" ("_position" bval)
###           ("_cargs" ("_position" b) ("_position" s)))
###         ("_applC" ("_position" preT)
###           ("_cargs" ("_position" C\<^sub>1)
###             ("_cargs" ("_position" e) ("_position" s))))
###         ("_applC" ("_position" preT)
###           ("_cargs" ("_position" C\<^sub>2)
###             ("_cargs" ("_position" e) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" preT)
###       ("_cargs"
###         ("\<^const>Com.com.If" ("_position" b) ("_position" C\<^sub>1)
###           ("_position" C\<^sub>2))
###         ("_position" e)))
###     ("_lambda" ("_position" s)
###       ("\<^const>HOL.If"
###         ("_applC" ("_position" bval)
###           ("_cargs" ("_position" b) ("_position" s)))
###         ("_applC" ("_position" preT)
###           ("_cargs" ("_position" C\<^sub>1)
###             ("_cargs" ("_position" e) ("_position" s))))
###         ("_applC" ("_position" preT)
###           ("_cargs" ("_position" C\<^sub>2)
###             ("_cargs" ("_position" e) ("_position" s))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Ambiguous input (line 107 of "$AFP/Hoare_Time/Nielson_VCG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" postQ)
###       ("_cargs" ("\<^const>Com.com.SKIP") ("_position" s)))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" postQ)
###       ("_cargs" ("\<^const>Nielson_VCG.acom.Askip") ("_position" s)))
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 108 of "$AFP/Hoare_Time/Nielson_VCG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" postQ)
###       ("_cargs" ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###         ("_position" s)))
###     ("_Update" ("_position" s)
###       ("_updbind" ("_position" x)
###         ("_applC" ("_position" aval)
###           ("_cargs" ("_position" a) ("_position" s)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" postQ)
###       ("_cargs"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_position" x)
###           ("_position" a))
###         ("_position" s)))
###     ("_Update" ("_position" s)
###       ("_updbind" ("_position" x)
###         ("_applC" ("_position" aval)
###           ("_cargs" ("_position" a) ("_position" s)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 109 of "$AFP/Hoare_Time/Nielson_VCG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" postQ)
###       ("_cargs"
###         ("\<^const>Com.com.Seq" ("_position" C\<^sub>1)
###           ("_position" C\<^sub>2))
###         ("_position" s)))
###     ("_applC" ("_position" postQ)
###       ("_cargs" ("_position" C\<^sub>2)
###         ("_applC" ("_position" postQ)
###           ("_cargs" ("_position" C\<^sub>1) ("_position" s)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" postQ)
###       ("_cargs"
###         ("\<^const>Nielson_VCG.acom.Aseq" ("_position" C\<^sub>1)
###           ("_position" C\<^sub>2))
###         ("_position" s)))
###     ("_applC" ("_position" postQ)
###       ("_cargs" ("_position" C\<^sub>2)
###         ("_applC" ("_position" postQ)
###           ("_cargs" ("_position" C\<^sub>1) ("_position" s)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 111 of "$AFP/Hoare_Time/Nielson_VCG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" postQ)
###       ("_cargs"
###         ("\<^const>Nielson_VCG.acom.Aif" ("_position" b)
###           ("_position" C\<^sub>1) ("_position" C\<^sub>2))
###         ("_position" s)))
###     ("\<^const>HOL.If"
###       ("_applC" ("_position" bval)
###         ("_cargs" ("_position" b) ("_position" s)))
###       ("_applC" ("_position" postQ)
###         ("_cargs" ("_position" C\<^sub>1) ("_position" s)))
###       ("_applC" ("_position" postQ)
###         ("_cargs" ("_position" C\<^sub>2) ("_position" s))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" postQ)
###       ("_cargs"
###         ("\<^const>Com.com.If" ("_position" b) ("_position" C\<^sub>1)
###           ("_position" C\<^sub>2))
###         ("_position" s)))
###     ("\<^const>HOL.If"
###       ("_applC" ("_position" bval)
###         ("_cargs" ("_position" b) ("_position" s)))
###       ("_applC" ("_position" postQ)
###         ("_cargs" ("_position" C\<^sub>1) ("_position" s)))
###       ("_applC" ("_position" postQ)
###         ("_cargs" ("_position" C\<^sub>2) ("_position" s))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
### Ambiguous input (line 183 of "$AFP/Hoare_Time/Nielson_VCG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" pre)
###       ("_cargs" ("\<^const>Com.com.SKIP") ("_position" Q)))
###     ("_position" Q)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" pre)
###       ("_cargs" ("\<^const>Nielson_VCG.acom.Askip") ("_position" Q)))
###     ("_position" Q)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 184 of "$AFP/Hoare_Time/Nielson_VCG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" pre)
###       ("_cargs" ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###         ("_position" Q)))
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("_applC" ("_position" Q)
###         ("_cargs" ("_position" l)
###           ("_Update" ("_position" s)
###             ("_updbind" ("_position" x)
###               ("_applC" ("_position" aval)
###                 ("_cargs" ("_position" a) ("_position" s))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" pre)
###       ("_cargs"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_position" x)
###           ("_position" a))
###         ("_position" Q)))
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("_applC" ("_position" Q)
###         ("_cargs" ("_position" l)
###           ("_Update" ("_position" s)
###             ("_updbind" ("_position" x)
###               ("_applC" ("_position" aval)
###                 ("_cargs" ("_position" a) ("_position" s))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 185 of "$AFP/Hoare_Time/Nielson_VCG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" pre)
###       ("_cargs"
###         ("\<^const>Com.com.Seq" ("_position" C\<^sub>1)
###           ("_position" C\<^sub>2))
###         ("_position" Q)))
###     ("_applC" ("_position" pre)
###       ("_cargs" ("_position" C\<^sub>1)
###         ("_applC" ("_position" pre)
###           ("_cargs" ("_position" C\<^sub>2) ("_position" Q)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" pre)
###       ("_cargs"
###         ("\<^const>Nielson_VCG.acom.Aseq" ("_position" C\<^sub>1)
###           ("_position" C\<^sub>2))
###         ("_position" Q)))
###     ("_applC" ("_position" pre)
###       ("_cargs" ("_position" C\<^sub>1)
###         ("_applC" ("_position" pre)
###           ("_cargs" ("_position" C\<^sub>2) ("_position" Q)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 187 of "$AFP/Hoare_Time/Nielson_VCG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" pre)
###       ("_cargs"
###         ("\<^const>Nielson_VCG.acom.Aif" ("_position" b)
###           ("_position" C\<^sub>1) ("_position" C\<^sub>2))
###         ("_position" Q)))
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("\<^const>HOL.If"
###         ("_applC" ("_position" bval)
###           ("_cargs" ("_position" b) ("_position" s)))
###         ("_applC" ("_position" pre)
###           ("_cargs" ("_position" C\<^sub>1)
###             ("_cargs" ("_position" Q)
###               ("_cargs" ("_position" l) ("_position" s)))))
###         ("_applC" ("_position" pre)
###           ("_cargs" ("_position" C\<^sub>2)
###             ("_cargs" ("_position" Q)
###               ("_cargs" ("_position" l) ("_position" s)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" pre)
###       ("_cargs"
###         ("\<^const>Com.com.If" ("_position" b) ("_position" C\<^sub>1)
###           ("_position" C\<^sub>2))
###         ("_position" Q)))
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("\<^const>HOL.If"
###         ("_applC" ("_position" bval)
###           ("_cargs" ("_position" b) ("_position" s)))
###         ("_applC" ("_position" pre)
###           ("_cargs" ("_position" C\<^sub>1)
###             ("_cargs" ("_position" Q)
###               ("_cargs" ("_position" l) ("_position" s)))))
###         ("_applC" ("_position" pre)
###           ("_cargs" ("_position" C\<^sub>2)
###             ("_cargs" ("_position" Q)
###               ("_cargs" ("_position" l) ("_position" s)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Ambiguous input (line 282 of "$AFP/Hoare_Time/Nielson_VCG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" time) ("\<^const>Nielson_VCG.acom.Askip"))
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" time) ("\<^const>Com.com.SKIP"))
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 283 of "$AFP/Hoare_Time/Nielson_VCG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" time)
###       ("\<^const>Nielson_VCG.acom.Aassign" ("_position" x) ("_position" a)))
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" time)
###       ("\<^const>Com.com.Assign" ("_position" x) ("_position" a)))
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 284 of "$AFP/Hoare_Time/Nielson_VCG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" time)
###       ("\<^const>Nielson_VCG.acom.Aseq" ("_position" C\<^sub>1)
###         ("_position" C\<^sub>2)))
###     ("_lambda" ("_position" s)
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" time)
###           ("_cargs" ("_position" C\<^sub>1) ("_position" s)))
###         ("_applC" ("_position" preT)
###           ("_cargs" ("_position" C\<^sub>1)
###             ("_cargs" ("_applC" ("_position" time) ("_position" C\<^sub>2))
###               ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" time)
###       ("\<^const>Com.com.Seq" ("_position" C\<^sub>1)
###         ("_position" C\<^sub>2)))
###     ("_lambda" ("_position" s)
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" time)
###           ("_cargs" ("_position" C\<^sub>1) ("_position" s)))
###         ("_applC" ("_position" preT)
###           ("_cargs" ("_position" C\<^sub>1)
###             ("_cargs" ("_applC" ("_position" time) ("_position" C\<^sub>2))
###               ("_position" s))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 286 of "$AFP/Hoare_Time/Nielson_VCG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" time)
###       ("\<^const>Com.com.If" ("_position" b) ("_position" C\<^sub>1)
###         ("_position" C\<^sub>2)))
###     ("_lambda" ("_position" s)
###       ("\<^const>HOL.If"
###         ("_applC" ("_position" bval)
###           ("_cargs" ("_position" b) ("_position" s)))
###         ("\<^const>Groups.plus_class.plus" ("\<^const>Groups.one_class.one")
###           ("_applC" ("_position" time)
###             ("_cargs" ("_position" C\<^sub>1) ("_position" s))))
###         ("\<^const>Groups.plus_class.plus" ("\<^const>Groups.one_class.one")
###           ("_applC" ("_position" time)
###             ("_cargs" ("_position" C\<^sub>2) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" time)
###       ("\<^const>Nielson_VCG.acom.Aif" ("_position" b)
###         ("_position" C\<^sub>1) ("_position" C\<^sub>2)))
###     ("_lambda" ("_position" s)
###       ("\<^const>HOL.If"
###         ("_applC" ("_position" bval)
###           ("_cargs" ("_position" b) ("_position" s)))
###         ("\<^const>Groups.plus_class.plus" ("\<^const>Groups.one_class.one")
###           ("_applC" ("_position" time)
###             ("_cargs" ("_position" C\<^sub>1) ("_position" s))))
###         ("\<^const>Groups.plus_class.plus" ("\<^const>Groups.one_class.one")
###           ("_applC" ("_position" time)
###             ("_cargs" ("_position" C\<^sub>2) ("_position" s))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 326 of "$AFP/Hoare_Time/Nielson_VCG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" vc)
###       ("_cargs" ("\<^const>Com.com.SKIP") ("_position" Q)))
###     ("_position" True)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" vc)
###       ("_cargs" ("\<^const>Nielson_VCG.acom.Askip") ("_position" Q)))
###     ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 327 of "$AFP/Hoare_Time/Nielson_VCG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" vc)
###       ("_cargs" ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###         ("_position" Q)))
###     ("_position" True)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" vc)
###       ("_cargs"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_position" x)
###           ("_position" a))
###         ("_position" Q)))
###     ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 328 of "$AFP/Hoare_Time/Nielson_VCG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" vc)
###       ("_cargs"
###         ("\<^const>Com.com.Seq" ("_position" C\<^sub>1)
###           ("_position" C\<^sub>2))
###         ("_position" Q)))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" vc)
###         ("_cargs" ("_position" C\<^sub>1)
###           ("_applC" ("_position" pre)
###             ("_cargs" ("_position" C\<^sub>2) ("_position" Q)))))
###       ("_applC" ("_position" vc)
###         ("_cargs" ("_position" C\<^sub>2) ("_position" Q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" vc)
###       ("_cargs"
###         ("\<^const>Nielson_VCG.acom.Aseq" ("_position" C\<^sub>1)
###           ("_position" C\<^sub>2))
###         ("_position" Q)))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" vc)
###         ("_cargs" ("_position" C\<^sub>1)
###           ("_applC" ("_position" pre)
###             ("_cargs" ("_position" C\<^sub>2) ("_position" Q)))))
###       ("_applC" ("_position" vc)
###         ("_cargs" ("_position" C\<^sub>2) ("_position" Q))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 329 of "$AFP/Hoare_Time/Nielson_VCG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" vc)
###       ("_cargs"
###         ("\<^const>Nielson_VCG.acom.Aif" ("_position" b)
###           ("_position" C\<^sub>1) ("_position" C\<^sub>2))
###         ("_position" Q)))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" vc)
###         ("_cargs" ("_position" C\<^sub>1) ("_position" Q)))
###       ("_applC" ("_position" vc)
###         ("_cargs" ("_position" C\<^sub>2) ("_position" Q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" vc)
###       ("_cargs"
###         ("\<^const>Com.com.If" ("_position" b) ("_position" C\<^sub>1)
###           ("_position" C\<^sub>2))
###         ("_position" Q)))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" vc)
###         ("_cargs" ("_position" C\<^sub>1) ("_position" Q)))
###       ("_applC" ("_position" vc)
###         ("_cargs" ("_position" C\<^sub>2) ("_position" Q))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
### Ambiguous input (line 447 of "$AFP/Hoare_Time/Nielson_VCG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" preList)
###       ("_cargs" ("_position" upds)
###         ("_cargs" ("\<^const>Com.com.Seq" ("_position" C1) ("_position" C2))
###           ("_cargs" ("_position" l) ("_position" s)))))
###     ("_applC" ("_position" preList)
###       ("_cargs"
###         ("_applC" ("_position" map)
###           ("_cargs"
###             ("_lambda" ("_pattern" ("_position" x) ("_position" e))
###               ("_tuple" ("_position" x)
###                 ("_tuple_arg"
###                   ("_applC" ("_position" preT)
###                     ("_cargs" ("_position" C2) ("_position" e))))))
###             ("_position" upds)))
###         ("_cargs" ("_position" C1)
###           ("_cargs" ("_position" l) ("_position" s)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" preList)
###       ("_cargs" ("_position" upds)
###         ("_cargs"
###           ("\<^const>Nielson_VCG.acom.Aseq" ("_position" C1)
###             ("_position" C2))
###           ("_cargs" ("_position" l) ("_position" s)))))
###     ("_applC" ("_position" preList)
###       ("_cargs"
###         ("_applC" ("_position" map)
###           ("_cargs"
###             ("_lambda" ("_pattern" ("_position" x) ("_position" e))
###               ("_tuple" ("_position" x)
###                 ("_tuple_arg"
###                   ("_applC" ("_position" preT)
###                     ("_cargs" ("_position" C2) ("_position" e))))))
###             ("_position" upds)))
###         ("_cargs" ("_position" C1)
###           ("_cargs" ("_position" l) ("_position" s)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
### Ambiguous input (line 571 of "$AFP/Hoare_Time/Nielson_VCG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" preList)
###       ("_cargs" ("_position" upds)
###         ("_cargs"
###           ("_applC" ("_position" Aassign)
###             ("_cargs" ("_position" x1) ("_position" x2)))
###           ("_cargs" ("_position" l) ("_position" s)))))
###     ("_applC" ("_position" postList)
###       ("_cargs" ("_position" upds)
###         ("_cargs" ("_position" l)
###           ("\<^const>Nielson_Hoare.state_subst" ("_position" s)
###             ("_position" x2) ("_position" x1)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" preList)
###       ("_cargs" ("_position" upds)
###         ("_cargs"
###           ("_applC" ("_position" Aassign)
###             ("_cargs" ("_position" x1) ("_position" x2)))
###           ("_cargs" ("_position" l) ("_position" s)))))
###     ("_applC" ("_position" postList)
###       ("_cargs" ("_position" upds)
###         ("_cargs" ("_position" l)
###           ("_applC" ("_position" s)
###             ("_list"
###               ("\<^const>Fields.inverse_class.inverse_divide"
###                 ("_position" x2) ("_position" x1)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 575 of "$AFP/Hoare_Time/Nielson_VCG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" preSet)
###       ("_cargs" ("_position" U)
###         ("_cargs"
###           ("_applC" ("_position" Aassign)
###             ("_cargs" ("_position" x1) ("_position" x2)))
###           ("_cargs" ("_position" l) ("_position" s)))))
###     ("_applC" ("_position" postSet)
###       ("_cargs" ("_position" U)
###         ("_cargs" ("_position" l)
###           ("\<^const>Nielson_Hoare.state_subst" ("_position" s)
###             ("_position" x2) ("_position" x1)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" preSet)
###       ("_cargs" ("_position" U)
###         ("_cargs"
###           ("_applC" ("_position" Aassign)
###             ("_cargs" ("_position" x1) ("_position" x2)))
###           ("_cargs" ("_position" l) ("_position" s)))))
###     ("_applC" ("_position" postSet)
###       ("_cargs" ("_position" U)
###         ("_cargs" ("_position" l)
###           ("_applC" ("_position" s)
###             ("_list"
###               ("\<^const>Fields.inverse_class.inverse_divide"
###                 ("_position" x2) ("_position" x1)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 586 of "$AFP/Hoare_Time/Nielson_VCG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" bval)
###       ("_cargs" ("_position" b) ("_position" s))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" preList)
###         ("_cargs" ("_position" upds)
###           ("_cargs"
###             ("\<^const>Nielson_VCG.acom.Aif" ("_position" b)
###               ("_position" C1) ("_position" C2))
###             ("_cargs" ("_position" l) ("_position" s)))))
###       ("_applC" ("_position" preList)
###         ("_cargs" ("_position" upds)
###           ("_cargs" ("_position" C1)
###             ("_cargs" ("_position" l) ("_position" s))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" bval)
###       ("_cargs" ("_position" b) ("_position" s))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" preList)
###         ("_cargs" ("_position" upds)
###           ("_cargs"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" C1)
###               ("_position" C2))
###             ("_cargs" ("_position" l) ("_position" s)))))
###       ("_applC" ("_position" preList)
###         ("_cargs" ("_position" upds)
###           ("_cargs" ("_position" C1)
###             ("_cargs" ("_position" l) ("_position" s))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 589 of "$AFP/Hoare_Time/Nielson_VCG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" bval)
###       ("_cargs" ("_position" b) ("_position" s))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" preSet)
###         ("_cargs" ("_position" upds)
###           ("_cargs"
###             ("\<^const>Nielson_VCG.acom.Aif" ("_position" b)
###               ("_position" C1) ("_position" C2))
###             ("_cargs" ("_position" l) ("_position" s)))))
###       ("_applC" ("_position" preSet)
###         ("_cargs" ("_position" upds)
###           ("_cargs" ("_position" C1)
###             ("_cargs" ("_position" l) ("_position" s))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" bval)
###       ("_cargs" ("_position" b) ("_position" s))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" preSet)
###         ("_cargs" ("_position" upds)
###           ("_cargs"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" C1)
###               ("_position" C2))
###             ("_cargs" ("_position" l) ("_position" s)))))
###       ("_applC" ("_position" preSet)
###         ("_cargs" ("_position" upds)
###           ("_cargs" ("_position" C1)
###             ("_cargs" ("_position" l) ("_position" s))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 591 of "$AFP/Hoare_Time/Nielson_VCG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Not"
###       ("_applC" ("_position" bval)
###         ("_cargs" ("_position" b) ("_position" s)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" preList)
###         ("_cargs" ("_position" upds)
###           ("_cargs"
###             ("\<^const>Nielson_VCG.acom.Aif" ("_position" b)
###               ("_position" C1) ("_position" C2))
###             ("_cargs" ("_position" l) ("_position" s)))))
###       ("_applC" ("_position" preList)
###         ("_cargs" ("_position" upds)
###           ("_cargs" ("_position" C2)
###             ("_cargs" ("_position" l) ("_position" s))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Not"
###       ("_applC" ("_position" bval)
###         ("_cargs" ("_position" b) ("_position" s)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" preList)
###         ("_cargs" ("_position" upds)
###           ("_cargs"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" C1)
###               ("_position" C2))
###             ("_cargs" ("_position" l) ("_position" s)))))
###       ("_applC" ("_position" preList)
###         ("_cargs" ("_position" upds)
###           ("_cargs" ("_position" C2)
###             ("_cargs" ("_position" l) ("_position" s))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 595 of "$AFP/Hoare_Time/Nielson_VCG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Not"
###       ("_applC" ("_position" bval)
###         ("_cargs" ("_position" b) ("_position" s)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" preSet)
###         ("_cargs" ("_position" upds)
###           ("_cargs"
###             ("\<^const>Nielson_VCG.acom.Aif" ("_position" b)
###               ("_position" C1) ("_position" C2))
###             ("_cargs" ("_position" l) ("_position" s)))))
###       ("_applC" ("_position" preSet)
###         ("_cargs" ("_position" upds)
###           ("_cargs" ("_position" C2)
###             ("_cargs" ("_position" l) ("_position" s))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Not"
###       ("_applC" ("_position" bval)
###         ("_cargs" ("_position" b) ("_position" s)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" preSet)
###         ("_cargs" ("_position" upds)
###           ("_cargs"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" C1)
###               ("_position" C2))
###             ("_cargs" ("_position" l) ("_position" s)))))
###       ("_applC" ("_position" preSet)
###         ("_cargs" ("_position" upds)
###           ("_cargs" ("_position" C2)
###             ("_cargs" ("_position" l) ("_position" s))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Nielson_VCG"
### 2.294s elapsed time, 3.029s cpu time, 0.913s GC time
Loading theory "Draft.Nielson_Examples" (required by "Draft.Nielson_ExamplesTemplates")
### Ambiguous input (line 9 of "$AFP/Hoare_Time/Nielson_Examples.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nielson_Hoare.hoare1"
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("_position" True))
###     ("\<^const>Nielson_VCG.acom.Aseq" ("\<^const>Com.com.SKIP")
###       ("\<^const>Com.com.SKIP"))
###     ("_lambda" ("_position" s) ("\<^const>Groups.one_class.one"))
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("_position" True))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nielson_Hoare.hoare1"
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("_position" True))
###     ("\<^const>Com.com.Seq" ("\<^const>Com.com.SKIP")
###       ("\<^const>Com.com.SKIP"))
###     ("_lambda" ("_position" s) ("\<^const>Groups.one_class.one"))
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("_position" True))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nielson_Hoare.hoare1"
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("_position" True))
###     ("\<^const>Nielson_VCG.acom.Aseq" ("\<^const>Nielson_VCG.acom.Askip")
###       ("\<^const>Com.com.SKIP"))
###     ("_lambda" ("_position" s) ("\<^const>Groups.one_class.one"))
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("_position" True))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nielson_Hoare.hoare1"
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("_position" True))
###     ("\<^const>Com.com.Seq" ("\<^const>Nielson_VCG.acom.Askip")
###       ("\<^const>Com.com.SKIP"))
###     ("_lambda" ("_position" s) ("\<^const>Groups.one_class.one"))
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("_position" True))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nielson_Hoare.hoare1"
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("_position" True))
###     ("\<^const>Nielson_VCG.acom.Aseq" ("\<^const>Com.com.SKIP")
###       ("\<^const>Nielson_VCG.acom.Askip"))
###     ("_lambda" ("_position" s) ("\<^const>Groups.one_class.one"))
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("_position" True))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nielson_Hoare.hoare1"
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("_position" True))
###     ("\<^const>Com.com.Seq" ("\<^const>Com.com.SKIP")
###       ("\<^const>Nielson_VCG.acom.Askip"))
###     ("_lambda" ("_position" s) ("\<^const>Groups.one_class.one"))
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("_position" True))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nielson_Hoare.hoare1"
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("_position" True))
###     ("\<^const>Nielson_VCG.acom.Aseq" ("\<^const>Nielson_VCG.acom.Askip")
###       ("\<^const>Nielson_VCG.acom.Askip"))
###     ("_lambda" ("_position" s) ("\<^const>Groups.one_class.one"))
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("_position" True))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nielson_Hoare.hoare1"
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("_position" True))
###     ("\<^const>Com.com.Seq" ("\<^const>Nielson_VCG.acom.Askip")
###       ("\<^const>Nielson_VCG.acom.Askip"))
###     ("_lambda" ("_position" s) ("\<^const>Groups.one_class.one"))
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("_position" True))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 34 of "$AFP/Hoare_Time/Nielson_Examples.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nielson_Hoare.hoare1"
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("_position" True))
###     ("_applC" ("_position" strip)
###       ("\<^const>Com.com.Seq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_position" a)
###           ("_applC" ("_position" N) ("\<^const>Groups.one_class.one")))
###         ("_position" Askip)))
###     ("_applC" ("_position" time)
###       ("\<^const>Com.com.Seq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_position" a)
###           ("_applC" ("_position" N) ("\<^const>Groups.one_class.one")))
###         ("_position" Askip)))
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("\<^const>HOL.eq" ("_applC" ("_position" s) ("_position" a))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nielson_Hoare.hoare1"
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("_position" True))
###     ("_applC" ("_position" strip)
###       ("\<^const>Nielson_VCG.acom.Aseq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_position" a)
###           ("_applC" ("_position" N) ("\<^const>Groups.one_class.one")))
###         ("_position" Askip)))
###     ("_applC" ("_position" time)
###       ("\<^const>Com.com.Seq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_position" a)
###           ("_applC" ("_position" N) ("\<^const>Groups.one_class.one")))
###         ("_position" Askip)))
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("\<^const>HOL.eq" ("_applC" ("_position" s) ("_position" a))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nielson_Hoare.hoare1"
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("_position" True))
###     ("_applC" ("_position" strip)
###       ("\<^const>Com.com.Seq"
###         ("\<^const>Com.com.Assign" ("_position" a)
###           ("_applC" ("_position" N) ("\<^const>Groups.one_class.one")))
###         ("_position" Askip)))
###     ("_applC" ("_position" time)
###       ("\<^const>Com.com.Seq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_position" a)
###           ("_applC" ("_position" N) ("\<^const>Groups.one_class.one")))
###         ("_position" Askip)))
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("\<^const>HOL.eq" ("_applC" ("_position" s) ("_position" a))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nielson_Hoare.hoare1"
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("_position" True))
###     ("_applC" ("_position" strip)
###       ("\<^const>Nielson_VCG.acom.Aseq"
###         ("\<^const>Com.com.Assign" ("_position" a)
###           ("_applC" ("_position" N) ("\<^const>Groups.one_class.one")))
###         ("_position" Askip)))
###     ("_applC" ("_position" time)
###       ("\<^const>Com.com.Seq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_position" a)
###           ("_applC" ("_position" N) ("\<^const>Groups.one_class.one")))
###         ("_position" Askip)))
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("\<^const>HOL.eq" ("_applC" ("_position" s) ("_position" a))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nielson_Hoare.hoare1"
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("_position" True))
###     ("_applC" ("_position" strip)
###       ("\<^const>Com.com.Seq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_position" a)
###           ("_applC" ("_position" N) ("\<^const>Groups.one_class.one")))
###         ("_position" Askip)))
###     ("_applC" ("_position" time)
###       ("\<^const>Nielson_VCG.acom.Aseq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_position" a)
###           ("_applC" ("_position" N) ("\<^const>Groups.one_class.one")))
###         ("_position" Askip)))
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("\<^const>HOL.eq" ("_applC" ("_position" s) ("_position" a))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nielson_Hoare.hoare1"
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("_position" True))
###     ("_applC" ("_position" strip)
###       ("\<^const>Nielson_VCG.acom.Aseq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_position" a)
###           ("_applC" ("_position" N) ("\<^const>Groups.one_class.one")))
###         ("_position" Askip)))
###     ("_applC" ("_position" time)
###       ("\<^const>Nielson_VCG.acom.Aseq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_position" a)
###           ("_applC" ("_position" N) ("\<^const>Groups.one_class.one")))
###         ("_position" Askip)))
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("\<^const>HOL.eq" ("_applC" ("_position" s) ("_position" a))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nielson_Hoare.hoare1"
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("_position" True))
###     ("_applC" ("_position" strip)
###       ("\<^const>Com.com.Seq"
###         ("\<^const>Com.com.Assign" ("_position" a)
###           ("_applC" ("_position" N) ("\<^const>Groups.one_class.one")))
###         ("_position" Askip)))
###     ("_applC" ("_position" time)
###       ("\<^const>Nielson_VCG.acom.Aseq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_position" a)
###           ("_applC" ("_position" N) ("\<^const>Groups.one_class.one")))
###         ("_position" Askip)))
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("\<^const>HOL.eq" ("_applC" ("_position" s) ("_position" a))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nielson_Hoare.hoare1"
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("_position" True))
###     ("_applC" ("_position" strip)
###       ("\<^const>Nielson_VCG.acom.Aseq"
###         ("\<^const>Com.com.Assign" ("_position" a)
###           ("_applC" ("_position" N) ("\<^const>Groups.one_class.one")))
###         ("_position" Askip)))
###     ("_applC" ("_position" time)
###       ("\<^const>Nielson_VCG.acom.Aseq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_position" a)
###           ("_applC" ("_position" N) ("\<^const>Groups.one_class.one")))
###         ("_position" Askip)))
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("\<^const>HOL.eq" ("_applC" ("_position" s) ("_position" a))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nielson_Hoare.hoare1"
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("_position" True))
###     ("_applC" ("_position" strip)
###       ("\<^const>Com.com.Seq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_position" a)
###           ("_applC" ("_position" N) ("\<^const>Groups.one_class.one")))
###         ("_position" Askip)))
###     ("_applC" ("_position" time)
###       ("\<^const>Com.com.Seq"
###         ("\<^const>Com.com.Assign" ("_position" a)
###           ("_applC" ("_position" N) ("\<^const>Groups.one_class.one")))
###         ("_position" Askip)))
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("\<^const>HOL.eq" ("_applC" ("_position" s) ("_position" a))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nielson_Hoare.hoare1"
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("_position" True))
###     ("_applC" ("_position" strip)
###       ("\<^const>Nielson_VCG.acom.Aseq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_position" a)
###           ("_applC" ("_position" N) ("\<^const>Groups.one_class.one")))
###         ("_position" Askip)))
###     ("_applC" ("_position" time)
###       ("\<^const>Com.com.Seq"
###         ("\<^const>Com.com.Assign" ("_position" a)
###           ("_applC" ("_position" N) ("\<^const>Groups.one_class.one")))
###         ("_position" Askip)))
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("\<^const>HOL.eq" ("_applC" ("_position" s) ("_position" a))
###         ("\<^const>Groups.one_class.one")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 38 of "$AFP/Hoare_Time/Nielson_Examples.thy") produces 64 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nielson_Hoare.hoare1"
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("_position" True))
###     ("_applC" ("_position" strip)
###       ("\<^const>Com.com.Seq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_position" a)
###           ("_applC" ("_position" N) ("\<^const>Groups.one_class.one")))
###         ("\<^const>Com.com.Assign" ("_position" b)
###           ("_applC" ("_position" V) ("_position" a)))))
###     ("_applC" ("_position" time)
###       ("\<^const>Com.com.Seq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_position" a)
###           ("_applC" ("_position" N) ("\<^const>Groups.one_class.one")))
###         ("\<^const>Com.com.Assign" ("_position" b)
###           ("_applC" ("_position" V) ("_position" a)))))
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("\<^const>HOL.eq" ("_applC" ("_position" s) ("_position" b))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nielson_Hoare.hoare1"
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("_position" True))
###     ("_applC" ("_position" strip)
###       ("\<^const>Nielson_VCG.acom.Aseq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_position" a)
###           ("_applC" ("_position" N) ("\<^const>Groups.one_class.one")))
###         ("\<^const>Com.com.Assign" ("_position" b)
###           ("_applC" ("_position" V) ("_position" a)))))
###     ("_applC" ("_position" time)
###       ("\<^const>Com.com.Seq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_position" a)
###           ("_applC" ("_position" N) ("\<^const>Groups.one_class.one")))
###         ("\<^const>Com.com.Assign" ("_position" b)
###           ("_applC" ("_position" V) ("_position" a)))))
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("\<^const>HOL.eq" ("_applC" ("_position" s) ("_position" b))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nielson_Hoare.hoare1"
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("_position" True))
###     ("_applC" ("_position" strip)
###       ("\<^const>Com.com.Seq"
###         ("\<^const>Com.com.Assign" ("_position" a)
###           ("_applC" ("_position" N) ("\<^const>Groups.one_class.one")))
###         ("\<^const>Com.com.Assign" ("_position" b)
###           ("_applC" ("_position" V) ("_position" a)))))
###     ("_applC" ("_position" time)
###       ("\<^const>Com.com.Seq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_position" a)
###           ("_applC" ("_position" N) ("\<^const>Groups.one_class.one")))
###         ("\<^const>Com.com.Assign" ("_position" b)
###           ("_applC" ("_position" V) ("_position" a)))))
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("\<^const>HOL.eq" ("_applC" ("_position" s) ("_position" b))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nielson_Hoare.hoare1"
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("_position" True))
###     ("_applC" ("_position" strip)
###       ("\<^const>Nielson_VCG.acom.Aseq"
###         ("\<^const>Com.com.Assign" ("_position" a)
###           ("_applC" ("_position" N) ("\<^const>Groups.one_class.one")))
###         ("\<^const>Com.com.Assign" ("_position" b)
###           ("_applC" ("_position" V) ("_position" a)))))
###     ("_applC" ("_position" time)
###       ("\<^const>Com.com.Seq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_position" a)
###           ("_applC" ("_position" N) ("\<^const>Groups.one_class.one")))
###         ("\<^const>Com.com.Assign" ("_position" b)
###           ("_applC" ("_position" V) ("_position" a)))))
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("\<^const>HOL.eq" ("_applC" ("_position" s) ("_position" b))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nielson_Hoare.hoare1"
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("_position" True))
###     ("_applC" ("_position" strip)
###       ("\<^const>Com.com.Seq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_position" a)
###           ("_applC" ("_position" N) ("\<^const>Groups.one_class.one")))
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_position" b)
###           ("_applC" ("_position" V) ("_position" a)))))
###     ("_applC" ("_position" time)
###       ("\<^const>Com.com.Seq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_position" a)
###           ("_applC" ("_position" N) ("\<^const>Groups.one_class.one")))
###         ("\<^const>Com.com.Assign" ("_position" b)
###           ("_applC" ("_position" V) ("_position" a)))))
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("\<^const>HOL.eq" ("_applC" ("_position" s) ("_position" b))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nielson_Hoare.hoare1"
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("_position" True))
###     ("_applC" ("_position" strip)
###       ("\<^const>Nielson_VCG.acom.Aseq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_position" a)
###           ("_applC" ("_position" N) ("\<^const>Groups.one_class.one")))
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_position" b)
###           ("_applC" ("_position" V) ("_position" a)))))
###     ("_applC" ("_position" time)
###       ("\<^const>Com.com.Seq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_position" a)
###           ("_applC" ("_position" N) ("\<^const>Groups.one_class.one")))
###         ("\<^const>Com.com.Assign" ("_position" b)
###           ("_applC" ("_position" V) ("_position" a)))))
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("\<^const>HOL.eq" ("_applC" ("_position" s) ("_position" b))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nielson_Hoare.hoare1"
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("_position" True))
###     ("_applC" ("_position" strip)
###       ("\<^const>Com.com.Seq"
###         ("\<^const>Com.com.Assign" ("_position" a)
###           ("_applC" ("_position" N) ("\<^const>Groups.one_class.one")))
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_position" b)
###           ("_applC" ("_position" V) ("_position" a)))))
###     ("_applC" ("_position" time)
###       ("\<^const>Com.com.Seq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_position" a)
###           ("_applC" ("_position" N) ("\<^const>Groups.one_class.one")))
###         ("\<^const>Com.com.Assign" ("_position" b)
###           ("_applC" ("_position" V) ("_position" a)))))
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("\<^const>HOL.eq" ("_applC" ("_position" s) ("_position" b))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nielson_Hoare.hoare1"
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("_position" True))
###     ("_applC" ("_position" strip)
###       ("\<^const>Nielson_VCG.acom.Aseq"
###         ("\<^const>Com.com.Assign" ("_position" a)
###           ("_applC" ("_position" N) ("\<^const>Groups.one_class.one")))
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_position" b)
###           ("_applC" ("_position" V) ("_position" a)))))
###     ("_applC" ("_position" time)
###       ("\<^const>Com.com.Seq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_position" a)
###           ("_applC" ("_position" N) ("\<^const>Groups.one_class.one")))
###         ("\<^const>Com.com.Assign" ("_position" b)
###           ("_applC" ("_position" V) ("_position" a)))))
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("\<^const>HOL.eq" ("_applC" ("_position" s) ("_position" b))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nielson_Hoare.hoare1"
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("_position" True))
###     ("_applC" ("_position" strip)
###       ("\<^const>Com.com.Seq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_position" a)
###           ("_applC" ("_position" N) ("\<^const>Groups.one_class.one")))
###         ("\<^const>Com.com.Assign" ("_position" b)
###           ("_applC" ("_position" V) ("_position" a)))))
###     ("_applC" ("_position" time)
###       ("\<^const>Nielson_VCG.acom.Aseq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_position" a)
###           ("_applC" ("_position" N) ("\<^const>Groups.one_class.one")))
###         ("\<^const>Com.com.Assign" ("_position" b)
###           ("_applC" ("_position" V) ("_position" a)))))
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("\<^const>HOL.eq" ("_applC" ("_position" s) ("_position" b))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nielson_Hoare.hoare1"
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("_position" True))
###     ("_applC" ("_position" strip)
###       ("\<^const>Nielson_VCG.acom.Aseq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_position" a)
###           ("_applC" ("_position" N) ("\<^const>Groups.one_class.one")))
###         ("\<^const>Com.com.Assign" ("_position" b)
###           ("_applC" ("_position" V) ("_position" a)))))
###     ("_applC" ("_position" time)
###       ("\<^const>Nielson_VCG.acom.Aseq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_position" a)
###           ("_applC" ("_position" N) ("\<^const>Groups.one_class.one")))
###         ("\<^const>Com.com.Assign" ("_position" b)
###           ("_applC" ("_position" V) ("_position" a)))))
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("\<^const>HOL.eq" ("_applC" ("_position" s) ("_position" b))
###         ("\<^const>Groups.one_class.one")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 44 of "$AFP/Hoare_Time/Nielson_Examples.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" C)
###     ("\<^const>Nielson_VCG.acom.Awhile"
###       ("_tuple" ("_position" I)
###         ("_tuple_arg"
###           ("_tuple" ("_position" S) ("_tuple_arg" ("_position" E)))))
###       ("_applC" ("_position" Less)
###         ("_cargs" ("_applC" ("_position" V) ("_position" a))
###           ("_applC" ("_position" N)
###             ("_Numeral" ("_constify" ("_position" 3))))))
###       ("\<^const>Nielson_VCG.acom.Aassign" ("_position" a)
###         ("_applC" ("_position" Plus)
###           ("_cargs" ("_applC" ("_position" V) ("_position" a))
###             ("_applC" ("_position" N)
###               ("\<^const>Groups.one_class.one"))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" C)
###     ("\<^const>Nielson_VCG.acom.Awhile"
###       ("_tuple" ("_position" I)
###         ("_tuple_arg"
###           ("_tuple" ("_position" S) ("_tuple_arg" ("_position" E)))))
###       ("_applC" ("_position" Less)
###         ("_cargs" ("_applC" ("_position" V) ("_position" a))
###           ("_applC" ("_position" N)
###             ("_Numeral" ("_constify" ("_position" 3))))))
###       ("\<^const>Com.com.Assign" ("_position" a)
###         ("_applC" ("_position" Plus)
###           ("_cargs" ("_applC" ("_position" V) ("_position" a))
###             ("_applC" ("_position" N)
###               ("\<^const>Groups.one_class.one"))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 54 of "$AFP/Hoare_Time/Nielson_Examples.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" C)
###     ("\<^const>Nielson_VCG.acom.Awhile"
###       ("_tuple" ("_position" I)
###         ("_tuple_arg"
###           ("_tuple" ("_position" S) ("_tuple_arg" ("_position" E)))))
###       ("_applC" ("_position" Less)
###         ("_cargs" ("_applC" ("_position" V) ("_position" a))
###           ("_applC" ("_position" N)
###             ("_Numeral" ("_constify" ("_position" 3))))))
###       ("\<^const>Nielson_VCG.acom.Aassign" ("_position" a)
###         ("_applC" ("_position" Plus)
###           ("_cargs" ("_applC" ("_position" V) ("_position" a))
###             ("_applC" ("_position" N)
###               ("\<^const>Groups.one_class.one"))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" C)
###     ("\<^const>Nielson_VCG.acom.Awhile"
###       ("_tuple" ("_position" I)
###         ("_tuple_arg"
###           ("_tuple" ("_position" S) ("_tuple_arg" ("_position" E)))))
###       ("_applC" ("_position" Less)
###         ("_cargs" ("_applC" ("_position" V) ("_position" a))
###           ("_applC" ("_position" N)
###             ("_Numeral" ("_constify" ("_position" 3))))))
###       ("\<^const>Com.com.Assign" ("_position" a)
###         ("_applC" ("_position" Plus)
###           ("_cargs" ("_applC" ("_position" V) ("_position" a))
###             ("_applC" ("_position" N)
###               ("\<^const>Groups.one_class.one"))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 81 of "$AFP/Hoare_Time/Nielson_Examples.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" C)
###     ("\<^const>Nielson_VCG.acom.Awhile"
###       ("_tuple" ("_position" I)
###         ("_tuple_arg"
###           ("_tuple" ("_position" S) ("_tuple_arg" ("_position" E)))))
###       ("_applC" ("_position" Less)
###         ("_cargs" ("_applC" ("_position" V) ("_position" a))
###           ("_applC" ("_position" N) ("_position" b))))
###       ("\<^const>Nielson_VCG.acom.Aassign" ("_position" a)
###         ("_applC" ("_position" Plus)
###           ("_cargs" ("_applC" ("_position" V) ("_position" a))
###             ("_applC" ("_position" N)
###               ("\<^const>Groups.one_class.one"))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" C)
###     ("\<^const>Nielson_VCG.acom.Awhile"
###       ("_tuple" ("_position" I)
###         ("_tuple_arg"
###           ("_tuple" ("_position" S) ("_tuple_arg" ("_position" E)))))
###       ("_applC" ("_position" Less)
###         ("_cargs" ("_applC" ("_position" V) ("_position" a))
###           ("_applC" ("_position" N) ("_position" b))))
###       ("\<^const>Com.com.Assign" ("_position" a)
###         ("_applC" ("_position" Plus)
###           ("_cargs" ("_applC" ("_position" V) ("_position" a))
###             ("_applC" ("_position" N)
###               ("\<^const>Groups.one_class.one"))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 94 of "$AFP/Hoare_Time/Nielson_Examples.thy") produces 128 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" C)
###     ("\<^const>Nielson_VCG.acom.Aseq"
###       ("\<^const>Nielson_VCG.acom.Aseq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''z''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))))
###       ("\<^const>Nielson_VCG.acom.Awhile"
###         ("_tuple" ("_position" I)
###           ("_tuple_arg"
###             ("_tuple" ("_position" S) ("_tuple_arg" ("_position" E)))))
###         ("_applC" ("_position" Less)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''a'')))))
###         ("\<^const>Com.com.Seq"
###           ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###             ("_applC" ("_position" Plus)
###               ("_cargs"
###                 ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###                 ("_applC" ("_position" V)
###                   ("_String" ("_position" ''b''))))))
###           ("\<^const>Com.com.Assign" ("_String" ("_position" ''z''))
###             ("_applC" ("_position" Plus)
###               ("_cargs"
###                 ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###                 ("_applC" ("_position" N)
###                   ("\<^const>Groups.one_class.one"))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" C)
###     ("\<^const>Com.com.Seq"
###       ("\<^const>Nielson_VCG.acom.Aseq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''z''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))))
###       ("\<^const>Nielson_VCG.acom.Awhile"
###         ("_tuple" ("_position" I)
###           ("_tuple_arg"
###             ("_tuple" ("_position" S) ("_tuple_arg" ("_position" E)))))
###         ("_applC" ("_position" Less)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''a'')))))
###         ("\<^const>Com.com.Seq"
###           ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###             ("_applC" ("_position" Plus)
###               ("_cargs"
###                 ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###                 ("_applC" ("_position" V)
###                   ("_String" ("_position" ''b''))))))
###           ("\<^const>Com.com.Assign" ("_String" ("_position" ''z''))
###             ("_applC" ("_position" Plus)
###               ("_cargs"
###                 ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###                 ("_applC" ("_position" N)
###                   ("\<^const>Groups.one_class.one"))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" C)
###     ("\<^const>Nielson_VCG.acom.Aseq"
###       ("\<^const>Com.com.Seq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''z''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))))
###       ("\<^const>Nielson_VCG.acom.Awhile"
###         ("_tuple" ("_position" I)
###           ("_tuple_arg"
###             ("_tuple" ("_position" S) ("_tuple_arg" ("_position" E)))))
###         ("_applC" ("_position" Less)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''a'')))))
###         ("\<^const>Com.com.Seq"
###           ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###             ("_applC" ("_position" Plus)
###               ("_cargs"
###                 ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###                 ("_applC" ("_position" V)
###                   ("_String" ("_position" ''b''))))))
###           ("\<^const>Com.com.Assign" ("_String" ("_position" ''z''))
###             ("_applC" ("_position" Plus)
###               ("_cargs"
###                 ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###                 ("_applC" ("_position" N)
###                   ("\<^const>Groups.one_class.one"))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" C)
###     ("\<^const>Com.com.Seq"
###       ("\<^const>Com.com.Seq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''z''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))))
###       ("\<^const>Nielson_VCG.acom.Awhile"
###         ("_tuple" ("_position" I)
###           ("_tuple_arg"
###             ("_tuple" ("_position" S) ("_tuple_arg" ("_position" E)))))
###         ("_applC" ("_position" Less)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''a'')))))
###         ("\<^const>Com.com.Seq"
###           ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###             ("_applC" ("_position" Plus)
###               ("_cargs"
###                 ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###                 ("_applC" ("_position" V)
###                   ("_String" ("_position" ''b''))))))
###           ("\<^const>Com.com.Assign" ("_String" ("_position" ''z''))
###             ("_applC" ("_position" Plus)
###               ("_cargs"
###                 ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###                 ("_applC" ("_position" N)
###                   ("\<^const>Groups.one_class.one"))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" C)
###     ("\<^const>Nielson_VCG.acom.Aseq"
###       ("\<^const>Nielson_VCG.acom.Aseq"
###         ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''z''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))))
###       ("\<^const>Nielson_VCG.acom.Awhile"
###         ("_tuple" ("_position" I)
###           ("_tuple_arg"
###             ("_tuple" ("_position" S) ("_tuple_arg" ("_position" E)))))
###         ("_applC" ("_position" Less)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''a'')))))
###         ("\<^const>Com.com.Seq"
###           ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###             ("_applC" ("_position" Plus)
###               ("_cargs"
###                 ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###                 ("_applC" ("_position" V)
###                   ("_String" ("_position" ''b''))))))
###           ("\<^const>Com.com.Assign" ("_String" ("_position" ''z''))
###             ("_applC" ("_position" Plus)
###               ("_cargs"
###                 ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###                 ("_applC" ("_position" N)
###                   ("\<^const>Groups.one_class.one"))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" C)
###     ("\<^const>Com.com.Seq"
###       ("\<^const>Nielson_VCG.acom.Aseq"
###         ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''z''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))))
###       ("\<^const>Nielson_VCG.acom.Awhile"
###         ("_tuple" ("_position" I)
###           ("_tuple_arg"
###             ("_tuple" ("_position" S) ("_tuple_arg" ("_position" E)))))
###         ("_applC" ("_position" Less)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''a'')))))
###         ("\<^const>Com.com.Seq"
###           ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###             ("_applC" ("_position" Plus)
###               ("_cargs"
###                 ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###                 ("_applC" ("_position" V)
###                   ("_String" ("_position" ''b''))))))
###           ("\<^const>Com.com.Assign" ("_String" ("_position" ''z''))
###             ("_applC" ("_position" Plus)
###               ("_cargs"
###                 ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###                 ("_applC" ("_position" N)
###                   ("\<^const>Groups.one_class.one"))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" C)
###     ("\<^const>Nielson_VCG.acom.Aseq"
###       ("\<^const>Com.com.Seq"
###         ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''z''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))))
###       ("\<^const>Nielson_VCG.acom.Awhile"
###         ("_tuple" ("_position" I)
###           ("_tuple_arg"
###             ("_tuple" ("_position" S) ("_tuple_arg" ("_position" E)))))
###         ("_applC" ("_position" Less)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''a'')))))
###         ("\<^const>Com.com.Seq"
###           ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###             ("_applC" ("_position" Plus)
###               ("_cargs"
###                 ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###                 ("_applC" ("_position" V)
###                   ("_String" ("_position" ''b''))))))
###           ("\<^const>Com.com.Assign" ("_String" ("_position" ''z''))
###             ("_applC" ("_position" Plus)
###               ("_cargs"
###                 ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###                 ("_applC" ("_position" N)
###                   ("\<^const>Groups.one_class.one"))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" C)
###     ("\<^const>Com.com.Seq"
###       ("\<^const>Com.com.Seq"
###         ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''z''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))))
###       ("\<^const>Nielson_VCG.acom.Awhile"
###         ("_tuple" ("_position" I)
###           ("_tuple_arg"
###             ("_tuple" ("_position" S) ("_tuple_arg" ("_position" E)))))
###         ("_applC" ("_position" Less)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''a'')))))
###         ("\<^const>Com.com.Seq"
###           ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###             ("_applC" ("_position" Plus)
###               ("_cargs"
###                 ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###                 ("_applC" ("_position" V)
###                   ("_String" ("_position" ''b''))))))
###           ("\<^const>Com.com.Assign" ("_String" ("_position" ''z''))
###             ("_applC" ("_position" Plus)
###               ("_cargs"
###                 ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###                 ("_applC" ("_position" N)
###                   ("\<^const>Groups.one_class.one"))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" C)
###     ("\<^const>Nielson_VCG.acom.Aseq"
###       ("\<^const>Nielson_VCG.acom.Aseq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###         ("\<^const>Com.com.Assign" ("_String" ("_position" ''z''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))))
###       ("\<^const>Nielson_VCG.acom.Awhile"
###         ("_tuple" ("_position" I)
###           ("_tuple_arg"
###             ("_tuple" ("_position" S) ("_tuple_arg" ("_position" E)))))
###         ("_applC" ("_position" Less)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''a'')))))
###         ("\<^const>Com.com.Seq"
###           ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###             ("_applC" ("_position" Plus)
###               ("_cargs"
###                 ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###                 ("_applC" ("_position" V)
###                   ("_String" ("_position" ''b''))))))
###           ("\<^const>Com.com.Assign" ("_String" ("_position" ''z''))
###             ("_applC" ("_position" Plus)
###               ("_cargs"
###                 ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###                 ("_applC" ("_position" N)
###                   ("\<^const>Groups.one_class.one"))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" C)
###     ("\<^const>Com.com.Seq"
###       ("\<^const>Nielson_VCG.acom.Aseq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###         ("\<^const>Com.com.Assign" ("_String" ("_position" ''z''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))))
###       ("\<^const>Nielson_VCG.acom.Awhile"
###         ("_tuple" ("_position" I)
###           ("_tuple_arg"
###             ("_tuple" ("_position" S) ("_tuple_arg" ("_position" E)))))
###         ("_applC" ("_position" Less)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''a'')))))
###         ("\<^const>Com.com.Seq"
###           ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###             ("_applC" ("_position" Plus)
###               ("_cargs"
###                 ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###                 ("_applC" ("_position" V)
###                   ("_String" ("_position" ''b''))))))
###           ("\<^const>Com.com.Assign" ("_String" ("_position" ''z''))
###             ("_applC" ("_position" Plus)
###               ("_cargs"
###                 ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###                 ("_applC" ("_position" N)
###                   ("\<^const>Groups.one_class.one"))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 110 of "$AFP/Hoare_Time/Nielson_Examples.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_constrain" ("_position" lb) ("_type_name" acom))
###     ("\<^const>Nielson_VCG.acom.Aconseq"
###       ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" I)
###             ("_cargs" ("_position" l) ("_position" s)))
###           ("\<^const>Orderings.ord_class.less"
###             ("_applC" ("_position" s) ("_String" ("_position" ''z'')))
###             ("_applC" ("_position" s) ("_String" ("_position" ''a''))))))
###       ("_position" I) ("_position" e)
###       ("\<^const>Com.com.Seq"
###         ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###           ("_applC" ("_position" Plus)
###             ("_cargs"
###               ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###               ("_applC" ("_position" V) ("_String" ("_position" ''b''))))))
###         ("\<^const>Com.com.Assign" ("_String" ("_position" ''z''))
###           ("_applC" ("_position" Plus)
###             ("_cargs"
###               ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###               ("_applC" ("_position" N)
###                 ("\<^const>Groups.one_class.one")))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_constrain" ("_position" lb) ("_type_name" acom))
###     ("\<^const>Nielson_VCG.acom.Aconseq"
###       ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" I)
###             ("_cargs" ("_position" l) ("_position" s)))
###           ("\<^const>Orderings.ord_class.less"
###             ("_applC" ("_position" s) ("_String" ("_position" ''z'')))
###             ("_applC" ("_position" s) ("_String" ("_position" ''a''))))))
###       ("_position" I) ("_position" e)
###       ("\<^const>Nielson_VCG.acom.Aseq"
###         ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###           ("_applC" ("_position" Plus)
###             ("_cargs"
###               ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###               ("_applC" ("_position" V) ("_String" ("_position" ''b''))))))
###         ("\<^const>Com.com.Assign" ("_String" ("_position" ''z''))
###           ("_applC" ("_position" Plus)
###             ("_cargs"
###               ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###               ("_applC" ("_position" N)
###                 ("\<^const>Groups.one_class.one")))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_constrain" ("_position" lb) ("_type_name" acom))
###     ("\<^const>Nielson_VCG.acom.Aconseq"
###       ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" I)
###             ("_cargs" ("_position" l) ("_position" s)))
###           ("\<^const>Orderings.ord_class.less"
###             ("_applC" ("_position" s) ("_String" ("_position" ''z'')))
###             ("_applC" ("_position" s) ("_String" ("_position" ''a''))))))
###       ("_position" I) ("_position" e)
###       ("\<^const>Com.com.Seq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###           ("_applC" ("_position" Plus)
###             ("_cargs"
###               ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###               ("_applC" ("_position" V) ("_String" ("_position" ''b''))))))
###         ("\<^const>Com.com.Assign" ("_String" ("_position" ''z''))
###           ("_applC" ("_position" Plus)
###             ("_cargs"
###               ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###               ("_applC" ("_position" N)
###                 ("\<^const>Groups.one_class.one")))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_constrain" ("_position" lb) ("_type_name" acom))
###     ("\<^const>Nielson_VCG.acom.Aconseq"
###       ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" I)
###             ("_cargs" ("_position" l) ("_position" s)))
###           ("\<^const>Orderings.ord_class.less"
###             ("_applC" ("_position" s) ("_String" ("_position" ''z'')))
###             ("_applC" ("_position" s) ("_String" ("_position" ''a''))))))
###       ("_position" I) ("_position" e)
###       ("\<^const>Nielson_VCG.acom.Aseq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###           ("_applC" ("_position" Plus)
###             ("_cargs"
###               ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###               ("_applC" ("_position" V) ("_String" ("_position" ''b''))))))
###         ("\<^const>Com.com.Assign" ("_String" ("_position" ''z''))
###           ("_applC" ("_position" Plus)
###             ("_cargs"
###               ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###               ("_applC" ("_position" N)
###                 ("\<^const>Groups.one_class.one")))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_constrain" ("_position" lb) ("_type_name" acom))
###     ("\<^const>Nielson_VCG.acom.Aconseq"
###       ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" I)
###             ("_cargs" ("_position" l) ("_position" s)))
###           ("\<^const>Orderings.ord_class.less"
###             ("_applC" ("_position" s) ("_String" ("_position" ''z'')))
###             ("_applC" ("_position" s) ("_String" ("_position" ''a''))))))
###       ("_position" I) ("_position" e)
###       ("\<^const>Com.com.Seq"
###         ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###           ("_applC" ("_position" Plus)
###             ("_cargs"
###               ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###               ("_applC" ("_position" V) ("_String" ("_position" ''b''))))))
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''z''))
###           ("_applC" ("_position" Plus)
###             ("_cargs"
###               ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###               ("_applC" ("_position" N)
###                 ("\<^const>Groups.one_class.one")))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_constrain" ("_position" lb) ("_type_name" acom))
###     ("\<^const>Nielson_VCG.acom.Aconseq"
###       ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" I)
###             ("_cargs" ("_position" l) ("_position" s)))
###           ("\<^const>Orderings.ord_class.less"
###             ("_applC" ("_position" s) ("_String" ("_position" ''z'')))
###             ("_applC" ("_position" s) ("_String" ("_position" ''a''))))))
###       ("_position" I) ("_position" e)
###       ("\<^const>Nielson_VCG.acom.Aseq"
###         ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###           ("_applC" ("_position" Plus)
###             ("_cargs"
###               ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###               ("_applC" ("_position" V) ("_String" ("_position" ''b''))))))
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''z''))
###           ("_applC" ("_position" Plus)
###             ("_cargs"
###               ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###               ("_applC" ("_position" N)
###                 ("\<^const>Groups.one_class.one")))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_constrain" ("_position" lb) ("_type_name" acom))
###     ("\<^const>Nielson_VCG.acom.Aconseq"
###       ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" I)
###             ("_cargs" ("_position" l) ("_position" s)))
###           ("\<^const>Orderings.ord_class.less"
###             ("_applC" ("_position" s) ("_String" ("_position" ''z'')))
###             ("_applC" ("_position" s) ("_String" ("_position" ''a''))))))
###       ("_position" I) ("_position" e)
###       ("\<^const>Com.com.Seq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###           ("_applC" ("_position" Plus)
###             ("_cargs"
###               ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###               ("_applC" ("_position" V) ("_String" ("_position" ''b''))))))
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''z''))
###           ("_applC" ("_position" Plus)
###             ("_cargs"
###               ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###               ("_applC" ("_position" N)
###                 ("\<^const>Groups.one_class.one")))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_constrain" ("_position" lb) ("_type_name" acom))
###     ("\<^const>Nielson_VCG.acom.Aconseq"
###       ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" I)
###             ("_cargs" ("_position" l) ("_position" s)))
###           ("\<^const>Orderings.ord_class.less"
###             ("_applC" ("_position" s) ("_String" ("_position" ''z'')))
###             ("_applC" ("_position" s) ("_String" ("_position" ''a''))))))
###       ("_position" I) ("_position" e)
###       ("\<^const>Nielson_VCG.acom.Aseq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###           ("_applC" ("_position" Plus)
###             ("_cargs"
###               ("_applC" ("_position" V) ("_String" ("_position" ''y'')))
###               ("_applC" ("_position" V) ("_String" ("_position" ''b''))))))
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''z''))
###           ("_applC" ("_position" Plus)
###             ("_cargs"
###               ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###               ("_applC" ("_position" N)
###                 ("\<^const>Groups.one_class.one")))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 114 of "$AFP/Hoare_Time/Nielson_Examples.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_constrain" ("_position" C) ("_type_name" acom))
###     ("\<^const>Nielson_VCG.acom.Aseq"
###       ("\<^const>Nielson_VCG.acom.Aseq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''z''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))))
###       ("_position" wl))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_constrain" ("_position" C) ("_type_name" acom))
###     ("\<^const>Com.com.Seq"
###       ("\<^const>Nielson_VCG.acom.Aseq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''z''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))))
###       ("_position" wl))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_constrain" ("_position" C) ("_type_name" acom))
###     ("\<^const>Nielson_VCG.acom.Aseq"
###       ("\<^const>Com.com.Seq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''z''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))))
###       ("_position" wl))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_constrain" ("_position" C) ("_type_name" acom))
###     ("\<^const>Com.com.Seq"
###       ("\<^const>Com.com.Seq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''z''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))))
###       ("_position" wl))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_constrain" ("_position" C) ("_type_name" acom))
###     ("\<^const>Nielson_VCG.acom.Aseq"
###       ("\<^const>Nielson_VCG.acom.Aseq"
###         ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''z''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))))
###       ("_position" wl))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_constrain" ("_position" C) ("_type_name" acom))
###     ("\<^const>Com.com.Seq"
###       ("\<^const>Nielson_VCG.acom.Aseq"
###         ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''z''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))))
###       ("_position" wl))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_constrain" ("_position" C) ("_type_name" acom))
###     ("\<^const>Nielson_VCG.acom.Aseq"
###       ("\<^const>Com.com.Seq"
###         ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''z''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))))
###       ("_position" wl))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_constrain" ("_position" C) ("_type_name" acom))
###     ("\<^const>Com.com.Seq"
###       ("\<^const>Com.com.Seq"
###         ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''z''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))))
###       ("_position" wl))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_constrain" ("_position" C) ("_type_name" acom))
###     ("\<^const>Nielson_VCG.acom.Aseq"
###       ("\<^const>Nielson_VCG.acom.Aseq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###         ("\<^const>Com.com.Assign" ("_String" ("_position" ''z''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))))
###       ("_position" wl))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_constrain" ("_position" C) ("_type_name" acom))
###     ("\<^const>Com.com.Seq"
###       ("\<^const>Nielson_VCG.acom.Aseq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###         ("\<^const>Com.com.Assign" ("_String" ("_position" ''z''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))))
###       ("_position" wl))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 138 of "$AFP/Hoare_Time/Nielson_Examples.thy") produces 2048 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" C)
###     ("\<^const>Nielson_VCG.acom.Aseq"
###       ("\<^const>Nielson_VCG.acom.Aseq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''z''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))))
###       ("\<^const>Nielson_VCG.acom.Awhile"
###         ("_tuple" ("_position" I1)
###           ("_tuple_arg"
###             ("_tuple" ("_position" S1) ("_tuple_arg" ("_position" E1)))))
###         ("_applC" ("_position" Less)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''a'')))))
###         ("\<^const>Com.com.Seq"
###           ("\<^const>Com.com.Seq"
###             ("\<^const>Com.com.Assign" ("_String" ("_position" ''g''))
###               ("_applC" ("_position" N)
###                 ("\<^const>Groups.zero_class.zero")))
###             ("\<^const>Nielson_VCG.acom.Awhile"
###               ("_tuple" ("_position" I2)
###                 ("_tuple_arg"
###                   ("_tuple" ("_position" S2)
###                     ("_tuple_arg" ("_position" E2)))))
###               ("_applC" ("_position" Less)
###                 ("_cargs"
###                   ("_applC" ("_position" V) ("_String" ("_position" ''g'')))
###                   ("_applC" ("_position" V)
###                     ("_String" ("_position" ''b'')))))
###               ("\<^const>Com.com.Seq"
###                 ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###                   ("_applC" ("_position" Plus)
###                     ("_cargs"
###                       ("_applC" ("_position" V)
###                         ("_String" ("_position" ''y'')))
###                       ("_applC" ("_position" N)
###                         ("\<^const>Groups.one_class.one")))))
###                 ("\<^const>Com.com.Assign" ("_String" ("_position" ''g''))
###                   ("_applC" ("_position" Plus)
###                     ("_cargs"
###                       ("_applC" ("_position" V)
###                         ("_String" ("_position" ''g'')))
###                       ("_applC" ("_position" N)
###                         ("\<^const>Groups.one_class.one"))))))))
###           ("\<^const>Com.com.Assign" ("_String" ("_position" ''z''))
###             ("_applC" ("_position" Plus)
###               ("_cargs"
###                 ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###                 ("_applC" ("_position" N)
###                   ("\<^const>Groups.one_class.one"))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" C)
###     ("\<^const>Com.com.Seq"
###       ("\<^const>Nielson_VCG.acom.Aseq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''z''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))))
###       ("\<^const>Nielson_VCG.acom.Awhile"
###         ("_tuple" ("_position" I1)
###           ("_tuple_arg"
###             ("_tuple" ("_position" S1) ("_tuple_arg" ("_position" E1)))))
###         ("_applC" ("_position" Less)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''a'')))))
###         ("\<^const>Com.com.Seq"
###           ("\<^const>Com.com.Seq"
###             ("\<^const>Com.com.Assign" ("_String" ("_position" ''g''))
###               ("_applC" ("_position" N)
###                 ("\<^const>Groups.zero_class.zero")))
###             ("\<^const>Nielson_VCG.acom.Awhile"
###               ("_tuple" ("_position" I2)
###                 ("_tuple_arg"
###                   ("_tuple" ("_position" S2)
###                     ("_tuple_arg" ("_position" E2)))))
###               ("_applC" ("_position" Less)
###                 ("_cargs"
###                   ("_applC" ("_position" V) ("_String" ("_position" ''g'')))
###                   ("_applC" ("_position" V)
###                     ("_String" ("_position" ''b'')))))
###               ("\<^const>Com.com.Seq"
###                 ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###                   ("_applC" ("_position" Plus)
###                     ("_cargs"
###                       ("_applC" ("_position" V)
###                         ("_String" ("_position" ''y'')))
###                       ("_applC" ("_position" N)
###                         ("\<^const>Groups.one_class.one")))))
###                 ("\<^const>Com.com.Assign" ("_String" ("_position" ''g''))
###                   ("_applC" ("_position" Plus)
###                     ("_cargs"
###                       ("_applC" ("_position" V)
###                         ("_String" ("_position" ''g'')))
###                       ("_applC" ("_position" N)
###                         ("\<^const>Groups.one_class.one"))))))))
###           ("\<^const>Com.com.Assign" ("_String" ("_position" ''z''))
###             ("_applC" ("_position" Plus)
###               ("_cargs"
###                 ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###                 ("_applC" ("_position" N)
###                   ("\<^const>Groups.one_class.one"))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" C)
###     ("\<^const>Nielson_VCG.acom.Aseq"
###       ("\<^const>Com.com.Seq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''z''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))))
###       ("\<^const>Nielson_VCG.acom.Awhile"
###         ("_tuple" ("_position" I1)
###           ("_tuple_arg"
###             ("_tuple" ("_position" S1) ("_tuple_arg" ("_position" E1)))))
###         ("_applC" ("_position" Less)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''a'')))))
###         ("\<^const>Com.com.Seq"
###           ("\<^const>Com.com.Seq"
###             ("\<^const>Com.com.Assign" ("_String" ("_position" ''g''))
###               ("_applC" ("_position" N)
###                 ("\<^const>Groups.zero_class.zero")))
###             ("\<^const>Nielson_VCG.acom.Awhile"
###               ("_tuple" ("_position" I2)
###                 ("_tuple_arg"
###                   ("_tuple" ("_position" S2)
###                     ("_tuple_arg" ("_position" E2)))))
###               ("_applC" ("_position" Less)
###                 ("_cargs"
###                   ("_applC" ("_position" V) ("_String" ("_position" ''g'')))
###                   ("_applC" ("_position" V)
###                     ("_String" ("_position" ''b'')))))
###               ("\<^const>Com.com.Seq"
###                 ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###                   ("_applC" ("_position" Plus)
###                     ("_cargs"
###                       ("_applC" ("_position" V)
###                         ("_String" ("_position" ''y'')))
###                       ("_applC" ("_position" N)
###                         ("\<^const>Groups.one_class.one")))))
###                 ("\<^const>Com.com.Assign" ("_String" ("_position" ''g''))
###                   ("_applC" ("_position" Plus)
###                     ("_cargs"
###                       ("_applC" ("_position" V)
###                         ("_String" ("_position" ''g'')))
###                       ("_applC" ("_position" N)
###                         ("\<^const>Groups.one_class.one"))))))))
###           ("\<^const>Com.com.Assign" ("_String" ("_position" ''z''))
###             ("_applC" ("_position" Plus)
###               ("_cargs"
###                 ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###                 ("_applC" ("_position" N)
###                   ("\<^const>Groups.one_class.one"))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" C)
###     ("\<^const>Com.com.Seq"
###       ("\<^const>Com.com.Seq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''z''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))))
###       ("\<^const>Nielson_VCG.acom.Awhile"
###         ("_tuple" ("_position" I1)
###           ("_tuple_arg"
###             ("_tuple" ("_position" S1) ("_tuple_arg" ("_position" E1)))))
###         ("_applC" ("_position" Less)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''a'')))))
###         ("\<^const>Com.com.Seq"
###           ("\<^const>Com.com.Seq"
###             ("\<^const>Com.com.Assign" ("_String" ("_position" ''g''))
###               ("_applC" ("_position" N)
###                 ("\<^const>Groups.zero_class.zero")))
###             ("\<^const>Nielson_VCG.acom.Awhile"
###               ("_tuple" ("_position" I2)
###                 ("_tuple_arg"
###                   ("_tuple" ("_position" S2)
###                     ("_tuple_arg" ("_position" E2)))))
###               ("_applC" ("_position" Less)
###                 ("_cargs"
###                   ("_applC" ("_position" V) ("_String" ("_position" ''g'')))
###                   ("_applC" ("_position" V)
###                     ("_String" ("_position" ''b'')))))
###               ("\<^const>Com.com.Seq"
###                 ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###                   ("_applC" ("_position" Plus)
###                     ("_cargs"
###                       ("_applC" ("_position" V)
###                         ("_String" ("_position" ''y'')))
###                       ("_applC" ("_position" N)
###                         ("\<^const>Groups.one_class.one")))))
###                 ("\<^const>Com.com.Assign" ("_String" ("_position" ''g''))
###                   ("_applC" ("_position" Plus)
###                     ("_cargs"
###                       ("_applC" ("_position" V)
###                         ("_String" ("_position" ''g'')))
###                       ("_applC" ("_position" N)
###                         ("\<^const>Groups.one_class.one"))))))))
###           ("\<^const>Com.com.Assign" ("_String" ("_position" ''z''))
###             ("_applC" ("_position" Plus)
###               ("_cargs"
###                 ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###                 ("_applC" ("_position" N)
###                   ("\<^const>Groups.one_class.one"))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" C)
###     ("\<^const>Nielson_VCG.acom.Aseq"
###       ("\<^const>Nielson_VCG.acom.Aseq"
###         ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''z''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))))
###       ("\<^const>Nielson_VCG.acom.Awhile"
###         ("_tuple" ("_position" I1)
###           ("_tuple_arg"
###             ("_tuple" ("_position" S1) ("_tuple_arg" ("_position" E1)))))
###         ("_applC" ("_position" Less)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''a'')))))
###         ("\<^const>Com.com.Seq"
###           ("\<^const>Com.com.Seq"
###             ("\<^const>Com.com.Assign" ("_String" ("_position" ''g''))
###               ("_applC" ("_position" N)
###                 ("\<^const>Groups.zero_class.zero")))
###             ("\<^const>Nielson_VCG.acom.Awhile"
###               ("_tuple" ("_position" I2)
###                 ("_tuple_arg"
###                   ("_tuple" ("_position" S2)
###                     ("_tuple_arg" ("_position" E2)))))
###               ("_applC" ("_position" Less)
###                 ("_cargs"
###                   ("_applC" ("_position" V) ("_String" ("_position" ''g'')))
###                   ("_applC" ("_position" V)
###                     ("_String" ("_position" ''b'')))))
###               ("\<^const>Com.com.Seq"
###                 ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###                   ("_applC" ("_position" Plus)
###                     ("_cargs"
###                       ("_applC" ("_position" V)
###                         ("_String" ("_position" ''y'')))
###                       ("_applC" ("_position" N)
###                         ("\<^const>Groups.one_class.one")))))
###                 ("\<^const>Com.com.Assign" ("_String" ("_position" ''g''))
###                   ("_applC" ("_position" Plus)
###                     ("_cargs"
###                       ("_applC" ("_position" V)
###                         ("_String" ("_position" ''g'')))
###                       ("_applC" ("_position" N)
###                         ("\<^const>Groups.one_class.one"))))))))
###           ("\<^const>Com.com.Assign" ("_String" ("_position" ''z''))
###             ("_applC" ("_position" Plus)
###               ("_cargs"
###                 ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###                 ("_applC" ("_position" N)
###                   ("\<^const>Groups.one_class.one"))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" C)
###     ("\<^const>Com.com.Seq"
###       ("\<^const>Nielson_VCG.acom.Aseq"
###         ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''z''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))))
###       ("\<^const>Nielson_VCG.acom.Awhile"
###         ("_tuple" ("_position" I1)
###           ("_tuple_arg"
###             ("_tuple" ("_position" S1) ("_tuple_arg" ("_position" E1)))))
###         ("_applC" ("_position" Less)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''a'')))))
###         ("\<^const>Com.com.Seq"
###           ("\<^const>Com.com.Seq"
###             ("\<^const>Com.com.Assign" ("_String" ("_position" ''g''))
###               ("_applC" ("_position" N)
###                 ("\<^const>Groups.zero_class.zero")))
###             ("\<^const>Nielson_VCG.acom.Awhile"
###               ("_tuple" ("_position" I2)
###                 ("_tuple_arg"
###                   ("_tuple" ("_position" S2)
###                     ("_tuple_arg" ("_position" E2)))))
###               ("_applC" ("_position" Less)
###                 ("_cargs"
###                   ("_applC" ("_position" V) ("_String" ("_position" ''g'')))
###                   ("_applC" ("_position" V)
###                     ("_String" ("_position" ''b'')))))
###               ("\<^const>Com.com.Seq"
###                 ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###                   ("_applC" ("_position" Plus)
###                     ("_cargs"
###                       ("_applC" ("_position" V)
###                         ("_String" ("_position" ''y'')))
###                       ("_applC" ("_position" N)
###                         ("\<^const>Groups.one_class.one")))))
###                 ("\<^const>Com.com.Assign" ("_String" ("_position" ''g''))
###                   ("_applC" ("_position" Plus)
###                     ("_cargs"
###                       ("_applC" ("_position" V)
###                         ("_String" ("_position" ''g'')))
###                       ("_applC" ("_position" N)
###                         ("\<^const>Groups.one_class.one"))))))))
###           ("\<^const>Com.com.Assign" ("_String" ("_position" ''z''))
###             ("_applC" ("_position" Plus)
###               ("_cargs"
###                 ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###                 ("_applC" ("_position" N)
###                   ("\<^const>Groups.one_class.one"))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" C)
###     ("\<^const>Nielson_VCG.acom.Aseq"
###       ("\<^const>Com.com.Seq"
###         ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''z''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))))
###       ("\<^const>Nielson_VCG.acom.Awhile"
###         ("_tuple" ("_position" I1)
###           ("_tuple_arg"
###             ("_tuple" ("_position" S1) ("_tuple_arg" ("_position" E1)))))
###         ("_applC" ("_position" Less)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''a'')))))
###         ("\<^const>Com.com.Seq"
###           ("\<^const>Com.com.Seq"
###             ("\<^const>Com.com.Assign" ("_String" ("_position" ''g''))
###               ("_applC" ("_position" N)
###                 ("\<^const>Groups.zero_class.zero")))
###             ("\<^const>Nielson_VCG.acom.Awhile"
###               ("_tuple" ("_position" I2)
###                 ("_tuple_arg"
###                   ("_tuple" ("_position" S2)
###                     ("_tuple_arg" ("_position" E2)))))
###               ("_applC" ("_position" Less)
###                 ("_cargs"
###                   ("_applC" ("_position" V) ("_String" ("_position" ''g'')))
###                   ("_applC" ("_position" V)
###                     ("_String" ("_position" ''b'')))))
###               ("\<^const>Com.com.Seq"
###                 ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###                   ("_applC" ("_position" Plus)
###                     ("_cargs"
###                       ("_applC" ("_position" V)
###                         ("_String" ("_position" ''y'')))
###                       ("_applC" ("_position" N)
###                         ("\<^const>Groups.one_class.one")))))
###                 ("\<^const>Com.com.Assign" ("_String" ("_position" ''g''))
###                   ("_applC" ("_position" Plus)
###                     ("_cargs"
###                       ("_applC" ("_position" V)
###                         ("_String" ("_position" ''g'')))
###                       ("_applC" ("_position" N)
###                         ("\<^const>Groups.one_class.one"))))))))
###           ("\<^const>Com.com.Assign" ("_String" ("_position" ''z''))
###             ("_applC" ("_position" Plus)
###               ("_cargs"
###                 ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###                 ("_applC" ("_position" N)
###                   ("\<^const>Groups.one_class.one"))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" C)
###     ("\<^const>Com.com.Seq"
###       ("\<^const>Com.com.Seq"
###         ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''z''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))))
###       ("\<^const>Nielson_VCG.acom.Awhile"
###         ("_tuple" ("_position" I1)
###           ("_tuple_arg"
###             ("_tuple" ("_position" S1) ("_tuple_arg" ("_position" E1)))))
###         ("_applC" ("_position" Less)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''a'')))))
###         ("\<^const>Com.com.Seq"
###           ("\<^const>Com.com.Seq"
###             ("\<^const>Com.com.Assign" ("_String" ("_position" ''g''))
###               ("_applC" ("_position" N)
###                 ("\<^const>Groups.zero_class.zero")))
###             ("\<^const>Nielson_VCG.acom.Awhile"
###               ("_tuple" ("_position" I2)
###                 ("_tuple_arg"
###                   ("_tuple" ("_position" S2)
###                     ("_tuple_arg" ("_position" E2)))))
###               ("_applC" ("_position" Less)
###                 ("_cargs"
###                   ("_applC" ("_position" V) ("_String" ("_position" ''g'')))
###                   ("_applC" ("_position" V)
###                     ("_String" ("_position" ''b'')))))
###               ("\<^const>Com.com.Seq"
###                 ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###                   ("_applC" ("_position" Plus)
###                     ("_cargs"
###                       ("_applC" ("_position" V)
###                         ("_String" ("_position" ''y'')))
###                       ("_applC" ("_position" N)
###                         ("\<^const>Groups.one_class.one")))))
###                 ("\<^const>Com.com.Assign" ("_String" ("_position" ''g''))
###                   ("_applC" ("_position" Plus)
###                     ("_cargs"
###                       ("_applC" ("_position" V)
###                         ("_String" ("_position" ''g'')))
###                       ("_applC" ("_position" N)
###                         ("\<^const>Groups.one_class.one"))))))))
###           ("\<^const>Com.com.Assign" ("_String" ("_position" ''z''))
###             ("_applC" ("_position" Plus)
###               ("_cargs"
###                 ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###                 ("_applC" ("_position" N)
###                   ("\<^const>Groups.one_class.one"))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" C)
###     ("\<^const>Nielson_VCG.acom.Aseq"
###       ("\<^const>Nielson_VCG.acom.Aseq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###         ("\<^const>Com.com.Assign" ("_String" ("_position" ''z''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))))
###       ("\<^const>Nielson_VCG.acom.Awhile"
###         ("_tuple" ("_position" I1)
###           ("_tuple_arg"
###             ("_tuple" ("_position" S1) ("_tuple_arg" ("_position" E1)))))
###         ("_applC" ("_position" Less)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''a'')))))
###         ("\<^const>Com.com.Seq"
###           ("\<^const>Com.com.Seq"
###             ("\<^const>Com.com.Assign" ("_String" ("_position" ''g''))
###               ("_applC" ("_position" N)
###                 ("\<^const>Groups.zero_class.zero")))
###             ("\<^const>Nielson_VCG.acom.Awhile"
###               ("_tuple" ("_position" I2)
###                 ("_tuple_arg"
###                   ("_tuple" ("_position" S2)
###                     ("_tuple_arg" ("_position" E2)))))
###               ("_applC" ("_position" Less)
###                 ("_cargs"
###                   ("_applC" ("_position" V) ("_String" ("_position" ''g'')))
###                   ("_applC" ("_position" V)
###                     ("_String" ("_position" ''b'')))))
###               ("\<^const>Com.com.Seq"
###                 ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###                   ("_applC" ("_position" Plus)
###                     ("_cargs"
###                       ("_applC" ("_position" V)
###                         ("_String" ("_position" ''y'')))
###                       ("_applC" ("_position" N)
###                         ("\<^const>Groups.one_class.one")))))
###                 ("\<^const>Com.com.Assign" ("_String" ("_position" ''g''))
###                   ("_applC" ("_position" Plus)
###                     ("_cargs"
###                       ("_applC" ("_position" V)
###                         ("_String" ("_position" ''g'')))
###                       ("_applC" ("_position" N)
###                         ("\<^const>Groups.one_class.one"))))))))
###           ("\<^const>Com.com.Assign" ("_String" ("_position" ''z''))
###             ("_applC" ("_position" Plus)
###               ("_cargs"
###                 ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###                 ("_applC" ("_position" N)
###                   ("\<^const>Groups.one_class.one"))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" C)
###     ("\<^const>Com.com.Seq"
###       ("\<^const>Nielson_VCG.acom.Aseq"
###         ("\<^const>Nielson_VCG.acom.Aassign" ("_String" ("_position" ''y''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero")))
###         ("\<^const>Com.com.Assign" ("_String" ("_position" ''z''))
###           ("_applC" ("_position" N) ("\<^const>Groups.zero_class.zero"))))
###       ("\<^const>Nielson_VCG.acom.Awhile"
###         ("_tuple" ("_position" I1)
###           ("_tuple_arg"
###             ("_tuple" ("_position" S1) ("_tuple_arg" ("_position" E1)))))
###         ("_applC" ("_position" Less)
###           ("_cargs"
###             ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###             ("_applC" ("_position" V) ("_String" ("_position" ''a'')))))
###         ("\<^const>Com.com.Seq"
###           ("\<^const>Com.com.Seq"
###             ("\<^const>Com.com.Assign" ("_String" ("_position" ''g''))
###               ("_applC" ("_position" N)
###                 ("\<^const>Groups.zero_class.zero")))
###             ("\<^const>Nielson_VCG.acom.Awhile"
###               ("_tuple" ("_position" I2)
###                 ("_tuple_arg"
###                   ("_tuple" ("_position" S2)
###                     ("_tuple_arg" ("_position" E2)))))
###               ("_applC" ("_position" Less)
###                 ("_cargs"
###                   ("_applC" ("_position" V) ("_String" ("_position" ''g'')))
###                   ("_applC" ("_position" V)
###                     ("_String" ("_position" ''b'')))))
###               ("\<^const>Com.com.Seq"
###                 ("\<^const>Com.com.Assign" ("_String" ("_position" ''y''))
###                   ("_applC" ("_position" Plus)
###                     ("_cargs"
###                       ("_applC" ("_position" V)
###                         ("_String" ("_position" ''y'')))
###                       ("_applC" ("_position" N)
###                         ("\<^const>Groups.one_class.one")))))
###                 ("\<^const>Com.com.Assign" ("_String" ("_position" ''g''))
###                   ("_applC" ("_position" Plus)
###                     ("_cargs"
###                       ("_applC" ("_position" V)
###                         ("_String" ("_position" ''g'')))
###                       ("_applC" ("_position" N)
###                         ("\<^const>Groups.one_class.one"))))))))
###           ("\<^const>Com.com.Assign" ("_String" ("_position" ''z''))
###             ("_applC" ("_position" Plus)
###               ("_cargs"
###                 ("_applC" ("_position" V) ("_String" ("_position" ''z'')))
###                 ("_applC" ("_position" N)
###                   ("\<^const>Groups.one_class.one"))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Nielson_Examples"
### 2.487s elapsed time, 6.006s cpu time, 2.772s GC time
Loading theory "Draft.Nielson_ExamplesTemplates"
val templateLemmas =
   [("Nielson_Examples.fin_support", "finite (support (%l. ?P (l ?a)))",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, t_empty))
         )),
    ("Nielson_Examples.support_single2", "support (%l. ?P) = {}",
     template_equation
      (template_app (template_hole 1, t_empty), template_hole 0)),
    ("Nielson_Examples.helper", "?A * ?B + ?B = (?A + 1) * ?B",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 0)),
         template_var 0))),
    ("Nielson_Examples.finite_support_and",
     "[| finite (support ?A); finite (support ?B) |]
      ==> finite (support (%l s. ?A l s & ?B l s))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 2, template_app (template_hole 1, t_empty))
           ))),
    ("Nielson_Examples.example_count_upto_b",
     "[| ?I = (%l s. 0 <= s ?a);
         ?E = (%s. 1 + 2 * (nat ?b + 1 - nat (s ?a)));
         ?S = (%s. if ?b <= s ?a then s else s(?a := ?b));
         ?C =
         {(?I, ?S, ?E)} WHILE Less (V ?a) (N ?b)
         DO ?a ::= Plus (V ?a) (N 1) |]
      ==> \<turnstile>\<^sub>1 {%l s. 0 <= s ?a} strip ?C
                               { time ?C \<Down> %l s. True}",
     template_implication
      ([template_equation (template_var 5, t_empty),
        template_equation (template_var 3, t_empty),
        template_equation (template_var 1, t_empty),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 5),
                  template_app
                   (template_app (template_hole 10, template_var 1),
                    template_var 3))),
              template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 8, template_var 4)),
                template_app (template_hole 7, template_var 2))),
            template_app
             (template_app (template_hole 6, template_var 4),
              template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 8, template_var 4)),
                template_app (template_hole 7, template_hole 4)))))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, t_empty),
                 template_app (template_hole 2, template_var 0)),
               template_app (template_hole 1, template_var 0)),
             t_empty)
           ))),
    ("Nielson_Examples.example_count_upto_3",
     "[| ?I = (%l s. 0 <= s ?a); ?E = (%s. 1 + 2 * (4 - nat (s ?a)));
         ?S = (%s. if 3 <= s ?a then s else s(?a := 3));
         ?C =
         {(?I, ?S, ?E)} WHILE Less (V ?a) (N 3)
         DO ?a ::= Plus (V ?a) (N 1) |]
      ==> \<turnstile>\<^sub>1 {%l s. 0 <= s ?a} strip ?C
                               { time ?C \<Down> %l s. True}",
     template_implication
      ([template_equation (template_var 4, t_empty),
        template_equation (template_var 2, t_empty),
        template_equation (template_var 1, t_empty),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 4),
                  template_app
                   (template_app (template_hole 10, template_var 1),
                    template_var 2))),
              template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 8, template_var 3)),
                template_app
                 (template_hole 7,
                  template_app
                   (template_hole 16,
                    template_app (template_hole 15, template_hole 21))))),
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 8, template_var 3)),
                template_app (template_hole 7, template_hole 4)))))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, t_empty),
                 template_app (template_hole 2, template_var 0)),
               template_app (template_hole 1, template_var 0)),
             t_empty)
           ))),
    ("Nielson_Examples.mult",
     "[| ?I =
         (%l s. 0 <= s ''a'' &
                s ''z'' <= s ''a'' &
                0 <= s ''z'' & s ''y'' = s ''z'' * s ''b'');
         ?E = (%s. 1 + 3 * (nat (s ''a'') + 1 - nat (s ''z'')));
         ?S =
         (%s. if s ''a'' <= s ''z'' then s
              else s(''y'' := s ''a'' * s ''b'', ''z'' := s ''a''));
         ?C = ''y'' ::= N 0;; ''z'' ::= N 0;;
         {(?I, ?S, ?E)} WHILE Less (V ''z'') (V ''a'')
         DO (''y'' ::= Plus (V ''y'') (V ''b'');;
             ''z'' ::= Plus (V ''z'') (N 1));
         ?f = (%s. 3 * (nat (s ''a'') + 2)) |]
      ==> \<turnstile>\<^sub>1 {%l s. 0 <= s ''a''} strip ?C
                               { ?f \<Down> %l s.
         s ''y'' = s ''a'' * s ''b''}",
     template_implication
      ([template_equation (template_var 4, t_empty),
        template_equation (template_var 3, t_empty),
        template_equation (template_var 2, t_empty),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_hole 12,
              template_app
               (template_app
                 (template_hole 12,
                  template_app
                   (template_app
                     (template_hole 11,
                      template_app
                       (template_app
                         (template_hole 32,
                          template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app (template_hole 31, template_hole 30), template_hole 29),
template_hole 29),
                                    template_hole 30),
                                  template_hole 30),
                                template_hole 30),
                              template_hole 30),
                            template_hole 29)),
                        template_hole 28)),
                    template_app (template_hole 10, template_hole 33))),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app
                       (template_hole 32,
                        template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_hole 31, template_hole 29),
template_hole 30),
                                    template_hole 29),
                                  template_hole 30),
                                template_hole 30),
                              template_hole 30),
                            template_hole 30),
                          template_hole 29)),
                      template_hole 28)),
                  template_app (template_hole 10, template_hole 33)))),
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 8, template_var 4),
                    template_app
                     (template_app (template_hole 7, template_var 2),
                      template_var 3))),
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_hole 5,
                      template_app
                       (template_app
                         (template_hole 32,
                          template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app (template_hole 31, template_hole 29), template_hole 30),
template_hole 29),
                                    template_hole 30),
                                  template_hole 30),
                                template_hole 30),
                              template_hole 30),
                            template_hole 29)),
                        template_hole 28))),
                  template_app
                   (template_hole 5,
                    template_app
                     (template_app
                       (template_hole 32,
                        template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_hole 31, template_hole 30),
template_hole 29),
                                    template_hole 29),
                                  template_hole 29),
                                template_hole 29),
                              template_hole 30),
                            template_hole 30),
                          template_hole 29)),
                      template_hole 28)))),
              template_app
               (template_app
                 (template_hole 12,
                  template_app
                   (template_app
                     (template_hole 11,
                      template_app
                       (template_app
                         (template_hole 32,
                          template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app (template_hole 31, template_hole 30), template_hole 29),
template_hole 29),
                                    template_hole 30),
                                  template_hole 30),
                                template_hole 30),
                              template_hole 30),
                            template_hole 29)),
                        template_hole 28)),
                    template_app
                     (template_app
                       (template_hole 4,
                        template_app
                         (template_hole 5,
                          template_app
                           (template_app
                             (template_hole 32,
                              template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app (template_hole 31, template_hole 30), template_hole 29),
    template_hole 29),
  template_hole 30),
template_hole 30),
                                    template_hole 30),
                                  template_hole 30),
                                template_hole 29)),
                            template_hole 28))),
                      template_app
                       (template_hole 5,
                        template_app
                         (template_app
                           (template_hole 32,
                            template_app
                             (template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app (template_hole 31, template_hole 29), template_hole 30),
  template_hole 29),
template_hole 29),
                                    template_hole 29),
                                  template_hole 30),
                                template_hole 30),
                              template_hole 29)),
                          template_hole 28))))),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app
                       (template_hole 32,
                        template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_hole 31, template_hole 29),
template_hole 30),
                                    template_hole 29),
                                  template_hole 30),
                                template_hole 30),
                              template_hole 30),
                            template_hole 30),
                          template_hole 29)),
                      template_hole 28)),
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app
                       (template_hole 5,
                        template_app
                         (template_app
                           (template_hole 32,
                            template_app
                             (template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app (template_hole 31, template_hole 29), template_hole 30),
  template_hole 29),
template_hole 30),
                                    template_hole 30),
                                  template_hole 30),
                                template_hole 30),
                              template_hole 29)),
                          template_hole 28))),
                    template_app (template_hole 10, template_hole 3))))))),
        template_equation (template_var 0, t_empty)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, t_empty),
                 template_app (template_hole 0, template_var 1)),
               template_var 0),
             t_empty)
           ))),
    ("Nielson_Examples.mult_abstract",
     "[| ?I =
         (%l s. 0 <= s ''a'' &
                s ''z'' <= s ''a'' &
                0 <= s ''z'' & s ''y'' = s ''z'' * s ''b'');
         ?E = (%s. 1 + 2 * (nat (s ''a'') + 1 - nat (s ''z'')));
         ?S =
         (%s. if s ''a'' <= s ''z'' then s
              else s(''y'' := s ''a'' * s ''b'', ''z'' := s ''a''));
         ?e = (%s. 1);
         ?lb =
         {%l s. ?I l s & s ''z'' < s ''a''/?I/?e}
         CONSEQ (''y'' ::= Plus (V ''y'') (V ''b'');;
                 ''z'' ::= Plus (V ''z'') (N 1));
         ?l = {(?I, ?S, ?E)} WHILE Less (V ''z'') (V ''a'') DO ?lb;
         ?e' = (%s. 1 + nat (s ''a''));
         ?wl = {?I/%l s. ?I l s & s ''a'' <= s ''z''/?e'} CONSEQ ?l;
         ?C = ''y'' ::= N 0;; ''z'' ::= N 0;; ?wl;
         ?f = (%s. nat (s ''a'') + 1) |]
      ==> \<turnstile>\<^sub>1 {%l s. 0 <= s ''a''}
                               strip
                                ({%l s. 0
  <= s ''a''/%l s. s ''y'' = s ''a'' * s ''b''/?f}
                                 CONSEQ ?C)
                               { ?f \<Down> %l s.
         s ''y'' = s ''a'' * s ''b''}",
     template_implication
      ([template_equation (template_var 9, t_empty),
        template_equation (template_var 8, t_empty),
        template_equation (template_var 7, t_empty),
        template_equation (template_var 6, t_empty),
        template_equation
         (template_var 5,
          template_app
           (template_app
             (template_app
               (template_app (template_hole 13, t_empty), template_var 9),
              template_var 6),
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app
                       (template_hole 33,
                        template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_hole 32, template_hole 31),
template_hole 30),
                                    template_hole 30),
                                  template_hole 31),
                                template_hole 31),
                              template_hole 31),
                            template_hole 31),
                          template_hole 30)),
                      template_hole 29)),
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_hole 8,
                        template_app
                         (template_app
                           (template_hole 33,
                            template_app
                             (template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app (template_hole 32, template_hole 31), template_hole 30),
  template_hole 30),
template_hole 31),
                                    template_hole 31),
                                  template_hole 31),
                                template_hole 31),
                              template_hole 30)),
                          template_hole 29))),
                    template_app
                     (template_hole 8,
                      template_app
                       (template_app
                         (template_hole 33,
                          template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app (template_hole 32, template_hole 30), template_hole 31),
template_hole 30),
                                    template_hole 30),
                                  template_hole 30),
                                template_hole 31),
                              template_hole 31),
                            template_hole 30)),
                        template_hole 29))))),
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app
                     (template_hole 33,
                      template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_hole 32, template_hole 30),
                                    template_hole 31),
                                  template_hole 30),
                                template_hole 31),
                              template_hole 31),
                            template_hole 31),
                          template_hole 31),
                        template_hole 30)),
                    template_hole 29)),
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_hole 8,
                      template_app
                       (template_app
                         (template_hole 33,
                          template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app (template_hole 32, template_hole 30), template_hole 31),
template_hole 30),
                                    template_hole 31),
                                  template_hole 31),
                                template_hole 31),
                              template_hole 31),
                            template_hole 30)),
                        template_hole 29))),
                  template_app (template_hole 7, template_hole 6)))))),
        template_equation
         (template_var 4,
          template_app
           (template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 9),
                  template_app
                   (template_app (template_hole 3, template_var 7),
                    template_var 8))),
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_hole 8,
                    template_app
                     (template_app
                       (template_hole 33,
                        template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_hole 32, template_hole 30),
template_hole 31),
                                    template_hole 30),
                                  template_hole 31),
                                template_hole 31),
                              template_hole 31),
                            template_hole 31),
                          template_hole 30)),
                      template_hole 29))),
                template_app
                 (template_hole 8,
                  template_app
                   (template_app
                     (template_hole 33,
                      template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_hole 32, template_hole 31),
                                    template_hole 30),
                                  template_hole 30),
                                template_hole 30),
                              template_hole 30),
                            template_hole 31),
                          template_hole 31),
                        template_hole 30)),
                    template_hole 29)))),
            template_var 5)),
        template_equation (template_var 3, t_empty),
        template_equation
         (template_var 2,
          template_app
           (template_app
             (template_app
               (template_app (template_hole 13, template_var 9), t_empty),
              template_var 3),
            template_var 4)),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_hole 11,
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app
                         (template_hole 33,
                          template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app (template_hole 32, template_hole 31), template_hole 30),
template_hole 30),
                                    template_hole 31),
                                  template_hole 31),
                                template_hole 31),
                              template_hole 31),
                            template_hole 30)),
                        template_hole 29)),
                    template_app (template_hole 7, template_hole 34))),
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app
                       (template_hole 33,
                        template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_hole 32, template_hole 30),
template_hole 31),
                                    template_hole 30),
                                  template_hole 31),
                                template_hole 31),
                              template_hole 31),
                            template_hole 31),
                          template_hole 30)),
                      template_hole 29)),
                  template_app (template_hole 7, template_hole 34)))),
            template_var 2)),
        template_equation (template_var 0, t_empty)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, t_empty),
                 template_app
                  (template_hole 0,
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 13, t_empty), t_empty),
                       template_var 0),
                     template_var 1))),
               template_var 0),
             t_empty)
           ))),
    ("Nielson_Examples.nested",
     "[| ?I2.0 =
         (%l s. 0 <= s ''a'' &
                0 <= s ''b'' &
                s ''z'' < s ''a'' &
                0 <= s ''z'' &
                s ''g'' <= s ''b'' &
                0 <= s ''g'' & s ''y'' = s ''z'' * s ''b'' + s ''g'');
         ?I1.0 =
         (%l s. 0 <= s ''a'' &
                0 <= s ''b'' &
                s ''z'' <= s ''a'' &
                0 <= s ''z'' & s ''y'' = s ''z'' * s ''b'');
         ?E2.0 = (%s. 1 + 3 * (nat (s ''b'') - nat (s ''g'')));
         ?S2.0 =
         (%s. if s ''b'' <= s ''g'' then s
              else s(''y'' := s ''z'' * s ''b'' + s ''b'',
                     ''g'' := s ''b''));
         ?E1.0 =
         (%s. 1 +
              (4 + 3 * nat (s ''b'')) * (nat (s ''a'') - nat (s ''z'')));
         ?S1.0 =
         (%s. if s ''a'' <= s ''z'' then s
              else s(''y'' := s ''a'' * s ''b'', ''z'' := s ''a'',
                     ''g'' := s ''b''));
         ?C = ''y'' ::= N 0;; ''z'' ::= N 0;;
         {(?I1.0, ?S1.0, ?E1.0)} WHILE Less (V ''z'') (V ''a'')
         DO (''g'' ::= N 0;;
             {(?I2.0, ?S2.0, ?E2.0)} WHILE Less (V ''g'') (V ''b'')
             DO (''y'' ::= Plus (V ''y'') (N 1);;
                 ''g'' ::= Plus (V ''g'') (N 1));;
             ''z'' ::= Plus (V ''z'') (N 1));
         ?f =
         (%s. 3 + 4 * nat (s ''a'') +
              3 * (nat (s ''a'') * nat (s ''b''))) |]
      ==> \<turnstile>\<^sub>1 {%l s. 0 <= s ''a'' & 0 <= s ''b''} strip ?C
                               { ?f \<Down> %l s.
         s ''y'' = s ''a'' * s ''b''}",
     template_implication
      ([template_equation (template_var 7, t_empty),
        template_equation (template_var 6, t_empty),
        template_equation (template_var 5, t_empty),
        template_equation (template_var 4, t_empty),
        template_equation (template_var 3, t_empty),
        template_equation (template_var 2, t_empty),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_hole 11,
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app
                         (template_hole 34,
                          template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app (template_hole 33, template_hole 32), template_hole 31),
template_hole 31),
                                    template_hole 32),
                                  template_hole 32),
                                template_hole 32),
                              template_hole 32),
                            template_hole 31)),
                        template_hole 30)),
                    template_app (template_hole 9, template_hole 35))),
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app
                       (template_hole 34,
                        template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_hole 33, template_hole 31),
template_hole 32),
                                    template_hole 31),
                                  template_hole 32),
                                template_hole 32),
                              template_hole 32),
                            template_hole 32),
                          template_hole 31)),
                      template_hole 30)),
                  template_app (template_hole 9, template_hole 35)))),
            template_app
             (template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_var 6),
                    template_app
                     (template_app (template_hole 6, template_var 2),
                      template_var 3))),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_hole 4,
                      template_app
                       (template_app
                         (template_hole 34,
                          template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app (template_hole 33, template_hole 31), template_hole 32),
template_hole 31),
                                    template_hole 32),
                                  template_hole 32),
                                template_hole 32),
                              template_hole 32),
                            template_hole 31)),
                        template_hole 30))),
                  template_app
                   (template_hole 4,
                    template_app
                     (template_app
                       (template_hole 34,
                        template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_hole 33, template_hole 32),
template_hole 31),
                                    template_hole 31),
                                  template_hole 31),
                                template_hole 31),
                              template_hole 32),
                            template_hole 32),
                          template_hole 31)),
                      template_hole 30)))),
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app
                     (template_hole 11,
                      template_app
                       (template_app
                         (template_hole 10,
                          template_app
                           (template_app
                             (template_hole 34,
                              template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app (template_hole 33, template_hole 32), template_hole 32),
    template_hole 32),
  template_hole 31),
template_hole 31),
                                    template_hole 32),
                                  template_hole 32),
                                template_hole 31)),
                            template_hole 30)),
                        template_app (template_hole 9, template_hole 35))),
                    template_app
                     (template_app
                       (template_app
                         (template_hole 8,
                          template_app
                           (template_app (template_hole 7, template_var 7),
                            template_app
                             (template_app
                               (template_hole 6, template_var 4),
                              template_var 5))),
                        template_app
                         (template_app
                           (template_hole 5,
                            template_app
                             (template_hole 4,
                              template_app
                               (template_app
                                 (template_hole 34,
                                  template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app
         (template_app (template_hole 33, template_hole 32),
          template_hole 32),
        template_hole 32),
      template_hole 31),
    template_hole 31),
  template_hole 32),
template_hole 32),
                                    template_hole 31)),
                                template_hole 30))),
                          template_app
                           (template_hole 4,
                            template_app
                             (template_app
                               (template_hole 34,
                                template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app (template_hole 33, template_hole 31),
        template_hole 32),
      template_hole 31),
    template_hole 31),
  template_hole 31),
template_hole 32),
                                    template_hole 32),
                                  template_hole 31)),
                              template_hole 30)))),
                      template_app
                       (template_app
                         (template_hole 11,
                          template_app
                           (template_app
                             (template_hole 10,
                              template_app
                               (template_app
                                 (template_hole 34,
                                  template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app
         (template_app (template_hole 33, template_hole 32),
          template_hole 31),
        template_hole 31),
      template_hole 32),
    template_hole 32),
  template_hole 32),
template_hole 32),
                                    template_hole 31)),
                                template_hole 30)),
                            template_app
                             (template_app
                               (template_hole 3,
                                template_app
                                 (template_hole 4,
                                  template_app
                                   (template_app
                                     (template_hole 34,
template_app
 (template_app
   (template_app
     (template_app
       (template_app
         (template_app
           (template_app
             (template_app (template_hole 33, template_hole 32),
              template_hole 31),
            template_hole 31),
          template_hole 32),
        template_hole 32),
      template_hole 32),
    template_hole 32),
  template_hole 31)),
                                    template_hole 30))),
                              template_app
                               (template_hole 9, template_hole 2)))),
                        template_app
                         (template_app
                           (template_hole 10,
                            template_app
                             (template_app
                               (template_hole 34,
                                template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app (template_hole 33, template_hole 32),
        template_hole 32),
      template_hole 32),
    template_hole 31),
  template_hole 31),
template_hole 32),
                                    template_hole 32),
                                  template_hole 31)),
                              template_hole 30)),
                          template_app
                           (template_app
                             (template_hole 3,
                              template_app
                               (template_hole 4,
                                template_app
                                 (template_app
                                   (template_hole 34,
                                    template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app
         (template_app
           (template_app (template_hole 33, template_hole 32),
            template_hole 32),
          template_hole 32),
        template_hole 31),
      template_hole 31),
    template_hole 32),
  template_hole 32),
template_hole 31)),
                                  template_hole 30))),
                            template_app
                             (template_hole 9, template_hole 2))))))),
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app
                       (template_hole 34,
                        template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_hole 33, template_hole 31),
template_hole 32),
                                    template_hole 31),
                                  template_hole 32),
                                template_hole 32),
                              template_hole 32),
                            template_hole 32),
                          template_hole 31)),
                      template_hole 30)),
                  template_app
                   (template_app
                     (template_hole 3,
                      template_app
                       (template_hole 4,
                        template_app
                         (template_app
                           (template_hole 34,
                            template_app
                             (template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app (template_hole 33, template_hole 31), template_hole 32),
  template_hole 31),
template_hole 32),
                                    template_hole 32),
                                  template_hole 32),
                                template_hole 32),
                              template_hole 31)),
                          template_hole 30))),
                    template_app (template_hole 9, template_hole 2))))))),
        template_equation (template_var 0, t_empty)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, t_empty),
                 template_app (template_hole 0, template_var 1)),
               template_var 0),
             t_empty)
           )))]:
   (string * thm * template) list
### theory "Draft.Nielson_ExamplesTemplates"
### 0.390s elapsed time, 0.509s cpu time, 0.000s GC time
val it = (): unit
