Loading theory "Draft.AExp" (required by "Draft.Nielson_VCGiTemplates" via "Draft.Nielson_VCGi" via "Draft.Nielson_Hoare" via "Draft.Big_StepT" via "Draft.Big_Step" via "Draft.Com" via "Draft.BExp")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Nielson_VCGiTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Nielson_VCGiTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.Nielson_VCGiTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.139s elapsed time, 0.562s cpu time, 0.056s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Nielson_VCGiTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.209s elapsed time, 0.839s cpu time, 0.056s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Nielson_VCGiTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  left :: "'a tree => 'a tree"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  right :: "'a tree => 'a tree"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "Draft.AExp"
### 0.705s elapsed time, 2.792s cpu time, 0.300s GC time
Loading theory "Draft.BExp" (required by "Draft.Nielson_VCGiTemplates" via "Draft.Nielson_VCGi" via "Draft.Nielson_Hoare" via "Draft.Big_StepT" via "Draft.Big_Step" via "Draft.Com")
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.890s elapsed time, 3.513s cpu time, 0.392s GC time
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.055s elapsed time, 4.001s cpu time, 0.937s GC time
Found termination order: "size <*mlex*> {}"
"12"
  :: "int"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
"12"
  :: "int"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.BExp"
### 0.798s elapsed time, 2.828s cpu time, 0.732s GC time
Loading theory "Draft.Com" (required by "Draft.Nielson_VCGiTemplates" via "Draft.Nielson_VCGi" via "Draft.Nielson_Hoare" via "Draft.Big_StepT" via "Draft.Big_Step")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
"True"
  :: "bool"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Com"
### 0.536s elapsed time, 1.305s cpu time, 0.110s GC time
Loading theory "Draft.Big_Step" (required by "Draft.Nielson_VCGiTemplates" via "Draft.Nielson_VCGi" via "Draft.Nielson_Hoare" via "Draft.Big_StepT")
Loading theory "Draft.Vars" (required by "Draft.Nielson_VCGiTemplates" via "Draft.Nielson_VCGi")
Proofs for inductive predicate(s) "big_step"
  Proving monotonicity ...
class vars = type +
  fixes vars :: "'a => char list set"
instantiation
  aexp :: vars
  vars_aexp == vars :: aexp => char list set
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.034s elapsed time, 6.767s cpu time, 1.116s GC time
Loading theory "Draft.Templates" (required by "Draft.Nielson_VCGiTemplates" via "Draft.ExtrEqs")
instantiation
  bexp :: vars
  vars_bexp == vars :: bexp => char list set
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.076s elapsed time, 0.285s cpu time, 0.049s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Nielson_VCGiTemplates")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
"{''x'', ''y''}"
  :: "char list set"
### theory "Draft.Big_Step"
### 0.382s elapsed time, 1.366s cpu time, 0.124s GC time
Loading theory "Draft.Big_StepT" (required by "Draft.Nielson_VCGiTemplates" via "Draft.Nielson_VCGi" via "Draft.Nielson_Hoare")
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "big_step_t"
instantiation
  com :: vars
  vars_com == vars :: com => char list set
  Proving monotonicity ...
### theory "Draft.Vars"
### 0.442s elapsed time, 1.596s cpu time, 0.124s GC time
"{''y'', ''z'', ''x''}"
  :: "char list set"
"{_}"
  :: "(char list => int) set"
"{[2]}"
  :: "int list set"
"{[42]}"
  :: "int list set"
[| ?x1.0 \<Rightarrow> ?x2.0; !!s. ?P (SKIP, s) s;
   !!x a s. ?P (x ::= a, s) (s(x := aval a s));
   !!c\<^sub>1 s\<^sub>1 s\<^sub>2 c\<^sub>2 s\<^sub>3.
      [| (c\<^sub>1, s\<^sub>1) \<Rightarrow> s\<^sub>2;
         ?P (c\<^sub>1, s\<^sub>1) s\<^sub>2;
         (c\<^sub>2, s\<^sub>2) \<Rightarrow> s\<^sub>3;
         ?P (c\<^sub>2, s\<^sub>2) s\<^sub>3 |]
      ==> ?P (c\<^sub>1;; c\<^sub>2, s\<^sub>1) s\<^sub>3;
   !!b s c\<^sub>1 t c\<^sub>2.
      [| bval b s; (c\<^sub>1, s) \<Rightarrow> t; ?P (c\<^sub>1, s) t |]
      ==> ?P (IF b THEN c\<^sub>1 ELSE c\<^sub>2, s) t;
   !!b s c\<^sub>2 t c\<^sub>1.
      [| ~ bval b s; (c\<^sub>2, s) \<Rightarrow> t; ?P (c\<^sub>2, s) t |]
      ==> ?P (IF b THEN c\<^sub>1 ELSE c\<^sub>2, s) t;
   !!b s c. ~ bval b s ==> ?P (WHILE b DO c, s) s;
   !!b s\<^sub>1 c s\<^sub>2 s\<^sub>3.
      [| bval b s\<^sub>1; (c, s\<^sub>1) \<Rightarrow> s\<^sub>2;
         ?P (c, s\<^sub>1) s\<^sub>2;
         (WHILE b DO c, s\<^sub>2) \<Rightarrow> s\<^sub>3;
         ?P (WHILE b DO c, s\<^sub>2) s\<^sub>3 |]
      ==> ?P (WHILE b DO c, s\<^sub>1) s\<^sub>3 |]
==> ?P ?x1.0 ?x2.0
[| (?x1a, ?x1b) \<Rightarrow> ?x2a; !!s. ?P SKIP s s;
   !!x a s. ?P (x ::= a) s (s(x := aval a s));
   !!c\<^sub>1 s\<^sub>1 s\<^sub>2 c\<^sub>2 s\<^sub>3.
      [| (c\<^sub>1, s\<^sub>1) \<Rightarrow> s\<^sub>2;
         ?P c\<^sub>1 s\<^sub>1 s\<^sub>2;
         (c\<^sub>2, s\<^sub>2) \<Rightarrow> s\<^sub>3;
         ?P c\<^sub>2 s\<^sub>2 s\<^sub>3 |]
      ==> ?P (c\<^sub>1;; c\<^sub>2) s\<^sub>1 s\<^sub>3;
   !!b s c\<^sub>1 t c\<^sub>2.
      [| bval b s; (c\<^sub>1, s) \<Rightarrow> t; ?P c\<^sub>1 s t |]
      ==> ?P (IF b THEN c\<^sub>1 ELSE c\<^sub>2) s t;
   !!b s c\<^sub>2 t c\<^sub>1.
      [| ~ bval b s; (c\<^sub>2, s) \<Rightarrow> t; ?P c\<^sub>2 s t |]
      ==> ?P (IF b THEN c\<^sub>1 ELSE c\<^sub>2) s t;
   !!b s c. ~ bval b s ==> ?P (WHILE b DO c) s s;
   !!b s\<^sub>1 c s\<^sub>2 s\<^sub>3.
      [| bval b s\<^sub>1; (c, s\<^sub>1) \<Rightarrow> s\<^sub>2;
         ?P c s\<^sub>1 s\<^sub>2;
         (WHILE b DO c, s\<^sub>2) \<Rightarrow> s\<^sub>3;
         ?P (WHILE b DO c) s\<^sub>2 s\<^sub>3 |]
      ==> ?P (WHILE b DO c) s\<^sub>1 s\<^sub>3 |]
==> ?P ?x1a ?x1b ?x2a
[| (SKIP, ?s) \<Rightarrow> ?t; ?t = ?s ==> ?P |] ==> ?P
[| (?x ::= ?a, ?s) \<Rightarrow> ?t; ?t = ?s(?x := aval ?a ?s) ==> ?P |]
==> ?P
[| (?c1.0;; ?c2.0, ?s1.0) \<Rightarrow> ?s3.0;
   !!s\<^sub>2.
      [| (?c1.0, ?s1.0) \<Rightarrow> s\<^sub>2;
         (?c2.0, s\<^sub>2) \<Rightarrow> ?s3.0 |]
      ==> ?P |]
==> ?P
[| (IF ?b THEN ?c1.0 ELSE ?c2.0, ?s) \<Rightarrow> ?t;
   [| bval ?b ?s; (?c1.0, ?s) \<Rightarrow> ?t |] ==> ?P;
   [| ~ bval ?b ?s; (?c2.0, ?s) \<Rightarrow> ?t |] ==> ?P |]
==> ?P
[| (WHILE ?b DO ?c, ?s) \<Rightarrow> ?t;
   [| ?t = ?s; ~ bval ?b ?s |] ==> ?P;
   !!s\<^sub>2.
      [| bval ?b ?s; (?c, ?s) \<Rightarrow> s\<^sub>2;
         (WHILE ?b DO ?c, s\<^sub>2) \<Rightarrow> ?t |]
      ==> ?P |]
==> ?P
[| bval ?b ?s; (?c\<^sub>1, ?s) \<Rightarrow> ?t |]
==> (IF ?b THEN ?c\<^sub>1 ELSE ?c\<^sub>2, ?s) \<Rightarrow> ?t
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
"{[15, 13]}"
  :: "int list set"
### theory "Draft.ExtrEqs"
### 0.769s elapsed time, 3.015s cpu time, 0.195s GC time
### Ambiguous input (line 92 of "$AFP/Hoare_Time/Big_StepT.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Big_StepT.big_step_t"
###       ("_tuple" ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###         ("_tuple_arg" ("_position" s)))
###       ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero"))
###       ("_position" s'))
###     ("\<^const>HOL.eq" ("_position" s')
###       ("_Update" ("_position" s)
###         ("_updbind" ("_position" x)
###           ("_applC" ("_position" aval)
###             ("_cargs" ("_position" a) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Big_StepT.big_step_t"
###     ("_tuple" ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###       ("_tuple_arg" ("_position" s)))
###     ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero"))
###     ("\<^const>HOL.iff" ("_position" s')
###       ("\<^const>HOL.eq" ("_position" s')
###         ("_Update" ("_position" s)
###           ("_updbind" ("_position" x)
###             ("_applC" ("_position" aval)
###               ("_cargs" ("_position" a) ("_position" s)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 191 of "$AFP/Hoare_Time/Big_StepT.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Big_StepT.big_step_t"
###       ("\<^const>HOL.Not"
###         ("_tuple" ("_position" SKIP) ("_tuple_arg" ("_position" s))))
###       ("_position" p) ("_position" t))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.not_equal" ("_position" s) ("_position" t))
###       ("\<^const>HOL.not_equal" ("_position" p)
###         ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.Not"
###       ("\<^const>Big_StepT.big_step_t"
###         ("_tuple" ("_position" SKIP) ("_tuple_arg" ("_position" s)))
###         ("_position" p) ("_position" t)))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.not_equal" ("_position" s) ("_position" t))
###       ("\<^const>HOL.not_equal" ("_position" p)
###         ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero"))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 210 of "$AFP/Hoare_Time/Big_StepT.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_The" ("_position" t)
###       ("\<^const>HOL.Ex_binder" ("_position" p)
###         ("\<^const>Big_StepT.big_step_t"
###           ("_tuple"
###             ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))
###             ("_tuple_arg" ("_position" s)))
###           ("_position" p) ("_position" t))))
###     ("_Update" ("_position" s)
###       ("_updbind" ("_position" x)
###         ("_applC" ("_position" aval)
###           ("_cargs" ("_position" e) ("_position" s)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Big_StepT.big_step_t"
###       ("_The" ("_position" t)
###         ("\<^const>HOL.Ex_binder" ("_position" p)
###           ("_tuple"
###             ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))
###             ("_tuple_arg" ("_position" s)))))
###       ("_position" p) ("_position" t))
###     ("_Update" ("_position" s)
###       ("_updbind" ("_position" x)
###         ("_applC" ("_position" aval)
###           ("_cargs" ("_position" e) ("_position" s)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_The" ("_position" t)
###       ("\<^const>Big_StepT.big_step_t"
###         ("\<^const>HOL.Ex_binder" ("_position" p)
###           ("_tuple"
###             ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))
###             ("_tuple_arg" ("_position" s))))
###         ("_position" p) ("_position" t)))
###     ("_Update" ("_position" s)
###       ("_updbind" ("_position" x)
###         ("_applC" ("_position" aval)
###           ("_cargs" ("_position" e) ("_position" s)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 215 of "$AFP/Hoare_Time/Big_StepT.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Big_StepT.big_step_t"
###       ("\<^const>HOL.Not"
###         ("_tuple"
###           ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))
###           ("_tuple_arg" ("_position" s))))
###       ("_position" p) ("_position" t))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.not_equal" ("_position" p)
###         ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero")))
###       ("\<^const>HOL.not_equal" ("_position" t)
###         ("_Update" ("_position" s)
###           ("_updbind" ("_position" x)
###             ("_applC" ("_position" aval)
###               ("_cargs" ("_position" e) ("_position" s)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.Not"
###       ("\<^const>Big_StepT.big_step_t"
###         ("_tuple"
###           ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))
###           ("_tuple_arg" ("_position" s)))
###         ("_position" p) ("_position" t)))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.not_equal" ("_position" p)
###         ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero")))
###       ("\<^const>HOL.not_equal" ("_position" t)
###         ("_Update" ("_position" s)
###           ("_updbind" ("_position" x)
###             ("_applC" ("_position" aval)
###               ("_cargs" ("_position" e) ("_position" s)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 220 of "$AFP/Hoare_Time/Big_StepT.thy") produces 9 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("\<^const>Big_StepT.big_step_t"
###             ("_tuple" ("_position" c1) ("_tuple_arg" ("_position" s)))
###             ("_position" n) ("_position" a)))))
###     ("_The" ("_position" n)
###       ("\<^const>HOL.Ex_binder" ("_position" a)
###         ("\<^const>Big_StepT.big_step_t"
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))
###           ("_position" n) ("_position" a))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("\<^const>Big_StepT.big_step_t"
###         ("_The" ("_position" n)
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c1) ("_tuple_arg" ("_position" s)))))
###         ("_position" n) ("_position" a)))
###     ("_The" ("_position" n)
###       ("\<^const>HOL.Ex_binder" ("_position" a)
###         ("\<^const>Big_StepT.big_step_t"
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))
###           ("_position" n) ("_position" a))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>Big_StepT.big_step_t"
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c1) ("_tuple_arg" ("_position" s))))
###           ("_position" n) ("_position" a))))
###     ("_The" ("_position" n)
###       ("\<^const>HOL.Ex_binder" ("_position" a)
###         ("\<^const>Big_StepT.big_step_t"
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))
###           ("_position" n) ("_position" a))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("\<^const>Big_StepT.big_step_t"
###             ("_tuple" ("_position" c1) ("_tuple_arg" ("_position" s)))
###             ("_position" n) ("_position" a)))))
###     ("\<^const>Big_StepT.big_step_t"
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))))
###       ("_position" n) ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("\<^const>Big_StepT.big_step_t"
###         ("_The" ("_position" n)
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c1) ("_tuple_arg" ("_position" s)))))
###         ("_position" n) ("_position" a)))
###     ("\<^const>Big_StepT.big_step_t"
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))))
###       ("_position" n) ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>Big_StepT.big_step_t"
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c1) ("_tuple_arg" ("_position" s))))
###           ("_position" n) ("_position" a))))
###     ("\<^const>Big_StepT.big_step_t"
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))))
###       ("_position" n) ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("\<^const>Big_StepT.big_step_t"
###             ("_tuple" ("_position" c1) ("_tuple_arg" ("_position" s)))
###             ("_position" n) ("_position" a)))))
###     ("_The" ("_position" n)
###       ("\<^const>Big_StepT.big_step_t"
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s))))
###         ("_position" n) ("_position" a)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("\<^const>Big_StepT.big_step_t"
###         ("_The" ("_position" n)
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c1) ("_tuple_arg" ("_position" s)))))
###         ("_position" n) ("_position" a)))
###     ("_The" ("_position" n)
###       ("\<^const>Big_StepT.big_step_t"
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s))))
###         ("_position" n) ("_position" a)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>Big_StepT.big_step_t"
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c1) ("_tuple_arg" ("_position" s))))
###           ("_position" n) ("_position" a))))
###     ("_The" ("_position" n)
###       ("\<^const>Big_StepT.big_step_t"
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s))))
###         ("_position" n) ("_position" a)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 232 of "$AFP/Hoare_Time/Big_StepT.thy") produces 9 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("\<^const>Big_StepT.big_step_t"
###             ("_tuple" ("_position" c2) ("_tuple_arg" ("_position" s)))
###             ("_position" n) ("_position" a)))))
###     ("_The" ("_position" n)
###       ("\<^const>HOL.Ex_binder" ("_position" a)
###         ("\<^const>Big_StepT.big_step_t"
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))
###           ("_position" n) ("_position" a))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("\<^const>Big_StepT.big_step_t"
###         ("_The" ("_position" n)
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c2) ("_tuple_arg" ("_position" s)))))
###         ("_position" n) ("_position" a)))
###     ("_The" ("_position" n)
###       ("\<^const>HOL.Ex_binder" ("_position" a)
###         ("\<^const>Big_StepT.big_step_t"
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))
###           ("_position" n) ("_position" a))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>Big_StepT.big_step_t"
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c2) ("_tuple_arg" ("_position" s))))
###           ("_position" n) ("_position" a))))
###     ("_The" ("_position" n)
###       ("\<^const>HOL.Ex_binder" ("_position" a)
###         ("\<^const>Big_StepT.big_step_t"
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))
###           ("_position" n) ("_position" a))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("\<^const>Big_StepT.big_step_t"
###             ("_tuple" ("_position" c2) ("_tuple_arg" ("_position" s)))
###             ("_position" n) ("_position" a)))))
###     ("\<^const>Big_StepT.big_step_t"
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))))
###       ("_position" n) ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("\<^const>Big_StepT.big_step_t"
###         ("_The" ("_position" n)
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c2) ("_tuple_arg" ("_position" s)))))
###         ("_position" n) ("_position" a)))
###     ("\<^const>Big_StepT.big_step_t"
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))))
###       ("_position" n) ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>Big_StepT.big_step_t"
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c2) ("_tuple_arg" ("_position" s))))
###           ("_position" n) ("_position" a))))
###     ("\<^const>Big_StepT.big_step_t"
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s)))))
###       ("_position" n) ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("\<^const>Big_StepT.big_step_t"
###             ("_tuple" ("_position" c2) ("_tuple_arg" ("_position" s)))
###             ("_position" n) ("_position" a)))))
###     ("_The" ("_position" n)
###       ("\<^const>Big_StepT.big_step_t"
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s))))
###         ("_position" n) ("_position" a)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("\<^const>Big_StepT.big_step_t"
###         ("_The" ("_position" n)
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c2) ("_tuple_arg" ("_position" s)))))
###         ("_position" n) ("_position" a)))
###     ("_The" ("_position" n)
###       ("\<^const>Big_StepT.big_step_t"
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s))))
###         ("_position" n) ("_position" a)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Suc)
###       ("_The" ("_position" n)
###         ("\<^const>Big_StepT.big_step_t"
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c2) ("_tuple_arg" ("_position" s))))
###           ("_position" n) ("_position" a))))
###     ("_The" ("_position" n)
###       ("\<^const>Big_StepT.big_step_t"
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("_tuple"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###               ("_position" c2))
###             ("_tuple_arg" ("_position" s))))
###         ("_position" n) ("_position" a)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Big_StepT"
### 0.896s elapsed time, 3.207s cpu time, 0.166s GC time
Loading theory "Draft.Nielson_Hoare" (required by "Draft.Nielson_VCGiTemplates" via "Draft.Nielson_VCGi")
### Ambiguous input (line 49 of "$AFP/Hoare_Time/Nielson_Hoare.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" s)
###     ("_list"
###       ("\<^const>Fields.inverse_class.inverse_divide" ("_position" a)
###         ("_position" x))))
###   ("_Update" ("_position" s)
###     ("_updbind" ("_position" x)
###       ("_applC" ("_position" aval)
###         ("_cargs" ("_position" a) ("_position" s))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>state_subst" ("_position" s) ("_position" a) ("_position" x))
###   ("_Update" ("_position" s)
###     ("_updbind" ("_position" x)
###       ("_applC" ("_position" aval)
###         ("_cargs" ("_position" a) ("_position" s))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 64 of "$AFP/Hoare_Time/Nielson_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>hoare1"
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" l)
###           ("_applC" ("_position" s)
###             ("_list"
###               ("\<^const>Fields.inverse_class.inverse_divide"
###                 ("_position" a) ("_position" x)))))))
###     ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero")))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>hoare1"
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" l)
###           ("\<^const>Nielson_Hoare.state_subst" ("_position" s)
###             ("_position" a) ("_position" x)))))
###     ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero")))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "hoare1"
  Proving monotonicity ...
"{[2]}"
  :: "int list set"
"{[42]}"
  :: "int list set"
[| (SKIP, ?s) \<Rightarrow> ?x \<Down> ?t;
   [| ?x = Suc 0; ?t = ?s |] ==> ?P |]
==> ?P
[| (?x ::= ?a, ?s) \<Rightarrow> ?p \<Down> ?t;
   [| ?p = Suc 0; ?t = ?s(?x := aval ?a ?s) |] ==> ?P |]
==> ?P
[| (?c1.0;; ?c2.0, ?s1.0) \<Rightarrow> ?p \<Down> ?s3.0;
   !!x s2 y.
      [| ?p = x + y; (?c1.0, ?s1.0) \<Rightarrow> x \<Down> s2;
         (?c2.0, s2) \<Rightarrow> y \<Down> ?s3.0 |]
      ==> ?P |]
==> ?P
[| (IF ?b THEN ?c1.0 ELSE ?c2.0, ?s) \<Rightarrow> ?x \<Down> ?t;
   !!x. [| ?x = Suc x; bval ?b ?s; (?c1.0, ?s) \<Rightarrow> x \<Down> ?t |]
        ==> ?P;
   !!x. [| ?x = Suc x; ~ bval ?b ?s;
           (?c2.0, ?s) \<Rightarrow> x \<Down> ?t |]
        ==> ?P |]
==> ?P
[| (WHILE ?b DO ?c, ?s) \<Rightarrow> ?x \<Down> ?t;
   [| ?x = Suc 0; ?t = ?s; ~ bval ?b ?s |] ==> ?P;
   !!x s2 y.
      [| bval ?b ?s; (?c, ?s) \<Rightarrow> x \<Down> s2;
         (WHILE ?b DO ?c, s2) \<Rightarrow> y \<Down> ?t;
         Suc (x + y) = ?x |]
      ==> ?P |]
==> ?P
"{(_, 1)}"
  :: "((char list => int) * nat) set"
### Ambiguous input (line 113 of "$AFP/Hoare_Time/Nielson_Hoare.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" l) ("_position" s))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" P)
###           ("_cargs" ("_position" l) ("_position" s)))
###         ("_applC" ("_position" Q)
###           ("_cargs" ("_position" l)
###             ("\<^const>Nielson_Hoare.state_subst" ("_position" s)
###               ("_position" a) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nielson_Hoare.hoare1" ("_position" P)
###       ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###       ("_lambda" ("_position" s) ("\<^const>Groups.one_class.one"))
###       ("_position" Q))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" l) ("_position" s))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" P)
###           ("_cargs" ("_position" l) ("_position" s)))
###         ("_applC" ("_position" Q)
###           ("_cargs" ("_position" l)
###             ("_applC" ("_position" s)
###               ("_list"
###                 ("\<^const>Fields.inverse_class.inverse_divide"
###                   ("_position" a) ("_position" x)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nielson_Hoare.hoare1" ("_position" P)
###       ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###       ("_lambda" ("_position" s) ("\<^const>Groups.one_class.one"))
###       ("_position" Q))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 315 of "$AFP/Hoare_Time/Nielson_Hoare.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>wp1") ("_cargs" ("_position" c) ("_position" Q)))
###     ("\<^const>HOL.conj"
###       ("\<^const>Big_StepT.big_step_t"
###         ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" t) ("_position" p))
###             ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))))
###         ("_position" p) ("_position" t))
###       ("_applC" ("_position" Q)
###         ("_cargs" ("_position" l) ("_position" t))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>wp1") ("_cargs" ("_position" c) ("_position" Q)))
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" t) ("_position" p))
###         ("\<^const>HOL.conj"
###           ("\<^const>Big_StepT.big_step_t"
###             ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###             ("_position" p) ("_position" t))
###           ("_applC" ("_position" Q)
###             ("_cargs" ("_position" l) ("_position" t))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>wp1") ("_cargs" ("_position" c) ("_position" Q)))
###     ("\<^const>Big_StepT.big_step_t"
###       ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###         ("\<^const>HOL.Ex_binder" ("_idts" ("_position" t) ("_position" p))
###           ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))))
###       ("_position" p)
###       ("\<^const>HOL.conj" ("_position" t)
###         ("_applC" ("_position" Q)
###           ("_cargs" ("_position" l) ("_position" t)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>wp1") ("_cargs" ("_position" c) ("_position" Q)))
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" t) ("_position" p))
###         ("\<^const>Big_StepT.big_step_t"
###           ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###           ("_position" p)
###           ("\<^const>HOL.conj" ("_position" t)
###             ("_applC" ("_position" Q)
###               ("_cargs" ("_position" l) ("_position" t)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>wp1") ("_cargs" ("_position" c) ("_position" Q)))
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("\<^const>Big_StepT.big_step_t"
###         ("\<^const>HOL.Ex_binder" ("_idts" ("_position" t) ("_position" p))
###           ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s))))
###         ("_position" p)
###         ("\<^const>HOL.conj" ("_position" t)
###           ("_applC" ("_position" Q)
###             ("_cargs" ("_position" l) ("_position" t))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>wp1") ("_cargs" ("_position" c) ("_position" Q)))
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("\<^const>HOL.conj"
###         ("\<^const>Big_StepT.big_step_t"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" t) ("_position" p))
###             ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s))))
###           ("_position" p) ("_position" t))
###         ("_applC" ("_position" Q)
###           ("_cargs" ("_position" l) ("_position" t)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 334 of "$AFP/Hoare_Time/Nielson_Hoare.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" prec) ("_cargs" ("_position" c) ("_position" E)))
###   ("_lambda" ("_position" s)
###     ("_applC" ("_position" E)
###       ("_The" ("_position" t)
###         ("\<^const>HOL.Ex_binder" ("_position" p)
###           ("\<^const>Big_StepT.big_step_t"
###             ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###             ("_position" p) ("_position" t)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" prec) ("_cargs" ("_position" c) ("_position" E)))
###   ("_lambda" ("_position" s)
###     ("_applC" ("_position" E)
###       ("_The" ("_position" t)
###         ("\<^const>Big_StepT.big_step_t"
###           ("\<^const>HOL.Ex_binder" ("_position" p)
###             ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s))))
###           ("_position" p) ("_position" t))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 377 of "$AFP/Hoare_Time/Nielson_Hoare.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Big_StepT.big_step_t"
###       ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###       ("_position" P) ("_position" T)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_The" ("_position" n)
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("\<^const>Big_StepT.big_step_t"
###             ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###             ("_position" n) ("_position" a))))
###       ("_position" P))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Big_StepT.big_step_t"
###       ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###       ("_position" P) ("_position" T)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Big_StepT.big_step_t"
###         ("_The" ("_position" n)
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))))
###         ("_position" n) ("_position" a))
###       ("_position" P))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Big_StepT.big_step_t"
###       ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###       ("_position" P) ("_position" T)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_The" ("_position" n)
###         ("\<^const>Big_StepT.big_step_t"
###           ("\<^const>HOL.Ex_binder" ("_position" a)
###             ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s))))
###           ("_position" n) ("_position" a)))
###       ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 380 of "$AFP/Hoare_Time/Nielson_Hoare.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Big_StepT.big_step_t"
###       ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###       ("_position" P) ("_position" T)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_The" ("_position" a)
###         ("\<^const>HOL.Ex_binder" ("_position" n)
###           ("\<^const>Big_StepT.big_step_t"
###             ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###             ("_position" n) ("_position" a))))
###       ("_position" T))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Big_StepT.big_step_t"
###       ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###       ("_position" P) ("_position" T)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Big_StepT.big_step_t"
###         ("_The" ("_position" a)
###           ("\<^const>HOL.Ex_binder" ("_position" n)
###             ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))))
###         ("_position" n) ("_position" a))
###       ("_position" T))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Big_StepT.big_step_t"
###       ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s)))
###       ("_position" P) ("_position" T)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_The" ("_position" a)
###         ("\<^const>Big_StepT.big_step_t"
###           ("\<^const>HOL.Ex_binder" ("_position" n)
###             ("_tuple" ("_position" c) ("_tuple_arg" ("_position" s))))
###           ("_position" n) ("_position" a)))
###       ("_position" T))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Nielson_Hoare"
### 0.325s elapsed time, 1.009s cpu time, 0.076s GC time
Loading theory "Draft.Nielson_VCGi" (required by "Draft.Nielson_VCGiTemplates")
"{[15, 13]}"
  :: "int list set"
### Ambiguous input (line 23 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip) ("\<^const>Nielson_VCGi.acom.Askip"))
###     ("\<^const>Nielson_VCGi.acom.Askip")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip) ("\<^const>Com.com.SKIP"))
###     ("\<^const>Nielson_VCGi.acom.Askip")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip) ("\<^const>Nielson_VCGi.acom.Askip"))
###     ("\<^const>Com.com.SKIP")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip) ("\<^const>Com.com.SKIP"))
###     ("\<^const>Com.com.SKIP")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 24 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>Nielson_VCGi.acom.Aassign" ("_position" x)
###         ("_position" a)))
###     ("\<^const>Nielson_VCGi.acom.Aassign" ("_position" x) ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>Com.com.Assign" ("_position" x) ("_position" a)))
###     ("\<^const>Nielson_VCGi.acom.Aassign" ("_position" x) ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>Nielson_VCGi.acom.Aassign" ("_position" x)
###         ("_position" a)))
###     ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>Com.com.Assign" ("_position" x) ("_position" a)))
###     ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 25 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>Nielson_VCGi.acom.Aseq" ("_position" C\<^sub>1)
###         ("_position" C\<^sub>2)))
###     ("\<^const>Nielson_VCGi.acom.Aseq"
###       ("_applC" ("_position" strip) ("_position" C\<^sub>1))
###       ("_applC" ("_position" strip) ("_position" C\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>Com.com.Seq" ("_position" C\<^sub>1)
###         ("_position" C\<^sub>2)))
###     ("\<^const>Nielson_VCGi.acom.Aseq"
###       ("_applC" ("_position" strip) ("_position" C\<^sub>1))
###       ("_applC" ("_position" strip) ("_position" C\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>Nielson_VCGi.acom.Aseq" ("_position" C\<^sub>1)
###         ("_position" C\<^sub>2)))
###     ("\<^const>Com.com.Seq"
###       ("_applC" ("_position" strip) ("_position" C\<^sub>1))
###       ("_applC" ("_position" strip) ("_position" C\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>Com.com.Seq" ("_position" C\<^sub>1)
###         ("_position" C\<^sub>2)))
###     ("\<^const>Com.com.Seq"
###       ("_applC" ("_position" strip) ("_position" C\<^sub>1))
###       ("_applC" ("_position" strip) ("_position" C\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 26 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>Com.com.If" ("_position" b) ("_position" C\<^sub>1)
###         ("_position" C\<^sub>2)))
###     ("\<^const>Com.com.If" ("_position" b)
###       ("_applC" ("_position" strip) ("_position" C\<^sub>1))
###       ("_applC" ("_position" strip) ("_position" C\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>Nielson_VCGi.acom.Aif" ("_position" b)
###         ("_position" C\<^sub>1) ("_position" C\<^sub>2)))
###     ("\<^const>Com.com.If" ("_position" b)
###       ("_applC" ("_position" strip) ("_position" C\<^sub>1))
###       ("_applC" ("_position" strip) ("_position" C\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>Com.com.If" ("_position" b) ("_position" C\<^sub>1)
###         ("_position" C\<^sub>2)))
###     ("\<^const>Nielson_VCGi.acom.Aif" ("_position" b)
###       ("_applC" ("_position" strip) ("_position" C\<^sub>1))
###       ("_applC" ("_position" strip) ("_position" C\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>Nielson_VCGi.acom.Aif" ("_position" b)
###         ("_position" C\<^sub>1) ("_position" C\<^sub>2)))
###     ("\<^const>Nielson_VCGi.acom.Aif" ("_position" b)
###       ("_applC" ("_position" strip) ("_position" C\<^sub>1))
###       ("_applC" ("_position" strip) ("_position" C\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 44 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" varacom)
###       ("\<^const>Nielson_VCGi.acom.Aseq" ("_position" C\<^sub>1)
###         ("_position" C\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" varacom) ("_position" C\<^sub>1))
###       ("_applC" ("_position" varacom) ("_position" C\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" varacom)
###       ("\<^const>Com.com.Seq" ("_position" C\<^sub>1)
###         ("_position" C\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" varacom) ("_position" C\<^sub>1))
###       ("_applC" ("_position" varacom) ("_position" C\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 45 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" varacom)
###       ("\<^const>Com.com.If" ("_position" b) ("_position" C\<^sub>1)
###         ("_position" C\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" varacom) ("_position" C\<^sub>1))
###       ("_applC" ("_position" varacom) ("_position" C\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" varacom)
###       ("\<^const>Nielson_VCGi.acom.Aif" ("_position" b)
###         ("_position" C\<^sub>1) ("_position" C\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" varacom) ("_position" C\<^sub>1))
###       ("_applC" ("_position" varacom) ("_position" C\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 52 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" varnewacom)
###       ("\<^const>Nielson_VCGi.acom.Aseq" ("_position" C\<^sub>1)
###         ("_position" C\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" varnewacom) ("_position" C\<^sub>1))
###       ("_applC" ("_position" varnewacom) ("_position" C\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" varnewacom)
###       ("\<^const>Com.com.Seq" ("_position" C\<^sub>1)
###         ("_position" C\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" varnewacom) ("_position" C\<^sub>1))
###       ("_applC" ("_position" varnewacom) ("_position" C\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 53 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" varnewacom)
###       ("\<^const>Com.com.If" ("_position" b) ("_position" C\<^sub>1)
###         ("_position" C\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" varnewacom) ("_position" C\<^sub>1))
###       ("_applC" ("_position" varnewacom) ("_position" C\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" varnewacom)
###       ("\<^const>Nielson_VCGi.acom.Aif" ("_position" b)
###         ("_position" C\<^sub>1) ("_position" C\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" varnewacom) ("_position" C\<^sub>1))
###       ("_applC" ("_position" varnewacom) ("_position" C\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 64 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" wf)
###       ("_cargs" ("\<^const>Com.com.SKIP") ("\<^const>Pure.dummy_pattern")))
###     ("_position" True)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" wf)
###       ("_cargs" ("\<^const>Nielson_VCGi.acom.Askip")
###         ("\<^const>Pure.dummy_pattern")))
###     ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 65 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" wf)
###       ("_cargs" ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###         ("\<^const>Pure.dummy_pattern")))
###     ("_position" True)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" wf)
###       ("_cargs"
###         ("\<^const>Nielson_VCGi.acom.Aassign" ("_position" x)
###           ("_position" a))
###         ("\<^const>Pure.dummy_pattern")))
###     ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 66 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" wf)
###       ("_cargs"
###         ("\<^const>Com.com.Seq" ("_position" C\<^sub>1)
###           ("_position" C\<^sub>2))
###         ("_position" S)))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" wf)
###         ("_cargs" ("_position" C\<^sub>1)
###           ("\<^const>Set.union" ("_position" S)
###             ("_applC" ("_position" varnewacom) ("_position" C\<^sub>2)))))
###       ("_applC" ("_position" wf)
###         ("_cargs" ("_position" C\<^sub>2) ("_position" S))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" wf)
###       ("_cargs"
###         ("\<^const>Nielson_VCGi.acom.Aseq" ("_position" C\<^sub>1)
###           ("_position" C\<^sub>2))
###         ("_position" S)))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" wf)
###         ("_cargs" ("_position" C\<^sub>1)
###           ("\<^const>Set.union" ("_position" S)
###             ("_applC" ("_position" varnewacom) ("_position" C\<^sub>2)))))
###       ("_applC" ("_position" wf)
###         ("_cargs" ("_position" C\<^sub>2) ("_position" S))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 67 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" wf)
###       ("_cargs"
###         ("\<^const>Nielson_VCGi.acom.Aif" ("_position" b)
###           ("_position" C\<^sub>1) ("_position" C\<^sub>2))
###         ("_position" S)))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" wf)
###         ("_cargs" ("_position" C\<^sub>1) ("_position" S)))
###       ("_applC" ("_position" wf)
###         ("_cargs" ("_position" C\<^sub>2) ("_position" S))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" wf)
###       ("_cargs"
###         ("\<^const>Com.com.If" ("_position" b) ("_position" C\<^sub>1)
###           ("_position" C\<^sub>2))
###         ("_position" S)))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" wf)
###         ("_cargs" ("_position" C\<^sub>1) ("_position" S)))
###       ("_applC" ("_position" wf)
###         ("_cargs" ("_position" C\<^sub>2) ("_position" S))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Ambiguous input (line 74 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" preT)
###       ("_cargs" ("\<^const>Com.com.SKIP") ("_position" e)))
###     ("_position" e)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" preT)
###       ("_cargs" ("\<^const>Nielson_VCGi.acom.Askip") ("_position" e)))
###     ("_position" e)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 75 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" preT)
###       ("_cargs" ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###         ("_position" e)))
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" e)
###         ("_Update" ("_position" s)
###           ("_updbind" ("_position" x)
###             ("_applC" ("_position" aval)
###               ("_cargs" ("_position" a) ("_position" s)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" preT)
###       ("_cargs"
###         ("\<^const>Nielson_VCGi.acom.Aassign" ("_position" x)
###           ("_position" a))
###         ("_position" e)))
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" e)
###         ("_Update" ("_position" s)
###           ("_updbind" ("_position" x)
###             ("_applC" ("_position" aval)
###               ("_cargs" ("_position" a) ("_position" s)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 76 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" preT)
###       ("_cargs"
###         ("\<^const>Com.com.Seq" ("_position" C\<^sub>1)
###           ("_position" C\<^sub>2))
###         ("_position" e)))
###     ("_applC" ("_position" preT)
###       ("_cargs" ("_position" C\<^sub>1)
###         ("_applC" ("_position" preT)
###           ("_cargs" ("_position" C\<^sub>2) ("_position" e)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" preT)
###       ("_cargs"
###         ("\<^const>Nielson_VCGi.acom.Aseq" ("_position" C\<^sub>1)
###           ("_position" C\<^sub>2))
###         ("_position" e)))
###     ("_applC" ("_position" preT)
###       ("_cargs" ("_position" C\<^sub>1)
###         ("_applC" ("_position" preT)
###           ("_cargs" ("_position" C\<^sub>2) ("_position" e)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 78 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" preT)
###       ("_cargs"
###         ("\<^const>Nielson_VCGi.acom.Aif" ("_position" b)
###           ("_position" C\<^sub>1) ("_position" C\<^sub>2))
###         ("_position" e)))
###     ("_lambda" ("_position" s)
###       ("\<^const>HOL.If"
###         ("_applC" ("_position" bval)
###           ("_cargs" ("_position" b) ("_position" s)))
###         ("_applC" ("_position" preT)
###           ("_cargs" ("_position" C\<^sub>1)
###             ("_cargs" ("_position" e) ("_position" s))))
###         ("_applC" ("_position" preT)
###           ("_cargs" ("_position" C\<^sub>2)
###             ("_cargs" ("_position" e) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" preT)
###       ("_cargs"
###         ("\<^const>Com.com.If" ("_position" b) ("_position" C\<^sub>1)
###           ("_position" C\<^sub>2))
###         ("_position" e)))
###     ("_lambda" ("_position" s)
###       ("\<^const>HOL.If"
###         ("_applC" ("_position" bval)
###           ("_cargs" ("_position" b) ("_position" s)))
###         ("_applC" ("_position" preT)
###           ("_cargs" ("_position" C\<^sub>1)
###             ("_cargs" ("_position" e) ("_position" s))))
###         ("_applC" ("_position" preT)
###           ("_cargs" ("_position" C\<^sub>2)
###             ("_cargs" ("_position" e) ("_position" s))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Ambiguous input (line 90 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" postQ)
###       ("_cargs" ("\<^const>Com.com.SKIP") ("_position" s)))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" postQ)
###       ("_cargs" ("\<^const>Nielson_VCGi.acom.Askip") ("_position" s)))
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 91 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" postQ)
###       ("_cargs" ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###         ("_position" s)))
###     ("_Update" ("_position" s)
###       ("_updbind" ("_position" x)
###         ("_applC" ("_position" aval)
###           ("_cargs" ("_position" a) ("_position" s)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" postQ)
###       ("_cargs"
###         ("\<^const>Nielson_VCGi.acom.Aassign" ("_position" x)
###           ("_position" a))
###         ("_position" s)))
###     ("_Update" ("_position" s)
###       ("_updbind" ("_position" x)
###         ("_applC" ("_position" aval)
###           ("_cargs" ("_position" a) ("_position" s)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 92 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" postQ)
###       ("_cargs"
###         ("\<^const>Com.com.Seq" ("_position" C\<^sub>1)
###           ("_position" C\<^sub>2))
###         ("_position" s)))
###     ("_applC" ("_position" postQ)
###       ("_cargs" ("_position" C\<^sub>2)
###         ("_applC" ("_position" postQ)
###           ("_cargs" ("_position" C\<^sub>1) ("_position" s)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" postQ)
###       ("_cargs"
###         ("\<^const>Nielson_VCGi.acom.Aseq" ("_position" C\<^sub>1)
###           ("_position" C\<^sub>2))
###         ("_position" s)))
###     ("_applC" ("_position" postQ)
###       ("_cargs" ("_position" C\<^sub>2)
###         ("_applC" ("_position" postQ)
###           ("_cargs" ("_position" C\<^sub>1) ("_position" s)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 94 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" postQ)
###       ("_cargs"
###         ("\<^const>Nielson_VCGi.acom.Aif" ("_position" b)
###           ("_position" C\<^sub>1) ("_position" C\<^sub>2))
###         ("_position" s)))
###     ("\<^const>HOL.If"
###       ("_applC" ("_position" bval)
###         ("_cargs" ("_position" b) ("_position" s)))
###       ("_applC" ("_position" postQ)
###         ("_cargs" ("_position" C\<^sub>1) ("_position" s)))
###       ("_applC" ("_position" postQ)
###         ("_cargs" ("_position" C\<^sub>2) ("_position" s))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" postQ)
###       ("_cargs"
###         ("\<^const>Com.com.If" ("_position" b) ("_position" C\<^sub>1)
###           ("_position" C\<^sub>2))
###         ("_position" s)))
###     ("\<^const>HOL.If"
###       ("_applC" ("_position" bval)
###         ("_cargs" ("_position" b) ("_position" s)))
###       ("_applC" ("_position" postQ)
###         ("_cargs" ("_position" C\<^sub>1) ("_position" s)))
###       ("_applC" ("_position" postQ)
###         ("_cargs" ("_position" C\<^sub>2) ("_position" s))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Ambiguous input (line 106 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fune)
###       ("_cargs" ("\<^const>Com.com.SKIP") ("_position" LV)))
###     ("_position" LV)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fune)
###       ("_cargs" ("\<^const>Nielson_VCGi.acom.Askip") ("_position" LV)))
###     ("_position" LV)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 107 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fune)
###       ("_cargs" ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###         ("_position" LV)))
###     ("\<^const>Set.union" ("_position" LV)
###       ("_applC" ("_position" vars) ("_position" a)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fune)
###       ("_cargs"
###         ("\<^const>Nielson_VCGi.acom.Aassign" ("_position" x)
###           ("_position" a))
###         ("_position" LV)))
###     ("\<^const>Set.union" ("_position" LV)
###       ("_applC" ("_position" vars) ("_position" a)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 108 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fune)
###       ("_cargs"
###         ("\<^const>Com.com.Seq" ("_position" C\<^sub>1)
###           ("_position" C\<^sub>2))
###         ("_position" LV)))
###     ("_applC" ("_position" fune)
###       ("_cargs" ("_position" C\<^sub>1)
###         ("_applC" ("_position" fune)
###           ("_cargs" ("_position" C\<^sub>2) ("_position" LV)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fune)
###       ("_cargs"
###         ("\<^const>Nielson_VCGi.acom.Aseq" ("_position" C\<^sub>1)
###           ("_position" C\<^sub>2))
###         ("_position" LV)))
###     ("_applC" ("_position" fune)
###       ("_cargs" ("_position" C\<^sub>1)
###         ("_applC" ("_position" fune)
###           ("_cargs" ("_position" C\<^sub>2) ("_position" LV)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 110 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fune)
###       ("_cargs"
###         ("\<^const>Nielson_VCGi.acom.Aif" ("_position" b)
###           ("_position" C\<^sub>1) ("_position" C\<^sub>2))
###         ("_position" LV)))
###     ("\<^const>Set.union"
###       ("\<^const>Set.union" ("_applC" ("_position" vars) ("_position" b))
###         ("_applC" ("_position" fune)
###           ("_cargs" ("_position" C\<^sub>1) ("_position" LV))))
###       ("_applC" ("_position" fune)
###         ("_cargs" ("_position" C\<^sub>2) ("_position" LV))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fune)
###       ("_cargs"
###         ("\<^const>Com.com.If" ("_position" b) ("_position" C\<^sub>1)
###           ("_position" C\<^sub>2))
###         ("_position" LV)))
###     ("\<^const>Set.union"
###       ("\<^const>Set.union" ("_applC" ("_position" vars) ("_position" b))
###         ("_applC" ("_position" fune)
###           ("_cargs" ("_position" C\<^sub>1) ("_position" LV))))
###       ("_applC" ("_position" fune)
###         ("_cargs" ("_position" C\<^sub>2) ("_position" LV))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
### Ambiguous input (line 188 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" pre)
###       ("_cargs" ("\<^const>Com.com.SKIP") ("_position" Q)))
###     ("_position" Q)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" pre)
###       ("_cargs" ("\<^const>Nielson_VCGi.acom.Askip") ("_position" Q)))
###     ("_position" Q)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 189 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" pre)
###       ("_cargs" ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###         ("_position" Q)))
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("_applC" ("_position" Q)
###         ("_cargs" ("_position" l)
###           ("_Update" ("_position" s)
###             ("_updbind" ("_position" x)
###               ("_applC" ("_position" aval)
###                 ("_cargs" ("_position" a) ("_position" s))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" pre)
###       ("_cargs"
###         ("\<^const>Nielson_VCGi.acom.Aassign" ("_position" x)
###           ("_position" a))
###         ("_position" Q)))
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("_applC" ("_position" Q)
###         ("_cargs" ("_position" l)
###           ("_Update" ("_position" s)
###             ("_updbind" ("_position" x)
###               ("_applC" ("_position" aval)
###                 ("_cargs" ("_position" a) ("_position" s))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 190 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" pre)
###       ("_cargs"
###         ("\<^const>Com.com.Seq" ("_position" C\<^sub>1)
###           ("_position" C\<^sub>2))
###         ("_position" Q)))
###     ("_applC" ("_position" pre)
###       ("_cargs" ("_position" C\<^sub>1)
###         ("_applC" ("_position" pre)
###           ("_cargs" ("_position" C\<^sub>2) ("_position" Q)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" pre)
###       ("_cargs"
###         ("\<^const>Nielson_VCGi.acom.Aseq" ("_position" C\<^sub>1)
###           ("_position" C\<^sub>2))
###         ("_position" Q)))
###     ("_applC" ("_position" pre)
###       ("_cargs" ("_position" C\<^sub>1)
###         ("_applC" ("_position" pre)
###           ("_cargs" ("_position" C\<^sub>2) ("_position" Q)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 192 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" pre)
###       ("_cargs"
###         ("\<^const>Nielson_VCGi.acom.Aif" ("_position" b)
###           ("_position" C\<^sub>1) ("_position" C\<^sub>2))
###         ("_position" Q)))
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("\<^const>HOL.If"
###         ("_applC" ("_position" bval)
###           ("_cargs" ("_position" b) ("_position" s)))
###         ("_applC" ("_position" pre)
###           ("_cargs" ("_position" C\<^sub>1)
###             ("_cargs" ("_position" Q)
###               ("_cargs" ("_position" l) ("_position" s)))))
###         ("_applC" ("_position" pre)
###           ("_cargs" ("_position" C\<^sub>2)
###             ("_cargs" ("_position" Q)
###               ("_cargs" ("_position" l) ("_position" s)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" pre)
###       ("_cargs"
###         ("\<^const>Com.com.If" ("_position" b) ("_position" C\<^sub>1)
###           ("_position" C\<^sub>2))
###         ("_position" Q)))
###     ("_lambda" ("_pttrns" ("_position" l) ("_position" s))
###       ("\<^const>HOL.If"
###         ("_applC" ("_position" bval)
###           ("_cargs" ("_position" b) ("_position" s)))
###         ("_applC" ("_position" pre)
###           ("_cargs" ("_position" C\<^sub>1)
###             ("_cargs" ("_position" Q)
###               ("_cargs" ("_position" l) ("_position" s)))))
###         ("_applC" ("_position" pre)
###           ("_cargs" ("_position" C\<^sub>2)
###             ("_cargs" ("_position" Q)
###               ("_cargs" ("_position" l) ("_position" s)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Ambiguous input (line 198 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" qdeps)
###       ("_cargs" ("\<^const>Com.com.SKIP") ("_position" LV)))
###     ("_position" LV)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" qdeps)
###       ("_cargs" ("\<^const>Nielson_VCGi.acom.Askip") ("_position" LV)))
###     ("_position" LV)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 199 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" qdeps)
###       ("_cargs" ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###         ("_position" LV)))
###     ("\<^const>Set.union" ("_position" LV)
###       ("_applC" ("_position" vars) ("_position" a)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" qdeps)
###       ("_cargs"
###         ("\<^const>Nielson_VCGi.acom.Aassign" ("_position" x)
###           ("_position" a))
###         ("_position" LV)))
###     ("\<^const>Set.union" ("_position" LV)
###       ("_applC" ("_position" vars) ("_position" a)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 200 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" qdeps)
###       ("_cargs"
###         ("\<^const>Com.com.Seq" ("_position" C\<^sub>1)
###           ("_position" C\<^sub>2))
###         ("_position" LV)))
###     ("_applC" ("_position" qdeps)
###       ("_cargs" ("_position" C\<^sub>1)
###         ("_applC" ("_position" qdeps)
###           ("_cargs" ("_position" C\<^sub>2) ("_position" LV)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" qdeps)
###       ("_cargs"
###         ("\<^const>Nielson_VCGi.acom.Aseq" ("_position" C\<^sub>1)
###           ("_position" C\<^sub>2))
###         ("_position" LV)))
###     ("_applC" ("_position" qdeps)
###       ("_cargs" ("_position" C\<^sub>1)
###         ("_applC" ("_position" qdeps)
###           ("_cargs" ("_position" C\<^sub>2) ("_position" LV)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 202 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" qdeps)
###       ("_cargs"
###         ("\<^const>Nielson_VCGi.acom.Aif" ("_position" b)
###           ("_position" C\<^sub>1) ("_position" C\<^sub>2))
###         ("_position" LV)))
###     ("\<^const>Set.union"
###       ("\<^const>Set.union" ("_applC" ("_position" vars) ("_position" b))
###         ("_applC" ("_position" qdeps)
###           ("_cargs" ("_position" C\<^sub>1) ("_position" LV))))
###       ("_applC" ("_position" qdeps)
###         ("_cargs" ("_position" C\<^sub>2) ("_position" LV))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" qdeps)
###       ("_cargs"
###         ("\<^const>Com.com.If" ("_position" b) ("_position" C\<^sub>1)
###           ("_position" C\<^sub>2))
###         ("_position" LV)))
###     ("\<^const>Set.union"
###       ("\<^const>Set.union" ("_applC" ("_position" vars) ("_position" b))
###         ("_applC" ("_position" qdeps)
###           ("_cargs" ("_position" C\<^sub>1) ("_position" LV))))
###       ("_applC" ("_position" qdeps)
###         ("_cargs" ("_position" C\<^sub>2) ("_position" LV))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Ambiguous input (line 313 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" time) ("\<^const>Nielson_VCGi.acom.Askip"))
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" time) ("\<^const>Com.com.SKIP"))
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 314 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" time)
###       ("\<^const>Nielson_VCGi.acom.Aassign" ("_position" x)
###         ("_position" a)))
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" time)
###       ("\<^const>Com.com.Assign" ("_position" x) ("_position" a)))
###     ("_lambda" ("_position" s)
###       ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 315 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" time)
###       ("\<^const>Nielson_VCGi.acom.Aseq" ("_position" C\<^sub>1)
###         ("_position" C\<^sub>2)))
###     ("_lambda" ("_position" s)
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" time)
###           ("_cargs" ("_position" C\<^sub>1) ("_position" s)))
###         ("_applC" ("_position" preT)
###           ("_cargs" ("_position" C\<^sub>1)
###             ("_cargs" ("_applC" ("_position" time) ("_position" C\<^sub>2))
###               ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" time)
###       ("\<^const>Com.com.Seq" ("_position" C\<^sub>1)
###         ("_position" C\<^sub>2)))
###     ("_lambda" ("_position" s)
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" time)
###           ("_cargs" ("_position" C\<^sub>1) ("_position" s)))
###         ("_applC" ("_position" preT)
###           ("_cargs" ("_position" C\<^sub>1)
###             ("_cargs" ("_applC" ("_position" time) ("_position" C\<^sub>2))
###               ("_position" s))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 317 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" time)
###       ("\<^const>Com.com.If" ("_position" b) ("_position" C\<^sub>1)
###         ("_position" C\<^sub>2)))
###     ("_lambda" ("_position" s)
###       ("\<^const>HOL.If"
###         ("_applC" ("_position" bval)
###           ("_cargs" ("_position" b) ("_position" s)))
###         ("\<^const>Groups.plus_class.plus" ("\<^const>Groups.one_class.one")
###           ("_applC" ("_position" time)
###             ("_cargs" ("_position" C\<^sub>1) ("_position" s))))
###         ("\<^const>Groups.plus_class.plus" ("\<^const>Groups.one_class.one")
###           ("_applC" ("_position" time)
###             ("_cargs" ("_position" C\<^sub>2) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" time)
###       ("\<^const>Nielson_VCGi.acom.Aif" ("_position" b)
###         ("_position" C\<^sub>1) ("_position" C\<^sub>2)))
###     ("_lambda" ("_position" s)
###       ("\<^const>HOL.If"
###         ("_applC" ("_position" bval)
###           ("_cargs" ("_position" b) ("_position" s)))
###         ("\<^const>Groups.plus_class.plus" ("\<^const>Groups.one_class.one")
###           ("_applC" ("_position" time)
###             ("_cargs" ("_position" C\<^sub>1) ("_position" s))))
###         ("\<^const>Groups.plus_class.plus" ("\<^const>Groups.one_class.one")
###           ("_applC" ("_position" time)
###             ("_cargs" ("_position" C\<^sub>2) ("_position" s))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 325 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" kdeps) ("\<^const>Nielson_VCGi.acom.Askip"))
###     ("\<^const>Set.empty")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" kdeps) ("\<^const>Com.com.SKIP"))
###     ("\<^const>Set.empty")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 326 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" kdeps)
###       ("\<^const>Nielson_VCGi.acom.Aassign" ("_position" x)
###         ("_position" a)))
###     ("\<^const>Set.empty")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" kdeps)
###       ("\<^const>Com.com.Assign" ("_position" x) ("_position" a)))
###     ("\<^const>Set.empty")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 327 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" kdeps)
###       ("\<^const>Nielson_VCGi.acom.Aseq" ("_position" C\<^sub>1)
###         ("_position" C\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" kdeps) ("_position" C\<^sub>1))
###       ("_applC" ("_position" fune)
###         ("_cargs" ("_position" C\<^sub>1)
###           ("_applC" ("_position" kdeps) ("_position" C\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" kdeps)
###       ("\<^const>Com.com.Seq" ("_position" C\<^sub>1)
###         ("_position" C\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" kdeps) ("_position" C\<^sub>1))
###       ("_applC" ("_position" fune)
###         ("_cargs" ("_position" C\<^sub>1)
###           ("_applC" ("_position" kdeps) ("_position" C\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 328 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" kdeps)
###       ("\<^const>Com.com.If" ("_position" b) ("_position" C\<^sub>1)
###         ("_position" C\<^sub>2)))
###     ("\<^const>Set.union"
###       ("\<^const>Set.union" ("_applC" ("_position" vars) ("_position" b))
###         ("_applC" ("_position" kdeps) ("_position" C\<^sub>1)))
###       ("_applC" ("_position" kdeps) ("_position" C\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" kdeps)
###       ("\<^const>Nielson_VCGi.acom.Aif" ("_position" b)
###         ("_position" C\<^sub>1) ("_position" C\<^sub>2)))
###     ("\<^const>Set.union"
###       ("\<^const>Set.union" ("_applC" ("_position" vars) ("_position" b))
###         ("_applC" ("_position" kdeps) ("_position" C\<^sub>1)))
###       ("_applC" ("_position" kdeps) ("_position" C\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 375 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" vc)
###       ("_cargs" ("\<^const>Com.com.SKIP")
###         ("_cargs" ("_position" Q)
###           ("_cargs" ("\<^const>Pure.dummy_pattern")
###             ("\<^const>Pure.dummy_pattern")))))
###     ("_position" True)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" vc)
###       ("_cargs" ("\<^const>Nielson_VCGi.acom.Askip")
###         ("_cargs" ("_position" Q)
###           ("_cargs" ("\<^const>Pure.dummy_pattern")
###             ("\<^const>Pure.dummy_pattern")))))
###     ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 376 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" vc)
###       ("_cargs" ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###         ("_cargs" ("_position" Q)
###           ("_cargs" ("\<^const>Pure.dummy_pattern")
###             ("\<^const>Pure.dummy_pattern")))))
###     ("_position" True)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" vc)
###       ("_cargs"
###         ("\<^const>Nielson_VCGi.acom.Aassign" ("_position" x)
###           ("_position" a))
###         ("_cargs" ("_position" Q)
###           ("_cargs" ("\<^const>Pure.dummy_pattern")
###             ("\<^const>Pure.dummy_pattern")))))
###     ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 377 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" vc)
###       ("_cargs"
###         ("\<^const>Com.com.Seq" ("_position" C\<^sub>1)
###           ("_position" C\<^sub>2))
###         ("_cargs" ("_position" Q)
###           ("_cargs" ("_position" LVQ) ("_position" LVE)))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" vc)
###         ("_cargs" ("_position" C\<^sub>1)
###           ("_cargs"
###             ("_applC" ("_position" pre)
###               ("_cargs" ("_position" C\<^sub>2) ("_position" Q)))
###             ("_cargs"
###               ("_applC" ("_position" qdeps)
###                 ("_cargs" ("_position" C\<^sub>2) ("_position" LVQ)))
###               ("\<^const>Set.union"
###                 ("_applC" ("_position" fune)
###                   ("_cargs" ("_position" C\<^sub>2) ("_position" LVE)))
###                 ("_applC" ("_position" kdeps) ("_position" C\<^sub>2)))))))
###       ("_applC" ("_position" vc)
###         ("_cargs" ("_position" C\<^sub>2)
###           ("_cargs" ("_position" Q)
###             ("_cargs" ("_position" LVQ) ("_position" LVE))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" vc)
###       ("_cargs"
###         ("\<^const>Nielson_VCGi.acom.Aseq" ("_position" C\<^sub>1)
###           ("_position" C\<^sub>2))
###         ("_cargs" ("_position" Q)
###           ("_cargs" ("_position" LVQ) ("_position" LVE)))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" vc)
###         ("_cargs" ("_position" C\<^sub>1)
###           ("_cargs"
###             ("_applC" ("_position" pre)
###               ("_cargs" ("_position" C\<^sub>2) ("_position" Q)))
###             ("_cargs"
###               ("_applC" ("_position" qdeps)
###                 ("_cargs" ("_position" C\<^sub>2) ("_position" LVQ)))
###               ("\<^const>Set.union"
###                 ("_applC" ("_position" fune)
###                   ("_cargs" ("_position" C\<^sub>2) ("_position" LVE)))
###                 ("_applC" ("_position" kdeps) ("_position" C\<^sub>2)))))))
###       ("_applC" ("_position" vc)
###         ("_cargs" ("_position" C\<^sub>2)
###           ("_cargs" ("_position" Q)
###             ("_cargs" ("_position" LVQ) ("_position" LVE))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 378 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" vc)
###       ("_cargs"
###         ("\<^const>Nielson_VCGi.acom.Aif" ("_position" b)
###           ("_position" C\<^sub>1) ("_position" C\<^sub>2))
###         ("_cargs" ("_position" Q)
###           ("_cargs" ("_position" LVQ) ("_position" LVE)))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" vc)
###         ("_cargs" ("_position" C\<^sub>1)
###           ("_cargs" ("_position" Q)
###             ("_cargs" ("_position" LVQ) ("_position" LVE)))))
###       ("_applC" ("_position" vc)
###         ("_cargs" ("_position" C\<^sub>2)
###           ("_cargs" ("_position" Q)
###             ("_cargs" ("_position" LVQ) ("_position" LVE))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" vc)
###       ("_cargs"
###         ("\<^const>Com.com.If" ("_position" b) ("_position" C\<^sub>1)
###           ("_position" C\<^sub>2))
###         ("_cargs" ("_position" Q)
###           ("_cargs" ("_position" LVQ) ("_position" LVE)))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" vc)
###         ("_cargs" ("_position" C\<^sub>1)
###           ("_cargs" ("_position" Q)
###             ("_cargs" ("_position" LVQ) ("_position" LVE)))))
###       ("_applC" ("_position" vc)
###         ("_cargs" ("_position" C\<^sub>2)
###           ("_cargs" ("_position" Q)
###             ("_cargs" ("_position" LVQ) ("_position" LVE))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (fst (snd p))) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (fst p)) <*mlex*> {}"
### Ambiguous input (line 488 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" preList)
###       ("_cargs" ("_position" upds)
###         ("_cargs" ("\<^const>Com.com.Seq" ("_position" C1) ("_position" C2))
###           ("_cargs" ("_position" l) ("_position" s)))))
###     ("_applC" ("_position" preList)
###       ("_cargs"
###         ("_applC" ("_position" map)
###           ("_cargs"
###             ("_lambda"
###               ("_pattern" ("_position" x)
###                 ("_patterns" ("_position" e) ("_position" v)))
###               ("_tuple" ("_position" x)
###                 ("_tuple_args"
###                   ("_applC" ("_position" preT)
###                     ("_cargs" ("_position" C2) ("_position" e)))
###                   ("_tuple_arg"
###                     ("_applC" ("_position" fune)
###                       ("_cargs" ("_position" C2) ("_position" v)))))))
###             ("_position" upds)))
###         ("_cargs" ("_position" C1)
###           ("_cargs" ("_position" l) ("_position" s)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" preList)
###       ("_cargs" ("_position" upds)
###         ("_cargs"
###           ("\<^const>Nielson_VCGi.acom.Aseq" ("_position" C1)
###             ("_position" C2))
###           ("_cargs" ("_position" l) ("_position" s)))))
###     ("_applC" ("_position" preList)
###       ("_cargs"
###         ("_applC" ("_position" map)
###           ("_cargs"
###             ("_lambda"
###               ("_pattern" ("_position" x)
###                 ("_patterns" ("_position" e) ("_position" v)))
###               ("_tuple" ("_position" x)
###                 ("_tuple_args"
###                   ("_applC" ("_position" preT)
###                     ("_cargs" ("_position" C2) ("_position" e)))
###                   ("_tuple_arg"
###                     ("_applC" ("_position" fune)
###                       ("_cargs" ("_position" C2) ("_position" v)))))))
###             ("_position" upds)))
###         ("_cargs" ("_position" C1)
###           ("_cargs" ("_position" l) ("_position" s)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order:
  "(%p. size_list (%p. size (snd p)) (fst p)) <*mlex*> {}"
### Ambiguous input (line 617 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" preList)
###       ("_cargs" ("_position" upds)
###         ("_cargs"
###           ("_applC" ("_position" Aassign)
###             ("_cargs" ("_position" x1) ("_position" x2)))
###           ("_cargs" ("_position" l) ("_position" s)))))
###     ("_applC" ("_position" postList)
###       ("_cargs" ("_position" upds)
###         ("_cargs" ("_position" l)
###           ("\<^const>Nielson_Hoare.state_subst" ("_position" s)
###             ("_position" x2) ("_position" x1)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" preList)
###       ("_cargs" ("_position" upds)
###         ("_cargs"
###           ("_applC" ("_position" Aassign)
###             ("_cargs" ("_position" x1) ("_position" x2)))
###           ("_cargs" ("_position" l) ("_position" s)))))
###     ("_applC" ("_position" postList)
###       ("_cargs" ("_position" upds)
###         ("_cargs" ("_position" l)
###           ("_applC" ("_position" s)
###             ("_list"
###               ("\<^const>Fields.inverse_class.inverse_divide"
###                 ("_position" x2) ("_position" x1)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 621 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" preSet)
###       ("_cargs" ("_position" U)
###         ("_cargs"
###           ("_applC" ("_position" Aassign)
###             ("_cargs" ("_position" x1) ("_position" x2)))
###           ("_cargs" ("_position" l) ("_position" s)))))
###     ("_applC" ("_position" postSet)
###       ("_cargs" ("_position" U)
###         ("_cargs" ("_position" l)
###           ("\<^const>Nielson_Hoare.state_subst" ("_position" s)
###             ("_position" x2) ("_position" x1)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" preSet)
###       ("_cargs" ("_position" U)
###         ("_cargs"
###           ("_applC" ("_position" Aassign)
###             ("_cargs" ("_position" x1) ("_position" x2)))
###           ("_cargs" ("_position" l) ("_position" s)))))
###     ("_applC" ("_position" postSet)
###       ("_cargs" ("_position" U)
###         ("_cargs" ("_position" l)
###           ("_applC" ("_position" s)
###             ("_list"
###               ("\<^const>Fields.inverse_class.inverse_divide"
###                 ("_position" x2) ("_position" x1)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 632 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" bval)
###       ("_cargs" ("_position" b) ("_position" s))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" preList)
###         ("_cargs" ("_position" upds)
###           ("_cargs"
###             ("\<^const>Nielson_VCGi.acom.Aif" ("_position" b)
###               ("_position" C1) ("_position" C2))
###             ("_cargs" ("_position" l) ("_position" s)))))
###       ("_applC" ("_position" preList)
###         ("_cargs" ("_position" upds)
###           ("_cargs" ("_position" C1)
###             ("_cargs" ("_position" l) ("_position" s))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" bval)
###       ("_cargs" ("_position" b) ("_position" s))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" preList)
###         ("_cargs" ("_position" upds)
###           ("_cargs"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" C1)
###               ("_position" C2))
###             ("_cargs" ("_position" l) ("_position" s)))))
###       ("_applC" ("_position" preList)
###         ("_cargs" ("_position" upds)
###           ("_cargs" ("_position" C1)
###             ("_cargs" ("_position" l) ("_position" s))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 635 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" bval)
###       ("_cargs" ("_position" b) ("_position" s))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" preSet)
###         ("_cargs" ("_position" upds)
###           ("_cargs"
###             ("\<^const>Nielson_VCGi.acom.Aif" ("_position" b)
###               ("_position" C1) ("_position" C2))
###             ("_cargs" ("_position" l) ("_position" s)))))
###       ("_applC" ("_position" preSet)
###         ("_cargs" ("_position" upds)
###           ("_cargs" ("_position" C1)
###             ("_cargs" ("_position" l) ("_position" s))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" bval)
###       ("_cargs" ("_position" b) ("_position" s))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" preSet)
###         ("_cargs" ("_position" upds)
###           ("_cargs"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" C1)
###               ("_position" C2))
###             ("_cargs" ("_position" l) ("_position" s)))))
###       ("_applC" ("_position" preSet)
###         ("_cargs" ("_position" upds)
###           ("_cargs" ("_position" C1)
###             ("_cargs" ("_position" l) ("_position" s))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 637 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Not"
###       ("_applC" ("_position" bval)
###         ("_cargs" ("_position" b) ("_position" s)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" preList)
###         ("_cargs" ("_position" upds)
###           ("_cargs"
###             ("\<^const>Nielson_VCGi.acom.Aif" ("_position" b)
###               ("_position" C1) ("_position" C2))
###             ("_cargs" ("_position" l) ("_position" s)))))
###       ("_applC" ("_position" preList)
###         ("_cargs" ("_position" upds)
###           ("_cargs" ("_position" C2)
###             ("_cargs" ("_position" l) ("_position" s))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Not"
###       ("_applC" ("_position" bval)
###         ("_cargs" ("_position" b) ("_position" s)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" preList)
###         ("_cargs" ("_position" upds)
###           ("_cargs"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" C1)
###               ("_position" C2))
###             ("_cargs" ("_position" l) ("_position" s)))))
###       ("_applC" ("_position" preList)
###         ("_cargs" ("_position" upds)
###           ("_cargs" ("_position" C2)
###             ("_cargs" ("_position" l) ("_position" s))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 641 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Not"
###       ("_applC" ("_position" bval)
###         ("_cargs" ("_position" b) ("_position" s)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" preSet)
###         ("_cargs" ("_position" upds)
###           ("_cargs"
###             ("\<^const>Nielson_VCGi.acom.Aif" ("_position" b)
###               ("_position" C1) ("_position" C2))
###             ("_cargs" ("_position" l) ("_position" s)))))
###       ("_applC" ("_position" preSet)
###         ("_cargs" ("_position" upds)
###           ("_cargs" ("_position" C2)
###             ("_cargs" ("_position" l) ("_position" s))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Not"
###       ("_applC" ("_position" bval)
###         ("_cargs" ("_position" b) ("_position" s)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" preSet)
###         ("_cargs" ("_position" upds)
###           ("_cargs"
###             ("\<^const>Com.com.If" ("_position" b) ("_position" C1)
###               ("_position" C2))
###             ("_cargs" ("_position" l) ("_position" s)))))
###       ("_applC" ("_position" preSet)
###         ("_cargs" ("_position" upds)
###           ("_cargs" ("_position" C2)
###             ("_cargs" ("_position" l) ("_position" s))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 652 of "$AFP/Hoare_Time/Nielson_VCGi.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" K4)
###       ("_cargs" ("_position" upds)
###         ("_cargs" ("_position" LVQ)
###           ("_cargs" ("_position" C1) ("_position" Q))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" K4)
###         ("_cargs" ("_position" upds)
###           ("_cargs" ("_position" LVQ)
###             ("_cargs" ("_position" C2) ("_position" Q))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" K4)
###         ("_cargs" ("_position" upds)
###           ("_cargs" ("_position" LVQ)
###             ("_cargs"
###               ("\<^const>Nielson_VCGi.acom.Aif" ("_position" b)
###                 ("_position" C1) ("_position" C2))
###               ("_position" Q))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" K4)
###       ("_cargs" ("_position" upds)
###         ("_cargs" ("_position" LVQ)
###           ("_cargs" ("_position" C1) ("_position" Q))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" K4)
###         ("_cargs" ("_position" upds)
###           ("_cargs" ("_position" LVQ)
###             ("_cargs" ("_position" C2) ("_position" Q))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" K4)
###         ("_cargs" ("_position" upds)
###           ("_cargs" ("_position" LVQ)
###             ("_cargs"
###               ("\<^const>Com.com.If" ("_position" b) ("_position" C1)
###                 ("_position" C2))
###               ("_position" Q))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Nielson_VCGi"
### 3.356s elapsed time, 3.986s cpu time, 0.384s GC time
Loading theory "Draft.Nielson_VCGiTemplates"
val templateLemmas =
   [("Nielson_VCGi.finite_varnewacom", "finite (varnewacom ?C)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Nielson_VCGi.supportE_single2", "supportE (%l. ?P) = {}",
     template_equation
      (template_app (template_hole 1, t_empty), template_hole 0)),
    ("Nielson_VCGi.funStart_prop1", "?x : funStar ?f ?x",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("Nielson_VCGi.supportE_single", "supportE (%l s. ?P) = {}",
     template_equation
      (template_app (template_hole 1, t_empty), template_hole 0)),
    ("Nielson_VCGi.supportE_time", "supportE (%l. time ?C) = {}",
     template_equation
      (template_app (template_hole 2, t_empty), template_hole 0)),
    ("Nielson_VCGi.funStart_prop2", "?f ?x <= funStar ?f ?x",
     template_inequation
      (less_equals, template_app (template_var 1, template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Nielson_VCGi.preT_constant", "preT ?C (%_. ?a) = (%_. ?a)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), t_empty),
       t_empty)),
    ("Nielson_VCGi.support_postList",
     "support (postList ?xs) <= lesvars ?xs",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("Nielson_VCGi.TQ", "preT ?C ?e ?s = ?e (postQ ?C ?s)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_var 1,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Nielson_VCGi.support_preList",
     "support (preList ?upds ?C1.0) <= lesvars ?upds",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 1)))),
    ("Nielson_VCGi.supportE_preT",
     "supportE (%l. preT ?C (?e l)) <= supportE ?e",
     template_inequation
      (less_equals, template_app (template_hole 1, t_empty),
       template_app (template_hole 1, template_var 0))),
    ("Nielson_VCGi.ListUpdate_E",
     "ListUpdateE ?f ?xs = ListUpdate ?f ?xs (%e x. e)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         t_empty))),
    ("Nielson_VCGi.supportE_Suc",
     "supportE (%l s. Suc (?e1.0 l s)) = supportE ?e1.0",
     template_equation
      (template_app (template_hole 1, t_empty),
       template_app (template_hole 1, template_var 0))),
    ("Nielson_VCGi.ListAskip",
     "preList ?xs SKIP ?l ?s = postList ?xs ?l ?s",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_hole 1),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Nielson_VCGi.support_pre",
     "support (pre ?C ?Q) <= support ?Q Un varacom ?C",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 3, template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("Nielson_VCGi.support_supportE",
     "support (%l. ?P (?e l)) <= supportE ?e",
     template_inequation
      (less_equals, template_app (template_hole 1, t_empty),
       template_app (template_hole 0, template_var 0))),
    ("Nielson_VCGi.supportE_preTz",
     "supportE (%l. preTz ?C (?e l) ?n) <= supportE ?e",
     template_inequation
      (less_equals, template_app (template_hole 1, t_empty),
       template_app (template_hole 1, template_var 1))),
    ("Nielson_VCGi.TzQ", "preTz ?C ?e ?n ?s = ?e (postQz ?C ?s ?n)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_var 2,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0),
           template_var 1)))),
    ("Nielson_VCGi.supportE_twicepreT",
     "supportE (%l. preT ?C1.0 (preT ?C2.0 (?e l))) <= supportE ?e",
     template_inequation
      (less_equals, template_app (template_hole 1, t_empty),
       template_app (template_hole 1, template_var 0))),
    ("Nielson_VCGi.fune_mono", "?A <= ?B ==> fune ?C ?A <= fune ?C ?B",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Nielson_VCGi.qdeps_mono", "?A <= ?B ==> qdeps ?C ?A <= qdeps ?C ?B",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Nielson_VCGi.preT_linear",
     "preT ?C (%s. ?k * ?e s) = (%s. ?k * preT ?C ?e s)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2), t_empty),
       t_empty)),
    ("Nielson_VCGi.ListAconseq",
     "preList ?upds ({?x1.0/?x2.0/?x3.0} CONSEQ ?C) ?l ?s =
      preList ?upds ?C ?l ?s",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 6),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 6),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("Nielson_VCGi.expr_lupd",
     "?x ~: supportE ?Q ==> ?Q (?l(?x := ?n)) = ?Q ?l",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_app (template_hole 2, template_var 2))
                )
            )],
       template_equation
        (template_app
          (template_var 2,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 3),
             template_var 0)),
         template_app (template_var 2, template_var 1)))),
    ("Nielson_VCGi.finite_support_pre",
     "[| finite (support ?Q); finite (varacom ?C) |]
      ==> finite (support (pre ?C ?Q))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Nielson_VCGi.support_eq",
     "support (%l s. l ?x = ?E l s) <= supportE ?E Un {?x}",
     template_inequation
      (less_equals, template_app (template_hole 5, t_empty),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0)))),
    ("Nielson_VCGi.supportE_plus",
     "supportE (%l s. ?e1.0 l s + ?e2.0 l s)
      <= supportE ?e1.0 Un supportE ?e2.0",
     template_inequation
      (less_equals, template_app (template_hole 2, t_empty),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Nielson_VCGi.ListAassign",
     "preList ?upds (?x1.0 ::= ?x2.0) ?l ?s =
      postList ?upds ?l (?s[?x2.0/?x1.0])",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 4),
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 4), template_var 1),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Nielson_VCGi.ListUpdate_updates",
     "?x : lesvars ?xs ==> ListUpdate ?l'' ?xs (%e. ?l) ?x = ?l ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_app (template_hole 2, template_var 2)))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             t_empty),
           template_var 3),
         template_app (template_var 0, template_var 3)))),
    ("Nielson_VCGi.supportE_if",
     "supportE (%l s. if ?b s then ?A l s else ?B l s)
      <= supportE ?A Un supportE ?B",
     template_inequation
      (less_equals, template_app (template_hole 2, t_empty),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Nielson_VCGi.ListAif1",
     "bval ?b ?s ==>
      preList ?upds (IF ?b THEN ?C1.0 ELSE ?C2.0) ?l ?s =
      preList ?upds ?C1.0 ?l ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 5),
              template_var 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 2),
                 template_var 1)),
             template_var 0),
           template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 0),
           template_var 4)))),
    ("Nielson_VCGi.ListAif2",
     "~ bval ?b ?s ==>
      preList ?upds (IF ?b THEN ?C1.0 ELSE ?C2.0) ?l ?s =
      preList ?upds ?C2.0 ?l ?s",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 5),
                  template_var 4)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 2),
                 template_var 1)),
             template_var 0),
           template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1),
             template_var 0),
           template_var 4)))),
    ("Nielson_VCGi.ListUpdateE_updates",
     "[| distinct (map fst ?xs); ?x : set ?xs |]
      ==> ListUpdateE ?l'' ?xs (fst ?x) = fst (snd ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_hole 6),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 0),
             template_var 2),
           template_app (template_hole 6, template_var 1)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 1))))),
    ("Nielson_VCGi.postListpostSet2",
     "postList ?xs ?l ?s = postSet (set ?xs) ?l ?s",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 2)),
         t_empty))),
    ("Nielson_VCGi.supportE_preTz_Un",
     "supportE (%l. preTz ?C (?e l) (l ?x))
      <= insert ?x (UN n. supportE (%l. preTz ?C (?e l) n))",
     template_inequation
      (less_equals, template_app (template_hole 5, t_empty),
       template_app
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_hole 0))))),
    ("Nielson_VCGi.k4If",
     "[| K4 ?upds ?LVQ ?C1.0 ?Q; K4 ?upds ?LVQ ?C2.0 ?Q |]
      ==> K4 ?upds ?LVQ (IF ?b THEN ?C1.0 ELSE ?C2.0) ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 5),
                  template_var 4),
                template_var 1),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 5),
                 template_var 4),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 3),
                 template_var 1)),
             template_var 2)
           ))),
    ("Nielson_VCGi.postSetpostList",
     "postList ?xs ?l ?s ==> postSet (set ?xs) ?l ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 2)),
             t_empty)
           ))),
    ("Nielson_VCGi.postListpostSet",
     "postSet (set ?xs) ?l ?s ==> postList ?xs ?l ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 2)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Nielson_VCGi.preSetpreList_eq",
     "preList ?xs ?C ?l ?s = preSet (set ?xs) ?C ?l ?s",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 6, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 3)),
         t_empty))),
    ("Nielson_VCGi.postList_preList",
     "postList (map (%(x, e, v). (x, preT ?C2.0 e, fune ?C2.0 v)) ?upds) ?l
       ?s =
      preList ?upds ?C2.0 ?l ?s",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7, template_app (template_hole 6, t_empty)),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 3),
           template_var 1),
         template_var 0))),
    ("Nielson_VCGi.preSetpreList",
     "preList ?xs ?C ?l ?s ==> preSet (set ?xs) ?C ?l ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 3)),
             t_empty)
           ))),
    ("Nielson_VCGi.support_impl_in",
     "?G ?e --> support (?H ?e) <= ?T ==>
      support (%l s. ?G ?e --> ?H ?e l s) <= ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_var 3, template_var 2)),
              template_app
               (template_app
                 (template_hole 1, template_app (template_hole 0, t_empty)),
                template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, t_empty),
         template_var 0))),
    ("Nielson_VCGi.preListpreSet",
     "preSet (set ?xs) ?C ?l ?s ==> preList ?xs ?C ?l ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 3)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1),
               template_var 2),
             template_var 0)
           ))),
    ("Nielson_VCGi.preList_Seq",
     "preList ?upds (?C1.0;; ?C2.0) ?l ?s =
      preList (map (%(x, e, v). (x, preT ?C2.0 e, fune ?C2.0 v)) ?upds)
       ?C1.0 ?l ?s",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 8, template_var 4),
             template_app
              (template_app (template_hole 7, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, t_empty)),
                 template_var 4)),
             template_var 3),
           template_var 1),
         template_var 0))),
    ("Nielson_VCGi.SetAskip", "preSet ?U SKIP ?l ?s = postSet ?U ?l ?s",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2), t_empty),
       template_app
        (template_app (template_hole 5, template_var 2), t_empty))),
    ("Nielson_VCGi.SetAconseq",
     "preSet ?U ({?x1.0/?x2.0/?x3.0} CONSEQ ?C) ?l ?s = preSet ?U ?C ?l ?s",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 6), t_empty),
       template_app
        (template_app (template_hole 5, template_var 6), t_empty))),
    ("Nielson_VCGi.SetAassign",
     "preSet ?U (?x1.0 ::= ?x2.0) ?l ?s = postSet ?U ?l (?s[?x2.0/?x1.0])",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 4), t_empty),
       template_app
        (template_app (template_hole 7, template_var 4), t_empty))),
    ("Nielson_VCGi.allg_E",
     "[| !!l s n x. x : fst ` ?upds ==> ?A (l(x := n)) = ?A l;
         lesvars ?xs <= fst ` ?upds |]
      ==> ?A (ListUpdateE ?f ?xs) = ?A ?f",
     template_implication
      ([template_predicate (template_app (template_hole 14, t_empty)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 3, template_hole 2),
            template_app (template_hole 1, template_var 1)),
          template_app
           (template_app (template_hole 8, template_hole 7),
            template_var 3))],
       template_equation
        (template_app
          (template_var 2,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app (template_var 2, template_var 0)))),
    ("Nielson_VCGi.allg",
     "[| !!l s n x. x : fst ` ?upds ==> ?A (l(x := n)) = ?A l;
         lesvars ?xs <= fst ` ?upds |]
      ==> ?A (ListUpdate ?l'' ?xs ?q) = ?A ?l''",
     template_implication
      ([template_predicate (template_app (template_hole 14, t_empty)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 3, template_hole 2),
            template_app (template_hole 1, template_var 2)),
          template_app
           (template_app (template_hole 8, template_hole 7),
            template_var 4))],
       template_equation
        (template_app
          (template_var 3,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_var 0)),
         template_app (template_var 3, template_var 1)))),
    ("Nielson_VCGi.SetAif1",
     "bval ?b ?s ==>
      preSet ?upds (IF ?b THEN ?C1.0 ELSE ?C2.0) ?l ?s =
      preSet ?upds ?C1.0 ?l ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 5),
              template_var 4)
            )],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 3), t_empty),
         template_app
          (template_app (template_hole 5, template_var 3), t_empty)))),
    ("Nielson_VCGi.times_z",
     "[| ?I ?z ?s; !!s z. ?I (Suc z) s ==> bval ?b s & ?I z (postQ ?C s);
         !!s. ?I 0 s ==> ~ bval ?b s |]
      ==> Nielson_VCGi.times ?s ?b ?C = ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 4, template_var 3), template_var 2)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0),
         template_var 3))),
    ("Nielson_VCGi.SetAif2",
     "~ bval ?b ?s ==>
      preSet ?upds (IF ?b THEN ?C1.0 ELSE ?C2.0) ?l ?s =
      preSet ?upds ?C2.0 ?l ?s",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 5),
                  template_var 4)
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 3), t_empty),
         template_app
          (template_app (template_hole 5, template_var 3), t_empty)))),
    ("Nielson_VCGi.vc_sound'",
     "[| vc ?C ?Q ?Qset {}; finite (support ?Q); finite (varacom ?C);
         ALL l s. ?P l s --> pre ?C ?Q l s;
         !!s1 s2 l. s1 = s2 on ?Qset ==> ?Q l s1 = ?Q l s2 |]
      ==> \<turnstile>\<^sub>1 {?P} strip ?C { time ?C \<Down> ?Q}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 16, template_var 3),
                  template_var 2),
                template_var 1),
              template_hole 15)
            ),
        template_predicate
         (
            template_app
             (template_hole 14,
              template_app (template_hole 13, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 14,
              template_app (template_hole 12, template_var 3))
            ),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 0),
                 template_app (template_hole 1, template_var 3)),
               template_app (template_hole 0, template_var 3)),
             template_var 2)
           ))),
    ("Nielson_VCGi.vc_sound''",
     "[| vc ?C ?Q ?Qset {}; finite (support ?Q); finite (varacom ?C);
         EX k>0. ALL l s. ?P l s --> pre ?C ?Q l s & time ?C s <= k * ?e s;
         !!s1 s2 l. s1 = s2 on ?Qset ==> ?Q l s1 = ?Q l s2 |]
      ==> \<turnstile>\<^sub>1 {?P} strip ?C { ?e \<Down> ?Q}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 22, template_var 4),
                  template_var 3),
                template_var 2),
              template_hole 21)
            ),
        template_predicate
         (
            template_app
             (template_hole 20,
              template_app (template_hole 19, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_hole 20,
              template_app (template_hole 18, template_var 4))
            ),
        template_predicate (template_app (template_hole 17, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_app (template_hole 0, template_var 4)),
               template_var 0),
             template_var 3)
           ))),
    ("Nielson_VCGi.vc_sound",
     "[| vc ?C ?Q ?LVQ ?LVE; finite (support ?Q);
         lesvars ?upds Int varacom ?C = {}; distinct (map fst ?upds);
         finite (varacom ?C);
         ALL l s1 s2. s1 = s2 on ?LVQ --> ?Q l s1 = ?Q l s2;
         ALL l s1 s2.
            s1 = s2 on ?LVE --> postList ?upds l s1 = postList ?upds l s2;
         ALL (a, b, c):set ?upds. ALL s1 s2. s1 = s2 on c --> b s1 = b s2;
         (UN (a, b, c):set ?upds. c) <= ?LVE |]
      ==> \<turnstile>\<^sub>1 {%l s. pre ?C ?Q l s & preList ?upds ?C l s}
                               strip ?C
                               { time
                                  ?C \<Down> %l s.
          ?Q l s & postList ?upds l s} &
          (ALL l s. pre ?C ?Q l s --> ?Q l (postQ ?C s)) &
          K4 ?upds ?LVQ ?C ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 35, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_hole 34,
              template_app (template_hole 33, template_var 3))
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 31,
              template_app
               (template_app (template_hole 30, template_hole 29),
                template_app (template_hole 28, template_var 0))),
            template_app (template_hole 27, template_var 4)),
          template_hole 26),
        template_predicate
         (
            template_app
             (template_hole 25,
              template_app
               (template_app (template_hole 24, template_hole 29),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 34,
              template_app (template_hole 27, template_var 4))
            ),
        template_predicate (template_app (template_hole 23, t_empty)),
        template_predicate (template_app (template_hole 23, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app (template_hole 28, template_var 0)),
              template_app (template_hole 15, t_empty))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 11,
            template_app
             (template_app
               (template_hole 10, template_app (template_hole 9, t_empty)),
              template_app (template_hole 28, template_var 0))),
          template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 6, t_empty),
                     template_app (template_hole 3, template_var 4)),
                   template_app (template_hole 2, template_var 4)),
                 t_empty)),
             template_app
              (template_app
                (template_hole 7, template_app (template_hole 23, t_empty)),
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 2),
                   template_var 4),
                 template_var 3)))
           )))]:
   (string * thm * template) list
### theory "Draft.Nielson_VCGiTemplates"
### 0.738s elapsed time, 1.693s cpu time, 1.109s GC time
val it = (): unit
