Loading theory "Deriving.Comparator" (required by "Draft.WS1S_PrelimMoreTemplates" via "Draft.WS1S_Prelim" via "Deriving.Compare_Instances" via "Deriving.Compare_Generator" via "Deriving.Comparator_Generator")
Loading theory "Deriving.Derive_Manager" (required by "Draft.WS1S_PrelimMoreTemplates" via "Draft.WS1S_Prelim" via "Deriving.Compare_Instances" via "Deriving.Compare_Generator" via "Deriving.Comparator_Generator")
Loading theory "Deriving.Generator_Aux" (required by "Draft.WS1S_PrelimMoreTemplates" via "Draft.WS1S_Prelim" via "Deriving.Compare_Instances" via "Deriving.Compare_Generator" via "Deriving.Comparator_Generator")
Loading theory "HOL-Library.Char_ord" (required by "Draft.WS1S_PrelimMoreTemplates" via "Draft.WS1S_Prelim" via "Deriving.Compare_Instances")
instantiation
  char :: linorder
  less_eq_char == less_eq :: char => char => bool
  less_char == less :: char => char => bool
signature BNF_ACCESS =
  sig
    val bnf_types: Proof.context -> string list -> typ list
    val case_consts: Proof.context -> string list -> term list
    val case_simps: Proof.context -> string list -> thm list list
    val case_thms: Proof.context -> string list -> thm list
    val constr_argument_types:
       Proof.context -> string list -> typ list list list
    val constr_terms: Proof.context -> string -> term list
    val distinct_thms: Proof.context -> string list -> thm list list
    val induct_thms: Proof.context -> string list -> thm list
    val inject_thms: Proof.context -> string list -> thm list list
    val map_comps: Proof.context -> string list -> thm list
    val map_simps: Proof.context -> string list -> thm list list
    val map_terms: Proof.context -> string list -> term list
    val set_simps: Proof.context -> string list -> thm list list
    val set_terms: Proof.context -> string list -> term list list
  end
structure Bnf_Access: BNF_ACCESS
signature DERIVE_MANAGER =
  sig
    val derive: string -> string -> string -> theory -> theory
    val derive_cmd: string -> string -> string -> theory -> theory
    val print_info: theory -> unit
    val register_derive:
       string ->
         string ->
           (string -> string -> theory -> theory) -> theory -> theory
  end
structure Derive_Manager: DERIVE_MANAGER
### theory "Deriving.Derive_Manager"
### 0.049s elapsed time, 0.231s cpu time, 0.000s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.WS1S_PrelimMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  char :: distrib_lattice
  inf_char == inf :: char => char => char
  sup_char == sup :: char => char => char
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "HOL-Library.Char_ord"
### 0.083s elapsed time, 0.367s cpu time, 0.000s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.WS1S_PrelimMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
signature GENERATOR_AUX =
  sig
    val OF_option: thm -> thm option list -> thm
    val add_used_tycos:
       Proof.context -> string -> string list -> string list
    val alist_to_string: (string * 'a) list -> string
    val conjI_tac:
       thm list ->
         Proof.context ->
           'a list -> (Proof.context -> int -> tactic) -> tactic
    val create_map:
       (typ -> term) ->
         (string * typ -> 'a -> term) ->
           'a ->
             (typ -> bool) ->
               (local_theory -> string -> bool list) ->
                 (local_theory -> string -> term) ->
                   (local_theory -> string -> 'a -> term) ->
                     string list ->
                       (local_theory -> string -> 'a) ->
                         typ -> local_theory -> term
    val create_partial:
       'a ->
         (typ -> bool) ->
           (local_theory -> string -> bool list) ->
             (local_theory -> string -> term) ->
               (local_theory -> string -> 'a -> term) ->
                 string list ->
                   (local_theory -> string -> 'a) ->
                     typ -> local_theory -> term
    val define_overloaded:
       string * term -> local_theory -> thm * local_theory
    val define_overloaded_generic:
       Attrib.binding * term -> local_theory -> thm * local_theory
    val drop_last: 'a list -> 'a list
    val freeify_tvars: typ -> typ
    val ind_case_to_idxs: 'a list list -> int -> int * int
    val infer_type: Proof.context -> term -> term
    val ints_to_subscript: int list -> string
    val is_class_instance: theory -> string -> sort -> bool
    val lambdas: term list -> term -> term
    val mk_case_tac:
       Proof.context ->
         term option list list ->
           thm ->
             (int ->
                Proof.context * thm list * (string * cterm) list -> tactic)
               -> tactic
    val mk_def: typ -> string -> term -> term
    val mk_id: typ -> term
    val mk_infer_const: string -> Proof.context -> term -> term
    val mutual_recursive_types:
       string -> Proof.context -> string list * typ list
    val prove_multi_future:
       Proof.context ->
         string list ->
           term list ->
             term list ->
               ({context: Proof.context, prems: thm list} -> tactic) ->
                 thm list
    val recursor:
       (string -> 'a) * ('a -> bool list) * string list ->
         bool ->
           (typ -> 'b) ->
             (typ -> 'b) ->
               (typ -> 'b) ->
                 ((typ * 'b option) list * 'a -> 'b) -> typ -> 'b
    val rename_types: (typ * typ) list -> term -> term
    val split_IHs:
       (string -> 'a) * ('a -> bool list) * string list ->
         typ list -> thm list -> thm list list
    val std_recursor_tac:
       (string -> 'a) * ('a -> bool list) * string list ->
         typ list ->
           ('a -> thm) ->
             thm list -> typ -> thm list -> Proof.context -> tactic
    val sub: string -> string
    val subT: string -> typ -> string
    val typ_and_vs_of_typname:
       theory -> string -> sort -> typ * (string * sort) list
    val typ_and_vs_of_used_typname:
       string ->
         bool list -> string list -> typ * (string * string list) list
    val type_parameters:
       typ -> Proof.context -> (string * sort) list * typ list
  end
structure Generator_Aux: GENERATOR_AUX
### theory "Deriving.Generator_Aux"
### 0.153s elapsed time, 0.632s cpu time, 0.034s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.WS1S_PrelimMoreTemplates" via "Draft.WS1S_Prelim" via "Draft.FSet_More" via "HOL-Library.FSet" via "HOL-Library.Countable")
### theory "HOL-Library.Function_Algebras"
### 0.109s elapsed time, 0.422s cpu time, 0.034s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.WS1S_PrelimMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.207s elapsed time, 0.818s cpu time, 0.087s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.WS1S_PrelimMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "{}"
locale comparator
  fixes comp :: "'a => 'a => order"
  assumes "comparator comp"
### theory "HOL-Library.Nat_Bijection"
### 0.358s elapsed time, 1.394s cpu time, 0.196s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.WS1S_PrelimMoreTemplates" via "Draft.ExtrEqs")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.392s elapsed time, 1.543s cpu time, 0.162s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.WS1S_PrelimMoreTemplates" via "Draft.WS1S_Prelim" via "Draft.FSet_More" via "HOL-Library.FSet")
### theory "Deriving.Comparator"
### 0.682s elapsed time, 2.718s cpu time, 0.275s GC time
Loading theory "Deriving.Compare" (required by "Draft.WS1S_PrelimMoreTemplates" via "Draft.WS1S_Prelim" via "Deriving.Compare_Instances" via "Deriving.Compare_Generator")
class compare = type +
  fixes compare :: "'a => 'a => order"
  assumes "comparator_compare": "comparator compare"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
class compare_order = compare + ord +
  assumes "ord_defs": "le_of_comp compare = (<=)" "lt_of_comp compare = (<)"
consts
  snth :: "'a stream => nat => 'a"
### Additional type variable(s) in locale specification "countable": 'a
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  flat :: "'a list stream => 'a stream"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
class compare_order = compare + linorder +
  assumes "ord_defs": "le_of_comp compare = (<=)" "lt_of_comp compare = (<)"
### theory "HOL-Library.Stream"
### 0.943s elapsed time, 3.594s cpu time, 0.661s GC time
Loading theory "Deriving.Comparator_Generator" (required by "Draft.WS1S_PrelimMoreTemplates" via "Draft.WS1S_Prelim" via "Deriving.Compare_Instances" via "Deriving.Compare_Generator")
signature COMPARE_CODE =
  sig
    val change_compare_code:
       term -> string list -> local_theory -> local_theory
  end
structure Compare_Code: COMPARE_CODE
### theory "Deriving.Compare"
### 0.731s elapsed time, 2.762s cpu time, 0.582s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.WS1S_PrelimMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.168s elapsed time, 4.476s cpu time, 0.773s GC time
Loading theory "HOL-Library.FSet" (required by "Draft.WS1S_PrelimMoreTemplates" via "Draft.WS1S_Prelim" via "Draft.FSet_More")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
instantiation
  fset :: (finite) finite
instantiation
  fset :: (type) {minus,bounded_lattice_bot,distrib_lattice}
  inf_fset == inf :: 'a fset => 'a fset => 'a fset
  bot_fset == bot :: 'a fset
  sup_fset == sup :: 'a fset => 'a fset => 'a fset
  less_eq_fset == less_eq :: 'a fset => 'a fset => bool
  less_fset == less :: 'a fset => 'a fset => bool
  minus_fset == minus :: 'a fset => 'a fset => 'a fset
Found termination order: "size <*mlex*> {}"
instantiation
  fset :: (equal) equal
  equal_fset == equal_class.equal :: 'a fset => 'a fset => bool
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  fset :: (type) conditionally_complete_lattice
  Inf_fset == Inf :: 'a fset set => 'a fset
  Sup_fset == Sup :: 'a fset set => 'a fset
signature COMPARATOR_GENERATOR =
  sig
    datatype comparator_type = BNF | Linorder
    val ensure_info:
       comparator_type -> string -> local_theory -> local_theory
    val generate_comparator:
       comparator_type -> string -> local_theory -> local_theory
    val generate_comparators_from_bnf_fp:
       string ->
         local_theory ->
           ((term * thm list) list * (term * thm) list) * local_theory
    val get_info: Proof.context -> string -> info option
    type info =
       {comp: term,
        comp_def: thm option,
        comp_thm: thm,
        map: term,
        map_comp: thm option,
        partial_comp_thms: thm list, pcomp: term, used_positions: bool list}
    val register_comparator_of: string -> local_theory -> local_theory
    val register_foreign_comparator:
       typ -> term -> thm -> local_theory -> local_theory
    val register_foreign_partial_and_full_comparator:
       string ->
         term ->
           term ->
             term ->
               thm option ->
                 thm option ->
                   thm ->
                     thm ->
                       thm ->
                         thm -> bool list -> local_theory -> local_theory
  end
structure Comparator_Generator: COMPARATOR_GENERATOR
### theory "Deriving.Comparator_Generator"
### 0.591s elapsed time, 2.329s cpu time, 0.237s GC time
Loading theory "Deriving.Compare_Generator" (required by "Draft.WS1S_PrelimMoreTemplates" via "Draft.WS1S_Prelim" via "Deriving.Compare_Instances")
instantiation
  fset :: (finite) complete_lattice
  top_fset == top :: 'a fset
instantiation
  fset :: (finite) complete_boolean_algebra
  uminus_fset == uminus :: 'a fset => 'a fset
### theory "HOL-Library.BigO"
### 0.718s elapsed time, 2.820s cpu time, 0.289s GC time
Loading theory "List-Index.List_Index" (required by "Draft.WS1S_PrelimMoreTemplates" via "Draft.WS1S_Prelim")
Found termination order: "size <*mlex*> {}"
consts
  find_index :: "('a => bool) => 'a list => nat"
signature COMPARE_GENERATOR =
  sig
    val compare_instance:
       Comparator_Generator.comparator_type -> string -> theory -> theory
    val compare_order_instance_via_comparator_of: string -> theory -> theory
    val compare_order_instance_via_compare: string -> theory -> theory
  end
structure Compare_Generator: COMPARE_GENERATOR
### theory "Deriving.Compare_Generator"
### 0.293s elapsed time, 1.159s cpu time, 0.098s GC time
Loading theory "Deriving.Compare_Instances" (required by "Draft.WS1S_PrelimMoreTemplates" via "Draft.WS1S_Prelim")
consts
  map_index' :: "nat => (nat => 'a => 'b) => 'a list => 'b list"
### theory "HOL-Library.Tree"
### 1.942s elapsed time, 7.521s cpu time, 1.071s GC time
Loading theory "Draft.Templates" (required by "Draft.WS1S_PrelimMoreTemplates" via "Draft.ExtrEqs")
consts
  insert_nth :: "nat => 'a => 'a list => 'a list"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.077s elapsed time, 0.303s cpu time, 0.059s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.WS1S_PrelimMoreTemplates")
deriving "compare_order" instance for type "Int.int"
deriving "compare" instance for type "Int.int"
deriving "compare_order" instance for type "Code_Numeral.integer"
deriving "compare" instance for type "Code_Numeral.integer"
deriving "compare_order" instance for type "Nat.nat"
deriving "compare" instance for type "Nat.nat"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
deriving "compare_order" instance for type "String.char"
deriving "compare" instance for type "String.char"
deriving "compare" instance for type "Sum_Type.sum"
generating comparator for type "Sum_Type.sum"
### theory "List-Index.List_Index"
### 0.342s elapsed time, 1.344s cpu time, 0.105s GC time
(if ?x <= ?y then if ?x = ?y then ?P else ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x <= ?y then if ?y = ?x then ?P else ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x <= ?y then if ?y <= ?x then ?P else ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x <= ?y then if ?x < ?y then ?Q else ?P else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x < ?y then ?Q else if ?x <= ?y then ?P else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x < ?y then ?Q else if ?y < ?x then ?R else ?P) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x < ?y then ?Q else if ?x = ?y then ?P else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x < ?y then ?Q else if ?y = ?x then ?P else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x = ?y then ?P else if ?y < ?x then ?R else ?Q) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x = ?y then ?P else if ?x < ?y then ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x = ?y then ?P else if ?y <= ?x then ?R else ?Q) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x = ?y then ?P else if ?x <= ?y then ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
deriving "compare" instance for type "List.list"
generating comparator for type "List.list"
deriving "compare" instance for type "Product_Type.prod"
generating comparator for type "Product_Type.prod"
deriving "compare" instance for type "Option.option"
generating comparator for type "Option.option"
Found termination order: "{}"
Found termination order: "{}"
deriving "compare" instance for type "HOL.bool"
deriving "compare" instance for type "Product_Type.unit"
deriving "compare_order" instance for type "HOL.bool"
deriving "compare_order" instance for type "Product_Type.unit"
### theory "Deriving.Compare_Instances"
### 0.409s elapsed time, 1.446s cpu time, 0.111s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.553s elapsed time, 1.573s cpu time, 0.107s GC time
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
locale comp_fun_idem
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_idem f"
locale comm_monoid_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_fset (\<^bold>*) \<^bold>1"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### Cannot skip proof of schematic goal statement
locale semilattice_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
  assumes "semilattice_fset (\<^bold>*)"
locale semilattice_order_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
  assumes "semilattice_order_fset (\<^bold>*) (\<^bold>\<le>) (\<^bold><)"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  fset :: (type) size
  size_fset == size :: 'a fset => nat
instantiation
  fset :: (exhaustive) exhaustive
  exhaustive_fset == exhaustive_class.exhaustive ::
    ('a fset => (bool * term list) option)
    => natural => (bool * term list) option
Found termination order: "(%p. nat_of_natural (snd p)) <*mlex*> {}"
instantiation
  fset :: (full_exhaustive) full_exhaustive
  full_exhaustive_fset == full_exhaustive_class.full_exhaustive ::
    ('a fset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Found termination order: "(%p. nat_of_natural (snd p)) <*mlex*> {}"
instantiation
  fset :: (random) random
  random_fset == random_class.random ::
    natural
    => natural * natural => ('a fset * (unit => term)) * natural * natural
### Additional type variable(s) in specification of "random_aux_fset_rel": 'a
### Additional type variable(s) in specification of "random_aux_fset_dom": 'a
Found termination order: "(%p. nat_of_natural (fst p)) <*mlex*> {}"
### theory "HOL-Library.FSet"
### 2.188s elapsed time, 5.248s cpu time, 0.518s GC time
Loading theory "Draft.FSet_More" (required by "Draft.WS1S_PrelimMoreTemplates" via "Draft.WS1S_Prelim")
### theory "Draft.FSet_More"
### 0.037s elapsed time, 0.058s cpu time, 0.000s GC time
Loading theory "Draft.WS1S_Prelim" (required by "Draft.WS1S_PrelimMoreTemplates")
deriving "linorder" instance for type "WS1S_Prelim.order"
generating comparator for type "WS1S_Prelim.order"
instantiation
  WS1S_Prelim.order :: enum
  enum_order == enum_class.enum :: WS1S_Prelim.order list
  enum_all_order == enum_class.enum_all ::
    (WS1S_Prelim.order => bool) => bool
  enum_ex_order == enum_class.enum_ex :: (WS1S_Prelim.order => bool) => bool
### theory "Draft.WS1S_Prelim"
### 1.281s elapsed time, 1.969s cpu time, 0.952s GC time
Loading theory "Draft.WS1S_PrelimMoreTemplates"
val templateLemmas =
   [("WS1S_Prelim.comparator_order_pointwise",
     "peq_comp comparator_order ?x\<^sub>0",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("WS1S_Prelim.comparator_order_pointwise",
     "psym_comp comparator_order ?x\<^sub>0",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("WS1S_Prelim.comparator_order_pointwise",
     "ptrans_comp comparator_order ?x\<^sub>0",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("WS1S_Prelim.distinct_\<sigma>", "distinct (\<sigma> ?idx)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("WS1S_Prelim.size_atom_zero", "size_atom (zero ?idx) = ?idx",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("WS1S_Prelim.LESS_SUC", "LEQ ?ord 0 ?idx",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("WS1S_Prelim.nvars_CONS",
     "#\<^sub>V (CONS ?x ?\<AA>) = #\<^sub>V ?\<AA>",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("WS1S_Prelim.nvars_SNOC",
     "#\<^sub>V (SNOC ?x ?\<AA>) = #\<^sub>V ?\<AA>",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("WS1S_Prelim.Length_notin_assigns",
     "Length ?\<AA> |\<notin>| ?m\<^bsup>?\<AA>\<^esup>?k",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 2)),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 2),
                 template_var 0))
             )
         )),
    ("WS1S_Prelim.Length_CONS",
     "Length (CONS ?x ?\<AA>) = Suc (Length ?\<AA>)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("WS1S_Prelim.Length_SNOC",
     "Length (SNOC ?x ?\<AA>) = Suc (Length ?\<AA>)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("WS1S_Prelim.fset_eq_empty_iff", "(fset ?X = {}) = (?X = {||})",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("WS1S_Prelim.fMin_eq_0", "0 |\<in>| ?A ==> fMin ?A = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 0), template_hole 2))),
    ("WS1S_Prelim.MSB_append",
     "MSB (?I1.0 @ ?I2.0) = max (MSB ?I1.0) (MSB ?I2.0)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("WS1S_Prelim.set_\<sigma>_length_atom",
     "(?x : set (\<sigma> ?idx)) = (?idx = size_atom ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)))
            )],
       template_equation
        (template_var 0, template_app (template_hole 0, template_var 1)))),
    ("WS1S_Prelim.Suc_in_fimage_Suc",
     "(Suc ?x |\<in>| Suc |`| ?X) = (?x |\<in>| ?X)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app
          (template_app (template_hole 0, template_hole 1),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("WS1S_Prelim.size_atom_extend",
     "size_atom (extend ?ord ?b ?x) = SUC ?ord (size_atom ?x)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app (template_hole 2, template_var 0)))),
    ("WS1S_Prelim.ex_Length_0",
     "EX \<AA>. Length \<AA> = 0 & #\<^sub>V \<AA> = ?idx",
     template_predicate (template_app (template_hole 6, t_empty))),
    ("WS1S_Prelim.fimage_Suc_inj", "(Suc |`| ?A = Suc |`| ?B) = (?A = ?B)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 1),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("WS1S_Prelim.SUC_SUC",
     "SUC ?ord (SUC ?ord' ?idx) = SUC ?ord' (SUC ?ord ?idx)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("WS1S_Prelim.nvars_Extend",
     "#\<^sub>V (Extend ?ord ?i ?\<AA> ?P) = SUC ?ord (#\<^sub>V ?\<AA>)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 3),
         template_app (template_hole 2, template_var 1)))),
    ("WS1S_Prelim.LESS_SUC", "LEQ ?ord (Suc ?l) ?idx = LESS ?ord ?l ?idx",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app (template_hole 1, template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0))),
    ("WS1S_Prelim.LESS_SUC",
     "LESS ?ord ?l ?idx ==> LESS ?ord ?l (SUC ?ord' ?idx)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("WS1S_Prelim.MSB_mono",
     "set ?I1.0 <= set ?I2.0 ==> MSB ?I1.0 <= MSB ?I2.0",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 2, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("WS1S_Prelim.assigns_less_Length",
     "?x |\<in>| ?m1.0\<^bsup>?\<AA>\<^esup>?k ==> ?x < Length ?\<AA>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_than, template_var 3,
         template_app (template_hole 0, template_var 1)))),
    ("WS1S_Prelim.Suc_minus1",
     "Suc (?x - Suc 0) = (if ?x = 0 then Suc 0 else ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 0),
                template_app (template_hole 3, template_hole 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_hole 1)),
               template_app (template_hole 3, template_hole 1)),
             template_var 0)
           ))),
    ("WS1S_Prelim.fMin_fimage_Suc",
     "?x |\<in>| ?A ==> fMin (Suc |`| ?A) = Suc (fMin ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)),
         template_app
          (template_hole 0,
           template_app (template_hole 2, template_var 0))))),
    ("WS1S_Prelim.fMax_image_Suc",
     "?x |\<in>| ?P ==> fMax (Suc |`| ?P) = Suc (fMax ?P)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)),
         template_app
          (template_hole 0,
           template_app (template_hole 2, template_var 0))))),
    ("WS1S_Prelim.Suc_in_fimage_Suc_o_Suc",
     "(Suc ?x |\<in>| (Suc o Suc) |`| ?X) = (?x |\<in>| Suc |`| ?X)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_hole 2),
               template_hole 2)),
           template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 1, template_hole 2),
           template_var 0)))),
    ("WS1S_Prelim.MSB_eq_SucD",
     "MSB ?Is = Suc ?x ==> EX P:set ?Is. ?x |\<in>| P",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             t_empty)
           ))),
    ("WS1S_Prelim.fimage_Suc_o_Suc_eq_fimage_Suc_iff",
     "((Suc o Suc) |`| ?X = Suc |`| ?Y) = (Suc |`| ?X = ?Y)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_hole 0)),
           template_var 1),
         template_app
          (template_app (template_hole 2, template_hole 0),
           template_var 0)),
       template_equation
        (template_app
          (template_app (template_hole 2, template_hole 0), template_var 1),
         template_var 0))),
    ("WS1S_Prelim.fMax_Diff_0",
     "Suc ?m |\<in>| ?P ==> fMax (?P |-| {|0|}) = fMax ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 0))),
         template_app (template_hole 4, template_var 0)))),
    ("WS1S_Prelim.nth_replicate_simp",
     "replicate ?m ?x ! ?i = (if ?i < ?m then ?x else [] ! (?i - ?m))",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 2)),
           template_var 1),
         template_app
          (template_app (template_hole 5, template_hole 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("WS1S_Prelim.MSB_Cons",
     "MSB (?I # ?Is) =
      max (if ?I = {||} then 0 else Suc (fMax ?I)) (MSB ?Is)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 1),
                       template_hole 3)),
                   template_hole 2),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1)))),
             template_app (template_hole 8, template_var 0))
           ))),
    ("WS1S_Prelim.in_fimage_Suc",
     "(?x |\<in>| Suc |`| ?A) = (EX y. y |\<in>| ?A & ?x = Suc y)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("WS1S_Prelim.fset_le_singleton_iff",
     "(fset ?X <= {?x}) = (?X = {||} | ?X = {|?x|})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              template_app
               (template_app (template_hole 5, template_var 0),
                template_hole 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_hole 1)))
           ))),
    ("WS1S_Prelim.nth_zero",
     "LESS ?ord ?m (#\<^sub>V ?\<AA>) ==>
      ~ (case zero (#\<^sub>V ?\<AA>) of
         (x, xa) => WS1S_Prelim.order.case_order x xa)
         ?ord !
        ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1),
              template_app (template_hole 5, template_var 0))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_app (template_hole 2, template_hole 1),
                       template_app
                        (template_hole 0,
                         template_app (template_hole 5, template_var 0))),
                     template_var 2)),
                 template_var 1)
               )
           ))),
    ("WS1S_Prelim.fMax_less_Length",
     "?x |\<in>| ?m1.0\<^bsup>?\<AA>\<^esup>?k ==>
      fMax (?m1.0\<^bsup>?\<AA>\<^esup>?k) < Length ?\<AA>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1),
             template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("WS1S_Prelim.fMin_less_Length",
     "?x |\<in>| ?m1.0\<^bsup>?\<AA>\<^esup>?k ==>
      fMin (?m1.0\<^bsup>?\<AA>\<^esup>?k) < Length ?\<AA>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1),
             template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("WS1S_Prelim.MSB_replicate",
     "MSB (replicate ?n ?P) =
      (if ?P = {||} | ?n = 0 then 0 else Suc (fMax ?P))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_hole 3)),
                   template_app
                    (template_app (template_hole 9, template_var 1),
                     template_hole 2))),
               template_hole 2),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("WS1S_Prelim.MSB_insert_nth",
     "MSB (insert_nth ?n ?P ?Is) =
      max (if ?P = {||} then 0 else Suc (fMax ?P)) (MSB ?Is)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app
                 (template_app (template_hole 7, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 1),
                       template_hole 3)),
                   template_hole 2),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1)))),
             template_app (template_hole 8, template_var 0))
           ))),
    ("WS1S_Prelim.LESS_SUC",
     "?ord ~= ?ord' ==> LESS ?ord ?l (SUC ?ord' ?idx) = LESS ?ord ?l ?idx",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1),
           template_var 0)))),
    ("WS1S_Prelim.MSB_eq0_D",
     "[| MSB ?I = 0; ?x < length ?I |] ==> ?I ! ?x = {||}",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 1), template_hole 5),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("WS1S_Prelim.MSB_greater",
     "[| ?i < length ?Is; ?p |\<in>| ?Is ! ?i |] ==> ?p < MSB ?Is",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 2))
            )],
       template_inequation
        (less_than, template_var 0,
         template_app (template_hole 0, template_var 1)))),
    ("WS1S_Prelim.Length_Extend",
     "Length (Extend ?k ?i ?\<AA> ?P) =
      max (Length ?\<AA>) (if ?P = {||} then 0 else Suc (fMax ?P))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 7, template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 8, template_var 1)),
             template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_hole 3)),
                 template_hole 2),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("WS1S_Prelim.finsert_same_eq_iff",
     "(finsert ?k ?X = finsert ?k ?Y) = (?X |-| {|?k|} = ?Y |-| {|?k|})",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 2, template_var 2), template_var 0)),
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_hole 0)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_hole 0))))),
    ("WS1S_Prelim.assigns_Extend",
     "?ord ~= ?ord' ==>
      ?m\<^bsup>Extend ?ord ?i ?\<AA> ?P\<^esup>?ord' =
      ?m\<^bsup>?\<AA>\<^esup>?ord'",
     template_implication
      ([template_negation
         (template_equation (template_var 5, template_var 4))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 2),
                 template_var 1),
               template_var 0)),
           template_var 4),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1),
           template_var 4)))),
    ("WS1S_Prelim.max_Length_fMax",
     "?x |\<in>| ?m1.0\<^bsup>?\<AA>\<^esup>?k ==>
      max (Length ?\<AA>) (fMax (?m1.0\<^bsup>?\<AA>\<^esup>?k)) =
      Length ?\<AA>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1),
               template_var 0))),
         template_app (template_hole 1, template_var 1)))),
    ("WS1S_Prelim.max_Length_fMin",
     "?x |\<in>| ?m1.0\<^bsup>?\<AA>\<^esup>?k ==>
      max (Length ?\<AA>) (fMin (?m1.0\<^bsup>?\<AA>\<^esup>?k)) =
      Length ?\<AA>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1),
               template_var 0))),
         template_app (template_hole 1, template_var 1)))),
    ("WS1S_Prelim.fimage_Suc_eq_singleton",
     "(Suc |`| ?Z = {|?y|}) = (EX x. ?Z = {|x|} & Suc x = ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_var 1)),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_hole 3)),
       template_app (template_hole 2, t_empty))),
    ("WS1S_Prelim.fin_lift",
     "(?m |\<in>| lift ?bs ?i (?I ! ?i)) =
      (case ?m of 0 => ?bs ! ?i | Suc m => m |\<in>| ?I ! ?i)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1))),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           t_empty),
         template_var 3))),
    ("WS1S_Prelim.insert_nth_Cons",
     "insert_nth ?i ?x (?y # ?xs) =
      (case ?i of 0 => ?x # ?y # ?xs | Suc i => ?y # insert_nth i ?x ?xs)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0))),
           t_empty),
         template_var 3))),
    ("WS1S_Prelim.min_Length_fMax",
     "?x |\<in>| ?m1.0\<^bsup>?\<AA>\<^esup>?k ==>
      min (Length ?\<AA>) (fMax (?m1.0\<^bsup>?\<AA>\<^esup>?k)) =
      fMax (?m1.0\<^bsup>?\<AA>\<^esup>?k)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1),
               template_var 0))),
         template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1),
             template_var 0))))),
    ("WS1S_Prelim.min_Length_fMin",
     "?x |\<in>| ?m1.0\<^bsup>?\<AA>\<^esup>?k ==>
      min (Length ?\<AA>) (fMin (?m1.0\<^bsup>?\<AA>\<^esup>?k)) =
      fMin (?m1.0\<^bsup>?\<AA>\<^esup>?k)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1),
               template_var 0))),
         template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1),
             template_var 0))))),
    ("WS1S_Prelim.is_empty_inj",
     "[| Length ?\<AA> = 0; Length ?\<BB> = 0;
         #\<^sub>V ?\<AA> = #\<^sub>V ?\<BB> |]
      ==> ?\<AA> = ?\<BB>",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 1), template_hole 3),
        template_equation
         (template_app (template_hole 4, template_var 0), template_hole 3),
        template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("WS1S_Prelim.MSB_decreases",
     "MSB ?I <= Suc ?m ==>
      MSB (map (%X. (%I1. I1 - Suc 0) |`| (X |-| {|0|})) ?I) <= ?m",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 8, template_var 1),
          template_app (template_hole 7, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 6, t_empty), template_var 1)),
         template_var 0))),
    ("WS1S_Prelim.Suc_fMax_pred_fimage",
     "[| Suc ?p |\<in>| ?P; 0 |\<notin>| ?P |]
      ==> Suc (fMax ((%x. x - Suc 0) |`| ?P)) = fMax ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              template_var 0)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_hole 4),
                  template_var 0)
                )
            )],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 0))),
         template_app (template_hole 2, template_var 0)))),
    ("WS1S_Prelim.Extend_commute_unsafe",
     "?ord ~= ?ord' ==>
      Extend ?ord ?j (Extend ?ord' ?i ?\<AA> ?P1.0) ?P2.0 =
      Extend ?ord' ?i (Extend ?ord ?j ?\<AA> ?P2.0) ?P1.0",
     template_implication
      ([template_negation
         (template_equation (template_var 6, template_var 5))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 6),
               template_var 4),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 5),
               template_var 3),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 6),
                   template_var 4),
                 template_var 2),
               template_var 0)),
           template_var 1)))),
    ("WS1S_Prelim.CONS_surj",
     "0 < Length ?\<AA> ==>
      EX x \<BB>.
         ?\<AA> = CONS x \<BB> &
         #\<^sub>V \<BB> = #\<^sub>V ?\<AA> &
         size_atom x = #\<^sub>V ?\<AA>",
     template_implication
      ([template_inequation
         (less_than, template_hole 9,
          template_app (template_hole 8, template_var 0))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("WS1S_Prelim.insert_nth_commute",
     "[| ?j <= ?i; ?i <= length ?xs |]
      ==> insert_nth ?j ?y (insert_nth ?i ?x ?xs) =
          insert_nth (Suc ?i) ?x (insert_nth ?j ?y ?xs)",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3),
        template_inequation
         (less_equals, template_var 3,
          template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 1),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 3)),
             template_var 0),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 1),
             template_var 2))))),
    ("WS1S_Prelim.Extend_CONS",
     "#\<^sub>V ?\<AA> = size_atom ?x ==>
      Extend ?ord 0 (CONS ?x ?\<AA>) ?P =
      CONS (extend ?ord (eval ?P 0) ?x)
       (Extend ?ord 0 ?\<AA> (downshift ?P))",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 3),
          template_app (template_hole 7, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 5, template_var 1),
               template_hole 4),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 3)),
           template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 4)),
               template_var 2)),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 5, template_var 1),
                 template_hole 4),
               template_var 3),
             template_app (template_hole 0, template_var 0)))))),
    ("WS1S_Prelim.MSB_map_index'_CONS",
     "MSB (map_index' ?i (lift ?bs) ?Is) =
      (if MSB ?Is = 0 & (ALL i:{?i..<?i + length ?Is}. ~ ?bs ! i) then 0
       else Suc (MSB ?Is))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 12,
              template_app
               (template_app
                 (template_app (template_hole 11, template_var 2),
                  template_app (template_hole 10, template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app
                        (template_hole 13,
                         template_app (template_hole 12, template_var 0)),
                       template_hole 7)),
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 5, template_var 2),
                         template_app
                          (template_app (template_hole 4, template_var 2),
                           template_app
                            (template_hole 3, template_var 0)))),
                     t_empty))),
               template_hole 7),
             template_app
              (template_hole 0,
               template_app (template_hole 12, template_var 0)))
           ))),
    ("WS1S_Prelim.MSB_map_index'_SNOC",
     "MSB ?Is <= ?n ==>
      MSB (map_index' ?i (snoc ?n ?bs) ?Is) =
      (if ALL i:{?i..<?i + length ?Is}. ~ ?bs ! i then MSB ?Is
       else Suc ?n)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 11, template_var 3),
          template_var 2)],
       template_equation
        (template_app
          (template_hole 11,
           template_app
            (template_app
              (template_app (template_hole 9, template_var 1),
               template_app
                (template_app (template_hole 8, template_var 2),
                 template_var 0)),
             template_var 3)),
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_app
                      (template_app (template_hole 4, template_var 1),
                       template_app (template_hole 3, template_var 3)))),
                 t_empty)),
             template_app (template_hole 11, template_var 3)),
           template_app (template_hole 0, template_var 2))))),
    ("WS1S_Prelim.map_index'_eq_conv",
     "(map_index' ?i ?f ?xs = map_index' ?j ?g ?xs) =
      (ALL k<length ?xs. ?f (?i + k) (?xs ! k) = ?g (?j + k) (?xs ! k))",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_app (template_hole 7, template_var 4),
               template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_app (template_hole 7, template_var 1),
             template_var 0),
           template_var 2)),
       template_app (template_hole 6, t_empty))),
    ("WS1S_Prelim.len_downshift_helper",
     "[| ?x |\<in>| ?P;
         Suc (fMax ((%x. x - Suc 0) |`| (?P |-| {|0|}))) ~= fMax ?P;
         ?xa |\<in>| ?P |]
      ==> ?xa = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 7,
                template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, t_empty),
                    template_app
                     (template_app (template_hole 2, template_var 1),
                      template_app
                       (template_app (template_hole 1, template_hole 3),
                        template_hole 0))))),
              template_app (template_hole 6, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_var 1)
            )],
       template_equation (template_var 0, template_hole 3))),
    ("WS1S_Prelim.Extend_commute_safe",
     "[| ?j <= ?i; LEQ ?ord ?i (#\<^sub>V ?\<AA>) |]
      ==> Extend ?ord ?j (Extend ?ord ?i ?\<AA> ?P1.0) ?P2.0 =
          Extend ?ord (Suc ?i) (Extend ?ord ?j ?\<AA> ?P2.0) ?P1.0",
     template_implication
      ([template_inequation (less_equals, template_var 5, template_var 4),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 4),
              template_app
               (template_app (template_hole 4, template_var 3),
                template_app (template_hole 3, template_var 2)))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 5),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 4),
                 template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_app (template_hole 0, template_var 4)),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 5),
                 template_var 2),
               template_var 0)),
           template_var 1)))),
    ("WS1S_Prelim.assigns_Extend",
     "LEQ ?ord ?i (#\<^sub>V ?\<AA>) ==>
      ?m\<^bsup>Extend ?ord ?i ?\<AA> ?P\<^esup>?ord =
      (if ?m = ?i then ?P
       else (if ?i < ?m then ?m - Suc 0
             else ?m)\<^bsup>?\<AA>\<^esup>?ord)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 12, template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 11, template_var 4),
                template_app (template_hole 10, template_var 2)))
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_app (template_hole 8, template_var 1),
                  template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 7, template_var 4),
                        template_var 3),
                      template_var 2),
                    template_var 0)),
                template_var 4)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_var 3)),
                 template_var 0),
               template_app
                (template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app
                        (template_app
                          (template_hole 4,
                           template_app
                            (template_app (template_hole 3, template_var 3),
                             template_var 1)),
                         template_app
                          (template_app (template_hole 2, template_var 1),
                           template_app
                            (template_hole 1, template_hole 0))),
                       template_var 1)),
                   template_var 2),
                 template_var 4))
             )))),
    ("WS1S_Prelim.CONS_inj",
     "[| size_atom ?x = #\<^sub>V ?\<AA>; size_atom ?y = #\<^sub>V ?\<AA>;
         #\<^sub>V ?\<AA> = #\<^sub>V ?\<BB> |]
      ==> (CONS ?x ?\<AA> = CONS ?y ?\<BB>) = (?x = ?y & ?\<AA> = ?\<BB>)",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 3),
          template_app (template_hole 5, template_var 2)),
        template_equation
         (template_app (template_hole 6, template_var 1),
          template_app (template_hole 5, template_var 2)),
        template_equation
         (template_app (template_hole 5, template_var 2),
          template_app (template_hole 5, template_var 0))],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1)),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 0))
             )))),
    ("WS1S_Prelim.assigns_SNOC",
     "[| #\<^sub>V ?\<AA> = size_atom ?bs1_bs2.0;
         LESS ?ord ?x (#\<^sub>V ?\<AA>) |]
      ==> ?x\<^bsup>SNOC ?bs1_bs2.0 ?\<AA>\<^esup>?ord =
          (if (case ?bs1_bs2.0 of
               (x, xa) => WS1S_Prelim.order.case_order x xa)
               ?ord !
              ?x
           then finsert (Length ?\<AA>) (?x\<^bsup>?\<AA>\<^esup>?ord)
           else ?x\<^bsup>?\<AA>\<^esup>?ord)",
     template_implication
      ([template_equation
         (template_app (template_hole 11, template_var 3),
          template_app (template_hole 10, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 1),
                template_var 0),
              template_app (template_hole 11, template_var 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 7, template_var 0),
             template_app
              (template_app (template_hole 6, template_var 2),
               template_var 3)),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_app (template_hole 3, template_hole 2),
                       template_var 2),
                     template_var 1)),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 3)),
               template_app
                (template_app
                  (template_app (template_hole 7, template_var 0),
                   template_var 3),
                 template_var 1))),
           template_app
            (template_app
              (template_app (template_hole 7, template_var 0),
               template_var 3),
             template_var 1))))),
    ("WS1S_Prelim.interp_eqI",
     "[| Length ?\<AA> = Length ?\<BB>; #\<^sub>V ?\<AA> = #\<^sub>V ?\<BB>;
         !!m k.
            LESS k m (#\<^sub>V ?\<AA>) ==>
            m\<^bsup>?\<AA>\<^esup>k = m\<^bsup>?\<BB>\<^esup>k |]
      ==> ?\<AA> = ?\<BB>",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 1),
          template_app (template_hole 8, template_var 0)),
        template_equation
         (template_app (template_hole 6, template_var 1),
          template_app (template_hole 6, template_var 0)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("WS1S_Prelim.assigns_CONS",
     "[| #\<^sub>V ?\<AA> = size_atom ?bs1_bs2.0;
         LESS ?ord ?x (#\<^sub>V ?\<AA>) |]
      ==> ?x\<^bsup>CONS ?bs1_bs2.0 ?\<AA>\<^esup>?ord =
          (if (case ?bs1_bs2.0 of
               (x, xa) => WS1S_Prelim.order.case_order x xa)
               ?ord !
              ?x
           then finsert 0 (upshift (?x\<^bsup>?\<AA>\<^esup>?ord))
           else upshift (?x\<^bsup>?\<AA>\<^esup>?ord))",
     template_implication
      ([template_equation
         (template_app (template_hole 12, template_var 3),
          template_app (template_hole 11, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 1),
                template_var 0),
              template_app (template_hole 12, template_var 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 8, template_var 0),
             template_app
              (template_app (template_hole 7, template_var 2),
               template_var 3)),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_app (template_hole 4, template_hole 3),
                       template_var 2),
                     template_var 1)),
                 template_var 0)),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_app (template_hole 8, template_var 0),
                     template_var 3),
                   template_var 1)))),
           template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 8, template_var 0),
                 template_var 3),
               template_var 1)))))),
    ("WS1S_Prelim.Extend_SNOC_cut",
     "[| len ?P <= Suc (Length ?\<AA>); #\<^sub>V ?\<AA> = size_atom ?x |]
      ==> Extend ?ord 0 (SNOC ?x ?\<AA>) ?P =
          SNOC
           (extend ?ord (if Length ?\<AA> |\<in>| ?P then True else False)
             ?x)
           (Extend ?ord 0 ?\<AA> (ffilter (%i. i < Length ?\<AA>) ?P))",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 16, template_var 3),
          template_app
           (template_hole 15,
            template_app (template_hole 14, template_var 2))),
        template_equation
         (template_app (template_hole 12, template_var 2),
          template_app (template_hole 11, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 9, template_var 0),
               template_hole 8),
             template_app
              (template_app (template_hole 7, template_var 1),
               template_var 2)),
           template_var 3),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_app (template_hole 6, template_var 0),
                 template_app
                  (template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app
                          (template_hole 4,
                           template_app (template_hole 14, template_var 2)),
                         template_var 3)),
                     template_hole 3),
                   template_hole 2)),
               template_var 1)),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 9, template_var 0),
                 template_hole 8),
               template_var 2),
             template_app
              (template_app (template_hole 1, t_empty),
               template_var 3)))))),
    ("WS1S_Prelim.append_replicate_inj",
     "[| ?xs ~= [] ==> last ?xs ~= ?x; ?ys ~= [] ==> last ?ys ~= ?x |]
      ==> (?xs @ replicate ?m ?x = ?ys @ replicate ?n ?x) =
          (?xs = ?ys & ?m = ?n)",
     template_implication
      ([template_implication
         ([template_negation
            (template_equation (template_var 4, template_hole 7))],
          template_negation
           (
              template_equation
               (template_app (template_hole 5, template_var 4),
                template_var 3)
              )),
        template_implication
         ([template_negation
            (template_equation (template_var 2, template_hole 7))],
          template_negation
           (
              template_equation
               (template_app (template_hole 5, template_var 2),
                template_var 3)
              ))],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 3)),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 3))),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 8, template_var 4),
                   template_var 2)),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))
             ))))]:
   (string * thm * template) list
### theory "Draft.WS1S_PrelimMoreTemplates"
### 0.397s elapsed time, 0.531s cpu time, 0.060s GC time
val it = (): unit
