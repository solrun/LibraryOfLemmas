Loading theory "Coinductive_Languages.Coinductive_Language" (required by "Draft.Abstract_FormulaMoreTemplates" via "Draft.Abstract_Formula" via "Draft.Automaton")
Loading theory "Deriving.Derive_Manager" (required by "Draft.Abstract_FormulaMoreTemplates" via "Draft.Abstract_Formula" via "Deriving.Compare_Instances" via "Deriving.Compare_Generator" via "Deriving.Comparator_Generator")
Loading theory "Deriving.Comparator" (required by "Draft.Abstract_FormulaMoreTemplates" via "Draft.Abstract_Formula" via "Deriving.Compare_Instances" via "Deriving.Compare_Generator" via "Deriving.Comparator_Generator")
Loading theory "Deriving.Generator_Aux" (required by "Draft.Abstract_FormulaMoreTemplates" via "Draft.Abstract_Formula" via "Deriving.Compare_Instances" via "Deriving.Compare_Generator" via "Deriving.Comparator_Generator")
signature DERIVE_MANAGER =
  sig
    val derive: string -> string -> string -> theory -> theory
    val derive_cmd: string -> string -> string -> theory -> theory
    val print_info: theory -> unit
    val register_derive:
       string ->
         string ->
           (string -> string -> theory -> theory) -> theory -> theory
  end
structure Derive_Manager: DERIVE_MANAGER
### theory "Deriving.Derive_Manager"
### 0.055s elapsed time, 0.252s cpu time, 0.000s GC time
signature BNF_ACCESS =
  sig
    val bnf_types: Proof.context -> string list -> typ list
    val case_consts: Proof.context -> string list -> term list
    val case_simps: Proof.context -> string list -> thm list list
    val case_thms: Proof.context -> string list -> thm list
    val constr_argument_types:
       Proof.context -> string list -> typ list list list
    val constr_terms: Proof.context -> string -> term list
    val distinct_thms: Proof.context -> string list -> thm list list
    val induct_thms: Proof.context -> string list -> thm list
    val inject_thms: Proof.context -> string list -> thm list list
    val map_comps: Proof.context -> string list -> thm list
    val map_simps: Proof.context -> string list -> thm list list
    val map_terms: Proof.context -> string list -> term list
    val set_simps: Proof.context -> string list -> thm list list
    val set_terms: Proof.context -> string list -> term list list
  end
structure Bnf_Access: BNF_ACCESS
Loading theory "HOL-Library.Char_ord" (required by "Draft.Abstract_FormulaMoreTemplates" via "Draft.Abstract_Formula" via "Deriving.Compare_Instances")
instantiation
  char :: linorder
  less_eq_char == less_eq :: char => char => bool
  less_char == less :: char => char => bool
instantiation
  char :: distrib_lattice
  inf_char == inf :: char => char => char
  sup_char == sup :: char => char => char
### theory "HOL-Library.Char_ord"
### 0.101s elapsed time, 0.382s cpu time, 0.035s GC time
Loading theory "HOL-Library.Code_Abstract_Nat" (required by "Draft.Abstract_FormulaMoreTemplates" via "Draft.Abstract_Formula" via "HOL-Library.Code_Target_Nat")
signature GENERATOR_AUX =
  sig
    val OF_option: thm -> thm option list -> thm
    val add_used_tycos:
       Proof.context -> string -> string list -> string list
    val alist_to_string: (string * 'a) list -> string
    val conjI_tac:
       thm list ->
         Proof.context ->
           'a list -> (Proof.context -> int -> tactic) -> tactic
    val create_map:
       (typ -> term) ->
         (string * typ -> 'a -> term) ->
           'a ->
             (typ -> bool) ->
               (local_theory -> string -> bool list) ->
                 (local_theory -> string -> term) ->
                   (local_theory -> string -> 'a -> term) ->
                     string list ->
                       (local_theory -> string -> 'a) ->
                         typ -> local_theory -> term
    val create_partial:
       'a ->
         (typ -> bool) ->
           (local_theory -> string -> bool list) ->
             (local_theory -> string -> term) ->
               (local_theory -> string -> 'a -> term) ->
                 string list ->
                   (local_theory -> string -> 'a) ->
                     typ -> local_theory -> term
    val define_overloaded:
       string * term -> local_theory -> thm * local_theory
    val define_overloaded_generic:
       Attrib.binding * term -> local_theory -> thm * local_theory
    val drop_last: 'a list -> 'a list
    val freeify_tvars: typ -> typ
    val ind_case_to_idxs: 'a list list -> int -> int * int
    val infer_type: Proof.context -> term -> term
    val ints_to_subscript: int list -> string
    val is_class_instance: theory -> string -> sort -> bool
    val lambdas: term list -> term -> term
    val mk_case_tac:
       Proof.context ->
         term option list list ->
           thm ->
             (int ->
                Proof.context * thm list * (string * cterm) list -> tactic)
               -> tactic
    val mk_def: typ -> string -> term -> term
    val mk_id: typ -> term
    val mk_infer_const: string -> Proof.context -> term -> term
    val mutual_recursive_types:
       string -> Proof.context -> string list * typ list
    val prove_multi_future:
       Proof.context ->
         string list ->
           term list ->
             term list ->
               ({context: Proof.context, prems: thm list} -> tactic) ->
                 thm list
    val recursor:
       (string -> 'a) * ('a -> bool list) * string list ->
         bool ->
           (typ -> 'b) ->
             (typ -> 'b) ->
               (typ -> 'b) ->
                 ((typ * 'b option) list * 'a -> 'b) -> typ -> 'b
    val rename_types: (typ * typ) list -> term -> term
    val split_IHs:
       (string -> 'a) * ('a -> bool list) * string list ->
         typ list -> thm list -> thm list list
    val std_recursor_tac:
       (string -> 'a) * ('a -> bool list) * string list ->
         typ list ->
           ('a -> thm) ->
             thm list -> typ -> thm list -> Proof.context -> tactic
    val sub: string -> string
    val subT: string -> typ -> string
    val typ_and_vs_of_typname:
       theory -> string -> sort -> typ * (string * sort) list
    val typ_and_vs_of_used_typname:
       string ->
         bool list -> string list -> typ * (string * string list) list
    val type_parameters:
       typ -> Proof.context -> (string * sort) list * typ list
  end
structure Generator_Aux: GENERATOR_AUX
### theory "Deriving.Generator_Aux"
### 0.194s elapsed time, 0.786s cpu time, 0.035s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Abstract_FormulaMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "HOL-Library.Code_Abstract_Nat"
### 0.081s elapsed time, 0.321s cpu time, 0.000s GC time
Loading theory "HOL-Library.Code_Target_Nat" (required by "Draft.Abstract_FormulaMoreTemplates" via "Draft.Abstract_Formula")
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### Code generator: dropping subsumed code equation
### divmod_nat ?m ?n ==
### if ?n = 0 | ?m < ?n then (0, ?m)
### else let (q, y) = divmod_nat (?m - ?n) ?n in (Suc q, y)
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit1 ?n) ==
### if ?m < ?n then (0, numeral (num.Bit1 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit1 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit1 ?n) ==
### if ?m <= ?n then (0, numeral (num.Bit0 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit0 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r + 1)
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit1 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit0 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod ?m num.One == (numeral ?m, 0)
### Code generator: dropping subsumed code equation
### Suc ?m <= ?n == ?m < ?n
### Code generator: dropping subsumed code equation
### 0 <= ?n == True
### Code generator: dropping subsumed code equation
### ?m < Suc ?n == ?m <= ?n
### Code generator: dropping subsumed code equation
### ?n < 0 == False
### theory "HOL-Library.Function_Algebras"
### 0.171s elapsed time, 0.671s cpu time, 0.055s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Abstract_FormulaMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
consts
  Zero :: "'a language"
### Code generator: dropping subsumed code equation
### of_nat ?n == semiring_1_class.of_nat_aux (%i. i + (1::?'a)) ?n (0::?'a)
consts
  One :: "'a language"
Found termination order: "{}"
consts
  Atom :: "'a => 'a language"
locale comparator
  fixes comp :: "'a => 'a => order"
  assumes "comparator comp"
consts
  Plus :: "'a language => 'a language => 'a language"
### theory "HOL-Library.Code_Target_Nat"
### 0.201s elapsed time, 0.794s cpu time, 0.055s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Abstract_FormulaMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
consts
  TimesLR :: "'a language => 'a language => ('a * bool) language"
consts
  Times_Plus :: "('a * bool) language => 'a language"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
Proofs for inductive predicate(s) "Plus_cong"
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
  Proving monotonicity ...
consts
  StarLR :: "'a language => 'a language => 'a language"
consts
  Inter :: "'a language => 'a language => 'a language"
consts
  Not :: "'a language => 'a language"
Found termination order: "size_list size <*mlex*> {}"
consts
  Full :: "'a language"
consts
  ShuffleLR :: "'a language => 'a language => ('a * bool) language"
### theory "HOL-Library.Set_Algebras"
### 0.268s elapsed time, 1.053s cpu time, 0.139s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Abstract_FormulaMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "Deriving.Comparator"
### 0.720s elapsed time, 2.861s cpu time, 0.229s GC time
Loading theory "Deriving.Compare" (required by "Draft.Abstract_FormulaMoreTemplates" via "Draft.Abstract_Formula" via "Deriving.Compare_Instances" via "Deriving.Compare_Generator")
Proofs for inductive predicate(s) "regular_cong"
  Proving monotonicity ...
### theory "HOL-Library.Nat_Bijection"
### 0.395s elapsed time, 1.558s cpu time, 0.139s GC time
Loading theory "Deriving.Comparator_Generator" (required by "Draft.Abstract_FormulaMoreTemplates" via "Draft.Abstract_Formula" via "Deriving.Compare_Instances" via "Deriving.Compare_Generator")
class compare = type +
  fixes compare :: "'a => 'a => order"
  assumes "comparator_compare": "comparator compare"
instantiation
  language :: (type) {order,semiring_1}
  zero_language == zero_class.zero :: 'a language
  plus_language == plus :: 'a language => 'a language => 'a language
  one_language == one_class.one :: 'a language
  times_language == times :: 'a language => 'a language => 'a language
  less_eq_language == less_eq :: 'a language => 'a language => bool
  less_language == less :: 'a language => 'a language => bool
Proofs for inductive predicate(s) "Plus_Times_pre_cong"
  Proving monotonicity ...
class compare_order = compare + ord +
  assumes "ord_defs": "le_of_comp compare = (<=)" "lt_of_comp compare = (<)"
consts
  tails :: "'a list => 'a list list"
consts
  in_language :: "'a language => 'a list => bool"
Found termination order: "size_list size <*mlex*> {}"
consts
  to_language :: "'a list set => 'a language"
### theory "Coinductive_Languages.Coinductive_Language"
### 1.250s elapsed time, 4.783s cpu time, 0.856s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Abstract_FormulaMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
class compare_order = compare + linorder +
  assumes "ord_defs": "le_of_comp compare = (<=)" "lt_of_comp compare = (<)"
signature COMPARE_CODE =
  sig
    val change_compare_code:
       term -> string list -> local_theory -> local_theory
  end
structure Compare_Code: COMPARE_CODE
Found termination order: "size <*mlex*> {}"
### theory "Deriving.Compare"
### 0.878s elapsed time, 3.293s cpu time, 0.750s GC time
Loading theory "HOL-Library.While_Combinator" (required by "Draft.Abstract_FormulaMoreTemplates" via "Draft.Abstract_Formula" via "Draft.Automaton")
signature COMPARATOR_GENERATOR =
  sig
    datatype comparator_type = BNF | Linorder
    val ensure_info:
       comparator_type -> string -> local_theory -> local_theory
    val generate_comparator:
       comparator_type -> string -> local_theory -> local_theory
    val generate_comparators_from_bnf_fp:
       string ->
         local_theory ->
           ((term * thm list) list * (term * thm) list) * local_theory
    val get_info: Proof.context -> string -> info option
    type info =
       {comp: term,
        comp_def: thm option,
        comp_thm: thm,
        map: term,
        map_comp: thm option,
        partial_comp_thms: thm list, pcomp: term, used_positions: bool list}
    val register_comparator_of: string -> local_theory -> local_theory
    val register_foreign_comparator:
       typ -> term -> thm -> local_theory -> local_theory
    val register_foreign_partial_and_full_comparator:
       string ->
         term ->
           term ->
             term ->
               thm option ->
                 thm option ->
                   thm ->
                     thm ->
                       thm ->
                         thm -> bool list -> local_theory -> local_theory
  end
structure Comparator_Generator: COMPARATOR_GENERATOR
### theory "Deriving.Comparator_Generator"
### 0.859s elapsed time, 3.215s cpu time, 0.750s GC time
Loading theory "Deriving.Compare_Generator" (required by "Draft.Abstract_FormulaMoreTemplates" via "Draft.Abstract_Formula" via "Deriving.Compare_Instances")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "{}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
signature COMPARE_GENERATOR =
  sig
    val compare_instance:
       Comparator_Generator.comparator_type -> string -> theory -> theory
    val compare_order_instance_via_comparator_of: string -> theory -> theory
    val compare_order_instance_via_compare: string -> theory -> theory
  end
structure Compare_Generator: COMPARE_GENERATOR
### theory "Deriving.Compare_Generator"
### 0.354s elapsed time, 1.389s cpu time, 0.147s GC time
Loading theory "Deriving.Compare_Instances" (required by "Draft.Abstract_FormulaMoreTemplates" via "Draft.Abstract_Formula")
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.While_Combinator"
### 0.455s elapsed time, 1.801s cpu time, 0.147s GC time
Loading theory "Draft.Automaton" (required by "Draft.Abstract_FormulaMoreTemplates" via "Draft.Abstract_Formula")
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
deriving "compare_order" instance for type "Int.int"
deriving "compare" instance for type "Int.int"
deriving "compare_order" instance for type "Code_Numeral.integer"
deriving "compare" instance for type "Code_Numeral.integer"
deriving "compare_order" instance for type "Nat.nat"
deriving "compare" instance for type "Nat.nat"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
deriving "compare_order" instance for type "String.char"
deriving "compare" instance for type "String.char"
Found termination order: "size <*mlex*> {}"
deriving "compare" instance for type "Sum_Type.sum"
generating comparator for type "Sum_Type.sum"
### theory "HOL-Library.Stream"
### 0.973s elapsed time, 3.835s cpu time, 0.335s GC time
Loading theory "Draft.While_Default" (required by "Draft.Abstract_FormulaMoreTemplates" via "Draft.Abstract_Formula")
Proofs for coinductive predicate(s) "rel_language"
deriving "compare" instance for type "List.list"
generating comparator for type "List.list"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "Draft.While_Default"
### 0.067s elapsed time, 0.262s cpu time, 0.077s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Abstract_FormulaMoreTemplates" via "Draft.ExtrEqs")
deriving "compare" instance for type "Product_Type.prod"
generating comparator for type "Product_Type.prod"
deriving "compare" instance for type "Option.option"
generating comparator for type "Option.option"
locale DA
  fixes alphabet :: "'a list"
    and init :: "'t => 's"
    and delta :: "'a => 's => 's"
    and accept :: "'s => bool"
    and wellformed :: "'s => bool"
    and Language :: "'s => 'a language"
    and wf :: "'t => bool"
    and Lang :: "'t => 'a language"
  assumes "DA alphabet init delta accept wellformed Language wf Lang"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
locale DAs
  fixes alphabet1 :: "'a1 list"
    and init1 :: "'t1 => 's1"
    and delta1 :: "'a1 => 's1 => 's1"
    and accept1 :: "'s1 => bool"
    and wellformed1 :: "'s1 => bool"
    and Language1 :: "'s1 => 'a1 language"
    and wf1 :: "'t1 => bool"
    and Lang1 :: "'t1 => 'a1 language"
    and alphabet2 :: "'a2 list"
    and init2 :: "'t2 => 's2"
    and delta2 :: "'a2 => 's2 => 's2"
    and accept2 :: "'s2 => bool"
    and wellformed2 :: "'s2 => bool"
    and Language2 :: "'s2 => 'a2 language"
    and wf2 :: "'t2 => bool"
    and Lang2 :: "'t2 => 'a2 language"
    and letter_eq :: "'a1 => 'a2 => bool"
  assumes
    "DAs alphabet1 init1 delta1 accept1 wellformed1 Language1 wf1 Lang1
      alphabet2 init2 delta2 accept2 wellformed2 Language2 wf2 Lang2
      letter_eq"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
deriving "compare" instance for type "HOL.bool"
deriving "compare" instance for type "Product_Type.unit"
deriving "compare_order" instance for type "HOL.bool"
deriving "compare_order" instance for type "Product_Type.unit"
### theory "Deriving.Compare_Instances"
### 0.533s elapsed time, 2.108s cpu time, 0.209s GC time
locale DFA
  fixes alphabet :: "'a list"
    and init :: "'b => 'c"
    and delta :: "'a => 'c => 'c"
    and accept :: "'c => bool"
    and wellformed :: "'c => bool"
    and Language :: "'c => 'a language"
    and wf :: "'b => bool"
    and Lang :: "'b => 'a language"
  assumes "DFA alphabet init delta accept wellformed Language wf Lang"
(if ?x <= ?y then if ?x = ?y then ?P else ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x <= ?y then if ?y = ?x then ?P else ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x <= ?y then if ?y <= ?x then ?P else ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x <= ?y then if ?x < ?y then ?Q else ?P else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x < ?y then ?Q else if ?x <= ?y then ?P else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x < ?y then ?Q else if ?y < ?x then ?R else ?P) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x < ?y then ?Q else if ?x = ?y then ?P else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x < ?y then ?Q else if ?y = ?x then ?P else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x = ?y then ?P else if ?y < ?x then ?R else ?Q) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x = ?y then ?P else if ?x < ?y then ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x = ?y then ?P else if ?y <= ?x then ?R else ?Q) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x = ?y then ?P else if ?x <= ?y then ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale DFAs
  fixes alphabet1 :: "'a1 list"
    and init1 :: "'t1 => 's1"
    and delta1 :: "'a1 => 's1 => 's1"
    and accept1 :: "'s1 => bool"
    and wellformed1 :: "'s1 => bool"
    and Language1 :: "'s1 => 'a1 language"
    and wf1 :: "'t1 => bool"
    and Lang1 :: "'t1 => 'a1 language"
    and alphabet2 :: "'a2 list"
    and init2 :: "'t2 => 's2"
    and delta2 :: "'a2 => 's2 => 's2"
    and accept2 :: "'s2 => bool"
    and wellformed2 :: "'s2 => bool"
    and Language2 :: "'s2 => 'a2 language"
    and wf2 :: "'t2 => bool"
    and Lang2 :: "'t2 => 'a2 language"
    and letter_eq :: "'a1 => 'a2 => bool"
  assumes
    "DFAs alphabet1 init1 delta1 accept1 wellformed1 Language1 wf1 Lang1
      alphabet2 init2 delta2 accept2 wellformed2 Language2 wf2 Lang2
      letter_eq"
### theory "Draft.Automaton"
### 0.554s elapsed time, 2.108s cpu time, 0.144s GC time
Loading theory "Draft.Abstract_Formula" (required by "Draft.Abstract_FormulaMoreTemplates")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.257s elapsed time, 8.358s cpu time, 1.218s GC time
Loading theory "Draft.Templates" (required by "Draft.Abstract_FormulaMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.065s elapsed time, 0.221s cpu time, 0.000s GC time
### theory "HOL-Library.BigO"
### 0.811s elapsed time, 2.655s cpu time, 0.259s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Abstract_FormulaMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.806s elapsed time, 1.977s cpu time, 0.915s GC time
deriving "linorder" instance for type "Abstract_Formula.aformula"
generating comparator for type "Abstract_Formula.aformula"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  norm_ACI :: "('a, 'b) aformula => ('a, 'b) aformula"
Found termination order: "size <*mlex*> {}"
locale Formula_Operations
  fixes TYPEVARS :: "'a * 'i * 'k * 'n * 'x * 'v"
    and SUC :: "'k => 'n => 'n"
    and LESS :: "'k => nat => 'n => bool"
    and
    assigns :: "nat => 'i => 'k => 'v"
      (\<open>_\<^bsup>_\<^esup>_\<close> [900, 999, 999] 999)
    and nvars :: "'i => 'n"  (\<open>#\<^sub>V _\<close> [1000] 900)
    and Extend :: "'k => nat => 'i => 'v => 'i"
    and CONS :: "'x => 'i => 'i"
    and SNOC :: "'x => 'i => 'i"
    and Length :: "'i => nat"
    and extend :: "'k => bool => 'x => 'x"
    and size :: "'x => 'n"
    and zero :: "'n => 'x"
    and alphabet :: "'n => 'x list"
    and eval :: "'v => nat => bool"
    and downshift :: "'v => 'v"
    and upshift :: "'v => 'v"
    and add :: "nat => 'v => 'v"
    and cut :: "nat => 'v => 'v"
    and len :: "'v => nat"
    and restrict :: "'k => 'v => bool"
    and Restrict :: "'k => nat => ('a, 'k) aformula"
    and lformula0 :: "'a => bool"
    and FV0 :: "'k => 'a => nat set"
    and find0 :: "'k => nat => 'a => bool"
    and wf0 :: "'n => 'a => bool"
    and decr0 :: "'k => nat => 'a => 'a"
    and
    satisfies0 :: "'i => 'a => bool"
      (infix \<open>\<Turnstile>\<^sub>0\<close> 50)
    and nullable0 :: "'a => bool"
    and lderiv0 :: "'x => 'a => ('a, 'k) aformula"
    and rderiv0 :: "'x => 'a => ('a, 'k) aformula"
consts
  FV :: "('a, 'k) aformula => 'k => nat set"
consts
  find :: "'k => nat => ('a, 'k) aformula => bool"
consts
  wf :: "'n => ('a, 'k) aformula => bool"
consts
  lformula :: "('a, 'k) aformula => bool"
consts
  decr :: "'k => nat => ('a, 'k) aformula => ('a, 'k) aformula"
consts
  satisfies_gen ::
    "('k => 'v => nat => bool) => 'i => ('a, 'k) aformula => bool"
Found termination order: "size <*mlex*> {}"
consts
  nullable :: "('a, 'k) aformula => bool"
Found termination order:
  "(%p. size (fst p)) <*mlex*> (%p. size (snd p)) <*mlex*> {}"
Found termination order:
  "(%p. size (fst p)) <*mlex*> (%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  deriv :: "'x => ('a, 'k) aformula => ('a, 'k) aformula"
locale Formula
  fixes SUC :: "'k => 'n => 'n"
    and LESS :: "'k => nat => 'n => bool"
    and
    assigns :: "nat => 'i => 'k => 'v"
      (\<open>_\<^bsup>_\<^esup>_\<close> [900, 999, 999] 999)
    and nvars :: "'i => 'n"  (\<open>#\<^sub>V _\<close> [1000] 900)
    and Extend :: "'k => nat => 'i => 'v => 'i"
    and CONS :: "'x => 'i => 'i"
    and SNOC :: "'x => 'i => 'i"
    and Length :: "'i => nat"
    and extend :: "'k => bool => 'x => 'x"
    and size :: "'x => 'n"
    and zero :: "'n => 'x"
    and alphabet :: "'n => 'x list"
    and eval :: "'v => nat => bool"
    and downshift :: "'v => 'v"
    and upshift :: "'v => 'v"
    and add :: "nat => 'v => 'v"
    and cut :: "nat => 'v => 'v"
    and len :: "'v => nat"
    and restrict :: "'k => 'v => bool"
    and Restrict :: "'k => nat => ('a, 'k) aformula"
    and lformula0 :: "'a => bool"
    and FV0 :: "'k => 'a => nat set"
    and find0 :: "'k => nat => 'a => bool"
    and wf0 :: "'n => 'a => bool"
    and decr0 :: "'k => nat => 'a => 'a"
    and
    satisfies0 :: "'i => 'a => bool"
      (infix \<open>\<Turnstile>\<^sub>0\<close> 50)
    and nullable0 :: "'a => bool"
    and lderiv0 :: "'x => 'a => ('a, 'k) aformula"
    and rderiv0 :: "'x => 'a => ('a, 'k) aformula"
    and TYPEVARS :: "'a * 'i * 'k * 'n * 'x * 'v"
  assumes
    "Formula SUC LESS assigns nvars Extend CONS SNOC Length extend size zero
      alphabet eval downshift upshift add cut len restrict Restrict
      lformula0 FV0 find0 wf0 decr0 (\<Turnstile>\<^sub>0) nullable0 lderiv0
      rderiv0"
locale Formula
  fixes SUC :: "'k => 'n => 'n"
    and LESS :: "'k => nat => 'n => bool"
    and
    assigns :: "nat => 'i => 'k => 'v"
      (\<open>_\<^bsup>_\<^esup>_\<close> [900, 999, 999] 999)
    and nvars :: "'i => 'n"  (\<open>#\<^sub>V _\<close> [1000] 900)
    and Extend :: "'k => nat => 'i => 'v => 'i"
    and CONS :: "'x => 'i => 'i"
    and SNOC :: "'x => 'i => 'i"
    and Length :: "'i => nat"
    and extend :: "'k => bool => 'x => 'x"
    and size :: "'x => 'n"
    and zero :: "'n => 'x"
    and alphabet :: "'n => 'x list"
    and eval :: "'v => nat => bool"
    and downshift :: "'v => 'v"
    and upshift :: "'v => 'v"
    and add :: "nat => 'v => 'v"
    and cut :: "nat => 'v => 'v"
    and len :: "'v => nat"
    and restrict :: "'k => 'v => bool"
    and Restrict :: "'k => nat => ('a, 'k) aformula"
    and lformula0 :: "'a => bool"
    and FV0 :: "'k => 'a => nat set"
    and find0 :: "'k => nat => 'a => bool"
    and wf0 :: "'n => 'a => bool"
    and decr0 :: "'k => nat => 'a => 'a"
    and
    satisfies0 :: "'i => 'a => bool"
      (infix \<open>\<Turnstile>\<^sub>0\<close> 50)
    and nullable0 :: "'a => bool"
    and lderiv0 :: "'x => 'a => ('a, 'k) aformula"
    and rderiv0 :: "'x => 'a => ('a, 'k) aformula"
    and TYPEVARS :: "'a * 'i * 'k * 'n * 'x * 'v"
  assumes
    "Formula SUC LESS assigns nvars Extend CONS SNOC Length extend size zero
      alphabet eval downshift upshift add cut len restrict Restrict
      lformula0 FV0 find0 wf0 decr0 (\<Turnstile>\<^sub>0) nullable0 lderiv0
      rderiv0"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  L :: "'n => 'i set => 'x language"
### theory "Draft.Abstract_Formula"
### 22.866s elapsed time, 32.597s cpu time, 4.164s GC time
Loading theory "Draft.Abstract_FormulaMoreTemplates"
val templateLemmas =
   [("Abstract_Formula.nf_ACI_norm_ACI", "nf_ACI \<langle>?\<phi>\<rangle>",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Abstract_Formula.finite_juncts", "finite (conjuncts ?\<phi>)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Abstract_Formula.finite_juncts", "finite (disjuncts ?\<phi>)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Abstract_Formula.nonempty_juncts", "conjuncts ?\<phi> ~= {}",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Abstract_Formula.nonempty_juncts", "disjuncts ?\<phi> ~= {}",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Abstract_Formula.nonempty_juncts_list",
     "conjuncts_list ?\<phi> ~= []",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Abstract_Formula.nonempty_juncts_list",
     "disjuncts_list ?\<phi> ~= []",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Abstract_Formula.juncts_eq_set_juncts_list",
     "conjuncts ?\<phi> = set (conjuncts_list ?\<phi>)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Abstract_Formula.juncts_eq_set_juncts_list",
     "disjuncts ?\<phi> = set (disjuncts_list ?\<phi>)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Abstract_Formula.norm_ACI_idem",
     "\<langle>\<langle>?\<phi>\<rangle>\<rangle> =
      \<langle>?\<phi>\<rangle>",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Abstract_Formula.nf_ACI_D",
     "nf_ACI ?\<phi> ==> distinct (conjuncts_list ?\<phi>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Abstract_Formula.nf_ACI_D",
     "nf_ACI ?\<phi> ==> distinct (disjuncts_list ?\<phi>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Abstract_Formula.norm_ACI_if_nf_ACI",
     "nf_ACI ?\<phi> ==> \<langle>?\<phi>\<rangle> = ?\<phi>",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 0))),
    ("Abstract_Formula.nf_ACI_D",
     "nf_ACI ?\<phi> ==> list_all nf_ACI (conjuncts_list ?\<phi>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_hole 2),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Abstract_Formula.nf_ACI_D",
     "nf_ACI ?\<phi> ==> list_all nf_ACI (disjuncts_list ?\<phi>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_hole 2),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Abstract_Formula.nf_ACI_D",
     "nf_ACI ?\<phi> ==> sorted (conjuncts_list ?\<phi>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Abstract_Formula.nf_ACI_D",
     "nf_ACI ?\<phi> ==> sorted (disjuncts_list ?\<phi>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FBase ?x) (FBool ?y) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FBase ?x) (FNot ?yb) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FBool ?x) (FBase ?ya) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FBool ?x) (FNot ?yb) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FNot ?x) (FBase ?ya) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FNot ?x) (FBool ?y) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.NFAND_conjuncts",
     "nf_ACI ?\<psi> ==> NFAND (conjuncts ?\<psi>) = ?\<psi>",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Abstract_Formula.NFOR_disjuncts",
     "nf_ACI ?\<psi> ==> NFOR (disjuncts ?\<psi>) = ?\<psi>",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Abstract_Formula.nFAND_conjuncts",
     "nf_ACI ?\<psi> ==> nFAND (conjuncts_list ?\<psi>) = ?\<psi>",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Abstract_Formula.nFOR_disjuncts",
     "nf_ACI ?\<psi> ==> nFOR (disjuncts_list ?\<psi>) = ?\<psi>",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FBase ?x) (FAll ?yi ?yj) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FBase ?x) (FAnd ?ye ?yf) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FBase ?x) (FEx ?yg ?yh) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FBase ?x) (FOr ?yc ?yd) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FBool ?x) (FAll ?yi ?yj) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FBool ?x) (FAnd ?ye ?yf) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FBool ?x) (FEx ?yg ?yh) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FBool ?x) (FOr ?yc ?yd) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FNot ?x) (FAll ?yi ?yj) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FNot ?x) (FAnd ?ye ?yf) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FNot ?x) (FEx ?yg ?yh) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FNot ?x) (FOr ?yc ?yd) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FAll ?x ?xa) (FBase ?ya) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FAll ?x ?xa) (FBool ?y) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FAll ?x ?xa) (FNot ?yb) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FAnd ?x ?xa) (FBase ?ya) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FAnd ?x ?xa) (FBool ?y) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FAnd ?x ?xa) (FNot ?yb) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FEx ?x ?xa) (FBase ?ya) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FEx ?x ?xa) (FBool ?y) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FEx ?x ?xa) (FNot ?yb) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FOr ?x ?xa) (FBase ?ya) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FOr ?x ?xa) (FBool ?y) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FOr ?x ?xa) (FNot ?yb) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FBase ?x) (FBase ?ya) =
      ?comp\<^sub>'\<^sub>a ?x ?ya",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_var 3, template_var 1), template_var 0))),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FBool ?x) (FBool ?y) =
      comparator_bool ?x ?y",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FAll ?x ?xa) (FAnd ?ye ?yf) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FAll ?x ?xa) (FEx ?yg ?yh) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FAll ?x ?xa) (FOr ?yc ?yd) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FAnd ?x ?xa) (FAll ?yi ?yj) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FAnd ?x ?xa) (FEx ?yg ?yh) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FAnd ?x ?xa) (FOr ?yc ?yd) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FEx ?x ?xa) (FAll ?yi ?yj) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FEx ?x ?xa) (FAnd ?ye ?yf) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FEx ?x ?xa) (FOr ?yc ?yd) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FOr ?x ?xa) (FAll ?yi ?yj) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FOr ?x ?xa) (FAnd ?ye ?yf) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FOr ?x ?xa) (FEx ?yg ?yh) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.norm_ACI_juncts",
     "nf_ACI ?\<phi> ==> norm_ACI ` conjuncts ?\<phi> = conjuncts ?\<phi>",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Abstract_Formula.norm_ACI_juncts",
     "nf_ACI ?\<phi> ==> norm_ACI ` disjuncts ?\<phi> = disjuncts ?\<phi>",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Abstract_Formula.norm_ACI_NFAND",
     "nf_ACI ?\<phi> ==> ?\<phi> = NFAND (norm_ACI ` conjuncts ?\<phi>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_var 0,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0)))))),
    ("Abstract_Formula.norm_ACI_NFOR",
     "nf_ACI ?\<phi> ==> ?\<phi> = NFOR (norm_ACI ` disjuncts ?\<phi>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_var 0,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0)))))),
    ("Abstract_Formula.juncts_singleton",
     "~ is_FAnd ?\<phi> ==> conjuncts ?\<phi> = {?\<phi>}",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Abstract_Formula.juncts_list_singleton",
     "~ is_FAnd ?\<phi> ==> conjuncts_list ?\<phi> = [?\<phi>]",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Abstract_Formula.juncts_singleton",
     "~ is_FOr ?\<phi> ==> disjuncts ?\<phi> = {?\<phi>}",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Abstract_Formula.juncts_list_singleton",
     "~ is_FOr ?\<phi> ==> disjuncts_list ?\<phi> = [?\<phi>]",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Abstract_Formula.in_set_tlD", "?x : set (tl ?xs) ==> ?x : set ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Abstract_Formula.notin_juncts",
     "[| ?\<psi> : conjuncts ?\<phi>; is_FAnd ?\<psi> |] ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            ),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate (template_hole 0))),
    ("Abstract_Formula.notin_juncts",
     "[| ?\<psi> : disjuncts ?\<phi>; is_FOr ?\<psi> |] ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            ),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate (template_hole 0))),
    ("Abstract_Formula.comparator_aformula",
     "[| comparator ?comp\<^sub>'\<^sub>a;
         comparator ?comp\<^sub>'\<^sub>k |]
      ==> comparator
           (comparator_aformula ?comp\<^sub>'\<^sub>a
             ?comp\<^sub>'\<^sub>k)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Abstract_Formula.nf_ACI_juncts",
     "[| ?\<psi> : conjuncts ?\<phi>; nf_ACI ?\<phi> |] ==> nf_ACI ?\<psi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            ),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Abstract_Formula.nf_ACI_juncts",
     "[| ?\<psi> : disjuncts ?\<phi>; nf_ACI ?\<phi> |] ==> nf_ACI ?\<psi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            ),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FNot ?x) (FNot ?yb) =
      comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k ?x
       ?yb",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("Abstract_Formula.nFAND_Cons",
     "nFAND (?x # ?xs) = (if ?xs = [] then ?x else FAnd ?x (nFAND ?xs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1)),
               template_var 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_app (template_hole 5, template_var 0)))
           ))),
    ("Abstract_Formula.nFOR_Cons",
     "nFOR (?x # ?xs) = (if ?xs = [] then ?x else FOr ?x (nFOR ?xs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1)),
               template_var 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_app (template_hole 5, template_var 0)))
           ))),
    ("Abstract_Formula.funpow_cycle_mult",
     "(?f ^^ ?k) ?x = ?x ==> (?f ^^ (?m * ?k)) ?x = ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2),
            template_var 1),
          template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3)),
             template_var 2),
           template_var 1),
         template_var 1))),
    ("Abstract_Formula.funpow_cycle",
     "(?f ^^ ?k) ?x = ?x ==> (?f ^^ ?l) ?x = (?f ^^ (?l mod ?k)) ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2),
            template_var 1),
          template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3)),
             template_var 2),
           template_var 1)))),
    ("Abstract_Formula.conjuncts_list_nFAND",
     "[| list_all (%x. ~ is_FAnd x) ?\<phi>s; ?\<phi>s ~= [] |]
      ==> conjuncts_list (nFAND ?\<phi>s) = ?\<phi>s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, t_empty), template_var 0)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Abstract_Formula.disjuncts_list_nFOR",
     "[| list_all (%x. ~ is_FOr x) ?\<phi>s; ?\<phi>s ~= [] |]
      ==> disjuncts_list (nFOR ?\<phi>s) = ?\<phi>s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, t_empty), template_var 0)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Abstract_Formula.pred_Diff_0",
     "0 ~: ?A ==> (?i : (%x. x - Suc 0) ` ?A) = (Suc ?i : ?A)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_var 1)
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 0),
           template_app
            (template_app (template_hole 2, t_empty), template_var 1)),
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 0, template_var 0)),
           template_var 1)))),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FAll ?x ?xa) (FAll ?yi ?yj) =
      (case ?comp\<^sub>'\<^sub>k ?x ?yi of
       Eq =>
         comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k ?xa
          ?yj
       | Lt => Lt | Gt => Gt)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 4, template_var 5),
                     template_var 4),
                   template_var 2),
                 template_var 0)),
             template_hole 1),
           template_hole 0),
         template_app
          (template_app (template_var 4, template_var 3),
           template_var 1)))),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FEx ?x ?xa) (FEx ?yg ?yh) =
      (case ?comp\<^sub>'\<^sub>k ?x ?yg of
       Eq =>
         comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k ?xa
          ?yh
       | Lt => Lt | Gt => Gt)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 4, template_var 5),
                     template_var 4),
                   template_var 2),
                 template_var 0)),
             template_hole 1),
           template_hole 0),
         template_app
          (template_app (template_var 4, template_var 3),
           template_var 1)))),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FAnd ?x ?xa) (FAnd ?ye ?yf) =
      (case comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
             ?x ?ye of
       Eq =>
         comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k ?xa
          ?yf
       | Lt => Lt | Gt => Gt)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 4, template_var 5),
                     template_var 4),
                   template_var 2),
                 template_var 0)),
             template_hole 1),
           template_hole 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 4, template_var 5),
               template_var 4),
             template_var 3),
           template_var 1)))),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FOr ?x ?xa) (FOr ?yc ?yd) =
      (case comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
             ?x ?yc of
       Eq =>
         comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k ?xa
          ?yd
       | Lt => Lt | Gt => Gt)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 4, template_var 5),
                     template_var 4),
                   template_var 2),
                 template_var 0)),
             template_hole 1),
           template_hole 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 4, template_var 5),
               template_var 4),
             template_var 3),
           template_var 1)))),
    ("Abstract_Formula.conjuncts_NFAND",
     "[| finite ?X; ?X ~= {}; ALL x:?X. ~ is_FAnd x |]
      ==> conjuncts (NFAND ?X) = ?X",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0), t_empty)
            )],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Abstract_Formula.disjuncts_NFOR",
     "[| finite ?X; ?X ~= {}; ALL x:?X. ~ is_FOr x |]
      ==> disjuncts (NFOR ?X) = ?X",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0), t_empty)
            )],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Abstract_Formula.nf_ACI_nFAND",
     "[| sorted ?\<phi>s; distinct ?\<phi>s; list_all nf_ACI ?\<phi>s;
         list_all (%x. ~ is_FAnd x) ?\<phi>s |]
      ==> nf_ACI (nFAND ?\<phi>s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, t_empty), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Abstract_Formula.nf_ACI_nFOR",
     "[| sorted ?\<phi>s; distinct ?\<phi>s; list_all nf_ACI ?\<phi>s;
         list_all (%x. ~ is_FOr x) ?\<phi>s |]
      ==> nf_ACI (nFOR ?\<phi>s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, t_empty), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Abstract_Formula.comparator_aformula_pointwise",
     "[| !!x\<^sub>0\<^sub>_\<^sub>0.
            x\<^sub>0\<^sub>_\<^sub>0 : set1_aformula ?x\<^sub>0 ==>
            peq_comp ?comp\<^sub>'\<^sub>a x\<^sub>0\<^sub>_\<^sub>0;
         !!x\<^sub>0\<^sub>_\<^sub>1.
            x\<^sub>0\<^sub>_\<^sub>1 : set2_aformula ?x\<^sub>0 ==>
            peq_comp ?comp\<^sub>'\<^sub>k x\<^sub>0\<^sub>_\<^sub>1 |]
      ==> peq_comp
           (comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k)
           ?x\<^sub>0",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("Abstract_Formula.comparator_aformula_pointwise",
     "[| !!x\<^sub>0\<^sub>_\<^sub>0.
            x\<^sub>0\<^sub>_\<^sub>0 : set1_aformula ?x\<^sub>0 ==>
            psym_comp ?comp\<^sub>'\<^sub>a x\<^sub>0\<^sub>_\<^sub>0;
         !!x\<^sub>0\<^sub>_\<^sub>1.
            x\<^sub>0\<^sub>_\<^sub>1 : set2_aformula ?x\<^sub>0 ==>
            psym_comp ?comp\<^sub>'\<^sub>k x\<^sub>0\<^sub>_\<^sub>1 |]
      ==> psym_comp
           (comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k)
           ?x\<^sub>0",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("Abstract_Formula.comparator_aformula_pointwise",
     "[| !!x\<^sub>0\<^sub>_\<^sub>0.
            x\<^sub>0\<^sub>_\<^sub>0 : set1_aformula ?x\<^sub>0 ==>
            ptrans_comp ?comp\<^sub>'\<^sub>a x\<^sub>0\<^sub>_\<^sub>0;
         !!x\<^sub>0\<^sub>_\<^sub>1.
            x\<^sub>0\<^sub>_\<^sub>1 : set2_aformula ?x\<^sub>0 ==>
            ptrans_comp ?comp\<^sub>'\<^sub>k x\<^sub>0\<^sub>_\<^sub>1 |]
      ==> ptrans_comp
           (comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k)
           ?x\<^sub>0",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("Abstract_Formula.funpow_cycle_offset",
     "[| (?f ^^ ?k) ?x = (?f ^^ ?i) ?x; ?i <= ?k; ?i <= ?l |]
      ==> (?f ^^ ?l) ?x = (?f ^^ ((?l - ?i) mod (?k - ?i) + ?i)) ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3),
            template_var 2),
          template_app
           (template_app
             (template_app (template_hole 4, template_var 1),
              template_var 3),
            template_var 2)),
        template_inequation (less_equals, template_var 1, template_var 4),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 0),
             template_var 3),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 0, template_var 0),
                         template_var 1)),
                     template_app
                      (template_app (template_hole 0, template_var 4),
                       template_var 1))),
                 template_var 1)),
             template_var 3),
           template_var 2))))]:
   (string * thm * template) list
### theory "Draft.Abstract_FormulaMoreTemplates"
### 0.370s elapsed time, 0.573s cpu time, 0.028s GC time
val it = (): unit
