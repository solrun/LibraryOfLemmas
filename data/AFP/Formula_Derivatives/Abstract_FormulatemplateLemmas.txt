   [("Abstract_Formula.nf_ACI_norm_ACI", "nf_ACI \<langle>?\<phi>\<rangle>",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Abstract_Formula.finite_juncts", "finite (conjuncts ?\<phi>)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Abstract_Formula.finite_juncts", "finite (disjuncts ?\<phi>)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Abstract_Formula.nonempty_juncts", "conjuncts ?\<phi> ~= {}",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Abstract_Formula.nonempty_juncts", "disjuncts ?\<phi> ~= {}",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Abstract_Formula.nonempty_juncts_list",
     "conjuncts_list ?\<phi> ~= []",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Abstract_Formula.nonempty_juncts_list",
     "disjuncts_list ?\<phi> ~= []",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Abstract_Formula.juncts_eq_set_juncts_list",
     "conjuncts ?\<phi> = set (conjuncts_list ?\<phi>)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Abstract_Formula.juncts_eq_set_juncts_list",
     "disjuncts ?\<phi> = set (disjuncts_list ?\<phi>)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Abstract_Formula.norm_ACI_idem",
     "\<langle>\<langle>?\<phi>\<rangle>\<rangle> =
      \<langle>?\<phi>\<rangle>",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Abstract_Formula.nf_ACI_D",
     "nf_ACI ?\<phi> ==> distinct (conjuncts_list ?\<phi>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Abstract_Formula.nf_ACI_D",
     "nf_ACI ?\<phi> ==> distinct (disjuncts_list ?\<phi>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Abstract_Formula.norm_ACI_if_nf_ACI",
     "nf_ACI ?\<phi> ==> \<langle>?\<phi>\<rangle> = ?\<phi>",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 0))),
    ("Abstract_Formula.nf_ACI_D",
     "nf_ACI ?\<phi> ==> list_all nf_ACI (conjuncts_list ?\<phi>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_hole 2),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Abstract_Formula.nf_ACI_D",
     "nf_ACI ?\<phi> ==> list_all nf_ACI (disjuncts_list ?\<phi>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_hole 2),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Abstract_Formula.nf_ACI_D",
     "nf_ACI ?\<phi> ==> sorted (conjuncts_list ?\<phi>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Abstract_Formula.nf_ACI_D",
     "nf_ACI ?\<phi> ==> sorted (disjuncts_list ?\<phi>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FBase ?x) (FBool ?y) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FBase ?x) (FNot ?yb) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FBool ?x) (FBase ?ya) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FBool ?x) (FNot ?yb) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FNot ?x) (FBase ?ya) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FNot ?x) (FBool ?y) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.NFAND_conjuncts",
     "nf_ACI ?\<psi> ==> NFAND (conjuncts ?\<psi>) = ?\<psi>",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Abstract_Formula.NFOR_disjuncts",
     "nf_ACI ?\<psi> ==> NFOR (disjuncts ?\<psi>) = ?\<psi>",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Abstract_Formula.nFAND_conjuncts",
     "nf_ACI ?\<psi> ==> nFAND (conjuncts_list ?\<psi>) = ?\<psi>",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Abstract_Formula.nFOR_disjuncts",
     "nf_ACI ?\<psi> ==> nFOR (disjuncts_list ?\<psi>) = ?\<psi>",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FBase ?x) (FAll ?yi ?yj) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FBase ?x) (FAnd ?ye ?yf) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FBase ?x) (FEx ?yg ?yh) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FBase ?x) (FOr ?yc ?yd) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FBool ?x) (FAll ?yi ?yj) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FBool ?x) (FAnd ?ye ?yf) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FBool ?x) (FEx ?yg ?yh) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FBool ?x) (FOr ?yc ?yd) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FNot ?x) (FAll ?yi ?yj) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FNot ?x) (FAnd ?ye ?yf) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FNot ?x) (FEx ?yg ?yh) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FNot ?x) (FOr ?yc ?yd) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FAll ?x ?xa) (FBase ?ya) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FAll ?x ?xa) (FBool ?y) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FAll ?x ?xa) (FNot ?yb) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FAnd ?x ?xa) (FBase ?ya) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FAnd ?x ?xa) (FBool ?y) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FAnd ?x ?xa) (FNot ?yb) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FEx ?x ?xa) (FBase ?ya) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FEx ?x ?xa) (FBool ?y) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FEx ?x ?xa) (FNot ?yb) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FOr ?x ?xa) (FBase ?ya) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FOr ?x ?xa) (FBool ?y) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FOr ?x ?xa) (FNot ?yb) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FBase ?x) (FBase ?ya) =
      ?comp\<^sub>'\<^sub>a ?x ?ya",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_var 3, template_var 1), template_var 0))),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FBool ?x) (FBool ?y) =
      comparator_bool ?x ?y",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FAll ?x ?xa) (FAnd ?ye ?yf) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FAll ?x ?xa) (FEx ?yg ?yh) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FAll ?x ?xa) (FOr ?yc ?yd) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FAnd ?x ?xa) (FAll ?yi ?yj) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FAnd ?x ?xa) (FEx ?yg ?yh) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FAnd ?x ?xa) (FOr ?yc ?yd) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FEx ?x ?xa) (FAll ?yi ?yj) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FEx ?x ?xa) (FAnd ?ye ?yf) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FEx ?x ?xa) (FOr ?yc ?yd) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FOr ?x ?xa) (FAll ?yi ?yj) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FOr ?x ?xa) (FAnd ?ye ?yf) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FOr ?x ?xa) (FEx ?yg ?yh) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Abstract_Formula.norm_ACI_juncts",
     "nf_ACI ?\<phi> ==> norm_ACI ` conjuncts ?\<phi> = conjuncts ?\<phi>",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Abstract_Formula.norm_ACI_juncts",
     "nf_ACI ?\<phi> ==> norm_ACI ` disjuncts ?\<phi> = disjuncts ?\<phi>",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Abstract_Formula.norm_ACI_NFAND",
     "nf_ACI ?\<phi> ==> ?\<phi> = NFAND (norm_ACI ` conjuncts ?\<phi>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_var 0,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0)))))),
    ("Abstract_Formula.norm_ACI_NFOR",
     "nf_ACI ?\<phi> ==> ?\<phi> = NFOR (norm_ACI ` disjuncts ?\<phi>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_var 0,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0)))))),
    ("Abstract_Formula.juncts_singleton",
     "~ is_FAnd ?\<phi> ==> conjuncts ?\<phi> = {?\<phi>}",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Abstract_Formula.juncts_list_singleton",
     "~ is_FAnd ?\<phi> ==> conjuncts_list ?\<phi> = [?\<phi>]",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Abstract_Formula.juncts_singleton",
     "~ is_FOr ?\<phi> ==> disjuncts ?\<phi> = {?\<phi>}",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Abstract_Formula.juncts_list_singleton",
     "~ is_FOr ?\<phi> ==> disjuncts_list ?\<phi> = [?\<phi>]",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Abstract_Formula.in_set_tlD", "?x : set (tl ?xs) ==> ?x : set ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Abstract_Formula.notin_juncts",
     "[| ?\<psi> : conjuncts ?\<phi>; is_FAnd ?\<psi> |] ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            ),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate (template_hole 0))),
    ("Abstract_Formula.notin_juncts",
     "[| ?\<psi> : disjuncts ?\<phi>; is_FOr ?\<psi> |] ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            ),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate (template_hole 0))),
    ("Abstract_Formula.comparator_aformula",
     "[| comparator ?comp\<^sub>'\<^sub>a;
         comparator ?comp\<^sub>'\<^sub>k |]
      ==> comparator
           (comparator_aformula ?comp\<^sub>'\<^sub>a
             ?comp\<^sub>'\<^sub>k)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Abstract_Formula.nf_ACI_juncts",
     "[| ?\<psi> : conjuncts ?\<phi>; nf_ACI ?\<phi> |] ==> nf_ACI ?\<psi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            ),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Abstract_Formula.nf_ACI_juncts",
     "[| ?\<psi> : disjuncts ?\<phi>; nf_ACI ?\<phi> |] ==> nf_ACI ?\<psi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            ),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FNot ?x) (FNot ?yb) =
      comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k ?x
       ?yb",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("Abstract_Formula.nFAND_Cons",
     "nFAND (?x # ?xs) = (if ?xs = [] then ?x else FAnd ?x (nFAND ?xs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1)),
               template_var 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_app (template_hole 5, template_var 0)))
           ))),
    ("Abstract_Formula.nFOR_Cons",
     "nFOR (?x # ?xs) = (if ?xs = [] then ?x else FOr ?x (nFOR ?xs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1)),
               template_var 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_app (template_hole 5, template_var 0)))
           ))),
    ("Abstract_Formula.funpow_cycle_mult",
     "(?f ^^ ?k) ?x = ?x ==> (?f ^^ (?m * ?k)) ?x = ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2),
            template_var 1),
          template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3)),
             template_var 2),
           template_var 1),
         template_var 1))),
    ("Abstract_Formula.funpow_cycle",
     "(?f ^^ ?k) ?x = ?x ==> (?f ^^ ?l) ?x = (?f ^^ (?l mod ?k)) ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2),
            template_var 1),
          template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3)),
             template_var 2),
           template_var 1)))),
    ("Abstract_Formula.conjuncts_list_nFAND",
     "[| list_all (%x. ~ is_FAnd x) ?\<phi>s; ?\<phi>s ~= [] |]
      ==> conjuncts_list (nFAND ?\<phi>s) = ?\<phi>s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, t_empty), template_var 0)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Abstract_Formula.disjuncts_list_nFOR",
     "[| list_all (%x. ~ is_FOr x) ?\<phi>s; ?\<phi>s ~= [] |]
      ==> disjuncts_list (nFOR ?\<phi>s) = ?\<phi>s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, t_empty), template_var 0)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Abstract_Formula.pred_Diff_0",
     "0 ~: ?A ==> (?i : (%x. x - Suc 0) ` ?A) = (Suc ?i : ?A)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_var 1)
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 0),
           template_app
            (template_app (template_hole 2, t_empty), template_var 1)),
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 0, template_var 0)),
           template_var 1)))),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FAll ?x ?xa) (FAll ?yi ?yj) =
      (case ?comp\<^sub>'\<^sub>k ?x ?yi of
       Eq =>
         comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k ?xa
          ?yj
       | Lt => Lt | Gt => Gt)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 4, template_var 5),
                     template_var 4),
                   template_var 2),
                 template_var 0)),
             template_hole 1),
           template_hole 0),
         template_app
          (template_app (template_var 4, template_var 3),
           template_var 1)))),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FEx ?x ?xa) (FEx ?yg ?yh) =
      (case ?comp\<^sub>'\<^sub>k ?x ?yg of
       Eq =>
         comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k ?xa
          ?yh
       | Lt => Lt | Gt => Gt)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 4, template_var 5),
                     template_var 4),
                   template_var 2),
                 template_var 0)),
             template_hole 1),
           template_hole 0),
         template_app
          (template_app (template_var 4, template_var 3),
           template_var 1)))),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FAnd ?x ?xa) (FAnd ?ye ?yf) =
      (case comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
             ?x ?ye of
       Eq =>
         comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k ?xa
          ?yf
       | Lt => Lt | Gt => Gt)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 4, template_var 5),
                     template_var 4),
                   template_var 2),
                 template_var 0)),
             template_hole 1),
           template_hole 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 4, template_var 5),
               template_var 4),
             template_var 3),
           template_var 1)))),
    ("Abstract_Formula.comparator_aformula_simps",
     "comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
       (FOr ?x ?xa) (FOr ?yc ?yd) =
      (case comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k
             ?x ?yc of
       Eq =>
         comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k ?xa
          ?yd
       | Lt => Lt | Gt => Gt)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 4, template_var 5),
                     template_var 4),
                   template_var 2),
                 template_var 0)),
             template_hole 1),
           template_hole 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 4, template_var 5),
               template_var 4),
             template_var 3),
           template_var 1)))),
    ("Abstract_Formula.conjuncts_NFAND",
     "[| finite ?X; ?X ~= {}; ALL x:?X. ~ is_FAnd x |]
      ==> conjuncts (NFAND ?X) = ?X",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0), t_empty)
            )],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Abstract_Formula.disjuncts_NFOR",
     "[| finite ?X; ?X ~= {}; ALL x:?X. ~ is_FOr x |]
      ==> disjuncts (NFOR ?X) = ?X",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0), t_empty)
            )],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Abstract_Formula.nf_ACI_nFAND",
     "[| sorted ?\<phi>s; distinct ?\<phi>s; list_all nf_ACI ?\<phi>s;
         list_all (%x. ~ is_FAnd x) ?\<phi>s |]
      ==> nf_ACI (nFAND ?\<phi>s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, t_empty), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Abstract_Formula.nf_ACI_nFOR",
     "[| sorted ?\<phi>s; distinct ?\<phi>s; list_all nf_ACI ?\<phi>s;
         list_all (%x. ~ is_FOr x) ?\<phi>s |]
      ==> nf_ACI (nFOR ?\<phi>s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, t_empty), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Abstract_Formula.comparator_aformula_pointwise",
     "[| !!x\<^sub>0\<^sub>_\<^sub>0.
            x\<^sub>0\<^sub>_\<^sub>0 : set1_aformula ?x\<^sub>0 ==>
            peq_comp ?comp\<^sub>'\<^sub>a x\<^sub>0\<^sub>_\<^sub>0;
         !!x\<^sub>0\<^sub>_\<^sub>1.
            x\<^sub>0\<^sub>_\<^sub>1 : set2_aformula ?x\<^sub>0 ==>
            peq_comp ?comp\<^sub>'\<^sub>k x\<^sub>0\<^sub>_\<^sub>1 |]
      ==> peq_comp
           (comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k)
           ?x\<^sub>0",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("Abstract_Formula.comparator_aformula_pointwise",
     "[| !!x\<^sub>0\<^sub>_\<^sub>0.
            x\<^sub>0\<^sub>_\<^sub>0 : set1_aformula ?x\<^sub>0 ==>
            psym_comp ?comp\<^sub>'\<^sub>a x\<^sub>0\<^sub>_\<^sub>0;
         !!x\<^sub>0\<^sub>_\<^sub>1.
            x\<^sub>0\<^sub>_\<^sub>1 : set2_aformula ?x\<^sub>0 ==>
            psym_comp ?comp\<^sub>'\<^sub>k x\<^sub>0\<^sub>_\<^sub>1 |]
      ==> psym_comp
           (comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k)
           ?x\<^sub>0",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("Abstract_Formula.comparator_aformula_pointwise",
     "[| !!x\<^sub>0\<^sub>_\<^sub>0.
            x\<^sub>0\<^sub>_\<^sub>0 : set1_aformula ?x\<^sub>0 ==>
            ptrans_comp ?comp\<^sub>'\<^sub>a x\<^sub>0\<^sub>_\<^sub>0;
         !!x\<^sub>0\<^sub>_\<^sub>1.
            x\<^sub>0\<^sub>_\<^sub>1 : set2_aformula ?x\<^sub>0 ==>
            ptrans_comp ?comp\<^sub>'\<^sub>k x\<^sub>0\<^sub>_\<^sub>1 |]
      ==> ptrans_comp
           (comparator_aformula ?comp\<^sub>'\<^sub>a ?comp\<^sub>'\<^sub>k)
           ?x\<^sub>0",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("Abstract_Formula.funpow_cycle_offset",
     "[| (?f ^^ ?k) ?x = (?f ^^ ?i) ?x; ?i <= ?k; ?i <= ?l |]
      ==> (?f ^^ ?l) ?x = (?f ^^ ((?l - ?i) mod (?k - ?i) + ?i)) ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3),
            template_var 2),
          template_app
           (template_app
             (template_app (template_hole 4, template_var 1),
              template_var 3),
            template_var 2)),
        template_inequation (less_equals, template_var 1, template_var 4),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 0),
             template_var 3),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 0, template_var 0),
                         template_var 1)),
                     template_app
                      (template_app (template_hole 0, template_var 4),
                       template_var 1))),
                 template_var 1)),
             template_var 3),
           template_var 2))))]
