Loading theory "Coinductive_Languages.Coinductive_Language" (required by "Draft.AutomatonMoreTemplates" via "Draft.Automaton")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.AutomatonMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.AutomatonMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.AutomatonMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.120s elapsed time, 0.494s cpu time, 0.052s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.AutomatonMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.213s elapsed time, 0.863s cpu time, 0.052s GC time
Loading theory "HOL-Library.While_Combinator" (required by "Draft.AutomatonMoreTemplates" via "Draft.Automaton")
### theory "HOL-Library.Nat_Bijection"
### 0.368s elapsed time, 1.470s cpu time, 0.156s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.AutomatonMoreTemplates" via "Draft.ExtrEqs")
consts
  Zero :: "'a language"
consts
  One :: "'a language"
consts
  Atom :: "'a => 'a language"
Found termination order: "{}"
consts
  Plus :: "'a language => 'a language => 'a language"
consts
  TimesLR :: "'a language => 'a language => ('a * bool) language"
consts
  Times_Plus :: "('a * bool) language => 'a language"
Found termination order: "{}"
Proofs for inductive predicate(s) "Plus_cong"
  Proving monotonicity ...
consts
  StarLR :: "'a language => 'a language => 'a language"
Found termination order: "{}"
consts
  Inter :: "'a language => 'a language => 'a language"
### theory "HOL-Library.While_Combinator"
### 0.462s elapsed time, 1.814s cpu time, 0.291s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.AutomatonMoreTemplates" via "Draft.ExtrEqs")
consts
  Not :: "'a language => 'a language"
consts
  Full :: "'a language"
consts
  ShuffleLR :: "'a language => 'a language => ('a * bool) language"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Proofs for inductive predicate(s) "regular_cong"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
instantiation
  language :: (type) {order,semiring_1}
  zero_language == zero_class.zero :: 'a language
  plus_language == plus :: 'a language => 'a language => 'a language
  one_language == one_class.one :: 'a language
  times_language == times :: 'a language => 'a language => 'a language
  less_eq_language == less_eq :: 'a language => 'a language => bool
  less_language == less :: 'a language => 'a language => bool
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Plus_Times_pre_cong"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  tails :: "'a list => 'a list list"
consts
  cycle :: "'a list => 'a stream"
consts
  in_language :: "'a language => 'a list => bool"
consts
  to_language :: "'a list set => 'a language"
Found termination order: "size <*mlex*> {}"
### theory "Coinductive_Languages.Coinductive_Language"
### 1.326s elapsed time, 5.078s cpu time, 1.080s GC time
Loading theory "Draft.Automaton" (required by "Draft.AutomatonMoreTemplates")
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Proofs for coinductive predicate(s) "rel_language"
  Proving monotonicity ...
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.206s elapsed time, 4.602s cpu time, 1.020s GC time
locale DA
  fixes alphabet :: "'a list"
    and init :: "'t => 's"
    and delta :: "'a => 's => 's"
    and accept :: "'s => bool"
    and wellformed :: "'s => bool"
    and Language :: "'s => 'a language"
    and wf :: "'t => bool"
    and Lang :: "'t => 'a language"
  assumes "DA alphabet init delta accept wellformed Language wf Lang"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale DAs
  fixes alphabet1 :: "'a1 list"
    and init1 :: "'t1 => 's1"
    and delta1 :: "'a1 => 's1 => 's1"
    and accept1 :: "'s1 => bool"
    and wellformed1 :: "'s1 => bool"
    and Language1 :: "'s1 => 'a1 language"
    and wf1 :: "'t1 => bool"
    and Lang1 :: "'t1 => 'a1 language"
    and alphabet2 :: "'a2 list"
    and init2 :: "'t2 => 's2"
    and delta2 :: "'a2 => 's2 => 's2"
    and accept2 :: "'s2 => bool"
    and wellformed2 :: "'s2 => bool"
    and Language2 :: "'s2 => 'a2 language"
    and wf2 :: "'t2 => bool"
    and Lang2 :: "'t2 => 'a2 language"
    and letter_eq :: "'a1 => 'a2 => bool"
  assumes
    "DAs alphabet1 init1 delta1 accept1 wellformed1 Language1 wf1 Lang1
      alphabet2 init2 delta2 accept2 wellformed2 Language2 wf2 Lang2
      letter_eq"
### theory "HOL-Library.BigO"
### 1.077s elapsed time, 3.957s cpu time, 0.927s GC time
locale DFA
  fixes alphabet :: "'a list"
    and init :: "'b => 'c"
    and delta :: "'a => 'c => 'c"
    and accept :: "'c => bool"
    and wellformed :: "'c => bool"
    and Language :: "'c => 'a language"
    and wf :: "'b => bool"
    and Lang :: "'b => 'a language"
  assumes "DFA alphabet init delta accept wellformed Language wf Lang"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale DFAs
  fixes alphabet1 :: "'a1 list"
    and init1 :: "'t1 => 's1"
    and delta1 :: "'a1 => 's1 => 's1"
    and accept1 :: "'s1 => bool"
    and wellformed1 :: "'s1 => bool"
    and Language1 :: "'s1 => 'a1 language"
    and wf1 :: "'t1 => bool"
    and Lang1 :: "'t1 => 'a1 language"
    and alphabet2 :: "'a2 list"
    and init2 :: "'t2 => 's2"
    and delta2 :: "'a2 => 's2 => 's2"
    and accept2 :: "'s2 => bool"
    and wellformed2 :: "'s2 => bool"
    and Language2 :: "'s2 => 'a2 language"
    and wf2 :: "'t2 => bool"
    and Lang2 :: "'t2 => 'a2 language"
    and letter_eq :: "'a1 => 'a2 => bool"
  assumes
    "DFAs alphabet1 init1 delta1 accept1 wellformed1 Language1 wf1 Lang1
      alphabet2 init2 delta2 accept2 wellformed2 Language2 wf2 Lang2
      letter_eq"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Automaton"
### 0.541s elapsed time, 1.780s cpu time, 0.190s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.122s elapsed time, 6.833s cpu time, 1.293s GC time
Loading theory "Draft.Templates" (required by "Draft.AutomatonMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.064s elapsed time, 0.112s cpu time, 0.047s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.AutomatonMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.465s elapsed time, 0.472s cpu time, 0.000s GC time
Loading theory "Draft.AutomatonMoreTemplates"
val templateLemmas =
   [("Automaton.in_language_to_language",
     "in_language (to_language ?L) ?w = (?w : ?L)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Automaton.rel_language_alt",
     "rel_language ?R ?L ?K =
      rel_fun (list_all2 ?R) (=) (in_language ?L) (in_language ?K)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 2)),
                 template_hole 5),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Automaton.\<oo>_\<dd>s", "\<oo> (\<dd>s ?w ?L) = in_language ?L ?w",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, t_empty), template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Automaton.in_language_\<dd>s",
     "in_language (\<dd>s ?w ?L) ?v = in_language ?L (?w @ ?v)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, t_empty), template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Automaton.rtrancl_fold_product1",
     "{(r, s). EX a:?A. s = ?f a r}^* =
      {(r, s). EX a:lists ?A. s = fold ?f a r}",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_hole 6, template_app (template_hole 5, t_empty))),
       template_app
        (template_hole 6, template_app (template_hole 5, t_empty)))),
    ("Automaton.rtrancl_fold_product",
     "{((r, s), ?f a r, ?g b s) |a b r s. a : ?A & b : ?B & ?R a b}^* =
      {((r, s), fold ?f w1 r, fold ?g w2 s) |w1 w2 r s.
       w1 : lists ?A & w2 : lists ?B & list_all2 ?R w1 w2}",
     template_equation
      (template_app
        (template_hole 20, template_app (template_hole 19, t_empty)),
       template_app (template_hole 19, t_empty))),
    ("Automaton.lang_eq_ext_Nil_fold_Deriv",
     "[| !!w. in_language ?K w ==> w : lists ?A;
         !!w. in_language ?L w ==> w : lists ?B;
         !!a b. ?R a b ==> (a : ?A) = (b : ?B) |]
      ==> rel_language ?R ?K ?L =
          (ALL (K, L)
               :{(\<dd>s w1 ?K, \<dd>s w2 ?L) |w1 w2.
                 w1 : lists ?A & w2 : lists ?B & list_all2 ?R w1 w2}.
              \<oo> K = \<oo> L)",
     template_implication
      ([template_predicate (template_app (template_hole 29, t_empty)),
        template_predicate (template_app (template_hole 24, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 15, template_var 0),
             template_var 4),
           template_var 2),
         template_app
          (template_app
            (template_hole 14, template_app (template_hole 13, t_empty)),
           template_app (template_hole 2, t_empty)))))]:
   (string * thm * template) list
### theory "Draft.AutomatonMoreTemplates"
### 0.331s elapsed time, 0.452s cpu time, 0.056s GC time
val it = (): unit
