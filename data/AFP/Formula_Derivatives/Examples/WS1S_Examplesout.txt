Loading theory "Coinductive_Languages.Coinductive_Language" (required by "Draft.WS1S_ExamplesMoreTemplates" via "Draft.WS1S_Examples" via "Formula_Derivatives.WS1S_Formula" via "Formula_Derivatives.Abstract_Formula" via "Formula_Derivatives.Automaton")
Loading theory "Deriving.Generator_Aux" (required by "Draft.WS1S_ExamplesMoreTemplates" via "Draft.WS1S_Examples" via "Formula_Derivatives.WS1S_Formula" via "Formula_Derivatives.Abstract_Formula" via "Deriving.Compare_Instances" via "Deriving.Compare_Generator" via "Deriving.Comparator_Generator")
Loading theory "Deriving.Comparator" (required by "Draft.WS1S_ExamplesMoreTemplates" via "Draft.WS1S_Examples" via "Formula_Derivatives.WS1S_Formula" via "Formula_Derivatives.Abstract_Formula" via "Deriving.Compare_Instances" via "Deriving.Compare_Generator" via "Deriving.Comparator_Generator")
Loading theory "Deriving.Derive_Manager" (required by "Draft.WS1S_ExamplesMoreTemplates" via "Draft.WS1S_Examples" via "Formula_Derivatives.WS1S_Formula" via "Formula_Derivatives.Abstract_Formula" via "Deriving.Compare_Instances" via "Deriving.Compare_Generator" via "Deriving.Comparator_Generator")
signature DERIVE_MANAGER =
  sig
    val derive: string -> string -> string -> theory -> theory
    val derive_cmd: string -> string -> string -> theory -> theory
    val print_info: theory -> unit
    val register_derive:
       string ->
         string ->
           (string -> string -> theory -> theory) -> theory -> theory
  end
structure Derive_Manager: DERIVE_MANAGER
signature BNF_ACCESS =
  sig
    val bnf_types: Proof.context -> string list -> typ list
    val case_consts: Proof.context -> string list -> term list
    val case_simps: Proof.context -> string list -> thm list list
    val case_thms: Proof.context -> string list -> thm list
    val constr_argument_types:
       Proof.context -> string list -> typ list list list
    val constr_terms: Proof.context -> string -> term list
    val distinct_thms: Proof.context -> string list -> thm list list
    val induct_thms: Proof.context -> string list -> thm list
    val inject_thms: Proof.context -> string list -> thm list list
    val map_comps: Proof.context -> string list -> thm list
    val map_simps: Proof.context -> string list -> thm list list
    val map_terms: Proof.context -> string list -> term list
    val set_simps: Proof.context -> string list -> thm list list
    val set_terms: Proof.context -> string list -> term list list
  end
structure Bnf_Access: BNF_ACCESS
### theory "Deriving.Derive_Manager"
### 0.055s elapsed time, 0.249s cpu time, 0.000s GC time
Loading theory "HOL-Library.Char_ord" (required by "Draft.WS1S_ExamplesMoreTemplates" via "Draft.WS1S_Examples" via "Formula_Derivatives.WS1S_Formula" via "Formula_Derivatives.Abstract_Formula" via "Deriving.Compare_Instances")
instantiation
  char :: linorder
  less_eq_char == less_eq :: char => char => bool
  less_char == less :: char => char => bool
instantiation
  char :: distrib_lattice
  inf_char == inf :: char => char => char
  sup_char == sup :: char => char => char
### theory "HOL-Library.Char_ord"
### 0.088s elapsed time, 0.338s cpu time, 0.033s GC time
Loading theory "HOL-Library.Code_Abstract_Nat" (required by "Draft.WS1S_ExamplesMoreTemplates" via "Draft.WS1S_Examples" via "Formula_Derivatives.WS1S_Formula" via "Formula_Derivatives.Abstract_Formula" via "HOL-Library.Code_Target_Nat")
signature GENERATOR_AUX =
  sig
    val OF_option: thm -> thm option list -> thm
    val add_used_tycos:
       Proof.context -> string -> string list -> string list
    val alist_to_string: (string * 'a) list -> string
    val conjI_tac:
       thm list ->
         Proof.context ->
           'a list -> (Proof.context -> int -> tactic) -> tactic
    val create_map:
       (typ -> term) ->
         (string * typ -> 'a -> term) ->
           'a ->
             (typ -> bool) ->
               (local_theory -> string -> bool list) ->
                 (local_theory -> string -> term) ->
                   (local_theory -> string -> 'a -> term) ->
                     string list ->
                       (local_theory -> string -> 'a) ->
                         typ -> local_theory -> term
    val create_partial:
       'a ->
         (typ -> bool) ->
           (local_theory -> string -> bool list) ->
             (local_theory -> string -> term) ->
               (local_theory -> string -> 'a -> term) ->
                 string list ->
                   (local_theory -> string -> 'a) ->
                     typ -> local_theory -> term
    val define_overloaded:
       string * term -> local_theory -> thm * local_theory
    val define_overloaded_generic:
       Attrib.binding * term -> local_theory -> thm * local_theory
    val drop_last: 'a list -> 'a list
    val freeify_tvars: typ -> typ
    val ind_case_to_idxs: 'a list list -> int -> int * int
    val infer_type: Proof.context -> term -> term
    val ints_to_subscript: int list -> string
    val is_class_instance: theory -> string -> sort -> bool
    val lambdas: term list -> term -> term
    val mk_case_tac:
       Proof.context ->
         term option list list ->
           thm ->
             (int ->
                Proof.context * thm list * (string * cterm) list -> tactic)
               -> tactic
    val mk_def: typ -> string -> term -> term
    val mk_id: typ -> term
    val mk_infer_const: string -> Proof.context -> term -> term
    val mutual_recursive_types:
       string -> Proof.context -> string list * typ list
    val prove_multi_future:
       Proof.context ->
         string list ->
           term list ->
             term list ->
               ({context: Proof.context, prems: thm list} -> tactic) ->
                 thm list
    val recursor:
       (string -> 'a) * ('a -> bool list) * string list ->
         bool ->
           (typ -> 'b) ->
             (typ -> 'b) ->
               (typ -> 'b) ->
                 ((typ * 'b option) list * 'a -> 'b) -> typ -> 'b
    val rename_types: (typ * typ) list -> term -> term
    val split_IHs:
       (string -> 'a) * ('a -> bool list) * string list ->
         typ list -> thm list -> thm list list
    val std_recursor_tac:
       (string -> 'a) * ('a -> bool list) * string list ->
         typ list ->
           ('a -> thm) ->
             thm list -> typ -> thm list -> Proof.context -> tactic
    val sub: string -> string
    val subT: string -> typ -> string
    val typ_and_vs_of_typname:
       theory -> string -> sort -> typ * (string * sort) list
    val typ_and_vs_of_used_typname:
       string ->
         bool list -> string list -> typ * (string * string list) list
    val type_parameters:
       typ -> Proof.context -> (string * sort) list * typ list
  end
structure Generator_Aux: GENERATOR_AUX
### theory "Deriving.Generator_Aux"
### 0.171s elapsed time, 0.702s cpu time, 0.033s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.WS1S_ExamplesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "HOL-Library.Code_Abstract_Nat"
### 0.056s elapsed time, 0.231s cpu time, 0.000s GC time
Loading theory "HOL-Library.Code_Target_Nat" (required by "Draft.WS1S_ExamplesMoreTemplates" via "Draft.WS1S_Examples" via "Formula_Derivatives.WS1S_Formula" via "Formula_Derivatives.Abstract_Formula")
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### Code generator: dropping subsumed code equation
### divmod_nat ?m ?n ==
### if ?n = 0 | ?m < ?n then (0, ?m)
### else let (q, y) = divmod_nat (?m - ?n) ?n in (Suc q, y)
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit1 ?n) ==
### if ?m < ?n then (0, numeral (num.Bit1 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit1 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit1 ?n) ==
### if ?m <= ?n then (0, numeral (num.Bit0 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit0 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r + 1)
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit1 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit0 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod ?m num.One == (numeral ?m, 0)
### Code generator: dropping subsumed code equation
### Suc ?m <= ?n == ?m < ?n
### Code generator: dropping subsumed code equation
### 0 <= ?n == True
### Code generator: dropping subsumed code equation
### ?m < Suc ?n == ?m <= ?n
### Code generator: dropping subsumed code equation
### ?n < 0 == False
### theory "HOL-Library.Function_Algebras"
### 0.132s elapsed time, 0.515s cpu time, 0.074s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.WS1S_ExamplesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### Code generator: dropping subsumed code equation
### of_nat ?n == semiring_1_class.of_nat_aux (%i. i + (1::?'a)) ?n (0::?'a)
### theory "HOL-Library.Code_Target_Nat"
### 0.149s elapsed time, 0.581s cpu time, 0.074s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.WS1S_ExamplesMoreTemplates" via "Draft.WS1S_Examples" via "Formula_Derivatives.WS1S_Formula" via "Formula_Derivatives.WS1S_Prelim" via "Formula_Derivatives.FSet_More" via "HOL-Library.FSet" via "HOL-Library.Countable")
consts
  Zero :: "'a language"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  One :: "'a language"
consts
  Atom :: "'a => 'a language"
Found termination order: "{}"
consts
  Plus :: "'a language => 'a language => 'a language"
locale comparator
  fixes comp :: "'a => 'a => order"
  assumes "comparator comp"
consts
  TimesLR :: "'a language => 'a language => ('a * bool) language"
consts
  Times_Plus :: "('a * bool) language => 'a language"
Found termination order: "size_list size <*mlex*> {}"
Proofs for inductive predicate(s) "Plus_cong"
  Proving monotonicity ...
consts
  StarLR :: "'a language => 'a language => 'a language"
consts
  Inter :: "'a language => 'a language => 'a language"
### theory "HOL-Library.Nat_Bijection"
### 0.289s elapsed time, 1.145s cpu time, 0.136s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.WS1S_ExamplesMoreTemplates" via "Draft.ExtrEqs")
consts
  Not :: "'a language => 'a language"
consts
  Full :: "'a language"
consts
  ShuffleLR :: "'a language => 'a language => ('a * bool) language"
Proofs for inductive predicate(s) "regular_cong"
### theory "Deriving.Comparator"
### 0.681s elapsed time, 2.708s cpu time, 0.242s GC time
Loading theory "Deriving.Compare" (required by "Draft.WS1S_ExamplesMoreTemplates" via "Draft.WS1S_Examples" via "Formula_Derivatives.WS1S_Formula" via "Formula_Derivatives.Abstract_Formula" via "Deriving.Compare_Instances" via "Deriving.Compare_Generator")
  Proving monotonicity ...
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.382s elapsed time, 1.495s cpu time, 0.204s GC time
Loading theory "Deriving.Comparator_Generator" (required by "Draft.WS1S_ExamplesMoreTemplates" via "Draft.WS1S_Examples" via "Formula_Derivatives.WS1S_Formula" via "Formula_Derivatives.Abstract_Formula" via "Deriving.Compare_Instances" via "Deriving.Compare_Generator")
instantiation
  language :: (type) {order,semiring_1}
  zero_language == zero_class.zero :: 'a language
  plus_language == plus :: 'a language => 'a language => 'a language
  one_language == one_class.one :: 'a language
  times_language == times :: 'a language => 'a language => 'a language
  less_eq_language == less_eq :: 'a language => 'a language => bool
  less_language == less :: 'a language => 'a language => bool
class compare = type +
  fixes compare :: "'a => 'a => order"
  assumes "comparator_compare": "comparator compare"
Proofs for inductive predicate(s) "Plus_Times_pre_cong"
  Proving monotonicity ...
class compare_order = compare + ord +
  assumes "ord_defs": "le_of_comp compare = (<=)" "lt_of_comp compare = (<)"
consts
  tails :: "'a list => 'a list list"
consts
  in_language :: "'a language => 'a list => bool"
consts
  to_language :: "'a list set => 'a language"
### theory "Coinductive_Languages.Coinductive_Language"
### 1.116s elapsed time, 4.278s cpu time, 0.786s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.WS1S_ExamplesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "size_list size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.Set_Algebras"
### 0.218s elapsed time, 0.866s cpu time, 0.079s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.WS1S_ExamplesMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
class compare_order = compare + linorder +
  assumes "ord_defs": "le_of_comp compare = (<=)" "lt_of_comp compare = (<)"
consts
  flat :: "'a list stream => 'a stream"
signature COMPARATOR_GENERATOR =
  sig
    datatype comparator_type = BNF | Linorder
    val ensure_info:
       comparator_type -> string -> local_theory -> local_theory
    val generate_comparator:
       comparator_type -> string -> local_theory -> local_theory
    val generate_comparators_from_bnf_fp:
       string ->
         local_theory ->
           ((term * thm list) list * (term * thm) list) * local_theory
    val get_info: Proof.context -> string -> info option
    type info =
       {comp: term,
        comp_def: thm option,
        comp_thm: thm,
        map: term,
        map_comp: thm option,
        partial_comp_thms: thm list, pcomp: term, used_positions: bool list}
    val register_comparator_of: string -> local_theory -> local_theory
    val register_foreign_comparator:
       typ -> term -> thm -> local_theory -> local_theory
    val register_foreign_partial_and_full_comparator:
       string ->
         term ->
           term ->
             term ->
               thm option ->
                 thm option ->
                   thm ->
                     thm ->
                       thm ->
                         thm -> bool list -> local_theory -> local_theory
  end
structure Comparator_Generator: COMPARATOR_GENERATOR
### theory "Deriving.Comparator_Generator"
### 0.703s elapsed time, 2.639s cpu time, 0.611s GC time
Loading theory "HOL-Library.While_Combinator" (required by "Draft.WS1S_ExamplesMoreTemplates" via "Draft.WS1S_Examples" via "Formula_Derivatives.WS1S_Formula" via "Formula_Derivatives.Abstract_Formula" via "Formula_Derivatives.Automaton")
signature COMPARE_CODE =
  sig
    val change_compare_code:
       term -> string list -> local_theory -> local_theory
  end
structure Compare_Code: COMPARE_CODE
### theory "Deriving.Compare"
### 0.766s elapsed time, 2.874s cpu time, 0.679s GC time
Loading theory "Deriving.Compare_Generator" (required by "Draft.WS1S_ExamplesMoreTemplates" via "Draft.WS1S_Examples" via "Formula_Derivatives.WS1S_Formula" via "Formula_Derivatives.Abstract_Formula" via "Deriving.Compare_Instances")
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.970s elapsed time, 3.683s cpu time, 0.763s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.WS1S_ExamplesMoreTemplates" via "Draft.WS1S_Examples" via "Formula_Derivatives.WS1S_Formula" via "Formula_Derivatives.WS1S_Prelim" via "Formula_Derivatives.FSet_More" via "HOL-Library.FSet")
Found termination order: "{}"
Found termination order: "{}"
signature COMPARE_GENERATOR =
  sig
    val compare_instance:
       Comparator_Generator.comparator_type -> string -> theory -> theory
    val compare_order_instance_via_comparator_of: string -> theory -> theory
    val compare_order_instance_via_compare: string -> theory -> theory
  end
structure Compare_Generator: COMPARE_GENERATOR
### theory "Deriving.Compare_Generator"
### 0.302s elapsed time, 1.189s cpu time, 0.151s GC time
Loading theory "Deriving.Compare_Instances" (required by "Draft.WS1S_ExamplesMoreTemplates" via "Draft.WS1S_Examples" via "Formula_Derivatives.WS1S_Formula" via "Formula_Derivatives.Abstract_Formula")
Found termination order: "{}"
### theory "HOL-Library.While_Combinator"
### 0.372s elapsed time, 1.464s cpu time, 0.151s GC time
Loading theory "Formula_Derivatives.Automaton" (required by "Draft.WS1S_ExamplesMoreTemplates" via "Draft.WS1S_Examples" via "Formula_Derivatives.WS1S_Formula" via "Formula_Derivatives.Abstract_Formula")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
deriving "compare_order" instance for type "Int.int"
deriving "compare" instance for type "Int.int"
deriving "compare_order" instance for type "Code_Numeral.integer"
deriving "compare" instance for type "Code_Numeral.integer"
Found termination order: "size <*mlex*> {}"
### Additional type variable(s) in locale specification "countable": 'a
deriving "compare_order" instance for type "Nat.nat"
deriving "compare" instance for type "Nat.nat"
deriving "compare_order" instance for type "String.char"
deriving "compare" instance for type "String.char"
deriving "compare" instance for type "Sum_Type.sum"
generating comparator for type "Sum_Type.sum"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
Proofs for coinductive predicate(s) "rel_language"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
deriving "compare" instance for type "List.list"
generating comparator for type "List.list"
deriving "compare" instance for type "Product_Type.prod"
generating comparator for type "Product_Type.prod"
Found termination order: "size <*mlex*> {}"
deriving "compare" instance for type "Option.option"
generating comparator for type "Option.option"
locale DA
  fixes alphabet :: "'a list"
    and init :: "'t => 's"
    and delta :: "'a => 's => 's"
    and accept :: "'s => bool"
    and wellformed :: "'s => bool"
    and Language :: "'s => 'a language"
    and wf :: "'t => bool"
    and Lang :: "'t => 'a language"
  assumes "DA alphabet init delta accept wellformed Language wf Lang"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "{}"
locale DAs
  fixes alphabet1 :: "'a1 list"
    and init1 :: "'t1 => 's1"
    and delta1 :: "'a1 => 's1 => 's1"
    and accept1 :: "'s1 => bool"
    and wellformed1 :: "'s1 => bool"
    and Language1 :: "'s1 => 'a1 language"
    and wf1 :: "'t1 => bool"
    and Lang1 :: "'t1 => 'a1 language"
    and alphabet2 :: "'a2 list"
    and init2 :: "'t2 => 's2"
    and delta2 :: "'a2 => 's2 => 's2"
    and accept2 :: "'s2 => bool"
    and wellformed2 :: "'s2 => bool"
    and Language2 :: "'s2 => 'a2 language"
    and wf2 :: "'t2 => bool"
    and Lang2 :: "'t2 => 'a2 language"
    and letter_eq :: "'a1 => 'a2 => bool"
  assumes
    "DAs alphabet1 init1 delta1 accept1 wellformed1 Language1 wf1 Lang1
      alphabet2 init2 delta2 accept2 wellformed2 Language2 wf2 Lang2
      letter_eq"
Proofs for inductive predicate(s) "finite_item"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
Found termination order: "{}"
deriving "compare" instance for type "HOL.bool"
deriving "compare" instance for type "Product_Type.unit"
locale DFA
  fixes alphabet :: "'a list"
    and init :: "'b => 'c"
    and delta :: "'a => 'c => 'c"
    and accept :: "'c => bool"
    and wellformed :: "'c => bool"
    and Language :: "'c => 'a language"
    and wf :: "'b => bool"
    and Lang :: "'b => 'a language"
  assumes "DFA alphabet init delta accept wellformed Language wf Lang"
deriving "compare_order" instance for type "HOL.bool"
deriving "compare_order" instance for type "Product_Type.unit"
### theory "Deriving.Compare_Instances"
### 0.433s elapsed time, 1.726s cpu time, 0.120s GC time
Loading theory "Formula_Derivatives.While_Default" (required by "Draft.WS1S_ExamplesMoreTemplates" via "Draft.WS1S_Examples" via "Formula_Derivatives.WS1S_Formula" via "Formula_Derivatives.Abstract_Formula")
Found termination order: "size <*mlex*> {}"
locale DFAs
  fixes alphabet1 :: "'a1 list"
    and init1 :: "'t1 => 's1"
    and delta1 :: "'a1 => 's1 => 's1"
    and accept1 :: "'s1 => bool"
    and wellformed1 :: "'s1 => bool"
    and Language1 :: "'s1 => 'a1 language"
    and wf1 :: "'t1 => bool"
    and Lang1 :: "'t1 => 'a1 language"
    and alphabet2 :: "'a2 list"
    and init2 :: "'t2 => 's2"
    and delta2 :: "'a2 => 's2 => 's2"
    and accept2 :: "'s2 => bool"
    and wellformed2 :: "'s2 => bool"
    and Language2 :: "'s2 => 'a2 language"
    and wf2 :: "'t2 => bool"
    and Lang2 :: "'t2 => 'a2 language"
    and letter_eq :: "'a1 => 'a2 => bool"
  assumes
    "DFAs alphabet1 init1 delta1 accept1 wellformed1 Language1 wf1 Lang1
      alphabet2 init2 delta2 accept2 wellformed2 Language2 wf2 Lang2
      letter_eq"
### theory "Formula_Derivatives.While_Default"
### 0.039s elapsed time, 0.150s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.WS1S_ExamplesMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
### theory "Formula_Derivatives.Automaton"
### 0.457s elapsed time, 1.801s cpu time, 0.170s GC time
Loading theory "Formula_Derivatives.Abstract_Formula" (required by "Draft.WS1S_ExamplesMoreTemplates" via "Draft.WS1S_Examples" via "Formula_Derivatives.WS1S_Formula")
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable"
### 0.968s elapsed time, 3.827s cpu time, 0.283s GC time
Loading theory "HOL-Library.FSet" (required by "Draft.WS1S_ExamplesMoreTemplates" via "Draft.WS1S_Examples" via "Formula_Derivatives.WS1S_Formula" via "Formula_Derivatives.WS1S_Prelim" via "Formula_Derivatives.FSet_More")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  fset :: (finite) finite
instantiation
  fset :: (type) {minus,bounded_lattice_bot,distrib_lattice}
  inf_fset == inf :: 'a fset => 'a fset => 'a fset
  bot_fset == bot :: 'a fset
  sup_fset == sup :: 'a fset => 'a fset => 'a fset
  less_eq_fset == less_eq :: 'a fset => 'a fset => bool
  less_fset == less :: 'a fset => 'a fset => bool
  minus_fset == minus :: 'a fset => 'a fset => 'a fset
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  fset :: (equal) equal
  equal_fset == equal_class.equal :: 'a fset => 'a fset => bool
instantiation
  fset :: (type) conditionally_complete_lattice
  Inf_fset == Inf :: 'a fset set => 'a fset
  Sup_fset == Sup :: 'a fset set => 'a fset
instantiation
  fset :: (finite) complete_lattice
  top_fset == top :: 'a fset
instantiation
  fset :: (finite) complete_boolean_algebra
  uminus_fset == uminus :: 'a fset => 'a fset
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.950s elapsed time, 3.624s cpu time, 1.020s GC time
Loading theory "List-Index.List_Index" (required by "Draft.WS1S_ExamplesMoreTemplates" via "Draft.WS1S_Examples" via "Formula_Derivatives.WS1S_Formula" via "Formula_Derivatives.WS1S_Prelim")
consts
  find_index :: "('a => bool) => 'a list => nat"
### theory "HOL-Library.Tree"
### 1.977s elapsed time, 7.676s cpu time, 1.374s GC time
Loading theory "Draft.Templates" (required by "Draft.WS1S_ExamplesMoreTemplates" via "Draft.ExtrEqs")
consts
  map_index' :: "nat => (nat => 'a => 'b) => 'a list => 'b list"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.073s elapsed time, 0.279s cpu time, 0.059s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.WS1S_ExamplesMoreTemplates")
consts
  insert_nth :: "nat => 'a => 'a list => 'a list"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "List-Index.List_Index"
### 0.371s elapsed time, 1.457s cpu time, 0.134s GC time
(if ?x <= ?y then if ?x = ?y then ?P else ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x <= ?y then if ?y = ?x then ?P else ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x <= ?y then if ?y <= ?x then ?P else ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x <= ?y then if ?x < ?y then ?Q else ?P else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x < ?y then ?Q else if ?x <= ?y then ?P else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x < ?y then ?Q else if ?y < ?x then ?R else ?P) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x < ?y then ?Q else if ?x = ?y then ?P else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x < ?y then ?Q else if ?y = ?x then ?P else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x = ?y then ?P else if ?y < ?x then ?R else ?Q) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x = ?y then ?P else if ?x < ?y then ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x = ?y then ?P else if ?y <= ?x then ?R else ?Q) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x = ?y then ?P else if ?x <= ?y then ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.582s elapsed time, 1.964s cpu time, 0.162s GC time
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
locale comp_fun_idem
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_idem f"
locale comm_monoid_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_fset (\<^bold>*) \<^bold>1"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### Cannot skip proof of schematic goal statement
locale semilattice_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
  assumes "semilattice_fset (\<^bold>*)"
locale semilattice_order_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
  assumes "semilattice_order_fset (\<^bold>*) (\<^bold>\<le>) (\<^bold><)"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
deriving "linorder" instance for type "Abstract_Formula.aformula"
generating comparator for type "Abstract_Formula.aformula"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
instantiation
  fset :: (type) size
  size_fset == size :: 'a fset => nat
Found termination order: "size <*mlex*> {}"
instantiation
  fset :: (exhaustive) exhaustive
  exhaustive_fset == exhaustive_class.exhaustive ::
    ('a fset => (bool * term list) option)
    => natural => (bool * term list) option
Found termination order: "(%p. nat_of_natural (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  fset :: (full_exhaustive) full_exhaustive
  full_exhaustive_fset == full_exhaustive_class.full_exhaustive ::
    ('a fset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Found termination order: "(%p. nat_of_natural (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  fset :: (random) random
  random_fset == random_class.random ::
    natural
    => natural * natural => ('a fset * (unit => term)) * natural * natural
### Additional type variable(s) in specification of "random_aux_fset_rel": 'a
### Additional type variable(s) in specification of "random_aux_fset_dom": 'a
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. nat_of_natural (fst p)) <*mlex*> {}"
consts
  norm_ACI :: "('a, 'b) aformula => ('a, 'b) aformula"
### theory "HOL-Library.FSet"
### 2.968s elapsed time, 8.817s cpu time, 2.465s GC time
Loading theory "Formula_Derivatives.FSet_More" (required by "Draft.WS1S_ExamplesMoreTemplates" via "Draft.WS1S_Examples" via "Formula_Derivatives.WS1S_Formula" via "Formula_Derivatives.WS1S_Prelim")
### theory "Formula_Derivatives.FSet_More"
### 0.045s elapsed time, 0.089s cpu time, 0.000s GC time
Loading theory "Formula_Derivatives.WS1S_Prelim" (required by "Draft.WS1S_ExamplesMoreTemplates" via "Draft.WS1S_Examples" via "Formula_Derivatives.WS1S_Formula")
Found termination order: "size <*mlex*> {}"
locale Formula_Operations
  fixes TYPEVARS :: "'a * 'i * 'k * 'n * 'x * 'v"
    and SUC :: "'k => 'n => 'n"
    and LESS :: "'k => nat => 'n => bool"
    and
    assigns :: "nat => 'i => 'k => 'v"
      (\<open>_\<^bsup>_\<^esup>_\<close> [900, 999, 999] 999)
    and nvars :: "'i => 'n"  (\<open>#\<^sub>V _\<close> [1000] 900)
    and Extend :: "'k => nat => 'i => 'v => 'i"
    and CONS :: "'x => 'i => 'i"
    and SNOC :: "'x => 'i => 'i"
    and Length :: "'i => nat"
    and extend :: "'k => bool => 'x => 'x"
    and size :: "'x => 'n"
    and zero :: "'n => 'x"
    and alphabet :: "'n => 'x list"
    and eval :: "'v => nat => bool"
    and downshift :: "'v => 'v"
    and upshift :: "'v => 'v"
    and add :: "nat => 'v => 'v"
    and cut :: "nat => 'v => 'v"
    and len :: "'v => nat"
    and restrict :: "'k => 'v => bool"
    and Restrict :: "'k => nat => ('a, 'k) aformula"
    and lformula0 :: "'a => bool"
    and FV0 :: "'k => 'a => nat set"
    and find0 :: "'k => nat => 'a => bool"
    and wf0 :: "'n => 'a => bool"
    and decr0 :: "'k => nat => 'a => 'a"
    and
    satisfies0 :: "'i => 'a => bool"
      (infix \<open>\<Turnstile>\<^sub>0\<close> 50)
    and nullable0 :: "'a => bool"
    and lderiv0 :: "'x => 'a => ('a, 'k) aformula"
    and rderiv0 :: "'x => 'a => ('a, 'k) aformula"
consts
  FV :: "('a, 'k) aformula => 'k => nat set"
consts
  find :: "'k => nat => ('a, 'k) aformula => bool"
consts
  wf :: "'n => ('a, 'k) aformula => bool"
consts
  lformula :: "('a, 'k) aformula => bool"
consts
  decr :: "'k => nat => ('a, 'k) aformula => ('a, 'k) aformula"
consts
  satisfies_gen ::
    "('k => 'v => nat => bool) => 'i => ('a, 'k) aformula => bool"
Found termination order: "size <*mlex*> {}"
consts
  nullable :: "('a, 'k) aformula => bool"
deriving "linorder" instance for type "WS1S_Prelim.order"
generating comparator for type "WS1S_Prelim.order"
instantiation
  WS1S_Prelim.order :: enum
  enum_order == enum_class.enum :: WS1S_Prelim.order list
  enum_all_order == enum_class.enum_all ::
    (WS1S_Prelim.order => bool) => bool
  enum_ex_order == enum_class.enum_ex :: (WS1S_Prelim.order => bool) => bool
### theory "Formula_Derivatives.WS1S_Prelim"
### 1.083s elapsed time, 2.314s cpu time, 0.263s GC time
Found termination order:
  "(%p. size (fst p)) <*mlex*> (%p. size (snd p)) <*mlex*> {}"
Found termination order:
  "(%p. size (fst p)) <*mlex*> (%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  deriv :: "'x => ('a, 'k) aformula => ('a, 'k) aformula"
locale Formula
  fixes SUC :: "'k => 'n => 'n"
    and LESS :: "'k => nat => 'n => bool"
    and
    assigns :: "nat => 'i => 'k => 'v"
      (\<open>_\<^bsup>_\<^esup>_\<close> [900, 999, 999] 999)
    and nvars :: "'i => 'n"  (\<open>#\<^sub>V _\<close> [1000] 900)
    and Extend :: "'k => nat => 'i => 'v => 'i"
    and CONS :: "'x => 'i => 'i"
    and SNOC :: "'x => 'i => 'i"
    and Length :: "'i => nat"
    and extend :: "'k => bool => 'x => 'x"
    and size :: "'x => 'n"
    and zero :: "'n => 'x"
    and alphabet :: "'n => 'x list"
    and eval :: "'v => nat => bool"
    and downshift :: "'v => 'v"
    and upshift :: "'v => 'v"
    and add :: "nat => 'v => 'v"
    and cut :: "nat => 'v => 'v"
    and len :: "'v => nat"
    and restrict :: "'k => 'v => bool"
    and Restrict :: "'k => nat => ('a, 'k) aformula"
    and lformula0 :: "'a => bool"
    and FV0 :: "'k => 'a => nat set"
    and find0 :: "'k => nat => 'a => bool"
    and wf0 :: "'n => 'a => bool"
    and decr0 :: "'k => nat => 'a => 'a"
    and
    satisfies0 :: "'i => 'a => bool"
      (infix \<open>\<Turnstile>\<^sub>0\<close> 50)
    and nullable0 :: "'a => bool"
    and lderiv0 :: "'x => 'a => ('a, 'k) aformula"
    and rderiv0 :: "'x => 'a => ('a, 'k) aformula"
    and TYPEVARS :: "'a * 'i * 'k * 'n * 'x * 'v"
  assumes
    "Formula SUC LESS assigns nvars Extend CONS SNOC Length extend size zero
      alphabet eval downshift upshift add cut len restrict Restrict
      lformula0 FV0 find0 wf0 decr0 (\<Turnstile>\<^sub>0) nullable0 lderiv0
      rderiv0"
locale Formula
  fixes SUC :: "'k => 'n => 'n"
    and LESS :: "'k => nat => 'n => bool"
    and
    assigns :: "nat => 'i => 'k => 'v"
      (\<open>_\<^bsup>_\<^esup>_\<close> [900, 999, 999] 999)
    and nvars :: "'i => 'n"  (\<open>#\<^sub>V _\<close> [1000] 900)
    and Extend :: "'k => nat => 'i => 'v => 'i"
    and CONS :: "'x => 'i => 'i"
    and SNOC :: "'x => 'i => 'i"
    and Length :: "'i => nat"
    and extend :: "'k => bool => 'x => 'x"
    and size :: "'x => 'n"
    and zero :: "'n => 'x"
    and alphabet :: "'n => 'x list"
    and eval :: "'v => nat => bool"
    and downshift :: "'v => 'v"
    and upshift :: "'v => 'v"
    and add :: "nat => 'v => 'v"
    and cut :: "nat => 'v => 'v"
    and len :: "'v => nat"
    and restrict :: "'k => 'v => bool"
    and Restrict :: "'k => nat => ('a, 'k) aformula"
    and lformula0 :: "'a => bool"
    and FV0 :: "'k => 'a => nat set"
    and find0 :: "'k => nat => 'a => bool"
    and wf0 :: "'n => 'a => bool"
    and decr0 :: "'k => nat => 'a => 'a"
    and
    satisfies0 :: "'i => 'a => bool"
      (infix \<open>\<Turnstile>\<^sub>0\<close> 50)
    and nullable0 :: "'a => bool"
    and lderiv0 :: "'x => 'a => ('a, 'k) aformula"
    and rderiv0 :: "'x => 'a => ('a, 'k) aformula"
    and TYPEVARS :: "'a * 'i * 'k * 'n * 'x * 'v"
  assumes
    "Formula SUC LESS assigns nvars Extend CONS SNOC Length extend size zero
      alphabet eval downshift upshift add cut len restrict Restrict
      lformula0 FV0 find0 wf0 decr0 (\<Turnstile>\<^sub>0) nullable0 lderiv0
      rderiv0"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  L :: "'n => 'i set => 'x language"
### theory "Formula_Derivatives.Abstract_Formula"
### 24.074s elapsed time, 40.299s cpu time, 6.692s GC time
Loading theory "Formula_Derivatives.WS1S_Formula" (required by "Draft.WS1S_ExamplesMoreTemplates" via "Draft.WS1S_Examples")
deriving "linorder" instance for type "Option.option"
deriving "linorder" instance for type "WS1S_Formula.atomic"
generating comparator for type "WS1S_Formula.atomic"
consts
  wf0 :: "idx => (nat, nat) atomic => bool"
Proofs for inductive predicate(s) "lformula0"
  Proving monotonicity ...
Found termination order: "{}"
### Ignoring duplicate rewrite rule:
### find0 SO ?vr1 (Eq_Const ?v1 ?va1 ?vb1) == False
### Ignoring duplicate rewrite rule:
### find0 SO ?vr1 (Less ?v1 ?va1 ?vb1) == False
### Ignoring duplicate rewrite rule:
### find0 SO ?vr1 (Plus_FO ?v1 ?va1 ?vb1 ?vc1) == False
### Ignoring duplicate rewrite rule:
### find0 SO ?vr1 (Eq_FO ?v1 ?va1 ?vb1) == False
consts
  satisfies0 :: "interp => (nat, nat) atomic => bool"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
consts
  nullable0 :: "('a, 'b) atomic => bool"
### theory "Formula_Derivatives.WS1S_Formula"
### 16.088s elapsed time, 21.073s cpu time, 5.451s GC time
Loading theory "Draft.WS1S_Examples" (required by "Draft.WS1S_ExamplesMoreTemplates")
### theory "Draft.WS1S_Examples"
### 0.113s elapsed time, 0.346s cpu time, 0.034s GC time
Loading theory "Draft.WS1S_ExamplesMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.WS1S_ExamplesMoreTemplates"
### 0.702s elapsed time, 3.032s cpu time, 0.162s GC time
"{((FBase (Eq_Presb None 0 0), [], [False]), FBase (Eq_Presb None 0 0)),
  ((FBase (Eq_Presb None 0 0), [], [True]), \<bottom>),
  ((FBase (Eq_Presb None 0 1), [], [False]), \<bottom>),
  ((FBase (Eq_Presb None 0 1), [], [True]), FBase (Eq_Presb None 0 0)),
  ((FBase (Eq_Presb None 0 2), [], [False]), FBase (Eq_Presb None 0 1)),
  ((FBase (Eq_Presb None 0 2), [], [True]), \<bottom>),
  ((FBase (Eq_Presb None 0 4), [], [False]), FBase (Eq_Presb None 0 2)),
  ((FBase (Eq_Presb None 0 4), [], [True]), \<bottom>),
  ((FBase (Eq_Presb None 0 8), [], [False]), FBase (Eq_Presb None 0 4)),
  ((FBase (Eq_Presb None 0 8), [], [True]), \<bottom>),
  ((FBase (Eq_Presb None 0 16), [], [False]), FBase (Eq_Presb None 0 8)),
  ((FBase (Eq_Presb None 0 16), [], [True]), \<bottom>),
  ((FBase (Eq_Presb None 0 32), [], [False]), FBase (Eq_Presb None 0 16)),
  ((FBase (Eq_Presb None 0 32), [], [True]), \<bottom>),
  ((FBase (Eq_Presb None 0 64), [], [False]), FBase (Eq_Presb None 0 32)),
  ((FBase (Eq_Presb None 0 64), [], [True]), \<bottom>),
  ((FBase (Eq_Presb None 0 128), [], [False]), FBase (Eq_Presb None 0 64)),
  ((FBase (Eq_Presb None 0 128), [], [True]), \<bottom>),
  ((FBase (Eq_Presb None 0 256), [], [False]), FBase (Eq_Presb None 0 128)),
  ((FBase (Eq_Presb None 0 256), [], [True]), \<bottom>),
  ((FBase (Eq_Presb None 0 512), [], [False]), FBase (Eq_Presb None 0 256)),
  ((FBase (Eq_Presb None 0 512), [], [True]), \<bottom>),
  ((FBase (Eq_Presb None 0 1024), [], [False]),
   FBase (Eq_Presb None 0 512)),
  ((FBase (Eq_Presb None 0 1024), [], [True]), \<bottom>),
  ((FBase (Eq_Presb None 0 2048), [], [False]),
   FBase (Eq_Presb None 0 1024)),
  ((FBase (Eq_Presb None 0 2048), [], [True]), \<bottom>),
  ((FBase (Eq_Presb None 0 4096), [], [False]),
   FBase (Eq_Presb None 0 2048)),
  ((FBase (Eq_Presb None 0 4096), [], [True]), \<bottom>),
  ((FBase (Eq_Presb None 0 8192), [], [False]),
   FBase (Eq_Presb None 0 4096)),
  ((FBase (Eq_Presb None 0 8192), [], [True]), \<bottom>),
  ((FBase (Eq_Presb None 0 16384), [], [False]),
   FBase (Eq_Presb None 0 8192)),
  ((FBase (Eq_Presb None 0 16384), [], [True]), \<bottom>),
  ((FBase (Eq_Presb None 0 32768), [], [False]),
   FBase (Eq_Presb None 0 16384)),
  ((FBase (Eq_Presb None 0 32768), [], [True]), \<bottom>),
  ((FBase (Eq_Presb None 0 65536), [], [False]),
   FBase (Eq_Presb None 0 32768)),
  ((FBase (Eq_Presb None 0 65536), [], [True]), \<bottom>),
  ((FBase (Eq_Presb None 0 131072), [], [False]),
   FBase (Eq_Presb None 0 65536)),
  ((FBase (Eq_Presb None 0 131072), [], [True]), \<bottom>),
  ((FBase (Eq_Presb None 0 262144), [], [False]),
   FBase (Eq_Presb None 0 131072)),
  ((FBase (Eq_Presb None 0 262144), [], [True]), \<bottom>),
  ((FBase (Eq_Presb None 0 524288), [], [False]),
   FBase (Eq_Presb None 0 262144)),
  ((FBase (Eq_Presb None 0 524288), [], [True]), \<bottom>),
  ((FBase (Eq_Presb None 0 1048576), [], [False]),
   FBase (Eq_Presb None 0 524288)),
  ((FBase (Eq_Presb None 0 1048576), [], [True]), \<bottom>),
  ((FBase (Eq_Presb None 0 2097152), [], [False]),
   FBase (Eq_Presb None 0 1048576)),
  ((FBase (Eq_Presb None 0 2097152), [], [True]), \<bottom>),
  ((FBase (Eq_Presb None 0 4194304), [], [False]),
   FBase (Eq_Presb None 0 2097152)),
  ((FBase (Eq_Presb None 0 4194304), [], [True]), \<bottom>),
  ((FBase (Eq_Presb None 0 8388608), [], [False]),
   FBase (Eq_Presb None 0 4194304)),
  ((FBase (Eq_Presb None 0 8388608), [], [True]), \<bottom>),
  ((FBase (Eq_Presb None 0 16777216), [], [False]),
   FBase (Eq_Presb None 0 8388608)),
  ((FBase (Eq_Presb None 0 16777216), [], [True]), \<bottom>),
  ((FBase (Eq_Presb None 0 33554432), [], [False]),
   FBase (Eq_Presb None 0 16777216)),
  ((FBase (Eq_Presb None 0 33554432), [], [True]), \<bottom>),
  ((FBase (Eq_Presb None 0 67108864), [], [False]),
   FBase (Eq_Presb None 0 33554432)),
  ((FBase (Eq_Presb None 0 67108864), [], [True]), \<bottom>),
  ((FBase (Eq_Presb None 0 134217728), [], [False]),
   FBase (Eq_Presb None 0 67108864)),
  ((FBase (Eq_Presb None 0 134217728), [], [True]), \<bottom>),
  ((FBase (Eq_Presb None 0 268435456), [], [False]),
   FBase (Eq_Presb None 0 134217728)),
  ((FBase (Eq_Presb None 0 268435456), [], [True]), \<bottom>),
  ((FBase (Eq_Presb None 0 536870912), [], [False]),
   FBase (Eq_Presb None 0 268435456)),
  ((FBase (Eq_Presb None 0 536870912), [], [True]), \<bottom>),
  ((FBase (Eq_Presb None 0 1073741824), [], [False]),
   FBase (Eq_Presb None 0 536870912)),
  ((FBase (Eq_Presb None 0 1073741824), [], [True]), \<bottom>),
  ((FBase (Eq_Presb None 0 2147483648), [], [False]),
   FBase (Eq_Presb None 0 1073741824)),
  ((FBase (Eq_Presb None 0 2147483648), [], [True]), \<bottom>),
  ((\<bottom>, [], [False]), \<bottom>),
  ((\<bottom>, [], [True]), \<bottom>),
  ((FBase (Eq_Presb None 0 4294967296), [], [False]),
   FBase (Eq_Presb None 0 2147483648)),
  ((FBase (Eq_Presb None 0 4294967296), [], [True]), \<bottom>)}"
  :: "((((nat, nat) atomic, WS1S_Prelim.order) aformula *
        bool list * bool list) *
       ((nat, nat) atomic, WS1S_Prelim.order) aformula) set"
"{((x\<^sub>0 = 0 \<and> x\<^sub>0 = 99958, [False], []), \<bottom>),
  ((x\<^sub>0 = 0 \<and> x\<^sub>0 = 99958, [True], []), \<bottom>),
  ((x\<^sub>0 = 1 \<and> x\<^sub>0 = 99959, [False], []),
   x\<^sub>0 = 0 \<and> x\<^sub>0 = 99958),
  ((x\<^sub>0 = 1 \<and> x\<^sub>0 = 99959, [True], []), \<bottom>),
  ((x\<^sub>0 = 2 \<and> x\<^sub>0 = 99960, [False], []),
   x\<^sub>0 = 1 \<and> x\<^sub>0 = 99959),
  ((x\<^sub>0 = 2 \<and> x\<^sub>0 = 99960, [True], []), \<bottom>),
  ((x\<^sub>0 = 3 \<and> x\<^sub>0 = 99961, [False], []),
   x\<^sub>0 = 2 \<and> x\<^sub>0 = 99960),
  ((x\<^sub>0 = 3 \<and> x\<^sub>0 = 99961, [True], []), \<bottom>),
  ((x\<^sub>0 = 4 \<and> x\<^sub>0 = 99962, [False], []),
   x\<^sub>0 = 3 \<and> x\<^sub>0 = 99961),
  ((x\<^sub>0 = 4 \<and> x\<^sub>0 = 99962, [True], []), \<bottom>),
  ((x\<^sub>0 = 5 \<and> x\<^sub>0 = 99963, [False], []),
   x\<^sub>0 = 4 \<and> x\<^sub>0 = 99962),
  ((x\<^sub>0 = 5 \<and> x\<^sub>0 = 99963, [True], []), \<bottom>),
  ((x\<^sub>0 = 6 \<and> x\<^sub>0 = 99964, [False], []),
   x\<^sub>0 = 5 \<and> x\<^sub>0 = 99963),
  ((x\<^sub>0 = 6 \<and> x\<^sub>0 = 99964, [True], []), \<bottom>),
  ((x\<^sub>0 = 7 \<and> x\<^sub>0 = 99965, [False], []),
   x\<^sub>0 = 6 \<and> x\<^sub>0 = 99964),
  ((x\<^sub>0 = 7 \<and> x\<^sub>0 = 99965, [True], []), \<bottom>),
  ((x\<^sub>0 = 8 \<and> x\<^sub>0 = 99966, [False], []),
   x\<^sub>0 = 7 \<and> x\<^sub>0 = 99965),
  ((x\<^sub>0 = 8 \<and> x\<^sub>0 = 99966, [True], []), \<bottom>),
  ((x\<^sub>0 = 9 \<and> x\<^sub>0 = 99967, [False], []),
   x\<^sub>0 = 8 \<and> x\<^sub>0 = 99966),
  ((x\<^sub>0 = 9 \<and> x\<^sub>0 = 99967, [True], []), \<bottom>),
  ((x\<^sub>0 = 10 \<and> x\<^sub>0 = 99968, [False], []),
   x\<^sub>0 = 9 \<and> x\<^sub>0 = 99967),
  ((x\<^sub>0 = 10 \<and> x\<^sub>0 = 99968, [True], []), \<bottom>),
  ((x\<^sub>0 = 11 \<and> x\<^sub>0 = 99969, [False], []),
   x\<^sub>0 = 10 \<and> x\<^sub>0 = 99968),
  ((x\<^sub>0 = 11 \<and> x\<^sub>0 = 99969, [True], []), \<bottom>),
  ((x\<^sub>0 = 12 \<and> x\<^sub>0 = 99970, [False], []),
   x\<^sub>0 = 11 \<and> x\<^sub>0 = 99969),
  ((x\<^sub>0 = 12 \<and> x\<^sub>0 = 99970, [True], []), \<bottom>),
  ((x\<^sub>0 = 13 \<and> x\<^sub>0 = 99971, [False], []),
   x\<^sub>0 = 12 \<and> x\<^sub>0 = 99970),
  ((x\<^sub>0 = 13 \<and> x\<^sub>0 = 99971, [True], []), \<bottom>),
  ((x\<^sub>0 = 14 \<and> x\<^sub>0 = 99972, [False], []),
   x\<^sub>0 = 13 \<and> x\<^sub>0 = 99971),
  ((x\<^sub>0 = 14 \<and> x\<^sub>0 = 99972, [True], []), \<bottom>),
  ((x\<^sub>0 = 15 \<and> x\<^sub>0 = 99973, [False], []),
   x\<^sub>0 = 14 \<and> x\<^sub>0 = 99972),
  ((x\<^sub>0 = 15 \<and> x\<^sub>0 = 99973, [True], []), \<bottom>),
  ((x\<^sub>0 = 16 \<and> x\<^sub>0 = 99974, [False], []),
   x\<^sub>0 = 15 \<and> x\<^sub>0 = 99973),
  ((x\<^sub>0 = 16 \<and> x\<^sub>0 = 99974, [True], []), \<bottom>),
  ((x\<^sub>0 = 17 \<and> x\<^sub>0 = 99975, [False], []),
   x\<^sub>0 = 16 \<and> x\<^sub>0 = 99974),
  ((x\<^sub>0 = 17 \<and> x\<^sub>0 = 99975, [True], []), \<bottom>),
  ((x\<^sub>0 = 18 \<and> x\<^sub>0 = 99976, [False], []),
   x\<^sub>0 = 17 \<and> x\<^sub>0 = 99975),
  ((x\<^sub>0 = 18 \<and> x\<^sub>0 = 99976, [True], []), \<bottom>),
  ((x\<^sub>0 = 19 \<and> x\<^sub>0 = 99977, [False], []),
   x\<^sub>0 = 18 \<and> x\<^sub>0 = 99976),
  ((x\<^sub>0 = 19 \<and> x\<^sub>0 = 99977, [True], []), \<bottom>),
  ((x\<^sub>0 = 20 \<and> x\<^sub>0 = 99978, [False], []),
   x\<^sub>0 = 19 \<and> x\<^sub>0 = 99977),
  ((x\<^sub>0 = 20 \<and> x\<^sub>0 = 99978, [True], []), \<bottom>),
  ((x\<^sub>0 = 21 \<and> x\<^sub>0 = 99979, [False], []),
   x\<^sub>0 = 20 \<and> x\<^sub>0 = 99978),
  ((x\<^sub>0 = 21 \<and> x\<^sub>0 = 99979, [True], []), \<bottom>),
  ((x\<^sub>0 = 22 \<and> x\<^sub>0 = 99980, [False], []),
   x\<^sub>0 = 21 \<and> x\<^sub>0 = 99979),
  ((x\<^sub>0 = 22 \<and> x\<^sub>0 = 99980, [True], []), \<bottom>),
  ((x\<^sub>0 = 23 \<and> x\<^sub>0 = 99981, [False], []),
   x\<^sub>0 = 22 \<and> x\<^sub>0 = 99980),
  ((x\<^sub>0 = 23 \<and> x\<^sub>0 = 99981, [True], []), \<bottom>),
  ((x\<^sub>0 = 24 \<and> x\<^sub>0 = 99982, [False], []),
   x\<^sub>0 = 23 \<and> x\<^sub>0 = 99981),
  ((x\<^sub>0 = 24 \<and> x\<^sub>0 = 99982, [True], []), \<bottom>),
  ((x\<^sub>0 = 25 \<and> x\<^sub>0 = 99983, [False], []),
   x\<^sub>0 = 24 \<and> x\<^sub>0 = 99982),
  ((x\<^sub>0 = 25 \<and> x\<^sub>0 = 99983, [True], []), \<bottom>),
  ((x\<^sub>0 = 26 \<and> x\<^sub>0 = 99984, [False], []),
   x\<^sub>0 = 25 \<and> x\<^sub>0 = 99983),
  ((x\<^sub>0 = 26 \<and> x\<^sub>0 = 99984, [True], []), \<bottom>),
  ((x\<^sub>0 = 27 \<and> x\<^sub>0 = 99985, [False], []),
   x\<^sub>0 = 26 \<and> x\<^sub>0 = 99984),
  ((x\<^sub>0 = 27 \<and> x\<^sub>0 = 99985, [True], []), \<bottom>),
  ((x\<^sub>0 = 28 \<and> x\<^sub>0 = 99986, [False], []),
   x\<^sub>0 = 27 \<and> x\<^sub>0 = 99985),
  ((x\<^sub>0 = 28 \<and> x\<^sub>0 = 99986, [True], []), \<bottom>),
  ((x\<^sub>0 = 29 \<and> x\<^sub>0 = 99987, [False], []),
   x\<^sub>0 = 28 \<and> x\<^sub>0 = 99986),
  ((x\<^sub>0 = 29 \<and> x\<^sub>0 = 99987, [True], []), \<bottom>),
  ((x\<^sub>0 = 30 \<and> x\<^sub>0 = 99988, [False], []),
   x\<^sub>0 = 29 \<and> x\<^sub>0 = 99987),
  ((x\<^sub>0 = 30 \<and> x\<^sub>0 = 99988, [True], []), \<bottom>),
  ((x\<^sub>0 = 31 \<and> x\<^sub>0 = 99989, [False], []),
   x\<^sub>0 = 30 \<and> x\<^sub>0 = 99988),
  ((x\<^sub>0 = 31 \<and> x\<^sub>0 = 99989, [True], []), \<bottom>),
  ((x\<^sub>0 = 32 \<and> x\<^sub>0 = 99990, [False], []),
   x\<^sub>0 = 31 \<and> x\<^sub>0 = 99989),
  ((x\<^sub>0 = 32 \<and> x\<^sub>0 = 99990, [True], []), \<bottom>),
  ((x\<^sub>0 = 33 \<and> x\<^sub>0 = 99991, [False], []),
   x\<^sub>0 = 32 \<and> x\<^sub>0 = 99990),
  ((x\<^sub>0 = 33 \<and> x\<^sub>0 = 99991, [True], []), \<bottom>),
  ((x\<^sub>0 = 34 \<and> x\<^sub>0 = 99992, [False], []),
   x\<^sub>0 = 33 \<and> x\<^sub>0 = 99991),
  ((x\<^sub>0 = 34 \<and> x\<^sub>0 = 99992, [True], []), \<bottom>),
  ((x\<^sub>0 = 35 \<and> x\<^sub>0 = 99993, [False], []),
   x\<^sub>0 = 34 \<and> x\<^sub>0 = 99992),
  ((x\<^sub>0 = 35 \<and> x\<^sub>0 = 99993, [True], []), \<bottom>),
  ((x\<^sub>0 = 36 \<and> x\<^sub>0 = 99994, [False], []),
   x\<^sub>0 = 35 \<and> x\<^sub>0 = 99993),
  ((x\<^sub>0 = 36 \<and> x\<^sub>0 = 99994, [True], []), \<bottom>),
  ((x\<^sub>0 = 37 \<and> x\<^sub>0 = 99995, [False], []),
   x\<^sub>0 = 36 \<and> x\<^sub>0 = 99994),
  ((x\<^sub>0 = 37 \<and> x\<^sub>0 = 99995, [True], []), \<bottom>),
  ((x\<^sub>0 = 38 \<and> x\<^sub>0 = 99996, [False], []),
   x\<^sub>0 = 37 \<and> x\<^sub>0 = 99995),
  ((x\<^sub>0 = 38 \<and> x\<^sub>0 = 99996, [True], []), \<bottom>),
  ((x\<^sub>0 = 39 \<and> x\<^sub>0 = 99997, [False], []),
   x\<^sub>0 = 38 \<and> x\<^sub>0 = 99996),
  ((x\<^sub>0 = 39 \<and> x\<^sub>0 = 99997, [True], []), \<bottom>),
  ((x\<^sub>0 = 40 \<and> x\<^sub>0 = 99998, [False], []),
   x\<^sub>0 = 39 \<and> x\<^sub>0 = 99997),
  ((x\<^sub>0 = 40 \<and> x\<^sub>0 = 99998, [True], []), \<bottom>),
  ((x\<^sub>0 = 41 \<and> x\<^sub>0 = 99999, [False], []),
   x\<^sub>0 = 40 \<and> x\<^sub>0 = 99998),
  ((x\<^sub>0 = 41 \<and> x\<^sub>0 = 99999, [True], []), \<bottom>),
  ((\<bottom>, [False], []), \<bottom>),
  ((\<bottom>, [True], []), \<bottom>),
  ((x\<^sub>0 = 42 \<and> x\<^sub>0 = 100000, [False], []),
   x\<^sub>0 = 41 \<and> x\<^sub>0 = 99999),
  ((x\<^sub>0 = 42 \<and> x\<^sub>0 = 100000, [True], []), \<bottom>)}"
  :: "((((nat, nat) atomic, WS1S_Prelim.order) aformula *
        bool list * bool list) *
       ((nat, nat) atomic, WS1S_Prelim.order) aformula) set"
"{((\<top>, [False], []), \<top>), ((\<top>, [True], []), \<top>),
  ((x\<^sub>0 = 0 \<and>
    (x\<^sub>0 = 99958 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [False], []),
   \<bottom>),
  ((x\<^sub>0 = 0 \<and>
    (x\<^sub>0 = 99958 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [True], []),
   \<top>),
  ((x\<^sub>0 = 1 \<and>
    (x\<^sub>0 = 99959 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [False], []),
   x\<^sub>0 = 0 \<and>
   (x\<^sub>0 = 99958 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0)))),
  ((x\<^sub>0 = 1 \<and>
    (x\<^sub>0 = 99959 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [True], []),
   \<bottom>),
  ((x\<^sub>0 = 2 \<and>
    (x\<^sub>0 = 99960 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [False], []),
   x\<^sub>0 = 1 \<and>
   (x\<^sub>0 = 99959 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0)))),
  ((x\<^sub>0 = 2 \<and>
    (x\<^sub>0 = 99960 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [True], []),
   \<bottom>),
  ((x\<^sub>0 = 3 \<and>
    (x\<^sub>0 = 99961 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [False], []),
   x\<^sub>0 = 2 \<and>
   (x\<^sub>0 = 99960 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0)))),
  ((x\<^sub>0 = 3 \<and>
    (x\<^sub>0 = 99961 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [True], []),
   \<bottom>),
  ((x\<^sub>0 = 4 \<and>
    (x\<^sub>0 = 99962 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [False], []),
   x\<^sub>0 = 3 \<and>
   (x\<^sub>0 = 99961 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0)))),
  ((x\<^sub>0 = 4 \<and>
    (x\<^sub>0 = 99962 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [True], []),
   \<bottom>),
  ((x\<^sub>0 = 5 \<and>
    (x\<^sub>0 = 99963 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [False], []),
   x\<^sub>0 = 4 \<and>
   (x\<^sub>0 = 99962 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0)))),
  ((x\<^sub>0 = 5 \<and>
    (x\<^sub>0 = 99963 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [True], []),
   \<bottom>),
  ((x\<^sub>0 = 6 \<and>
    (x\<^sub>0 = 99964 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [False], []),
   x\<^sub>0 = 5 \<and>
   (x\<^sub>0 = 99963 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0)))),
  ((x\<^sub>0 = 6 \<and>
    (x\<^sub>0 = 99964 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [True], []),
   \<bottom>),
  ((x\<^sub>0 = 7 \<and>
    (x\<^sub>0 = 99965 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [False], []),
   x\<^sub>0 = 6 \<and>
   (x\<^sub>0 = 99964 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0)))),
  ((x\<^sub>0 = 7 \<and>
    (x\<^sub>0 = 99965 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [True], []),
   \<bottom>),
  ((x\<^sub>0 = 8 \<and>
    (x\<^sub>0 = 99966 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [False], []),
   x\<^sub>0 = 7 \<and>
   (x\<^sub>0 = 99965 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0)))),
  ((x\<^sub>0 = 8 \<and>
    (x\<^sub>0 = 99966 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [True], []),
   \<bottom>),
  ((x\<^sub>0 = 9 \<and>
    (x\<^sub>0 = 99967 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [False], []),
   x\<^sub>0 = 8 \<and>
   (x\<^sub>0 = 99966 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0)))),
  ((x\<^sub>0 = 9 \<and>
    (x\<^sub>0 = 99967 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [True], []),
   \<bottom>),
  ((x\<^sub>0 = 10 \<and>
    (x\<^sub>0 = 99968 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [False], []),
   x\<^sub>0 = 9 \<and>
   (x\<^sub>0 = 99967 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0)))),
  ((x\<^sub>0 = 10 \<and>
    (x\<^sub>0 = 99968 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [True], []),
   \<bottom>),
  ((x\<^sub>0 = 11 \<and>
    (x\<^sub>0 = 99969 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [False], []),
   x\<^sub>0 = 10 \<and>
   (x\<^sub>0 = 99968 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0)))),
  ((x\<^sub>0 = 11 \<and>
    (x\<^sub>0 = 99969 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [True], []),
   \<bottom>),
  ((x\<^sub>0 = 12 \<and>
    (x\<^sub>0 = 99970 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [False], []),
   x\<^sub>0 = 11 \<and>
   (x\<^sub>0 = 99969 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0)))),
  ((x\<^sub>0 = 12 \<and>
    (x\<^sub>0 = 99970 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [True], []),
   \<bottom>),
  ((x\<^sub>0 = 13 \<and>
    (x\<^sub>0 = 99971 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [False], []),
   x\<^sub>0 = 12 \<and>
   (x\<^sub>0 = 99970 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0)))),
  ((x\<^sub>0 = 13 \<and>
    (x\<^sub>0 = 99971 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [True], []),
   \<bottom>),
  ((x\<^sub>0 = 14 \<and>
    (x\<^sub>0 = 99972 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [False], []),
   x\<^sub>0 = 13 \<and>
   (x\<^sub>0 = 99971 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0)))),
  ((x\<^sub>0 = 14 \<and>
    (x\<^sub>0 = 99972 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [True], []),
   \<bottom>),
  ((x\<^sub>0 = 15 \<and>
    (x\<^sub>0 = 99973 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [False], []),
   x\<^sub>0 = 14 \<and>
   (x\<^sub>0 = 99972 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0)))),
  ((x\<^sub>0 = 15 \<and>
    (x\<^sub>0 = 99973 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [True], []),
   \<bottom>),
  ((x\<^sub>0 = 16 \<and>
    (x\<^sub>0 = 99974 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [False], []),
   x\<^sub>0 = 15 \<and>
   (x\<^sub>0 = 99973 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0)))),
  ((x\<^sub>0 = 16 \<and>
    (x\<^sub>0 = 99974 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [True], []),
   \<bottom>),
  ((x\<^sub>0 = 17 \<and>
    (x\<^sub>0 = 99975 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [False], []),
   x\<^sub>0 = 16 \<and>
   (x\<^sub>0 = 99974 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0)))),
  ((x\<^sub>0 = 17 \<and>
    (x\<^sub>0 = 99975 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [True], []),
   \<bottom>),
  ((x\<^sub>0 = 18 \<and>
    (x\<^sub>0 = 99976 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [False], []),
   x\<^sub>0 = 17 \<and>
   (x\<^sub>0 = 99975 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0)))),
  ((x\<^sub>0 = 18 \<and>
    (x\<^sub>0 = 99976 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [True], []),
   \<bottom>),
  ((x\<^sub>0 = 19 \<and>
    (x\<^sub>0 = 99977 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [False], []),
   x\<^sub>0 = 18 \<and>
   (x\<^sub>0 = 99976 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0)))),
  ((x\<^sub>0 = 19 \<and>
    (x\<^sub>0 = 99977 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [True], []),
   \<bottom>),
  ((x\<^sub>0 = 20 \<and>
    (x\<^sub>0 = 99978 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [False], []),
   x\<^sub>0 = 19 \<and>
   (x\<^sub>0 = 99977 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0)))),
  ((x\<^sub>0 = 20 \<and>
    (x\<^sub>0 = 99978 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [True], []),
   \<bottom>),
  ((x\<^sub>0 = 21 \<and>
    (x\<^sub>0 = 99979 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [False], []),
   x\<^sub>0 = 20 \<and>
   (x\<^sub>0 = 99978 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0)))),
  ((x\<^sub>0 = 21 \<and>
    (x\<^sub>0 = 99979 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [True], []),
   \<bottom>),
  ((x\<^sub>0 = 22 \<and>
    (x\<^sub>0 = 99980 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [False], []),
   x\<^sub>0 = 21 \<and>
   (x\<^sub>0 = 99979 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0)))),
  ((x\<^sub>0 = 22 \<and>
    (x\<^sub>0 = 99980 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [True], []),
   \<bottom>),
  ((x\<^sub>0 = 23 \<and>
    (x\<^sub>0 = 99981 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [False], []),
   x\<^sub>0 = 22 \<and>
   (x\<^sub>0 = 99980 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0)))),
  ((x\<^sub>0 = 23 \<and>
    (x\<^sub>0 = 99981 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [True], []),
   \<bottom>),
  ((x\<^sub>0 = 24 \<and>
    (x\<^sub>0 = 99982 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [False], []),
   x\<^sub>0 = 23 \<and>
   (x\<^sub>0 = 99981 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0)))),
  ((x\<^sub>0 = 24 \<and>
    (x\<^sub>0 = 99982 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [True], []),
   \<bottom>),
  ((x\<^sub>0 = 25 \<and>
    (x\<^sub>0 = 99983 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [False], []),
   x\<^sub>0 = 24 \<and>
   (x\<^sub>0 = 99982 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0)))),
  ((x\<^sub>0 = 25 \<and>
    (x\<^sub>0 = 99983 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [True], []),
   \<bottom>),
  ((x\<^sub>0 = 26 \<and>
    (x\<^sub>0 = 99984 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [False], []),
   x\<^sub>0 = 25 \<and>
   (x\<^sub>0 = 99983 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0)))),
  ((x\<^sub>0 = 26 \<and>
    (x\<^sub>0 = 99984 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [True], []),
   \<bottom>),
  ((x\<^sub>0 = 27 \<and>
    (x\<^sub>0 = 99985 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [False], []),
   x\<^sub>0 = 26 \<and>
   (x\<^sub>0 = 99984 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0)))),
  ((x\<^sub>0 = 27 \<and>
    (x\<^sub>0 = 99985 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [True], []),
   \<bottom>),
  ((x\<^sub>0 = 28 \<and>
    (x\<^sub>0 = 99986 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [False], []),
   x\<^sub>0 = 27 \<and>
   (x\<^sub>0 = 99985 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0)))),
  ((x\<^sub>0 = 28 \<and>
    (x\<^sub>0 = 99986 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [True], []),
   \<bottom>),
  ((x\<^sub>0 = 29 \<and>
    (x\<^sub>0 = 99987 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [False], []),
   x\<^sub>0 = 28 \<and>
   (x\<^sub>0 = 99986 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0)))),
  ((x\<^sub>0 = 29 \<and>
    (x\<^sub>0 = 99987 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [True], []),
   \<bottom>),
  ((x\<^sub>0 = 30 \<and>
    (x\<^sub>0 = 99988 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [False], []),
   x\<^sub>0 = 29 \<and>
   (x\<^sub>0 = 99987 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0)))),
  ((x\<^sub>0 = 30 \<and>
    (x\<^sub>0 = 99988 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [True], []),
   \<bottom>),
  ((x\<^sub>0 = 31 \<and>
    (x\<^sub>0 = 99989 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [False], []),
   x\<^sub>0 = 30 \<and>
   (x\<^sub>0 = 99988 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0)))),
  ((x\<^sub>0 = 31 \<and>
    (x\<^sub>0 = 99989 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [True], []),
   \<bottom>),
  ((x\<^sub>0 = 32 \<and>
    (x\<^sub>0 = 99990 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [False], []),
   x\<^sub>0 = 31 \<and>
   (x\<^sub>0 = 99989 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0)))),
  ((x\<^sub>0 = 32 \<and>
    (x\<^sub>0 = 99990 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [True], []),
   \<bottom>),
  ((x\<^sub>0 = 33 \<and>
    (x\<^sub>0 = 99991 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [False], []),
   x\<^sub>0 = 32 \<and>
   (x\<^sub>0 = 99990 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0)))),
  ((x\<^sub>0 = 33 \<and>
    (x\<^sub>0 = 99991 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [True], []),
   \<bottom>),
  ((x\<^sub>0 = 34 \<and>
    (x\<^sub>0 = 99992 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [False], []),
   x\<^sub>0 = 33 \<and>
   (x\<^sub>0 = 99991 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0)))),
  ((x\<^sub>0 = 34 \<and>
    (x\<^sub>0 = 99992 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [True], []),
   \<bottom>),
  ((x\<^sub>0 = 35 \<and>
    (x\<^sub>0 = 99993 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [False], []),
   x\<^sub>0 = 34 \<and>
   (x\<^sub>0 = 99992 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0)))),
  ((x\<^sub>0 = 35 \<and>
    (x\<^sub>0 = 99993 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [True], []),
   \<bottom>),
  ((x\<^sub>0 = 36 \<and>
    (x\<^sub>0 = 99994 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [False], []),
   x\<^sub>0 = 35 \<and>
   (x\<^sub>0 = 99993 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0)))),
  ((x\<^sub>0 = 36 \<and>
    (x\<^sub>0 = 99994 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [True], []),
   \<bottom>),
  ((x\<^sub>0 = 37 \<and>
    (x\<^sub>0 = 99995 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [False], []),
   x\<^sub>0 = 36 \<and>
   (x\<^sub>0 = 99994 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0)))),
  ((x\<^sub>0 = 37 \<and>
    (x\<^sub>0 = 99995 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [True], []),
   \<bottom>),
  ((x\<^sub>0 = 38 \<and>
    (x\<^sub>0 = 99996 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [False], []),
   x\<^sub>0 = 37 \<and>
   (x\<^sub>0 = 99995 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0)))),
  ((x\<^sub>0 = 38 \<and>
    (x\<^sub>0 = 99996 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [True], []),
   \<bottom>),
  ((x\<^sub>0 = 39 \<and>
    (x\<^sub>0 = 99997 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [False], []),
   x\<^sub>0 = 38 \<and>
   (x\<^sub>0 = 99996 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0)))),
  ((x\<^sub>0 = 39 \<and>
    (x\<^sub>0 = 99997 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [True], []),
   \<bottom>),
  ((x\<^sub>0 = 40 \<and>
    (x\<^sub>0 = 99998 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [False], []),
   x\<^sub>0 = 39 \<and>
   (x\<^sub>0 = 99997 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0)))),
  ((x\<^sub>0 = 40 \<and>
    (x\<^sub>0 = 99998 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [True], []),
   \<bottom>),
  ((x\<^sub>0 = 41 \<and>
    (x\<^sub>0 = 99999 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [False], []),
   x\<^sub>0 = 40 \<and>
   (x\<^sub>0 = 99998 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0)))),
  ((x\<^sub>0 = 41 \<and>
    (x\<^sub>0 = 99999 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [True], []),
   \<bottom>),
  ((\<bottom>, [False], []), \<bottom>),
  ((\<bottom>, [True], []), \<bottom>),
  ((x\<^sub>0 = 42 \<and>
    (x\<^sub>0 = 100000 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [False], []),
   x\<^sub>0 = 41 \<and>
   (x\<^sub>0 = 99999 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0)))),
  ((x\<^sub>0 = 42 \<and>
    (x\<^sub>0 = 100000 \<or> (\<exists>\<^sub>1 FBase (Eq_FO False 1 0))),
    [True], []),
   \<bottom>)}"
  :: "((((nat, nat) atomic, WS1S_Prelim.order) aformula *
        bool list * bool list) *
       ((nat, nat) atomic, WS1S_Prelim.order) aformula) set"
val it = (): unit
