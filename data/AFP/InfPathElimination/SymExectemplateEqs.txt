   [("SymExec.se_star_one", "se_star ?c1.0 [?l] ?c2.0 = se ?c1.0 ?l ?c2.0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("SymExec.ce_star_Cons",
     "ce_star ?\<sigma>1.0 (?l # ?ls) ?\<sigma>2.0 =
      (EX \<sigma>.
          ce ?\<sigma>1.0 ?l \<sigma> & ce_star \<sigma> ?ls ?\<sigma>2.0)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 3),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 2, t_empty))),
    ("SymExec.se_star_append",
     "se_star ?c1.0 (?ls1.0 @ ?ls2.0) ?c2.0 =
      (EX c. se_star ?c1.0 ?ls1.0 c & se_star c ?ls2.0 ?c2.0)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 1, t_empty))),
    ("SymExec.se_star_Cons",
     "se_star ?c1.0 (?l # ?ls) ?c2.0 =
      (EX c. se ?c1.0 ?l c & se_star c ?ls ?c2.0)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 3),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 2, t_empty))),
    ("SymExec.se_star_append_one",
     "se_star ?c1.0 (?ls @ [?l]) ?c2.0 =
      (EX c. se_star ?c1.0 ?ls c & se c ?l ?c2.0)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, template_var 3),
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_hole 3))),
         template_var 0),
       template_app (template_hole 2, t_empty))),
    ("SymExec.feasible_Cons",
     "feasible ?c (?l # ?ls) =
      (EX c'. se ?c ?l c' & Conf.sat c' & feasible c' ?ls)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 2),
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("SymExec.se_Assume_eq",
     "se ?c (Assume ?e) ?c' =
      (?c' =
       (| store = store ?c,
          pred = pred ?c Un {adapt_bexp ?e (store ?c)} |))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 2),
                template_app (template_hole 9, template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_var 0,
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 6, template_var 2)),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 2)),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_app (template_hole 6, template_var 2))),
                 template_hole 1))),
           template_hole 0)))),
    ("SymExec.se_Assign_eq",
     "se ?c (Assign ?v ?e) ?c' =
      (EX sv.
          Conf.fresh_symvar sv ?c &
          fst sv = ?v &
          ?c' =
          (| store = (store ?c)(?v := snd sv),
             pred =
               insert
                (%\<sigma>. \<sigma> sv = adapt_aexp ?e (store ?c) \<sigma>)
                (pred ?c) |))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 16, template_var 3),
           template_app
            (template_app (template_hole 15, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 14, t_empty)))]
