   [("SymExec.finite_pred_imp_se_updatable",
     "finite (Bexp.vars (conjunct (pred ?c))) ==> updatable ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 0))))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("SymExec.updatable_imp_ex_se_suc",
     "updatable ?c ==> EX c'. se ?c ?l c'",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("SymExec.se_star_one", "se_star ?c1.0 [?l] ?c2.0 = se ?c1.0 ?l ?c2.0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("SymExec.se_preserves_finiteness2",
     "[| se ?c ?l ?c'; finite (pred ?c) |] ==> finite (pred ?c')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 1,
              template_app (template_hole 0, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("SymExec.se_sat_imp_sat",
     "[| se ?c ?l ?c'; Conf.sat ?c' |] ==> Conf.sat ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)))
           ))),
    ("SymExec.se_star_sat_imp_sat",
     "[| se_star ?c ?ls ?c'; Conf.sat ?c' |] ==> Conf.sat ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)))
           ))),
    ("SymExec.se_succs_states",
     "[| se ?c ?l ?c1.0; se ?c ?l ?c2.0 |] ==> states ?c1.0 = states ?c2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("SymExec.se_star_succs_states",
     "[| se_star ?c ?ls ?c1.0; se_star ?c ?ls ?c2.0 |]
      ==> states ?c1.0 = states ?c2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("SymExec.ce_star_Cons",
     "ce_star ?\<sigma>1.0 (?l # ?ls) ?\<sigma>2.0 =
      (EX \<sigma>.
          ce ?\<sigma>1.0 ?l \<sigma> & ce_star \<sigma> ?ls ?\<sigma>2.0)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 3),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 2, t_empty))),
    ("SymExec.se_star_append",
     "se_star ?c1.0 (?ls1.0 @ ?ls2.0) ?c2.0 =
      (EX c. se_star ?c1.0 ?ls1.0 c & se_star c ?ls2.0 ?c2.0)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 1, t_empty))),
    ("SymExec.se_star_Cons",
     "se_star ?c1.0 (?l # ?ls) ?c2.0 =
      (EX c. se ?c1.0 ?l c & se_star c ?ls ?c2.0)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 3),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 2, t_empty))),
    ("SymExec.unsat_imp_se_unsat",
     "[| se ?c ?l ?c'; ~ Conf.sat ?c |] ==> ~ Conf.sat ?c'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 1,
                    template_app (template_hole 0, template_var 2)))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)))
               )
           ))),
    ("SymExec.unsat_imp_se_star_unsat",
     "[| se_star ?c ?ls ?c'; ~ Conf.sat ?c |] ==> ~ Conf.sat ?c'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 1,
                    template_app (template_hole 0, template_var 2)))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)))
               )
           ))),
    ("SymExec.se_as_ce",
     "se ?c ?l ?c' ==>
      states ?c' =
      {\<sigma>'. EX \<sigma>:states ?c. ce \<sigma> ?l \<sigma>'}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app (template_hole 2, t_empty)))),
    ("SymExec.se_star_as_ce_star",
     "se_star ?c ?ls ?c' ==>
      states ?c' =
      {\<sigma>'. EX \<sigma>:states ?c. ce_star \<sigma> ?ls \<sigma>'}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app (template_hole 2, t_empty)))),
    ("SymExec.states_of_se_assume",
     "se ?c (Assume ?e) ?c' ==>
      states ?c' = {\<sigma>: states ?c. ?e \<sigma>}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_app (template_hole 5, template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app (template_hole 2, t_empty)))),
    ("SymExec.se_star_append_one",
     "se_star ?c1.0 (?ls @ [?l]) ?c2.0 =
      (EX c. se_star ?c1.0 ?ls c & se c ?l ?c2.0)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, template_var 3),
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_hole 3))),
         template_var 0),
       template_app (template_hole 2, t_empty))),
    ("SymExec.finite_imp_ex_se_succ",
     "[| finite (pred ?c); ALL e:pred ?c. finite (Bexp.vars e) |]
      ==> EX c'. se ?c ?l c'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 5, template_var 1)),
              t_empty)
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("SymExec.se_mono_for_sub",
     "[| se ?c1.0 ?l ?c1'; se ?c2.0 ?l ?c2'; ?c2.0 \<sqsubseteq> ?c1.0 |]
      ==> ?c2' \<sqsubseteq> ?c1'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 3),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 2)
           ))),
    ("SymExec.se_star_mono_for_sub",
     "[| se_star ?c1.0 ?ls ?c1'; se_star ?c2.0 ?ls ?c2';
         ?c2.0 \<sqsubseteq> ?c1.0 |]
      ==> ?c2' \<sqsubseteq> ?c1'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 3),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 2)
           ))),
    ("SymExec.feasible_Cons",
     "feasible ?c (?l # ?ls) =
      (EX c'. se ?c ?l c' & Conf.sat c' & feasible c' ?ls)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 2),
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("SymExec.se_Assume_eq",
     "se ?c (Assume ?e) ?c' =
      (?c' =
       (| store = store ?c,
          pred = pred ?c Un {adapt_bexp ?e (store ?c)} |))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 2),
                template_app (template_hole 9, template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_var 0,
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 6, template_var 2)),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 2)),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_app (template_hole 6, template_var 2))),
                 template_hole 1))),
           template_hole 0)))),
    ("SymExec.path_pred_of_se_Assume",
     "se ?c (Assume ?e) ?c' ==>
      conjunct (pred ?c') =
      (%\<sigma>.
          conjunct (pred ?c) \<sigma> & adapt_bexp ?e (store ?c) \<sigma>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 2),
                template_app (template_hole 6, template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         t_empty))),
    ("SymExec.se_mono_for_states_eq",
     "[| states ?c1.0 = states ?c2.0; se ?c1.0 ?l ?c1'; se ?c2.0 ?l ?c2' |]
      ==> states ?c2' = states ?c1'",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 4),
          template_app (template_hole 1, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 4),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 1, template_var 1)))),
    ("SymExec.se_star_mono_for_states_eq",
     "[| states ?c1.0 = states ?c2.0; se_star ?c1.0 ?ls ?c1';
         se_star ?c2.0 ?ls ?c2' |]
      ==> states ?c2' = states ?c1'",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 4),
          template_app (template_hole 1, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 4),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 1, template_var 1)))),
    ("SymExec.states_of_se_assign1",
     "[| se ?c (Assign ?v ?e) ?c'; ?\<sigma>' : states ?c' |]
      ==> EX \<sigma>:states ?c. ?\<sigma>' = \<sigma>(?v := ?e \<sigma>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 4),
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 3, template_var 4)),
             t_empty)
           ))),
    ("SymExec.states_of_se_assign2",
     "[| se ?c (Assign ?v ?e) ?c';
         EX \<sigma>:states ?c. ?\<sigma>' = \<sigma>(?v := ?e \<sigma>) |]
      ==> ?\<sigma>' : states ?c'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 4),
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 4)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0),
             template_app (template_hole 3, template_var 1))
           ))),
    ("SymExec.se_preserves_finiteness1",
     "[| finite_label ?l; se ?c ?l ?c';
         ALL e:pred ?c. finite (Bexp.vars e) |]
      ==> ALL e:pred ?c'. finite (Bexp.vars e)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             t_empty)
           ))),
    ("SymExec.states_of_se_assign",
     "se ?c (Assign ?v ?e) ?c' ==>
      states ?c' =
      {\<sigma>(?v := ?e \<sigma>) |\<sigma>. \<sigma> : states ?c}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 3),
                template_app
                 (template_app (template_hole 8, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 6, template_var 0),
         template_app (template_hole 5, t_empty)))),
    ("SymExec.path_pred_of_se_Assign",
     "se ?c (Assign ?v ?e) ?c' ==>
      EX sv.
         conjunct (pred ?c') =
         (%\<sigma>.
             conjunct (pred ?c) \<sigma> &
             \<sigma> sv = adapt_aexp ?e (store ?c) \<sigma>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 3),
                template_app
                 (template_app (template_hole 8, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("SymExec.finite_imp_ex_se_star_succ",
     "[| finite (pred ?c); ALL e:pred ?c. finite (Bexp.vars e);
         finite_labels ?ls |]
      ==> EX c'. se_star ?c ?ls c'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 8, template_var 1)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)),
              t_empty)
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("SymExec.se_Assign_eq",
     "se ?c (Assign ?v ?e) ?c' =
      (EX sv.
          Conf.fresh_symvar sv ?c &
          fst sv = ?v &
          ?c' =
          (| store = (store ?c)(?v := snd sv),
             pred =
               insert
                (%\<sigma>. \<sigma> sv = adapt_aexp ?e (store ?c) \<sigma>)
                (pred ?c) |))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 16, template_var 3),
           template_app
            (template_app (template_hole 15, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 14, t_empty))),
    ("SymExec.finite_symvars_imp_ex_greatest_symvar",
     "[| finite ?SV; EX sv:?SV. fst sv = ?v |]
      ==> EX sv:{sv: ?SV. fst sv = ?v}.
             ALL sv':{sv: ?SV. fst sv = ?v}. snd sv' <= snd sv",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8, template_app (template_hole 5, t_empty)),
             t_empty)
           ))),
    ("SymExec.subsums_imp_feasible",
     "[| finite_labels ?ls; finite (pred ?c1.0); finite (pred ?c2.0);
         ALL e:pred ?c1.0. finite (Bexp.vars e);
         ALL e:pred ?c2.0. finite (Bexp.vars e); ?c2.0 \<sqsubseteq> ?c1.0;
         feasible ?c2.0 ?ls |]
      ==> feasible ?c1.0 ?ls",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 2)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 5, template_var 1)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 5, template_var 0)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 2)
           )))]
