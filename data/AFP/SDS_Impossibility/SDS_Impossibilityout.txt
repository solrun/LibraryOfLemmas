Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SDS_ImpossibilityTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.SDS_ImpossibilityTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.SDS_Impossibility" (required by "Draft.SDS_ImpossibilityTemplates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.081s elapsed time, 0.285s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.126s elapsed time, 0.369s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SDS_ImpossibilityTemplates" via "Draft.ExtrEqs")
locale sds_impossibility
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and sds :: "('agent => 'alt => 'alt => bool) => 'alt pmf"
  assumes "sds_impossibility agents alts sds"
locale sds_impossibility_4_4
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and sds :: "('agent => 'alt => 'alt => bool) => 'alt pmf"
    and A1 :: "'agent"
    and A2 :: "'agent"
    and A3 :: "'agent"
    and A4 :: "'agent"
    and a :: "'alt"
    and b :: "'alt"
    and c :: "'alt"
    and d :: "'alt"
  assumes "sds_impossibility_4_4 agents alts sds A1 A2 A3 A4 a b c d"
### theory "HOL-Library.BigO"
### 0.655s elapsed time, 1.337s cpu time, 0.080s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SDS_ImpossibilityTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.550s elapsed time, 1.127s cpu time, 0.102s GC time
### Ignoring duplicate rewrite rule:
### pmf (sds R27) b == 0
### Ignoring duplicate rewrite rule:
### pmf (sds R27) c == 0
### Ignoring duplicate rewrite rule:
### pmf (sds R28) b == 0
### Ignoring duplicate rewrite rule:
### pmf (sds R28) c == 0
### Ignoring duplicate rewrite rule:
### pmf (sds R39) a == 1 / 2
### Ignoring duplicate rewrite rule:
### pmf (sds R39) b == 0
locale sds_impossibility
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and sds :: "('agent => 'alt => 'alt => bool) => 'alt pmf"
  assumes "sds_impossibility agents alts sds"
### theory "Draft.SDS_Impossibility"
### 9.656s elapsed time, 12.000s cpu time, 1.478s GC time
Loading theory "Draft.SDS_ImpossibilityTemplates"
val templateLemmas =
   [("SDS_Impossibility.finite_list'",
     "[| finite ?A;
         !!xs. [| ?A = set xs; distinct xs; length xs = card ?A |]
               ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("SDS_Impossibility.finite_list_subset",
     "[| finite ?A; ?n <= card ?A;
         !!xs. [| set xs <= ?A; distinct xs; length xs = ?n |]
               ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 6, template_var 2)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("SDS_Impossibility.card_ge_4E",
     "[| finite ?A; 4 <= card ?A;
         !!a b c d.
            [| distinct [a, b, c, d]; {a, b, c, d} <= ?A |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 1)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 10,
            template_app
             (template_hole 9,
              template_app (template_hole 9, template_hole 8))),
          template_app (template_hole 7, template_var 1)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.SDS_ImpossibilityTemplates"
### 1.283s elapsed time, 1.634s cpu time, 0.181s GC time
val it = (): unit
