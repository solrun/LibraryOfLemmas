Loading theory "HOL-Library.Cancellation" (required by "Draft.IMP2_Aux_LemmasMoreTemplates" via "Draft.IMP2_Aux_Lemmas" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.IMP2_Aux_LemmasMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Rewrite" (required by "Draft.IMP2_Aux_LemmasMoreTemplates" via "Draft.IMP2_Aux_Lemmas")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.IMP2_Aux_LemmasMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
infix 1 then_cconv
infix 0 else_cconv
type cconv = conv
signature BASIC_CCONV =
  sig
    val CCONVERSION: cconv -> int -> tactic
    type cconv = conv
    val else_cconv: cconv * cconv -> cconv
    val then_cconv: cconv * cconv -> cconv
  end
signature CCONV =
  sig
    val CCONVERSION: cconv -> int -> tactic
    val abs_cconv:
       (cterm * Proof.context -> cconv) -> Proof.context -> cconv
    val all_cconv: cconv
    val arg1_cconv: cconv -> cconv
    val arg_cconv: cconv -> cconv
    type cconv = conv
    val comb_cconv: cconv -> cconv
    val combination_cconv: cconv -> cconv -> cconv
    val concl_cconv: int -> cconv -> cconv
    val else_cconv: cconv * cconv -> cconv
    val fconv_rule: cconv -> thm -> thm
    val first_cconv: cconv list -> cconv
    val fun2_cconv: cconv -> cconv
    val fun_cconv: cconv -> cconv
    val gconv_rule: cconv -> int -> thm -> thm
    val no_cconv: cconv
    val params_cconv:
       int -> (Proof.context -> cconv) -> Proof.context -> cconv
    val prems_cconv: int -> cconv -> cconv
    val rewr_cconv: thm -> cconv
    val rewrs_cconv: thm list -> cconv
    val then_cconv: cconv * cconv -> cconv
    val with_prems_cconv: int -> cconv -> cconv
  end
structure CConv: CCONV
structure Basic_CConv: BASIC_CCONV
val then_cconv = fn: cconv * cconv -> cconv
val CCONVERSION = fn: cconv -> int -> tactic
val else_cconv = fn: cconv * cconv -> cconv
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.126s elapsed time, 0.528s cpu time, 0.033s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.IMP2_Aux_LemmasMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
infix 1 then_pconv
infix 0 else_pconv
signature REWRITE =
  sig
    val abs_pconv: patconv -> string option * typ -> patconv
    val all_pconv: patconv
    val arg_pconv: patconv -> patconv
    val asm_pconv: patconv -> patconv
    val asms_pconv: patconv -> patconv
    val concl_pconv: patconv -> patconv
    val else_pconv: patconv * patconv -> patconv
    val for_pconv: patconv -> (string option * typ option) list -> patconv
    val forall_pconv: patconv -> string option * typ option -> patconv
    val fun_pconv: patconv -> patconv
    val imp_pconv: patconv -> patconv
    val in_pconv: patconv -> patconv
    val judgment_pconv: patconv -> patconv
    val match_pconv: patconv -> term * (string option * typ) list -> patconv
    val mk_hole: int -> typ -> term
    val params_pconv: patconv -> patconv
    type patconv =
       Proof.context -> Type.tyenv * (string * term) list -> cconv
    datatype ('a, 'b) pattern
    = Asm | At | Concl | For of 'b list | In | Term of 'a
    val rewrite_conv:
       Proof.context ->
         (term * (string * typ) list, string * typ option) pattern list *
         term option
           -> thm list -> conv
    val rewrs_pconv: term option -> thm list -> patconv
    val then_pconv: patconv * patconv -> patconv
  end
structure Rewrite: REWRITE
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Rewrite"
### 0.214s elapsed time, 0.876s cpu time, 0.033s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.IMP2_Aux_LemmasMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
### theory "HOL-Library.Nat_Bijection"
### 0.321s elapsed time, 1.286s cpu time, 0.086s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.IMP2_Aux_LemmasMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.197s elapsed time, 0.782s cpu time, 0.053s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.IMP2_Aux_LemmasMoreTemplates" via "Draft.ExtrEqs")
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.417s elapsed time, 1.673s cpu time, 0.086s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.IMP2_Aux_LemmasMoreTemplates" via "Draft.IMP2_Aux_Lemmas")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
consts
  shift :: "'a list => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### theory "HOL-Library.BigO"
### 1.008s elapsed time, 3.801s cpu time, 0.798s GC time
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.089s elapsed time, 4.058s cpu time, 0.872s GC time
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
consts
  mset :: "'a list => 'a multiset"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
### theory "HOL-Library.Tree"
### 1.972s elapsed time, 6.117s cpu time, 1.089s GC time
Loading theory "Draft.Templates" (required by "Draft.IMP2_Aux_LemmasMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.068s elapsed time, 0.156s cpu time, 0.049s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.IMP2_Aux_LemmasMoreTemplates")
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.528s elapsed time, 1.091s cpu time, 0.083s GC time
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 3.028s elapsed time, 7.121s cpu time, 1.146s GC time
Loading theory "Draft.IMP2_Aux_Lemmas" (required by "Draft.IMP2_Aux_LemmasMoreTemplates")
### theory "Draft.IMP2_Aux_Lemmas"
### 0.651s elapsed time, 1.307s cpu time, 0.795s GC time
Loading theory "Draft.IMP2_Aux_LemmasMoreTemplates"
val templateLemmas =
   [("IMP2_Aux_Lemmas.eq_on_refl", "?s = ?s on ?X",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 1),
           template_var 0)
         )),
    ("IMP2_Aux_Lemmas.ran_sorted_empty", "ran_sorted ?a ?l ?l",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 0)
         )),
    ("IMP2_Aux_Lemmas.mset_ran_empty", "mset_ran ?a {} = {#}",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("IMP2_Aux_Lemmas.lran_empty", "lran ?a ?l ?l = []",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_var 0),
       template_hole 0)),
    ("IMP2_Aux_Lemmas.ran_sorted_singleton", "ran_sorted ?a ?l (?l + 1)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("IMP2_Aux_Lemmas.finite_psupset_wf",
     "finite ?S ==> wf (finite_psupset ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("IMP2_Aux_Lemmas.tl_upd_at0", "tl (?xs[0 := ?x]) = tl ?xs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0),
           template_var 0)),
       template_app (template_hole 2, template_var 1))),
    ("IMP2_Aux_Lemmas.intvs_singleton", "{?i..<?i + 1} = {?i}",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("IMP2_Aux_Lemmas.length_lran",
     "length (lran ?a ?l ?h) = nat (?h - ?l)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("IMP2_Aux_Lemmas.lran_empty", "(lran ?a ?l ?h = []) = (?h <= ?l)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1),
             template_var 0)),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("IMP2_Aux_Lemmas.mset_ran_single", "mset_ran ?a {?i} = {#?a ?i#}",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app
        (template_app
          (template_hole 1, template_app (template_var 1, template_var 0)),
         template_hole 0))),
    ("IMP2_Aux_Lemmas.mset_ran_infinite",
     "infinite ?r ==> mset_ran ?a ?r = {#}",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("IMP2_Aux_Lemmas.eq_on_sym", "?s = ?t on ?X ==> ?t = ?s on ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_var 0)
           ))),
    ("IMP2_Aux_Lemmas.set_lran", "set (lran ?a ?l ?h) = ?a ` {?l..<?h}",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IMP2_Aux_Lemmas.intvs_singleton", "{?i - 1..<?i} = {?i - 1}",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_hole 2)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_hole 2)),
         template_hole 0))),
    ("IMP2_Aux_Lemmas.mset_ran_by_sum",
     "mset_ran ?a ?r = (SUM i:?r. {#?a i#})",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 2, t_empty), template_var 0))),
    ("IMP2_Aux_Lemmas.mset_lran",
     "mset (lran ?a ?l ?h) = mset_ran ?a {?l..<?h}",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IMP2_Aux_Lemmas.lran_butlast",
     "lran ?a ?l (?h - 1) = butlast (lran ?a ?l ?h)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app
        (template_hole 0,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)))),
    ("IMP2_Aux_Lemmas.lran_tail",
     "lran ?a (?l + 1) ?h = tl (lran ?a ?l ?h)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1)),
         template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)))),
    ("IMP2_Aux_Lemmas.intvs_incdec", "{?l..?h - 1} = {?l..?h} - {?h}",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_hole 3)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("IMP2_Aux_Lemmas.intvs_incdec", "{?l + 1..?h} = {?l..?h} - {?l}",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_hole 3)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0)))),
    ("IMP2_Aux_Lemmas.intvs_incr_l", "{?l + 1..<?h} = {?l..<?h} - {?l}",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_hole 3)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0)))),
    ("IMP2_Aux_Lemmas.mset_ran_empty_iff",
     "finite ?r ==> (mset_ran ?a ?r = {#}) = (?r = {})",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 3, template_var 0),
             template_var 1),
           template_hole 2),
         template_equation (template_var 1, template_hole 0)))),
    ("IMP2_Aux_Lemmas.hd_lran", "?l < ?h ==> hd (lran ?a ?l ?h) = ?a ?l",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1)),
         template_app (template_var 0, template_var 2)))),
    ("IMP2_Aux_Lemmas.mset_ran_cong",
     "?a = ?b on ?r ==> mset_ran ?a ?r = mset_ran ?b ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IMP2_Aux_Lemmas.nat_distribs",
     "?n <= ?m ==> Suc ?m - ?n = Suc (?m - ?n)",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 1),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1))))),
    ("IMP2_Aux_Lemmas.intvs_decr_h", "{?l..<?h - 1} = {?l..<?h} - {?h - 1}",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_hole 3)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_hole 3)),
           template_hole 0)))),
    ("IMP2_Aux_Lemmas.last_lran",
     "?l < ?h ==> last (lran ?a ?l ?h) = ?a (?h - 1)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 0),
               template_var 2),
             template_var 1)),
         template_app
          (template_var 0,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0))))),
    ("IMP2_Aux_Lemmas.nat_distribs",
     "0 <= ?x ==> nat (?x div ?y) = nat ?x div nat ?y",
     template_implication
      ([template_inequation (less_equals, template_hole 4, template_var 1)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("IMP2_Aux_Lemmas.nat_distribs",
     "0 <= ?z ==> nat (?z * ?z') = nat ?z * nat ?z'",
     template_implication
      ([template_inequation (less_equals, template_hole 4, template_var 1)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("IMP2_Aux_Lemmas.wf_bounded_supset",
     "finite ?S ==> wf {(Q', Q). Q < Q' & Q' <= ?S}",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_hole 4, template_app (template_hole 3, t_empty)))
           ))),
    ("IMP2_Aux_Lemmas.mset_ran_shift",
     "inj_on ?f ?r ==> mset_ran (?a o ?f) ?r = mset_ran ?a (?f ` ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)),
           template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))))),
    ("IMP2_Aux_Lemmas.intvs_lower_incr",
     "?l < ?h ==> {?l..<?h} = insert ?l {?l + 1..<?h}",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0)),
             template_var 0))))),
    ("IMP2_Aux_Lemmas.intvs_incr_h",
     "?l <= ?h ==> {?l..<?h + 1} = insert ?h {?l..<?h}",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))))),
    ("IMP2_Aux_Lemmas.mset_ran_subst_outside",
     "?i ~: ?r ==> mset_ran (?a(?i := ?x)) ?r = mset_ran ?a ?r",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 2)))),
    ("IMP2_Aux_Lemmas.mset_ran_mem",
     "[| finite ?r; ?i : ?r |] ==> ?a ?i :# mset_ran ?a ?r",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_var 0, template_var 1)),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)))
           ))),
    ("IMP2_Aux_Lemmas.eq_onD",
     "[| ?r = ?s on ?X; ?x : ?X |] ==> ?r ?x = ?s ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app (template_var 3, template_var 0),
         template_app (template_var 2, template_var 0)))),
    ("IMP2_Aux_Lemmas.eq_on_trans",
     "[| ?r = ?s on ?X; ?s = ?t on ?X |] ==> ?r = ?t on ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0),
             template_var 1)
           ))),
    ("IMP2_Aux_Lemmas.lran_upd_outside",
     "?i < ?l ==> lran (?a(?i := ?x)) ?l ?h = lran ?a ?l ?h",
     template_implication
      ([template_inequation (less_than, template_var 4, template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 4),
                 template_var 1)),
             template_var 3),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 3),
           template_var 0)))),
    ("IMP2_Aux_Lemmas.lran_upd_outside",
     "?h <= ?i ==> lran (?a(?i := ?x)) ?l ?h = lran ?a ?l ?h",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 3),
                 template_var 1)),
             template_var 0),
           template_var 4),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0),
           template_var 4)))),
    ("IMP2_Aux_Lemmas.image_mset_subst_outside",
     "?x ~:# ?s ==> image_mset (?f(?x := ?y)) ?s = image_mset ?f ?s",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_app (template_hole 3, template_var 2))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 2)))),
    ("IMP2_Aux_Lemmas.intvs_upper_decr",
     "?l < ?h ==> {?l..<?h} = insert (?h - 1) {?l..<?h - 1}",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)))))),
    ("IMP2_Aux_Lemmas.intvs_decr_l",
     "?l <= ?h ==> {?l - 1..<?h} = insert (?l - 1) {?l..<?h}",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1)),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))))),
    ("IMP2_Aux_Lemmas.eq_on_subst_other",
     "?x ~: ?X ==> (?s = ?t(?x := ?v) on ?X) = (?s = ?t on ?X)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 4),
               template_var 0)),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 3)))),
    ("IMP2_Aux_Lemmas.eq_on_subst_other",
     "?x ~: ?X ==> (?s(?x := ?v) = ?t on ?X) = (?s = ?t on ?X)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 4),
                 template_var 1)),
             template_var 0),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0),
           template_var 3)))),
    ("IMP2_Aux_Lemmas.image_mset_eq_imp_set_eq",
     "image_mset ?f ?s = image_mset ?g ?s ==>
      ?f ` set_mset ?s = ?g ` set_mset ?s",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 3, template_var 0),
            template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app (template_hole 0, template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 1))))),
    ("IMP2_Aux_Lemmas.eq_on_trans'",
     "[| ?r = ?s on ?X; ?s = ?t on ?X' |] ==> ?r = ?t on ?X Int ?X'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("IMP2_Aux_Lemmas.mset_ran_eq_single_conv",
     "(mset_ran ?a ?r = {#?x#}) = (EX i. ?r = {i} & ?x = ?a i)",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 7, template_var 0),
           template_hole 6)),
       template_app (template_hole 5, t_empty))),
    ("IMP2_Aux_Lemmas.intvs_incdec",
     "?l <= ?h + 1 ==> {?l..?h + 1} = insert (?h + 1) {?l..?h}",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 4, template_var 0),
            template_hole 3))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_hole 3)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_hole 3)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("IMP2_Aux_Lemmas.intvs_incdec",
     "?l - 1 <= ?h ==> {?l - 1..?h} = insert (?l - 1) {?l..?h}",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_var 1),
            template_hole 3),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_hole 3)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_hole 3)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("IMP2_Aux_Lemmas.nth_lran",
     "int ?i < ?h - ?l ==> lran ?a ?l ?h ! ?i = ?a (?l + int ?i)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 5, template_var 3),
          template_app
           (template_app (template_hole 4, template_var 2),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1),
               template_var 2)),
           template_var 3),
         template_app
          (template_var 0,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app (template_hole 5, template_var 3)))))),
    ("IMP2_Aux_Lemmas.nat_distribs",
     "[| 0 <= ?z; 0 <= ?z' |] ==> nat (?z + ?z') = nat ?z + nat ?z'",
     template_implication
      ([template_inequation (less_equals, template_hole 4, template_var 1),
        template_inequation (less_equals, template_hole 4, template_var 0)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("IMP2_Aux_Lemmas.nat_distribs",
     "[| 0 <= ?z'; ?z' <= ?z |] ==> nat (?z - ?z') = nat ?z - nat ?z'",
     template_implication
      ([template_inequation (less_equals, template_hole 4, template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)),
           template_app (template_hole 2, template_var 1))))),
    ("IMP2_Aux_Lemmas.mset_ran_swap",
     "[| ?i : ?r; ?j : ?r |]
      ==> mset_ran (swap ?a ?i ?j) ?r = mset_ran ?a ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3),
               template_var 1)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 2)))),
    ("IMP2_Aux_Lemmas.lran_append1",
     "?l <= ?h ==> lran ?a ?l (?h + 1) = lran ?a ?l ?h @ [?a ?h]",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 0),
             template_var 2),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_hole 3)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 5, template_var 0),
                 template_var 2),
               template_var 1)),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_var 0, template_var 1)),
             template_hole 0))))),
    ("IMP2_Aux_Lemmas.lran_prepend1",
     "?l <= ?h ==> lran ?a (?l - 1) ?h = ?a (?l - 1) # lran ?a ?l ?h",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_hole 1)),
           template_var 1),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_var 0,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_hole 1))),
           template_app
            (template_app
              (template_app (template_hole 3, template_var 0),
               template_var 2),
             template_var 1))))),
    ("IMP2_Aux_Lemmas.mset_ran_insert",
     "[| finite ?r; ?i ~: ?r |]
      ==> mset_ran ?a (insert ?i ?r) = add_mset (?a ?i) (mset_ran ?a ?r)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 2)
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_var 0, template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 2))))),
    ("IMP2_Aux_Lemmas.mset_ran_combine2",
     "[| finite ?r; ?i ~: ?r |]
      ==> add_mset (?a ?i) (mset_ran ?a ?r) = mset_ran ?a (insert ?i ?r)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 2)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_var 0, template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2))))),
    ("IMP2_Aux_Lemmas.eq_on_xfer_ran_sorted",
     "[| ?a = ?a' on ?r'; {?l..<?h} <= ?r' |]
      ==> ran_sorted ?a ?l ?h = ran_sorted ?a' ?l ?h",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_var 1), template_var 0),
          template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1),
           template_var 0)))),
    ("IMP2_Aux_Lemmas.lran_bwd_simp",
     "lran ?a ?l ?h =
      (if ?l < ?h then lran ?a ?l (?h - 1) @ [?a (?h - 1)] else [])",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 7, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app (template_hole 7, template_var 2),
                   template_var 1),
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_hole 2))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_var 2,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_hole 2))),
               template_hole 0))),
         template_hole 0))),
    ("IMP2_Aux_Lemmas.intv_bwd_induct",
     "(!!l h. (l < h ==> ?P l (h - 1)) ==> ?P l h) ==> ?P ?a0.0 ?a1.0",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 2, template_var 1), template_var 0)
           ))),
    ("IMP2_Aux_Lemmas.intv_induct",
     "(!!l h. (l < h ==> ?P (l + 1) h) ==> ?P l h) ==> ?P ?a0.0 ?a1.0",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 2, template_var 1), template_var 0)
           ))),
    ("IMP2_Aux_Lemmas.eq_on_xfer_pointwise",
     "[| ?a = ?a' on ?r'; ?r <= ?r' |]
      ==> (ALL i:?r. ?P (?a i)) = (ALL i:?r. ?P (?a' i))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_inequation (less_equals, template_var 1, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), t_empty),
         template_app
          (template_app (template_hole 0, template_var 1), t_empty)))),
    ("IMP2_Aux_Lemmas.lran_eq_iff",
     "(lran ?a ?l ?h = lran ?a' ?l ?h) =
      (ALL i. ?l <= i & i < ?h --> ?a i = ?a' i)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_app (template_hole 6, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 6, template_var 0),
             template_var 2),
           template_var 1)),
       template_app (template_hole 5, t_empty))),
    ("IMP2_Aux_Lemmas.lran_upd_inside",
     "?i : {?l..<?h} ==>
      lran (?a(?i := ?x)) ?l ?h = (lran ?a ?l ?h)[nat (?i - ?l) := ?x]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 4),
                 template_var 0)),
             template_var 3),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 4, template_var 1),
                   template_var 3),
                 template_var 2)),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3))),
           template_var 0)))),
    ("IMP2_Aux_Lemmas.ran_sorted_alt",
     "ran_sorted ?a ?l ?h =
      (ALL i j. ?l <= i & i < j & j < ?h --> ?a i <= ?a j)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app (template_hole 4, t_empty))),
    ("IMP2_Aux_Lemmas.eq_on_subst_same",
     "?x : ?X ==>
      (?s = ?t(?x := ?v) on ?X) = (?s ?x = ?v & ?s = ?t on ?X - {?x})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_var 3)
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_app (template_hole 6, template_var 2),
                  template_app
                   (template_app
                     (template_app (template_hole 5, template_var 1),
                      template_var 4),
                    template_var 0)),
                template_var 3)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_var 2, template_var 4)),
                   template_var 0)),
               template_app
                (template_app
                  (template_app (template_hole 6, template_var 2),
                   template_var 1),
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_app
                    (template_app (template_hole 1, template_var 4),
                     template_hole 0))))
             )))),
    ("IMP2_Aux_Lemmas.eq_on_subst_same",
     "?x : ?X ==>
      (?s(?x := ?v) = ?t on ?X) = (?t ?x = ?v & ?s = ?t on ?X - {?x})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_var 3)
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app
                       (template_app (template_hole 5, template_var 2),
                        template_var 4),
                      template_var 1)),
                  template_var 0),
                template_var 3)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_var 0, template_var 4)),
                   template_var 1)),
               template_app
                (template_app
                  (template_app (template_hole 6, template_var 2),
                   template_var 0),
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_app
                    (template_app (template_hole 1, template_var 4),
                     template_hole 0))))
             )))),
    ("IMP2_Aux_Lemmas.mset_ran_xfer_pointwise",
     "[| mset_ran ?a ?r = mset_ran ?a' ?r; finite ?r |]
      ==> (ALL i:?r. ?P (?a i)) = (ALL i:?r. ?P (?a' i))",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 2)),
        template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), t_empty),
         template_app
          (template_app (template_hole 0, template_var 2), t_empty)))),
    ("IMP2_Aux_Lemmas.mset_ran_combine_eq_diff",
     "[| mset_ran ?a (?r - ?I) = mset_ran ?a' (?r - ?I); ?a = ?a' on ?I |]
      ==> mset_ran ?a ?r = mset_ran ?a' ?r",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 3),
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)),
          template_app
           (template_app (template_hole 2, template_var 0),
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1))),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_var 2)))),
    ("IMP2_Aux_Lemmas.mset_ran_subst_inside",
     "[| finite ?r; ?i : ?r |]
      ==> mset_ran (?a(?i := ?x)) ?r = mset_ran ?a ?r + {#?x#} - {#?a ?i#}",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 2),
               template_var 0)),
           template_var 3),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_var 3)),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0))),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_var 1, template_var 2)),
             template_hole 0))))),
    ("IMP2_Aux_Lemmas.mset_ran_combine1",
     "[| finite ?r\<^sub>1; finite ?r\<^sub>2;
         ?r\<^sub>1 Int ?r\<^sub>2 = {} |]
      ==> mset_ran ?a ?r\<^sub>1 + mset_ran ?a ?r\<^sub>2 =
          mset_ran ?a (?r\<^sub>1 Un ?r\<^sub>2)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate (template_app (template_hole 7, template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_hole 4)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))))),
    ("IMP2_Aux_Lemmas.image_mset_set_subst_inside",
     "[| finite ?S; ?i : ?S |]
      ==> image_mset (?f(?i := ?x)) (mset_set ?S) =
          image_mset ?f (mset_set ?S) + {#?x#} - {#?f ?i#}",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 2),
               template_var 0)),
           template_app (template_hole 4, template_var 3)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_app (template_hole 4, template_var 3))),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0))),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_var 1, template_var 2)),
             template_hole 0))))),
    ("IMP2_Aux_Lemmas.mset_ran_eq_extend",
     "[| mset_ran ?a ?r' = mset_ran ?a' ?r'; ?a = ?a' on ?r2.0;
         ?r - ?r' <= ?r2.0; ?r' <= ?r |]
      ==> mset_ran ?a ?r = mset_ran ?a' ?r",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 3, template_var 2),
            template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 0, template_var 0), template_var 3),
          template_var 1),
        template_inequation (less_equals, template_var 3, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 4), template_var 0),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0)))),
    ("IMP2_Aux_Lemmas.mset_ran_combine_eqs",
     "[| mset_ran ?a ?r\<^sub>1 = mset_ran ?b ?r\<^sub>1;
         mset_ran ?a ?r\<^sub>2 = mset_ran ?b ?r\<^sub>2;
         ?r\<^sub>1 Int ?r\<^sub>2 = {} |]
      ==> mset_ran ?a (?r\<^sub>1 Un ?r\<^sub>2) =
          mset_ran ?b (?r\<^sub>1 Un ?r\<^sub>2)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 3), template_var 0),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 0),
          template_hole 1)],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("IMP2_Aux_Lemmas.combine_sorted_pivot",
     "[| ?l <= ?i; ?i < ?h; ran_sorted ?a ?l ?i; ran_sorted ?a (?i + 1) ?h;
         ALL k:{?l..<?i}. ?a k < ?a ?i;
         ALL k:{?i + 1..<?h}. ?a ?i <= ?a k |]
      ==> ran_sorted ?a ?l ?h",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_than, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 0),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 0),
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_hole 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app
                   (template_hole 0,
                    template_app
                     (template_app (template_hole 3, template_var 2),
                      template_hole 2)),
                  template_var 1)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 0),
               template_var 3),
             template_var 1)
           )))]:
   (string * thm * template) list
### theory "Draft.IMP2_Aux_LemmasMoreTemplates"
### 0.405s elapsed time, 0.601s cpu time, 0.059s GC time
val it = (): unit
