Loading theory "Draft.Subgoal_Focus_Some" (required by "Draft.IMP2_Var_PostprocessorMoreTemplates" via "Draft.IMP2_Var_Postprocessor")
Loading theory "HOL-Eisbach.Eisbach" (required by "Draft.IMP2_Var_PostprocessorMoreTemplates" via "Draft.IMP2_Var_Postprocessor" via "Draft.Semantics" via "HOL-Eisbach.Eisbach_Tools")
Loading theory "Draft.Syntax" (required by "Draft.IMP2_Var_PostprocessorMoreTemplates" via "Draft.IMP2_Var_Postprocessor" via "Draft.Semantics")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.IMP2_Var_PostprocessorMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
signature PARSE_TOOLS =
  sig
    val is_real_val: ('a, 'b) parse_val -> bool
    val name_term: (term, string) parse_val parser
    val parse_term_val: 'a parser -> (term, 'a) parse_val parser
    val parse_thm_val: 'a parser -> (thm, 'a) parse_val parser
    datatype ('a, 'b) parse_val
    = Parse_Val of 'b * ('a -> unit) | Real_Val of 'a
    val parse_val_cases:
       ('a -> 'b) -> ('b, 'a) parse_val -> 'b * ('b -> unit)
    val the_parse_fun: ('a, 'b) parse_val -> 'a -> unit
    val the_parse_val: ('a, 'b) parse_val -> 'b
    val the_real_val: ('a, 'b) parse_val -> 'a
  end
structure Parse_Tools: PARSE_TOOLS
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### ML warning (line 51 of "$AFP/IMP2/lib/subgoal_focus_some.ML"):
### Pattern is not exhaustive.
### ML warning (line 91 of "$AFP/IMP2/lib/subgoal_focus_some.ML"):
### Pattern is not exhaustive.
signature SUBGOAL_FOCUS_SOME =
  sig
    val FOCUS: (focus -> tactic) -> Proof.context -> int -> tactic
    val FOCUS_PARAMS: (focus -> tactic) -> Proof.context -> int -> tactic
    val FOCUS_PARAMS_FIXED:
       (focus -> tactic) -> Proof.context -> int -> tactic
    val FOCUS_PREMS: (focus -> tactic) -> Proof.context -> int -> tactic
    val FOCUS_SOME_PREMS:
       prem_filter -> (focus -> tactic) -> Proof.context -> int -> tactic
    val focus:
       Proof.context -> int -> binding list option -> thm -> focus * thm
    type focus =
       {asms: (bool * cterm) list,
        concl: cterm,
        context: Proof.context,
        params: (string * cterm) list,
        prems: thm list, schematics: ctyp TVars.table * cterm Vars.table}
    val focus_params:
       Proof.context -> int -> binding list option -> thm -> focus * thm
    val focus_params_fixed:
       Proof.context -> int -> binding list option -> thm -> focus * thm
    val focus_prems:
       Proof.context -> int -> binding list option -> thm -> focus * thm
    val focus_some_prems:
       prem_filter ->
         Proof.context -> int -> binding list option -> thm -> focus * thm
    type prem_filter = Proof.context -> cterm -> bool
    val retrofit:
       Proof.context ->
         Proof.context ->
           (string * cterm) list ->
             (bool * cterm) list -> int -> thm -> thm -> thm Seq.seq
  end
structure Subgoal_Focus_Some: SUBGOAL_FOCUS_SOME
### theory "Draft.Subgoal_Focus_Some"
### 0.107s elapsed time, 0.422s cpu time, 0.000s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.IMP2_Var_PostprocessorMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
signature METHOD_CLOSURE =
  sig
    val apply_method:
       Proof.context ->
         string ->
           term list ->
             thm list list ->
               (Proof.context -> Method.method) list ->
                 Proof.context -> thm list -> context_tactic
    val method:
       binding ->
         (binding * typ option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
    val method_cmd:
       binding ->
         (binding * string option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
  end
structure Method_Closure: METHOD_CLOSURE
### theory "HOL-Library.Function_Algebras"
### 0.170s elapsed time, 0.649s cpu time, 0.038s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.IMP2_Var_PostprocessorMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
structure Eisbach_Rule_Insts: sig end
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.284s elapsed time, 1.119s cpu time, 0.099s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.IMP2_Var_PostprocessorMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "{}"
### ML warning (line 170 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 187 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 309 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
signature MATCH_METHOD =
  sig
    val focus_params: Proof.context -> term list
    val focus_schematics: Proof.context -> Envir.tenv
  end
structure Match_Method: MATCH_METHOD
val method_evaluate = fn: Method.text -> Proof.context -> thm list -> tactic
### theory "HOL-Library.Nat_Bijection"
### 0.494s elapsed time, 1.943s cpu time, 0.167s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.IMP2_Var_PostprocessorMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Eisbach.Eisbach"
### 0.639s elapsed time, 2.498s cpu time, 0.205s GC time
Loading theory "HOL-Eisbach.Eisbach_Tools" (required by "Draft.IMP2_Var_PostprocessorMoreTemplates" via "Draft.IMP2_Var_Postprocessor" via "Draft.Semantics")
val try_map = fn: 'a Seq.seq -> 'a Seq.seq -> 'a Seq.seq
val uncurry_rule = fn: thm -> thm
val curry_rule = fn: thm -> thm
### theory "HOL-Eisbach.Eisbach_Tools"
### 0.053s elapsed time, 0.221s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.IMP2_Var_PostprocessorMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.180s elapsed time, 4.565s cpu time, 0.910s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.217s elapsed time, 4.603s cpu time, 1.009s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.195s elapsed time, 7.139s cpu time, 1.289s GC time
Loading theory "Draft.Templates" (required by "Draft.IMP2_Var_PostprocessorMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.061s elapsed time, 0.121s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.IMP2_Var_PostprocessorMoreTemplates")
### theory "Draft.Syntax"
### 2.779s elapsed time, 9.191s cpu time, 1.426s GC time
Loading theory "Draft.Parser" (required by "Draft.IMP2_Var_PostprocessorMoreTemplates" via "Draft.IMP2_Var_Postprocessor")
Loading theory "Draft.Semantics" (required by "Draft.IMP2_Var_PostprocessorMoreTemplates" via "Draft.IMP2_Var_Postprocessor")
structure Term_Annot:
  sig
    val annotate_term: term -> string * Position.T -> term
    val annotation: string * Position.T -> term
    val dest_annotated_term: term -> (string * Position.T) * term
    val dest_annotation: term -> term
    val has_annotations: term -> bool
    val is_annotated_term: term -> bool
    val parse_annotate: string -> term parser
    val parse_annotation: term parser
    val parse_cartouche: (string * Position.T) parser
    val read_annotation_as_term: Proof.context -> term -> term * term
    val read_term: Proof.context -> string * Position.T -> term
    val strip_annotated_terms: term -> term
    val strip_annotations: term -> term
  end
structure IMP_Syntax:
  sig
    val While_Annot_c: term
    val antf: term -> term
    type impvar = string * varkind
    val is_global: string -> bool
    val is_local: string -> bool
    val list_Seq: term list -> term
    val lv_idx: string -> rval -> lval
    datatype lval = LV_IDX of string * term | LV_VAR of string
    val mk_ArrayCpy: term -> term -> term
    val mk_ArrayCpy_retv: term -> term -> term
    val mk_ArrayInit: term -> term
    val mk_Assign: term -> term -> term
    val mk_AssignIdx: term -> term -> term -> term
    val mk_AssignIdx_retv: term -> term -> term -> term
    val mk_Assign_retv: term -> term -> term
    val mk_If: rval -> term -> term -> term
    val mk_Inline: term -> term
    val mk_Params: term -> term
    val mk_Scope: term -> term
    val mk_Seq: term -> term -> term
    val mk_Skip: term
    val mk_While_annot: term -> rval -> term -> term
    val mk_aexp_const: int -> term
    val mk_assign_from_retv: lval -> string -> term
    val mk_lr_assign: lval -> rval -> term
    val mk_params: lval list -> term -> rval list -> term
    val mk_pcall: string -> term
    val mk_var_a: string -> term
    val mk_var_i: string -> term
    val mk_varname: string -> term
    val param_varnames: int -> string list
    val ret_varnames: int -> string list
    val rv_BC: term -> rval
    val rv_BC': bool -> rval
    val rv_binop: term -> rval -> rval -> rval
    val rv_int': int -> rval
    val rv_not: rval -> rval
    val rv_t: rval -> term
    val rv_unop: term -> rval -> rval
    val rv_var: string -> rval
    val rv_var_idx: string -> rval -> rval
    datatype rval = RV_AEXP of term | RV_VAR of string
    datatype varkind = ARRAY | VAL
    val zip_with_param_lvs: 'a list -> (lval * 'a) list
    val zip_with_param_names: 'a list -> (string * 'a) list
    val zip_with_param_rvs: 'a list -> (rval * 'a) list
    val zip_with_ret_lvs: 'a list -> (lval * 'a) list
    val zip_with_ret_names: 'a list -> (string * 'a) list
    val zip_with_ret_rvs: 'a list -> (rval * 'a) list
  end
structure IMP_Parser:
  sig
    structure Opr_Data: GENERIC_DATA
    val add_binop:
       Inttab.key * string * term -> Context.generic -> Context.generic
    val add_unop:
       Inttab.key * string * term -> Context.generic -> Context.generic
    val cartouche_tr: Proof.context -> term list -> term
    val fixed_keywords: string list
    val g_parse_call_assign:
       Proof.context ->
         (Token.T list -> IMP_Syntax.lval * Token.T list) *
         (IMP_Syntax.lval -> Token.T list -> term * Token.T list)
    val g_parse_multiret_call:
       Proof.context ->
         (Token.T list -> IMP_Syntax.lval list * Token.T list) *
         (IMP_Syntax.lval list -> Token.T list -> term * Token.T list)
    val g_parse_void_call:
       Proof.context ->
         (Token.T list -> (term * IMP_Syntax.rval list) * Token.T list) *
         (term * IMP_Syntax.rval list -> 'a -> term * 'a)
    val is_binop: op_decl -> bool
    val is_unop: op_decl -> bool
    val keywords: Proof.context -> Keyword.keywords
    val keywords_of_tab: op_decl list Inttab.table -> string list
    val lastg: ('a -> 'b * 'c) * ('b -> 'c -> 'd * 'e) -> 'a -> 'd * 'e
    val mark_term: term -> term
    val merge_variables:
       (Symtab.key * IMP_Syntax.varkind) list ->
         (Symtab.key * IMP_Syntax.varkind) list
    val name_eq_op_decl: (''a * (''b * 'c)) * (''a * (''b * 'd)) -> bool
    type op_decl = op_kind * (string * term)
    datatype op_kind = Binop | Unop
    val parse_all:
       Proof.context ->
         (Token.T list -> 'a * Token.T list) -> Token.T list -> 'a
    val parse_args: Proof.context -> IMP_Syntax.rval list parser
    val parse_command: Proof.context -> Token.T list -> term * Token.T list
    val parse_command_at:
       Proof.context ->
         string * Position.T ->
           (Symtab.key * IMP_Syntax.varkind) list * term
    val parse_exp:
       Proof.context -> Token.T list -> IMP_Syntax.rval * Token.T list
    val parse_exp_tab:
       op_decl list Inttab.table ->
         Token.T list -> IMP_Syntax.rval * Token.T list
    val parse_lhs:
       Proof.context -> Token.T list -> IMP_Syntax.lval * Token.T list
    val parse_multiret_lhs: Proof.context -> IMP_Syntax.lval list parser
    val parse_pos_text:
       (Proof.context -> Token.T list -> 'a * Token.T list) ->
         Proof.context -> Position.T * string -> 'a
    val parse_proc_name:
       Proof.context -> Token.T list -> term * Token.T list
    val parse_rhs_call:
       Proof.context ->
         Token.T list -> (term * IMP_Syntax.rval list) * Token.T list
    val parse_sympos:
       (Proof.context -> Token.T list -> 'a * Token.T list) ->
         Proof.context -> Symbol_Pos.T list -> 'a
    val parse_varname: Token.T list -> string * Token.T list
    val read_term_pos: Proof.context -> string * Position.T -> term
    val scan_if_then_else:
       ('a -> 'b * 'c) -> ('b -> 'c -> 'd) -> ('a -> 'd) -> 'a -> 'd
    val tab_add_binop:
       Inttab.key * ''a * 'b ->
         (op_kind * (''a * 'b)) list Inttab.table ->
           (op_kind * (''a * 'b)) list Inttab.table
    val tab_add_unop:
       Inttab.key * ''a * 'b ->
         (op_kind * (''a * 'b)) list Inttab.table ->
           (op_kind * (''a * 'b)) list Inttab.table
    val variables_of: term -> (Symtab.key * IMP_Syntax.varkind) list
    val ||| : (('a -> 'b * 'c) * ('b -> 'c -> 'd)) * ('a -> 'd) -> 'a -> 'd
  end
"SKIP"
  :: "com"
locale experiment5447680
locale experiment5448030
val it = Const ("Parser.experiment5447680.p1", "com"): term
"p1"
  :: "com"
### theory "Draft.Parser"
### 0.503s elapsed time, 1.630s cpu time, 0.872s GC time
### Stripped annotations from program
"''a'' ::= N 1;; IF Bc True THEN ''a''[] ::= ''a'' ELSE SKIP;;
 IF Bc False THEN SKIP ELSE (SKIP;; SKIP);;
 WHILE Cmpop (%x y. y < x) (V ''n'') (N 0)
 DO (''a'' ::= Binop (+) (V ''a'') (V ''a'');; (SKIP;; p1);; Inline p1;;
     (Params p1;; ArrayCpy_retv ''y'' ''G_ret_1'');; SCOPE ''n'' ::= N 0;;
     ''n'' ::= Binop (-) (V ''n'') (N 1))"
  :: "com"
"''a'' ::= N 1;;
 WHILE Cmpop (%x y. y < x) (V ''n'') (N 0)
 DO (''a'' ::= Binop (+) (V ''a'') (V ''a'');;
     ''n'' ::= Binop (-) (V ''n'') (N 1))"
  :: "com"
"''G_par_1''[] ::= ''a'';; ''G_par_2'' ::= Binop (+) (V ''b'') (N 1);;
 Params f;; ArrayCpy_retv ''x1'' ''G_ret_1'';;
 ArrayCpy_retv ''x2'' ''G_ret_2''"
  :: "com"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
"''x''[] ::= ''y'';; ''a''[V ''i''] ::= V ''x'';; CLEAR ''a''[];;
 ''a'' ::= Vidx ''b'' (V ''i'');;
 ''b'' ::= Binop (+) (Vidx ''a'' (N 1))
            (Binop (*) (V ''x'')
              (Vidx ''a'' (Binop (+) (Vidx ''a'' (V ''i'')) (N 1))));;
 Params p1;;
 (''G_par_1''[] ::= ''x'';; ''G_par_2'' ::= Binop (+) (V ''b'') (N 1);;
  ''G_par_3'' ::= Vidx ''y'' (V ''a'');; Params p1);;
 (Params p1;; AssignIdx_retv ''a'' (V ''i'') ''G_ret_1'');;
 (Params p1;; ArrayCpy_retv ''a'' ''G_ret_1'');;
 (''G_par_1''[] ::= ''a'';; ''G_par_2''[] ::= ''b'';; Params p1;;
  ArrayCpy_retv ''a'' ''G_ret_1'';; ArrayCpy_retv ''b'' ''G_ret_2'';;
  ArrayCpy_retv ''c'' ''G_ret_3'');;
 Params (PCall ''p'');;
 (''G_par_1''[] ::= ''a'';; ''G_par_2''[] ::= ''b'';;
  Params (PCall ''p''));;
 (''G_par_1''[] ::= ''a'';; ''G_par_2''[] ::= ''b'';; Params (PCall ''p'');;
  ArrayCpy_retv ''a'' ''G_ret_1'');;
 (''G_par_1''[] ::= ''a'';; ''G_par_2''[] ::= ''b'';; Params (PCall ''p'');;
  ArrayCpy_retv ''a'' ''G_ret_1'';; ArrayCpy_retv ''b'' ''G_ret_2'';;
  ArrayCpy_retv ''c'' ''G_ret_3'');;
 SKIP"
  :: "com"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Proofs for inductive predicate(s) "big_step"
  Proving monotonicity ...
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.907s elapsed time, 2.585s cpu time, 0.896s GC time
### Cannot skip proof of schematic goal statement
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Proofs for inductive predicate(s) "small_steps"
  Proving monotonicity ...
Proofs for inductive predicate(s) "count_it"
  Proving monotonicity ...
### theory "Draft.Semantics"
### 3.646s elapsed time, 6.515s cpu time, 2.003s GC time
Loading theory "Draft.IMP2_Var_Postprocessor" (required by "Draft.IMP2_Var_PostprocessorMoreTemplates")
structure Renaming:
  sig
    val RENAMING_rl: Proof.context -> term * string -> thm
    val apply_renamings_tac: Proof.context -> int -> tactic
    val remove_renamings_tac: Proof.context -> int -> tactic
  end
structure VC_Postprocessor:
  sig
    structure Candtab: TABLE
    val add_naming_hint:
       term ->
         string Candtab.table * term list ->
           string Candtab.table * term list
    val add_state_candidates:
       term ->
         (IMP_Syntax.varkind * string) Candtab.table * term list ->
           (IMP_Syntax.varkind * string) Candtab.table * term list
    val compute_renamings:
       string Termtab.table ->
         string Candtab.table ->
           (IMP_Syntax.varkind * string) Candtab.table * term list ->
             (term * string) list
    val guess_renaming:
       string Termtab.table ->
         (term * term) * (IMP_Syntax.varkind * string) -> term * string
    val guess_suffix: string -> string
    val hint_renaming:
       'a Candtab.table ->
         Candtab.key * ('b * 'a) -> Candtab.key * ('b * 'a)
    val insert_vbind_tac: Proof.context -> int -> tactic
    val postprocess_vc_tac: Proof.context -> int -> tactic
    val remove_tac: Proof.context -> int -> tactic
  end
### theory "Draft.IMP2_Var_Postprocessor"
### 0.365s elapsed time, 0.441s cpu time, 0.075s GC time
Loading theory "Draft.IMP2_Var_PostprocessorMoreTemplates"
val templateLemmas =
   [("IMP2_Var_Postprocessor.RENAMINGD", "RENAMING ?s ?d ==> ?s = ?d",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("IMP2_Var_Postprocessor.RENAMINGI",
     "(!!d. RENAMING ?s d ==> ?P) ==> ?P",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.IMP2_Var_PostprocessorMoreTemplates"
### 0.379s elapsed time, 0.495s cpu time, 0.000s GC time
val it = (): unit
