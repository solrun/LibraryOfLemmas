Loading theory "Draft.Monad_Normalisation" (required by "Draft.Monad_Normalisation_TestTemplates" via "Draft.Monad_Normalisation_Test")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Monad_Normalisation_TestTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.Monad_Normalisation_TestTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.077s elapsed time, 0.271s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.105s elapsed time, 0.326s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Monad_Normalisation_TestTemplates" via "Draft.ExtrEqs")
signature MONAD_RULES =
  sig
    val get_distrib_rule: Proof.context -> string -> thm option
    val get_distrib_rules: Context.generic -> thm list
    val get_monad: Proof.context -> string -> info option
    val get_monad_rules: Context.generic -> thm list
    type info =
       {bind_assoc: thm option,
        bind_commute: thm option,
        bind_return: thm option, return_bind: thm option}
  end
structure Monad_Rules: MONAD_RULES
### ML warning (line 28 of "$AFP/Monad_Normalisation/monad_normalisation.ML"):
### Matches are not exhaustive.
signature MONAD_NORMALISATION =
  sig val normalise_step: Proof.context -> cterm -> thm option end
structure Monad_Normalisation: MONAD_NORMALISATION
### theory "Draft.Monad_Normalisation"
### 0.209s elapsed time, 0.562s cpu time, 0.040s GC time
Loading theory "Draft.Monad_Normalisation_Test" (required by "Draft.Monad_Normalisation_TestTemplates")
### theory "Draft.Monad_Normalisation_Test"
### 0.256s elapsed time, 0.515s cpu time, 0.025s GC time
### theory "HOL-Library.BigO"
### 0.571s elapsed time, 0.928s cpu time, 0.025s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Monad_Normalisation_TestTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.490s elapsed time, 0.562s cpu time, 0.102s GC time
Loading theory "Draft.Monad_Normalisation_TestTemplates"
val templateLemmas =
   [("Monad_Normalisation_Test.elgamal_step3",
     "?sample_uniform (?order ?\<G>) >>=
      (%x. ?sample_uniform (?order ?\<G>) >>=
           (%y. coin_spmf >>=
                (%b. ?\<A>1.0 (?f x) >>=
                     (%p. assert_spmf
                           (?valid_plain (fst (fst p)) &
                            ?valid_plain (snd (fst p))) >>=
                          (%_. ?\<A>2.0
                                (?f y,
                                 ?xor (?f (x * y))
                                  (if b then fst (fst p) else snd (fst p)))
                                (snd p) >>=
                               (%guess. return_spmf (guess = b))))))) =
      ?sample_uniform (?order ?\<G>) >>=
      (%y. coin_spmf >>=
           (%b. ?\<A>1.0 (?f y) >>=
                (%p. assert_spmf
                      (?valid_plain (fst (fst p)) &
                       ?valid_plain (snd (fst p))) >>=
                     (%_. ?sample_uniform (?order ?\<G>) >>=
                          (%ya. ?\<A>2.0
                                 (?f ya,
                                  ?xor (?f (y * ya))
                                   (if b then fst (fst p) else snd (fst p)))
                                 (snd p) >>=
                                (%b'. return_spmf (b' = b)))))))",
     template_equation
      (template_app
        (template_app
          (template_hole 17,
           template_app
            (template_var 7,
             template_app (template_var 6, template_var 5))),
         t_empty),
       template_app
        (template_app
          (template_hole 17,
           template_app
            (template_var 7,
             template_app (template_var 6, template_var 5))),
         t_empty)))]:
   (string * thm * template) list
### theory "Draft.Monad_Normalisation_TestTemplates"
### 1.194s elapsed time, 1.502s cpu time, 0.158s GC time
val it = (): unit
