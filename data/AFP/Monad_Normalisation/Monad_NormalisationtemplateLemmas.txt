   [("Monad_Normalisation.monad_rule", "?x >>= Some = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Monad_Normalisation.monad_rule", "?P >>= Predicate.single = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Monad_Normalisation.monad_rule", "?N >>= return_pmf = ?N",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Monad_Normalisation.monad_rule", "Some ?x >>= ?f = ?f ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app (template_var 0, template_var 1))),
    ("Monad_Normalisation.monad_rule", "Predicate.single ?x >>= ?P = ?P ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app (template_var 0, template_var 1))),
    ("Monad_Normalisation.monad_rule", "return_pmf ?x >>= ?f = ?f ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app (template_var 0, template_var 1))),
    ("Monad_Normalisation.set_bind_return", "?A >>= (%x. {x}) = ?A",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), t_empty),
       template_var 0)),
    ("Monad_Normalisation.set_return_bind", "{?x} >>= ?A = ?A ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_var 0),
       template_app (template_var 0, template_var 1))),
    ("Monad_Normalisation.monad_rule", "return_spmf ?x >>= ?f = ?f ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))),
         template_var 0),
       template_app (template_var 0, template_var 1))),
    ("Monad_Normalisation.monad_rule", "?x >>= return_spmf = ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), t_empty),
       template_var 0)),
    ("Monad_Normalisation.monad_rule",
     "?A >>= ?B >>= ?C = ?A >>= (%x. ?B x >>= ?C)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("Monad_Normalisation.monad_rule",
     "?x >>= ?f >>= ?g = ?x >>= (%y. ?f y >>= ?g)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("Monad_Normalisation.monad_rule",
     "?P >>= ?Q >>= ?R = ?P >>= (%x. ?Q x >>= ?R)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("Monad_Normalisation.monad_rule",
     "?A >>= ?B >>= ?C = ?A >>= (%x. ?B x >>= ?C)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("Monad_Normalisation.monad_rule",
     "?x >>= ?f >>= ?g = ?x >>= (%y. ?f y >>= ?g)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("Monad_Normalisation.set_bind_commute",
     "?A >>= (%x. ?B >>= ?C x) = ?B >>= (%y. ?A >>= (%x. ?C x y))",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2), t_empty),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Monad_Normalisation.option_bind_commute",
     "?A >>= (%x. ?B >>= ?C x) = ?B >>= (%y. ?A >>= (%x. ?C x y))",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2), t_empty),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Monad_Normalisation.predicate_bind_commute",
     "?A >>= (%x. ?B >>= ?C x) = ?B >>= (%y. ?A >>= (%x. ?C x y))",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2), t_empty),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Monad_Normalisation.bind_if",
     "?f ?A (%x. if ?P then ?B x else ?C x) =
      (if ?P then ?f ?A ?B else ?f ?A ?C)",
     template_equation
      (template_app
        (template_app (template_var 4, template_var 3), t_empty),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_var 4, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_var 4, template_var 3),
           template_var 0)))),
    ("Monad_Normalisation.bind_case_prod",
     "?f ?A (%x. case ?y of (a, b) => ?B a b x) =
      (case ?y of (a, b) => ?f ?A (?B a b))",
     template_equation
      (template_app
        (template_app (template_var 3, template_var 2), t_empty),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Monad_Normalisation.bind_case_nat",
     "?f ?A (%x. case ?y of 0 => ?B x | Suc n => ?C n x) =
      (case ?y of 0 => ?f ?A ?B | Suc n => ?f ?A (?C n))",
     template_equation
      (template_app
        (template_app (template_var 4, template_var 3), t_empty),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_var 4, template_var 3),
               template_var 2)),
           t_empty),
         template_var 0))),
    ("Monad_Normalisation.bind_case_option",
     "?f ?A (%x. case ?y of None => ?C x | Some a => ?B a x) =
      (case ?y of None => ?f ?A ?C | Some a => ?f ?A (?B a))",
     template_equation
      (template_app
        (template_app (template_var 4, template_var 3), t_empty),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_var 4, template_var 3),
               template_var 2)),
           t_empty),
         template_var 0))),
    ("Monad_Normalisation.bind_case_list",
     "?f ?A (%x. case ?y of [] => ?B x | y # ys => ?C y ys x) =
      (case ?y of [] => ?f ?A ?B | y # ys => ?f ?A (?C y ys))",
     template_equation
      (template_app
        (template_app (template_var 4, template_var 3), t_empty),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_var 4, template_var 3),
               template_var 2)),
           t_empty),
         template_var 0))),
    ("Monad_Normalisation.bind_case_sum",
     "?f ?A (%x. case ?y of Inl a => ?B a x | Inr a => ?C a x) =
      (case ?y of Inl a => ?f ?A (?B a) | Inr a => ?f ?A (?C a))",
     template_equation
      (template_app
        (template_app (template_var 4, template_var 3), t_empty),
       template_app
        (template_app (template_app (template_hole 0, t_empty), t_empty),
         template_var 0)))]
