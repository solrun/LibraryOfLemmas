Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Monad_NormalisationTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.Monad_NormalisationTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Monad_Normalisation" (required by "Draft.Monad_NormalisationTemplates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.086s elapsed time, 0.287s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.130s elapsed time, 0.381s cpu time, 0.040s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Monad_NormalisationTemplates" via "Draft.ExtrEqs")
signature MONAD_RULES =
  sig
    val get_distrib_rule: Proof.context -> string -> thm option
    val get_distrib_rules: Context.generic -> thm list
    val get_monad: Proof.context -> string -> info option
    val get_monad_rules: Context.generic -> thm list
    type info =
       {bind_assoc: thm option,
        bind_commute: thm option,
        bind_return: thm option, return_bind: thm option}
  end
structure Monad_Rules: MONAD_RULES
### ML warning (line 28 of "$AFP/Monad_Normalisation/monad_normalisation.ML"):
### Matches are not exhaustive.
signature MONAD_NORMALISATION =
  sig val normalise_step: Proof.context -> cterm -> thm option end
structure Monad_Normalisation: MONAD_NORMALISATION
### theory "Draft.Monad_Normalisation"
### 0.201s elapsed time, 0.540s cpu time, 0.040s GC time
### theory "HOL-Library.BigO"
### 0.596s elapsed time, 0.717s cpu time, 0.068s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Monad_NormalisationTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.438s elapsed time, 0.439s cpu time, 0.000s GC time
Loading theory "Draft.Monad_NormalisationTemplates"
val templateLemmas =
   [("Monad_Normalisation.monad_rule", "?x >>= Some = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Monad_Normalisation.monad_rule", "?P >>= Predicate.single = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Monad_Normalisation.monad_rule", "?N >>= return_pmf = ?N",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Monad_Normalisation.monad_rule", "Some ?x >>= ?f = ?f ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app (template_var 0, template_var 1))),
    ("Monad_Normalisation.monad_rule", "Predicate.single ?x >>= ?P = ?P ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app (template_var 0, template_var 1))),
    ("Monad_Normalisation.monad_rule", "return_pmf ?x >>= ?f = ?f ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app (template_var 0, template_var 1))),
    ("Monad_Normalisation.set_bind_return", "?A >>= (%x. {x}) = ?A",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), t_empty),
       template_var 0)),
    ("Monad_Normalisation.set_return_bind", "{?x} >>= ?A = ?A ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_var 0),
       template_app (template_var 0, template_var 1))),
    ("Monad_Normalisation.monad_rule", "return_spmf ?x >>= ?f = ?f ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))),
         template_var 0),
       template_app (template_var 0, template_var 1))),
    ("Monad_Normalisation.monad_rule", "?x >>= return_spmf = ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), t_empty),
       template_var 0)),
    ("Monad_Normalisation.monad_rule",
     "?A >>= ?B >>= ?C = ?A >>= (%x. ?B x >>= ?C)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("Monad_Normalisation.monad_rule",
     "?x >>= ?f >>= ?g = ?x >>= (%y. ?f y >>= ?g)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("Monad_Normalisation.monad_rule",
     "?P >>= ?Q >>= ?R = ?P >>= (%x. ?Q x >>= ?R)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("Monad_Normalisation.monad_rule",
     "?A >>= ?B >>= ?C = ?A >>= (%x. ?B x >>= ?C)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("Monad_Normalisation.monad_rule",
     "?x >>= ?f >>= ?g = ?x >>= (%y. ?f y >>= ?g)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("Monad_Normalisation.set_bind_commute",
     "?A >>= (%x. ?B >>= ?C x) = ?B >>= (%y. ?A >>= (%x. ?C x y))",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2), t_empty),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Monad_Normalisation.option_bind_commute",
     "?A >>= (%x. ?B >>= ?C x) = ?B >>= (%y. ?A >>= (%x. ?C x y))",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2), t_empty),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Monad_Normalisation.predicate_bind_commute",
     "?A >>= (%x. ?B >>= ?C x) = ?B >>= (%y. ?A >>= (%x. ?C x y))",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2), t_empty),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Monad_Normalisation.bind_if",
     "?f ?A (%x. if ?P then ?B x else ?C x) =
      (if ?P then ?f ?A ?B else ?f ?A ?C)",
     template_equation
      (template_app
        (template_app (template_var 4, template_var 3), t_empty),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_var 4, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_var 4, template_var 3),
           template_var 0)))),
    ("Monad_Normalisation.bind_case_prod",
     "?f ?A (%x. case ?y of (a, b) => ?B a b x) =
      (case ?y of (a, b) => ?f ?A (?B a b))",
     template_equation
      (template_app
        (template_app (template_var 3, template_var 2), t_empty),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Monad_Normalisation.bind_case_nat",
     "?f ?A (%x. case ?y of 0 => ?B x | Suc n => ?C n x) =
      (case ?y of 0 => ?f ?A ?B | Suc n => ?f ?A (?C n))",
     template_equation
      (template_app
        (template_app (template_var 4, template_var 3), t_empty),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_var 4, template_var 3),
               template_var 2)),
           t_empty),
         template_var 0))),
    ("Monad_Normalisation.bind_case_option",
     "?f ?A (%x. case ?y of None => ?C x | Some a => ?B a x) =
      (case ?y of None => ?f ?A ?C | Some a => ?f ?A (?B a))",
     template_equation
      (template_app
        (template_app (template_var 4, template_var 3), t_empty),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_var 4, template_var 3),
               template_var 2)),
           t_empty),
         template_var 0))),
    ("Monad_Normalisation.bind_case_list",
     "?f ?A (%x. case ?y of [] => ?B x | y # ys => ?C y ys x) =
      (case ?y of [] => ?f ?A ?B | y # ys => ?f ?A (?C y ys))",
     template_equation
      (template_app
        (template_app (template_var 4, template_var 3), t_empty),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_var 4, template_var 3),
               template_var 2)),
           t_empty),
         template_var 0))),
    ("Monad_Normalisation.bind_case_sum",
     "?f ?A (%x. case ?y of Inl a => ?B a x | Inr a => ?C a x) =
      (case ?y of Inl a => ?f ?A (?B a) | Inr a => ?f ?A (?C a))",
     template_equation
      (template_app
        (template_app (template_var 4, template_var 3), t_empty),
       template_app
        (template_app (template_app (template_hole 0, t_empty), t_empty),
         template_var 0)))]:
   (string * thm * template) list
### theory "Draft.Monad_NormalisationTemplates"
### 1.179s elapsed time, 1.506s cpu time, 0.234s GC time
val it = (): unit
