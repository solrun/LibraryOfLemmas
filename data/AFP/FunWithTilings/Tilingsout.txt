Loading theory "Draft.Tilings" (required by "Draft.TilingsMoreTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.TilingsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.TilingsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.TilingsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Proofs for inductive predicate(s) "tilingp"
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
  Proving monotonicity ...
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "dominop"
  Proving monotonicity ...
### theory "HOL-Library.Function_Algebras"
### 0.150s elapsed time, 0.621s cpu time, 0.035s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.TilingsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.Tilings"
### 0.267s elapsed time, 1.089s cpu time, 0.035s GC time
### theory "HOL-Library.Set_Algebras"
### 0.301s elapsed time, 1.206s cpu time, 0.128s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.TilingsMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.330s elapsed time, 1.292s cpu time, 0.128s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.TilingsMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.698s elapsed time, 2.139s cpu time, 0.236s GC time
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.765s elapsed time, 2.239s cpu time, 0.236s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.827s elapsed time, 4.204s cpu time, 0.887s GC time
Loading theory "Draft.Templates" (required by "Draft.TilingsMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.048s elapsed time, 0.062s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.TilingsMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.465s elapsed time, 0.511s cpu time, 0.058s GC time
Loading theory "Draft.TilingsMoreTemplates"
val templateLemmas =
   [("Tilings.pos_pow2", "0 < 2 ^ ?n",
     template_inequation
      (less_than, template_hole 4,
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0))),
         template_var 0))),
    ("Tilings.domino_finite", "?d : domino ==> finite ?d",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Tilings.tilingp_tiling_eq",
     "tilingp (%x. x : ?A) = (%x. x : tiling ?A)",
     template_equation (template_app (template_hole 2, t_empty), t_empty)),
    ("Tilings.DisjI2", "?A Int ?B = {} ==> ?A Int (?B - ?X) = {}",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_hole 1)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_hole 1))),
    ("Tilings.DisjI1", "?A Int ?B = {} ==> (?A - ?X) Int ?B = {}",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_hole 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1),
         template_hole 1))),
    ("Tilings.dominoes_tile_row",
     "{?i} \<times> {0..<2 * ?n} : tiling domino",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app (template_hole 9, template_var 1),
                   template_hole 8)),
               t_empty)),
           template_app (template_hole 1, template_hole 0))
         )),
    ("Tilings.dominoes_tile_matrix",
     "{0..<?m} \<times> {0..<2 * ?n} : tiling domino",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_var 1)),
               t_empty)),
           template_app (template_hole 1, template_hole 0))
         )),
    ("Tilings.tiling_domino_0_1",
     "?t : tiling domino ==> card (whites Int ?t) = card (blacks Int ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app (template_hole 7, template_hole 6))
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1)),
             template_var 0)),
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 0, template_hole 1))),
             template_var 0))))),
    ("Tilings.tiling_finite",
     "[| !!a. a : ?A ==> finite a; ?t : tiling ?A |] ==> finite ?t",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 0, template_var 1))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("Tilings.Sigma_Suc2",
     "?A \<times> {0..<Suc ?n} = ?A \<times> {?n} Un ?A \<times> {0..<?n}",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), t_empty),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 6, template_var 1), t_empty)),
         template_app
          (template_app (template_hole 6, template_var 1), t_empty)))),
    ("Tilings.Sigma_Suc1",
     "{0..<Suc ?n} \<times> ?B = {?n} \<times> ?B Un {0..<?n} \<times> ?B",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_app (template_hole 3, template_var 1))),
         t_empty),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0)),
             t_empty)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_var 1)),
           t_empty)))),
    ("Tilings.Diff_insert_if",
     "[| ?B ~= {}; ?a ~: ?A |] ==> ?A - insert ?a ?B = ?A - ?B",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 3)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 2)))),
    ("Tilings.tiling_Diff1E",
     "[| ?t - ?a : tiling ?A; ?a : ?A; ?a <= ?t |] ==> ?t : tiling ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_app (template_hole 1, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_inequation (less_equals, template_var 1, template_var 2)],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Tilings.LinLs",
     "L0 ?i ?j : Ls & L1 ?i ?j : Ls & L2 ?i ?j : Ls & L3 ?i ?j : Ls",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_var 0)),
               template_hole 3)),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0)),
                 template_hole 3)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_var 0)),
                   template_hole 3)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)),
                 template_hole 3))))
         )),
    ("Tilings.Diff_insert_if",
     "[| ?B ~= {}; ?a : ?A |] ==> ?A - insert ?a ?B = ?A - ?B - {?a}",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_hole 3))))),
    ("Tilings.tiling_UnI",
     "[| ?t : tiling ?A; ?u : tiling ?A; ?t Int ?u = {} |]
      ==> ?t Un ?u : tiling ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 1))
            ),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 0),
          template_hole 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app (template_hole 4, template_var 1))
           ))),
    ("Tilings.coloured_insert",
     "coloured ?b Int insert (?i, ?j) ?t =
      (if (?i + ?j) mod 2 = ?b then insert (?i, ?j) (coloured ?b Int ?t)
       else coloured ?b Int ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 3)),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 3, template_var 2),
                           template_var 1)),
                       template_app
                        (template_hole 2,
                         template_app (template_hole 1, template_hole 0)))),
                   template_var 3)),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 2),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app (template_hole 9, template_var 3)),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 10,
                 template_app (template_hole 9, template_var 3)),
               template_var 0))
           ))),
    ("Tilings.Ls_can_tile00",
     "[| ?a < 2 ^ ?n; ?b < 2 ^ ?n |]
      ==> square2 ?n 0 0 - {(?a, ?b)} : tiling Ls",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app
             (template_hole 12,
              template_app
               (template_hole 11,
                template_app (template_hole 10, template_hole 9))),
            template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 12,
              template_app
               (template_hole 11,
                template_app (template_hole 10, template_hole 9))),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_app (template_hole 6, template_var 1),
                       template_hole 5),
                     template_hole 5)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 2),
                       template_var 0)),
                   template_hole 2))),
             template_app (template_hole 1, template_hole 0))
           ))),
    ("Tilings.domino_singletons",
     "?d : domino ==>
      (EX i j. whites Int ?d = {(i, j)}) &
      (EX m n. blacks Int ?d = {(m, n)})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 0),
              template_hole 10)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9, template_app (template_hole 8, t_empty)),
             template_app (template_hole 8, t_empty))
           ))),
    ("Tilings.in_square2",
     "((?a, ?b) : square2 ?n ?i ?j) =
      (?i <= ?a & ?a < 2 ^ ?n + ?i & ?j <= ?b & ?b < 2 ^ ?n + ?j)",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_var 4),
             template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 8, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 1),
             template_var 4)),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 5, template_var 4),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_hole 2,
                         template_app (template_hole 1, template_hole 0))),
                     template_var 2)),
                 template_var 1))),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_var 3)),
             template_app
              (template_app (template_hole 5, template_var 3),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_hole 2,
                         template_app (template_hole 1, template_hole 0))),
                     template_var 2)),
                 template_var 0))))))),
    ("Tilings.Ls_can_tile",
     "[| ?i <= ?a; ?a < 2 ^ ?n + ?i; ?j <= ?b; ?b < 2 ^ ?n + ?j |]
      ==> square2 ?n ?i ?j - {(?a, ?b)} : tiling Ls",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3),
        template_inequation
         (less_than, template_var 3,
          template_app
           (template_app
             (template_hole 12,
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_hole 10,
                    template_app (template_hole 9, template_hole 8))),
                template_var 2)),
            template_var 4)),
        template_inequation (less_equals, template_var 1, template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 12,
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_hole 10,
                    template_app (template_hole 9, template_hole 8))),
                template_var 2)),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_app (template_hole 5, template_var 2),
                       template_var 4),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 3),
                       template_var 0)),
                   template_hole 2))),
             template_app (template_hole 1, template_hole 0))
           ))),
    ("Tilings.square2_Suc",
     "square2 (Suc ?n) ?i ?j =
      square2 ?n ?i ?j Un square2 ?n (2 ^ ?n + ?i) ?j Un
      square2 ?n ?i (2 ^ ?n + ?j) Un
      square2 ?n (2 ^ ?n + ?i) (2 ^ ?n + ?j)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_app (template_hole 7, template_var 2),
                       template_var 1),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_app (template_hole 7, template_var 2),
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app
                            (template_hole 3,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 1, template_hole 0))),
                           template_var 2)),
                       template_var 1)),
                   template_var 0))),
             template_app
              (template_app
                (template_app (template_hole 7, template_var 2),
                 template_var 1),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_hole 2,
                         template_app (template_hole 1, template_hole 0))),
                     template_var 2)),
                 template_var 0)))),
         template_app
          (template_app
            (template_app (template_hole 7, template_var 2),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_hole 0))),
                   template_var 2)),
               template_var 1)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_hole 0))),
                 template_var 2)),
             template_var 0))))),
    ("Tilings.mutil_not_tiling",
     "?t = {0..<2 * Suc ?m} \<times> {0..<2 * Suc ?n} ==>
      ?t - {(0, 0)} - {(Suc (2 * ?m), Suc (2 * ?n))} ~: tiling domino",
     template_implication
      ([template_equation
         (template_var 2,
          template_app
           (template_app
             (template_hole 15,
              template_app
               (template_app (template_hole 14, template_hole 13),
                template_app
                 (template_app
                   (template_hole 12,
                    template_app
                     (template_hole 11,
                      template_app (template_hole 10, template_hole 9))),
                  template_app (template_hole 8, template_var 1)))),
            t_empty))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 5, template_var 2),
                         template_app
                          (template_app
                            (template_hole 4,
                             template_app
                              (template_app
                                (template_hole 3, template_hole 13),
                               template_hole 13)),
                           template_hole 2))),
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app
                            (template_hole 3,
                             template_app
                              (template_hole 8,
                               template_app
                                (template_app
                                  (template_hole 12,
                                   template_app
                                    (template_hole 11,
                                     template_app
(template_hole 10, template_hole 9))),
                                 template_var 1))),
                           template_app
                            (template_hole 8,
                             template_app
                              (template_app
                                (template_hole 12,
                                 template_app
                                  (template_hole 11,
                                   template_app
                                    (template_hole 10, template_hole 9))),
                               template_var 0)))),
                       template_hole 2))),
                 template_app (template_hole 1, template_hole 0))
               )
           ))),
    ("Tilings.square2_disj",
     "(square2 ?n ?i ?j Int square2 ?n ?x ?y = {}) =
      ((2 ^ ?n + ?i <= ?x | 2 ^ ?n + ?x <= ?i) |
       2 ^ ?n + ?j <= ?y | 2 ^ ?n + ?y <= ?j)",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_app (template_hole 8, template_var 4),
                   template_var 3),
                 template_var 2)),
             template_app
              (template_app
                (template_app (template_hole 8, template_var 4),
                 template_var 1),
               template_var 0))),
         template_hole 7),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_hole 3,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 1, template_hole 0))),
                         template_var 4)),
                     template_var 3)),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 1, template_hole 0))),
                       template_var 4)),
                   template_var 1)),
               template_var 3))),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 1, template_hole 0))),
                       template_var 4)),
                   template_var 2)),
               template_var 0)),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_hole 2,
                         template_app (template_hole 1, template_hole 0))),
                     template_var 4)),
                 template_var 0)),
             template_var 2))))),
    ("Tilings.gen_mutil_not_tiling",
     "[| ?t : tiling domino; (?i + ?j) mod 2 = 0; (?m + ?n) mod 2 = 0;
         {(?i, ?j), (?m, ?n)} <= ?t |]
      ==> ?t - {(?i, ?j)} - {(?m, ?n)} ~: tiling domino",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 4),
              template_app (template_hole 14, template_hole 13))
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 11,
              template_app
               (template_app (template_hole 10, template_var 3),
                template_var 2)),
            template_app
             (template_hole 9,
              template_app (template_hole 8, template_hole 7))),
          template_hole 6),
        template_equation
         (template_app
           (template_app
             (template_hole 11,
              template_app
               (template_app (template_hole 10, template_var 1),
                template_var 0)),
            template_app
             (template_hole 9,
              template_app (template_hole 8, template_hole 7))),
          template_hole 6),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2)),
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)),
              template_hole 2)),
          template_var 4)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 15,
                   template_app
                    (template_app
                      (template_hole 0,
                       template_app
                        (template_app (template_hole 0, template_var 4),
                         template_app
                          (template_app
                            (template_hole 4,
                             template_app
                              (template_app
                                (template_hole 3, template_var 3),
                               template_var 2)),
                           template_hole 2))),
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 3, template_var 1),
                           template_var 0)),
                       template_hole 2))),
                 template_app (template_hole 14, template_hole 13))
               )
           )))]:
   (string * thm * template) list
### theory "Draft.TilingsMoreTemplates"
### 0.267s elapsed time, 0.349s cpu time, 0.000s GC time
val it = (): unit
