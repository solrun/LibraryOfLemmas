   [("Confine.confine_UNIV", "confine ?f UNIV = ?f",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Confine.sums_confine_minus",
     "confine ?f ?N sums ?a ==> confine (uminus o ?f) ?N sums - ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_hole 0),
                     template_var 2)),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Confine.sum_confine_eq_Int",
     "finite ?I ==> sum (confine ?f ?A) ?I = sum ?f (?I Int ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Confine.sums_confine_divide",
     "confine ?f ?N sums ?a ==> confine (%n. ?f n / ?c) ?N sums (?a / ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, t_empty), template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Confine.sums_confine_mult",
     "confine ?f ?N sums ?a ==> confine (%n. ?c * ?f n) ?N sums (?c * ?a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, t_empty), template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Confine.sums_confine_le",
     "confine ?f ?N sums ?l =
      (%n. sum ?f ({..n} Int ?N)) \<longlonglongrightarrow> ?l",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 5, t_empty),
           template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Confine.sums_confine",
     "confine ?f ?N sums ?l =
      (%n. sum ?f ({..<n} Int ?N)) \<longlonglongrightarrow> ?l",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 5, t_empty),
           template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Confine.sums_confine_divide_iff",
     "?c ~= (0::?'a) ==>
      confine (%n. ?f n / ?c) ?N sums (?a / ?c) = confine ?f ?N sums ?a",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 3)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Confine.sums_confine_add",
     "[| confine ?f ?N sums ?a; confine ?g ?N sums ?b |]
      ==> confine (%i. ?f i + ?g i) ?N sums (?a + ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 3)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, t_empty), template_var 3)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           )))]
