   [("Efficient_Sort.ascP_Cons", "ascP ((#) ?x)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Efficient_Sort.sort_key_msort_key_conv",
     "sort_key ?key = msort_key ?key",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Efficient_Sort.mset_msort_key",
     "mset (msort_key ?key ?xs) = mset ?xs",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Efficient_Sort.sorted_msort_key",
     "sorted (map ?key (msort_key ?key ?xs))",
     template_predicate
      (
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))
         )),
    ("Efficient_Sort.length_sequences",
     "length (sequences ?key ?xs) <= length ?xs",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Efficient_Sort.ascP_comp_append_Cons", "ascP (%xs. ?f [] @ ?x # xs)",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("Efficient_Sort.set_merge_all",
     "set (merge_all ?key ?xs) = set (concat ?xs)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_hole 2, template_app (template_hole 0, template_var 0)))),
    ("Efficient_Sort.mset_merge_all",
     "mset (merge_all ?key ?xs) = mset (concat ?xs)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_hole 2, template_app (template_hole 0, template_var 0)))),
    ("Efficient_Sort.mset_seqeuences",
     "mset (concat (sequences ?key ?xs)) = mset ?xs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app (template_hole 2, template_var 0))),
    ("Efficient_Sort.length_concat_merge_pairs",
     "length (concat (merge_pairs ?key ?xss)) = length (concat ?xss)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)))),
    ("Efficient_Sort.set_concat_merge_pairs",
     "set (concat (merge_pairs ?key ?xs)) = set (concat ?xs)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)))),
    ("Efficient_Sort.mset_concat_merge_pairs",
     "mset (concat (merge_pairs ?key ?xs)) = mset (concat ?xs)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)))),
    ("Efficient_Sort.ascP_comp_Cons",
     "ascP ?f ==> ascP (%ys. ?f (?x # ys))",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Efficient_Sort.length_merge",
     "length (merge ?key ?xs ?ys) = length ?xs + length ?ys",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Efficient_Sort.set_merge",
     "set (merge ?key ?xs ?ys) = set ?xs Un set ?ys",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Efficient_Sort.mset_merge",
     "mset (merge ?key ?xs ?ys) = mset ?xs + mset ?ys",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Efficient_Sort.length_desc",
     "length (desc ?key ?a ?xs ?ys) <= 1 + length ?ys",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("Efficient_Sort.sorted_sequences",
     "ALL x:set (sequences ?key ?xs). sorted (map ?key x)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0))),
           t_empty)
         )),
    ("Efficient_Sort.length_merge_pairs",
     "length (merge_pairs ?key ?xs) = (1 + length ?xs) div 2",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app (template_hole 7, template_var 0))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Efficient_Sort.length_asc",
     "ascP ?f ==> length (asc ?key ?a ?f ?ys) <= 1 + length ?ys",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 3))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1),
               template_var 3),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))))),
    ("Efficient_Sort.ascP_f_singleton",
     "ascP ?f ==> ?f [?x] = ?f [] @ [?x]",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_var 1,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_var 1, template_hole 1)),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1))))),
    ("Efficient_Sort.ascP_f_Cons",
     "ascP ?f ==> ?f (?x # ?xs) = ?f [] @ ?x # ?xs",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_var 2,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_var 2, template_hole 0)),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))))),
    ("Efficient_Sort.msort_key_stable",
     "filter (%x. ?key x = ?k) (msort_key ?key ?xs) =
      filter (%x. ?key x = ?k) ?xs",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 2, t_empty), template_var 0))),
    ("Efficient_Sort.mset_desc",
     "mset (concat (desc ?key ?x ?xs ?ys)) = {#?x#} + mset ?xs + mset ?ys",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_hole 0)),
             template_app (template_hole 5, template_var 1))),
         template_app (template_hole 5, template_var 0)))),
    ("Efficient_Sort.filter_by_key_sequences",
     "filter (%y. ?key y = ?k) (concat (sequences ?key ?xs)) =
      filter (%y. ?key y = ?k) ?xs",
     template_equation
      (template_app
        (template_app (template_hole 3, t_empty),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))),
       template_app
        (template_app (template_hole 3, t_empty), template_var 0))),
    ("Efficient_Sort.sorted_merge_all",
     "ALL x:set ?xs. sorted (map ?key x) ==>
      sorted (map ?key (merge_all ?key ?xs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Efficient_Sort.filter_by_key_merge_all_sequences",
     "filter (%x. ?key x = ?k) (merge_all ?key (sequences ?key ?xs)) =
      filter (%x. ?key x = ?k) ?xs",
     template_equation
      (template_app
        (template_app (template_hole 3, t_empty),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))),
       template_app
        (template_app (template_hole 3, t_empty), template_var 0))),
    ("Efficient_Sort.mset_asc",
     "ascP ?f ==>
      mset (concat (asc ?key ?x ?f ?ys)) =
      {#?x#} + mset (?f []) + mset ?ys",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 3))],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 1),
                 template_var 3),
               template_var 0))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 1)),
               template_app
                (template_hole 6,
                 template_app (template_var 3, template_hole 0)))),
           template_app (template_hole 6, template_var 0))))),
    ("Efficient_Sort.sorted_merge_pairs",
     "ALL x:set ?xs. sorted (map ?key x) ==>
      ALL x:set (merge_pairs ?key ?xs). sorted (map ?key x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1))),
             t_empty)
           ))),
    ("Efficient_Sort.sorted_merge",
     "[| sorted (map ?key ?xs); sorted (map ?key ?ys) |]
      ==> sorted (map ?key (merge ?key ?xs ?ys))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 0)))
           ))),
    ("Efficient_Sort.filter_by_key_asc",
     "ascP ?f ==>
      filter (%y. ?key y = ?k) (concat (asc ?key ?a ?f ?ys)) =
      filter (%y. ?key y = ?k) (?f [?a] @ ?ys)",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 4))],
       template_equation
        (template_app
          (template_app (template_hole 6, t_empty),
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 3),
                   template_var 1),
                 template_var 4),
               template_var 0))),
         template_app
          (template_app (template_hole 6, t_empty),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_var 4,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 0))),
             template_var 0))))),
    ("Efficient_Sort.filter_by_key_merge_all",
     "ALL xs:set ?xss. sorted (map ?key xs) ==>
      filter (%y. ?key y = ?k) (merge_all ?key ?xss) =
      filter (%y. ?key y = ?k) (concat ?xss)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 2)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, t_empty),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2)),
         template_app
          (template_app (template_hole 3, t_empty),
           template_app (template_hole 0, template_var 2))))),
    ("Efficient_Sort.filter_by_key_merge_pairs",
     "ALL xs:set ?xss. sorted (map ?key xs) ==>
      filter (%y. ?key y = ?k) (concat (merge_pairs ?key ?xss)) =
      filter (%y. ?key y = ?k) (concat ?xss)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 2)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, t_empty),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2))),
         template_app
          (template_app (template_hole 3, t_empty),
           template_app (template_hole 1, template_var 2))))),
    ("Efficient_Sort.sorted_desc",
     "[| sorted (map ?key ?xs); ALL x:set ?xs. ?key ?a <= ?key x |]
      ==> ALL x:set (desc ?key ?a ?xs ?ys). sorted (map ?key x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 2)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 1),
                     template_var 2),
                   template_var 0))),
             t_empty)
           ))),
    ("Efficient_Sort.filter_by_key_merge_is_append",
     "sorted (map ?key ?xs) ==>
      filter (%y. ?key y = ?k) (merge ?key ?xs ?ys) =
      filter (%y. ?key y = ?k) ?xs @ filter (%y. ?key y = ?k) ?ys",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2))
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, t_empty),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 3, t_empty), template_var 2)),
           template_app
            (template_app (template_hole 3, t_empty), template_var 0))))),
    ("Efficient_Sort.sorted_asc",
     "[| ascP ?f; sorted (map ?key (?f []));
         ALL x:set (?f []). ?key x <= ?key ?a |]
      ==> ALL x:set (asc ?key ?a ?f ?ys). sorted (map ?key x)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_hole 7),
              template_app
               (template_app (template_hole 6, template_var 2),
                template_app (template_var 3, template_hole 5)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_hole 3,
                  template_app (template_var 3, template_hole 5))),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 1),
                     template_var 3),
                   template_var 0))),
             t_empty)
           ))),
    ("Efficient_Sort.filter_by_key_desc",
     "[| sorted (map ?key ?xs); ALL x:set ?xs. ?key ?a <= ?key x |]
      ==> filter (%y. ?key y = ?k) (concat (desc ?key ?a ?xs ?ys)) =
          filter (%y. ?key y = ?k) (?a # ?xs @ ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_hole 10),
              template_app
               (template_app (template_hole 9, template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 3)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 5, t_empty),
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 4),
                   template_var 2),
                 template_var 3),
               template_var 0))),
         template_app
          (template_app (template_hole 5, t_empty),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0))))))]
