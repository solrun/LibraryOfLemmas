Loading theory "Draft.Basic_Extensions" (required by "Draft.Ample_AbstractTemplates" via "Draft.Ample_Abstract" via "Draft.Transition_System_Interpreted_Traces" via "Draft.Transition_System_Traces" via "Draft.Transition_System_Extensions" via "Draft.Relation_Extensions")
Loading theory "Draft.Set_Extensions" (required by "Draft.Ample_AbstractTemplates" via "Draft.Ample_Abstract" via "Draft.Transition_System_Interpreted_Traces" via "Draft.Transition_System_Traces" via "Draft.Transition_System_Extensions")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Ample_AbstractTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Ample_AbstractTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### Ignoring duplicate rewrite rule:
### 0 : Suc ` ?A1 == False
### theory "HOL-Library.Function_Algebras"
### 0.140s elapsed time, 0.549s cpu time, 0.048s GC time
Loading theory "Draft.List_Extensions" (required by "Draft.Ample_AbstractTemplates" via "Draft.Ample_Abstract" via "Draft.Transition_System_Interpreted_Traces" via "Draft.Transition_System_Traces" via "Draft.Transition_System_Extensions" via "Draft.Word_Prefixes")
### theory "Draft.Set_Extensions"
### 0.171s elapsed time, 0.675s cpu time, 0.048s GC time
Loading theory "Draft.Functions" (required by "Draft.Ample_AbstractTemplates" via "Draft.Ample_Abstract" via "Draft.Transition_System_Interpreted_Traces" via "Draft.Stuttering" via "Draft.LList_Prefixes" via "Draft.Coinductive_List_Extensions" via "Draft.ESet_Extensions")
### theory "Draft.List_Extensions"
### 0.063s elapsed time, 0.250s cpu time, 0.000s GC time
Loading theory "Draft.List_Prefixes" (required by "Draft.Ample_AbstractTemplates" via "Draft.Ample_Abstract" via "Draft.Transition_System_Interpreted_Traces" via "Draft.Transition_System_Traces" via "Draft.Transition_System_Extensions" via "Draft.Word_Prefixes")
locale bounded_function
  fixes A :: "'a set"
    and B :: "'b set"
    and f :: "'a => 'b"
  assumes "bounded_function A B f"
locale bounded_function_pair
  fixes A :: "'a set"
    and B :: "'b set"
    and f :: "'a => 'b"
    and g :: "'b => 'a"
  assumes "bounded_function_pair A B f g"
locale injection
  fixes A :: "'a set"
    and B :: "'b set"
    and f :: "'a => 'b"
    and g :: "'b => 'a"
  assumes "injection A B f g"
### theory "Draft.List_Prefixes"
### 0.039s elapsed time, 0.157s cpu time, 0.000s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Ample_AbstractTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
locale injective
  fixes A :: "'a set"
    and B :: "'b set"
    and f :: "'a => 'b"
  assumes "injective A B f"
### theory "HOL-Library.Set_Algebras"
### 0.290s elapsed time, 1.105s cpu time, 0.161s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Ample_AbstractTemplates" via "Draft.ExtrEqs")
locale surjection
  fixes A :: "'a set"
    and B :: "'b set"
    and f :: "'a => 'b"
    and g :: "'b => 'a"
  assumes "surjection A B f g"
locale surjective
  fixes A :: "'a set"
    and B :: "'b set"
    and f :: "'a => 'b"
  assumes "surjective A B f"
locale Functions.bijection
  fixes A :: "'a set"
    and B :: "'b set"
    and f :: "'a => 'b"
    and g :: "'b => 'a"
  assumes "Functions.bijection A B f g"
### theory "Draft.Basic_Extensions"
### 0.339s elapsed time, 1.305s cpu time, 0.161s GC time
Loading theory "Draft.Relation_Extensions" (required by "Draft.Ample_AbstractTemplates" via "Draft.Ample_Abstract" via "Draft.Transition_System_Interpreted_Traces" via "Draft.Transition_System_Traces" via "Draft.Transition_System_Extensions")
### theory "Draft.Functions"
### 0.169s elapsed time, 0.631s cpu time, 0.112s GC time
Loading theory "Draft.ENat_Extensions" (required by "Draft.Ample_AbstractTemplates" via "Draft.Ample_Abstract" via "Draft.Transition_System_Interpreted_Traces" via "Draft.Stuttering" via "Draft.LList_Prefixes" via "Draft.Coinductive_List_Extensions" via "Draft.ESet_Extensions" via "Draft.CCPO_Extensions")
### theory "Draft.ENat_Extensions"
### 0.040s elapsed time, 0.163s cpu time, 0.000s GC time
Loading theory "Draft.CCPO_Extensions" (required by "Draft.Ample_AbstractTemplates" via "Draft.Ample_Abstract" via "Draft.Transition_System_Interpreted_Traces" via "Draft.Stuttering" via "Draft.LList_Prefixes" via "Draft.Coinductive_List_Extensions" via "Draft.ESet_Extensions")
locale wellfounded_relation
  fixes R :: "'a => 'a => bool"
  assumes "wellfounded_relation R"
### theory "Draft.Relation_Extensions"
### 0.077s elapsed time, 0.315s cpu time, 0.000s GC time
Loading theory "Draft.Word_Prefixes" (required by "Draft.Ample_AbstractTemplates" via "Draft.Ample_Abstract" via "Draft.Transition_System_Interpreted_Traces" via "Draft.Transition_System_Traces" via "Draft.Transition_System_Extensions")
class esize = type +
  fixes esize :: "'a => enat"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
### theory "Draft.Word_Prefixes"
### 0.433s elapsed time, 1.639s cpu time, 0.226s GC time
Loading theory "Draft.Traces" (required by "Draft.Ample_AbstractTemplates" via "Draft.Ample_Abstract" via "Draft.Transition_System_Interpreted_Traces" via "Draft.Transition_System_Traces")
Found termination order: "size <*mlex*> {}"
locale traces
  fixes ind :: "'item => 'item => bool"
  assumes "traces ind"
Proofs for inductive predicate(s) "eq_swap"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
class esize_order = esize + order +
  assumes
    "esize_finite": "!!x. esize x ~= \<infinity> ==> finite {y. y <= x}"
  assumes "esize_mono": "!!x y. x <= y ==> esize x <= esize y"
  assumes
    "esize_strict_mono":
      "!!x y. [| esize x ~= \<infinity>; x < y |] ==> esize x < esize y"
### theory "HOL-Library.BigO"
### 0.924s elapsed time, 3.438s cpu time, 0.774s GC time
Loading theory "Draft.Transition_System_Extensions" (required by "Draft.Ample_AbstractTemplates" via "Draft.Ample_Abstract" via "Draft.Transition_System_Interpreted_Traces" via "Draft.Transition_System_Traces")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Traces"
### 0.552s elapsed time, 2.004s cpu time, 0.597s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.CCPO_Extensions"
### 1.140s elapsed time, 4.166s cpu time, 0.823s GC time
Loading theory "Draft.ESet_Extensions" (required by "Draft.Ample_AbstractTemplates" via "Draft.Ample_Abstract" via "Draft.Transition_System_Interpreted_Traces" via "Draft.Stuttering" via "Draft.LList_Prefixes" via "Draft.Coinductive_List_Extensions")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (type) esize_ccpo
  esize_set == esize :: 'a set => enat
locale transition_system_initial
  fixes execute :: "'transition => 'state => 'state"
    and enabled :: "'transition => 'state => bool"
    and initial :: "'state => bool"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "executablep"
  Proving monotonicity ...
consts
  nth_least :: "'a set => nat => 'a"
locale transition_system_interpreted
  fixes ex :: "'action => 'state => 'state"
    and en :: "'action => 'state => bool"
    and int :: "'state => 'interpretation"
locale transition_system_complete
  fixes ex :: "'action => 'state => 'state"
    and en :: "'action => 'state => bool"
    and init :: "'state => bool"
    and int :: "'state => 'interpretation"
### theory "HOL-Library.Tree"
### 2.267s elapsed time, 7.686s cpu time, 1.914s GC time
Loading theory "Draft.Templates" (required by "Draft.Ample_AbstractTemplates" via "Draft.ExtrEqs")
### theory "Draft.ESet_Extensions"
### 0.996s elapsed time, 3.038s cpu time, 0.978s GC time
Loading theory "Draft.Coinductive_List_Extensions" (required by "Draft.Ample_AbstractTemplates" via "Draft.Ample_Abstract" via "Draft.Transition_System_Interpreted_Traces" via "Draft.Stuttering" via "Draft.LList_Prefixes")
locale transition_system_finite_nodes
  fixes ex :: "'action => 'state => 'state"
    and en :: "'action => 'state => bool"
    and init :: "'state => bool"
  assumes "transition_system_finite_nodes ex en init"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.080s elapsed time, 0.267s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Ample_AbstractTemplates")
locale transition_system_cut
  fixes ex :: "'action => 'state => 'state"
    and en :: "'action => 'state => bool"
    and init :: "'state => bool"
    and cuts :: "'action set"
  assumes "transition_system_cut ex en init cuts"
Proofs for inductive predicate(s) "scut"
  Proving monotonicity ...
locale transition_system_sticky
  fixes ex :: "'action => 'state => 'state"
    and en :: "'action => 'state => bool"
    and init :: "'state => bool"
    and int :: "'state => 'interpretation"
    and sticky :: "'action set"
  assumes "transition_system_sticky ex en init int sticky"
### theory "Draft.Transition_System_Extensions"
### 1.539s elapsed time, 4.857s cpu time, 1.115s GC time
Loading theory "Draft.Transition_System_Traces" (required by "Draft.Ample_AbstractTemplates" via "Draft.Ample_Abstract" via "Draft.Transition_System_Interpreted_Traces")
locale transition_system_traces
  fixes ex :: "'action => 'state => 'state"
    and en :: "'action => 'state => bool"
    and ind :: "'action => 'action => bool"
  assumes "transition_system_traces ex en ind"
### theory "Draft.Transition_System_Traces"
### 0.394s elapsed time, 1.173s cpu time, 0.070s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.593s elapsed time, 1.752s cpu time, 0.158s GC time
consts
  lscan :: "('a => 'b => 'b) => 'a llist => 'b => 'b llist"
instantiation
  llist :: (type) esize_order
  esize_llist == esize :: 'a llist => enat
### theory "Draft.Coinductive_List_Extensions"
### 1.032s elapsed time, 2.386s cpu time, 0.242s GC time
Loading theory "Draft.LList_Prefixes" (required by "Draft.Ample_AbstractTemplates" via "Draft.Ample_Abstract" via "Draft.Transition_System_Interpreted_Traces" via "Draft.Stuttering")
### theory "Draft.LList_Prefixes"
### 0.424s elapsed time, 0.525s cpu time, 0.142s GC time
Loading theory "Draft.Stuttering" (required by "Draft.Ample_AbstractTemplates" via "Draft.Ample_Abstract" via "Draft.Transition_System_Interpreted_Traces")
### Ambiguous input (line 188 of "$AFP/Partial_Order_Reduction/Basics/Stuttering.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" stutter_sampler)
###     ("_cargs"
###       ("\<^const>Omega_Words_Fun.build" ("\<^const>Groups.zero_class.zero")
###         ("\<^const>Fun.comp" ("_position" Suc) ("_position" f)))
###       ("\<^const>Stream.stream.SCons" ("_position" a) ("_position" w)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" stutter_sampler)
###     ("_cargs"
###       ("\<^const>Stream.stream.SCons" ("\<^const>Groups.zero_class.zero")
###         ("\<^const>Fun.comp" ("_position" Suc) ("_position" f)))
###       ("\<^const>Stream.stream.SCons" ("_position" a) ("_position" w)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" stutter_sampler)
###     ("_cargs"
###       ("\<^const>Omega_Words_Fun.build" ("\<^const>Groups.zero_class.zero")
###         ("\<^const>Fun.comp" ("_position" Suc) ("_position" f)))
###       ("\<^const>Omega_Words_Fun.build" ("_position" a) ("_position" w)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" stutter_sampler)
###     ("_cargs"
###       ("\<^const>Stream.stream.SCons" ("\<^const>Groups.zero_class.zero")
###         ("\<^const>Fun.comp" ("_position" Suc) ("_position" f)))
###       ("\<^const>Omega_Words_Fun.build" ("_position" a) ("_position" w)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 206 of "$AFP/Partial_Order_Reduction/Basics/Stuttering.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.stutter_equiv"
###     ("\<^const>Omega_Words_Fun.build" ("_position" a) ("_position" u))
###     ("\<^const>Omega_Words_Fun.build" ("_position" a) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.stutter_equiv"
###     ("\<^const>Stream.stream.SCons" ("_position" a) ("_position" u))
###     ("\<^const>Omega_Words_Fun.build" ("_position" a) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.stutter_equiv"
###     ("\<^const>Omega_Words_Fun.build" ("_position" a) ("_position" u))
###     ("\<^const>Stream.stream.SCons" ("_position" a) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.stutter_equiv"
###     ("\<^const>Stream.stream.SCons" ("_position" a) ("_position" u))
###     ("\<^const>Stream.stream.SCons" ("_position" a) ("_position" v))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 222 of "$AFP/Partial_Order_Reduction/Basics/Stuttering.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.stutter_equiv"
###     ("\<^const>Omega_Words_Fun.build"
###       ("_applC" ("_position" w) ("\<^const>Groups.zero_class.zero"))
###       ("_position" w))
###     ("_position" w)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.stutter_equiv"
###     ("\<^const>Stream.stream.SCons"
###       ("_applC" ("_position" w) ("\<^const>Groups.zero_class.zero"))
###       ("_position" w))
###     ("_position" w)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Stuttering"
### 0.778s elapsed time, 1.535s cpu time, 1.035s GC time
Loading theory "Draft.Transition_System_Interpreted_Traces" (required by "Draft.Ample_AbstractTemplates" via "Draft.Ample_Abstract")
locale transition_system_interpreted_traces
  fixes ex :: "'action => 'state => 'state"
    and en :: "'action => 'state => bool"
    and int :: "'state => 'interpretation"
    and ind :: "'action => 'action => bool"
  assumes "transition_system_interpreted_traces ex en int ind"
### Ambiguous input (line 68 of "$AFP/Partial_Order_Reduction/Transition_System_Interpreted_Traces.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" stutter_selection)
###     ("_cargs"
###       ("_applC" ("_position" lift)
###         ("_applC" ("_position" liset)
###           ("_cargs" ("_position" visible)
###             ("_applC" ("_position" llist_of_stream) ("_position" u)))))
###       ("_applC" ("_position" llist_of_stream)
###         ("_applC" ("_position" smap)
###           ("_cargs" ("_position" int)
###             ("\<^const>Omega_Words_Fun.build" ("_position" p)
###               ("_applC" ("_position" trace)
###                 ("_cargs" ("_position" u) ("_position" p))))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" stutter_selection)
###     ("_cargs"
###       ("_applC" ("_position" lift)
###         ("_applC" ("_position" liset)
###           ("_cargs" ("_position" visible)
###             ("_applC" ("_position" llist_of_stream) ("_position" u)))))
###       ("_applC" ("_position" llist_of_stream)
###         ("_applC" ("_position" smap)
###           ("_cargs" ("_position" int)
###             ("\<^const>Stream.stream.SCons" ("_position" p)
###               ("_applC" ("_position" trace)
###                 ("_cargs" ("_position" u) ("_position" p))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 155 of "$AFP/Partial_Order_Reduction/Transition_System_Interpreted_Traces.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.stutter_equiv"
###     ("_applC" ("_position" snth)
###       ("_applC" ("_position" smap)
###         ("_cargs" ("_position" int)
###           ("\<^const>Stream.stream.SCons" ("_position" q)
###             ("_applC" ("_position" trace)
###               ("_cargs" ("_position" u) ("_position" q)))))))
###     ("_applC" ("_position" snth)
###       ("_applC" ("_position" smap)
###         ("_cargs" ("_position" int)
###           ("\<^const>Stream.stream.SCons" ("_position" q)
###             ("_applC" ("_position" trace)
###               ("_cargs" ("_position" v) ("_position" q)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.stutter_equiv"
###     ("_applC" ("_position" snth)
###       ("_applC" ("_position" smap)
###         ("_cargs" ("_position" int)
###           ("\<^const>Omega_Words_Fun.build" ("_position" q)
###             ("_applC" ("_position" trace)
###               ("_cargs" ("_position" u) ("_position" q)))))))
###     ("_applC" ("_position" snth)
###       ("_applC" ("_position" smap)
###         ("_cargs" ("_position" int)
###           ("\<^const>Stream.stream.SCons" ("_position" q)
###             ("_applC" ("_position" trace)
###               ("_cargs" ("_position" v) ("_position" q)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.stutter_equiv"
###     ("_applC" ("_position" snth)
###       ("_applC" ("_position" smap)
###         ("_cargs" ("_position" int)
###           ("\<^const>Stream.stream.SCons" ("_position" q)
###             ("_applC" ("_position" trace)
###               ("_cargs" ("_position" u) ("_position" q)))))))
###     ("_applC" ("_position" snth)
###       ("_applC" ("_position" smap)
###         ("_cargs" ("_position" int)
###           ("\<^const>Omega_Words_Fun.build" ("_position" q)
###             ("_applC" ("_position" trace)
###               ("_cargs" ("_position" v) ("_position" q)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.stutter_equiv"
###     ("_applC" ("_position" snth)
###       ("_applC" ("_position" smap)
###         ("_cargs" ("_position" int)
###           ("\<^const>Omega_Words_Fun.build" ("_position" q)
###             ("_applC" ("_position" trace)
###               ("_cargs" ("_position" u) ("_position" q)))))))
###     ("_applC" ("_position" snth)
###       ("_applC" ("_position" smap)
###         ("_cargs" ("_position" int)
###           ("\<^const>Omega_Words_Fun.build" ("_position" q)
###             ("_applC" ("_position" trace)
###               ("_cargs" ("_position" v) ("_position" q)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Transition_System_Interpreted_Traces"
### 0.424s elapsed time, 0.424s cpu time, 0.000s GC time
Loading theory "Draft.Ample_Abstract" (required by "Draft.Ample_AbstractTemplates")
locale ample_base
  fixes ex :: "'action => 'state => 'state"
    and en :: "'action => 'state => bool"
    and int :: "'state => 'interpretation"
    and ind :: "'action => 'action => bool"
    and src :: "'state => 'state => bool"
  assumes "ample_base ex en int ind src"
locale ample_abstract
  fixes ex :: "'action => 'state => 'state"
    and en :: "'action => 'state => bool"
    and init :: "'state => bool"
    and int :: "'state => 'interpretation"
    and ind :: "'action => 'action => bool"
    and src :: "'state => 'state => bool"
    and ren :: "'action => 'state => bool"
  assumes "ample_abstract ex en init int ind src ren"
Proofs for inductive predicate(s) "reduced_run"
  Proving monotonicity ...
### Ambiguous input (line 657 of "$AFP/Partial_Order_Reduction/Ample_Abstract.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.stutter_equiv"
###     ("_applC" ("_position" snth)
###       ("_applC" ("_position" smap)
###         ("_cargs" ("_position" int)
###           ("\<^const>Stream.stream.SCons" ("_position" q)
###             ("_applC" ("_position" trace)
###               ("_cargs" ("_position" u) ("_position" q)))))))
###     ("_applC" ("_position" snth)
###       ("_applC" ("_position" smap)
###         ("_cargs" ("_position" int)
###           ("\<^const>Stream.stream.SCons" ("_position" q)
###             ("_applC" ("_position" trace)
###               ("_cargs" ("_position" v) ("_position" q)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.stutter_equiv"
###     ("_applC" ("_position" snth)
###       ("_applC" ("_position" smap)
###         ("_cargs" ("_position" int)
###           ("\<^const>Omega_Words_Fun.build" ("_position" q)
###             ("_applC" ("_position" trace)
###               ("_cargs" ("_position" u) ("_position" q)))))))
###     ("_applC" ("_position" snth)
###       ("_applC" ("_position" smap)
###         ("_cargs" ("_position" int)
###           ("\<^const>Stream.stream.SCons" ("_position" q)
###             ("_applC" ("_position" trace)
###               ("_cargs" ("_position" v) ("_position" q)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.stutter_equiv"
###     ("_applC" ("_position" snth)
###       ("_applC" ("_position" smap)
###         ("_cargs" ("_position" int)
###           ("\<^const>Stream.stream.SCons" ("_position" q)
###             ("_applC" ("_position" trace)
###               ("_cargs" ("_position" u) ("_position" q)))))))
###     ("_applC" ("_position" snth)
###       ("_applC" ("_position" smap)
###         ("_cargs" ("_position" int)
###           ("\<^const>Omega_Words_Fun.build" ("_position" q)
###             ("_applC" ("_position" trace)
###               ("_cargs" ("_position" v) ("_position" q)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.stutter_equiv"
###     ("_applC" ("_position" snth)
###       ("_applC" ("_position" smap)
###         ("_cargs" ("_position" int)
###           ("\<^const>Omega_Words_Fun.build" ("_position" q)
###             ("_applC" ("_position" trace)
###               ("_cargs" ("_position" u) ("_position" q)))))))
###     ("_applC" ("_position" snth)
###       ("_applC" ("_position" smap)
###         ("_cargs" ("_position" int)
###           ("\<^const>Omega_Words_Fun.build" ("_position" q)
###             ("_applC" ("_position" trace)
###               ("_cargs" ("_position" v) ("_position" q)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Ample_Abstract"
### 0.495s elapsed time, 0.550s cpu time, 0.080s GC time
Loading theory "Draft.Ample_AbstractTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Ample_AbstractTemplates"
### 0.435s elapsed time, 0.584s cpu time, 0.063s GC time
val it = (): unit
