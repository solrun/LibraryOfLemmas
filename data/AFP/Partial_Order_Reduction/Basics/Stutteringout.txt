Loading theory "Draft.Set_Extensions" (required by "Draft.StutteringTemplates" via "Draft.Stuttering" via "Draft.LList_Prefixes" via "Draft.Coinductive_List_Extensions" via "Draft.ESet_Extensions" via "Draft.Functions")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.StutteringTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Basic_Extensions" (required by "Draft.StutteringTemplates" via "Draft.Stuttering" via "Draft.LList_Prefixes" via "Draft.Coinductive_List_Extensions" via "Draft.ESet_Extensions")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.StutteringTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### Ignoring duplicate rewrite rule:
### 0 : Suc ` ?A1 == False
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.134s elapsed time, 0.528s cpu time, 0.054s GC time
Loading theory "Draft.List_Extensions" (required by "Draft.StutteringTemplates" via "Draft.Stuttering" via "Draft.LList_Prefixes" via "Draft.Word_Prefixes")
### theory "Draft.Set_Extensions"
### 0.154s elapsed time, 0.612s cpu time, 0.054s GC time
Loading theory "Draft.Functions" (required by "Draft.StutteringTemplates" via "Draft.Stuttering" via "Draft.LList_Prefixes" via "Draft.Coinductive_List_Extensions" via "Draft.ESet_Extensions")
locale bounded_function
  fixes A :: "'a set"
    and B :: "'b set"
    and f :: "'a => 'b"
  assumes "bounded_function A B f"
### theory "Draft.List_Extensions"
### 0.058s elapsed time, 0.228s cpu time, 0.000s GC time
Loading theory "Draft.List_Prefixes" (required by "Draft.StutteringTemplates" via "Draft.Stuttering" via "Draft.LList_Prefixes" via "Draft.Word_Prefixes")
locale bounded_function_pair
  fixes A :: "'a set"
    and B :: "'b set"
    and f :: "'a => 'b"
    and g :: "'b => 'a"
  assumes "bounded_function_pair A B f g"
locale injection
  fixes A :: "'a set"
    and B :: "'b set"
    and f :: "'a => 'b"
    and g :: "'b => 'a"
  assumes "injection A B f g"
### theory "HOL-Library.Set_Algebras"
### 0.233s elapsed time, 0.928s cpu time, 0.054s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.StutteringTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
locale injective
  fixes A :: "'a set"
    and B :: "'b set"
    and f :: "'a => 'b"
  assumes "injective A B f"
### theory "Draft.List_Prefixes"
### 0.056s elapsed time, 0.221s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.StutteringTemplates" via "Draft.ExtrEqs")
locale surjection
  fixes A :: "'a set"
    and B :: "'b set"
    and f :: "'a => 'b"
    and g :: "'b => 'a"
  assumes "surjection A B f g"
locale surjective
  fixes A :: "'a set"
    and B :: "'b set"
    and f :: "'a => 'b"
  assumes "surjective A B f"
### theory "Draft.Basic_Extensions"
### 0.337s elapsed time, 1.295s cpu time, 0.165s GC time
Loading theory "Draft.ENat_Extensions" (required by "Draft.StutteringTemplates" via "Draft.Stuttering" via "Draft.LList_Prefixes" via "Draft.Coinductive_List_Extensions" via "Draft.ESet_Extensions" via "Draft.CCPO_Extensions")
locale Functions.bijection
  fixes A :: "'a set"
    and B :: "'b set"
    and f :: "'a => 'b"
    and g :: "'b => 'a"
  assumes "Functions.bijection A B f g"
### theory "Draft.Functions"
### 0.188s elapsed time, 0.715s cpu time, 0.111s GC time
Loading theory "Draft.Word_Prefixes" (required by "Draft.StutteringTemplates" via "Draft.Stuttering" via "Draft.LList_Prefixes")
### theory "Draft.ENat_Extensions"
### 0.040s elapsed time, 0.165s cpu time, 0.000s GC time
Loading theory "Draft.CCPO_Extensions" (required by "Draft.StutteringTemplates" via "Draft.Stuttering" via "Draft.LList_Prefixes" via "Draft.Coinductive_List_Extensions" via "Draft.ESet_Extensions")
### theory "Draft.Word_Prefixes"
### 0.388s elapsed time, 1.493s cpu time, 0.153s GC time
class esize = type +
  fixes esize :: "'a => enat"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
class esize_order = esize + order +
  assumes
    "esize_finite": "!!x. esize x ~= \<infinity> ==> finite {y. y <= x}"
  assumes "esize_mono": "!!x y. x <= y ==> esize x <= esize y"
  assumes
    "esize_strict_mono":
      "!!x y. [| esize x ~= \<infinity>; x < y |] ==> esize x < esize y"
### theory "HOL-Library.BigO"
### 0.721s elapsed time, 2.554s cpu time, 0.223s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.CCPO_Extensions"
### 1.122s elapsed time, 3.391s cpu time, 0.828s GC time
Loading theory "Draft.ESet_Extensions" (required by "Draft.StutteringTemplates" via "Draft.Stuttering" via "Draft.LList_Prefixes" via "Draft.Coinductive_List_Extensions")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (type) esize_ccpo
  esize_set == esize :: 'a set => enat
Found termination order: "size <*mlex*> {}"
consts
  nth_least :: "'a set => nat => 'a"
### theory "HOL-Library.Tree"
### 2.002s elapsed time, 5.475s cpu time, 1.173s GC time
Loading theory "Draft.Templates" (required by "Draft.StutteringTemplates" via "Draft.ExtrEqs")
### theory "Draft.ESet_Extensions"
### 0.753s elapsed time, 1.604s cpu time, 0.234s GC time
Loading theory "Draft.Coinductive_List_Extensions" (required by "Draft.StutteringTemplates" via "Draft.Stuttering" via "Draft.LList_Prefixes")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.131s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.StutteringTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.737s elapsed time, 1.825s cpu time, 0.812s GC time
consts
  lscan :: "('a => 'b => 'b) => 'a llist => 'b => 'b llist"
instantiation
  llist :: (type) esize_order
  esize_llist == esize :: 'a llist => enat
### theory "Draft.Coinductive_List_Extensions"
### 1.132s elapsed time, 2.295s cpu time, 0.871s GC time
Loading theory "Draft.LList_Prefixes" (required by "Draft.StutteringTemplates" via "Draft.Stuttering")
### theory "Draft.LList_Prefixes"
### 0.463s elapsed time, 0.565s cpu time, 0.143s GC time
Loading theory "Draft.Stuttering" (required by "Draft.StutteringTemplates")
### Ambiguous input (line 188 of "$AFP/Partial_Order_Reduction/Basics/Stuttering.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" stutter_sampler)
###     ("_cargs"
###       ("\<^const>Omega_Words_Fun.build" ("\<^const>Groups.zero_class.zero")
###         ("\<^const>Fun.comp" ("_position" Suc) ("_position" f)))
###       ("\<^const>Stream.stream.SCons" ("_position" a) ("_position" w)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" stutter_sampler)
###     ("_cargs"
###       ("\<^const>Stream.stream.SCons" ("\<^const>Groups.zero_class.zero")
###         ("\<^const>Fun.comp" ("_position" Suc) ("_position" f)))
###       ("\<^const>Stream.stream.SCons" ("_position" a) ("_position" w)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" stutter_sampler)
###     ("_cargs"
###       ("\<^const>Omega_Words_Fun.build" ("\<^const>Groups.zero_class.zero")
###         ("\<^const>Fun.comp" ("_position" Suc) ("_position" f)))
###       ("\<^const>Omega_Words_Fun.build" ("_position" a) ("_position" w)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" stutter_sampler)
###     ("_cargs"
###       ("\<^const>Stream.stream.SCons" ("\<^const>Groups.zero_class.zero")
###         ("\<^const>Fun.comp" ("_position" Suc) ("_position" f)))
###       ("\<^const>Omega_Words_Fun.build" ("_position" a) ("_position" w)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 206 of "$AFP/Partial_Order_Reduction/Basics/Stuttering.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.stutter_equiv"
###     ("\<^const>Omega_Words_Fun.build" ("_position" a) ("_position" u))
###     ("\<^const>Omega_Words_Fun.build" ("_position" a) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.stutter_equiv"
###     ("\<^const>Stream.stream.SCons" ("_position" a) ("_position" u))
###     ("\<^const>Omega_Words_Fun.build" ("_position" a) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.stutter_equiv"
###     ("\<^const>Omega_Words_Fun.build" ("_position" a) ("_position" u))
###     ("\<^const>Stream.stream.SCons" ("_position" a) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.stutter_equiv"
###     ("\<^const>Stream.stream.SCons" ("_position" a) ("_position" u))
###     ("\<^const>Stream.stream.SCons" ("_position" a) ("_position" v))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 222 of "$AFP/Partial_Order_Reduction/Basics/Stuttering.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.stutter_equiv"
###     ("\<^const>Omega_Words_Fun.build"
###       ("_applC" ("_position" w) ("\<^const>Groups.zero_class.zero"))
###       ("_position" w))
###     ("_position" w)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.stutter_equiv"
###     ("\<^const>Stream.stream.SCons"
###       ("_applC" ("_position" w) ("\<^const>Groups.zero_class.zero"))
###       ("_position" w))
###     ("_position" w)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Stuttering"
### 0.528s elapsed time, 0.606s cpu time, 0.112s GC time
Loading theory "Draft.StutteringTemplates"
val templateLemmas =
   [("Stuttering.build_stutter", "?w 0 ## ?w \<approx> ?w",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_var 0, template_hole 0)),
               template_var 0)),
           template_var 0)
         )),
    ("Stuttering.stuttering_invariant_complement",
     "stuttering_invariant ?A ==> stuttering_invariant (- ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Stuttering.replicate_stutter",
     "replicate ?n (?v 0) \<frown> ?v \<approx> ?v",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_app (template_var 0, template_hole 0))),
               template_var 0)),
           template_var 0)
         )),
    ("Stuttering.stutter_selectionD_0",
     "stutter_selection ?s ?w ==> 0 : ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1)
           ))),
    ("Stuttering.replicate_stutter'",
     "?u \<frown> replicate ?n (?v 0) \<frown> ?v \<approx> ?u \<frown> ?v",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_app (template_var 0, template_hole 0))),
                 template_var 0))),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0))
         )),
    ("Stuttering.nth_least_ext_strict_mono",
     "?k < ?l ==> nth_least_ext ?s ?k < nth_least_ext ?s ?l",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Stuttering.stutter_extend_build",
     "?u \<approx> ?v ==> ?a ## ?u \<approx> ?a ## ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Stuttering.stutter_extend_concat",
     "?u \<approx> ?v ==> ?w \<frown> ?u \<approx> ?w \<frown> ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Stuttering.stutter_equiv_forw_subst",
     "[| ?w\<^sub>1 = ?w\<^sub>2; ?w\<^sub>2 \<approx> ?w\<^sub>3 |]
      ==> ?w\<^sub>1 \<approx> ?w\<^sub>3",
     template_implication
      ([template_equation (template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Stuttering.stutter_sampler_build",
     "stutter_sampler ?f ?w ==>
      stutter_sampler (0 ## (Suc o ?f)) (?a ## ?w)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 2))),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Stuttering.stutter_selection_stutter_sampler",
     "[| linfinite ?w; stutter_selection ?s ?w |]
      ==> stutter_sampler (nth_least_ext ?s) ((?!) ?w)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Stuttering.stutter_selectionD_infinite",
     "[| stutter_selection ?s ?w; enat ?i < llength ?w; finite ?s;
         Max ?s < ?i |]
      ==> ?w ?! ?i = ?w ?! Max ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_than, template_app (template_hole 6, template_var 0),
          template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 4, template_var 2)),
        template_inequation
         (less_than, template_app (template_hole 2, template_var 2),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_hole 2, template_var 2))))),
    ("Stuttering.stutter_equivI_selection",
     "[| linfinite ?u; linfinite ?v; stutter_selection ?s ?u;
         stutter_selection ?t ?v; lselect ?s ?u = lselect ?t ?v |]
      ==> (?!) ?u \<approx> (?!) ?v",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 5, template_var 3))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 3), template_var 1),
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 3)),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Stuttering.stutter_selectionD_inside",
     "[| stutter_selection ?s ?w; enat ?i < llength ?w;
         enat (Suc ?k) < esize ?s; nth_least ?s ?k < ?i;
         ?i < nth_least ?s (Suc ?k) |]
      ==> ?w ?! ?i = ?w ?! nth_least ?s ?k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_than, template_app (template_hole 7, template_var 1),
          template_app (template_hole 6, template_var 2)),
        template_inequation
         (less_than,
          template_app
           (template_hole 7,
            template_app (template_hole 5, template_var 0)),
          template_app (template_hole 4, template_var 3)),
        template_inequation
         (less_than,
          template_app
           (template_app (template_hole 2, template_var 3), template_var 0),
          template_var 1),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app (template_hole 2, template_var 3),
            template_app (template_hole 5, template_var 0)))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 0))))),
    ("Stuttering.stutter_selectionI",
     "[| 0 : ?s;
         !!k i.
            [| enat i < llength ?w; enat (Suc k) < esize ?s;
               nth_least ?s k < i; i < nth_least ?s (Suc k) |]
            ==> ?w ?! i = ?w ?! nth_least ?s k;
         !!i. [| enat i < llength ?w; finite ?s; Max ?s < i |]
              ==> ?w ?! i = ?w ?! Max ?s |]
      ==> stutter_selection ?s ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_hole 13),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           )))]:
   (string * thm * template) list
### theory "Draft.StutteringTemplates"
### 0.444s elapsed time, 0.613s cpu time, 0.110s GC time
val it = (): unit
