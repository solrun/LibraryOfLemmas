Loading theory "Draft.Basic_Extensions" (required by "Draft.LList_PrefixesTemplates" via "Draft.LList_Prefixes" via "Draft.Coinductive_List_Extensions" via "Draft.ESet_Extensions")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.LList_PrefixesTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Set_Extensions" (required by "Draft.LList_PrefixesTemplates" via "Draft.LList_Prefixes" via "Draft.Coinductive_List_Extensions" via "Draft.ESet_Extensions" via "Draft.Functions")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.LList_PrefixesTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### Ignoring duplicate rewrite rule:
### 0 : Suc ` ?A1 == False
### theory "HOL-Library.Function_Algebras"
### 0.136s elapsed time, 0.540s cpu time, 0.053s GC time
Loading theory "Draft.List_Extensions" (required by "Draft.LList_PrefixesTemplates" via "Draft.LList_Prefixes" via "Draft.Word_Prefixes")
### theory "Draft.Set_Extensions"
### 0.161s elapsed time, 0.641s cpu time, 0.053s GC time
Loading theory "Draft.Functions" (required by "Draft.LList_PrefixesTemplates" via "Draft.LList_Prefixes" via "Draft.Coinductive_List_Extensions" via "Draft.ESet_Extensions")
locale bounded_function
  fixes A :: "'a set"
    and B :: "'b set"
    and f :: "'a => 'b"
  assumes "bounded_function A B f"
### theory "Draft.List_Extensions"
### 0.064s elapsed time, 0.254s cpu time, 0.000s GC time
Loading theory "Draft.List_Prefixes" (required by "Draft.LList_PrefixesTemplates" via "Draft.LList_Prefixes" via "Draft.Word_Prefixes")
locale bounded_function_pair
  fixes A :: "'a set"
    and B :: "'b set"
    and f :: "'a => 'b"
    and g :: "'b => 'a"
  assumes "bounded_function_pair A B f g"
locale injection
  fixes A :: "'a set"
    and B :: "'b set"
    and f :: "'a => 'b"
    and g :: "'b => 'a"
  assumes "injection A B f g"
### theory "HOL-Library.Set_Algebras"
### 0.226s elapsed time, 0.897s cpu time, 0.053s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.LList_PrefixesTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
locale injective
  fixes A :: "'a set"
    and B :: "'b set"
    and f :: "'a => 'b"
  assumes "injective A B f"
### theory "Draft.List_Prefixes"
### 0.046s elapsed time, 0.180s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.LList_PrefixesTemplates" via "Draft.ExtrEqs")
locale surjection
  fixes A :: "'a set"
    and B :: "'b set"
    and f :: "'a => 'b"
    and g :: "'b => 'a"
  assumes "surjection A B f g"
locale surjective
  fixes A :: "'a set"
    and B :: "'b set"
    and f :: "'a => 'b"
  assumes "surjective A B f"
locale Functions.bijection
  fixes A :: "'a set"
    and B :: "'b set"
    and f :: "'a => 'b"
    and g :: "'b => 'a"
  assumes "Functions.bijection A B f g"
### theory "Draft.Functions"
### 0.165s elapsed time, 0.624s cpu time, 0.111s GC time
Loading theory "Draft.ENat_Extensions" (required by "Draft.LList_PrefixesTemplates" via "Draft.LList_Prefixes" via "Draft.Coinductive_List_Extensions" via "Draft.ESet_Extensions" via "Draft.CCPO_Extensions")
### theory "Draft.Basic_Extensions"
### 0.344s elapsed time, 1.338s cpu time, 0.164s GC time
Loading theory "Draft.Word_Prefixes" (required by "Draft.LList_PrefixesTemplates" via "Draft.LList_Prefixes")
### theory "Draft.ENat_Extensions"
### 0.041s elapsed time, 0.166s cpu time, 0.000s GC time
Loading theory "Draft.CCPO_Extensions" (required by "Draft.LList_PrefixesTemplates" via "Draft.LList_Prefixes" via "Draft.Coinductive_List_Extensions" via "Draft.ESet_Extensions")
class esize = type +
  fixes esize :: "'a => enat"
### theory "Draft.Word_Prefixes"
### 0.391s elapsed time, 1.510s cpu time, 0.168s GC time
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
class esize_order = esize + order +
  assumes
    "esize_finite": "!!x. esize x ~= \<infinity> ==> finite {y. y <= x}"
  assumes "esize_mono": "!!x y. x <= y ==> esize x <= esize y"
  assumes
    "esize_strict_mono":
      "!!x y. [| esize x ~= \<infinity>; x < y |] ==> esize x < esize y"
### theory "HOL-Library.BigO"
### 0.929s elapsed time, 3.217s cpu time, 0.857s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.CCPO_Extensions"
### 1.140s elapsed time, 3.490s cpu time, 0.891s GC time
Loading theory "Draft.ESet_Extensions" (required by "Draft.LList_PrefixesTemplates" via "Draft.LList_Prefixes" via "Draft.Coinductive_List_Extensions")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (type) esize_ccpo
  esize_set == esize :: 'a set => enat
Found termination order: "size <*mlex*> {}"
consts
  nth_least :: "'a set => nat => 'a"
### theory "HOL-Library.Tree"
### 2.026s elapsed time, 5.593s cpu time, 1.262s GC time
Loading theory "Draft.Templates" (required by "Draft.LList_PrefixesTemplates" via "Draft.ExtrEqs")
### theory "Draft.ESet_Extensions"
### 0.757s elapsed time, 1.620s cpu time, 0.260s GC time
Loading theory "Draft.Coinductive_List_Extensions" (required by "Draft.LList_PrefixesTemplates" via "Draft.LList_Prefixes")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.127s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.LList_PrefixesTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.533s elapsed time, 1.115s cpu time, 0.112s GC time
consts
  lscan :: "('a => 'b => 'b) => 'a llist => 'b => 'b llist"
instantiation
  llist :: (type) esize_order
  esize_llist == esize :: 'a llist => enat
### theory "Draft.Coinductive_List_Extensions"
### 1.139s elapsed time, 2.341s cpu time, 0.930s GC time
Loading theory "Draft.LList_Prefixes" (required by "Draft.LList_PrefixesTemplates")
### theory "Draft.LList_Prefixes"
### 0.466s elapsed time, 0.567s cpu time, 0.142s GC time
Loading theory "Draft.LList_PrefixesTemplates"
val templateLemmas =
   [("LList_Prefixes.unfold_stream_siterate_smap",
     "unfold_stream ?f ?g = smap ?f o siterate ?g",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("LList_Prefixes.llist_of_inf_llist_prefix",
     "?u \<le>\<^sub>F\<^sub>I ?v ==> llist_of ?u <= llist_of_stream ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("LList_Prefixes.lappend_stream_of_llist",
     "lfinite ?u ==>
      stream_of_llist (?u $ ?v) = list_of ?u @- stream_of_llist ?v",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 3, template_var 0))))),
    ("LList_Prefixes.prefix_llist_of_inf_llist",
     "[| lfinite ?u; ?u <= ?v |]
      ==> list_of ?u \<le>\<^sub>F\<^sub>I stream_of_llist ?v",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("LList_Prefixes.lproject_prefix_limit_chain",
     "[| chain ?w; !!k. lproject ?A (llist_of (?w k)) <= ?x |]
      ==> lproject ?A (llist_of_stream (limit ?w)) <= ?x",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 4, t_empty),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2))),
         template_var 0))),
    ("LList_Prefixes.lproject_eq_limit_chain",
     "[| chain ?u; chain ?v; !!k. project ?A (?u k) = project ?A (?v k) |]
      ==> lproject ?A (llist_of_stream (limit ?u)) =
          lproject ?A (llist_of_stream (limit ?v))",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate (template_app (template_hole 8, template_var 1)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2))),
         template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))))))]:
   (string * thm * template) list
### theory "Draft.LList_PrefixesTemplates"
### 0.434s elapsed time, 0.605s cpu time, 0.091s GC time
val it = (): unit
