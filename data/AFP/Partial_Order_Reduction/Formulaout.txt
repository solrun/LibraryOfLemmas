Loading theory "Draft.Basic_Extensions" (required by "Draft.FormulaTemplates" via "Draft.Formula" via "Draft.Stuttering" via "Draft.LList_Prefixes" via "Draft.Coinductive_List_Extensions" via "Draft.ESet_Extensions")
Loading theory "Draft.Set_Extensions" (required by "Draft.FormulaTemplates" via "Draft.Formula" via "Draft.Stuttering" via "Draft.LList_Prefixes" via "Draft.Coinductive_List_Extensions" via "Draft.ESet_Extensions" via "Draft.Functions")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.FormulaTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.FormulaTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### Ignoring duplicate rewrite rule:
### 0 : Suc ` ?A1 == False
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.Set_Extensions"
### 0.159s elapsed time, 0.627s cpu time, 0.046s GC time
Loading theory "Draft.Functions" (required by "Draft.FormulaTemplates" via "Draft.Formula" via "Draft.Stuttering" via "Draft.LList_Prefixes" via "Draft.Coinductive_List_Extensions" via "Draft.ESet_Extensions")
### theory "HOL-Library.Function_Algebras"
### 0.166s elapsed time, 0.650s cpu time, 0.046s GC time
Loading theory "Draft.List_Extensions" (required by "Draft.FormulaTemplates" via "Draft.Formula" via "Draft.Stuttering" via "Draft.LList_Prefixes" via "Draft.Word_Prefixes")
locale bounded_function
  fixes A :: "'a set"
    and B :: "'b set"
    and f :: "'a => 'b"
  assumes "bounded_function A B f"
locale bounded_function_pair
  fixes A :: "'a set"
    and B :: "'b set"
    and f :: "'a => 'b"
    and g :: "'b => 'a"
  assumes "bounded_function_pair A B f g"
locale injection
  fixes A :: "'a set"
    and B :: "'b set"
    and f :: "'a => 'b"
    and g :: "'b => 'a"
  assumes "injection A B f g"
locale injective
  fixes A :: "'a set"
    and B :: "'b set"
    and f :: "'a => 'b"
  assumes "injective A B f"
### theory "Draft.List_Extensions"
### 0.064s elapsed time, 0.261s cpu time, 0.000s GC time
Loading theory "Draft.List_Prefixes" (required by "Draft.FormulaTemplates" via "Draft.Formula" via "Draft.Stuttering" via "Draft.LList_Prefixes" via "Draft.Word_Prefixes")
locale surjection
  fixes A :: "'a set"
    and B :: "'b set"
    and f :: "'a => 'b"
    and g :: "'b => 'a"
  assumes "surjection A B f g"
### theory "Draft.List_Prefixes"
### 0.074s elapsed time, 0.256s cpu time, 0.109s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.FormulaTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.306s elapsed time, 1.175s cpu time, 0.156s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.FormulaTemplates" via "Draft.ExtrEqs")
locale surjective
  fixes A :: "'a set"
    and B :: "'b set"
    and f :: "'a => 'b"
  assumes "surjective A B f"
locale Functions.bijection
  fixes A :: "'a set"
    and B :: "'b set"
    and f :: "'a => 'b"
    and g :: "'b => 'a"
  assumes "Functions.bijection A B f g"
### theory "Draft.Functions"
### 0.171s elapsed time, 0.647s cpu time, 0.109s GC time
Loading theory "Draft.ENat_Extensions" (required by "Draft.FormulaTemplates" via "Draft.Formula" via "Draft.Stuttering" via "Draft.LList_Prefixes" via "Draft.Coinductive_List_Extensions" via "Draft.ESet_Extensions" via "Draft.CCPO_Extensions")
### theory "Draft.Basic_Extensions"
### 0.335s elapsed time, 1.281s cpu time, 0.156s GC time
Loading theory "Draft.Word_Prefixes" (required by "Draft.FormulaTemplates" via "Draft.Formula" via "Draft.Stuttering" via "Draft.LList_Prefixes")
### theory "Draft.ENat_Extensions"
### 0.042s elapsed time, 0.166s cpu time, 0.000s GC time
Loading theory "Draft.CCPO_Extensions" (required by "Draft.FormulaTemplates" via "Draft.Formula" via "Draft.Stuttering" via "Draft.LList_Prefixes" via "Draft.Coinductive_List_Extensions" via "Draft.ESet_Extensions")
### theory "Draft.Word_Prefixes"
### 0.394s elapsed time, 1.508s cpu time, 0.153s GC time
class esize = type +
  fixes esize :: "'a => enat"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class esize_order = esize + order +
  assumes
    "esize_finite": "!!x. esize x ~= \<infinity> ==> finite {y. y <= x}"
  assumes "esize_mono": "!!x y. x <= y ==> esize x <= esize y"
  assumes
    "esize_strict_mono":
      "!!x y. [| esize x ~= \<infinity>; x < y |] ==> esize x < esize y"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### theory "HOL-Library.BigO"
### 0.931s elapsed time, 3.169s cpu time, 0.769s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.CCPO_Extensions"
### 1.139s elapsed time, 3.480s cpu time, 0.804s GC time
Loading theory "Draft.ESet_Extensions" (required by "Draft.FormulaTemplates" via "Draft.Formula" via "Draft.Stuttering" via "Draft.LList_Prefixes" via "Draft.Coinductive_List_Extensions")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (type) esize_ccpo
  esize_set == esize :: 'a set => enat
Found termination order: "size <*mlex*> {}"
consts
  nth_least :: "'a set => nat => 'a"
### theory "Draft.ESet_Extensions"
### 0.756s elapsed time, 1.580s cpu time, 0.208s GC time
Loading theory "Draft.Coinductive_List_Extensions" (required by "Draft.FormulaTemplates" via "Draft.Formula" via "Draft.Stuttering" via "Draft.LList_Prefixes")
### theory "HOL-Library.Tree"
### 1.983s elapsed time, 5.360s cpu time, 1.012s GC time
Loading theory "Draft.Templates" (required by "Draft.FormulaTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.136s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.FormulaTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.762s elapsed time, 1.867s cpu time, 0.845s GC time
consts
  lscan :: "('a => 'b => 'b) => 'a llist => 'b => 'b llist"
instantiation
  llist :: (type) esize_order
  esize_llist == esize :: 'a llist => enat
### theory "Draft.Coinductive_List_Extensions"
### 1.160s elapsed time, 2.397s cpu time, 0.903s GC time
Loading theory "Draft.LList_Prefixes" (required by "Draft.FormulaTemplates" via "Draft.Formula" via "Draft.Stuttering")
### theory "Draft.LList_Prefixes"
### 0.440s elapsed time, 0.545s cpu time, 0.142s GC time
Loading theory "Draft.Stuttering" (required by "Draft.FormulaTemplates" via "Draft.Formula")
### Ambiguous input (line 188 of "$AFP/Partial_Order_Reduction/Basics/Stuttering.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" stutter_sampler)
###     ("_cargs"
###       ("\<^const>Omega_Words_Fun.build" ("\<^const>Groups.zero_class.zero")
###         ("\<^const>Fun.comp" ("_position" Suc) ("_position" f)))
###       ("\<^const>Stream.stream.SCons" ("_position" a) ("_position" w)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" stutter_sampler)
###     ("_cargs"
###       ("\<^const>Stream.stream.SCons" ("\<^const>Groups.zero_class.zero")
###         ("\<^const>Fun.comp" ("_position" Suc) ("_position" f)))
###       ("\<^const>Stream.stream.SCons" ("_position" a) ("_position" w)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" stutter_sampler)
###     ("_cargs"
###       ("\<^const>Omega_Words_Fun.build" ("\<^const>Groups.zero_class.zero")
###         ("\<^const>Fun.comp" ("_position" Suc) ("_position" f)))
###       ("\<^const>Omega_Words_Fun.build" ("_position" a) ("_position" w)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" stutter_sampler)
###     ("_cargs"
###       ("\<^const>Stream.stream.SCons" ("\<^const>Groups.zero_class.zero")
###         ("\<^const>Fun.comp" ("_position" Suc) ("_position" f)))
###       ("\<^const>Omega_Words_Fun.build" ("_position" a) ("_position" w)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 206 of "$AFP/Partial_Order_Reduction/Basics/Stuttering.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.stutter_equiv"
###     ("\<^const>Omega_Words_Fun.build" ("_position" a) ("_position" u))
###     ("\<^const>Omega_Words_Fun.build" ("_position" a) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.stutter_equiv"
###     ("\<^const>Stream.stream.SCons" ("_position" a) ("_position" u))
###     ("\<^const>Omega_Words_Fun.build" ("_position" a) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.stutter_equiv"
###     ("\<^const>Omega_Words_Fun.build" ("_position" a) ("_position" u))
###     ("\<^const>Stream.stream.SCons" ("_position" a) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.stutter_equiv"
###     ("\<^const>Stream.stream.SCons" ("_position" a) ("_position" u))
###     ("\<^const>Stream.stream.SCons" ("_position" a) ("_position" v))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 222 of "$AFP/Partial_Order_Reduction/Basics/Stuttering.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.stutter_equiv"
###     ("\<^const>Omega_Words_Fun.build"
###       ("_applC" ("_position" w) ("\<^const>Groups.zero_class.zero"))
###       ("_position" w))
###     ("_position" w)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.stutter_equiv"
###     ("\<^const>Stream.stream.SCons"
###       ("_applC" ("_position" w) ("\<^const>Groups.zero_class.zero"))
###       ("_position" w))
###     ("_position" w)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Stuttering"
### 0.485s elapsed time, 0.543s cpu time, 0.084s GC time
Loading theory "Draft.Formula" (required by "Draft.FormulaTemplates")
locale formula
  fixes \<phi> :: "'a pltl"
locale formula_next_free
  fixes \<phi> :: "'a pltl"
  assumes "formula_next_free \<phi>"
### theory "Draft.Formula"
### 0.293s elapsed time, 0.294s cpu time, 0.000s GC time
Loading theory "Draft.FormulaTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.FormulaTemplates"
### 0.533s elapsed time, 0.773s cpu time, 0.164s GC time
val it = (): unit
