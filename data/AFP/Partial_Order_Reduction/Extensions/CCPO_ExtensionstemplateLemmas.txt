   [("CCPO_Extensions.mcont2mcont_lessThan",
     "mcont ?lub ?ord Sup (<=) ?t ==>
      mcont ?lub ?ord \<Union> (<=) (%x. {..<?t x})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 2),
                    template_var 1),
                  template_hole 5),
                template_hole 4),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1),
                 template_hole 2),
               template_hole 1),
             t_empty)
           ))),
    ("CCPO_Extensions.ccpo_Sup_least_inv'",
     "[| Complete_Partial_Order.chain (<=) ?C; ?x < \<Squnion> ?C;
         !!y. [| y : ?C; ?x < y |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 2)
            ),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 2, template_var 2)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("CCPO_Extensions.chain_split",
     "[| Complete_Partial_Order.chain ?ord ?C; ?x : ?C |]
      ==> ?C = {y: ?C. ?ord ?x y} Un {y: ?C. ?ord y ?x}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_var 1,
         template_app
          (template_app
            (template_hole 2, template_app (template_hole 1, t_empty)),
           template_app (template_hole 1, t_empty))))),
    ("CCPO_Extensions.infinite_chain_above",
     "[| Complete_Partial_Order.chain ?ord ?C; infinite ?C; ?x : ?C;
         finite {y: ?C. ?ord y ?x} |]
      ==> infinite {y: ?C. ?ord ?x y}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_hole 3, template_app (template_hole 1, t_empty))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_hole 3, template_app (template_hole 1, t_empty))
               )
           ))),
    ("CCPO_Extensions.infinite_chain_below",
     "[| Complete_Partial_Order.chain ?ord ?C; infinite ?C; ?x : ?C;
         finite {y: ?C. ?ord ?x y} |]
      ==> infinite {y: ?C. ?ord y ?x}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_hole 3, template_app (template_hole 1, t_empty))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_hole 3, template_app (template_hole 1, t_empty))
               )
           )))]
