Loading theory "Draft.Basic_Extensions" (required by "Draft.Relation_ExtensionsTemplates" via "Draft.Relation_Extensions")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Relation_ExtensionsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Relation_ExtensionsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.Relation_ExtensionsTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.158s elapsed time, 0.633s cpu time, 0.060s GC time
### theory "HOL-Library.Set_Algebras"
### 0.217s elapsed time, 0.804s cpu time, 0.060s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Relation_ExtensionsTemplates" via "Draft.ExtrEqs")
### theory "Draft.Basic_Extensions"
### 0.343s elapsed time, 1.187s cpu time, 0.169s GC time
Loading theory "Draft.Relation_Extensions" (required by "Draft.Relation_ExtensionsTemplates")
locale wellfounded_relation
  fixes R :: "'a => 'a => bool"
  assumes "wellfounded_relation R"
### theory "Draft.Relation_Extensions"
### 0.067s elapsed time, 0.204s cpu time, 0.000s GC time
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.670s elapsed time, 1.588s cpu time, 0.264s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.707s elapsed time, 3.575s cpu time, 0.821s GC time
Loading theory "Draft.Templates" (required by "Draft.Relation_ExtensionsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.067s elapsed time, 0.096s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Relation_ExtensionsTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.472s elapsed time, 0.503s cpu time, 0.041s GC time
Loading theory "Draft.Relation_ExtensionsTemplates"
val templateLemmas =
   [("Relation_Extensions.diamondp_implies_confluentp",
     "diamondp ?r ==> confluentp ?r",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Relation_Extensions.sym_rtranclp", "symp ?r ==> symp ?r^**",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Relation_Extensions.liftablep_rtranclp",
     "liftablep ?r ?f ==> liftablep ?r^** ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Relation_Extensions.transclp_eq_implies_confluent_eq",
     "?r1.0^** = ?r2.0^** ==> confluentp ?r1.0 = confluentp ?r2.0",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Relation_Extensions.transclp_eq_implies_confluent_imp",
     "[| ?r1.0^** = ?r2.0^**; confluentp ?r1.0 |] ==> confluentp ?r2.0",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0)),
        template_predicate
         (template_app (template_hole 0, template_var 1))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Relation_Extensions.liftablepI",
     "(!!x y. ?r x y ==> ?r (?f x) (?f y)) ==> liftablep ?r ?f",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Relation_Extensions.liftablepE",
     "[| liftablep ?r ?f; ?r ?x ?y; ?r (?f ?x) (?f ?y) ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 4, template_var 2), template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_var 4,
                   template_app (template_var 3, template_var 2)),
                 template_app (template_var 3, template_var 1))
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Relation_Extensions.diamondpI",
     "(!!x y1 y2. [| ?r x y1; ?r x y2 |] ==> EX z. ?r y1 z & ?r y2 z) ==>
      diamondp ?r",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Relation_Extensions.diamondpE",
     "[| diamondp ?r; ?r ?x ?y1.0; ?r ?x ?y2.0;
         !!z. [| ?r ?y1.0 z; ?r ?y2.0 z |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_var 4, template_var 3), template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 4, template_var 3), template_var 1)
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Relation_Extensions.confluentpI'",
     "(!!x y1 y2.
          [| ?r^** x y1; ?r x y2 |] ==> EX z. ?r^** y1 z & ?r^** y2 z) ==>
      confluentp ?r",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Relation_Extensions.confluentpI",
     "(!!x y1 y2.
          [| ?r^** x y1; ?r^** x y2 |]
          ==> EX z. ?r^** y1 z & ?r^** y2 z) ==>
      confluentp ?r",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Relation_Extensions.confluentpE",
     "[| confluentp ?r; ?r^** ?x ?y1.0; ?r^** ?x ?y2.0;
         !!z. [| ?r^** ?y1.0 z; ?r^** ?y2.0 z |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_var 3),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.Relation_ExtensionsTemplates"
### 0.340s elapsed time, 0.453s cpu time, 0.063s GC time
val it = (): unit
