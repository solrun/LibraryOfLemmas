Loading theory "Draft.Set_Extensions" (required by "Draft.Set_ExtensionsTemplates")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Set_ExtensionsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Set_ExtensionsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.Set_ExtensionsTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### Ignoring duplicate rewrite rule:
### 0 : Suc ` ?A1 == False
### theory "HOL-Library.Function_Algebras"
### 0.137s elapsed time, 0.544s cpu time, 0.057s GC time
### theory "Draft.Set_Extensions"
### 0.189s elapsed time, 0.700s cpu time, 0.057s GC time
### theory "HOL-Library.Set_Algebras"
### 0.247s elapsed time, 0.814s cpu time, 0.057s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Set_ExtensionsTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.679s elapsed time, 1.458s cpu time, 0.276s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.533s elapsed time, 2.933s cpu time, 0.393s GC time
Loading theory "Draft.Templates" (required by "Draft.Set_ExtensionsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.175s elapsed time, 0.488s cpu time, 0.417s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Set_ExtensionsTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.487s elapsed time, 0.521s cpu time, 0.046s GC time
Loading theory "Draft.Set_ExtensionsTemplates"
val templateLemmas =
   [("Set_Extensions.zero_not_in_Suc_image", "0 ~: Suc ` ?A",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0))
             )
         )),
    ("Set_Extensions.least_singleton", "least {?a} = ?a",
     template_equation
      (template_app (template_hole 3, t_empty), template_var 0)),
    ("Set_Extensions.set_not_emptyI", "?x : ?S ==> ?S ~= {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("Set_Extensions.finite_imageI_range",
     "finite (range ?f) ==> finite (?f ` ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 1),
                template_hole 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))
           ))),
    ("Set_Extensions.vimage_singleton", "?f -` {?y} = {x. ?f x = ?y}",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app (template_hole 1, t_empty))),
    ("Set_Extensions.the_vimage_subset", "the -` {?a} <= {None, Some ?a}",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 7, template_hole 6),
         template_app
          (template_app (template_hole 5, template_var 0),
           template_hole 4)),
       template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)))),
    ("Set_Extensions.least_least", "?k : ?A ==> least ?A <= ?k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, t_empty),
         template_var 1))),
    ("Set_Extensions.least_contains", "?k : ?A ==> least ?A : ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1, template_app (template_hole 0, t_empty)),
             template_var 0)
           ))),
    ("Set_Extensions.least_contains'", "?A ~= {} ==> least ?A : ?A",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1, template_app (template_hole 0, t_empty)),
             template_var 0)
           ))),
    ("Set_Extensions.range_subsetI", "(!!x. ?f x : ?S) ==> range ?f <= ?S",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 1), template_hole 0),
         template_var 0))),
    ("Set_Extensions.least_not_less", "?k < least ?A ==> ?k ~: ?A",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 2, t_empty))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)
               )
           ))),
    ("Set_Extensions.Collect_split_Suc",
     "~ ?P 0 ==> {i. ?P i} = Suc ` {i. ?P (Suc i)}",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_var 0, template_hole 4))
            )],
       template_equation
        (template_app (template_hole 2, t_empty),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_app (template_hole 2, t_empty))))),
    ("Set_Extensions.supset_mono_inductive",
     "(!!x. x : ?B --> x : ?C) ==> ?A <= ?B --> ?A <= ?C",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Set_Extensions.card_one",
     "[| card ?A = 1; !!a. ?A = {a} ==> ?thesis |] ==> ?thesis",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 1), template_hole 4),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Set_Extensions.Collect_split_Suc",
     "?P 0 ==> {i. ?P i} = {0} Un Suc ` {i. ?P (Suc i)}",
     template_implication
      ([template_predicate
         (template_app (template_var 0, template_hole 7))],
       template_equation
        (template_app (template_hole 5, t_empty),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 7),
               template_hole 2)),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_app (template_hole 5, t_empty)))))),
    ("Set_Extensions.least_Suc",
     "?A ~= {} ==> least (Suc ` ?A) = Suc (least ?A)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_equation
        (template_app (template_hole 3, t_empty),
         template_app
          (template_hole 0, template_app (template_hole 3, t_empty))))),
    ("Set_Extensions.disjointI",
     "(!!x. [| x : ?A; x : ?B |] ==> False) ==> ?A Int ?B = {}",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Set_Extensions.Collect_subsume",
     "(!!x. x : ?A ==> ?P x) ==> {x: ?A. ?P x} = ?A",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app (template_hole 1, t_empty), template_var 1))),
    ("Set_Extensions.least_unique",
     "[| ?k : ?A; ?k <= least ?A |] ==> ?k = least ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 1, t_empty))],
       template_equation
        (template_var 1, template_app (template_hole 1, t_empty)))),
    ("Set_Extensions.Collect_mono_inductive",
     "(!!x. ?P x --> ?Q x) ==> ?x : {x. ?P x} --> ?x : {x. ?Q x}",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, t_empty))),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, t_empty)))
           ))),
    ("Set_Extensions.Max_ge'",
     "[| finite ?A; ?A ~= {}; ?b : ?A; ?a <= ?b |] ==> ?a <= Max ?A",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_negation
         (template_equation (template_var 2, template_hole 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 2)
            ),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_inequation
        (less_equals, template_var 0,
         template_app (template_hole 0, template_var 2)))),
    ("Set_Extensions.least_Suc_diff",
     "Suc ` ?A - {least (Suc ` ?A)} = Suc ` (?A - {least ?A})",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3, template_app (template_hole 2, t_empty)),
           template_hole 0)),
       template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_app (template_hole 6, template_var 0),
           template_app
            (template_app
              (template_hole 3, template_app (template_hole 2, t_empty)),
             template_hole 0))))),
    ("Set_Extensions.nat_set_card_mono",
     "?x : ?A ==>
      (card {z: ?A. z < ?x} < card {z: ?A. z < ?y}) = (?x < ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2, template_app (template_hole 1, t_empty))),
           template_app
            (template_hole 2, template_app (template_hole 1, t_empty))),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0)))),
    ("Set_Extensions.finite_induct_reverse",
     "[| finite ?S;
         !!S. [| finite S; !!x. x : S ==> ?P (S - {x}) |] ==> ?P S |]
      ==> ?P ?S",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("Set_Extensions.Max_diff_least",
     "[| finite ?A; ?A - {least ?A} ~= {} |]
      ==> Max (?A - {least ?A}) = Max ?A",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 0)),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 6, template_var 0),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 4, t_empty)),
                  template_hole 2)),
              template_hole 2)
            )],
       template_equation
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 6, template_var 0),
             template_app
              (template_app
                (template_hole 5, template_app (template_hole 4, t_empty)),
               template_hole 2))),
         template_app (template_hole 0, template_var 0)))),
    ("Set_Extensions.leastI2_order",
     "[| ?A ~= {}; !!k. [| k : ?A; !!l. l : ?A ==> k <= l |] ==> ?P k |]
      ==> ?P (least ?A)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0, template_app (template_hole 0, t_empty))
           ))),
    ("Set_Extensions.sets_empty_iffI",
     "[| !!a. a : ?A ==> EX b. b : ?B; !!b. b : ?B ==> EX a. a : ?A |]
      ==> (?A = {}) = (?B = {})",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_bimplication
        (template_equation (template_var 1, template_hole 2),
         template_equation (template_var 0, template_hole 0)))),
    ("Set_Extensions.inf_img_fin_domE'",
     "[| infinite ?A; finite (?f ` ?A);
         !!y. [| y : ?f ` ?A; infinite (?A Int ?f -` {y}) |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 8, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 2))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Set_Extensions.nat_set_card_equality_less",
     "[| ?x : ?A; ?y : ?A; card {z: ?A. z < ?x} = card {z: ?A. z < ?y} |]
      ==> ?x = ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_var 1)
            ),
        template_equation
         (template_app
           (template_hole 3, template_app (template_hole 2, t_empty)),
          template_app
           (template_hole 3, template_app (template_hole 2, t_empty)))],
       template_equation (template_var 2, template_var 0))),
    ("Set_Extensions.nat_set_card_equality_le",
     "[| ?x : ?A; ?y : ?A; card {z: ?A. z <= ?x} = card {z: ?A. z <= ?y} |]
      ==> ?x = ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_var 1)
            ),
        template_equation
         (template_app
           (template_hole 3, template_app (template_hole 2, t_empty)),
          template_app
           (template_hole 3, template_app (template_hole 2, t_empty)))],
       template_equation (template_var 2, template_var 0))),
    ("Set_Extensions.least_image",
     "[| ?A ~= {}; !!k l. [| k : ?A; l : ?A; k <= l |] ==> ?f k <= ?f l |]
      ==> least (?f ` ?A) = ?f (least ?A)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 9)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app (template_hole 3, t_empty),
         template_app
          (template_var 0, template_app (template_hole 0, t_empty))))),
    ("Set_Extensions.least_le",
     "[| ?B ~= {};
         !!i. [| i <= least ?A; i <= least ?B; i : ?B |] ==> i : ?A |]
      ==> least ?A <= least ?B",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 1, t_empty),
         template_app (template_hole 1, t_empty)))),
    ("Set_Extensions.image_union_split",
     "[| ?f ` (?A Un ?B) = ?g ` ?C;
         !!D E.
            [| ?f ` ?A = ?g ` D; ?f ` ?B = ?g ` E; D <= ?C; E <= ?C |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 5),
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3)),
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 1)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Set_Extensions.image_insert_split",
     "[| inj ?g; ?f ` insert ?a ?B = ?g ` ?C;
         !!d E.
            [| ?f ?a = ?g d; ?f ` ?B = ?g ` E; d : ?C; E <= ?C |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 5),
              template_hole 9)
            ),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 4),
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)),
          template_app
           (template_app (template_hole 5, template_var 5),
            template_var 1)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Set_Extensions.least_eq",
     "[| ?A ~= {}; ?B ~= {};
         !!i. [| i <= least ?A; i <= least ?B |] ==> (i : ?A) = (i : ?B) |]
      ==> least ?A = least ?B",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 6)),
        template_negation
         (template_equation (template_var 0, template_hole 6)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app (template_hole 3, t_empty),
         template_app (template_hole 3, t_empty))))]:
   (string * thm * template) list
### theory "Draft.Set_ExtensionsTemplates"
### 0.284s elapsed time, 0.393s cpu time, 0.000s GC time
val it = (): unit
