Loading theory "Draft.Nondeterminism" (required by "Draft.NondeterminismTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.NondeterminismTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.NondeterminismTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.NondeterminismTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
Proofs for inductive predicate(s) "foreach"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
  Proving monotonicity ...
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Proofs for inductive predicate(s) "foreachc"
  Proving monotonicity ...
### theory "HOL-Library.Function_Algebras"
### 0.146s elapsed time, 0.574s cpu time, 0.049s GC time
Found termination order: "{}"
### theory "Draft.Nondeterminism"
### 0.230s elapsed time, 0.828s cpu time, 0.049s GC time
### theory "HOL-Library.Set_Algebras"
### 0.236s elapsed time, 0.833s cpu time, 0.049s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.NondeterminismTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.668s elapsed time, 1.430s cpu time, 0.265s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.519s elapsed time, 2.940s cpu time, 0.378s GC time
Loading theory "Draft.Templates" (required by "Draft.NondeterminismTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.187s elapsed time, 0.518s cpu time, 0.444s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.NondeterminismTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.480s elapsed time, 0.507s cpu time, 0.037s GC time
Loading theory "Draft.NondeterminismTemplates"
val templateLemmas =
   [("Nondeterminism.foreachc_success",
     "[| foreach\<^sub>C ?c ?f ?S ?a\<^sub>0 ?a\<^sub>1; ?c ?a\<^sub>1 |]
      ==> foreach ?f ?S ?a\<^sub>0 ?a\<^sub>1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_var 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Nondeterminism.foreach_mono_inductive",
     "(!!x a\<^sub>0 a\<^sub>1.
          ?f\<^sub>1 x a\<^sub>0 a\<^sub>1 -->
          ?f\<^sub>2 x a\<^sub>0 a\<^sub>1) ==>
      foreach ?f\<^sub>1 ?S ?a\<^sub>0 ?a\<^sub>1 -->
      foreach ?f\<^sub>2 ?S ?a\<^sub>0 ?a\<^sub>1",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 2),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Nondeterminism.foreachc_mono_inductive",
     "(!!x a\<^sub>0 a\<^sub>1.
          ?f\<^sub>1 x a\<^sub>0 a\<^sub>1 -->
          ?f\<^sub>2 x a\<^sub>0 a\<^sub>1) ==>
      foreach\<^sub>C ?c ?f\<^sub>1 ?S ?a\<^sub>0 ?a\<^sub>1 -->
      foreach\<^sub>C ?c ?f\<^sub>2 ?S ?a\<^sub>0 ?a\<^sub>1",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 5),
                     template_var 2),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 4),
                   template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Nondeterminism.foreach_mono",
     "[| !!x a\<^sub>0 a\<^sub>1.
            ?f\<^sub>1 x a\<^sub>0 a\<^sub>1 ==>
            ?f\<^sub>2 x a\<^sub>0 a\<^sub>1;
         foreach ?f\<^sub>1 ?S ?a\<^sub>0 ?a\<^sub>1 |]
      ==> foreach ?f\<^sub>2 ?S ?a\<^sub>0 ?a\<^sub>1",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 4),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Nondeterminism.foreachc_mono",
     "[| !!x a\<^sub>0 a\<^sub>1.
            ?f\<^sub>1 x a\<^sub>0 a\<^sub>1 ==>
            ?f\<^sub>2 x a\<^sub>0 a\<^sub>1;
         foreach\<^sub>C ?c ?f\<^sub>1 ?S ?a\<^sub>0 ?a\<^sub>1 |]
      ==> foreach\<^sub>C ?c ?f\<^sub>2 ?S ?a\<^sub>0 ?a\<^sub>1",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 0, template_var 3),
                    template_var 5),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 4),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Nondeterminism.foreach_equality",
     "[| foreach ?f ?S ?a\<^sub>1 ?a\<^sub>2;
         !!x a\<^sub>1 a\<^sub>2.
            [| x : ?S; ?f x a\<^sub>1 a\<^sub>2 |]
            ==> ?g a\<^sub>1 = ?g a\<^sub>2 |]
      ==> ?g ?a\<^sub>1 = ?g ?a\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_equation
        (template_app (template_var 0, template_var 2),
         template_app (template_var 0, template_var 1)))),
    ("Nondeterminism.foreach_preorder",
     "[| foreach ?f ?S ?a\<^sub>1 ?a\<^sub>2;
         !!x a\<^sub>1 a\<^sub>2.
            [| x : ?S; ?f x a\<^sub>1 a\<^sub>2 |]
            ==> ?g a\<^sub>1 <= ?g a\<^sub>2 |]
      ==> ?g ?a\<^sub>1 <= ?g ?a\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_inequation
        (less_equals, template_app (template_var 0, template_var 2),
         template_app (template_var 0, template_var 1)))),
    ("Nondeterminism.foreachc_equality",
     "[| foreach\<^sub>C ?c ?f ?S ?a\<^sub>1 ?a\<^sub>2;
         !!x a\<^sub>1 a\<^sub>2.
            [| x : ?S; ?f x a\<^sub>1 a\<^sub>2 |]
            ==> ?g a\<^sub>1 = ?g a\<^sub>2 |]
      ==> ?g ?a\<^sub>1 = ?g ?a\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_equation
        (template_app (template_var 0, template_var 2),
         template_app (template_var 0, template_var 1)))),
    ("Nondeterminism.foreachc_preorder",
     "[| foreach\<^sub>C ?c ?f ?S ?a\<^sub>1 ?a\<^sub>2;
         !!x a\<^sub>1 a\<^sub>2.
            [| x : ?S; ?f x a\<^sub>1 a\<^sub>2 |]
            ==> ?g a\<^sub>1 <= ?g a\<^sub>2 |]
      ==> ?g ?a\<^sub>1 <= ?g ?a\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_inequation
        (less_equals, template_app (template_var 0, template_var 2),
         template_app (template_var 0, template_var 1)))),
    ("Nondeterminism.foreach_implication",
     "[| foreach ?f ?S ?a\<^sub>1 ?a\<^sub>2;
         !!x a\<^sub>1 a\<^sub>2.
            [| x : ?S; ?f x a\<^sub>1 a\<^sub>2; ?P a\<^sub>1 |]
            ==> ?P a\<^sub>2;
         ?P ?a\<^sub>1 |]
      ==> ?P ?a\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_var 0, template_var 2))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("Nondeterminism.foreachc_implication",
     "[| foreach\<^sub>C ?c ?f ?S ?a\<^sub>1 ?a\<^sub>2;
         !!x a\<^sub>1 a\<^sub>2.
            [| x : ?S; ?f x a\<^sub>1 a\<^sub>2; ?P a\<^sub>1 |]
            ==> ?P a\<^sub>2;
         ?P ?a\<^sub>1 |]
      ==> ?P ?a\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_var 0, template_var 2))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("Nondeterminism.foreach_reflexive_transitive",
     "[| reflp ?r; transp ?r; foreach ?f ?S ?a\<^sub>1 ?a\<^sub>2;
         !!x a\<^sub>1 a\<^sub>2.
            [| x : ?S; ?f x a\<^sub>1 a\<^sub>2 |]
            ==> ?r a\<^sub>1 a\<^sub>2 |]
      ==> ?r ?a\<^sub>1 ?a\<^sub>2",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 4)),
        template_predicate (template_app (template_hole 4, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 4, template_var 1), template_var 0)
           ))),
    ("Nondeterminism.foreachc_reflexive_transitive",
     "[| reflp ?r; transp ?r;
         foreach\<^sub>C ?c ?f ?S ?a\<^sub>1 ?a\<^sub>2;
         !!x a\<^sub>1 a\<^sub>2.
            [| x : ?S; ?f x a\<^sub>1 a\<^sub>2 |]
            ==> ?r a\<^sub>1 a\<^sub>2 |]
      ==> ?r ?a\<^sub>1 ?a\<^sub>2",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 5)),
        template_predicate (template_app (template_hole 4, template_var 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 5, template_var 1), template_var 0)
           )))]:
   (string * thm * template) list
### theory "Draft.NondeterminismTemplates"
### 0.353s elapsed time, 0.509s cpu time, 0.068s GC time
val it = (): unit
