Loading theory "Draft.Basic_Extensions" (required by "Draft.ESet_ExtensionsTemplates" via "Draft.ESet_Extensions")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ESet_ExtensionsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Set_Extensions" (required by "Draft.ESet_ExtensionsTemplates" via "Draft.ESet_Extensions" via "Draft.Functions")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ESet_ExtensionsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### Ignoring duplicate rewrite rule:
### 0 : Suc ` ?A1 == False
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.138s elapsed time, 0.540s cpu time, 0.057s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ESet_ExtensionsTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "Draft.Set_Extensions"
### 0.164s elapsed time, 0.647s cpu time, 0.057s GC time
Loading theory "Draft.Functions" (required by "Draft.ESet_ExtensionsTemplates" via "Draft.ESet_Extensions")
locale bounded_function
  fixes A :: "'a set"
    and B :: "'b set"
    and f :: "'a => 'b"
  assumes "bounded_function A B f"
locale bounded_function_pair
  fixes A :: "'a set"
    and B :: "'b set"
    and f :: "'a => 'b"
    and g :: "'b => 'a"
  assumes "bounded_function_pair A B f g"
locale injection
  fixes A :: "'a set"
    and B :: "'b set"
    and f :: "'a => 'b"
    and g :: "'b => 'a"
  assumes "injection A B f g"
### theory "HOL-Library.Set_Algebras"
### 0.229s elapsed time, 0.900s cpu time, 0.057s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ESet_ExtensionsTemplates" via "Draft.ExtrEqs")
locale injective
  fixes A :: "'a set"
    and B :: "'b set"
    and f :: "'a => 'b"
  assumes "injective A B f"
locale surjection
  fixes A :: "'a set"
    and B :: "'b set"
    and f :: "'a => 'b"
    and g :: "'b => 'a"
  assumes "surjection A B f g"
locale surjective
  fixes A :: "'a set"
    and B :: "'b set"
    and f :: "'a => 'b"
  assumes "surjective A B f"
locale Functions.bijection
  fixes A :: "'a set"
    and B :: "'b set"
    and f :: "'a => 'b"
    and g :: "'b => 'a"
  assumes "Functions.bijection A B f g"
### theory "Draft.Functions"
### 0.163s elapsed time, 0.612s cpu time, 0.116s GC time
Loading theory "Draft.ENat_Extensions" (required by "Draft.ESet_ExtensionsTemplates" via "Draft.ESet_Extensions" via "Draft.CCPO_Extensions")
### theory "Draft.Basic_Extensions"
### 0.340s elapsed time, 1.309s cpu time, 0.173s GC time
### theory "Draft.ENat_Extensions"
### 0.040s elapsed time, 0.137s cpu time, 0.000s GC time
Loading theory "Draft.CCPO_Extensions" (required by "Draft.ESet_ExtensionsTemplates" via "Draft.ESet_Extensions")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
class esize = type +
  fixes esize :: "'a => enat"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
class esize_order = esize + order +
  assumes
    "esize_finite": "!!x. esize x ~= \<infinity> ==> finite {y. y <= x}"
  assumes "esize_mono": "!!x y. x <= y ==> esize x <= esize y"
  assumes
    "esize_strict_mono":
      "!!x y. [| esize x ~= \<infinity>; x < y |] ==> esize x < esize y"
### theory "HOL-Library.BigO"
### 0.715s elapsed time, 2.204s cpu time, 0.320s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.CCPO_Extensions"
### 1.018s elapsed time, 2.789s cpu time, 0.684s GC time
Loading theory "Draft.ESet_Extensions" (required by "Draft.ESet_ExtensionsTemplates")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (type) esize_ccpo
  esize_set == esize :: 'a set => enat
Found termination order: "size <*mlex*> {}"
consts
  nth_least :: "'a set => nat => 'a"
### theory "HOL-Library.Tree"
### 1.926s elapsed time, 5.045s cpu time, 0.976s GC time
Loading theory "Draft.Templates" (required by "Draft.ESet_ExtensionsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.130s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ESet_ExtensionsTemplates")
### theory "Draft.ESet_Extensions"
### 0.732s elapsed time, 1.537s cpu time, 0.176s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.512s elapsed time, 0.609s cpu time, 0.123s GC time
Loading theory "Draft.ESet_ExtensionsTemplates"
val templateLemmas =
   [("ESet_Extensions.liftI_0", "0 : lift ?A",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("ESet_Extensions.esize_lessThan", "esize {..<?n} = ?n",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("ESet_Extensions.nth_least_lift", "nth_least (lift ?A) 0 = 0",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_hole 0)),
    ("ESet_Extensions.esize_atMost", "esize {..?n} = eSuc ?n",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("ESet_Extensions.lift_esize", "esize (lift ?A) = eSuc (esize ?A)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("ESet_Extensions.esize_singleton", "esize {?a} = eSuc 0",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app (template_hole 1, template_hole 0))),
    ("ESet_Extensions.card_atMost_enat", "card {..enat ?k} = card {..?k}",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("ESet_Extensions.card_lessThan_enat",
     "card {..<enat ?k} = card {..<?k}",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("ESet_Extensions.lift_least", "least (lift ?A) = 0",
     template_equation
      (template_app (template_hole 3, t_empty), template_hole 0)),
    ("ESet_Extensions.esize_iff_infinite",
     "(esize ?A = \<infinity>) = infinite ?A",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("ESet_Extensions.esize_iff_empty", "(esize ?A = 0) = (?A = {})",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("ESet_Extensions.Inf_enat_eSuc",
     "\<Sqinter> (eSuc ` ?A) = eSuc (\<Sqinter> ?A)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("ESet_Extensions.esize_infinite_enat",
     "infinite ?A ==> enat ?k < esize ?A",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 1))
            )],
       template_inequation
        (less_than, template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("ESet_Extensions.liftI_Suc", "?a : ?A ==> Suc ?a : lift ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("ESet_Extensions.Collect_lessThan",
     "{i. enat i < ?n} = the_enat ` {..<?n}",
     template_equation
      (template_app (template_hole 5, t_empty),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("ESet_Extensions.esize_image",
     "inj_on ?f ?A ==> esize (?f ` ?A) = esize ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("ESet_Extensions.esize_insert2",
     "?a : ?A ==> esize (insert ?a ?A) = esize ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("ESet_Extensions.nth_least_wellformed",
     "enat ?n < esize ?A ==> nth_least ?A ?n : ?A",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 3, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_var 0)
           ))),
    ("ESet_Extensions.nth_least_le",
     "enat ?n < esize ?A ==> ?n <= nth_least ?A ?n",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 3, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_equals, template_var 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("ESet_Extensions.esize_insert1",
     "?a ~: ?A ==> esize (insert ?a ?A) = eSuc (esize ?A)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)
                )
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_hole 0,
           template_app (template_hole 2, template_var 0))))),
    ("ESet_Extensions.esize_remove2",
     "?a : ?A ==> esize (?A - {?a}) = epred (esize ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1))),
         template_app
          (template_hole 0,
           template_app (template_hole 4, template_var 0))))),
    ("ESet_Extensions.esize_remove1",
     "?a ~: ?A ==> esize (?A - {?a}) = esize ?A",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0)
                )
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))),
         template_app (template_hole 3, template_var 0)))),
    ("ESet_Extensions.enat_Collect",
     "\<infinity> ~: ?A ==> {i. enat i : ?A} = the_enat ` ?A",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 0)
                )
            )],
       template_equation
        (template_app (template_hole 3, t_empty),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("ESet_Extensions.esize_union_disjoint",
     "?A Int ?B = {} ==> esize (?A Un ?B) = esize ?A + esize ?B",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 1), template_var 0),
          template_hole 4)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("ESet_Extensions.nth_least_lift",
     "enat ?n < esize ?A ==>
      nth_least (lift ?A) (Suc ?n) = Suc (nth_least ?A ?n)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 5, template_var 1),
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 1)),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1))))),
    ("ESet_Extensions.nth_least_Suc",
     "enat ?n < esize ?A ==>
      nth_least (Suc ` ?A) ?n = Suc (nth_least ?A ?n)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 5, template_var 1),
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0)),
           template_var 1),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1))))),
    ("ESet_Extensions.card_wellformed",
     "?k : ?A ==> enat (card {i: ?A. i < ?k}) < esize ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 5,
           template_app
            (template_hole 4, template_app (template_hole 3, t_empty))),
         template_app (template_hole 0, template_var 0)))),
    ("ESet_Extensions.nth_least_card",
     "?k : ?A ==> nth_least ?A (card {i: ?A. i < ?k}) = ?k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_hole 3, template_app (template_hole 2, t_empty))),
         template_var 1))),
    ("ESet_Extensions.nth_least_Max",
     "[| finite ?A; ?A ~= {} |] ==> nth_least ?A (card ?A - 1) = Max ?A",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 6))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_hole 1)),
         template_app (template_hole 0, template_var 0)))),
    ("ESet_Extensions.nth_least_strict_mono",
     "[| enat ?l < esize ?A; ?k < ?l |]
      ==> nth_least ?A ?k < nth_least ?A ?l",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 4, template_var 2),
          template_app (template_hole 3, template_var 1)),
        template_inequation (less_than, template_var 0, template_var 2)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 2)))),
    ("ESet_Extensions.nth_least_mono",
     "[| enat ?l < esize ?A; ?k <= ?l |]
      ==> nth_least ?A ?k <= nth_least ?A ?l",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 4, template_var 2),
          template_app (template_hole 3, template_var 1)),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 2)))),
    ("ESet_Extensions.least_eSuc",
     "?A ~= {} ==> least (eSuc ` ?A) = eSuc (least ?A)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_equation
        (template_app (template_hole 3, t_empty),
         template_app
          (template_hole 0, template_app (template_hole 3, t_empty))))),
    ("ESet_Extensions.card_nth_least",
     "enat ?n < esize ?A ==> card {k: ?A. k < nth_least ?A ?n} = ?n",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 8, template_var 1),
          template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app
          (template_hole 5, template_app (template_hole 4, t_empty)),
         template_var 1))),
    ("ESet_Extensions.card_nth_least_le",
     "enat ?n < esize ?A ==> card {k: ?A. k <= nth_least ?A ?n} = Suc ?n",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 9, template_var 1),
          template_app (template_hole 8, template_var 0))],
       template_equation
        (template_app
          (template_hole 6, template_app (template_hole 5, t_empty)),
         template_app (template_hole 0, template_var 1)))),
    ("ESet_Extensions.nth_least_list_card",
     "enat ?n <= esize ?A ==>
      card {k: ?A. k < nth_least (lift ?A) ?n} = ?n",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 9, template_var 1),
          template_app (template_hole 8, template_var 0))],
       template_equation
        (template_app
          (template_hole 6, template_app (template_hole 5, t_empty)),
         template_var 1))),
    ("ESet_Extensions.nth_least_le_Max",
     "[| finite ?A; ?A ~= {}; enat ?n < esize ?A |]
      ==> nth_least ?A ?n <= Max ?A",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 6)),
        template_inequation
         (less_than, template_app (template_hole 4, template_var 0),
          template_app (template_hole 3, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("ESet_Extensions.nth_least_less_card_less",
     "(enat ?n < esize ?A & nth_least ?A ?n < ?k) =
      (?n < card {i: ?A. i < ?k})",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 6, template_var 2)),
             template_app (template_hole 5, template_var 1))),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 2)),
           template_var 0)),
       template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_hole 2, template_app (template_hole 1, t_empty))))),
    ("ESet_Extensions.nth_least_strict_mono_inverse",
     "[| enat ?k < esize ?A; enat ?l < esize ?A;
         nth_least ?A ?k < nth_least ?A ?l |]
      ==> ?k < ?l",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 3, template_var 2),
          template_app (template_hole 2, template_var 1)),
        template_inequation
         (less_than, template_app (template_hole 3, template_var 0),
          template_app (template_hole 2, template_var 1)),
        template_inequation
         (less_than,
          template_app
           (template_app (template_hole 0, template_var 1), template_var 2),
          template_app
           (template_app (template_hole 0, template_var 1),
            template_var 0))],
       template_inequation (less_than, template_var 2, template_var 0))),
    ("ESet_Extensions.nth_least_less_esize_less",
     "(enat ?n < esize ?A & enat (nth_least ?A ?n) < ?k) =
      (enat ?n < esize {i: ?A. enat i < ?k})",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 2)),
             template_app (template_hole 3, template_var 1))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 2))),
           template_var 0)),
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 2)),
         template_app
          (template_hole 3, template_app (template_hole 1, t_empty))))),
    ("ESet_Extensions.nth_least_not_contains",
     "[| enat (Suc ?n) < esize ?A; nth_least ?A ?n < ?k;
         ?k < nth_least ?A (Suc ?n) |]
      ==> ?k ~: ?A",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_var 2)),
          template_app (template_hole 4, template_var 1)),
        template_inequation
         (less_than,
          template_app
           (template_app (template_hole 2, template_var 1), template_var 2),
          template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app (template_hole 2, template_var 1),
            template_app (template_hole 5, template_var 2)))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)
               )
           ))),
    ("ESet_Extensions.liftE",
     "[| ?b : lift ?A; ?b = 0 ==> ?thesis;
         !!a. [| ?b = Suc a; a : ?A |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            ),
        template_implication
         ([template_equation (template_var 2, template_hole 2)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("ESet_Extensions.nth_least_restrict",
     "enat ?i < esize {i: ?s. enat i < ?k} ==>
      nth_least {i: ?s. enat i < ?k} ?i = nth_least ?s ?i",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 6, template_var 2),
          template_app
           (template_hole 5, template_app (template_hole 4, t_empty)))],
       template_equation
        (template_app
          (template_app
            (template_hole 0, template_app (template_hole 4, t_empty)),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 2)))),
    ("ESet_Extensions.nth_least_nth_least",
     "[| enat ?n < esize ?A; !!i. i : ?A ==> enat i < esize ?B |]
      ==> nth_least ?B (nth_least ?A ?n) =
          nth_least (nth_least ?B ` ?A) ?n",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 8, template_var 2),
          template_app (template_hole 7, template_var 1)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 2, template_var 0)),
               template_var 1)),
           template_var 2)))),
    ("ESet_Extensions.least_nth_least",
     "[| ?A ~= {}; !!i. i : ?A ==> enat i < esize ?B |]
      ==> least (nth_least ?B ` ?A) = nth_least ?B (least ?A)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 11)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_app (template_hole 4, t_empty),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, t_empty))))),
    ("ESet_Extensions.nth_least_eq",
     "[| enat ?n < esize ?A; enat ?n < esize ?B;
         !!i. [| i <= nth_least ?A ?n; i <= nth_least ?B ?n |]
              ==> (i : ?A) = (i : ?B) |]
      ==> nth_least ?A ?n = nth_least ?B ?n",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 7, template_var 2),
          template_app (template_hole 6, template_var 1)),
        template_inequation
         (less_than, template_app (template_hole 7, template_var 2),
          template_app (template_hole 6, template_var 0)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_var 2))))]:
   (string * thm * template) list
### theory "Draft.ESet_ExtensionsTemplates"
### 0.387s elapsed time, 0.553s cpu time, 0.067s GC time
val it = (): unit
