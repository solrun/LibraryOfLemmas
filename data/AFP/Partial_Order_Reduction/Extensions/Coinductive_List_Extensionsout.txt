Loading theory "Draft.Basic_Extensions" (required by "Draft.Coinductive_List_ExtensionsTemplates" via "Draft.Coinductive_List_Extensions" via "Draft.ESet_Extensions")
Loading theory "Draft.Set_Extensions" (required by "Draft.Coinductive_List_ExtensionsTemplates" via "Draft.Coinductive_List_Extensions" via "Draft.ESet_Extensions" via "Draft.Functions")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Coinductive_List_ExtensionsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Coinductive_List_ExtensionsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### Ignoring duplicate rewrite rule:
### 0 : Suc ` ?A1 == False
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.Set_Extensions"
### 0.170s elapsed time, 0.669s cpu time, 0.053s GC time
Loading theory "Draft.Functions" (required by "Draft.Coinductive_List_ExtensionsTemplates" via "Draft.Coinductive_List_Extensions" via "Draft.ESet_Extensions")
### theory "HOL-Library.Function_Algebras"
### 0.176s elapsed time, 0.693s cpu time, 0.053s GC time
Loading theory "Draft.List_Extensions" (required by "Draft.Coinductive_List_ExtensionsTemplates" via "Draft.Coinductive_List_Extensions")
locale bounded_function
  fixes A :: "'a set"
    and B :: "'b set"
    and f :: "'a => 'b"
  assumes "bounded_function A B f"
locale bounded_function_pair
  fixes A :: "'a set"
    and B :: "'b set"
    and f :: "'a => 'b"
    and g :: "'b => 'a"
  assumes "bounded_function_pair A B f g"
locale injection
  fixes A :: "'a set"
    and B :: "'b set"
    and f :: "'a => 'b"
    and g :: "'b => 'a"
  assumes "injection A B f g"
### theory "HOL-Library.Set_Algebras"
### 0.236s elapsed time, 0.928s cpu time, 0.053s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Coinductive_List_ExtensionsTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
locale injective
  fixes A :: "'a set"
    and B :: "'b set"
    and f :: "'a => 'b"
  assumes "injective A B f"
### theory "Draft.List_Extensions"
### 0.088s elapsed time, 0.351s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Coinductive_List_ExtensionsTemplates" via "Draft.ExtrEqs")
locale surjection
  fixes A :: "'a set"
    and B :: "'b set"
    and f :: "'a => 'b"
    and g :: "'b => 'a"
  assumes "surjection A B f g"
locale surjective
  fixes A :: "'a set"
    and B :: "'b set"
    and f :: "'a => 'b"
  assumes "surjective A B f"
locale Functions.bijection
  fixes A :: "'a set"
    and B :: "'b set"
    and f :: "'a => 'b"
    and g :: "'b => 'a"
  assumes "Functions.bijection A B f g"
### theory "Draft.Functions"
### 0.176s elapsed time, 0.663s cpu time, 0.139s GC time
Loading theory "Draft.ENat_Extensions" (required by "Draft.Coinductive_List_ExtensionsTemplates" via "Draft.Coinductive_List_Extensions" via "Draft.ESet_Extensions" via "Draft.CCPO_Extensions")
### theory "Draft.ENat_Extensions"
### 0.060s elapsed time, 0.242s cpu time, 0.000s GC time
Loading theory "Draft.CCPO_Extensions" (required by "Draft.Coinductive_List_ExtensionsTemplates" via "Draft.Coinductive_List_Extensions" via "Draft.ESet_Extensions")
### theory "Draft.Basic_Extensions"
### 0.435s elapsed time, 1.684s cpu time, 0.192s GC time
class esize = type +
  fixes esize :: "'a => enat"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
class esize_order = esize + order +
  assumes
    "esize_finite": "!!x. esize x ~= \<infinity> ==> finite {y. y <= x}"
  assumes "esize_mono": "!!x y. x <= y ==> esize x <= esize y"
  assumes
    "esize_strict_mono":
      "!!x y. [| esize x ~= \<infinity>; x < y |] ==> esize x < esize y"
### theory "HOL-Library.BigO"
### 0.801s elapsed time, 2.514s cpu time, 0.341s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.CCPO_Extensions"
### 1.054s elapsed time, 2.971s cpu time, 0.656s GC time
Loading theory "Draft.ESet_Extensions" (required by "Draft.Coinductive_List_ExtensionsTemplates" via "Draft.Coinductive_List_Extensions")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (type) esize_ccpo
  esize_set == esize :: 'a set => enat
Found termination order: "size <*mlex*> {}"
consts
  nth_least :: "'a set => nat => 'a"
### theory "Draft.ESet_Extensions"
### 0.754s elapsed time, 1.556s cpu time, 0.163s GC time
Loading theory "Draft.Coinductive_List_Extensions" (required by "Draft.Coinductive_List_ExtensionsTemplates")
### theory "HOL-Library.Tree"
### 1.995s elapsed time, 5.192s cpu time, 0.958s GC time
Loading theory "Draft.Templates" (required by "Draft.Coinductive_List_ExtensionsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.089s elapsed time, 0.232s cpu time, 0.098s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Coinductive_List_ExtensionsTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.533s elapsed time, 1.089s cpu time, 0.056s GC time
consts
  lscan :: "('a => 'b => 'b) => 'a llist => 'b => 'b llist"
instantiation
  llist :: (type) esize_order
  esize_llist == esize :: 'a llist => enat
### theory "Draft.Coinductive_List_Extensions"
### 0.937s elapsed time, 1.696s cpu time, 0.234s GC time
Loading theory "Draft.Coinductive_List_ExtensionsTemplates"
val templateLemmas =
   [("Coinductive_List_Extensions.lnth_inf_llist'",
     "(?!) (inf_llist ?f) = ?f",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Coinductive_List_Extensions.liset_nil", "liset ?A <> = {}",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Coinductive_List_Extensions.ltake_infinite",
     "ltake \<infinity> ?w = ?w",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Coinductive_List_Extensions.eq_LNil_conv_lnull",
     "(?w = <>) = lnull ?w",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Coinductive_List_Extensions.liset_mcont",
     "mcont lSup lprefix \<Union> (<=) (liset ?A)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 5, template_hole 4),
                 template_hole 3),
               template_hole 2),
             template_hole 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Coinductive_List_Extensions.lselect_llength_le",
     "llength (lselect ?s ?w) <= esize ?s",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Coinductive_List_Extensions.inj_on_ltake",
     "inj_on (%k. ltake k ?w) {..llength ?w}",
     template_predicate
      (
         template_app
          (template_app (template_hole 3, t_empty),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))
         )),
    ("Coinductive_List_Extensions.lfold_llist_of",
     "lfold ?f (llist_of ?xs) = fold ?f ?xs",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Coinductive_List_Extensions.lscan_lfinite",
     "lfinite (lscan ?f ?w ?a) = lfinite ?w",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 0, template_var 1))),
    ("Coinductive_List_Extensions.lscan_simps", "lscan ?f <> ?a = <?a>",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1), template_hole 2),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Coinductive_List_Extensions.liset_finite",
     "lfinite ?w ==> finite (liset ?A ?w)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Coinductive_List_Extensions.lscan_llength",
     "llength (lscan ?f ?w ?a) = eSuc (llength ?w)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 1)))),
    ("Coinductive_List_Extensions.esize_prefixes",
     "esize {v. v <= ?w} = eSuc (llength ?w)",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, t_empty)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Coinductive_List_Extensions.linfinite_llength",
     "linfinite ?w ==> enat ?k < llength ?w",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 1))
            )],
       template_inequation
        (less_than, template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Coinductive_List_Extensions.lprefix_ltake",
     "?u <= ?v ==> ?u = ltake (llength ?u) ?v",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_var 1,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Coinductive_List_Extensions.lproject_lfinite",
     "lfinite (lproject ?A ?w) = finite (liset ?A ?w)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty), template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Coinductive_List_Extensions.lproject_llength",
     "llength (lproject ?A ?w) = esize (liset ?A ?w)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty), template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Coinductive_List_Extensions.lproject_to_lselect",
     "lproject ?A ?w = lselect (liset ?A ?w) ?w",
     template_equation
      (template_app
        (template_app (template_hole 3, t_empty), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Coinductive_List_Extensions.finite_UNIV_llength_eq",
     "finite UNIV ==> finite {w. llength w = enat ?n}",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_hole 5))],
       template_predicate
        (
           template_app
            (template_hole 4, template_app (template_hole 3, t_empty))
           ))),
    ("Coinductive_List_Extensions.finite_UNIV_llength_le",
     "finite UNIV ==> finite {w. llength w <= enat ?n}",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_hole 5))],
       template_predicate
        (
           template_app
            (template_hole 4, template_app (template_hole 3, t_empty))
           ))),
    ("Coinductive_List_Extensions.liset_mono",
     "?u <= ?v ==> liset ?A ?u <= liset ?A ?v",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Coinductive_List_Extensions.lselect_prefix",
     "?u <= ?v ==> lselect ?s ?u <= lselect ?s ?v",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Coinductive_List_Extensions.lisetD",
     "?i : liset ?A ?w ==> enat ?i < llength ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_than, template_app (template_hole 1, template_var 2),
         template_app (template_hole 0, template_var 0)))),
    ("Coinductive_List_Extensions.lisetD",
     "?i : liset ?A ?w ==> ?w ?! ?i : ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_var 1)
           ))),
    ("Coinductive_List_Extensions.liset_ltake",
     "liset ?A (ltake (enat ?k) ?w) = liset ?A ?w Int {..<?k}",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("Coinductive_List_Extensions.lselect_lnull",
     "lnull (lselect ?s ?w) = (ALL i:?s. llength ?w <= enat i)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 0), t_empty))),
    ("Coinductive_List_Extensions.lprefix_infinite",
     "[| ?u <= ?v; linfinite ?u |] ==> ?u = ?v",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 1))
            )],
       template_equation (template_var 1, template_var 0))),
    ("Coinductive_List_Extensions.lscan_simps",
     "lscan ?f (?x % ?xs) ?a = ?a % lscan ?f ?xs (?f ?x ?a)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 1),
           template_app
            (template_app (template_var 3, template_var 2),
             template_var 0))))),
    ("Coinductive_List_Extensions.lselect_lproject",
     "lproject ?A (lselect ?s ?w) = lselect (?s Int liset ?A ?w) ?w",
     template_equation
      (template_app
        (template_app (template_hole 4, t_empty),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))))),
    ("Coinductive_List_Extensions.least_lselect_llength",
     "~ lnull (lselect ?s ?w) ==> enat (least ?s) < llength ?w",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 1),
                    template_var 0))
                )
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 3, template_app (template_hole 2, t_empty)),
         template_app (template_hole 0, template_var 1)))),
    ("Coinductive_List_Extensions.lselect_llength",
     "llength (lselect ?s ?w) = esize {i: ?s. enat i < llength ?w}",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app
        (template_hole 5, template_app (template_hole 4, t_empty)))),
    ("Coinductive_List_Extensions.lselect_restrict_indices",
     "lselect {i: ?s. enat i < llength ?w} ?w = lselect ?s ?w",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1),
         template_app (template_hole 5, t_empty)),
       template_app
        (template_app (template_hole 6, template_var 1), template_var 0))),
    ("Coinductive_List_Extensions.liset_cons_not_member",
     "?a ~: ?A ==> liset ?A (?a % ?w) = Suc ` liset ?A ?w",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))))),
    ("Coinductive_List_Extensions.ltake_llast",
     "enat ?k < llength ?w ==> llast (ltake (enat (Suc ?k)) ?w) = ?w ?! ?k",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 6, template_var 1),
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 6,
                 template_app (template_hole 1, template_var 1))),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Coinductive_List_Extensions.liset_suffix",
     "[| ?i : liset ?A ?u; ?u <= ?v |] ==> ?i : liset ?A ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0))
           ))),
    ("Coinductive_List_Extensions.lproject_prefix",
     "?u <= ?v ==> lproject ?A ?u <= lproject ?A ?v",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, t_empty), template_var 2),
         template_app
          (template_app (template_hole 1, t_empty), template_var 1)))),
    ("Coinductive_List_Extensions.lselect_to_lproject",
     "lselect ?s ?w =
      lmap fst
       (lproject (UNIV \<times> ?s) (?w \<bar>\<bar> iterates Suc 0))",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 9, template_hole 8),
         template_app
          (template_app (template_hole 7, t_empty),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 0)))))),
    ("Coinductive_List_Extensions.lisetI",
     "[| enat ?i < llength ?w; ?w ?! ?i : ?A |] ==> ?i : liset ?A ?w",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 5, template_var 2),
          template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Coinductive_List_Extensions.prefixes_set",
     "{v. v <= ?w} = {ltake k ?w |k. k <= llength ?w}",
     template_equation
      (template_app (template_hole 7, t_empty),
       template_app (template_hole 7, t_empty))),
    ("Coinductive_List_Extensions.liset_cons_member",
     "?a : ?A ==> liset ?A (?a % ?w) = {0} Un Suc ` liset ?A ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 7, template_var 1),
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_hole 2)),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_app
              (template_app (template_hole 7, template_var 1),
               template_var 0)))))),
    ("Coinductive_List_Extensions.lselect_lnth",
     "enat ?i < llength (lselect ?s ?w) ==>
      lselect ?s ?w ?! ?i = ?w ?! nth_least ?s ?i",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 5, template_var 2),
          template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("Coinductive_List_Extensions.mcont2mcont_liset",
     "mcont ?lub ?ord lSup lprefix ?t ==>
      mcont ?lub ?ord \<Union> (<=) (%x. liset ?A (?t x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 3),
                    template_var 2),
                  template_hole 5),
                template_hole 4),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 3),
                   template_var 2),
                 template_hole 2),
               template_hole 1),
             t_empty)
           ))),
    ("Coinductive_List_Extensions.prefix_subsume",
     "[| ?v <= ?w; ?u <= ?w; llength ?v <= llength ?u |] ==> ?v <= ?u",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 0, template_var 1),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 2),
          template_app (template_hole 0, template_var 0))],
       template_inequation (less_equals, template_var 2, template_var 0))),
    ("Coinductive_List_Extensions.llength_less_llength_lselect_less",
     "(enat ?i < esize ?s & enat (nth_least ?s ?i) < llength ?w) =
      (enat ?i < llength (lselect ?s ?w))",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 2)),
             template_app (template_hole 3, template_var 1))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 2))),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 2)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Coinductive_List_Extensions.lselect_lselect",
     "lselect ?t (lselect ?s ?w) =
      lselect (nth_least ?s ` {i: ?t. enat i < esize ?s}) ?w",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 8, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 8, template_var 2),
         template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 1)),
           template_app (template_hole 5, t_empty))))),
    ("Coinductive_List_Extensions.lproject_lselect_subset",
     "liset ?A ?w <= ?s ==> lproject ?A (lselect ?s ?w) = lproject ?A ?w",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_var 2), template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 2, t_empty), template_var 1)))),
    ("Coinductive_List_Extensions.lselect_discard_end",
     "(!!i. i : ?s ==> i < ?k) ==>
      lselect ?s (ltake (enat ?k) ?w) = lselect ?s ?w",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1)),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_var 2)))),
    ("Coinductive_List_Extensions.not_lnull_lappend_endE",
     "[| ~ lnull ?w; !!a v. ?w = v $ <a> ==> ?thesis |] ==> ?thesis",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 6, template_var 1))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Coinductive_List_Extensions.not_lnull_lappend_startE",
     "[| ~ lnull ?w; !!a v. ?w = <a> $ v ==> ?thesis |] ==> ?thesis",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 6, template_var 1))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Coinductive_List_Extensions.liset_cont",
     "[| Complete_Partial_Order.chain (<=) ?C; ?C ~= {} |]
      ==> liset ?A (\<Squnion> ?C) = \<Union> (liset ?A ` ?C)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_hole 8),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app (template_hole 2, template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 1))))),
    ("Coinductive_List_Extensions.llist_lift_admissible",
     "[| ccpo.admissible lSup lprefix ?P;
         !!u. [| u <= ?v; lfinite u |] ==> ?P u |]
      ==> ?P ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_hole 4),
                template_hole 3),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Coinductive_List_Extensions.liset_prefix",
     "[| ?i : liset ?A ?v; ?u <= ?v; enat ?i < llength ?u |]
      ==> ?i : liset ?A ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1))
            ),
        template_inequation (less_equals, template_var 0, template_var 1),
        template_inequation
         (less_than, template_app (template_hole 1, template_var 3),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 3),
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 0))
           ))),
    ("Coinductive_List_Extensions.admissible_lprefixI",
     "[| mcont ?lub ?ord lSup lprefix ?f; mcont ?lub ?ord lSup lprefix ?g |]
      ==> ccpo.admissible ?lub ?ord (%x. lprefix (?f x) (?g x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2),
                  template_hole 2),
                template_hole 1),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2),
                  template_hole 2),
                template_hole 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             t_empty)
           ))),
    ("Coinductive_List_Extensions.lselect_lselect'",
     "(!!i. i : ?t ==> enat i < esize ?s) ==>
      lselect ?t (lselect ?s ?w) = lselect (nth_least ?s ` ?t) ?w",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 2))))),
    ("Coinductive_List_Extensions.lselect_discard_start",
     "(!!i. i : ?s ==> ?k <= i) ==>
      lselect {i. ?k + i : ?s} (ldropn ?k ?w) = lselect ?s ?w",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_app (template_hole 1, t_empty)),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_var 2)))),
    ("Coinductive_List_Extensions.lproject_lnth",
     "enat ?i < llength (lproject ?A ?w) ==>
      lproject ?A ?w ?! ?i = ?w ?! nth_least (liset ?A ?w) ?i",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 7, template_var 2),
          template_app
           (template_hole 6,
            template_app
             (template_app (template_hole 5, t_empty), template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 5, t_empty), template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2))))),
    ("Coinductive_List_Extensions.lproject_prefix_limit",
     "(!!v. [| v <= ?w; lfinite v |] ==> lproject ?A v <= ?x) ==>
      lproject ?A ?w <= ?x",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, t_empty), template_var 2),
         template_var 0))),
    ("Coinductive_List_Extensions.lselect_least",
     "~ lnull (lselect ?s ?w) ==>
      lselect ?s ?w = ?w ?! least ?s % lselect (?s - {least ?s}) ?w",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 8, template_var 1),
                    template_var 0))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 8, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_app (template_hole 4, t_empty))),
           template_app
            (template_app (template_hole 8, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 4, t_empty)),
                 template_hole 0))))))),
    ("Coinductive_List_Extensions.lselect_lproject'",
     "(!!i. i : ?s ==> enat i < llength ?w) ==>
      lproject ?A (lselect ?s ?w) = lselect (?s Int liset ?A ?w) ?w",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 4, t_empty),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))))),
    ("Coinductive_List_Extensions.llength_lappend_endE",
     "[| eSuc ?n <= llength ?w;
         !!a v. [| ?w = v $ <a>; ?n <= llength v |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 7, template_var 2),
          template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Coinductive_List_Extensions.llength_lappend_startE",
     "[| eSuc ?n <= llength ?w;
         !!a v. [| ?w = <a> $ v; ?n <= llength v |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 7, template_var 2),
          template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Coinductive_List_Extensions.lproject_prefix_limit'",
     "(!!k. EX v<=?w. enat k < llength v & lproject ?A v <= ?x) ==>
      lproject ?A ?w <= ?x",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, t_empty), template_var 2),
         template_var 0))),
    ("Coinductive_List_Extensions.llength_lappend_end'E",
     "[| llength ?w = enat (Suc ?n);
         !!a v. [| ?w = v $ <a>; llength v = enat ?n |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 2),
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_var 1))),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Coinductive_List_Extensions.llength_lappend_start'E",
     "[| llength ?w = enat (Suc ?n);
         !!a v. [| ?w = <a> $ v; llength v = enat ?n |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 2),
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_var 1))),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Coinductive_List_Extensions.llist_nth_eqI",
     "[| llength ?u = llength ?v;
         !!i. [| enat i < llength ?u; enat i < llength ?v |]
              ==> ?u ?! i = ?v ?! i |]
      ==> ?u = ?v",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 1),
          template_app (template_hole 6, template_var 0)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Coinductive_List_Extensions.lproject_ltake",
     "enat ?k <= llength (lproject ?A ?w) ==>
      lproject ?A (ltake (enat (nth_least (lift (liset ?A ?w)) ?k)) ?w) =
      ltake (enat ?k) (lproject ?A ?w)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 8, template_var 2),
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, t_empty), template_var 0)))],
       template_equation
        (template_app
          (template_app (template_hole 6, t_empty),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 0, template_var 1),
                         template_var 0))),
                   template_var 2))),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 8, template_var 2)),
           template_app
            (template_app (template_hole 6, t_empty), template_var 0))))),
    ("Coinductive_List_Extensions.lselect_lselect''",
     "[| !!i. i : ?s ==> enat i < llength ?w;
         !!i. i : ?t ==> enat i < llength (lselect ?s ?w) |]
      ==> lselect ?t (lselect ?s ?w) = lselect (nth_least ?s ` ?t) ?w",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 2)),
           template_var 0),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 0)))))]:
   (string * thm * template) list
### theory "Draft.Coinductive_List_ExtensionsTemplates"
### 0.653s elapsed time, 1.342s cpu time, 0.813s GC time
val it = (): unit
