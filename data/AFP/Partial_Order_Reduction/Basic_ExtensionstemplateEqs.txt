   [("Basic_Extensions.const_apply", "const ?x ?y = ?x",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_var 1)),
    ("Basic_Extensions.const2_apply", "const2 ?x ?y ?z = ?x",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0),
       template_var 2)),
    ("Basic_Extensions.const3_apply", "const3 ?x ?y ?z ?u = ?x",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_var 3)),
    ("Basic_Extensions.zip_fun_simps", "fst o (?f \<parallel> ?g) = ?f",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("Basic_Extensions.zip_fun_simps", "snd o (?f \<parallel> ?g) = ?g",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("Basic_Extensions.mono_curry_left", "mono (curry o ?h) = mono ?h",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Basic_Extensions.mono_split_left", "mono (case_prod o ?h) = mono ?h",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Basic_Extensions.mono_split_right", "mono (?h o case_prod) = mono ?h",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app (template_hole 0, template_var 0))),
    ("Basic_Extensions.mono_curry_right", "mono (?h o curry) = mono ?h",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app (template_hole 0, template_var 0))),
    ("Basic_Extensions.const4_apply", "const4 ?x ?y ?z ?u ?v = ?x",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_var 4)),
    ("Basic_Extensions.label_select", "label (?p, ?a, ?q) = ?a",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_var 1)),
    ("Basic_Extensions.swap_simps", "swap (?a, ?b) = (?b, ?a)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Basic_Extensions.const5_apply", "const5 ?x ?y ?z ?u ?v ?w = ?x",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_var 5)),
    ("Basic_Extensions.zip_fun_simps", "fst o ?h \<parallel> snd o ?h = ?h",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_var 0)),
    ("Basic_Extensions.curry_le", "(curry ?f <= curry ?g) = (?f <= ?g)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Basic_Extensions.split_le",
     "((%(x, y). ?f x y) <= (%(x, y). ?g x y)) = (?f <= ?g)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Basic_Extensions.gfp_curry_split",
     "gfp (curry o ?f o case_prod) = curry (gfp ?f)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 0)),
           template_hole 1)),
       template_app
        (template_hole 2, template_app (template_hole 0, template_var 0)))),
    ("Basic_Extensions.gfp_split_curry",
     "gfp (case_prod o ?f o curry) = (%(x, y). gfp ?f x y)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 0)),
           template_hole 1)),
       template_app
        (template_hole 2, template_app (template_hole 0, template_var 0)))),
    ("Basic_Extensions.zip_fun_simps",
     "(?f \<parallel> ?g) ?x = (?f ?x, ?g ?x)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 2, template_var 0)),
         template_app (template_var 1, template_var 0)))),
    ("Basic_Extensions.zip_fun_simps",
     "fst ` range (?f \<parallel> ?g) = range ?f",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_hole 1)),
       template_app
        (template_app (template_hole 0, template_var 1), template_hole 1))),
    ("Basic_Extensions.zip_fun_simps",
     "snd ` range (?f \<parallel> ?g) = range ?g",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_hole 1)),
       template_app
        (template_app (template_hole 0, template_var 0), template_hole 1))),
    ("Basic_Extensions.eq_le_absorb", "(?x = ?y & ?x <= ?y) = (?x = ?y)",
     template_bimplication
      (template_dunno, template_equation (template_var 1, template_var 0))),
    ("Basic_Extensions.eq_le_absorb", "(?x <= ?y & ?x = ?y) = (?x = ?y)",
     template_bimplication
      (template_dunno, template_equation (template_var 1, template_var 0))),
    ("Basic_Extensions.Collect_split",
     "{x. ?P (%(xa, y). x xa y)} = curry ` {x. ?P x}",
     template_equation
      (template_app (template_hole 4, t_empty),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, t_empty)))),
    ("Basic_Extensions.Collect_curry",
     "{x. ?P (curry x)} = case_prod ` {x. ?P x}",
     template_equation
      (template_app (template_hole 4, t_empty),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, t_empty)))),
    ("Basic_Extensions.INFM_Suc", "(INFM i. ?P (Suc i)) = (INFM i. ?P i)",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty), template_hole 0),
       template_app
        (template_app (template_hole 2, t_empty), template_hole 0))),
    ("Basic_Extensions.push_simps", "push ((?x, ?y), ?z) = (?x, ?y, ?z)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Basic_Extensions.pull_simps", "pull (?x, ?y, ?z) = ((?x, ?y), ?z)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Basic_Extensions.INFM_minus",
     "(INFM i. ?P (i - ?n)) = (INFM i. ?P i)",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty), template_hole 0),
       template_app
        (template_app (template_hole 2, t_empty), template_hole 0))),
    ("Basic_Extensions.INFM_plus", "(INFM i. ?P (i + ?n)) = (INFM i. ?P i)",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty), template_hole 0),
       template_app
        (template_app (template_hole 2, t_empty), template_hole 0)))]
