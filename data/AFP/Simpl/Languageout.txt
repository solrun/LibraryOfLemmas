Loading theory "Draft.Language" (required by "Draft.LanguageTemplates")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.LanguageTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.LanguageTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.LanguageTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.130s elapsed time, 0.542s cpu time, 0.000s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.LanguageTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.255s elapsed time, 1.015s cpu time, 0.064s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.LanguageTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.317s elapsed time, 1.255s cpu time, 0.150s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.LanguageTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.002s elapsed time, 3.749s cpu time, 0.868s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.104s elapsed time, 4.022s cpu time, 0.864s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.017s elapsed time, 6.299s cpu time, 1.222s GC time
Loading theory "Draft.Templates" (required by "Draft.LanguageTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.052s elapsed time, 0.108s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.LanguageTemplates")
consts
  switch ::
    "('s => 'v) => ('v set * ('s, 'p, 'f) com) list => ('s, 'p, 'f) com"
consts
  guards :: "('f * 's set) list => ('s, 'p, 'f) com => ('s, 'p, 'f) com"
consts
  flatten :: "('s, 'p, 'f) com => ('s, 'p, 'f) com list"
consts
  sequence ::
    "(('s, 'p, 'f) com => ('s, 'p, 'f) com => ('s, 'p, 'f) com)
     => ('s, 'p, 'f) com list => ('s, 'p, 'f) com"
consts
  normalize :: "('s, 'p, 'f) com => ('s, 'p, 'f) com"
consts
  strip_guards :: "'f set => ('s, 'p, 'f) com => ('s, 'p, 'f) com"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.538s elapsed time, 1.115s cpu time, 0.097s GC time
consts
  mark_guards :: "'f => ('s, 'p, 'g) com => ('s, 'p, 'f) com"
### No equation for constructor "Skip"
### No equation for constructor "Basic"
### No equation for constructor "Spec"
### No equation for constructor "Seq"
### No equation for constructor "Cond"
### No equation for constructor "While"
### No equation for constructor "Call"
### No equation for constructor "DynCom"
### No equation for constructor "Throw"
### No equation for constructor "Catch"
consts
  dest_Guard :: "('s, 'p, 'f) com => 'f * 's set * ('s, 'p, 'f) com"
consts
  merge_guards :: "('s, 'p, 'f) com => ('s, 'p, 'f) com"
consts
  noguards :: "('s, 'p, 'f) com => bool"
consts
  nothrows :: "('s, 'p, 'f) com => bool"
Proofs for inductive predicate(s) "com_relp"
  Proving monotonicity ...
### Legacy feature! Old 'recdef' command -- use 'fun' or 'function' instead
Defining recursive function "Language.inter_guards" ...
Proving induction theorem ...
Postprocessing ...
Simplifying nested TCs ...
... Postprocessing finished
Proving unsplit equation...
th:
(Skip \<inter>\<^sub>g Skip) = None ==> (Skip \<inter>\<^sub>g Skip) = None
split ths:
(Skip \<inter>\<^sub>g Basic ?bc) = None
(Skip \<inter>\<^sub>g Spec ?bd) = None
(Skip \<inter>\<^sub>g Seq ?be ?bf) = None
(Skip \<inter>\<^sub>g Cond ?bg ?bh ?bi) = None
(Skip \<inter>\<^sub>g While ?bj ?bk) = None
(Skip \<inter>\<^sub>g Call ?bl) = None
(Skip \<inter>\<^sub>g DynCom ?bm) = None
(Skip \<inter>\<^sub>g Guard ?bn ?bo ?bp) = None
(Skip \<inter>\<^sub>g Throw) = None
(Skip \<inter>\<^sub>g Catch ?bq ?br) = None
(Basic ?w \<inter>\<^sub>g Skip) = None
(Basic ?w \<inter>\<^sub>g Spec ?cj) = None
(Basic ?w \<inter>\<^sub>g Seq ?ck ?cl) = None
(Basic ?w \<inter>\<^sub>g Cond ?cm ?cn ?co) = None
(Basic ?w \<inter>\<^sub>g While ?cp ?cq) = None
(Basic ?w \<inter>\<^sub>g Call ?cr) = None
(Basic ?w \<inter>\<^sub>g DynCom ?cs) = None
(Basic ?w \<inter>\<^sub>g Guard ?ct ?cu ?cv) = None
(Basic ?w \<inter>\<^sub>g Throw) = None
(Basic ?w \<inter>\<^sub>g Catch ?cw ?cx) = None
(Spec ?x \<inter>\<^sub>g Skip) = None
(Spec ?x \<inter>\<^sub>g Basic ?do) = None
(Spec ?x \<inter>\<^sub>g Seq ?dq ?dr) = None
(Spec ?x \<inter>\<^sub>g Cond ?ds ?dt ?du) = None
(Spec ?x \<inter>\<^sub>g While ?dv ?dw) = None
(Spec ?x \<inter>\<^sub>g Call ?dx) = None
(Spec ?x \<inter>\<^sub>g DynCom ?dy) = None
(Spec ?x \<inter>\<^sub>g Guard ?dz ?ea ?eb) = None
(Spec ?x \<inter>\<^sub>g Throw) = None
(Spec ?x \<inter>\<^sub>g Catch ?ec ?ed) = None
(Seq ?y ?z \<inter>\<^sub>g Skip) = None
(Seq ?y ?z \<inter>\<^sub>g Basic ?ev) = None
(Seq ?y ?z \<inter>\<^sub>g Spec ?ew) = None
(Seq ?y ?z \<inter>\<^sub>g Cond ?ez ?fa ?fb) = None
(Seq ?y ?z \<inter>\<^sub>g While ?fc ?fd) = None
(Seq ?y ?z \<inter>\<^sub>g Call ?fe) = None
(Seq ?y ?z \<inter>\<^sub>g DynCom ?ff) = None
(Seq ?y ?z \<inter>\<^sub>g Guard ?fg ?fh ?fi) = None
(Seq ?y ?z \<inter>\<^sub>g Throw) = None
(Seq ?y ?z \<inter>\<^sub>g Catch ?fj ?fk) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Skip) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Basic ?gb) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Spec ?gc) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Seq ?gd ?ge) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g While ?gi ?gj) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Call ?gk) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g DynCom ?gl) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Guard ?gm ?gn ?go) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Throw) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Catch ?gp ?gq) = None
(While ?ad ?ae \<inter>\<^sub>g Skip) = None
(While ?ad ?ae \<inter>\<^sub>g Basic ?hh) = None
(While ?ad ?ae \<inter>\<^sub>g Spec ?hi) = None
(While ?ad ?ae \<inter>\<^sub>g Seq ?hj ?hk) = None
(While ?ad ?ae \<inter>\<^sub>g Cond ?hl ?hm ?hn) = None
(While ?ad ?ae \<inter>\<^sub>g Call ?hq) = None
(While ?ad ?ae \<inter>\<^sub>g DynCom ?hr) = None
(While ?ad ?ae \<inter>\<^sub>g Guard ?hs ?ht ?hu) = None
(While ?ad ?ae \<inter>\<^sub>g Throw) = None
(While ?ad ?ae \<inter>\<^sub>g Catch ?hv ?hw) = None
(Call ?af \<inter>\<^sub>g Skip) = None
(Call ?af \<inter>\<^sub>g Basic ?in) = None
(Call ?af \<inter>\<^sub>g Spec ?io) = None
(Call ?af \<inter>\<^sub>g Seq ?ip ?iq) = None
(Call ?af \<inter>\<^sub>g Cond ?ir ?is ?it) = None
(Call ?af \<inter>\<^sub>g While ?iu ?iv) = None
(Call ?af \<inter>\<^sub>g DynCom ?ix) = None
(Call ?af \<inter>\<^sub>g Guard ?iy ?iz ?ja) = None
(Call ?af \<inter>\<^sub>g Throw) = None
(Call ?af \<inter>\<^sub>g Catch ?jb ?jc) = None
(DynCom ?ag \<inter>\<^sub>g Skip) = None
(DynCom ?ag \<inter>\<^sub>g Basic ?jt) = None
(DynCom ?ag \<inter>\<^sub>g Spec ?ju) = None
(DynCom ?ag \<inter>\<^sub>g Seq ?jv ?jw) = None
(DynCom ?ag \<inter>\<^sub>g Cond ?jx ?jy ?jz) = None
(DynCom ?ag \<inter>\<^sub>g While ?ka ?kb) = None
(DynCom ?ag \<inter>\<^sub>g Call ?kc) = None
(DynCom ?ag \<inter>\<^sub>g Guard ?ke ?kf ?kg) = None
(DynCom ?ag \<inter>\<^sub>g Throw) = None
(DynCom ?ag \<inter>\<^sub>g Catch ?kh ?ki) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Skip) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Basic ?kz) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Spec ?la) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Seq ?lb ?lc) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Cond ?ld ?le ?lf) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g While ?lg ?lh) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Call ?li) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g DynCom ?lj) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Throw) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Catch ?ln ?lo) = None
(Throw \<inter>\<^sub>g Skip) = None
(Throw \<inter>\<^sub>g Basic ?mf) = None
(Throw \<inter>\<^sub>g Spec ?mg) = None
(Throw \<inter>\<^sub>g Seq ?mh ?mi) = None
(Throw \<inter>\<^sub>g Cond ?mj ?mk ?ml) = None
(Throw \<inter>\<^sub>g While ?mm ?mn) = None
(Throw \<inter>\<^sub>g Call ?mo) = None
(Throw \<inter>\<^sub>g DynCom ?mp) = None
(Throw \<inter>\<^sub>g Guard ?mq ?mr ?ms) = None
(Throw \<inter>\<^sub>g Catch ?mt ?mu) = None
(Catch ?ak ?al \<inter>\<^sub>g Skip) = None
(Catch ?ak ?al \<inter>\<^sub>g Basic ?nl) = None
(Catch ?ak ?al \<inter>\<^sub>g Spec ?nm) = None
(Catch ?ak ?al \<inter>\<^sub>g Seq ?nn ?no) = None
(Catch ?ak ?al \<inter>\<^sub>g Cond ?np ?nq ?nr) = None
(Catch ?ak ?al \<inter>\<^sub>g While ?ns ?nt) = None
(Catch ?ak ?al \<inter>\<^sub>g Call ?nu) = None
(Catch ?ak ?al \<inter>\<^sub>g DynCom ?nv) = None
(Catch ?ak ?al \<inter>\<^sub>g Guard ?nw ?nx ?ny) = None
(Catch ?ak ?al \<inter>\<^sub>g Throw) = None
--
### recdef (solve_eq): splitto: cannot find variable to split on
Proofs for inductive predicate(s) "subseteq_guards"
  Proving monotonicity ...
### theory "Draft.Language"
### 4.188s elapsed time, 9.611s cpu time, 1.468s GC time
Loading theory "Draft.LanguageTemplates"
val templateLemmas =
   [("Language.subseteq_guards_refl", "?c \<subseteq>\<^sub>g ?c",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Language.noguards_strip_guards", "noguards (strip_guards UNIV ?c)",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))
         )),
    ("Language.flatten_nonEmpty", "flatten ?c ~= []",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Language.is_Guard_simps", "is_Guard (Basic ?f) = False",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Language.is_Guard_simps", "is_Guard (raise ?f) = False",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Language.is_Guard_simps", "is_Guard (Spec ?r) = False",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Language.is_Guard_simps", "is_Guard (Call ?p) = False",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Language.is_Guard_simps", "is_Guard (DynCom ?C) = False",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Language.mark_guards_simps", "mark_guards ?f Skip = Skip",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Language.mark_guards_simps", "mark_guards ?f Throw = Throw",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Language.strip_guards_simps", "strip_guards ?F Skip = Skip",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Language.strip_guards_simps", "strip_guards ?F Throw = Throw",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Language.fst_guaranteeStripPair",
     "fst (guaranteeStripPair ?f ?g) = ?f",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("Language.snd_guaranteeStripPair",
     "snd (guaranteeStripPair ?f ?g) = ?g",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("Language.is_Guard_switch", "is_Guard (switch ?v ?Vc) = False",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Language.is_Guard_simps", "is_Guard (bseq ?c1.0 ?c2.0) = False",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Language.is_Guard_simps", "is_Guard (Catch ?c1.0 ?c2.0) = False",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Language.is_Guard_simps", "is_Guard (Seq ?c1.0 ?c2.0) = False",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Language.is_Guard_simps", "is_Guard (While ?b ?c) = False",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Language.is_Guard_simps", "is_Guard (bind ?e ?cv) = False",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Language.merge_guards_raise", "merge_guards (raise ?g) = raise ?g",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Language.normalize_raise", "Language.normalize (raise ?f) = raise ?f",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Language.merge_guards_simps", "merge_guards (Basic ?g) = Basic ?g",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Language.merge_guards_simps", "merge_guards (Call ?p) = Call ?p",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Language.merge_guards_simps", "merge_guards (Spec ?r) = Spec ?r",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Language.normalize_simps", "Language.normalize (Basic ?f) = Basic ?f",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Language.normalize_simps", "Language.normalize (Call ?p) = Call ?p",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Language.normalize_simps", "Language.normalize (Spec ?r) = Spec ?r",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Language.dom_strip", "dom (strip ?F ?\<Gamma>) = dom ?\<Gamma>",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Language.is_Guard_simps", "is_Guard (Cond ?b ?c1.0 ?c2.0) = False",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_hole 0)),
    ("Language.is_Guard_simps",
     "is_Guard (condCatch ?c1.0 ?b ?c2.0) = False",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_hole 0)),
    ("Language.is_Guard_simps", "is_Guard (Guard ?F ?g ?c) = True",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_hole 0)),
    ("Language.is_Guard_simps", "is_Guard (guaranteeStrip ?F ?g ?c) = True",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_hole 0)),
    ("Language.mark_guards_raise", "mark_guards ?f (raise ?g) = raise ?g",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Language.strip_guards_raise", "strip_guards ?F (raise ?f) = raise ?f",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Language.mark_guards_simps", "mark_guards ?f (Basic ?g) = Basic ?g",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Language.mark_guards_simps", "mark_guards ?f (Call ?p) = Call ?p",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Language.mark_guards_simps", "mark_guards ?f (Spec ?r) = Spec ?r",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Language.strip_guards_simps", "strip_guards ?F (Basic ?f) = Basic ?f",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Language.strip_guards_simps", "strip_guards ?F (Call ?p) = Call ?p",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Language.strip_guards_simps", "strip_guards ?F (Spec ?r) = Spec ?r",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Language.is_Guard_simps", "is_Guard (whileAnno ?b ?I ?V ?c) = False",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_hole 0)),
    ("Language.is_Guard_simps",
     "is_Guard (block ?init ?bdy ?return ?cont) = False",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_hole 0)),
    ("Language.is_Guard_simps",
     "is_Guard (call ?init ?p ?return ?cont) = False",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_hole 0)),
    ("Language.is_Guard_simps",
     "is_Guard (dynCall ?init ?P ?return ?cont) = False",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_hole 0)),
    ("Language.flatten_sequence_flatten",
     "flatten (sequence Seq (flatten ?c)) = flatten ?c",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_app (template_hole 2, template_var 0))),
       template_app (template_hole 2, template_var 0))),
    ("Language.flatten_simps", "flatten (Basic ?f) = [Basic ?f]",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 2, template_var 0)),
         template_hole 0))),
    ("Language.flatten_simps", "flatten (Call ?p) = [Call ?p]",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 2, template_var 0)),
         template_hole 0))),
    ("Language.flatten_simps", "flatten (DynCom ?c) = [DynCom ?c]",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 2, template_var 0)),
         template_hole 0))),
    ("Language.flatten_simps", "flatten (Spec ?r) = [Spec ?r]",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 2, template_var 0)),
         template_hole 0))),
    ("Language.sequence_flatten_normalize",
     "sequence Seq (flatten (Language.normalize ?c)) =
      Language.normalize ?c",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app (template_hole 0, template_var 0))),
    ("Language.subseteq_guards_Skip",
     "?c \<subseteq>\<^sub>g Skip ==> ?c = Skip",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_equation (template_var 0, template_hole 1))),
    ("Language.subseteq_guards_Throw",
     "?c \<subseteq>\<^sub>g Throw ==> ?c = Throw",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_equation (template_var 0, template_hole 1))),
    ("Language.com_rel_elim_cases", "(?c, Skip) : com_rel ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_hole 1)),
              template_hole 0)
            )],
       template_predicate (template_var 0))),
    ("Language.com_rel_elim_cases", "(?c, Throw) : com_rel ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_hole 1)),
              template_hole 0)
            )],
       template_predicate (template_var 0))),
    ("Language.guaranteeStripPair_split_conv",
     "(case guaranteeStripPair ?f ?g of (x, xa) => ?c x xa) = ?c ?f ?g",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_var 2, template_var 1), template_var 0))),
    ("Language.strip_idem",
     "strip ?F (strip ?F ?\<Gamma>) = strip ?F ?\<Gamma>",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Language.is_Guard_simps",
     "is_Guard (fcall ?init ?p ?return ?result ?cont') = False",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_hole 0)),
    ("Language.normalize_guards",
     "Language.normalize (guards ?gs ?c) =
      guards ?gs (Language.normalize ?c)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("Language.strip_guards_idem",
     "strip_guards ?F (strip_guards ?F ?c) = strip_guards ?F ?c",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Language.merge_guards_simps",
     "merge_guards (DynCom ?c) = DynCom (%s. merge_guards (?c s))",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, t_empty))),
    ("Language.normalize_simps",
     "Language.normalize (DynCom ?c) =
      DynCom (%s. Language.normalize (?c s))",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, t_empty))),
    ("Language.merge_guards_simps",
     "merge_guards (While ?b ?c) = While ?b (merge_guards ?c)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("Language.normalize_simps",
     "Language.normalize (While ?b ?c) = While ?b (Language.normalize ?c)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("Language.merge_guards_res_Skip",
     "merge_guards ?c = Skip ==> ?c = Skip",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 0), template_hole 0)],
       template_equation (template_var 0, template_hole 0))),
    ("Language.merge_guards_res_Throw",
     "merge_guards ?c = Throw ==> ?c = Throw",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 0), template_hole 0)],
       template_equation (template_var 0, template_hole 0))),
    ("Language.com_rel_elim_cases", "(?c, Basic ?f) : com_rel ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_app (template_hole 1, template_var 1))),
              template_hole 0)
            )],
       template_predicate (template_var 0))),
    ("Language.com_rel_elim_cases", "(?c, Call ?p) : com_rel ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_app (template_hole 1, template_var 1))),
              template_hole 0)
            )],
       template_predicate (template_var 0))),
    ("Language.com_rel_elim_cases", "(?c, Spec ?r) : com_rel ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_app (template_hole 1, template_var 1))),
              template_hole 0)
            )],
       template_predicate (template_var 0))),
    ("Language.flatten_raise", "flatten (raise ?f) = [Basic ?f, Throw]",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_app (template_hole 3, template_hole 1),
           template_hole 0)))),
    ("Language.flatten_bind", "flatten (bind ?e ?c) = [bind ?e ?c]",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Language.flatten_bseq",
     "flatten (bseq ?c1.0 ?c2.0) = flatten ?c1.0 @ flatten ?c2.0",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Language.flatten_switch",
     "flatten (switch ?v ?Vcs) = [switch ?v ?Vcs]",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Language.flatten_specAnno",
     "flatten (specAnno ?P ?c ?Q ?A) = flatten (?c undefined)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 2, template_app (template_var 2, template_hole 0)))),
    ("Language.flatten_simps",
     "flatten (Catch ?c\<^sub>1 ?c\<^sub>2) =
      [Catch ?c\<^sub>1 ?c\<^sub>2]",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Language.flatten_simps",
     "flatten (Seq ?c\<^sub>1 ?c\<^sub>2) =
      flatten ?c\<^sub>1 @ flatten ?c\<^sub>2",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Language.flatten_simps", "flatten (While ?b ?c) = [While ?b ?c]",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Language.merge_guards_bseq",
     "merge_guards (bseq ?c1.0 ?c2.0) =
      bseq (merge_guards ?c1.0) (merge_guards ?c2.0)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Language.merge_guards_simps",
     "merge_guards (Catch ?c\<^sub>1 ?c\<^sub>2) =
      Catch (merge_guards ?c\<^sub>1) (merge_guards ?c\<^sub>2)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Language.merge_guards_simps",
     "merge_guards (Seq ?c\<^sub>1 ?c\<^sub>2) =
      Seq (merge_guards ?c\<^sub>1) (merge_guards ?c\<^sub>2)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Language.normalize_simps",
     "Language.normalize (Catch ?c\<^sub>1 ?c\<^sub>2) =
      Catch (Language.normalize ?c\<^sub>1)
       (Language.normalize ?c\<^sub>2)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Language.strip_simp",
     "strip ?F ?\<Gamma> ?p = map_option (strip_guards ?F) (?\<Gamma> ?p)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 2)),
         template_app (template_var 1, template_var 0)))),
    ("Language.subseteq_guards_Basic",
     "?c \<subseteq>\<^sub>g Basic ?f ==> ?c = Basic ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_equation
        (template_var 1, template_app (template_hole 1, template_var 0)))),
    ("Language.subseteq_guards_Call",
     "?c \<subseteq>\<^sub>g Call ?p ==> ?c = Call ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_equation
        (template_var 1, template_app (template_hole 1, template_var 0)))),
    ("Language.subseteq_guards_Spec",
     "?c \<subseteq>\<^sub>g Spec ?r ==> ?c = Spec ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_equation
        (template_var 1, template_app (template_hole 1, template_var 0)))),
    ("Language.merge_guards_bind",
     "merge_guards (bind ?e ?c) = bind ?e (%v. merge_guards (?c v))",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Language.normalize_bind",
     "Language.normalize (bind ?e ?c) =
      bind ?e (%v. Language.normalize (?c v))",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Language.normalize_guaranteeStrip",
     "Language.normalize (guaranteeStrip ?f ?g ?c) =
      guaranteeStrip ?f ?g (Language.normalize ?c)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("Language.mark_guards_simps",
     "mark_guards ?f (DynCom ?c) = DynCom (%s. mark_guards ?f (?c s))",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, t_empty))),
    ("Language.strip_guards_simps",
     "strip_guards ?F (DynCom ?c) = DynCom (%s. strip_guards ?F (?c s))",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, t_empty))),
    ("Language.mark_guards_simps",
     "mark_guards ?f (While ?b ?c) = While ?b (mark_guards ?f ?c)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Language.normalize_simps",
     "Language.normalize (Guard ?f ?g ?c) =
      Guard ?f ?g (Language.normalize ?c)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("Language.strip_guards_simps",
     "strip_guards ?F (While ?b ?c) = While ?b (strip_guards ?F ?c)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Language.dest_Guard_guaranteeStrip",
     "dest_Guard (guaranteeStrip ?f ?g ?c) = (?f, ?g, ?c)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Language.dest_Guard_simps",
     "dest_Guard (Guard ?f ?g ?c) = (?f, ?g, ?c)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Language.flatten_single", "ALL c:set (flatten ?c'). flatten c = [c]",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0))),
           t_empty)
         )),
    ("Language.merge_guards_res_Basic",
     "merge_guards ?c = Basic ?f ==> ?c = Basic ?f",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 0, template_var 0))],
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Language.merge_guards_res_Call",
     "merge_guards ?c = Call ?p ==> ?c = Call ?p",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 0, template_var 0))],
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Language.merge_guards_res_Spec",
     "merge_guards ?c = Spec ?r ==> ?c = Spec ?r",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 0, template_var 0))],
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Language.flatten_condCatch",
     "flatten (condCatch ?c1.0 ?b ?c2.0) = [condCatch ?c1.0 ?b ?c2.0]",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Language.flatten_guaranteeStrip",
     "flatten (guaranteeStrip ?f ?g ?c) = [guaranteeStrip ?f ?g ?c]",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Language.flatten_while",
     "flatten (while ?gs ?b ?c) = [while ?gs ?b ?c]",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Language.flatten_simps",
     "flatten (Cond ?b ?c\<^sub>1 ?c\<^sub>2) =
      [Cond ?b ?c\<^sub>1 ?c\<^sub>2]",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Language.flatten_simps",
     "flatten (Guard ?f ?g ?c) = [Guard ?f ?g ?c]",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Language.merge_guards_condCatch",
     "merge_guards (condCatch ?c1.0 ?b ?c2.0) =
      condCatch (merge_guards ?c1.0) ?b (merge_guards ?c2.0)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 2)),
           template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("Language.normalize_condCatch",
     "Language.normalize (condCatch ?c1.0 ?b ?c2.0) =
      condCatch (Language.normalize ?c1.0) ?b (Language.normalize ?c2.0)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 2)),
           template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("Language.merge_guards_simps",
     "merge_guards (Cond ?b ?c\<^sub>1 ?c\<^sub>2) =
      Cond ?b (merge_guards ?c\<^sub>1) (merge_guards ?c\<^sub>2)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2),
           template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Language.normalize_simps",
     "Language.normalize (Cond ?b ?c\<^sub>1 ?c\<^sub>2) =
      Cond ?b (Language.normalize ?c\<^sub>1)
       (Language.normalize ?c\<^sub>2)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2),
           template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Language.mark_guards_bind",
     "mark_guards ?f (bind ?e ?c) = bind ?e (%v. mark_guards ?f (?c v))",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Language.mark_guards_bseq",
     "mark_guards ?f (bseq ?c1.0 ?c2.0) =
      bseq (mark_guards ?f ?c1.0) (mark_guards ?f ?c2.0)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Language.strip_guards_bind",
     "strip_guards ?F (bind ?e ?c) = bind ?e (%v. strip_guards ?F (?c v))",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Language.strip_guards_bseq",
     "strip_guards ?F (bseq ?c1.0 ?c2.0) =
      bseq (strip_guards ?F ?c1.0) (strip_guards ?F ?c2.0)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Language.mark_guards_guaranteeStrip",
     "mark_guards ?f (guaranteeStrip ?f' ?g ?c) =
      guaranteeStrip ?f ?g (mark_guards ?f ?c)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 2, template_var 3),
           template_var 0)))),
    ("Language.merge_guards_whileAnno",
     "merge_guards (whileAnno ?b ?I ?V ?c) =
      whileAnno ?b ?I ?V (merge_guards ?c)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("Language.normalize_whileAnno",
     "Language.normalize (whileAnno ?b ?I ?V ?c) =
      whileAnno ?b ?I ?V (Language.normalize ?c)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("Language.mark_guards_simps",
     "mark_guards ?f (Catch ?c\<^sub>1 ?c\<^sub>2) =
      Catch (mark_guards ?f ?c\<^sub>1) (mark_guards ?f ?c\<^sub>2)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Language.mark_guards_simps",
     "mark_guards ?f (Seq ?c\<^sub>1 ?c\<^sub>2) =
      Seq (mark_guards ?f ?c\<^sub>1) (mark_guards ?f ?c\<^sub>2)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Language.strip_guards_simps",
     "strip_guards ?F (Catch ?c\<^sub>1 ?c\<^sub>2) =
      Catch (strip_guards ?F ?c\<^sub>1) (strip_guards ?F ?c\<^sub>2)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Language.strip_guards_simps",
     "strip_guards ?F (Seq ?c\<^sub>1 ?c\<^sub>2) =
      Seq (strip_guards ?F ?c\<^sub>1) (strip_guards ?F ?c\<^sub>2)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Language.mark_guards_simps",
     "mark_guards ?f (Guard ?f' ?g ?c) = Guard ?f ?g (mark_guards ?f ?c)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 2, template_var 3),
           template_var 0)))),
    ("Language.flatten_block",
     "flatten (block ?init ?bdy ?return ?result) =
      [block ?init ?bdy ?return ?result]",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Language.flatten_call",
     "flatten (call ?init ?p ?return ?result) =
      [call ?init ?p ?return ?result]",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Language.flatten_dynCall",
     "flatten (dynCall ?init ?p ?return ?result) =
      [dynCall ?init ?p ?return ?result]",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Language.flatten_whileAnno",
     "flatten (whileAnno ?b ?I ?V ?c) = [whileAnno ?b ?I ?V ?c]",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Language.flatten_app",
     "flatten (sequence Seq (flatten ?c1.0 @ flatten ?c2.0)) =
      flatten ?c1.0 @ flatten ?c2.0",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 3, template_var 1)),
             template_app (template_hole 3, template_var 0)))),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 3, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Language.normalize_bseq",
     "Language.normalize (bseq ?c1.0 ?c2.0) =
      sequence bseq
       (flatten (Language.normalize ?c1.0) @
        flatten (Language.normalize ?c2.0))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 3),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app (template_hole 4, template_var 1))),
           template_app
            (template_hole 0,
             template_app (template_hole 4, template_var 0)))))),
    ("Language.normalize_simps",
     "Language.normalize (Seq ?c\<^sub>1 ?c\<^sub>2) =
      sequence Seq
       (flatten (Language.normalize ?c\<^sub>1) @
        flatten (Language.normalize ?c\<^sub>2))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 3),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app (template_hole 4, template_var 1))),
           template_app
            (template_hole 0,
             template_app (template_hole 4, template_var 0)))))),
    ("Language.inter_guards_Skip",
     "((Skip \<inter>\<^sub>g ?c2.0) = Some ?c) =
      (?c2.0 = Skip & ?c = Skip)",
     template_bimplication
      (template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_hole 3)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_hole 3))
           ))),
    ("Language.inter_guards_Throw",
     "((Throw \<inter>\<^sub>g ?c2.0) = Some ?c) =
      (?c2.0 = Throw & ?c = Throw)",
     template_bimplication
      (template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_hole 3)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_hole 3))
           ))),
    ("Language.mark_guards_condCatch",
     "mark_guards ?f (condCatch ?c1.0 ?b ?c2.0) =
      condCatch (mark_guards ?f ?c1.0) ?b (mark_guards ?f ?c2.0)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2)),
           template_var 1),
         template_app
          (template_app (template_hole 2, template_var 3),
           template_var 0)))),
    ("Language.merge_guards_specAnno",
     "merge_guards (specAnno ?P ?c ?Q ?A) =
      specAnno ?P (%s. merge_guards (?c undefined)) ?Q ?A",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3), t_empty),
           template_var 1),
         template_var 0))),
    ("Language.normalize_specAnno",
     "Language.normalize (specAnno ?P ?c ?Q ?A) =
      specAnno ?P (%s. Language.normalize (?c undefined)) ?Q ?A",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3), t_empty),
           template_var 1),
         template_var 0))),
    ("Language.strip_guards_condCatch",
     "strip_guards ?F (condCatch ?c1.0 ?b ?c2.0) =
      condCatch (strip_guards ?F ?c1.0) ?b (strip_guards ?F ?c2.0)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_var 0)))),
    ("Language.mark_guards_whileAnno",
     "mark_guards ?f (whileAnno ?b ?I ?V ?c) =
      whileAnno ?b ?I ?V (mark_guards ?f ?c)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_app
          (template_app (template_hole 2, template_var 4),
           template_var 0)))),
    ("Language.strip_guards_whileAnno",
     "strip_guards ?F (whileAnno ?b ?I ?V ?c) =
      whileAnno ?b ?I ?V (strip_guards ?F ?c)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 4),
           template_var 0)))),
    ("Language.mark_guards_simps",
     "mark_guards ?f (Cond ?b ?c\<^sub>1 ?c\<^sub>2) =
      Cond ?b (mark_guards ?f ?c\<^sub>1) (mark_guards ?f ?c\<^sub>2)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 3),
           template_var 0)))),
    ("Language.strip_guards_simps",
     "strip_guards ?F (Cond ?b ?c\<^sub>1 ?c\<^sub>2) =
      Cond ?b (strip_guards ?F ?c\<^sub>1) (strip_guards ?F ?c\<^sub>2)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_var 0)))),
    ("Language.flatten_fcall",
     "flatten (fcall ?init ?p ?return ?result ?c) =
      [fcall ?init ?p ?return ?result ?c]",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Language.flatten_whileAnnoG",
     "flatten (whileAnnoG ?gs ?b ?I ?V ?c) = [whileAnnoG ?gs ?b ?I ?V ?c]",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Language.merge_guards_switch",
     "merge_guards (switch ?v ?vs) =
      switch ?v (map (%(V, c). (V, merge_guards c)) ?vs)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app
            (template_hole 2, template_app (template_hole 1, t_empty)),
           template_var 0)))),
    ("Language.normalize_switch",
     "Language.normalize (switch ?v ?Vcs) =
      switch ?v (map (%(V, c). (V, Language.normalize c)) ?Vcs)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app
            (template_hole 2, template_app (template_hole 1, t_empty)),
           template_var 0)))),
    ("Language.inter_guards_sym",
     "(?c1.0 \<inter>\<^sub>g ?c2.0) = Some ?c ==>
      (?c2.0 \<inter>\<^sub>g ?c1.0) = Some ?c",
     template_implication
      ([template_equation
         (template_app
           (template_hole 2,
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)),
          template_app (template_hole 0, template_var 0))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2)),
         template_app (template_hole 0, template_var 0)))),
    ("Language.merge_guards_call",
     "merge_guards (call ?init ?p ?return ?c) =
      call ?init ?p ?return (%s t. merge_guards (?c s t))",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         t_empty))),
    ("Language.merge_guards_dynCall",
     "merge_guards (dynCall ?init ?p ?return ?c) =
      dynCall ?init ?p ?return (%s t. merge_guards (?c s t))",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         t_empty))),
    ("Language.normalize_call",
     "Language.normalize (call ?init ?p ?return ?c) =
      call ?init ?p ?return (%i t. Language.normalize (?c i t))",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         t_empty))),
    ("Language.normalize_dynCall",
     "Language.normalize (dynCall ?init ?p ?return ?c) =
      dynCall ?init ?p ?return (%s t. Language.normalize (?c s t))",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         t_empty))),
    ("Language.mark_guards_specAnno",
     "mark_guards ?f (specAnno ?P ?c ?Q ?A) =
      specAnno ?P (%s. mark_guards ?f (?c undefined)) ?Q ?A",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3), t_empty),
           template_var 1),
         template_var 0))),
    ("Language.merge_guards_fcall",
     "merge_guards (fcall ?init ?p ?return ?result ?c) =
      fcall ?init ?p ?return ?result (%v. merge_guards (?c v))",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         t_empty))),
    ("Language.normalize_fcall",
     "Language.normalize (fcall ?init ?p ?return ?result ?c) =
      fcall ?init ?p ?return ?result (%v. Language.normalize (?c v))",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         t_empty))),
    ("Language.strip_guards_specAnno",
     "strip_guards ?F (specAnno ?P ?c ?Q ?A) =
      specAnno ?P (%s. strip_guards ?F (?c undefined)) ?Q ?A",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3), t_empty),
           template_var 1),
         template_var 0))),
    ("Language.inter_guards_Basic",
     "((Basic ?f \<inter>\<^sub>g ?c2.0) = Some ?c) =
      (?c2.0 = Basic ?f & ?c = Basic ?f)",
     template_bimplication
      (template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 2)),
             template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_app (template_hole 3, template_var 2))),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app (template_hole 3, template_var 2)))
           ))),
    ("Language.inter_guards_Call",
     "((Call ?p \<inter>\<^sub>g ?c2.0) = Some ?c) =
      (?c2.0 = Call ?p & ?c = Call ?p)",
     template_bimplication
      (template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 2)),
             template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_app (template_hole 3, template_var 2))),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app (template_hole 3, template_var 2)))
           ))),
    ("Language.inter_guards_Spec",
     "((Spec ?r \<inter>\<^sub>g ?c2.0) = Some ?c) =
      (?c2.0 = Spec ?r & ?c = Spec ?r)",
     template_bimplication
      (template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 2)),
             template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_app (template_hole 3, template_var 2))),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app (template_hole 3, template_var 2)))
           ))),
    ("Language.mark_guards_guards",
     "mark_guards ?f (guards ?gs ?c) =
      guards (map (%(f', g). (?f, g)) ?gs) (mark_guards ?f ?c)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2, template_app (template_hole 1, t_empty)),
             template_var 1)),
         template_app
          (template_app (template_hole 5, template_var 2),
           template_var 0)))),
    ("Language.mark_guards_switch",
     "mark_guards ?f (switch ?v ?vs) =
      switch ?v (map (%(V, c). (V, mark_guards ?f c)) ?vs)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app
            (template_hole 2, template_app (template_hole 1, t_empty)),
           template_var 0)))),
    ("Language.strip_guards_switch",
     "strip_guards ?F (switch ?v ?Vc) =
      switch ?v (map (%(V, c). (V, strip_guards ?F c)) ?Vc)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app
            (template_hole 2, template_app (template_hole 1, t_empty)),
           template_var 0)))),
    ("Language.merge_guards_block",
     "merge_guards (block ?init ?bdy ?return ?c) =
      block ?init (merge_guards ?bdy) ?return
       (%s t. merge_guards (?c s t))",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_app (template_hole 1, template_var 2)),
           template_var 1),
         t_empty))),
    ("Language.normalize_block",
     "Language.normalize (block ?init ?bdy ?return ?c) =
      block ?init (Language.normalize ?bdy) ?return
       (%s t. Language.normalize (?c s t))",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_app (template_hole 1, template_var 2)),
           template_var 1),
         t_empty))),
    ("Language.subseteq_guards_While",
     "?c \<subseteq>\<^sub>g While ?b ?c' ==>
      EX c''. ?c = While ?b c'' & (c'' \<subseteq>\<^sub>g ?c')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Language.com_rel_elim_cases",
     "[| (?c, While ?b ?c1.0) : com_rel; ?c1.0 = ?c ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_app
                   (template_app (template_hole 2, template_var 2),
                    template_var 1))),
              template_hole 1)
            ),
        template_implication
         ([template_equation (template_var 1, template_var 3)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Language.strip_guards_guards",
     "strip_guards ?F (guards ?gs ?c) =
      guards (filter (%(f, g). f ~: ?F) ?gs) (strip_guards ?F ?c)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3, template_app (template_hole 2, t_empty)),
             template_var 1)),
         template_app
          (template_app (template_hole 5, template_var 2),
           template_var 0)))),
    ("Language.mark_guards_call",
     "mark_guards ?f (call ?init ?p ?return ?c) =
      call ?init ?p ?return (%s t. mark_guards ?f (?c s t))",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         t_empty))),
    ("Language.mark_guards_dynCall",
     "mark_guards ?f (dynCall ?init ?p ?return ?c) =
      dynCall ?init ?p ?return (%s t. mark_guards ?f (?c s t))",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         t_empty))),
    ("Language.strip_guards_call",
     "strip_guards ?F (call ?init ?p ?return ?c) =
      call ?init ?p ?return (%s t. strip_guards ?F (?c s t))",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         t_empty))),
    ("Language.strip_guards_dynCall",
     "strip_guards ?F (dynCall ?init ?p ?return ?c) =
      dynCall ?init ?p ?return (%s t. strip_guards ?F (?c s t))",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         t_empty))),
    ("Language.mark_guards_fcall",
     "mark_guards ?f (fcall ?init ?p ?return ?result ?c) =
      fcall ?init ?p ?return ?result (%v. mark_guards ?f (?c v))",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 5),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         t_empty))),
    ("Language.strip_guards_fcall",
     "strip_guards ?F (fcall ?init ?p ?return ?result ?c) =
      fcall ?init ?p ?return ?result (%v. strip_guards ?F (?c v))",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 5),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         t_empty))),
    ("Language.com_rel_elim_cases",
     "[| (?c, Guard ?f ?g ?c1.0) : com_rel; ?c1.0 = ?c ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_app
                   (template_app
                     (template_app (template_hole 2, template_var 3),
                      template_var 2),
                    template_var 1))),
              template_hole 1)
            ),
        template_implication
         ([template_equation (template_var 1, template_var 4)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Language.normalize_while",
     "Language.normalize (while ?gs ?b ?c) =
      guards ?gs
       (While ?b
         (sequence Seq
           (flatten (Language.normalize ?c) @ flatten (guards ?gs Skip))))",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app
            (template_app (template_hole 7, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 6, template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 8, template_var 0))),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_hole 0)))))))),
    ("Language.mark_guards_while",
     "mark_guards ?f (while ?gs ?b ?c) =
      while (map (%(f', g). (?f, g)) ?gs) ?b (mark_guards ?f ?c)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2, template_app (template_hole 1, t_empty)),
               template_var 2)),
           template_var 1),
         template_app
          (template_app (template_hole 5, template_var 3),
           template_var 0)))),
    ("Language.strip_guards_guaranteeStrip",
     "strip_guards ?F (guaranteeStrip ?f ?g ?c) =
      (if ?f : ?F then strip_guards ?F ?c
       else guaranteeStrip ?f ?g (strip_guards ?F ?c))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 3)),
           template_app
            (template_app (template_hole 3, template_var 3),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_app
            (template_app (template_hole 3, template_var 3),
             template_var 0))))),
    ("Language.strip_guards_simps",
     "strip_guards ?F (Guard ?f ?g ?c) =
      (if ?f : ?F then strip_guards ?F ?c
       else Guard ?f ?g (strip_guards ?F ?c))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 3)),
           template_app
            (template_app (template_hole 3, template_var 3),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_app
            (template_app (template_hole 3, template_var 3),
             template_var 0))))),
    ("Language.subseteq_guards_DynCom",
     "?c \<subseteq>\<^sub>g DynCom ?C ==>
      EX C'. ?c = DynCom C' & (ALL s. C' s \<subseteq>\<^sub>g ?C s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Language.merge_guards_res_DynCom",
     "merge_guards ?c = DynCom ?c' ==>
      EX c''. ?c = DynCom c'' & (%s. merge_guards (c'' s)) = ?c'",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Language.merge_guards_res_While",
     "merge_guards ?c = While ?b ?c' ==>
      EX c''. ?c = While ?b c'' & merge_guards c'' = ?c'",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 2),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Language.subseteq_guards_Guard'",
     "Guard ?f ?b ?c \<subseteq>\<^sub>g ?d ==>
      EX f' b' c'. ?d = Guard f' b' c'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Language.com_rel_elim_cases",
     "[| (?c, DynCom ?c1.0) : com_rel; !!x. ?c = ?c1.0 x ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_app (template_hole 3, template_var 1))),
              template_hole 2)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Language.strip_guards_while",
     "strip_guards ?F (while ?gs ?b ?c) =
      while (filter (%(f, g). f ~: ?F) ?gs) ?b (strip_guards ?F ?c)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3, template_app (template_hole 2, t_empty)),
               template_var 2)),
           template_var 1),
         template_app
          (template_app (template_hole 5, template_var 3),
           template_var 0)))),
    ("Language.mark_guards_block",
     "mark_guards ?f (block ?init ?bdy ?return ?c) =
      block ?init (mark_guards ?f ?bdy) ?return
       (%s t. mark_guards ?f (?c s t))",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_app
              (template_app (template_hole 2, template_var 4),
               template_var 2)),
           template_var 1),
         t_empty))),
    ("Language.strip_guards_block",
     "strip_guards ?F (block ?init ?bdy ?return ?c) =
      block ?init (strip_guards ?F ?bdy) ?return
       (%s t. strip_guards ?F (?c s t))",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_app
              (template_app (template_hole 1, template_var 4),
               template_var 2)),
           template_var 1),
         t_empty))),
    ("Language.merge_guards_res_Guard",
     "merge_guards ?c = Guard ?f ?g ?c' ==>
      EX c'' f' g'. ?c = Guard f' g' c''",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 3),
          template_app
           (template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Language.normalize_whileAnnoG",
     "Language.normalize (whileAnnoG ?gs ?b ?I ?V ?c) =
      guards ?gs
       (While ?b
         (sequence Seq
           (flatten (Language.normalize ?c) @ flatten (guards ?gs Skip))))",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 7, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 6, template_var 4),
         template_app
          (template_app (template_hole 5, template_var 3),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 8, template_var 0))),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 6, template_var 4),
                   template_hole 0)))))))),
    ("Language.mark_guards_whileAnnoG",
     "mark_guards ?f (whileAnnoG ?gs ?b ?I ?V ?c) =
      whileAnnoG (map (%(f', g). (?f, g)) ?gs) ?b ?I ?V
       (mark_guards ?f ?c)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 5),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, t_empty)),
                   template_var 4)),
               template_var 3),
             template_var 2),
           template_var 1),
         template_app
          (template_app (template_hole 5, template_var 5),
           template_var 0)))),
    ("Language.subseteq_guards_Catch",
     "?c \<subseteq>\<^sub>g Catch ?c1.0 ?c2.0 ==>
      EX c1' c2'.
         ?c = Catch c1' c2' &
         (c1' \<subseteq>\<^sub>g ?c1.0) & (c2' \<subseteq>\<^sub>g ?c2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Language.subseteq_guards_Seq",
     "?c \<subseteq>\<^sub>g Seq ?c1.0 ?c2.0 ==>
      EX c1' c2'.
         ?c = Seq c1' c2' &
         (c1' \<subseteq>\<^sub>g ?c1.0) & (c2' \<subseteq>\<^sub>g ?c2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Language.subseteq_guards_Guard",
     "?c \<subseteq>\<^sub>g Guard ?f ?g ?c' ==>
      (?c \<subseteq>\<^sub>g ?c') |
      (EX c''. ?c = Guard ?f ?g c'' & (c'' \<subseteq>\<^sub>g ?c'))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_var 0)),
             template_app (template_hole 2, t_empty))
           ))),
    ("Language.inter_guards_strip_eq",
     "(?c1.0 \<inter>\<^sub>g ?c2.0) = Some ?c ==>
      strip_guards UNIV ?c = strip_guards UNIV ?c1.0 &
      strip_guards UNIV ?c = strip_guards UNIV ?c2.0",
     template_implication
      ([template_equation
         (template_app
           (template_hole 6,
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)),
          template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_hole 0),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 2))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 0)),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1)))
           ))),
    ("Language.flatten_sequence_id",
     "[| ?cs ~= []; ALL c:set ?cs. flatten c = [c] |]
      ==> flatten (sequence Seq ?cs) = ?cs",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 6)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 0)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)),
         template_var 0))),
    ("Language.strip_guards_whileAnnoG",
     "strip_guards ?F (whileAnnoG ?gs ?b ?I ?V ?c) =
      whileAnnoG (filter (%(f, g). f ~: ?F) ?gs) ?b ?I ?V
       (strip_guards ?F ?c)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 5),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, t_empty)),
                   template_var 4)),
               template_var 3),
             template_var 2),
           template_var 1),
         template_app
          (template_app (template_hole 5, template_var 5),
           template_var 0)))),
    ("Language.flatten_normalize",
     "flatten (Language.normalize ?c) = ?x # ?xs ==>
      case ?xs of [] => Language.normalize ?c = ?x
      | x' # xs' => Language.normalize ?c = Seq ?x (sequence Seq ?xs)",
     template_implication
      ([template_equation
         (template_app
           (template_hole 6,
            template_app (template_hole 5, template_var 2)),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 5, template_var 2)),
                   template_var 1)),
               t_empty),
             template_var 0)
           ))),
    ("Language.subseteq_guards_Cond",
     "?c \<subseteq>\<^sub>g Cond ?b ?c1.0 ?c2.0 ==>
      EX c1' c2'.
         ?c = Cond ?b c1' c2' &
         (c1' \<subseteq>\<^sub>g ?c1.0) & (c2' \<subseteq>\<^sub>g ?c2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Language.com_rel_elim_cases",
     "[| (?c, Catch ?c1.0 ?c2.0) : com_rel; ?c1.0 = ?c ==> ?P;
         ?c2.0 = ?c ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_app
                   (template_app (template_hole 2, template_var 2),
                    template_var 1))),
              template_hole 1)
            ),
        template_implication
         ([template_equation (template_var 2, template_var 3)],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation (template_var 1, template_var 3)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Language.com_rel_elim_cases",
     "[| (?c, Seq ?c1.0 ?c2.0) : com_rel; ?c1.0 = ?c ==> ?P;
         ?c2.0 = ?c ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_app
                   (template_app (template_hole 2, template_var 2),
                    template_var 1))),
              template_hole 1)
            ),
        template_implication
         ([template_equation (template_var 2, template_var 3)],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation (template_var 1, template_var 3)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Language.merge_guards_res_Catch",
     "merge_guards ?c = Catch ?c1.0 ?c2.0 ==>
      EX c1' c2'.
         ?c = Catch c1' c2' &
         merge_guards c1' = ?c1.0 & merge_guards c2' = ?c2.0",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 2),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Language.merge_guards_res_Seq",
     "merge_guards ?c = Seq ?c1.0 ?c2.0 ==>
      EX c1' c2'.
         ?c = Seq c1' c2' &
         merge_guards c1' = ?c1.0 & merge_guards c2' = ?c2.0",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 2),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Language.com_rel_elim_cases",
     "[| (?c, Cond ?b ?c1.0 ?c2.0) : com_rel; ?c1.0 = ?c ==> ?P;
         ?c2.0 = ?c ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_app
                   (template_app
                     (template_app (template_hole 2, template_var 3),
                      template_var 2),
                    template_var 1))),
              template_hole 1)
            ),
        template_implication
         ([template_equation (template_var 2, template_var 4)],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation (template_var 1, template_var 4)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Language.merge_guards_res_Cond",
     "merge_guards ?c = Cond ?b ?c1.0 ?c2.0 ==>
      EX c1' c2'.
         ?c = Cond ?b c1' c2' &
         merge_guards c1' = ?c1.0 & merge_guards c2' = ?c2.0",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 3),
          template_app
           (template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Language.inter_guards_While",
     "((While ?cnd ?bdy1.0 \<inter>\<^sub>g ?c2.0) = Some ?c) =
      (EX bdy2 bdy.
          ?c2.0 = While ?cnd bdy2 &
          (?bdy1.0 \<inter>\<^sub>g bdy2) = Some bdy &
          ?c = While ?cnd bdy)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_var 2)),
               template_var 1))),
         template_app (template_hole 3, template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("Language.inter_guards_DynCom",
     "((DynCom ?f1.0 \<inter>\<^sub>g ?c2.0) = Some ?c) =
      (EX f2.
          ?c2.0 = DynCom f2 &
          (ALL s. (?f1.0 s \<inter>\<^sub>g f2 s) ~= None) &
          ?c = DynCom (%s. the (?f1.0 s \<inter>\<^sub>g f2 s)))",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 9,
                 template_app (template_hole 8, template_var 2)),
               template_var 1))),
         template_app (template_hole 7, template_var 0)),
       template_app (template_hole 6, t_empty))),
    ("Language.inter_guards_Guard",
     "((Guard ?f ?g1.0 ?bdy1.0 \<inter>\<^sub>g ?c2.0) = Some ?c) =
      (EX g2 bdy2 bdy.
          ?c2.0 = Guard ?f g2 bdy2 &
          (?bdy1.0 \<inter>\<^sub>g bdy2) = Some bdy &
          ?c = Guard ?f (?g1.0 Int g2) bdy)",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_app (template_hole 6, template_var 4),
                     template_var 3),
                   template_var 2)),
               template_var 1))),
         template_app (template_hole 5, template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("Language.merge_guards_guaranteeStrip",
     "merge_guards (guaranteeStrip ?f ?g ?c) =
      (let c' = merge_guards ?c
       in if is_Guard c'
          then let (f', g', c') = dest_Guard c'
               in if ?f = f' then Guard ?f (?g Int g') c'
                  else Guard ?f ?g (Guard f' g' c')
          else Guard ?f ?g c')",
     template_equation
      (template_app
        (template_hole 11,
         template_app
          (template_app
            (template_app (template_hole 10, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 9,
           template_app (template_hole 11, template_var 0)),
         t_empty))),
    ("Language.merge_guards_simps",
     "merge_guards (Guard ?f ?g ?c) =
      (let c' = merge_guards ?c
       in if is_Guard c'
          then let (f', g', c'') = dest_Guard c'
               in if ?f = f' then Guard ?f (?g Int g') c''
                  else Guard ?f ?g (Guard f' g' c'')
          else Guard ?f ?g c')",
     template_equation
      (template_app
        (template_hole 10,
         template_app
          (template_app
            (template_app (template_hole 9, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 8,
           template_app (template_hole 10, template_var 0)),
         t_empty))),
    ("Language.inter_guards_Catch",
     "((Catch ?a1.0 ?a2.0 \<inter>\<^sub>g ?c2.0) = Some ?c) =
      (EX b1 b2 d1 d2.
          ?c2.0 = Catch b1 b2 &
          (?a1.0 \<inter>\<^sub>g b1) = Some d1 &
          (?a2.0 \<inter>\<^sub>g b2) = Some d2 & ?c = Catch d1 d2)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_var 2)),
               template_var 1))),
         template_app (template_hole 3, template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("Language.inter_guards_Seq",
     "((Seq ?a1.0 ?a2.0 \<inter>\<^sub>g ?c2.0) = Some ?c) =
      (EX b1 b2 d1 d2.
          ?c2.0 = Seq b1 b2 &
          (?a1.0 \<inter>\<^sub>g b1) = Some d1 &
          (?a2.0 \<inter>\<^sub>g b2) = Some d2 & ?c = Seq d1 d2)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_var 2)),
               template_var 1))),
         template_app (template_hole 3, template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("Language.inter_guards_Cond",
     "((Cond ?cnd ?t1.0 ?e1.0 \<inter>\<^sub>g ?c2.0) = Some ?c) =
      (EX t2 e2 t e.
          ?c2.0 = Cond ?cnd t2 e2 &
          (?t1.0 \<inter>\<^sub>g t2) = Some t &
          (?e1.0 \<inter>\<^sub>g e2) = Some e & ?c = Cond ?cnd t e)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_app (template_hole 4, template_var 4),
                     template_var 3),
                   template_var 2)),
               template_var 1))),
         template_app (template_hole 3, template_var 0)),
       template_app (template_hole 2, t_empty)))]:
   (string * thm * template) list
### theory "Draft.LanguageTemplates"
### 0.388s elapsed time, 0.574s cpu time, 0.032s GC time
val it = (): unit
