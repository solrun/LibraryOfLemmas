   [("VcgExTotal.conjI2", "[| ?Q; ?Q ==> ?P |] ==> ?P & ?Q",
     template_implication
      ([template_predicate (template_var 1),
        template_implication
         ([template_predicate (template_var 1)],
          template_predicate (template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("VcgExTotal.fac_simp", "0 < ?i ==> fac ?i = ?i * fac (?i - 1)",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 0)],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)))))),
    ("VcgExTotal.upd_hd_next",
     "List ?p ?next (?p # ?ps) ==> List (?next ?p) (?next(?p := ?q)) ?ps",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 1, template_var 3),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_var 2, template_var 3)),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 3),
                 template_var 0)),
             template_var 1)
           ))),
    ("VcgExTotal.HoareTotal_ProcRec2",
     "[| ALL \<sigma> Z.
            ?\<Gamma>,?\<Theta> Un
                      ((UN Z. {(?P1.0 Z Int
                                {s. ((s, ?p1.0), \<sigma>, ?p1.0) : ?r},
                                ?p1.0, ?Q1.0 Z, ?A1.0 Z)}) Un
                       (UN Z. {(?P2.0 Z Int
                                {s. ((s, ?p2.0), \<sigma>, ?p1.0) : ?r},
                                ?p2.0, ?Q2.0 Z, ?A2.0 Z)}))
               \<turnstile>\<^sub>t\<^bsub>/?F\<^esub> ({\<sigma>} Int
                  ?P1.0 Z)
                 the (?\<Gamma> ?p1.0) (?Q1.0 Z),(?A1.0 Z);
         ALL \<sigma> Z.
            ?\<Gamma>,?\<Theta> Un
                      ((UN Z. {(?P1.0 Z Int
                                {s. ((s, ?p1.0), \<sigma>, ?p2.0) : ?r},
                                ?p1.0, ?Q1.0 Z, ?A1.0 Z)}) Un
                       (UN Z. {(?P2.0 Z Int
                                {s. ((s, ?p2.0), \<sigma>, ?p2.0) : ?r},
                                ?p2.0, ?Q2.0 Z, ?A2.0 Z)}))
               \<turnstile>\<^sub>t\<^bsub>/?F\<^esub> ({\<sigma>} Int
                  ?P2.0 Z)
                 the (?\<Gamma> ?p2.0) (?Q2.0 Z),(?A2.0 Z);
         wf ?r; ?p1.0 : dom ?\<Gamma>; ?p2.0 : dom ?\<Gamma> |]
      ==> (ALL Z.
              ?\<Gamma>,?\<Theta>
                 \<turnstile>\<^sub>t\<^bsub>/?F\<^esub> (?P1.0 Z)
                   Call ?p1.0 (?Q1.0 Z),(?A1.0 Z)) &
          (ALL Z.
              ?\<Gamma>,?\<Theta>
                 \<turnstile>\<^sub>t\<^bsub>/?F\<^esub> (?P2.0 Z)
                   Call ?p2.0 (?Q2.0 Z),(?A2.0 Z))",
     template_implication
      ([template_predicate (template_app (template_hole 24, t_empty)),
        template_predicate (template_app (template_hole 24, t_empty)),
        template_predicate (template_app (template_hole 4, template_var 7)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 8),
              template_app (template_hole 2, template_var 11))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app (template_hole 2, template_var 11))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1, template_app (template_hole 23, t_empty)),
             template_app (template_hole 23, t_empty))
           )))]
