Loading theory "Draft.Language" (required by "Draft.ComposeTemplates" via "Draft.Compose" via "Draft.HoareTotalProps" via "Draft.SmallStep" via "Draft.Termination" via "Draft.Semantic")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ComposeTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ComposeTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ComposeTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.107s elapsed time, 0.441s cpu time, 0.017s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ComposeTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.177s elapsed time, 0.734s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ComposeTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.284s elapsed time, 1.147s cpu time, 0.140s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ComposeTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.921s elapsed time, 3.466s cpu time, 0.749s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.970s elapsed time, 3.542s cpu time, 0.734s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.863s elapsed time, 5.808s cpu time, 1.084s GC time
Loading theory "Draft.Templates" (required by "Draft.ComposeTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.105s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ComposeTemplates")
consts
  switch ::
    "('s => 'v) => ('v set * ('s, 'p, 'f) com) list => ('s, 'p, 'f) com"
consts
  guards :: "('f * 's set) list => ('s, 'p, 'f) com => ('s, 'p, 'f) com"
consts
  flatten :: "('s, 'p, 'f) com => ('s, 'p, 'f) com list"
consts
  sequence ::
    "(('s, 'p, 'f) com => ('s, 'p, 'f) com => ('s, 'p, 'f) com)
     => ('s, 'p, 'f) com list => ('s, 'p, 'f) com"
consts
  normalize :: "('s, 'p, 'f) com => ('s, 'p, 'f) com"
consts
  strip_guards :: "'f set => ('s, 'p, 'f) com => ('s, 'p, 'f) com"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.538s elapsed time, 1.122s cpu time, 0.094s GC time
consts
  mark_guards :: "'f => ('s, 'p, 'g) com => ('s, 'p, 'f) com"
### No equation for constructor "Skip"
### No equation for constructor "Basic"
### No equation for constructor "Spec"
### No equation for constructor "Seq"
### No equation for constructor "Cond"
### No equation for constructor "While"
### No equation for constructor "Call"
### No equation for constructor "DynCom"
### No equation for constructor "Throw"
### No equation for constructor "Catch"
consts
  dest_Guard :: "('s, 'p, 'f) com => 'f * 's set * ('s, 'p, 'f) com"
consts
  merge_guards :: "('s, 'p, 'f) com => ('s, 'p, 'f) com"
consts
  noguards :: "('s, 'p, 'f) com => bool"
consts
  nothrows :: "('s, 'p, 'f) com => bool"
Proofs for inductive predicate(s) "com_relp"
  Proving monotonicity ...
### Legacy feature! Old 'recdef' command -- use 'fun' or 'function' instead
Defining recursive function "Language.inter_guards" ...
Proving induction theorem ...
Postprocessing ...
Simplifying nested TCs ...
... Postprocessing finished
Proving unsplit equation...
th:
(Skip \<inter>\<^sub>g Skip) = None ==> (Skip \<inter>\<^sub>g Skip) = None
split ths:
(Skip \<inter>\<^sub>g Basic ?bc) = None
(Skip \<inter>\<^sub>g Spec ?bd) = None
(Skip \<inter>\<^sub>g Seq ?be ?bf) = None
(Skip \<inter>\<^sub>g Cond ?bg ?bh ?bi) = None
(Skip \<inter>\<^sub>g While ?bj ?bk) = None
(Skip \<inter>\<^sub>g Call ?bl) = None
(Skip \<inter>\<^sub>g DynCom ?bm) = None
(Skip \<inter>\<^sub>g Guard ?bn ?bo ?bp) = None
(Skip \<inter>\<^sub>g Throw) = None
(Skip \<inter>\<^sub>g Catch ?bq ?br) = None
(Basic ?w \<inter>\<^sub>g Skip) = None
(Basic ?w \<inter>\<^sub>g Spec ?cj) = None
(Basic ?w \<inter>\<^sub>g Seq ?ck ?cl) = None
(Basic ?w \<inter>\<^sub>g Cond ?cm ?cn ?co) = None
(Basic ?w \<inter>\<^sub>g While ?cp ?cq) = None
(Basic ?w \<inter>\<^sub>g Call ?cr) = None
(Basic ?w \<inter>\<^sub>g DynCom ?cs) = None
(Basic ?w \<inter>\<^sub>g Guard ?ct ?cu ?cv) = None
(Basic ?w \<inter>\<^sub>g Throw) = None
(Basic ?w \<inter>\<^sub>g Catch ?cw ?cx) = None
(Spec ?x \<inter>\<^sub>g Skip) = None
(Spec ?x \<inter>\<^sub>g Basic ?do) = None
(Spec ?x \<inter>\<^sub>g Seq ?dq ?dr) = None
(Spec ?x \<inter>\<^sub>g Cond ?ds ?dt ?du) = None
(Spec ?x \<inter>\<^sub>g While ?dv ?dw) = None
(Spec ?x \<inter>\<^sub>g Call ?dx) = None
(Spec ?x \<inter>\<^sub>g DynCom ?dy) = None
(Spec ?x \<inter>\<^sub>g Guard ?dz ?ea ?eb) = None
(Spec ?x \<inter>\<^sub>g Throw) = None
(Spec ?x \<inter>\<^sub>g Catch ?ec ?ed) = None
(Seq ?y ?z \<inter>\<^sub>g Skip) = None
(Seq ?y ?z \<inter>\<^sub>g Basic ?ev) = None
(Seq ?y ?z \<inter>\<^sub>g Spec ?ew) = None
(Seq ?y ?z \<inter>\<^sub>g Cond ?ez ?fa ?fb) = None
(Seq ?y ?z \<inter>\<^sub>g While ?fc ?fd) = None
(Seq ?y ?z \<inter>\<^sub>g Call ?fe) = None
(Seq ?y ?z \<inter>\<^sub>g DynCom ?ff) = None
(Seq ?y ?z \<inter>\<^sub>g Guard ?fg ?fh ?fi) = None
(Seq ?y ?z \<inter>\<^sub>g Throw) = None
(Seq ?y ?z \<inter>\<^sub>g Catch ?fj ?fk) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Skip) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Basic ?gb) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Spec ?gc) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Seq ?gd ?ge) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g While ?gi ?gj) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Call ?gk) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g DynCom ?gl) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Guard ?gm ?gn ?go) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Throw) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Catch ?gp ?gq) = None
(While ?ad ?ae \<inter>\<^sub>g Skip) = None
(While ?ad ?ae \<inter>\<^sub>g Basic ?hh) = None
(While ?ad ?ae \<inter>\<^sub>g Spec ?hi) = None
(While ?ad ?ae \<inter>\<^sub>g Seq ?hj ?hk) = None
(While ?ad ?ae \<inter>\<^sub>g Cond ?hl ?hm ?hn) = None
(While ?ad ?ae \<inter>\<^sub>g Call ?hq) = None
(While ?ad ?ae \<inter>\<^sub>g DynCom ?hr) = None
(While ?ad ?ae \<inter>\<^sub>g Guard ?hs ?ht ?hu) = None
(While ?ad ?ae \<inter>\<^sub>g Throw) = None
(While ?ad ?ae \<inter>\<^sub>g Catch ?hv ?hw) = None
(Call ?af \<inter>\<^sub>g Skip) = None
(Call ?af \<inter>\<^sub>g Basic ?in) = None
(Call ?af \<inter>\<^sub>g Spec ?io) = None
(Call ?af \<inter>\<^sub>g Seq ?ip ?iq) = None
(Call ?af \<inter>\<^sub>g Cond ?ir ?is ?it) = None
(Call ?af \<inter>\<^sub>g While ?iu ?iv) = None
(Call ?af \<inter>\<^sub>g DynCom ?ix) = None
(Call ?af \<inter>\<^sub>g Guard ?iy ?iz ?ja) = None
(Call ?af \<inter>\<^sub>g Throw) = None
(Call ?af \<inter>\<^sub>g Catch ?jb ?jc) = None
(DynCom ?ag \<inter>\<^sub>g Skip) = None
(DynCom ?ag \<inter>\<^sub>g Basic ?jt) = None
(DynCom ?ag \<inter>\<^sub>g Spec ?ju) = None
(DynCom ?ag \<inter>\<^sub>g Seq ?jv ?jw) = None
(DynCom ?ag \<inter>\<^sub>g Cond ?jx ?jy ?jz) = None
(DynCom ?ag \<inter>\<^sub>g While ?ka ?kb) = None
(DynCom ?ag \<inter>\<^sub>g Call ?kc) = None
(DynCom ?ag \<inter>\<^sub>g Guard ?ke ?kf ?kg) = None
(DynCom ?ag \<inter>\<^sub>g Throw) = None
(DynCom ?ag \<inter>\<^sub>g Catch ?kh ?ki) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Skip) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Basic ?kz) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Spec ?la) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Seq ?lb ?lc) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Cond ?ld ?le ?lf) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g While ?lg ?lh) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Call ?li) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g DynCom ?lj) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Throw) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Catch ?ln ?lo) = None
(Throw \<inter>\<^sub>g Skip) = None
(Throw \<inter>\<^sub>g Basic ?mf) = None
(Throw \<inter>\<^sub>g Spec ?mg) = None
(Throw \<inter>\<^sub>g Seq ?mh ?mi) = None
(Throw \<inter>\<^sub>g Cond ?mj ?mk ?ml) = None
(Throw \<inter>\<^sub>g While ?mm ?mn) = None
(Throw \<inter>\<^sub>g Call ?mo) = None
(Throw \<inter>\<^sub>g DynCom ?mp) = None
(Throw \<inter>\<^sub>g Guard ?mq ?mr ?ms) = None
(Throw \<inter>\<^sub>g Catch ?mt ?mu) = None
(Catch ?ak ?al \<inter>\<^sub>g Skip) = None
(Catch ?ak ?al \<inter>\<^sub>g Basic ?nl) = None
(Catch ?ak ?al \<inter>\<^sub>g Spec ?nm) = None
(Catch ?ak ?al \<inter>\<^sub>g Seq ?nn ?no) = None
(Catch ?ak ?al \<inter>\<^sub>g Cond ?np ?nq ?nr) = None
(Catch ?ak ?al \<inter>\<^sub>g While ?ns ?nt) = None
(Catch ?ak ?al \<inter>\<^sub>g Call ?nu) = None
(Catch ?ak ?al \<inter>\<^sub>g DynCom ?nv) = None
(Catch ?ak ?al \<inter>\<^sub>g Guard ?nw ?nx ?ny) = None
(Catch ?ak ?al \<inter>\<^sub>g Throw) = None
--
### recdef (solve_eq): splitto: cannot find variable to split on
Proofs for inductive predicate(s) "subseteq_guards"
  Proving monotonicity ...
### theory "Draft.Language"
### 4.051s elapsed time, 9.025s cpu time, 1.285s GC time
Loading theory "Draft.Semantic" (required by "Draft.ComposeTemplates" via "Draft.Compose" via "Draft.HoareTotalProps" via "Draft.SmallStep" via "Draft.Termination")
Proofs for inductive predicate(s) "exec"
  Proving monotonicity ...
Proofs for inductive predicate(s) "execn"
  Proving monotonicity ...
### theory "Draft.Semantic"
### 2.471s elapsed time, 3.634s cpu time, 1.333s GC time
Loading theory "Draft.HoarePartialDef" (required by "Draft.ComposeTemplates" via "Draft.Compose" via "Draft.HoareTotalProps" via "Draft.HoareTotalDef")
Loading theory "Draft.Termination" (required by "Draft.ComposeTemplates" via "Draft.Compose" via "Draft.HoareTotalProps" via "Draft.SmallStep")
Proofs for inductive predicate(s) "terminates"
### Ambiguous input (line 84 of "$AFP/Simpl/HoarePartialDef.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" n)
###       ("\<^const>HoarePartialDef.cnvalid" ("_position" \<Gamma>)
###         ("_position" \<Theta>) ("_position" n) ("_position" F)
###         ("_position" P) ("_position" c) ("_position" Q) ("_position" A))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HoarePartialDef.cvalid" ("_position" \<Gamma>)
###       ("_position" \<Theta>) ("_position" F) ("_position" P) ("_position" c)
###       ("_position" Q) ("_position" A))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_tuple"
###       ("\<^const>HOL.All_binder" ("_position" n) ("_position" \<Gamma>))
###       ("_tuple_arg"
###         ("\<^const>HoarePartialDef.nvalid" ("_position" \<Theta>)
###           ("_position" n) ("_position" F) ("_position" P) ("_position" c)
###           ("_position" Q) ("_position" A)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HoarePartialDef.cvalid" ("_position" \<Gamma>)
###       ("_position" \<Theta>) ("_position" F) ("_position" P) ("_position" c)
###       ("_position" Q) ("_position" A))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
  Proving monotonicity ...
Proofs for inductive predicate(s) "hoarep"
  Proving monotonicity ...
### theory "Draft.HoarePartialDef"
### 0.376s elapsed time, 0.877s cpu time, 0.133s GC time
Loading theory "Draft.HoarePartialProps" (required by "Draft.ComposeTemplates" via "Draft.Compose" via "Draft.HoareTotalProps")
### Ambiguous input (line 1078 of "$AFP/Simpl/HoarePartialProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" s) ("_position" P)
###     ("\<^const>HOL.All_binder"
###       ("_idtyp" ("_position" t)
###         ("_tappl" ("_position_sort" 's) ("_position_sort" 'f)
###           ("_type_name" xstate)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q') ("_position" A')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.All_binder" ("_position" n)
###             ("\<^const>HoarePartialDef.cnvalid" ("_position" \<Gamma>)
###               ("_position" \<Theta>) ("_position" n) ("_position" F)
###               ("_position" P') ("_position" c) ("_position" Q')
###               ("_position" A')))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.implies"
###               ("\<^const>Set.member" ("_position" s) ("_position" P'))
###               ("\<^const>Set.member" ("_position" t)
###                 ("\<^const>Set.union"
###                   ("\<^const>Set.image" ("_position" Normal)
###                     ("_position" Q'))
###                   ("\<^const>Set.image" ("_position" Abrupt)
###                     ("_position" A')))))
###             ("\<^const>Set.member" ("_position" t)
###               ("\<^const>Set.union"
###                 ("\<^const>Set.image" ("_position" Normal) ("_position" Q))
###                 ("\<^const>Set.image" ("_position" Abrupt)
###                   ("_position" A))))))))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" s) ("_position" P)
###     ("\<^const>HOL.All_binder"
###       ("_idtyp" ("_position" t)
###         ("_tappl" ("_position_sort" 's) ("_position_sort" 'f)
###           ("_type_name" xstate)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q') ("_position" A')))
###         ("\<^const>HOL.conj"
###           ("_tuple"
###             ("\<^const>HOL.All_binder" ("_position" n)
###               ("_position" \<Gamma>))
###             ("_tuple_arg"
###               ("\<^const>HoarePartialDef.nvalid" ("_position" \<Theta>)
###                 ("_position" n) ("_position" F) ("_position" P')
###                 ("_position" c) ("_position" Q') ("_position" A'))))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.implies"
###               ("\<^const>Set.member" ("_position" s) ("_position" P'))
###               ("\<^const>Set.member" ("_position" t)
###                 ("\<^const>Set.union"
###                   ("\<^const>Set.image" ("_position" Normal)
###                     ("_position" Q'))
###                   ("\<^const>Set.image" ("_position" Abrupt)
###                     ("_position" A')))))
###             ("\<^const>Set.member" ("_position" t)
###               ("\<^const>Set.union"
###                 ("\<^const>Set.image" ("_position" Normal) ("_position" Q))
###                 ("\<^const>Set.image" ("_position" Abrupt)
###                   ("_position" A))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Termination"
### 0.554s elapsed time, 1.207s cpu time, 0.133s GC time
Loading theory "Draft.HoareTotalDef" (required by "Draft.ComposeTemplates" via "Draft.Compose" via "Draft.HoareTotalProps")
Loading theory "Draft.SmallStep" (required by "Draft.ComposeTemplates" via "Draft.Compose" via "Draft.HoareTotalProps")
### No equation for constructor "Spec"
consts
  procs :: "('s, 'p, 'f) com => 'p set"
consts
  noSpec :: "('s, 'p, 'f) com => bool"
consts
  redex :: "('s, 'p, 'f) com => ('s, 'p, 'f) com"
Proofs for inductive predicate(s) "step"
  Proving monotonicity ...
Proofs for inductive predicate(s) "hoaret"
  Proving monotonicity ...
### theory "Draft.HoarePartialProps"
### 0.673s elapsed time, 1.995s cpu time, 0.402s GC time
### theory "Draft.HoareTotalDef"
### 0.553s elapsed time, 1.763s cpu time, 0.402s GC time
val tranclp_induct2 =
   "[| ?r^++ (?aa, ?ab) (?ba, ?bb); !!a b. ?r (?aa, ?ab) (a, b) ==> ?P a b;
       !!a b aa ba.
          [| ?r^++ (?aa, ?ab) (a, b); ?r (a, b) (aa, ba); ?P a b |]
          ==> ?P aa ba |]
    ==> ?P ?ba ?bb":
   thm
val it = (): unit
consts
  subst_redex :: "('s, 'p, 'f) com => ('s, 'p, 'f) com => ('s, 'p, 'f) com"
val trancl_induct2 =
   "[| ((?aa, ?ab), ?ba, ?bb) : ?r^+;
       !!a b. ((?aa, ?ab), a, b) : ?r ==> ?P a b;
       !!a b aa ba.
          [| ((?aa, ?ab), a, b) : ?r^+; ((a, b), aa, ba) : ?r; ?P a b |]
          ==> ?P aa ba |]
    ==> ?P ?ba ?bb":
   thm
val it = (): unit
consts
  seq :: "(nat => ('s, 'p, 'f) com) => 'p => nat => ('s, 'p, 'f) com"
consts
  redexes :: "('s, 'p, 'f) com => ('s, 'p, 'f) com set"
### theory "Draft.SmallStep"
### 1.102s elapsed time, 2.223s cpu time, 0.370s GC time
Loading theory "Draft.HoareTotalProps" (required by "Draft.ComposeTemplates" via "Draft.Compose")
### theory "Draft.HoareTotalProps"
### 1.106s elapsed time, 2.405s cpu time, 1.771s GC time
Loading theory "Draft.Compose" (required by "Draft.ComposeTemplates")
consts
  lift\<^sub>c ::
    "('S => 's) => ('S => 's => 'S) => ('s, 'p, 'f) com => ('S, 'p, 'f) com"
locale lift_state_space
  fixes project :: "'S => 's"
    and inject :: "'S => 's => 'S"
    and project\<^sub>x :: "('S, 'f) xstate => ('s, 'f) xstate"
    and
    lift\<^sub>e ::
      "('p => ('s, 'p, 'f) com option) => 'p => ('S, 'p, 'f) com option"
    and lift\<^sub>c :: "('s, 'p, 'f) com => ('S, 'p, 'f) com"
    and lift\<^sub>f :: "('s => 's) => 'S => 'S"
    and lift\<^sub>s :: "'s set => 'S set"
    and lift\<^sub>r :: "('s * 's) set => ('S * 'S) set"
  assumes "lift_state_space project inject"
  defines "lift\<^sub>c == lift\<^sub>c project inject"
    and "project\<^sub>x == xstate_map project"
    and "lift\<^sub>e == %\<Gamma> p. map_option lift\<^sub>c (\<Gamma> p)"
    and "lift\<^sub>f == lift\<^sub>f project inject"
    and "lift\<^sub>s == lift\<^sub>s project"
    and "lift\<^sub>r == lift\<^sub>r project inject"
locale lift_state_space_ext
  fixes project :: "'a => 'b"
    and inject :: "'a => 'b => 'a"
    and project\<^sub>x :: "('a, 'c) xstate => ('b, 'c) xstate"
    and
    lift\<^sub>e ::
      "('d => ('b, 'd, 'c) com option) => 'd => ('a, 'd, 'c) com option"
    and lift\<^sub>c :: "('b, 'd, 'c) com => ('a, 'd, 'c) com"
    and lift\<^sub>f :: "('b => 'b) => 'a => 'a"
    and lift\<^sub>s :: "'b set => 'a set"
    and lift\<^sub>r :: "('b * 'b) set => ('a * 'a) set"
  assumes "lift_state_space_ext project inject"
  defines "lift\<^sub>c == lift\<^sub>c project inject"
    and "project\<^sub>x == xstate_map project"
    and "lift\<^sub>e == %\<Gamma> p. map_option lift\<^sub>c (\<Gamma> p)"
    and "lift\<^sub>f == lift\<^sub>f project inject"
    and "lift\<^sub>s == lift\<^sub>s project"
    and "lift\<^sub>r == lift\<^sub>r project inject"
consts
  rename :: "('p => 'q) => ('s, 'p, 'f) com => ('s, 'q, 'f) com"
### theory "Draft.Compose"
### 0.557s elapsed time, 0.559s cpu time, 0.000s GC time
Loading theory "Draft.ComposeTemplates"
val templateLemmas =
   [("Compose.state_simps", "state (Normal ?s) = ?s",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Compose.state_simps", "state (Abrupt ?s) = ?s",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Compose.xstate_map_simps", "xstate_map ?g Stuck = Stuck",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Compose.xstate_map_simps", "xstate_map ?g (Fault ?f) = Fault ?f",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Compose.xstate_map_simps",
     "xstate_map ?g (Normal ?s) = Normal (?g ?s)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_var 1, template_var 0)))),
    ("Compose.xstate_map_simps",
     "xstate_map ?g (Abrupt ?s) = Abrupt (?g ?s)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_var 1, template_var 0)))),
    ("Compose.rename_Skip", "(rename ?h ?c = Skip) = (?c = Skip)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Compose.rename_Throw", "(rename ?h ?c = Throw) = (?c = Throw)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Compose.xstate_map_Stuck_conv",
     "(xstate_map ?g ?S = Stuck) = (?S = Stuck)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Compose.lift\<^sub>c_Skip",
     "(lift\<^sub>c ?prj ?inject ?c = Skip) = (?c = Skip)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0),
         template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Compose.lift\<^sub>c_Throw",
     "(lift\<^sub>c ?prj ?inject ?c = Throw) = (?c = Throw)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0),
         template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Compose.rename_Basic", "(rename ?h ?c = Basic ?f) = (?c = Basic ?f)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Compose.rename_Spec", "(rename ?h ?c = Spec ?r) = (?c = Spec ?r)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Compose.xstate_map_Fault_conv",
     "(xstate_map ?g ?S = Fault ?f) = (?S = Fault ?f)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Compose.lift\<^sub>c_Call",
     "(lift\<^sub>c ?prj ?inject ?c = Call ?p) = (?c = Call ?p)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Compose.rename_whileAnno",
     "rename ?h (whileAnno ?b ?I ?V ?c) =
      whileAnno ?b ?I ?V (rename ?h ?c)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_app
          (template_app (template_hole 2, template_var 4),
           template_var 0)))),
    ("Compose.rename_Call",
     "(rename ?h ?c = Call ?q) = (EX p. ?c = Call p & ?q = ?h p)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_app (template_hole 5, template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("Compose.xstate_map_Abrupt_conv",
     "(xstate_map ?g ?S = Abrupt ?s) =
      (EX s'. ?S = Abrupt s' & ?s = ?g s')",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_app (template_hole 5, template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("Compose.xstate_map_Normal_conv",
     "(xstate_map ?g ?S = Normal ?s) =
      (EX s'. ?S = Normal s' & ?s = ?g s')",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_app (template_hole 5, template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("Compose.rename_call",
     "rename ?h (call ?init ?p ?return ?c) =
      call ?init (?h ?p) ?return (%s t. rename ?h (?c s t))",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_app (template_var 4, template_var 2)),
           template_var 1),
         t_empty))),
    ("Compose.rename_DynCom",
     "(rename ?h ?c = DynCom ?rc) =
      (EX C. ?c = DynCom C & ?rc = (%s. rename ?h (C s)))",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_app (template_hole 5, template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("Compose.rename_While",
     "(rename ?h ?c = While ?b ?rc') =
      (EX c'. ?c = While ?b c' & ?rc' = rename ?h c')",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("Compose.lift\<^sub>c_Basic",
     "(lift\<^sub>c ?prj ?inject ?c = Basic ?lf) =
      (EX f. ?c = Basic f & ?lf = lift\<^sub>f ?prj ?inject f)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_app (template_hole 7, template_var 3),
               template_var 2),
             template_var 1)),
         template_app (template_hole 6, template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("Compose.lift\<^sub>c_Spec",
     "(lift\<^sub>c ?prj ?inject ?c = Spec ?lr) =
      (EX r. ?c = Spec r & ?lr = lift\<^sub>r ?prj ?inject r)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_app (template_hole 7, template_var 3),
               template_var 2),
             template_var 1)),
         template_app (template_hole 6, template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("Compose.rename_block",
     "rename ?h (block ?init ?bdy ?return ?c) =
      block ?init (rename ?h ?bdy) ?return (%s t. rename ?h (?c s t))",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_app
              (template_app (template_hole 2, template_var 4),
               template_var 2)),
           template_var 1),
         t_empty))),
    ("Compose.rename_Guard",
     "(rename ?h ?c = Guard ?f ?g ?rc') =
      (EX c'. ?c = Guard ?f ?g c' & ?rc' = rename ?h c')",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 4),
             template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("Compose.lift\<^sub>c_DynCom",
     "(lift\<^sub>c ?prj ?inject ?c = DynCom ?lc) =
      (EX C. ?c = DynCom C &
             ?lc = (%s. lift\<^sub>c ?prj ?inject (C (?prj s))))",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_app (template_hole 6, template_var 3),
               template_var 2),
             template_var 1)),
         template_app (template_hole 5, template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("Compose.lift\<^sub>c_whileAnno",
     "lift\<^sub>c ?prj ?inject (whileAnno ?b ?I ?V ?c) =
      whileAnno (lift\<^sub>s ?prj ?b) (lift\<^sub>s ?prj ?I)
       (lift\<^sub>r ?prj ?inject ?V) (lift\<^sub>c ?prj ?inject ?c)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 5), template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 5),
                 template_var 3)),
             template_app
              (template_app (template_hole 1, template_var 5),
               template_var 2)),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 5),
               template_var 4),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 4, template_var 5),
             template_var 4),
           template_var 0)))),
    ("Compose.rename_Catch",
     "(rename ?h ?c = Catch ?rc\<^sub>1 ?rc\<^sub>2) =
      (EX c\<^sub>1 c\<^sub>2.
          ?c = Catch c\<^sub>1 c\<^sub>2 &
          ?rc\<^sub>1 = rename ?h c\<^sub>1 &
          ?rc\<^sub>2 = rename ?h c\<^sub>2)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("Compose.rename_Seq",
     "(rename ?h ?c = Seq ?rc\<^sub>1 ?rc\<^sub>2) =
      (EX c\<^sub>1 c\<^sub>2.
          ?c = Seq c\<^sub>1 c\<^sub>2 &
          ?rc\<^sub>1 = rename ?h c\<^sub>1 &
          ?rc\<^sub>2 = rename ?h c\<^sub>2)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("Compose.rename_Cond",
     "(rename ?h ?c = Cond ?b ?rc\<^sub>1 ?rc\<^sub>2) =
      (EX c\<^sub>1 c\<^sub>2.
          ?c = Cond ?b c\<^sub>1 c\<^sub>2 &
          ?rc\<^sub>1 = rename ?h c\<^sub>1 &
          ?rc\<^sub>2 = rename ?h c\<^sub>2)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 4),
             template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("Compose.lift\<^sub>c_While",
     "(lift\<^sub>c ?prj ?inject ?c = While ?lb ?lc') =
      (EX b c'.
          ?c = While b c' &
          ?lb = lift\<^sub>s ?prj b & ?lc' = lift\<^sub>c ?prj ?inject c')",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_app (template_hole 8, template_var 4),
               template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       template_app (template_hole 6, t_empty))),
    ("Compose.lift\<^sub>c_Catch",
     "(lift\<^sub>c ?prj ?inject ?c = Catch ?lc\<^sub>1 ?lc\<^sub>2) =
      (EX c\<^sub>1 c\<^sub>2.
          ?c = Catch c\<^sub>1 c\<^sub>2 &
          ?lc\<^sub>1 = lift\<^sub>c ?prj ?inject c\<^sub>1 &
          ?lc\<^sub>2 = lift\<^sub>c ?prj ?inject c\<^sub>2)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app (template_hole 5, template_var 4),
               template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("Compose.lift\<^sub>c_Seq",
     "(lift\<^sub>c ?prj ?inject ?c = Seq ?lc\<^sub>1 ?lc\<^sub>2) =
      (EX c\<^sub>1 c\<^sub>2.
          ?c = Seq c\<^sub>1 c\<^sub>2 &
          ?lc\<^sub>1 = lift\<^sub>c ?prj ?inject c\<^sub>1 &
          ?lc\<^sub>2 = lift\<^sub>c ?prj ?inject c\<^sub>2)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app (template_hole 5, template_var 4),
               template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("Compose.lift\<^sub>c_call",
     "lift\<^sub>c ?prj ?inject (call ?init ?p ?return ?c) =
      call (lift\<^sub>f ?prj ?inject ?init) ?p
       (%s. lift\<^sub>f ?prj ?inject (?return (?prj s)))
       (%s t. lift\<^sub>c ?prj ?inject (?c (?prj s) (?prj t)))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 5), template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 4),
                 template_var 3)),
             template_var 2),
           t_empty),
         t_empty))),
    ("Compose.lift\<^sub>c_Guard",
     "(lift\<^sub>c ?prj ?inject ?c = Guard ?f ?lg ?lc') =
      (EX g c'.
          ?c = Guard ?f g c' &
          ?lg = lift\<^sub>s ?prj g & ?lc' = lift\<^sub>c ?prj ?inject c')",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_app (template_hole 8, template_var 5),
               template_var 4),
             template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 7, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 6, t_empty))),
    ("Compose.lift\<^sub>c_block",
     "lift\<^sub>c ?prj ?inject (block ?init ?bdy ?return ?c) =
      block (lift\<^sub>f ?prj ?inject ?init)
       (lift\<^sub>c ?prj ?inject ?bdy)
       (%s. lift\<^sub>f ?prj ?inject (?return (?prj s)))
       (%s t. lift\<^sub>c ?prj ?inject (?c (?prj s) (?prj t)))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 5), template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 4),
                 template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 3, template_var 5),
                 template_var 4),
               template_var 2)),
           t_empty),
         t_empty))),
    ("Compose.valid_to_valid_rename",
     "[| ALL p bdy.
            ?\<Gamma> p = Some bdy -->
            ?\<Gamma>' (?N p) = Some (rename ?N bdy);
         ?\<Gamma>|=/?F ?P ?c ?Q,?A |]
      ==> ?\<Gamma>'|=/?F ?P rename ?N ?c ?Q,?A",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 7),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 6),
                     template_var 4),
                   template_var 3),
                 template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 2)),
               template_var 1),
             template_var 0)
           ))),
    ("Compose.validt_to_validt_rename",
     "[| ALL p bdy.
            ?\<Gamma> p = Some bdy -->
            ?\<Gamma>' (?N p) = Some (rename ?N bdy);
         ?\<Gamma>|=t/?F ?P ?c ?Q,?A |]
      ==> ?\<Gamma>'|=t/?F ?P rename ?N ?c ?Q,?A",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 7),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 6),
                     template_var 4),
                   template_var 3),
                 template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 2)),
               template_var 1),
             template_var 0)
           ))),
    ("Compose.hoare_to_hoare_rename",
     "[| ALL p bdy.
            ?\<Gamma> p = Some bdy -->
            ?\<Gamma>' (?N p) = Some (rename ?N bdy);
         ?\<Gamma>,{}\<turnstile>\<^bsub>/?F \<^esub>?P ?c ?Q,?A |]
      ==> ?\<Gamma>',{}
             \<turnstile>\<^bsub>/?F \<^esub>?P rename ?N ?c ?Q,?A",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 3, template_var 7),
                        template_hole 2),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 1, template_var 6),
                       template_hole 0),
                     template_var 4),
                   template_var 3),
                 template_app
                  (template_app (template_hole 4, template_var 5),
                   template_var 2)),
               template_var 1),
             template_var 0)
           ))),
    ("Compose.hoaret_to_hoaret_rename",
     "[| ALL p bdy.
            ?\<Gamma> p = Some bdy -->
            ?\<Gamma>' (?N p) = Some (rename ?N bdy);
         ?\<Gamma>,{}\<turnstile>\<^sub>t\<^bsub>/?F\<^esub> ?P ?c ?Q,?A |]
      ==> ?\<Gamma>',{}
             \<turnstile>\<^sub>t\<^bsub>/?F\<^esub> ?P rename ?N ?c ?Q,?A",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 3, template_var 7),
                        template_hole 2),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 1, template_var 6),
                       template_hole 0),
                     template_var 4),
                   template_var 3),
                 template_app
                  (template_app (template_hole 4, template_var 5),
                   template_var 2)),
               template_var 1),
             template_var 0)
           ))),
    ("Compose.terminates_to_terminates_rename",
     "[| ALL p bdy.
            ?\<Gamma> p = Some bdy -->
            ?\<Gamma>' (?N p) = Some (rename ?N bdy);
         ?\<Gamma>\<turnstile>?c \<down> ?s;
         ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow>\<notin>{Stuck} |]
      ==> ?\<Gamma>'\<turnstile>rename ?N ?c \<down> ?s",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 1),
                template_var 0),
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_app
                (template_app (template_hole 6, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("Compose.lift\<^sub>c_Cond",
     "(lift\<^sub>c ?prj ?inject ?c = Cond ?lb ?lc\<^sub>1 ?lc\<^sub>2) =
      (EX b c\<^sub>1 c\<^sub>2.
          ?c = Cond b c\<^sub>1 c\<^sub>2 &
          ?lb = lift\<^sub>s ?prj b &
          ?lc\<^sub>1 = lift\<^sub>c ?prj ?inject c\<^sub>1 &
          ?lc\<^sub>2 = lift\<^sub>c ?prj ?inject c\<^sub>2)",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_app (template_hole 8, template_var 5),
               template_var 4),
             template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 7, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 6, t_empty))),
    ("Compose.exec_rename_to_exec'",
     "[| ALL p bdy.
            ?\<Gamma> p = Some bdy -->
            ?\<Gamma>' (?N p) = Some (rename ?N bdy);
         ?\<Gamma>'\<turnstile> \<langle>rename ?N
    ?c,?s\<rangle> \<Rightarrow> ?t |]
      ==> EX t'.
             ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> t' &
             (t' = Stuck | t' = ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 4),
                  template_app
                   (template_app (template_hole 7, template_var 3),
                    template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Compose.exec_rename_to_exec",
     "[| ALL p bdy.
            ?\<Gamma> p = Some bdy -->
            ?\<Gamma>' (?h p) = Some (rename ?h bdy);
         ?\<Gamma>'\<turnstile> \<langle>?rc,?s\<rangle> \<Rightarrow> ?t;
         rename ?h ?c = ?rc |]
      ==> EX t'.
             ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> t' &
             (t' = Stuck | t' = ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 5),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app
           (template_app (template_hole 8, template_var 4), template_var 0),
          template_var 3)],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Compose.hoare_to_hoare_rename'",
     "[| ALL p bdy.
            ?\<Gamma> p = Some bdy -->
            ?\<Gamma>' (?N p) = Some (rename ?N bdy);
         ALL Z.
            ?\<Gamma>,{}
               \<turnstile>\<^bsub>/?F \<^esub>(?P Z) ?c (?Q Z),(?A Z) |]
      ==> ALL Z.
             ?\<Gamma>',{}
                \<turnstile>\<^bsub>/?F \<^esub>(?P Z) rename ?N ?c (?Q Z),
          (?A Z)",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Compose.hoaret_to_hoaret_rename'",
     "[| ALL p bdy.
            ?\<Gamma> p = Some bdy -->
            ?\<Gamma>' (?N p) = Some (rename ?N bdy);
         ALL Z.
            ?\<Gamma>,{}
               \<turnstile>\<^sub>t\<^bsub>/?F\<^esub> (?P Z) ?c
                 (?Q Z),(?A Z) |]
      ==> ALL Z.
             ?\<Gamma>',{}
                \<turnstile>\<^sub>t\<^bsub>/?F\<^esub> (?P Z) rename ?N ?c
                  (?Q Z),(?A Z)",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_hole 4, t_empty))))]:
   (string * thm * template) list
### theory "Draft.ComposeTemplates"
### 0.406s elapsed time, 0.657s cpu time, 0.150s GC time
val it = (): unit
