Loading theory "Draft.Language" (required by "Draft.SemanticTemplates" via "Draft.Semantic")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SemanticTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SemanticTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SemanticTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.133s elapsed time, 0.551s cpu time, 0.016s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SemanticTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.191s elapsed time, 0.775s cpu time, 0.016s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SemanticTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.305s elapsed time, 1.215s cpu time, 0.130s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SemanticTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.858s elapsed time, 3.247s cpu time, 0.646s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.944s elapsed time, 3.444s cpu time, 0.732s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.097s elapsed time, 6.391s cpu time, 1.599s GC time
Loading theory "Draft.Templates" (required by "Draft.SemanticTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.072s elapsed time, 0.161s cpu time, 0.049s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SemanticTemplates")
consts
  switch ::
    "('s => 'v) => ('v set * ('s, 'p, 'f) com) list => ('s, 'p, 'f) com"
consts
  guards :: "('f * 's set) list => ('s, 'p, 'f) com => ('s, 'p, 'f) com"
consts
  flatten :: "('s, 'p, 'f) com => ('s, 'p, 'f) com list"
consts
  sequence ::
    "(('s, 'p, 'f) com => ('s, 'p, 'f) com => ('s, 'p, 'f) com)
     => ('s, 'p, 'f) com list => ('s, 'p, 'f) com"
consts
  normalize :: "('s, 'p, 'f) com => ('s, 'p, 'f) com"
consts
  strip_guards :: "'f set => ('s, 'p, 'f) com => ('s, 'p, 'f) com"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.501s elapsed time, 1.029s cpu time, 0.057s GC time
consts
  mark_guards :: "'f => ('s, 'p, 'g) com => ('s, 'p, 'f) com"
### No equation for constructor "Skip"
### No equation for constructor "Basic"
### No equation for constructor "Spec"
### No equation for constructor "Seq"
### No equation for constructor "Cond"
### No equation for constructor "While"
### No equation for constructor "Call"
### No equation for constructor "DynCom"
### No equation for constructor "Throw"
### No equation for constructor "Catch"
consts
  dest_Guard :: "('s, 'p, 'f) com => 'f * 's set * ('s, 'p, 'f) com"
consts
  merge_guards :: "('s, 'p, 'f) com => ('s, 'p, 'f) com"
consts
  noguards :: "('s, 'p, 'f) com => bool"
consts
  nothrows :: "('s, 'p, 'f) com => bool"
Proofs for inductive predicate(s) "com_relp"
  Proving monotonicity ...
### Legacy feature! Old 'recdef' command -- use 'fun' or 'function' instead
Defining recursive function "Language.inter_guards" ...
Proving induction theorem ...
Postprocessing ...
Simplifying nested TCs ...
... Postprocessing finished
Proving unsplit equation...
th:
(Skip \<inter>\<^sub>g Skip) = None ==> (Skip \<inter>\<^sub>g Skip) = None
split ths:
(Skip \<inter>\<^sub>g Basic ?bc) = None
(Skip \<inter>\<^sub>g Spec ?bd) = None
(Skip \<inter>\<^sub>g Seq ?be ?bf) = None
(Skip \<inter>\<^sub>g Cond ?bg ?bh ?bi) = None
(Skip \<inter>\<^sub>g While ?bj ?bk) = None
(Skip \<inter>\<^sub>g Call ?bl) = None
(Skip \<inter>\<^sub>g DynCom ?bm) = None
(Skip \<inter>\<^sub>g Guard ?bn ?bo ?bp) = None
(Skip \<inter>\<^sub>g Throw) = None
(Skip \<inter>\<^sub>g Catch ?bq ?br) = None
(Basic ?w \<inter>\<^sub>g Skip) = None
(Basic ?w \<inter>\<^sub>g Spec ?cj) = None
(Basic ?w \<inter>\<^sub>g Seq ?ck ?cl) = None
(Basic ?w \<inter>\<^sub>g Cond ?cm ?cn ?co) = None
(Basic ?w \<inter>\<^sub>g While ?cp ?cq) = None
(Basic ?w \<inter>\<^sub>g Call ?cr) = None
(Basic ?w \<inter>\<^sub>g DynCom ?cs) = None
(Basic ?w \<inter>\<^sub>g Guard ?ct ?cu ?cv) = None
(Basic ?w \<inter>\<^sub>g Throw) = None
(Basic ?w \<inter>\<^sub>g Catch ?cw ?cx) = None
(Spec ?x \<inter>\<^sub>g Skip) = None
(Spec ?x \<inter>\<^sub>g Basic ?do) = None
(Spec ?x \<inter>\<^sub>g Seq ?dq ?dr) = None
(Spec ?x \<inter>\<^sub>g Cond ?ds ?dt ?du) = None
(Spec ?x \<inter>\<^sub>g While ?dv ?dw) = None
(Spec ?x \<inter>\<^sub>g Call ?dx) = None
(Spec ?x \<inter>\<^sub>g DynCom ?dy) = None
(Spec ?x \<inter>\<^sub>g Guard ?dz ?ea ?eb) = None
(Spec ?x \<inter>\<^sub>g Throw) = None
(Spec ?x \<inter>\<^sub>g Catch ?ec ?ed) = None
(Seq ?y ?z \<inter>\<^sub>g Skip) = None
(Seq ?y ?z \<inter>\<^sub>g Basic ?ev) = None
(Seq ?y ?z \<inter>\<^sub>g Spec ?ew) = None
(Seq ?y ?z \<inter>\<^sub>g Cond ?ez ?fa ?fb) = None
(Seq ?y ?z \<inter>\<^sub>g While ?fc ?fd) = None
(Seq ?y ?z \<inter>\<^sub>g Call ?fe) = None
(Seq ?y ?z \<inter>\<^sub>g DynCom ?ff) = None
(Seq ?y ?z \<inter>\<^sub>g Guard ?fg ?fh ?fi) = None
(Seq ?y ?z \<inter>\<^sub>g Throw) = None
(Seq ?y ?z \<inter>\<^sub>g Catch ?fj ?fk) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Skip) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Basic ?gb) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Spec ?gc) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Seq ?gd ?ge) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g While ?gi ?gj) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Call ?gk) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g DynCom ?gl) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Guard ?gm ?gn ?go) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Throw) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Catch ?gp ?gq) = None
(While ?ad ?ae \<inter>\<^sub>g Skip) = None
(While ?ad ?ae \<inter>\<^sub>g Basic ?hh) = None
(While ?ad ?ae \<inter>\<^sub>g Spec ?hi) = None
(While ?ad ?ae \<inter>\<^sub>g Seq ?hj ?hk) = None
(While ?ad ?ae \<inter>\<^sub>g Cond ?hl ?hm ?hn) = None
(While ?ad ?ae \<inter>\<^sub>g Call ?hq) = None
(While ?ad ?ae \<inter>\<^sub>g DynCom ?hr) = None
(While ?ad ?ae \<inter>\<^sub>g Guard ?hs ?ht ?hu) = None
(While ?ad ?ae \<inter>\<^sub>g Throw) = None
(While ?ad ?ae \<inter>\<^sub>g Catch ?hv ?hw) = None
(Call ?af \<inter>\<^sub>g Skip) = None
(Call ?af \<inter>\<^sub>g Basic ?in) = None
(Call ?af \<inter>\<^sub>g Spec ?io) = None
(Call ?af \<inter>\<^sub>g Seq ?ip ?iq) = None
(Call ?af \<inter>\<^sub>g Cond ?ir ?is ?it) = None
(Call ?af \<inter>\<^sub>g While ?iu ?iv) = None
(Call ?af \<inter>\<^sub>g DynCom ?ix) = None
(Call ?af \<inter>\<^sub>g Guard ?iy ?iz ?ja) = None
(Call ?af \<inter>\<^sub>g Throw) = None
(Call ?af \<inter>\<^sub>g Catch ?jb ?jc) = None
(DynCom ?ag \<inter>\<^sub>g Skip) = None
(DynCom ?ag \<inter>\<^sub>g Basic ?jt) = None
(DynCom ?ag \<inter>\<^sub>g Spec ?ju) = None
(DynCom ?ag \<inter>\<^sub>g Seq ?jv ?jw) = None
(DynCom ?ag \<inter>\<^sub>g Cond ?jx ?jy ?jz) = None
(DynCom ?ag \<inter>\<^sub>g While ?ka ?kb) = None
(DynCom ?ag \<inter>\<^sub>g Call ?kc) = None
(DynCom ?ag \<inter>\<^sub>g Guard ?ke ?kf ?kg) = None
(DynCom ?ag \<inter>\<^sub>g Throw) = None
(DynCom ?ag \<inter>\<^sub>g Catch ?kh ?ki) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Skip) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Basic ?kz) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Spec ?la) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Seq ?lb ?lc) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Cond ?ld ?le ?lf) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g While ?lg ?lh) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Call ?li) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g DynCom ?lj) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Throw) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Catch ?ln ?lo) = None
(Throw \<inter>\<^sub>g Skip) = None
(Throw \<inter>\<^sub>g Basic ?mf) = None
(Throw \<inter>\<^sub>g Spec ?mg) = None
(Throw \<inter>\<^sub>g Seq ?mh ?mi) = None
(Throw \<inter>\<^sub>g Cond ?mj ?mk ?ml) = None
(Throw \<inter>\<^sub>g While ?mm ?mn) = None
(Throw \<inter>\<^sub>g Call ?mo) = None
(Throw \<inter>\<^sub>g DynCom ?mp) = None
(Throw \<inter>\<^sub>g Guard ?mq ?mr ?ms) = None
(Throw \<inter>\<^sub>g Catch ?mt ?mu) = None
(Catch ?ak ?al \<inter>\<^sub>g Skip) = None
(Catch ?ak ?al \<inter>\<^sub>g Basic ?nl) = None
(Catch ?ak ?al \<inter>\<^sub>g Spec ?nm) = None
(Catch ?ak ?al \<inter>\<^sub>g Seq ?nn ?no) = None
(Catch ?ak ?al \<inter>\<^sub>g Cond ?np ?nq ?nr) = None
(Catch ?ak ?al \<inter>\<^sub>g While ?ns ?nt) = None
(Catch ?ak ?al \<inter>\<^sub>g Call ?nu) = None
(Catch ?ak ?al \<inter>\<^sub>g DynCom ?nv) = None
(Catch ?ak ?al \<inter>\<^sub>g Guard ?nw ?nx ?ny) = None
(Catch ?ak ?al \<inter>\<^sub>g Throw) = None
--
### recdef (solve_eq): splitto: cannot find variable to split on
Proofs for inductive predicate(s) "subseteq_guards"
  Proving monotonicity ...
### theory "Draft.Language"
### 4.305s elapsed time, 9.728s cpu time, 1.864s GC time
Loading theory "Draft.Semantic" (required by "Draft.SemanticTemplates")
Proofs for inductive predicate(s) "exec"
  Proving monotonicity ...
Proofs for inductive predicate(s) "execn"
  Proving monotonicity ...
### theory "Draft.Semantic"
### 2.024s elapsed time, 2.484s cpu time, 0.401s GC time
Loading theory "Draft.SemanticTemplates"
val templateLemmas =
   [("Semantic.isAbr_simps", "isAbr (Normal ?s) = False",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Semantic.isAbr_simps", "isAbr (Abrupt ?s) = True",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Semantic.isAbr_simps", "isAbr (Fault ?f) = False",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Semantic.isFault_simps", "isFault (Normal ?s) = False",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Semantic.isFault_simps", "isFault (Abrupt ?s) = False",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Semantic.isFault_simps", "isFault (Fault ?f) = True",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Semantic.restrict_dom_same", "?m|\<^bsub>dom ?m\<^esub> = ?m",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Semantic.execn_Skip'",
     "?\<Gamma>\<turnstile> \<langle>Skip,?t\<rangle> =?n\<Rightarrow> ?t",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_hole 0),
               template_var 1),
             template_var 0),
           template_var 1)
         )),
    ("Semantic.not_isFault_iff", "(~ isFault ?t) = (ALL f. ?t ~= Fault f)",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("Semantic.exec_iff_exec_merge_guards",
     "?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> ?t =
      ?\<Gamma>\<turnstile> \<langle>merge_guards
?c,?s\<rangle> \<Rightarrow> ?t",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_var 0))),
    ("Semantic.exec_normalize_iff_exec",
     "?\<Gamma>\<turnstile> \<langle>Language.normalize
?c,?s\<rangle> \<Rightarrow> ?t =
      ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> ?t",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("Semantic.restrict_in_dom",
     "?x : ?A ==> (?m|\<^bsub>?A\<^esub>) ?x = ?m ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1),
           template_var 2),
         template_app (template_var 0, template_var 2)))),
    ("Semantic.restrict_NoneD",
     "?m ?x = None ==> (?m|\<^bsub>?A\<^esub>) ?x = None",
     template_implication
      ([template_equation
         (template_app (template_var 2, template_var 1), template_hole 1)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0),
           template_var 1),
         template_hole 1))),
    ("Semantic.noStuck_startD",
     "?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> Normal
                             ?t ==>
      ?s ~= Stuck",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2),
                template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_negation
        (template_equation (template_var 1, template_hole 0)))),
    ("Semantic.exec_to_exec_merge_guards",
     "?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> ?t ==>
      ?\<Gamma>\<turnstile> \<langle>merge_guards
?c,?s\<rangle> \<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_app (template_hole 0, template_var 2)),
               template_var 1),
             template_var 0)
           ))),
    ("Semantic.exec_to_exec_normalize",
     "?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> ?t ==>
      ?\<Gamma>\<turnstile> \<langle>Language.normalize
?c,?s\<rangle> \<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_app (template_hole 0, template_var 2)),
               template_var 1),
             template_var 0)
           ))),
    ("Semantic.final_notin_to_finaln",
     "?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow>\<notin>?T ==>
      ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow>\<notin>?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 0),
             template_var 1)
           ))),
    ("Semantic.noAbrupt_startD",
     "?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> Normal
                             ?t ==>
      ?s ~= Abrupt ?s'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 3),
                template_var 2),
              template_app (template_hole 3, template_var 1))
            )],
       template_negation
        (
           template_equation
            (template_var 2, template_app (template_hole 0, template_var 0))
           ))),
    ("Semantic.noFault_startD",
     "?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> Normal
                             ?t ==>
      ?s ~= Fault ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 3),
                template_var 2),
              template_app (template_hole 3, template_var 1))
            )],
       template_negation
        (
           template_equation
            (template_var 2, template_app (template_hole 0, template_var 0))
           ))),
    ("Semantic.exec_merge_guards_to_exec",
     "?\<Gamma>\<turnstile> \<langle>merge_guards
?c,?s\<rangle> \<Rightarrow> ?t ==>
      ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_app (template_hole 0, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Semantic.exec_normalize_to_exec",
     "?\<Gamma>\<turnstile> \<langle>Language.normalize
?c,?s\<rangle> \<Rightarrow> ?t ==>
      ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_app (template_hole 0, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Semantic.execn_to_exec",
     "?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> ?t ==>
      ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Semantic.noStuckn_startD",
     "?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> Normal
                                ?t ==>
      ?s ~= Stuck",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_negation
        (template_equation (template_var 2, template_hole 0)))),
    ("Semantic.exec_iff_execn",
     "?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> ?t =
      (EX n. ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =n\<Rightarrow> ?t)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app (template_hole 1, t_empty))),
    ("Semantic.exec_final_notin_iff_execn",
     "?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow>\<notin>?T =
      (ALL n.
          ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =n\<Rightarrow>\<notin>?T)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app (template_hole 1, t_empty))),
    ("Semantic.execn_iff_execn_merge_guards",
     "?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> ?t =
      ?\<Gamma>\<turnstile> \<langle>merge_guards
?c,?s\<rangle> =?n\<Rightarrow> ?t",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_app (template_hole 0, template_var 3)),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("Semantic.execn_normalize_iff_execn",
     "?\<Gamma>\<turnstile> \<langle>Language.normalize
?c,?s\<rangle> =?n\<Rightarrow> ?t =
      ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> ?t",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_app (template_hole 0, template_var 3)),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("Semantic.restrict_SomeD",
     "(?m|\<^bsub>?A\<^esub>) ?x = Some ?y ==> ?m ?x = Some ?y",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 0, template_var 0))],
       template_equation
        (template_app (template_var 3, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Semantic.noAbruptn_startD",
     "?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> Normal
                                ?t ==>
      ?s ~= Abrupt ?s'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_app (template_hole 3, template_var 1))
            )],
       template_negation
        (
           template_equation
            (template_var 3, template_app (template_hole 0, template_var 0))
           ))),
    ("Semantic.noFaultn_startD",
     "?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> Normal
                                ?t ==>
      ?s ~= Fault ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_app (template_hole 3, template_var 1))
            )],
       template_negation
        (
           template_equation
            (template_var 3, template_app (template_hole 0, template_var 0))
           ))),
    ("Semantic.exec_to_execn",
     "?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> ?t ==>
      EX n. ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =n\<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Semantic.exec_to_exec_sequence_flatten",
     "?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> ?t ==>
      ?\<Gamma>\<turnstile> \<langle>sequence Seq
(flatten ?c),?s\<rangle> \<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_app (template_hole 0, template_var 2))),
               template_var 1),
             template_var 0)
           ))),
    ("Semantic.execn_Suc",
     "?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> ?t ==>
      ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =Suc
                ?n\<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 3),
                 template_var 2),
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Semantic.execn_to_execn_merge_guards",
     "?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> ?t ==>
      ?\<Gamma>\<turnstile> \<langle>merge_guards
?c,?s\<rangle> =?n\<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_app (template_hole 0, template_var 3)),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Semantic.execn_to_execn_normalize",
     "?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> ?t ==>
      ?\<Gamma>\<turnstile> \<langle>Language.normalize
?c,?s\<rangle> =?n\<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_app (template_hole 0, template_var 3)),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Semantic.execn_merge_guards_to_execn",
     "?\<Gamma>\<turnstile> \<langle>merge_guards
?c,?s\<rangle> =?n\<Rightarrow> ?t ==>
      ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_app (template_hole 0, template_var 3)),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Semantic.execn_normalize_to_execn",
     "?\<Gamma>\<turnstile> \<langle>Language.normalize
?c,?s\<rangle> =?n\<Rightarrow> ?t ==>
      ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_app (template_hole 0, template_var 3)),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Semantic.execn_final_notin_to_exec",
     "ALL n.
         ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =n\<Rightarrow>\<notin>?T ==>
      ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow>\<notin>?T",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Semantic.exec_sequence_flatten_to_exec",
     "?\<Gamma>\<turnstile> \<langle>sequence Seq
(flatten ?c),?s\<rangle> \<Rightarrow> ?t ==>
      ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_app
                   (template_app (template_hole 2, template_hole 1),
                    template_app (template_hole 0, template_var 2))),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Semantic.noStuck_Call",
     "?\<Gamma>\<turnstile> \<langle>Call
?p,Normal ?s\<rangle> \<Rightarrow>\<notin>{Stuck} ==>
      ?p : dom ?\<Gamma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 2),
                  template_app (template_hole 6, template_var 1)),
                template_app (template_hole 5, template_var 0)),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_hole 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Semantic.Stuck_end",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> ?t;
         ?s = Stuck |]
      ==> ?t = Stuck",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_equation (template_var 1, template_hole 0)],
       template_equation (template_var 0, template_hole 0))),
    ("Semantic.exec_callUndefined",
     "?\<Gamma> ?p = None ==>
      ?\<Gamma>\<turnstile> \<langle>call ?init ?p ?return
?c,Normal ?s\<rangle> \<Rightarrow> Stuck",
     template_implication
      ([template_equation
         (template_app (template_var 5, template_var 4), template_hole 4)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 5),
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 2, template_var 3),
                       template_var 4),
                     template_var 2),
                   template_var 1)),
               template_app (template_hole 1, template_var 0)),
             template_hole 0)
           ))),
    ("Semantic.notStuck_CallDefinedD",
     "?\<Gamma>\<turnstile> \<langle>Call
?p,Normal ?s\<rangle> \<Rightarrow>\<notin>{Stuck} ==>
      ?\<Gamma> ?p ~= None",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 2),
                  template_app (template_hole 7, template_var 1)),
                template_app (template_hole 6, template_var 0)),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_hole 3))
            )],
       template_negation
        (
           template_equation
            (template_app (template_var 2, template_var 1), template_hole 0)
           ))),
    ("Semantic.isAbrE", "[| isAbr ?S; !!s. ?S = Abrupt s ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Semantic.isFaultE",
     "[| isFault ?s; !!f. ?s = Fault f ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Semantic.exec_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,Stuck\<rangle> \<Rightarrow> ?t;
         ?t = Stuck ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_hole 1),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 1, template_hole 1)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Semantic.execn_Stuck_end",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> ?t;
         ?s = Stuck |]
      ==> ?t = Stuck",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_equation (template_var 2, template_hole 0)],
       template_equation (template_var 0, template_hole 0))),
    ("Semantic.execn_to_execn_sequence_flatten",
     "?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> ?t ==>
      ?\<Gamma>\<turnstile> \<langle>sequence Seq
(flatten ?c),?s\<rangle> =?n\<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 4),
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_app (template_hole 0, template_var 3))),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Semantic.execn_merge_guards_to_execn_Normal",
     "?\<Gamma>\<turnstile> \<langle>merge_guards
?c,Normal ?s\<rangle> =?n\<Rightarrow> ?t ==>
      ?\<Gamma>\<turnstile> \<langle>?c,Normal
   ?s\<rangle> =?n\<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_app (template_hole 1, template_var 3)),
                  template_app (template_hole 0, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 4),
                   template_var 3),
                 template_app (template_hole 0, template_var 2)),
               template_var 1),
             template_var 0)
           ))),
    ("Semantic.noStuckI'",
     "(?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> Stuck ==>
       False) ==>
      ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow>\<notin>{Stuck}",
     template_implication
      ([template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 5, template_var 2),
                     template_var 1),
                   template_var 0),
                 template_hole 4)
               )],
          template_predicate (template_hole 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1),
               template_var 0),
             template_app
              (template_app (template_hole 1, template_hole 4),
               template_hole 0))
           ))),
    ("Semantic.execn_sequence_flatten_to_execn",
     "?\<Gamma>\<turnstile> \<langle>sequence Seq
(flatten ?c),?s\<rangle> =?n\<Rightarrow> ?t ==>
      ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_app
                     (template_app (template_hole 2, template_hole 1),
                      template_app (template_hole 0, template_var 3))),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Semantic.noStuck_startD'",
     "[| ?t ~= Stuck;
         ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> ?t |]
      ==> ?s ~= Stuck",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1),
                template_var 0),
              template_var 3)
            )],
       template_negation
        (template_equation (template_var 0, template_hole 1)))),
    ("Semantic.noStuck_start",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> ?t;
         ?t ~= Stuck |]
      ==> ?s ~= Stuck",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 0))],
       template_negation
        (template_equation (template_var 1, template_hole 0)))),
    ("Semantic.Abrupt_end",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> ?t;
         ?s = Abrupt ?s' |]
      ==> ?t = Abrupt ?s'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_equation
         (template_var 2, template_app (template_hole 0, template_var 0))],
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Semantic.Fault_end",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> ?t;
         ?s = Fault ?f |]
      ==> ?t = Fault ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_equation
         (template_var 2, template_app (template_hole 0, template_var 0))],
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Semantic.execn_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,Stuck\<rangle> =?n\<Rightarrow> ?t;
         ?t = Stuck ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_hole 1),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 1, template_hole 1)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Semantic.noStuckE",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow>\<notin>{Stuck};
         ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> Stuck |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2),
                template_var 1),
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_hole 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2),
                template_var 1),
              template_hole 2)
            )],
       template_predicate (template_var 0))),
    ("Semantic.execn_callUndefined",
     "?\<Gamma> ?p = None ==>
      ?\<Gamma>\<turnstile> \<langle>call ?init ?p ?return
?c,Normal ?s\<rangle> =Suc ?n\<Rightarrow> Stuck",
     template_implication
      ([template_equation
         (template_app (template_var 6, template_var 5), template_hole 5)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_var 6),
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 3, template_var 4),
                         template_var 5),
                       template_var 3),
                     template_var 2)),
                 template_app (template_hole 2, template_var 1)),
               template_app (template_hole 1, template_var 0)),
             template_hole 0)
           ))),
    ("Semantic.exec_to_exec_mark_guards_Fault",
     "?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> Fault
                             ?f ==>
      EX f'.
         ?\<Gamma>\<turnstile> \<langle>mark_guards ?x
   ?c,?s\<rangle> \<Rightarrow> Fault f'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3),
                template_var 2),
              template_app (template_hole 2, template_var 1))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Semantic.noStuckn_startD'",
     "[| ?t ~= Stuck;
         ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> ?t |]
      ==> ?s ~= Stuck",
     template_implication
      ([template_negation
         (template_equation (template_var 4, template_hole 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 0, template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0),
              template_var 4)
            )],
       template_negation
        (template_equation (template_var 1, template_hole 1)))),
    ("Semantic.exec_Normal_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>Skip,Normal
        ?s\<rangle> \<Rightarrow> ?t;
         ?t = Normal ?s ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_hole 2),
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app (template_hole 1, template_var 2))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Semantic.exec_Normal_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>Throw,Normal
         ?s\<rangle> \<Rightarrow> ?t;
         ?t = Abrupt ?s ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 3),
                  template_hole 3),
                template_app (template_hole 2, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app (template_hole 0, template_var 2))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Semantic.exec_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,Abrupt
      ?s\<rangle> \<Rightarrow> ?t;
         ?t = Abrupt ?s ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3),
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app (template_hole 1, template_var 2))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Semantic.exec_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,Fault
      ?f\<rangle> \<Rightarrow> ?t;
         ?t = Fault ?f ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3),
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app (template_hole 1, template_var 2))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Semantic.noStuck_startn",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> ?t;
         ?t ~= Stuck |]
      ==> ?s ~= Stuck",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 0))],
       template_negation
        (template_equation (template_var 2, template_hole 0)))),
    ("Semantic.execn_Abrupt_end",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> ?t;
         ?s = Abrupt ?s' |]
      ==> ?t = Abrupt ?s'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_equation
         (template_var 3, template_app (template_hole 0, template_var 0))],
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Semantic.execn_Fault_end",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> ?t;
         ?s = Fault ?f |]
      ==> ?t = Fault ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_equation
         (template_var 3, template_app (template_hole 0, template_var 0))],
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Semantic.exec_assoc",
     "?\<Gamma>\<turnstile> \<langle>Seq ?c1.0
(Seq ?c2.0 ?c3.0),?s\<rangle> \<Rightarrow> ?t =
      ?\<Gamma>\<turnstile> \<langle>Seq (Seq ?c1.0 ?c2.0)
?c3.0,?s\<rangle> \<Rightarrow> ?t",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 5),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2))),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 5),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3)),
               template_var 2)),
           template_var 1),
         template_var 0))),
    ("Semantic.exec_Call_body_aux",
     "?\<Gamma> ?p = Some ?bdy ==>
      ?\<Gamma>\<turnstile> \<langle>Call ?p,?s\<rangle> \<Rightarrow> ?t =
      ?\<Gamma>\<turnstile> \<langle>?bdy,?s\<rangle> \<Rightarrow> ?t",
     template_implication
      ([template_equation
         (template_app (template_var 4, template_var 3),
          template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_app (template_hole 0, template_var 3)),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("Semantic.exec_blockStuck",
     "?\<Gamma>\<turnstile> \<langle>?bdy,Normal
     (?init ?s)\<rangle> \<Rightarrow> Stuck ==>
      ?\<Gamma>\<turnstile> \<langle>block ?init ?bdy ?return
?c,Normal ?s\<rangle> \<Rightarrow> Stuck",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 5),
                  template_var 4),
                template_app
                 (template_hole 2,
                  template_app (template_var 3, template_var 2))),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 5),
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 4),
                     template_var 1),
                   template_var 0)),
               template_app (template_hole 2, template_var 2)),
             template_hole 1)
           ))),
    ("Semantic.noFaultI'",
     "(?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> Fault
                              ?f ==>
       False) ==>
      ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow>\<notin>{Fault
                                     ?f}",
     template_implication
      ([template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 5, template_var 3),
                     template_var 2),
                   template_var 1),
                 template_app (template_hole 4, template_var 0))
               )],
          template_predicate (template_hole 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 1),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 4, template_var 0)),
               template_hole 0))
           ))),
    ("Semantic.noStucknI'",
     "(?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> Stuck ==>
       False) ==>
      ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow>\<notin>{Stuck}",
     template_implication
      ([template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 5, template_var 3),
                       template_var 2),
                     template_var 1),
                   template_var 0),
                 template_hole 4)
               )],
          template_predicate (template_hole 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0),
             template_app
              (template_app (template_hole 1, template_hole 4),
               template_hole 0))
           ))),
    ("Semantic.noFault_startD'",
     "[| ?t ~= Fault ?f;
         ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> ?t |]
      ==> ?s ~= Fault ?f",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 4,
              template_app (template_hole 1, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1),
                template_var 0),
              template_var 4)
            )],
       template_negation
        (
           template_equation
            (template_var 0, template_app (template_hole 1, template_var 3))
           ))),
    ("Semantic.exec_to_exec_mark_guards",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> ?t;
         ~ isFault ?t |]
      ==> ?\<Gamma>\<turnstile> \<langle>mark_guards ?f
    ?c,?s\<rangle> \<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 4),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 3)),
               template_var 2),
             template_var 1)
           ))),
    ("Semantic.exec_to_exec_strip_guards",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> ?t;
         ~ isFault ?t |]
      ==> ?\<Gamma>\<turnstile> \<langle>strip_guards ?F
    ?c,?s\<rangle> \<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 4),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 3)),
               template_var 2),
             template_var 1)
           ))),
    ("Semantic.exec_to_exec_strip",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> ?t;
         ~ isFault ?t |]
      ==> strip ?F
           ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 4)),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("Semantic.noFault_start",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> ?t;
         ?t ~= Fault ?f |]
      ==> ?s ~= Fault ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 0, template_var 0))
            )],
       template_negation
        (
           template_equation
            (template_var 2, template_app (template_hole 0, template_var 0))
           ))),
    ("Semantic.execn_mono",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> ?t;
         ?n <= ?m |]
      ==> ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?m\<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 0),
             template_var 1)
           ))),
    ("Semantic.execn_Normal_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>Skip,Normal
        ?s\<rangle> =?n\<Rightarrow> ?t;
         ?t = Normal ?s ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_hole 2),
                  template_app (template_hole 1, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app (template_hole 1, template_var 3))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Semantic.execn_Normal_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>Throw,Normal
         ?s\<rangle> =?n\<Rightarrow> ?t;
         ?t = Abrupt ?s ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 4),
                    template_hole 3),
                  template_app (template_hole 2, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app (template_hole 0, template_var 3))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Semantic.execn_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,Abrupt
      ?s\<rangle> =?n\<Rightarrow> ?t;
         ?t = Abrupt ?s ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 4),
                  template_app (template_hole 1, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app (template_hole 1, template_var 3))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Semantic.execn_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,Fault
      ?f\<rangle> =?n\<Rightarrow> ?t;
         ?t = Fault ?f ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 4),
                  template_app (template_hole 1, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app (template_hole 1, template_var 3))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Semantic.noFaultE",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow>\<notin>{Fault
  ?f};
         ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> Fault
                                ?f |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 3),
                template_var 2),
              template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 1)),
                template_hole 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 4),
                  template_var 3),
                template_var 2),
              template_app (template_hole 2, template_var 1))
            )],
       template_predicate (template_var 0))),
    ("Semantic.exec_Call_body'",
     "?p : dom ?\<Gamma> ==>
      ?\<Gamma>\<turnstile> \<langle>Call ?p,?s\<rangle> \<Rightarrow> ?t =
      ?\<Gamma>\<turnstile> \<langle>the
(?\<Gamma> ?p),?s\<rangle> \<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app (template_hole 4, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_app (template_hole 1, template_var 3)),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_hole 0,
                 template_app (template_var 2, template_var 3))),
             template_var 1),
           template_var 0)))),
    ("Semantic.notStuck_DynComD",
     "?\<Gamma>\<turnstile> \<langle>DynCom
?c,Normal ?s\<rangle> \<Rightarrow>\<notin>{Stuck} ==>
      ?\<Gamma>\<turnstile> \<langle>?c
?s,Normal ?s\<rangle> \<Rightarrow>\<notin>{Stuck}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 2),
                  template_app (template_hole 4, template_var 1)),
                template_app (template_hole 3, template_var 0)),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_hole 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 5, template_var 2),
                 template_app (template_var 1, template_var 0)),
               template_app (template_hole 3, template_var 0)),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 0))
           ))),
    ("Semantic.notStuck_CatchD1",
     "?\<Gamma>\<turnstile> \<langle>Catch ?c1.0
?c2.0,Normal ?s\<rangle> \<Rightarrow>\<notin>{Stuck} ==>
      ?\<Gamma>\<turnstile> \<langle>?c1.0,Normal
      ?s\<rangle> \<Rightarrow>\<notin>{Stuck}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 1)),
                template_app (template_hole 3, template_var 0)),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_hole 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 5, template_var 3),
                 template_var 2),
               template_app (template_hole 3, template_var 0)),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 0))
           ))),
    ("Semantic.notStuck_SeqD1",
     "?\<Gamma>\<turnstile> \<langle>Seq ?c1.0
?c2.0,Normal ?s\<rangle> \<Rightarrow>\<notin>{Stuck} ==>
      ?\<Gamma>\<turnstile> \<langle>?c1.0,Normal
      ?s\<rangle> \<Rightarrow>\<notin>{Stuck}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 1)),
                template_app (template_hole 3, template_var 0)),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_hole 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 5, template_var 3),
                 template_var 2),
               template_app (template_hole 3, template_var 0)),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 0))
           ))),
    ("Semantic.final_notinI",
     "(!!t. ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> t ==>
            t ~: ?T) ==>
      ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow>\<notin>?T",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Semantic.noFaultn_startD'",
     "[| ?t ~= Fault ?f;
         ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> ?t |]
      ==> ?s ~= Fault ?f",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 5,
              template_app (template_hole 1, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 0, template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0),
              template_var 5)
            )],
       template_negation
        (
           template_equation
            (template_var 1, template_app (template_hole 1, template_var 4))
           ))),
    ("Semantic.noFault_startn",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> ?t;
         ?t ~= Fault ?f |]
      ==> ?s ~= Fault ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 0, template_var 0))
            )],
       template_negation
        (
           template_equation
            (template_var 3, template_app (template_hole 0, template_var 0))
           ))),
    ("Semantic.exec_Normal_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>Basic
   ?f,Normal ?s\<rangle> \<Rightarrow> ?t;
         ?t = Normal (?f ?s) ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 4),
                  template_app (template_hole 2, template_var 3)),
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app
              (template_hole 1,
               template_app (template_var 3, template_var 2)))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Semantic.exec_restrict_to_exec",
     "[| ?\<Gamma>|\<^bsub>?A\<^esub>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> ?t;
         ?t ~= Stuck |]
      ==> ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 4),
                      template_var 3)),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 4),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Semantic.noStuck_exec_startD",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow>\<notin>{Stuck};
         ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> ?t |]
      ==> ?s ~= Stuck",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2),
                template_var 1),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_hole 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_negation
        (template_equation (template_var 1, template_hole 4)))),
    ("Semantic.noStuck_execD",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow>\<notin>{Stuck};
         ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> ?t |]
      ==> ?t ~= Stuck",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2),
                template_var 1),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_hole 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_negation
        (template_equation (template_var 0, template_hole 4)))),
    ("Semantic.execn_assoc",
     "?\<Gamma>\<turnstile> \<langle>Seq ?c1.0
(Seq ?c2.0 ?c3.0),?s\<rangle> =?n\<Rightarrow> ?t =
      ?\<Gamma>\<turnstile> \<langle>Seq (Seq ?c1.0 ?c2.0)
?c3.0,?s\<rangle> =?n\<Rightarrow> ?t",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 6),
               template_app
                (template_app (template_hole 0, template_var 5),
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3))),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 6),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 4)),
                 template_var 3)),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("Semantic.exec_Call_body",
     "?\<Gamma> ?p = Some ?bdy ==>
      ?\<Gamma>\<turnstile> \<langle>Call ?p,?s\<rangle> \<Rightarrow> ?t =
      ?\<Gamma>\<turnstile> \<langle>the
(?\<Gamma> ?p),?s\<rangle> \<Rightarrow> ?t",
     template_implication
      ([template_equation
         (template_app (template_var 4, template_var 3),
          template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_app (template_hole 1, template_var 3)),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_app
                (template_hole 0,
                 template_app (template_var 4, template_var 3))),
             template_var 1),
           template_var 0)))),
    ("Semantic.exec_blockFault",
     "?\<Gamma>\<turnstile> \<langle>?bdy,Normal
     (?init ?s)\<rangle> \<Rightarrow> Fault ?f ==>
      ?\<Gamma>\<turnstile> \<langle>block ?init ?bdy ?return
?c,Normal ?s\<rangle> \<Rightarrow> Fault ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 6),
                  template_var 5),
                template_app
                 (template_hole 2,
                  template_app (template_var 4, template_var 3))),
              template_app (template_hole 1, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 6),
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 4),
                       template_var 5),
                     template_var 1),
                   template_var 0)),
               template_app (template_hole 2, template_var 3)),
             template_app (template_hole 1, template_var 2))
           ))),
    ("Semantic.execn_blockStuck",
     "?\<Gamma>\<turnstile> \<langle>?bdy,Normal
     (?init ?s)\<rangle> =?n\<Rightarrow> Stuck ==>
      ?\<Gamma>\<turnstile> \<langle>block ?init ?bdy ?return
?c,Normal ?s\<rangle> =?n\<Rightarrow> Stuck",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 6),
                    template_var 5),
                  template_app
                   (template_hole 2,
                    template_app (template_var 4, template_var 3))),
                template_var 2),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 6),
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 4),
                         template_var 5),
                       template_var 1),
                     template_var 0)),
                 template_app (template_hole 2, template_var 3)),
               template_var 2),
             template_hole 1)
           ))),
    ("Semantic.noFaultnI'",
     "(?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> Fault
                                 ?f ==>
       False) ==>
      ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow>\<notin>{Fault
  ?f}",
     template_implication
      ([template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 5, template_var 4),
                       template_var 3),
                     template_var 2),
                   template_var 1),
                 template_app (template_hole 4, template_var 0))
               )],
          template_predicate (template_hole 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 4, template_var 0)),
               template_hole 0))
           ))),
    ("Semantic.noAbrupt_start",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> ?t;
         ALL t'. ?t ~= Abrupt t' |]
      ==> ?s ~= Abrupt ?s'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_negation
        (
           template_equation
            (template_var 2, template_app (template_hole 0, template_var 0))
           ))),
    ("Semantic.exec_Seq'",
     "[| ?\<Gamma>\<turnstile> \<langle>?c1.0,?s\<rangle> \<Rightarrow> ?s';
         ?\<Gamma>\<turnstile> \<langle>?c2.0,?s'\<rangle> \<Rightarrow> ?s'' |]
      ==> ?\<Gamma>\<turnstile> \<langle>Seq ?c1.0
    ?c2.0,?s\<rangle> \<Rightarrow> ?s''",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 5),
                  template_var 1),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 5),
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 1)),
               template_var 3),
             template_var 0)
           ))),
    ("Semantic.execn_to_execn_mark_guards",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> ?t;
         ~ isFault ?t |]
      ==> ?\<Gamma>\<turnstile> \<langle>mark_guards ?f
    ?c,?s\<rangle> =?n\<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 5),
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 4)),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("Semantic.execn_to_execn_strip_guards",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> ?t;
         ~ isFault ?t |]
      ==> ?\<Gamma>\<turnstile> \<langle>strip_guards ?F
    ?c,?s\<rangle> =?n\<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 5),
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 4)),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("Semantic.execn_to_execn_strip",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> ?t;
         ~ isFault ?t |]
      ==> strip ?F
           ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 5)),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("Semantic.execn_Normal_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>Basic
   ?f,Normal ?s\<rangle> =?n\<Rightarrow> ?t;
         ?t = Normal (?f ?s) ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 5),
                    template_app (template_hole 2, template_var 4)),
                  template_app (template_hole 1, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app
              (template_hole 1,
               template_app (template_var 4, template_var 3)))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Semantic.not_isAbrD",
     "~ isAbr ?s ==>
      (EX s'. ?s = Normal s') | ?s = Stuck | (EX f. ?s = Fault f)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 7, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6, template_app (template_hole 5, t_empty)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_hole 2)),
               template_app (template_hole 1, t_empty)))
           ))),
    ("Semantic.noStuckI",
     "(!!t. ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> t ==>
            t ~= Stuck) ==>
      ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow>\<notin>{Stuck}",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1),
               template_var 0),
             template_app
              (template_app (template_hole 1, template_hole 3),
               template_hole 0))
           ))),
    ("Semantic.exec_to_exec_strip_guards'",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> ?t;
         ?t ~: Fault ` ?F |]
      ==> ?\<Gamma>\<turnstile> \<langle>strip_guards ?F
    ?c,?s\<rangle> \<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_app
                   (template_app (template_hole 2, template_hole 1),
                    template_var 0))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 5, template_var 4),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 3)),
               template_var 2),
             template_var 1)
           ))),
    ("Semantic.exec_to_exec_strip'",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> ?t;
         ?t ~: Fault ` ?F |]
      ==> strip ?F
           ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_app
                   (template_app (template_hole 2, template_hole 1),
                    template_var 0))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 4)),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("Semantic.exec_to_exec_strip_guards_Fault",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> Fault
                                ?f;
         ?f ~: ?F |]
      ==> ?\<Gamma>\<turnstile> \<langle>strip_guards ?F
    ?c,?s\<rangle> \<Rightarrow> Fault ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 3),
                template_var 2),
              template_app (template_hole 3, template_var 1))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 4),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 3)),
               template_var 2),
             template_app (template_hole 3, template_var 1))
           ))),
    ("Semantic.noAbrupt_startn",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> ?t;
         ALL t'. ?t ~= Abrupt t' |]
      ==> ?s ~= Abrupt ?s'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_negation
        (
           template_equation
            (template_var 3, template_app (template_hole 0, template_var 0))
           ))),
    ("Semantic.exec_Normal_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>DynCom
   ?c,Normal ?s\<rangle> \<Rightarrow> ?t;
         ?\<Gamma>\<turnstile> \<langle>?c
   ?s,Normal ?s\<rangle> \<Rightarrow> ?t ==>
         ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 4),
                  template_app (template_hole 1, template_var 3)),
                template_app (template_hole 0, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 4),
                     template_app (template_var 3, template_var 2)),
                   template_app (template_hole 0, template_var 2)),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Semantic.execn_restrict_to_execn",
     "[| ?\<Gamma>|\<^bsub>?A\<^esub>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> ?t;
         ?t ~= Stuck |]
      ==> ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 4,
                      template_app
                       (template_app (template_hole 3, template_var 5),
                        template_var 4)),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_var 5),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Semantic.noFault_exec_startD",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow>\<notin>{Fault
  ?f};
         ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> ?t |]
      ==> ?s ~= Fault ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 4),
                  template_var 3),
                template_var 2),
              template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 1)),
                template_hole 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_negation
        (
           template_equation
            (template_var 2, template_app (template_hole 4, template_var 1))
           ))),
    ("Semantic.noFault_execD",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow>\<notin>{Fault
  ?f};
         ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> ?t |]
      ==> ?t ~= Fault ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 4),
                  template_var 3),
                template_var 2),
              template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 1)),
                template_hole 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_negation
        (
           template_equation
            (template_var 0, template_app (template_hole 4, template_var 1))
           ))),
    ("Semantic.noStuckn_exec_startD",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow>\<notin>{Stuck};
         ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> ?t |]
      ==> ?s ~= Stuck",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_hole 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_negation
        (template_equation (template_var 2, template_hole 4)))),
    ("Semantic.noStuckn_execD",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow>\<notin>{Stuck};
         ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> ?t |]
      ==> ?t ~= Stuck",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_hole 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_negation
        (template_equation (template_var 0, template_hole 4)))),
    ("Semantic.exec_blockAbrupt",
     "?\<Gamma>\<turnstile> \<langle>?bdy,Normal
     (?init ?s)\<rangle> \<Rightarrow> Abrupt ?t ==>
      ?\<Gamma>\<turnstile> \<langle>block ?init ?bdy ?return
?c,Normal ?s\<rangle> \<Rightarrow> Abrupt (?return ?s ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 6),
                  template_var 5),
                template_app
                 (template_hole 2,
                  template_app (template_var 4, template_var 3))),
              template_app (template_hole 1, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 6),
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 4),
                       template_var 5),
                     template_var 1),
                   template_var 0)),
               template_app (template_hole 2, template_var 3)),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_var 1, template_var 3),
                 template_var 2)))
           ))),
    ("Semantic.execn_blockFault",
     "?\<Gamma>\<turnstile> \<langle>?bdy,Normal
     (?init ?s)\<rangle> =?n\<Rightarrow> Fault ?f ==>
      ?\<Gamma>\<turnstile> \<langle>block ?init ?bdy ?return
?c,Normal ?s\<rangle> =?n\<Rightarrow> Fault ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 7),
                    template_var 6),
                  template_app
                   (template_hole 2,
                    template_app (template_var 5, template_var 4))),
                template_var 3),
              template_app (template_hole 1, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 7),
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 5),
                         template_var 6),
                       template_var 1),
                     template_var 0)),
                 template_app (template_hole 2, template_var 4)),
               template_var 3),
             template_app (template_hole 1, template_var 2))
           ))),
    ("Semantic.exec_dynCall",
     "?\<Gamma>\<turnstile> \<langle>call ?init (?p ?s) ?return
?c,Normal ?s\<rangle> \<Rightarrow> ?t ==>
      ?\<Gamma>\<turnstile> \<langle>dynCall ?init ?p ?return
?c,Normal ?s\<rangle> \<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 6),
                  template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 2, template_var 5),
                        template_app (template_var 4, template_var 3)),
                      template_var 2),
                    template_var 1)),
                template_app (template_hole 1, template_var 3)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 6),
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 4),
                     template_var 2),
                   template_var 1)),
               template_app (template_hole 1, template_var 3)),
             template_var 0)
           ))),
    ("Semantic.noFaultI",
     "(!!t. ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> t ==>
            t ~= Fault ?f) ==>
      ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow>\<notin>{Fault
                                     ?f}",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 1),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 3, template_var 0)),
               template_hole 0))
           ))),
    ("Semantic.noStucknI",
     "(!!t. ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> t ==>
            t ~= Stuck) ==>
      ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow>\<notin>{Stuck}",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0),
             template_app
              (template_app (template_hole 1, template_hole 3),
               template_hole 0))
           ))),
    ("Semantic.execn_to_execn_strip_guards'",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> ?t;
         ?t ~: Fault ` ?F |]
      ==> ?\<Gamma>\<turnstile> \<langle>strip_guards ?F
    ?c,?s\<rangle> =?n\<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_app
                   (template_app (template_hole 2, template_hole 1),
                    template_var 0))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 5, template_var 5),
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 4)),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("Semantic.execn_to_execn_strip'",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> ?t;
         ?t ~: Fault ` ?F |]
      ==> strip ?F
           ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_app
                   (template_app (template_hole 2, template_hole 1),
                    template_var 0))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 5)),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("Semantic.execn_Seq'",
     "[| ?\<Gamma>\<turnstile> \<langle>?c1.0,?s\<rangle> =?n\<Rightarrow> ?s';
         ?\<Gamma>\<turnstile> \<langle>?c2.0,?s'\<rangle> =?n\<Rightarrow> ?s'' |]
      ==> ?\<Gamma>\<turnstile> \<langle>Seq ?c1.0
    ?c2.0,?s\<rangle> =?n\<Rightarrow> ?s''",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 6),
                    template_var 1),
                  template_var 2),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 6),
                   template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 1)),
                 template_var 4),
               template_var 3),
             template_var 0)
           ))),
    ("Semantic.execn_Normal_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>DynCom
   ?c,Normal ?s\<rangle> =?n\<Rightarrow> ?t;
         ?\<Gamma>\<turnstile> \<langle>?c
   ?s,Normal ?s\<rangle> =?n\<Rightarrow> ?t ==>
         ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 5),
                    template_app (template_hole 1, template_var 4)),
                  template_app (template_hole 0, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 2, template_var 5),
                       template_app (template_var 4, template_var 3)),
                     template_app (template_hole 0, template_var 3)),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Semantic.noFaultn_exec_startD",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow>\<notin>{Fault
     ?f};
         ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> ?t |]
      ==> ?s ~= Fault ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 1)),
                template_hole 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_negation
        (
           template_equation
            (template_var 3, template_app (template_hole 4, template_var 1))
           ))),
    ("Semantic.noFaultn_execD",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow>\<notin>{Fault
     ?f};
         ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> ?t |]
      ==> ?t ~= Fault ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 1)),
                template_hole 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_negation
        (
           template_equation
            (template_var 0, template_app (template_hole 4, template_var 1))
           ))),
    ("Semantic.execn_blockAbrupt",
     "?\<Gamma>\<turnstile> \<langle>?bdy,Normal
     (?init ?s)\<rangle> =?n\<Rightarrow> Abrupt ?t ==>
      ?\<Gamma>\<turnstile> \<langle>block ?init ?bdy ?return
?c,Normal ?s\<rangle> =?n\<Rightarrow> Abrupt (?return ?s ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 7),
                    template_var 6),
                  template_app
                   (template_hole 2,
                    template_app (template_var 5, template_var 4))),
                template_var 3),
              template_app (template_hole 1, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 7),
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 5),
                         template_var 6),
                       template_var 1),
                     template_var 0)),
                 template_app (template_hole 2, template_var 4)),
               template_var 3),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_var 1, template_var 4),
                 template_var 2)))
           ))),
    ("Semantic.execn_dynCall",
     "?\<Gamma>\<turnstile> \<langle>call ?init (?p ?s) ?return
?c,Normal ?s\<rangle> =?n\<Rightarrow> ?t ==>
      ?\<Gamma>\<turnstile> \<langle>dynCall ?init ?p ?return
?c,Normal ?s\<rangle> =?n\<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 7),
                    template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 2, template_var 6),
                          template_app (template_var 5, template_var 4)),
                        template_var 3),
                      template_var 2)),
                  template_app (template_hole 1, template_var 4)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 7),
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 6),
                         template_var 5),
                       template_var 3),
                     template_var 2)),
                 template_app (template_hole 1, template_var 4)),
               template_var 1),
             template_var 0)
           ))),
    ("Semantic.execn_to_execn_mark_guards_Fault",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> ?t;
         ?t = Fault ?f |]
      ==> EX f'.
             ?\<Gamma>\<turnstile> \<langle>mark_guards ?x
       ?c,?s\<rangle> =?n\<Rightarrow> Fault f'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_equation
         (template_var 2, template_app (template_hole 2, template_var 1))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Semantic.notStuck_WhileTrueD1",
     "[| ?\<Gamma>\<turnstile> \<langle>While ?b
   ?c,Normal ?s\<rangle> \<Rightarrow>\<notin>{Stuck};
         ?s : ?b |]
      ==> ?\<Gamma>\<turnstile> \<langle>?c,Normal
       ?s\<rangle> \<Rightarrow>\<notin>{Stuck}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 3),
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_var 1)),
                template_app (template_hole 4, template_var 0)),
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_hole 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 6, template_var 3),
                 template_var 1),
               template_app (template_hole 4, template_var 0)),
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_hole 1))
           ))),
    ("Semantic.Seq_NoFaultStuckD1",
     "?\<Gamma>\<turnstile> \<langle>Seq ?c1.0
?c2.0,?s\<rangle> \<Rightarrow>\<notin>{Stuck} Un Fault ` ?F ==>
      ?\<Gamma>\<turnstile> \<langle>?c1.0,?s\<rangle> \<Rightarrow>\<notin>{Stuck} Un
Fault ` ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 4),
                  template_app
                   (template_app (template_hole 6, template_var 3),
                    template_var 2)),
                template_var 1),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_hole 3),
                    template_hole 2)),
                template_app
                 (template_app (template_hole 1, template_hole 0),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 7, template_var 4),
                 template_var 3),
               template_var 1),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_hole 2)),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0)))
           ))),
    ("Semantic.noFaultnI",
     "(!!t. ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> t ==>
            t ~= Fault ?f) ==>
      ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow>\<notin>{Fault
  ?f}",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 3, template_var 0)),
               template_hole 0))
           ))),
    ("Semantic.exec_callStuck",
     "[| ?\<Gamma> ?p = Some ?bdy;
         ?\<Gamma>\<turnstile> \<langle>?bdy,Normal
        (?init ?s)\<rangle> \<Rightarrow> Stuck |]
      ==> ?\<Gamma>\<turnstile> \<langle>call ?init ?p ?return
    ?c,Normal ?s\<rangle> \<Rightarrow> Stuck",
     template_implication
      ([template_equation
         (template_app (template_var 6, template_var 5),
          template_app (template_hole 4, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 6),
                  template_var 4),
                template_app
                 (template_hole 2,
                  template_app (template_var 3, template_var 2))),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 6),
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 5),
                     template_var 1),
                   template_var 0)),
               template_app (template_hole 2, template_var 2)),
             template_hole 1)
           ))),
    ("Semantic.notStuck_CallD",
     "[| ?\<Gamma>\<turnstile> \<langle>Call
   ?p,Normal ?s\<rangle> \<Rightarrow>\<notin>{Stuck};
         ?\<Gamma> ?p = Some ?bdy |]
      ==> ?\<Gamma>\<turnstile> \<langle>?bdy,Normal
         ?s\<rangle> \<Rightarrow>\<notin>{Stuck}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 3),
                  template_app (template_hole 6, template_var 2)),
                template_app (template_hole 5, template_var 1)),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_hole 2))
            ),
        template_equation
         (template_app (template_var 3, template_var 2),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 7, template_var 3),
                 template_var 0),
               template_app (template_hole 5, template_var 1)),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_hole 2))
           ))),
    ("Semantic.notStuck_CondTrueD",
     "[| ?\<Gamma>\<turnstile> \<langle>Cond ?b ?c1.0
   ?c2.0,Normal ?s\<rangle> \<Rightarrow>\<notin>{Stuck};
         ?s : ?b |]
      ==> ?\<Gamma>\<turnstile> \<langle>?c1.0,Normal
          ?s\<rangle> \<Rightarrow>\<notin>{Stuck}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 4),
                  template_app
                   (template_app
                     (template_app (template_hole 5, template_var 3),
                      template_var 2),
                    template_var 1)),
                template_app (template_hole 4, template_var 0)),
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_hole 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 6, template_var 4),
                 template_var 2),
               template_app (template_hole 4, template_var 0)),
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_hole 1))
           ))),
    ("Semantic.notStuck_GuardD",
     "[| ?\<Gamma>\<turnstile> \<langle>Guard ?m ?g
   ?c,Normal ?s\<rangle> \<Rightarrow>\<notin>{Stuck};
         ?s : ?g |]
      ==> ?\<Gamma>\<turnstile> \<langle>?c,Normal
       ?s\<rangle> \<Rightarrow>\<notin>{Stuck}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 4),
                  template_app
                   (template_app
                     (template_app (template_hole 5, template_var 3),
                      template_var 2),
                    template_var 1)),
                template_app (template_hole 4, template_var 0)),
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_hole 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 6, template_var 4),
                 template_var 1),
               template_app (template_hole 4, template_var 0)),
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_hole 1))
           ))),
    ("Semantic.noStuck_Call_body",
     "?\<Gamma> ?p = Some ?bdy ==>
      ?\<Gamma>\<turnstile> \<langle>Call
?p,Normal ?s\<rangle> \<Rightarrow>\<notin>{Stuck} =
      ?\<Gamma>\<turnstile> \<langle>the
(?\<Gamma> ?p),Normal ?s\<rangle> \<Rightarrow>\<notin>{Stuck}",
     template_implication
      ([template_equation
         (template_app (template_var 3, template_var 2),
          template_app (template_hole 8, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 6, template_var 3),
               template_app (template_hole 5, template_var 2)),
             template_app (template_hole 4, template_var 0)),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_hole 1)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 6, template_var 3),
               template_app
                (template_hole 0,
                 template_app (template_var 3, template_var 2))),
             template_app (template_hole 4, template_var 0)),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_hole 1))))),
    ("Semantic.notStuck_SeqD2",
     "[| ?\<Gamma>\<turnstile> \<langle>Seq ?c1.0
   ?c2.0,Normal ?s\<rangle> \<Rightarrow>\<notin>{Stuck};
         ?\<Gamma>\<turnstile> \<langle>?c1.0,Normal
         ?s\<rangle> \<Rightarrow> ?s' |]
      ==> ?\<Gamma>\<turnstile> \<langle>?c2.0,?s'\<rangle> \<Rightarrow>\<notin>{Stuck}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 4),
                  template_app
                   (template_app (template_hole 5, template_var 3),
                    template_var 2)),
                template_app (template_hole 4, template_var 1)),
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_hole 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 4),
                  template_var 3),
                template_app (template_hole 4, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 6, template_var 4),
                 template_var 2),
               template_var 0),
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_hole 1))
           ))),
    ("Semantic.notStuck_CondFalseD",
     "[| ?\<Gamma>\<turnstile> \<langle>Cond ?b ?c1.0
   ?c2.0,Normal ?s\<rangle> \<Rightarrow>\<notin>{Stuck};
         ?s ~: ?b |]
      ==> ?\<Gamma>\<turnstile> \<langle>?c2.0,Normal
          ?s\<rangle> \<Rightarrow>\<notin>{Stuck}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 4),
                  template_app
                   (template_app
                     (template_app (template_hole 6, template_var 3),
                      template_var 2),
                    template_var 1)),
                template_app (template_hole 5, template_var 0)),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_hole 2))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 0, template_var 0),
                  template_var 3)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 7, template_var 4),
                 template_var 1),
               template_app (template_hole 5, template_var 0)),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_hole 2))
           ))),
    ("Semantic.Guard_noFaultStuckD",
     "[| ?\<Gamma>\<turnstile> \<langle>Guard ?f ?g
   ?c,Normal ?s\<rangle> \<Rightarrow>\<notin>{Stuck} Un Fault ` (- ?F);
         ?f ~: ?F |]
      ==> ?s : ?g",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 12, template_var 5),
                  template_app
                   (template_app
                     (template_app (template_hole 11, template_var 4),
                      template_var 3),
                    template_var 2)),
                template_app (template_hole 10, template_var 1)),
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 8, template_hole 7),
                    template_hole 6)),
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_app (template_hole 3, template_var 0))))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 3)
           ))),
    ("Semantic.exec_callFault",
     "[| ?\<Gamma> ?p = Some ?bdy;
         ?\<Gamma>\<turnstile> \<langle>?bdy,Normal
        (?init ?s)\<rangle> \<Rightarrow> Fault ?f |]
      ==> ?\<Gamma>\<turnstile> \<langle>call ?init ?p ?return
    ?c,Normal ?s\<rangle> \<Rightarrow> Fault ?f",
     template_implication
      ([template_equation
         (template_app (template_var 7, template_var 6),
          template_app (template_hole 4, template_var 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 7),
                  template_var 5),
                template_app
                 (template_hole 2,
                  template_app (template_var 4, template_var 3))),
              template_app (template_hole 1, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 7),
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 4),
                       template_var 6),
                     template_var 1),
                   template_var 0)),
               template_app (template_hole 2, template_var 3)),
             template_app (template_hole 1, template_var 2))
           ))),
    ("Semantic.noFault_Call_body",
     "?\<Gamma> ?p = Some ?bdy ==>
      ?\<Gamma>\<turnstile> \<langle>Call
?p,Normal ?s\<rangle> \<Rightarrow>\<notin>{Fault ?f} =
      ?\<Gamma>\<turnstile> \<langle>the
(?\<Gamma> ?p),Normal ?s\<rangle> \<Rightarrow>\<notin>{Fault ?f}",
     template_implication
      ([template_equation
         (template_app (template_var 4, template_var 3),
          template_app (template_hole 8, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 6, template_var 4),
               template_app (template_hole 5, template_var 3)),
             template_app (template_hole 4, template_var 1)),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_hole 1)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 6, template_var 4),
               template_app
                (template_hole 0,
                 template_app (template_var 4, template_var 3))),
             template_app (template_hole 4, template_var 1)),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_hole 1))))),
    ("Semantic.execn_callStuck",
     "[| ?\<Gamma> ?p = Some ?bdy;
         ?\<Gamma>\<turnstile> \<langle>?bdy,Normal
        (?init ?s)\<rangle> =?n\<Rightarrow> Stuck |]
      ==> ?\<Gamma>\<turnstile> \<langle>call ?init ?p ?return
    ?c,Normal ?s\<rangle> =Suc ?n\<Rightarrow> Stuck",
     template_implication
      ([template_equation
         (template_app (template_var 7, template_var 6),
          template_app (template_hole 5, template_var 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 7),
                    template_var 5),
                  template_app
                   (template_hole 3,
                    template_app (template_var 4, template_var 3))),
                template_var 2),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_var 7),
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 1, template_var 4),
                         template_var 6),
                       template_var 1),
                     template_var 0)),
                 template_app (template_hole 3, template_var 3)),
               template_app (template_hole 0, template_var 2)),
             template_hole 2)
           ))),
    ("Semantic.exec_sequence_app",
     "[| ?\<Gamma>\<turnstile> \<langle>sequence Seq
   ?xs,Normal ?s\<rangle> \<Rightarrow> ?s';
         ?\<Gamma>\<turnstile> \<langle>sequence Seq
   ?ys,?s'\<rangle> \<Rightarrow> ?t |]
      ==> ?\<Gamma>\<turnstile> \<langle>sequence Seq
    (?xs @ ?ys),Normal ?s\<rangle> \<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 5),
                  template_app
                   (template_app (template_hole 3, template_hole 2),
                    template_var 4)),
                template_app (template_hole 1, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 5),
                  template_app
                   (template_app (template_hole 3, template_hole 2),
                    template_var 1)),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 5),
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 1))),
               template_app (template_hole 1, template_var 3)),
             template_var 0)
           ))),
    ("Semantic.exec_dynCall_Normal_elim",
     "[| ?\<Gamma>\<turnstile> \<langle>dynCall ?init ?p ?return
   ?c,Normal ?s\<rangle> \<Rightarrow> ?t;
         ?\<Gamma>\<turnstile> \<langle>call ?init (?p ?s) ?return
   ?c,Normal ?s\<rangle> \<Rightarrow> ?t ==>
         ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 7),
                  template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 2, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3)),
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 3, template_var 7),
                     template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 0, template_var 6),
                           template_app (template_var 5, template_var 2)),
                         template_var 4),
                       template_var 3)),
                   template_app (template_hole 1, template_var 2)),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Semantic.notStuck_CatchD2",
     "[| ?\<Gamma>\<turnstile> \<langle>Catch ?c1.0
   ?c2.0,Normal ?s\<rangle> \<Rightarrow>\<notin>{Stuck};
         ?\<Gamma>\<turnstile> \<langle>?c1.0,Normal
         ?s\<rangle> \<Rightarrow> Abrupt ?s' |]
      ==> ?\<Gamma>\<turnstile> \<langle>?c2.0,Normal
          ?s'\<rangle> \<Rightarrow>\<notin>{Stuck}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 4),
                  template_app
                   (template_app (template_hole 6, template_var 3),
                    template_var 2)),
                template_app (template_hole 5, template_var 1)),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_hole 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_app (template_hole 5, template_var 1)),
              template_app (template_hole 0, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 7, template_var 4),
                 template_var 2),
               template_app (template_hole 5, template_var 0)),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_hole 2))
           ))),
    ("Semantic.execn_to_execn_strip_guards_Fault",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> ?t;
         ?t = Fault ?f; ?f ~: ?F |]
      ==> ?\<Gamma>\<turnstile> \<langle>strip_guards ?F
    ?c,?s\<rangle> =?n\<Rightarrow> Fault ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_equation
         (template_var 2, template_app (template_hole 3, template_var 1)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 5, template_var 6),
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 5)),
                 template_var 4),
               template_var 3),
             template_app (template_hole 3, template_var 1))
           ))),
    ("Semantic.exec_noguards_no_Fault",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> ?t;
         noguards ?c; ALL p:dom ?\<Gamma>. noguards (the (?\<Gamma> p));
         ~ isFault ?s |]
      ==> ~ isFault ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 3)),
              t_empty)
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 0, template_var 1))
            )],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 0))
           ))),
    ("Semantic.exec_nothrows_no_Abrupt",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> ?t;
         nothrows ?c; ALL p:dom ?\<Gamma>. nothrows (the (?\<Gamma> p));
         ~ isAbr ?s |]
      ==> ~ isAbr ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 3)),
              t_empty)
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 0, template_var 1))
            )],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 0))
           ))),
    ("Semantic.exec_sequence_appD",
     "?\<Gamma>\<turnstile> \<langle>sequence Seq
(?xs @ ?ys),Normal ?s\<rangle> \<Rightarrow> ?t ==>
      EX s'.
         ?\<Gamma>\<turnstile> \<langle>sequence Seq
   ?xs,Normal ?s\<rangle> \<Rightarrow> s' &
         ?\<Gamma>\<turnstile> \<langle>sequence Seq
   ?ys,s'\<rangle> \<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 4),
                  template_app
                   (template_app (template_hole 5, template_hole 4),
                    template_app
                     (template_app (template_hole 3, template_var 3),
                      template_var 2))),
                template_app (template_hole 2, template_var 1)),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Semantic.exec_callAbrupt",
     "[| ?\<Gamma> ?p = Some ?bdy;
         ?\<Gamma>\<turnstile> \<langle>?bdy,Normal
        (?init ?s)\<rangle> \<Rightarrow> Abrupt ?t |]
      ==> ?\<Gamma>\<turnstile> \<langle>call ?init ?p ?return
    ?c,Normal ?s\<rangle> \<Rightarrow> Abrupt (?return ?s ?t)",
     template_implication
      ([template_equation
         (template_app (template_var 7, template_var 6),
          template_app (template_hole 4, template_var 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 7),
                  template_var 5),
                template_app
                 (template_hole 2,
                  template_app (template_var 4, template_var 3))),
              template_app (template_hole 1, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 7),
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 4),
                       template_var 6),
                     template_var 1),
                   template_var 0)),
               template_app (template_hole 2, template_var 3)),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_var 1, template_var 3),
                 template_var 2)))
           ))),
    ("Semantic.inter_guards_exec_Fault",
     "[| (?c1.0 \<inter>\<^sub>g ?c2.0) = Some ?c;
         ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> Fault
                                ?f |]
      ==> ?\<Gamma>\<turnstile> \<langle>?c1.0,?s\<rangle> \<Rightarrow> Fault
                                    ?f |
          ?\<Gamma>\<turnstile> \<langle>?c2.0,?s\<rangle> \<Rightarrow> Fault
                                    ?f",
     template_implication
      ([template_equation
         (template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 5),
              template_var 4)),
          template_app (template_hole 3, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 3),
                template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 5),
                   template_var 1),
                 template_app (template_hole 1, template_var 0))),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 4),
                 template_var 1),
               template_app (template_hole 1, template_var 0)))
           ))),
    ("Semantic.execn_noguards_no_Fault",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> ?t;
         noguards ?c; ALL p:dom ?\<Gamma>. noguards (the (?\<Gamma> p));
         ~ isFault ?s |]
      ==> ~ isFault ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 4)),
              t_empty)
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 0, template_var 2))
            )],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 0))
           ))),
    ("Semantic.execn_nothrows_no_Abrupt",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> ?t;
         nothrows ?c; ALL p:dom ?\<Gamma>. nothrows (the (?\<Gamma> p));
         ~ isAbr ?s |]
      ==> ~ isAbr ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 4)),
              t_empty)
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 0, template_var 2))
            )],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 0))
           ))),
    ("Semantic.execn_callFault",
     "[| ?\<Gamma> ?p = Some ?bdy;
         ?\<Gamma>\<turnstile> \<langle>?bdy,Normal
        (?init ?s)\<rangle> =?n\<Rightarrow> Fault ?f |]
      ==> ?\<Gamma>\<turnstile> \<langle>call ?init ?p ?return
    ?c,Normal ?s\<rangle> =Suc ?n\<Rightarrow> Fault ?f",
     template_implication
      ([template_equation
         (template_app (template_var 8, template_var 7),
          template_app (template_hole 5, template_var 6)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 8),
                    template_var 6),
                  template_app
                   (template_hole 3,
                    template_app (template_var 5, template_var 4))),
                template_var 3),
              template_app (template_hole 2, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_var 8),
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 1, template_var 5),
                         template_var 7),
                       template_var 1),
                     template_var 0)),
                 template_app (template_hole 3, template_var 4)),
               template_app (template_hole 0, template_var 3)),
             template_app (template_hole 2, template_var 2))
           ))),
    ("Semantic.exec_Normal_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>Seq ?c1.0
   ?c2.0,Normal ?s\<rangle> \<Rightarrow> ?t;
         !!s'. [| ?\<Gamma>\<turnstile> \<langle>?c1.0,Normal
                  ?s\<rangle> \<Rightarrow> s';
                  ?\<Gamma>\<turnstile> \<langle>?c2.0,s'\<rangle> \<Rightarrow> ?t |]
               ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 5),
                  template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3)),
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Semantic.execn_dynCall_Normal_elim",
     "[| ?\<Gamma>\<turnstile> \<langle>dynCall ?init ?p ?return
   ?c,Normal ?s\<rangle> =?n\<Rightarrow> ?t;
         ?\<Gamma>\<turnstile> \<langle>call ?init (?p ?s) ?return
   ?c,Normal ?s\<rangle> =?n\<Rightarrow> ?t ==>
         ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 8),
                    template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 2, template_var 7),
                          template_var 6),
                        template_var 5),
                      template_var 4)),
                  template_app (template_hole 1, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 3, template_var 8),
                       template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 0, template_var 7),
                             template_app (template_var 6, template_var 3)),
                           template_var 5),
                         template_var 4)),
                     template_app (template_hole 1, template_var 3)),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Semantic.exec_block",
     "[| ?\<Gamma>\<turnstile> \<langle>?bdy,Normal
        (?init ?s)\<rangle> \<Rightarrow> Normal ?t;
         ?\<Gamma>\<turnstile> \<langle>?c ?s
   ?t,Normal (?return ?s ?t)\<rangle> \<Rightarrow> ?u |]
      ==> ?\<Gamma>\<turnstile> \<langle>block ?init ?bdy ?return
    ?c,Normal ?s\<rangle> \<Rightarrow> ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 7),
                  template_var 6),
                template_app
                 (template_hole 1,
                  template_app (template_var 5, template_var 4))),
              template_app (template_hole 1, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 7),
                  template_app
                   (template_app (template_var 2, template_var 4),
                    template_var 3)),
                template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_var 1, template_var 4),
                    template_var 3))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 7),
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 6),
                     template_var 1),
                   template_var 2)),
               template_app (template_hole 1, template_var 4)),
             template_var 0)
           ))),
    ("Semantic.execn_sequence_app",
     "[| ?\<Gamma>\<turnstile> \<langle>sequence Seq
   ?xs,Normal ?s\<rangle> =?n\<Rightarrow> ?s';
         ?\<Gamma>\<turnstile> \<langle>sequence Seq
   ?ys,?s'\<rangle> =?n\<Rightarrow> ?t |]
      ==> ?\<Gamma>\<turnstile> \<langle>sequence Seq
    (?xs @ ?ys),Normal ?s\<rangle> =?n\<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 6),
                    template_app
                     (template_app (template_hole 3, template_hole 2),
                      template_var 5)),
                  template_app (template_hole 1, template_var 4)),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 6),
                    template_app
                     (template_app (template_hole 3, template_hole 2),
                      template_var 1)),
                  template_var 2),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_var 6),
                   template_app
                    (template_app (template_hole 3, template_hole 2),
                     template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 1))),
                 template_app (template_hole 1, template_var 4)),
               template_var 3),
             template_var 0)
           ))),
    ("Semantic.inter_guards_exec_noFault",
     "[| (?c1.0 \<inter>\<^sub>g ?c2.0) = Some ?c;
         ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> ?t;
         ~ isFault ?t |]
      ==> ?\<Gamma>\<turnstile> \<langle>?c1.0,?s\<rangle> \<Rightarrow> ?t &
          ?\<Gamma>\<turnstile> \<langle>?c2.0,?s\<rangle> \<Rightarrow> ?t",
     template_implication
      ([template_equation
         (template_app
           (template_hole 6,
            template_app
             (template_app (template_hole 5, template_var 5),
              template_var 4)),
          template_app (template_hole 4, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 3),
                template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 5),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 4),
                 template_var 1),
               template_var 0))
           ))),
    ("Semantic.execn_sequence_appD",
     "?\<Gamma>\<turnstile> \<langle>sequence Seq
(?xs @ ?ys),Normal ?s\<rangle> =?n\<Rightarrow> ?t ==>
      EX s'.
         ?\<Gamma>\<turnstile> \<langle>sequence Seq
   ?xs,Normal ?s\<rangle> =?n\<Rightarrow> s' &
         ?\<Gamma>\<turnstile> \<langle>sequence Seq
   ?ys,s'\<rangle> =?n\<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 5),
                    template_app
                     (template_app (template_hole 5, template_hole 4),
                      template_app
                       (template_app (template_hole 3, template_var 4),
                        template_var 3))),
                  template_app (template_hole 2, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Semantic.exec_to_exec_subseteq_guards",
     "[| ?c \<subseteq>\<^sub>g ?c';
         ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> ?t |]
      ==> EX t'.
             ?\<Gamma>\<turnstile> \<langle>?c',?s\<rangle> \<Rightarrow> t' &
             (isFault ?t --> isFault t') & (~ isFault t' --> t' = ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 4),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Semantic.execn_callAbrupt",
     "[| ?\<Gamma> ?p = Some ?bdy;
         ?\<Gamma>\<turnstile> \<langle>?bdy,Normal
        (?init ?s)\<rangle> =?n\<Rightarrow> Abrupt ?t |]
      ==> ?\<Gamma>\<turnstile> \<langle>call ?init ?p ?return
    ?c,Normal ?s\<rangle> =Suc ?n\<Rightarrow> Abrupt (?return ?s ?t)",
     template_implication
      ([template_equation
         (template_app (template_var 8, template_var 7),
          template_app (template_hole 5, template_var 6)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 8),
                    template_var 6),
                  template_app
                   (template_hole 3,
                    template_app (template_var 5, template_var 4))),
                template_var 3),
              template_app (template_hole 2, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_var 8),
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 1, template_var 5),
                         template_var 7),
                       template_var 1),
                     template_var 0)),
                 template_app (template_hole 3, template_var 4)),
               template_app (template_hole 0, template_var 3)),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_var 1, template_var 4),
                 template_var 2)))
           ))),
    ("Semantic.inter_guards_execn_Fault",
     "[| (?c1.0 \<inter>\<^sub>g ?c2.0) = Some ?c;
         ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> Fault
                                   ?f |]
      ==> ?\<Gamma>\<turnstile> \<langle>?c1.0,?s\<rangle> =?n\<Rightarrow> Fault
 ?f |
          ?\<Gamma>\<turnstile> \<langle>?c2.0,?s\<rangle> =?n\<Rightarrow> Fault
 ?f",
     template_implication
      ([template_equation
         (template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 6),
              template_var 5)),
          template_app (template_hole 3, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 4),
                  template_var 2),
                template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 2, template_var 3),
                       template_var 6),
                     template_var 2),
                   template_var 1),
                 template_app (template_hole 1, template_var 0))),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 5),
                   template_var 2),
                 template_var 1),
               template_app (template_hole 1, template_var 0)))
           ))),
    ("Semantic.execn_Normal_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>Seq ?c1.0
   ?c2.0,Normal ?s\<rangle> =?n\<Rightarrow> ?t;
         !!s'. [| ?\<Gamma>\<turnstile> \<langle>?c1.0,Normal
                  ?s\<rangle> =?n\<Rightarrow> s';
                  ?\<Gamma>\<turnstile> \<langle>?c2.0,s'\<rangle> =?n\<Rightarrow> ?t |]
               ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 6),
                    template_app
                     (template_app (template_hole 2, template_var 5),
                      template_var 4)),
                  template_app (template_hole 1, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Semantic.noFaultStuck_exec_startD",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow>\<notin>{Fault
  True,
 Fault False, Stuck};
         ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> ?t |]
      ==> ?s ~: {Fault True, Fault False, Stuck}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_var 3),
                  template_var 2),
                template_var 1),
              template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_hole 6)),
                template_app
                 (template_app
                   (template_hole 8,
                    template_app (template_hole 7, template_hole 5)),
                  template_app
                   (template_app (template_hole 8, template_hole 4),
                    template_hole 3))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app (template_hole 7, template_hole 6)),
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app (template_hole 7, template_hole 5)),
                     template_app
                      (template_app (template_hole 8, template_hole 4),
                       template_hole 3))))
               )
           ))),
    ("Semantic.noFaultStuck_execD",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow>\<notin>{Fault
  True,
 Fault False, Stuck};
         ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> ?t |]
      ==> ?t ~: {Fault True, Fault False, Stuck}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_var 3),
                  template_var 2),
                template_var 1),
              template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_hole 6)),
                template_app
                 (template_app
                   (template_hole 8,
                    template_app (template_hole 7, template_hole 5)),
                  template_app
                   (template_app (template_hole 8, template_hole 4),
                    template_hole 3))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app (template_hole 7, template_hole 6)),
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app (template_hole 7, template_hole 5)),
                     template_app
                      (template_app (template_hole 8, template_hole 4),
                       template_hole 3))))
               )
           ))),
    ("Semantic.notStuck_WhileTrueD2",
     "[| ?\<Gamma>\<turnstile> \<langle>While ?b
   ?c,Normal ?s\<rangle> \<Rightarrow>\<notin>{Stuck};
         ?\<Gamma>\<turnstile> \<langle>?c,Normal
      ?s\<rangle> \<Rightarrow> ?s';
         ?s : ?b |]
      ==> ?\<Gamma>\<turnstile> \<langle>While ?b
    ?c,?s'\<rangle> \<Rightarrow>\<notin>{Stuck}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 4),
                  template_app
                   (template_app (template_hole 6, template_var 3),
                    template_var 2)),
                template_app (template_hole 5, template_var 1)),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_hole 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 2),
                template_app (template_hole 5, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 7, template_var 4),
                 template_app
                  (template_app (template_hole 6, template_var 3),
                   template_var 2)),
               template_var 0),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_hole 2))
           ))),
    ("Semantic.execn_to_execn_subseteq_guards",
     "[| ?c \<subseteq>\<^sub>g ?c';
         ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> ?t |]
      ==> EX t'.
             ?\<Gamma>\<turnstile> \<langle>?c',?s\<rangle> =?n\<Rightarrow> t' &
             (isFault ?t --> isFault t') & (~ isFault t' --> t' = ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 3),
                    template_var 5),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Semantic.execn_block",
     "[| ?\<Gamma>\<turnstile> \<langle>?bdy,Normal
        (?init ?s)\<rangle> =?n\<Rightarrow> Normal ?t;
         ?\<Gamma>\<turnstile> \<langle>?c ?s
   ?t,Normal (?return ?s ?t)\<rangle> =?n\<Rightarrow> ?u |]
      ==> ?\<Gamma>\<turnstile> \<langle>block ?init ?bdy ?return
    ?c,Normal ?s\<rangle> =?n\<Rightarrow> ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 8),
                    template_var 7),
                  template_app
                   (template_hole 1,
                    template_app (template_var 6, template_var 5))),
                template_var 4),
              template_app (template_hole 1, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 8),
                    template_app
                     (template_app (template_var 2, template_var 5),
                      template_var 3)),
                  template_app
                   (template_hole 1,
                    template_app
                     (template_app (template_var 1, template_var 5),
                      template_var 3))),
                template_var 4),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 8),
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 6),
                         template_var 7),
                       template_var 1),
                     template_var 2)),
                 template_app (template_hole 1, template_var 5)),
               template_var 4),
             template_var 0)
           ))),
    ("Semantic.inter_guards_execn_noFault",
     "[| (?c1.0 \<inter>\<^sub>g ?c2.0) = Some ?c;
         ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> ?t;
         ~ isFault ?t |]
      ==> ?\<Gamma>\<turnstile> \<langle>?c1.0,?s\<rangle> =?n\<Rightarrow> ?t &
          ?\<Gamma>\<turnstile> \<langle>?c2.0,?s\<rangle> =?n\<Rightarrow> ?t",
     template_implication
      ([template_equation
         (template_app
           (template_hole 6,
            template_app
             (template_app (template_hole 5, template_var 6),
              template_var 5)),
          template_app (template_hole 4, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 4),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 3, template_var 3),
                       template_var 6),
                     template_var 2),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 3, template_var 3),
                     template_var 5),
                   template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Semantic.noFaultStuck_Call_body'",
     "?p : dom ?\<Gamma> ==>
      ?\<Gamma>\<turnstile> \<langle>Call
?p,Normal ?s\<rangle> \<Rightarrow>\<notin>{Stuck} Un Fault ` (- ?F) =
      ?\<Gamma>\<turnstile> \<langle>the
(?\<Gamma>
  ?p),Normal ?s\<rangle> \<Rightarrow>\<notin>{Stuck} Un Fault ` (- ?F)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 3),
              template_app (template_hole 12, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 10, template_var 2),
               template_app (template_hole 9, template_var 3)),
             template_app (template_hole 8, template_var 1)),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_hole 4)),
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app (template_hole 1, template_var 0)))),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 10, template_var 2),
               template_app
                (template_hole 0,
                 template_app (template_var 2, template_var 3))),
             template_app (template_hole 8, template_var 1)),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_hole 4)),
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app (template_hole 1, template_var 0))))))),
    ("Semantic.inter_guards_execn_Normal_Fault",
     "[| (?c1.0 \<inter>\<^sub>g ?c2.0) = Some ?c;
         ?\<Gamma>\<turnstile> \<langle>?c,Normal
      ?s\<rangle> =?n\<Rightarrow> Fault ?f |]
      ==> ?\<Gamma>\<turnstile> \<langle>?c1.0,Normal
          ?s\<rangle> =?n\<Rightarrow> Fault ?f |
          ?\<Gamma>\<turnstile> \<langle>?c2.0,Normal
          ?s\<rangle> =?n\<Rightarrow> Fault ?f",
     template_implication
      ([template_equation
         (template_app
           (template_hole 6,
            template_app
             (template_app (template_hole 5, template_var 6),
              template_var 5)),
          template_app (template_hole 4, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 4),
                  template_app (template_hole 2, template_var 2)),
                template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 3, template_var 3),
                       template_var 6),
                     template_app (template_hole 2, template_var 2)),
                   template_var 1),
                 template_app (template_hole 1, template_var 0))),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 3, template_var 3),
                     template_var 5),
                   template_app (template_hole 2, template_var 2)),
                 template_var 1),
               template_app (template_hole 1, template_var 0)))
           ))),
    ("Semantic.noFaultStuckn_exec_startD",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow>\<notin>{Fault
     True,
    Fault False, Stuck};
         ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> ?t |]
      ==> ?s ~: {Fault True, Fault False, Stuck}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 9, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_hole 6)),
                template_app
                 (template_app
                   (template_hole 8,
                    template_app (template_hole 7, template_hole 5)),
                  template_app
                   (template_app (template_hole 8, template_hole 4),
                    template_hole 3))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app (template_hole 7, template_hole 6)),
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app (template_hole 7, template_hole 5)),
                     template_app
                      (template_app (template_hole 8, template_hole 4),
                       template_hole 3))))
               )
           ))),
    ("Semantic.noFaultStuckn_execD",
     "[| ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow>\<notin>{Fault
     True,
    Fault False, Stuck};
         ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> ?t |]
      ==> ?t ~: {Fault True, Fault False, Stuck}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 9, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_hole 6)),
                template_app
                 (template_app
                   (template_hole 8,
                    template_app (template_hole 7, template_hole 5)),
                  template_app
                   (template_app (template_hole 8, template_hole 4),
                    template_hole 3))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app (template_hole 7, template_hole 6)),
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app (template_hole 7, template_hole 5)),
                     template_app
                      (template_app (template_hole 8, template_hole 4),
                       template_hole 3))))
               )
           ))),
    ("Semantic.notStuck_SeqD",
     "?\<Gamma>\<turnstile> \<langle>Seq ?c1.0
?c2.0,Normal ?s\<rangle> \<Rightarrow>\<notin>{Stuck} ==>
      ?\<Gamma>\<turnstile> \<langle>?c1.0,Normal
      ?s\<rangle> \<Rightarrow>\<notin>{Stuck} &
      (ALL s'.
          ?\<Gamma>\<turnstile> \<langle>?c1.0,Normal
          ?s\<rangle> \<Rightarrow> s' -->
          ?\<Gamma>\<turnstile> \<langle>?c2.0,s'\<rangle> \<Rightarrow>\<notin>{Stuck})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_var 3),
                  template_app
                   (template_app (template_hole 8, template_var 2),
                    template_var 1)),
                template_app (template_hole 7, template_var 0)),
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_hole 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 9, template_var 3),
                     template_var 2),
                   template_app (template_hole 7, template_var 0)),
                 template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_hole 4))),
             template_app (template_hole 2, t_empty))
           ))),
    ("Semantic.exec_sequence_appE",
     "[| ?\<Gamma>\<turnstile> \<langle>sequence Seq
   (?xs @ ?ys),Normal ?s\<rangle> \<Rightarrow> ?t;
         !!s'. [| ?\<Gamma>\<turnstile> \<langle>sequence Seq
            ?xs,Normal ?s\<rangle> \<Rightarrow> s';
                  ?\<Gamma>\<turnstile> \<langle>sequence Seq
            ?ys,s'\<rangle> \<Rightarrow> ?t |]
               ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 5),
                  template_app
                   (template_app (template_hole 4, template_hole 3),
                    template_app
                     (template_app (template_hole 2, template_var 4),
                      template_var 3))),
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Semantic.inter_guards_execn_Normal_noFault",
     "[| (?c1.0 \<inter>\<^sub>g ?c2.0) = Some ?c;
         ?\<Gamma>\<turnstile> \<langle>?c,Normal
      ?s\<rangle> =?n\<Rightarrow> ?t;
         ~ isFault ?t |]
      ==> ?\<Gamma>\<turnstile> \<langle>?c1.0,Normal
          ?s\<rangle> =?n\<Rightarrow> ?t &
          ?\<Gamma>\<turnstile> \<langle>?c2.0,Normal
          ?s\<rangle> =?n\<Rightarrow> ?t",
     template_implication
      ([template_equation
         (template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_var 6),
              template_var 5)),
          template_app (template_hole 5, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 4),
                  template_app (template_hole 3, template_var 2)),
                template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 4, template_var 3),
                       template_var 6),
                     template_app (template_hole 3, template_var 2)),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 4, template_var 3),
                     template_var 5),
                   template_app (template_hole 3, template_var 2)),
                 template_var 1),
               template_var 0))
           ))),
    ("Semantic.exec_call",
     "[| ?\<Gamma> ?p = Some ?bdy;
         ?\<Gamma>\<turnstile> \<langle>?bdy,Normal
        (?init ?s)\<rangle> \<Rightarrow> Normal ?t;
         ?\<Gamma>\<turnstile> \<langle>?c ?s
   ?t,Normal (?return ?s ?t)\<rangle> \<Rightarrow> ?u |]
      ==> ?\<Gamma>\<turnstile> \<langle>call ?init ?p ?return
    ?c,Normal ?s\<rangle> \<Rightarrow> ?u",
     template_implication
      ([template_equation
         (template_app (template_var 8, template_var 7),
          template_app (template_hole 3, template_var 6)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 8),
                  template_var 6),
                template_app
                 (template_hole 1,
                  template_app (template_var 5, template_var 4))),
              template_app (template_hole 1, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 8),
                  template_app
                   (template_app (template_var 2, template_var 4),
                    template_var 3)),
                template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_var 1, template_var 4),
                    template_var 3))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 8),
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 7),
                     template_var 1),
                   template_var 2)),
               template_app (template_hole 1, template_var 4)),
             template_var 0)
           ))),
    ("Semantic.execn_sequence_appE",
     "[| ?\<Gamma>\<turnstile> \<langle>sequence Seq
   (?xs @ ?ys),Normal ?s\<rangle> =?n\<Rightarrow> ?t;
         !!s'. [| ?\<Gamma>\<turnstile> \<langle>sequence Seq
            ?xs,Normal ?s\<rangle> =?n\<Rightarrow> s';
                  ?\<Gamma>\<turnstile> \<langle>sequence Seq
            ?ys,s'\<rangle> =?n\<Rightarrow> ?t |]
               ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 6),
                    template_app
                     (template_app (template_hole 4, template_hole 3),
                      template_app
                       (template_app (template_hole 2, template_var 5),
                        template_var 4))),
                  template_app (template_hole 1, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Semantic.exec_strip_guards_to_exec",
     "?\<Gamma>\<turnstile> \<langle>strip_guards ?F
?c,?s\<rangle> \<Rightarrow> ?t ==>
      EX t'.
         ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> t' &
         (isFault ?t --> isFault t') &
         (t' : Fault ` (- ?F) --> t' = ?t) & (~ isFault t' --> t' = ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 11, template_var 4),
                  template_app
                   (template_app (template_hole 10, template_var 3),
                    template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Semantic.exec_strip_to_exec",
     "strip ?F
       ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> ?t ==>
      EX t'.
         ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> t' &
         (isFault ?t --> isFault t') &
         (t' : Fault ` (- ?F) --> t' = ?t) & (~ isFault t' --> t' = ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app (template_hole 10, template_var 4),
                      template_var 3)),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Semantic.execn_strip_to_execn",
     "strip ?F
       ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> ?t ==>
      EX t'.
         ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> t' &
         (isFault ?t --> isFault t') &
         (t' : Fault ` (- ?F) --> t' = ?t) & (~ isFault t' --> t' = ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 11,
                      template_app
                       (template_app (template_hole 10, template_var 5),
                        template_var 4)),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Semantic.execn_strip_guards_to_execn",
     "?\<Gamma>\<turnstile> \<langle>strip_guards ?F
?c,?s\<rangle> =?n\<Rightarrow> ?t ==>
      EX t'.
         ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> t' &
         (isFault ?t --> isFault t') &
         (t' : Fault ` (- ?F) --> t' = ?t) & (~ isFault t' --> t' = ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 11, template_var 5),
                    template_app
                     (template_app (template_hole 10, template_var 4),
                      template_var 3)),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Semantic.exec_Normal_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>Guard ?f ?g
   ?c,Normal ?s\<rangle> \<Rightarrow> ?t;
         [| ?s : ?g;
            ?\<Gamma>\<turnstile> \<langle>?c,Normal
         ?s\<rangle> \<Rightarrow> ?t |]
         ==> ?P;
         [| ?t = Fault ?f; ?s ~: ?g |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 6),
                  template_app
                   (template_app
                     (template_app (template_hole 5, template_var 5),
                      template_var 4),
                    template_var 3)),
                template_app (template_hole 4, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 4)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 6, template_var 6),
                       template_var 3),
                     template_app (template_hole 4, template_var 2)),
                   template_var 1)
                 )],
            template_predicate (template_var 0))),
        template_implication
         ([template_equation
            (template_var 1,
             template_app (template_hole 1, template_var 5))],
          template_implication
           ([template_negation
              (
                 template_predicate
                  (
                     template_app
                      (template_app (template_hole 3, template_var 2),
                       template_var 4)
                     )
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Semantic.execn_call",
     "[| ?\<Gamma> ?p = Some ?bdy;
         ?\<Gamma>\<turnstile> \<langle>?bdy,Normal
        (?init ?s)\<rangle> =?n\<Rightarrow> Normal ?t;
         ?\<Gamma>\<turnstile> \<langle>?c ?s
   ?t,Normal (?return ?s ?t)\<rangle> =Suc ?n\<Rightarrow> ?u |]
      ==> ?\<Gamma>\<turnstile> \<langle>call ?init ?p ?return
    ?c,Normal ?s\<rangle> =Suc ?n\<Rightarrow> ?u",
     template_implication
      ([template_equation
         (template_app (template_var 9, template_var 8),
          template_app (template_hole 4, template_var 7)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 9),
                    template_var 7),
                  template_app
                   (template_hole 2,
                    template_app (template_var 6, template_var 5))),
                template_var 4),
              template_app (template_hole 2, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 9),
                    template_app
                     (template_app (template_var 2, template_var 5),
                      template_var 3)),
                  template_app
                   (template_hole 2,
                    template_app
                     (template_app (template_var 1, template_var 5),
                      template_var 3))),
                template_app (template_hole 1, template_var 4)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 9),
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 6),
                         template_var 8),
                       template_var 1),
                     template_var 2)),
                 template_app (template_hole 2, template_var 5)),
               template_app (template_hole 1, template_var 4)),
             template_var 0)
           ))),
    ("Semantic.exec_Normal_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>Call
   ?p,Normal ?s\<rangle> \<Rightarrow> ?t;
         !!bdy.
            [| ?\<Gamma> ?p = Some bdy;
               ?\<Gamma>\<turnstile> \<langle>bdy,Normal
             ?s\<rangle> \<Rightarrow> ?t |]
            ==> ?P;
         [| ?t = Stuck; ?\<Gamma> ?p = None |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 4),
                  template_app (template_hole 7, template_var 3)),
                template_app (template_hole 6, template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_implication
         ([template_equation (template_var 1, template_hole 1)],
          template_implication
           ([template_equation
              (template_app (template_var 4, template_var 3),
               template_hole 0)],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Semantic.exec_mark_guards_to_exec",
     "?\<Gamma>\<turnstile> \<langle>mark_guards ?f
?c,?s\<rangle> \<Rightarrow> ?t ==>
      EX t'.
         ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> t' &
         (isFault ?t --> isFault t') &
         (t' = Fault ?f --> t' = ?t) &
         (isFault t' --> isFault ?t) & (~ isFault t' --> t' = ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 4),
                  template_app
                   (template_app (template_hole 7, template_var 3),
                    template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Semantic.Seq_NoFaultStuckD2",
     "?\<Gamma>\<turnstile> \<langle>Seq ?c1.0
?c2.0,?s\<rangle> \<Rightarrow>\<notin>{Stuck} Un Fault ` ?F ==>
      ALL t.
         ?\<Gamma>\<turnstile> \<langle>?c1.0,?s\<rangle> \<Rightarrow> t -->
         t ~: {Stuck} Un Fault ` ?F -->
         ?\<Gamma>\<turnstile> \<langle>?c2.0,t\<rangle> \<Rightarrow>\<notin>{Stuck} Un
  Fault ` ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 12, template_var 4),
                  template_app
                   (template_app (template_hole 11, template_var 3),
                    template_var 2)),
                template_var 1),
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_hole 8),
                    template_hole 7)),
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 0)))
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Semantic.exec_Normal_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>Cond ?b ?c1.0
   ?c2.0,Normal ?s\<rangle> \<Rightarrow> ?t;
         [| ?s : ?b;
            ?\<Gamma>\<turnstile> \<langle>?c1.0,Normal
            ?s\<rangle> \<Rightarrow> ?t |]
         ==> ?P;
         [| ?s ~: ?b;
            ?\<Gamma>\<turnstile> \<langle>?c2.0,Normal
            ?s\<rangle> \<Rightarrow> ?t |]
         ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 6),
                  template_app
                   (template_app
                     (template_app (template_hole 3, template_var 5),
                      template_var 4),
                    template_var 3)),
                template_app (template_hole 2, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 5)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 4, template_var 6),
                       template_var 4),
                     template_app (template_hole 2, template_var 2)),
                   template_var 1)
                 )],
            template_predicate (template_var 0))),
        template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 5)
                   )
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 4, template_var 6),
                       template_var 3),
                     template_app (template_hole 2, template_var 2)),
                   template_var 1)
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Semantic.execn_Normal_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>Guard ?f ?g
   ?c,Normal ?s\<rangle> =?n\<Rightarrow> ?t;
         [| ?s : ?g;
            ?\<Gamma>\<turnstile> \<langle>?c,Normal
         ?s\<rangle> =?n\<Rightarrow> ?t |]
         ==> ?P;
         [| ?t = Fault ?f; ?s ~: ?g |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 7),
                    template_app
                     (template_app
                       (template_app (template_hole 5, template_var 6),
                        template_var 5),
                      template_var 4)),
                  template_app (template_hole 4, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 5)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 6, template_var 7),
                         template_var 4),
                       template_app (template_hole 4, template_var 3)),
                     template_var 2),
                   template_var 1)
                 )],
            template_predicate (template_var 0))),
        template_implication
         ([template_equation
            (template_var 1,
             template_app (template_hole 1, template_var 6))],
          template_implication
           ([template_negation
              (
                 template_predicate
                  (
                     template_app
                      (template_app (template_hole 3, template_var 3),
                       template_var 5)
                     )
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Semantic.exec_Normal_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>Spec
   ?r,Normal ?s\<rangle> \<Rightarrow> ?t;
         !!t. [| ?t = Normal t; (?s, t) : ?r |] ==> ?P;
         [| ?t = Stuck; ALL t. (?s, t) ~: ?r |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_var 4),
                  template_app (template_hole 8, template_var 3)),
                template_app (template_hole 7, template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_implication
         ([template_equation (template_var 1, template_hole 2)],
          template_implication
           ([template_predicate (template_app (template_hole 1, t_empty))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Semantic.execn_mark_guards_to_execn",
     "?\<Gamma>\<turnstile> \<langle>mark_guards ?f
?c,?s\<rangle> =?n\<Rightarrow> ?t ==>
      EX t'.
         ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> t' &
         (isFault ?t --> isFault t') &
         (t' = Fault ?f --> t' = ?t) &
         (isFault t' --> isFault ?t) & (~ isFault t' --> t' = ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 8, template_var 5),
                    template_app
                     (template_app (template_hole 7, template_var 4),
                      template_var 3)),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Semantic.execn_Normal_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>Spec
   ?r,Normal ?s\<rangle> =?n\<Rightarrow> ?t;
         !!t. [| ?t = Normal t; (?s, t) : ?r |] ==> ?P;
         [| ?t = Stuck; ALL t. (?s, t) ~: ?r |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 9, template_var 5),
                    template_app (template_hole 8, template_var 4)),
                  template_app (template_hole 7, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_implication
         ([template_equation (template_var 1, template_hole 2)],
          template_implication
           ([template_predicate (template_app (template_hole 1, t_empty))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Semantic.execn_Normal_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>Cond ?b ?c1.0
   ?c2.0,Normal ?s\<rangle> =?n\<Rightarrow> ?t;
         [| ?s : ?b;
            ?\<Gamma>\<turnstile> \<langle>?c1.0,Normal
            ?s\<rangle> =?n\<Rightarrow> ?t |]
         ==> ?P;
         [| ?s ~: ?b;
            ?\<Gamma>\<turnstile> \<langle>?c2.0,Normal
            ?s\<rangle> =?n\<Rightarrow> ?t |]
         ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 7),
                    template_app
                     (template_app
                       (template_app (template_hole 3, template_var 6),
                        template_var 5),
                      template_var 4)),
                  template_app (template_hole 2, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 6)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 4, template_var 7),
                         template_var 5),
                       template_app (template_hole 2, template_var 3)),
                     template_var 2),
                   template_var 1)
                 )],
            template_predicate (template_var 0))),
        template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 6)
                   )
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 4, template_var 7),
                         template_var 4),
                       template_app (template_hole 2, template_var 3)),
                     template_var 2),
                   template_var 1)
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Semantic.exec_to_exec_restrict",
     "?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> ?t ==>
      EX t'.
         ?\<Gamma>|\<^bsub>?P\<^esub>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> t' &
         (?t = Stuck --> t' = Stuck) &
         (ALL f. ?t = Fault f --> t' : {Fault f, Stuck}) &
         (t' ~= Stuck --> t' = ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 12, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 11, t_empty)))),
    ("Semantic.exec_Normal_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>Catch ?c1.0
   ?c2.0,Normal ?s\<rangle> \<Rightarrow> ?t;
         !!s'. [| ?\<Gamma>\<turnstile> \<langle>?c1.0,Normal
                  ?s\<rangle> \<Rightarrow> Abrupt s';
                  ?\<Gamma>\<turnstile> \<langle>?c2.0,Normal
                  s'\<rangle> \<Rightarrow> ?t |]
               ==> ?P;
         [| ?\<Gamma>\<turnstile> \<langle>?c1.0,Normal
            ?s\<rangle> \<Rightarrow> ?t;
            ~ isAbr ?t |]
         ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 5),
                  template_app
                   (template_app (template_hole 5, template_var 4),
                    template_var 3)),
                template_app (template_hole 4, template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 6, template_var 5),
                     template_var 4),
                   template_app (template_hole 4, template_var 2)),
                 template_var 1)
               )],
          template_implication
           ([template_negation
              (
                 template_predicate
                  (template_app (template_hole 0, template_var 1))
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Semantic.execn_to_execn_restrict",
     "?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> ?t ==>
      EX t'.
         ?\<Gamma>|\<^bsub>?P\<^esub>\<turnstile> \<langle>?c,?s\<rangle> =?n\<Rightarrow> t' &
         (?t = Stuck --> t' = Stuck) &
         (ALL f. ?t = Fault f --> t' : {Fault f, Stuck}) &
         (t' ~= Stuck --> t' = ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 12, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 11, t_empty)))),
    ("Semantic.exec_Normal_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>While ?b
   ?c,Normal ?s\<rangle> \<Rightarrow> ?t;
         !!s'. [| ?s : ?b;
                  ?\<Gamma>\<turnstile> \<langle>?c,Normal
               ?s\<rangle> \<Rightarrow> s';
                  ?\<Gamma>\<turnstile> \<langle>While ?b
            ?c,s'\<rangle> \<Rightarrow> ?t |]
               ==> ?P;
         [| ?t = Normal ?s; ?s ~: ?b |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 5),
                  template_app
                   (template_app (template_hole 5, template_var 4),
                    template_var 3)),
                template_app (template_hole 4, template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_implication
         ([template_equation
            (template_var 1,
             template_app (template_hole 4, template_var 2))],
          template_implication
           ([template_negation
              (
                 template_predicate
                  (
                     template_app
                      (template_app (template_hole 2, template_var 2),
                       template_var 4)
                     )
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Semantic.execn_Normal_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>Catch ?c1.0
   ?c2.0,Normal ?s\<rangle> =?n\<Rightarrow> ?t;
         !!s'. [| ?\<Gamma>\<turnstile> \<langle>?c1.0,Normal
                  ?s\<rangle> =?n\<Rightarrow> Abrupt s';
                  ?\<Gamma>\<turnstile> \<langle>?c2.0,Normal
                  s'\<rangle> =?n\<Rightarrow> ?t |]
               ==> ?P;
         [| ?\<Gamma>\<turnstile> \<langle>?c1.0,Normal
            ?s\<rangle> =?n\<Rightarrow> ?t;
            ~ isAbr ?t |]
         ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 6),
                    template_app
                     (template_app (template_hole 5, template_var 5),
                      template_var 4)),
                  template_app (template_hole 4, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 6, template_var 6),
                       template_var 5),
                     template_app (template_hole 4, template_var 3)),
                   template_var 2),
                 template_var 1)
               )],
          template_implication
           ([template_negation
              (
                 template_predicate
                  (template_app (template_hole 0, template_var 1))
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Semantic.execn_Normal_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>While ?b
   ?c,Normal ?s\<rangle> =?n\<Rightarrow> ?t;
         !!s'. [| ?s : ?b;
                  ?\<Gamma>\<turnstile> \<langle>?c,Normal
               ?s\<rangle> =?n\<Rightarrow> s';
                  ?\<Gamma>\<turnstile> \<langle>While ?b
            ?c,s'\<rangle> =?n\<Rightarrow> ?t |]
               ==> ?P;
         [| ?t = Normal ?s; ?s ~: ?b |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 6),
                    template_app
                     (template_app (template_hole 5, template_var 5),
                      template_var 4)),
                  template_app (template_hole 4, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_implication
         ([template_equation
            (template_var 1,
             template_app (template_hole 4, template_var 3))],
          template_implication
           ([template_negation
              (
                 template_predicate
                  (
                     template_app
                      (template_app (template_hole 2, template_var 3),
                       template_var 5)
                     )
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Semantic.execn_Normal_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>Call
   ?p,Normal ?s\<rangle> =?n\<Rightarrow> ?t;
         !!bdy n.
            [| ?n = Suc n; ?\<Gamma> ?p = Some bdy;
               ?\<Gamma>\<turnstile> \<langle>bdy,Normal
             ?s\<rangle> =n\<Rightarrow> ?t |]
            ==> ?P;
         !!n. [| ?n = Suc n; ?t = Stuck; ?\<Gamma> ?p = None |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 11, template_var 5),
                    template_app (template_hole 10, template_var 4)),
                  template_app (template_hole 9, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("Semantic.exec_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>Skip,?s\<rangle> \<Rightarrow> ?t;
         !!s. [| ?s = Normal s; ?t = Normal s |] ==> ?P;
         !!f. [| ?s = Fault f; ?t = Fault f |] ==> ?P;
         [| ?s = Stuck; ?t = Stuck |] ==> ?P;
         !!s. [| ?s = Abrupt s; ?t = Abrupt s |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 3),
                  template_hole 7),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_implication
         ([template_equation (template_var 2, template_hole 1)],
          template_implication
           ([template_equation (template_var 1, template_hole 1)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("Semantic.exec_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>Throw,?s\<rangle> \<Rightarrow> ?t;
         !!f. [| ?s = Fault f; ?t = Fault f |] ==> ?P;
         [| ?s = Stuck; ?t = Stuck |] ==> ?P;
         !!s. [| ?s = Normal s; ?t = Abrupt s |] ==> ?P;
         !!s. [| ?s = Abrupt s; ?t = Abrupt s |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 3),
                  template_hole 7),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_implication
         ([template_equation (template_var 2, template_hole 3)],
          template_implication
           ([template_equation (template_var 1, template_hole 3)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Semantic.execn_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>Skip,?s\<rangle> =?n\<Rightarrow> ?t;
         !!s. [| ?s = Normal s; ?t = Normal s |] ==> ?P;
         !!f. [| ?s = Fault f; ?t = Fault f |] ==> ?P;
         [| ?s = Stuck; ?t = Stuck |] ==> ?P;
         !!s. [| ?s = Abrupt s; ?t = Abrupt s |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 8, template_var 4),
                    template_hole 7),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_implication
         ([template_equation (template_var 3, template_hole 1)],
          template_implication
           ([template_equation (template_var 1, template_hole 1)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("Semantic.execn_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>Throw,?s\<rangle> =?n\<Rightarrow> ?t;
         !!f. [| ?s = Fault f; ?t = Fault f |] ==> ?P;
         [| ?s = Stuck; ?t = Stuck |] ==> ?P;
         !!s. [| ?s = Normal s; ?t = Abrupt s |] ==> ?P;
         !!s. [| ?s = Abrupt s; ?t = Abrupt s |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 8, template_var 4),
                    template_hole 7),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_implication
         ([template_equation (template_var 3, template_hole 3)],
          template_implication
           ([template_equation (template_var 1, template_hole 3)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Semantic.exec_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>Basic
   ?f,?s\<rangle> \<Rightarrow> ?t;
         !!f. [| ?s = Fault f; ?t = Fault f |] ==> ?P;
         !!s. [| ?s = Normal s; ?t = Normal (?f s) |] ==> ?P;
         [| ?s = Stuck; ?t = Stuck |] ==> ?P;
         !!s. [| ?s = Abrupt s; ?t = Abrupt s |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 4),
                  template_app (template_hole 7, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_implication
         ([template_equation (template_var 2, template_hole 1)],
          template_implication
           ([template_equation (template_var 1, template_hole 1)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Semantic.execn_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>Basic
   ?f,?s\<rangle> =?n\<Rightarrow> ?t;
         !!f. [| ?s = Fault f; ?t = Fault f |] ==> ?P;
         !!s. [| ?s = Normal s; ?t = Normal (?f s) |] ==> ?P;
         [| ?s = Stuck; ?t = Stuck |] ==> ?P;
         !!s. [| ?s = Abrupt s; ?t = Abrupt s |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 8, template_var 5),
                    template_app (template_hole 7, template_var 4)),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_implication
         ([template_equation (template_var 3, template_hole 1)],
          template_implication
           ([template_equation (template_var 1, template_hole 1)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Semantic.exec_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>DynCom
   ?c,?s\<rangle> \<Rightarrow> ?t;
         !!f. [| ?s = Fault f; ?t = Fault f |] ==> ?P;
         [| ?s = Stuck; ?t = Stuck |] ==> ?P;
         !!s. [| ?s = Normal s;
                 ?\<Gamma>\<turnstile> \<langle>?c
           s,Normal s\<rangle> \<Rightarrow> ?t |]
              ==> ?P;
         !!s. [| ?s = Abrupt s; ?t = Abrupt s |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 4),
                  template_app (template_hole 7, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_implication
         ([template_equation (template_var 2, template_hole 3)],
          template_implication
           ([template_equation (template_var 1, template_hole 3)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Semantic.execn_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>DynCom
   ?c,?s\<rangle> =?n\<Rightarrow> ?t;
         !!f. [| ?s = Fault f; ?t = Fault f |] ==> ?P;
         [| ?s = Stuck; ?t = Stuck |] ==> ?P;
         !!s. [| ?s = Normal s;
                 ?\<Gamma>\<turnstile> \<langle>?c
           s,Normal s\<rangle> =?n\<Rightarrow> ?t |]
              ==> ?P;
         !!s. [| ?s = Abrupt s; ?t = Abrupt s |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 8, template_var 5),
                    template_app (template_hole 7, template_var 4)),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_implication
         ([template_equation (template_var 3, template_hole 3)],
          template_implication
           ([template_equation (template_var 1, template_hole 3)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Semantic.exec_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>Seq ?c1.0
   ?c2.0,?s\<rangle> \<Rightarrow> ?t;
         !!f. [| ?s = Fault f; ?t = Fault f |] ==> ?P;
         !!s s'.
            [| ?s = Normal s;
               ?\<Gamma>\<turnstile> \<langle>?c1.0,Normal
               s\<rangle> \<Rightarrow> s';
               ?\<Gamma>\<turnstile> \<langle>?c2.0,s'\<rangle> \<Rightarrow> ?t |]
            ==> ?P;
         [| ?s = Stuck; ?t = Stuck |] ==> ?P;
         !!s. [| ?s = Abrupt s; ?t = Abrupt s |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_var 5),
                  template_app
                   (template_app (template_hole 8, template_var 4),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_implication
         ([template_equation (template_var 2, template_hole 1)],
          template_implication
           ([template_equation (template_var 1, template_hole 1)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Semantic.execn_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>Seq ?c1.0
   ?c2.0,?s\<rangle> =?n\<Rightarrow> ?t;
         !!f. [| ?s = Fault f; ?t = Fault f |] ==> ?P;
         !!s s'.
            [| ?s = Normal s;
               ?\<Gamma>\<turnstile> \<langle>?c1.0,Normal
               s\<rangle> =?n\<Rightarrow> s';
               ?\<Gamma>\<turnstile> \<langle>?c2.0,s'\<rangle> =?n\<Rightarrow> ?t |]
            ==> ?P;
         [| ?s = Stuck; ?t = Stuck |] ==> ?P;
         !!s. [| ?s = Abrupt s; ?t = Abrupt s |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 9, template_var 6),
                    template_app
                     (template_app (template_hole 8, template_var 5),
                      template_var 4)),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_implication
         ([template_equation (template_var 3, template_hole 1)],
          template_implication
           ([template_equation (template_var 1, template_hole 1)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Semantic.exec_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>Guard ?f ?g
   ?c,?s\<rangle> \<Rightarrow> ?t;
         !!s. [| ?s = Normal s; s : ?g;
                 ?\<Gamma>\<turnstile> \<langle>?c,Normal
              s\<rangle> \<Rightarrow> ?t |]
              ==> ?P;
         !!s. [| ?s = Normal s; ?t = Fault ?f; s ~: ?g |] ==> ?P;
         !!f. [| ?s = Fault f; ?t = Fault f |] ==> ?P;
         [| ?s = Stuck; ?t = Stuck |] ==> ?P;
         !!s. [| ?s = Abrupt s; ?t = Abrupt s |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 6),
                  template_app
                   (template_app
                     (template_app (template_hole 9, template_var 5),
                      template_var 4),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_implication
         ([template_equation (template_var 2, template_hole 1)],
          template_implication
           ([template_equation (template_var 1, template_hole 1)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0))),
    ("Semantic.exec_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>Call
   ?p,?s\<rangle> \<Rightarrow> ?t;
         !!f. [| ?s = Fault f; ?t = Fault f |] ==> ?P;
         !!bdy s.
            [| ?s = Normal s; ?\<Gamma> ?p = Some bdy;
               ?\<Gamma>\<turnstile> \<langle>bdy,Normal
             s\<rangle> \<Rightarrow> ?t |]
            ==> ?P;
         !!s. [| ?s = Normal s; ?t = Stuck; ?\<Gamma> ?p = None |] ==> ?P;
         [| ?s = Stuck; ?t = Stuck |] ==> ?P;
         !!s. [| ?s = Abrupt s; ?t = Abrupt s |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 12, template_var 4),
                  template_app (template_hole 11, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_implication
         ([template_equation (template_var 2, template_hole 2)],
          template_implication
           ([template_equation (template_var 1, template_hole 2)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("Semantic.exec_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>Cond ?b ?c1.0
   ?c2.0,?s\<rangle> \<Rightarrow> ?t;
         !!f. [| ?s = Fault f; ?t = Fault f |] ==> ?P;
         !!s. [| ?s = Normal s; s : ?b;
                 ?\<Gamma>\<turnstile> \<langle>?c1.0,Normal
                 s\<rangle> \<Rightarrow> ?t |]
              ==> ?P;
         !!s. [| ?s = Normal s; s ~: ?b;
                 ?\<Gamma>\<turnstile> \<langle>?c2.0,Normal
                 s\<rangle> \<Rightarrow> ?t |]
              ==> ?P;
         [| ?s = Stuck; ?t = Stuck |] ==> ?P;
         !!s. [| ?s = Abrupt s; ?t = Abrupt s |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 6),
                  template_app
                   (template_app
                     (template_app (template_hole 9, template_var 5),
                      template_var 4),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_implication
         ([template_equation (template_var 2, template_hole 1)],
          template_implication
           ([template_equation (template_var 1, template_hole 1)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Semantic.execn_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>Guard ?f ?g
   ?c,?s\<rangle> =?n\<Rightarrow> ?t;
         !!s. [| ?s = Normal s; s : ?g;
                 ?\<Gamma>\<turnstile> \<langle>?c,Normal
              s\<rangle> =?n\<Rightarrow> ?t |]
              ==> ?P;
         !!s. [| ?s = Normal s; ?t = Fault ?f; s ~: ?g |] ==> ?P;
         !!f. [| ?s = Fault f; ?t = Fault f |] ==> ?P;
         [| ?s = Stuck; ?t = Stuck |] ==> ?P;
         !!s. [| ?s = Abrupt s; ?t = Abrupt s |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 10, template_var 7),
                    template_app
                     (template_app
                       (template_app (template_hole 9, template_var 6),
                        template_var 5),
                      template_var 4)),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_implication
         ([template_equation (template_var 3, template_hole 1)],
          template_implication
           ([template_equation (template_var 1, template_hole 1)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0))),
    ("Semantic.exec_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>Spec
   ?r,?s\<rangle> \<Rightarrow> ?t;
         !!f. [| ?s = Fault f; ?t = Fault f |] ==> ?P;
         !!s t. [| ?s = Normal s; ?t = Normal t; (s, t) : ?r |] ==> ?P;
         !!s. [| ?s = Normal s; ?t = Stuck; ALL t. (s, t) ~: ?r |] ==> ?P;
         [| ?s = Stuck; ?t = Stuck |] ==> ?P;
         !!s. [| ?s = Abrupt s; ?t = Abrupt s |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 12, template_var 4),
                  template_app (template_hole 11, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_implication
         ([template_equation (template_var 2, template_hole 3)],
          template_implication
           ([template_equation (template_var 1, template_hole 3)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("Semantic.execn_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>Spec
   ?r,?s\<rangle> =?n\<Rightarrow> ?t;
         !!f. [| ?s = Fault f; ?t = Fault f |] ==> ?P;
         !!s t. [| ?s = Normal s; ?t = Normal t; (s, t) : ?r |] ==> ?P;
         !!s. [| ?s = Normal s; ?t = Stuck; ALL t. (s, t) ~: ?r |] ==> ?P;
         [| ?s = Stuck; ?t = Stuck |] ==> ?P;
         !!s. [| ?s = Abrupt s; ?t = Abrupt s |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 12, template_var 5),
                    template_app (template_hole 11, template_var 4)),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_implication
         ([template_equation (template_var 3, template_hole 3)],
          template_implication
           ([template_equation (template_var 1, template_hole 3)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("Semantic.execn_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>Cond ?b ?c1.0
   ?c2.0,?s\<rangle> =?n\<Rightarrow> ?t;
         !!f. [| ?s = Fault f; ?t = Fault f |] ==> ?P;
         !!s. [| ?s = Normal s; s : ?b;
                 ?\<Gamma>\<turnstile> \<langle>?c1.0,Normal
                 s\<rangle> =?n\<Rightarrow> ?t |]
              ==> ?P;
         !!s. [| ?s = Normal s; s ~: ?b;
                 ?\<Gamma>\<turnstile> \<langle>?c2.0,Normal
                 s\<rangle> =?n\<Rightarrow> ?t |]
              ==> ?P;
         [| ?s = Stuck; ?t = Stuck |] ==> ?P;
         !!s. [| ?s = Abrupt s; ?t = Abrupt s |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 10, template_var 7),
                    template_app
                     (template_app
                       (template_app (template_hole 9, template_var 6),
                        template_var 5),
                      template_var 4)),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_implication
         ([template_equation (template_var 3, template_hole 1)],
          template_implication
           ([template_equation (template_var 1, template_hole 1)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Semantic.exec_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>Catch ?c1.0
   ?c2.0,?s\<rangle> \<Rightarrow> ?t;
         !!f. [| ?s = Fault f; ?t = Fault f |] ==> ?P;
         [| ?s = Stuck; ?t = Stuck |] ==> ?P;
         !!s. [| ?s = Abrupt s; ?t = Abrupt s |] ==> ?P;
         !!s s'.
            [| ?s = Normal s;
               ?\<Gamma>\<turnstile> \<langle>?c1.0,Normal
               s\<rangle> \<Rightarrow> Abrupt s';
               ?\<Gamma>\<turnstile> \<langle>?c2.0,Normal
               s'\<rangle> \<Rightarrow> ?t |]
            ==> ?P;
         !!s. [| ?s = Normal s;
                 ?\<Gamma>\<turnstile> \<langle>?c1.0,Normal
                 s\<rangle> \<Rightarrow> ?t;
                 ~ isAbr ?t |]
              ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 5),
                  template_app
                   (template_app (template_hole 9, template_var 4),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_implication
         ([template_equation (template_var 2, template_hole 5)],
          template_implication
           ([template_equation (template_var 1, template_hole 5)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Semantic.exec_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>While ?b
   ?c,?s\<rangle> \<Rightarrow> ?t;
         !!f. [| ?s = Fault f; ?t = Fault f |] ==> ?P;
         !!s s'.
            [| ?s = Normal s; s : ?b;
               ?\<Gamma>\<turnstile> \<langle>?c,Normal
            s\<rangle> \<Rightarrow> s';
               ?\<Gamma>\<turnstile> \<langle>While ?b
         ?c,s'\<rangle> \<Rightarrow> ?t |]
            ==> ?P;
         !!s. [| ?s = Normal s; ?t = Normal s; s ~: ?b |] ==> ?P;
         [| ?s = Stuck; ?t = Stuck |] ==> ?P;
         !!s. [| ?s = Abrupt s; ?t = Abrupt s |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 11, template_var 5),
                  template_app
                   (template_app (template_hole 10, template_var 4),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_implication
         ([template_equation (template_var 2, template_hole 1)],
          template_implication
           ([template_equation (template_var 1, template_hole 1)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("Semantic.execn_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>Catch ?c1.0
   ?c2.0,?s\<rangle> =?n\<Rightarrow> ?t;
         !!f. [| ?s = Fault f; ?t = Fault f |] ==> ?P;
         [| ?s = Stuck; ?t = Stuck |] ==> ?P;
         !!s. [| ?s = Abrupt s; ?t = Abrupt s |] ==> ?P;
         !!s s'.
            [| ?s = Normal s;
               ?\<Gamma>\<turnstile> \<langle>?c1.0,Normal
               s\<rangle> =?n\<Rightarrow> Abrupt s';
               ?\<Gamma>\<turnstile> \<langle>?c2.0,Normal
               s'\<rangle> =?n\<Rightarrow> ?t |]
            ==> ?P;
         !!s. [| ?s = Normal s;
                 ?\<Gamma>\<turnstile> \<langle>?c1.0,Normal
                 s\<rangle> =?n\<Rightarrow> ?t;
                 ~ isAbr ?t |]
              ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 10, template_var 6),
                    template_app
                     (template_app (template_hole 9, template_var 5),
                      template_var 4)),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_implication
         ([template_equation (template_var 3, template_hole 5)],
          template_implication
           ([template_equation (template_var 1, template_hole 5)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Semantic.exec_block_Normal_elim",
     "[| ?\<Gamma>\<turnstile> \<langle>block ?init ?bdy ?return
   ?c,Normal ?s\<rangle> \<Rightarrow> ?t;
         !!t'. [| ?\<Gamma>\<turnstile> \<langle>?bdy,Normal
                 (?init ?s)\<rangle> \<Rightarrow> Normal t';
                  ?\<Gamma>\<turnstile> \<langle>?c ?s
            t',Normal (?return ?s t')\<rangle> \<Rightarrow> ?t |]
               ==> ?P;
         !!t'. [| ?\<Gamma>\<turnstile> \<langle>?bdy,Normal
                 (?init ?s)\<rangle> \<Rightarrow> Abrupt t';
                  ?t = Abrupt (?return ?s t') |]
               ==> ?P;
         !!f. [| ?\<Gamma>\<turnstile> \<langle>?bdy,Normal
                (?init ?s)\<rangle> \<Rightarrow> Fault f;
                 ?t = Fault f |]
              ==> ?P;
         [| ?\<Gamma>\<turnstile> \<langle>?bdy,Normal
           (?init ?s)\<rangle> \<Rightarrow> Stuck;
            ?t = Stuck |]
         ==> ?P;
         [| ?\<Gamma> ?p = None; ?t = Stuck |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 8),
                  template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 9, template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4)),
                template_app (template_hole 8, template_var 3)),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 10, template_var 8),
                     template_var 6),
                   template_app
                    (template_hole 8,
                     template_app (template_var 7, template_var 3))),
                 template_hole 2)
               )],
          template_implication
           ([template_equation (template_var 2, template_hole 2)],
            template_predicate (template_var 1))),
        template_implication
         ([template_equation
            (template_app (template_var 8, template_var 0),
             template_hole 0)],
          template_implication
           ([template_equation (template_var 2, template_hole 2)],
            template_predicate (template_var 1)))],
       template_predicate (template_var 1))),
    ("Semantic.execn_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>While ?b
   ?c,?s\<rangle> =?n\<Rightarrow> ?t;
         !!f. [| ?s = Fault f; ?t = Fault f |] ==> ?P;
         !!s s'.
            [| ?s = Normal s; s : ?b;
               ?\<Gamma>\<turnstile> \<langle>?c,Normal
            s\<rangle> =?n\<Rightarrow> s';
               ?\<Gamma>\<turnstile> \<langle>While ?b
         ?c,s'\<rangle> =?n\<Rightarrow> ?t |]
            ==> ?P;
         !!s. [| ?s = Normal s; ?t = Normal s; s ~: ?b |] ==> ?P;
         [| ?s = Stuck; ?t = Stuck |] ==> ?P;
         !!s. [| ?s = Abrupt s; ?t = Abrupt s |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 11, template_var 6),
                    template_app
                     (template_app (template_hole 10, template_var 5),
                      template_var 4)),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_implication
         ([template_equation (template_var 3, template_hole 1)],
          template_implication
           ([template_equation (template_var 1, template_hole 1)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("Semantic.execn_block_Normal_elim",
     "[| ?\<Gamma>\<turnstile> \<langle>block ?init ?bdy ?return
   ?c,Normal ?s\<rangle> =?n\<Rightarrow> ?t;
         !!t'. [| ?\<Gamma>\<turnstile> \<langle>?bdy,Normal
                 (?init ?s)\<rangle> =?n\<Rightarrow> Normal t';
                  ?\<Gamma>\<turnstile> \<langle>?c ?s
            t',Normal (?return ?s t')\<rangle> =?n\<Rightarrow> ?t |]
               ==> ?P;
         !!t'. [| ?\<Gamma>\<turnstile> \<langle>?bdy,Normal
                 (?init ?s)\<rangle> =?n\<Rightarrow> Abrupt t';
                  ?t = Abrupt (?return ?s t') |]
               ==> ?P;
         !!f. [| ?\<Gamma>\<turnstile> \<langle>?bdy,Normal
                (?init ?s)\<rangle> =?n\<Rightarrow> Fault f;
                 ?t = Fault f |]
              ==> ?P;
         [| ?\<Gamma>\<turnstile> \<langle>?bdy,Normal
           (?init ?s)\<rangle> =?n\<Rightarrow> Stuck;
            ?t = Stuck |]
         ==> ?P;
         [| ?\<Gamma> ?p = None; ?t = Stuck |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 10, template_var 9),
                    template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 9, template_var 8),
                          template_var 7),
                        template_var 6),
                      template_var 5)),
                  template_app (template_hole 8, template_var 4)),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 10, template_var 9),
                       template_var 7),
                     template_app
                      (template_hole 8,
                       template_app (template_var 8, template_var 4))),
                   template_var 3),
                 template_hole 2)
               )],
          template_implication
           ([template_equation (template_var 2, template_hole 2)],
            template_predicate (template_var 1))),
        template_implication
         ([template_equation
            (template_app (template_var 9, template_var 0),
             template_hole 0)],
          template_implication
           ([template_equation (template_var 2, template_hole 2)],
            template_predicate (template_var 1)))],
       template_predicate (template_var 1))),
    ("Semantic.execn_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>Call
   ?p,?s\<rangle> =?n\<Rightarrow> ?t;
         !!f. [| ?s = Fault f; ?t = Fault f |] ==> ?P;
         !!bdy s n.
            [| ?s = Normal s; ?n = Suc n; ?\<Gamma> ?p = Some bdy;
               ?\<Gamma>\<turnstile> \<langle>bdy,Normal
             s\<rangle> =n\<Rightarrow> ?t |]
            ==> ?P;
         !!s n.
            [| ?s = Normal s; ?n = Suc n; ?t = Stuck; ?\<Gamma> ?p = None |]
            ==> ?P;
         [| ?s = Stuck; ?t = Stuck |] ==> ?P;
         !!s. [| ?s = Abrupt s; ?t = Abrupt s |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 15, template_var 5),
                    template_app (template_hole 14, template_var 4)),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_implication
         ([template_equation (template_var 3, template_hole 2)],
          template_implication
           ([template_equation (template_var 1, template_hole 2)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate (template_var 0))),
    ("Semantic.exec_call_Normal_elim",
     "[| ?\<Gamma>\<turnstile> \<langle>call ?init ?p ?return
   ?c,Normal ?s\<rangle> \<Rightarrow> ?t;
         !!bdy t'.
            [| ?\<Gamma> ?p = Some bdy;
               ?\<Gamma>\<turnstile> \<langle>bdy,Normal
             (?init ?s)\<rangle> \<Rightarrow> Normal t';
               ?\<Gamma>\<turnstile> \<langle>?c ?s
         t',Normal (?return ?s t')\<rangle> \<Rightarrow> ?t |]
            ==> ?P;
         !!bdy t'.
            [| ?\<Gamma> ?p = Some bdy;
               ?\<Gamma>\<turnstile> \<langle>bdy,Normal
             (?init ?s)\<rangle> \<Rightarrow> Abrupt t';
               ?t = Abrupt (?return ?s t') |]
            ==> ?P;
         !!bdy f.
            [| ?\<Gamma> ?p = Some bdy;
               ?\<Gamma>\<turnstile> \<langle>bdy,Normal
             (?init ?s)\<rangle> \<Rightarrow> Fault f;
               ?t = Fault f |]
            ==> ?P;
         !!bdy.
            [| ?\<Gamma> ?p = Some bdy;
               ?\<Gamma>\<turnstile> \<langle>bdy,Normal
             (?init ?s)\<rangle> \<Rightarrow> Stuck;
               ?t = Stuck |]
            ==> ?P;
         [| ?\<Gamma> ?p = None; ?t = Stuck |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 12, template_var 7),
                  template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 11, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3)),
                template_app (template_hole 10, template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_implication
         ([template_equation
            (template_app (template_var 7, template_var 5),
             template_hole 0)],
          template_implication
           ([template_equation (template_var 1, template_hole 1)],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Semantic.execn_call_Normal_elim",
     "[| ?\<Gamma>\<turnstile> \<langle>call ?init ?p ?return
   ?c,Normal ?s\<rangle> =?n\<Rightarrow> ?t;
         !!bdy i t'.
            [| ?\<Gamma> ?p = Some bdy;
               ?\<Gamma>\<turnstile> \<langle>bdy,Normal
             (?init ?s)\<rangle> =i\<Rightarrow> Normal t';
               ?\<Gamma>\<turnstile> \<langle>?c ?s
         t',Normal (?return ?s t')\<rangle> =Suc i\<Rightarrow> ?t;
               ?n = Suc i |]
            ==> ?P;
         !!bdy i t'.
            [| ?\<Gamma> ?p = Some bdy;
               ?\<Gamma>\<turnstile> \<langle>bdy,Normal
             (?init ?s)\<rangle> =i\<Rightarrow> Abrupt t';
               ?n = Suc i; ?t = Abrupt (?return ?s t') |]
            ==> ?P;
         !!bdy i f.
            [| ?\<Gamma> ?p = Some bdy;
               ?\<Gamma>\<turnstile> \<langle>bdy,Normal
             (?init ?s)\<rangle> =i\<Rightarrow> Fault f;
               ?n = Suc i; ?t = Fault f |]
            ==> ?P;
         !!bdy i.
            [| ?\<Gamma> ?p = Some bdy;
               ?\<Gamma>\<turnstile> \<langle>bdy,Normal
             (?init ?s)\<rangle> =i\<Rightarrow> Stuck;
               ?n = Suc i; ?t = Stuck |]
            ==> ?P;
         !!i. [| ?\<Gamma> ?p = None; ?n = Suc i; ?t = Stuck |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 15, template_var 8),
                    template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 14, template_var 7),
                          template_var 6),
                        template_var 5),
                      template_var 4)),
                  template_app (template_hole 13, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.SemanticTemplates"
### 0.761s elapsed time, 1.687s cpu time, 1.072s GC time
val it = (): unit
