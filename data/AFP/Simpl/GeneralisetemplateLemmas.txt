   [("Generalise.generaliseRefl", "(?P) ==> (?P)",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 2,
                 template_app (template_hole 0, template_var 0))),
             template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0))))
         )),
    ("Generalise.generaliseImp",
     "((?P) ==> (?Q)) ==> ((?X --> ?P) ==> (?X --> ?Q))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 2))),
                template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 1))))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 2)))),
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 1)))))
           ))),
    ("Generalise.generaliseAllShift",
     "(!!s. ?P ==> ?Q s) ==> ((?P) ==> (ALL s. ?Q s))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3, template_app (template_hole 2, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 1, template_var 1))),
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, t_empty)))))
           ))),
    ("Generalise.generaliseAll",
     "(!!s. (?P s) ==> (?Q s)) ==> ((ALL s. ?P s) ==> (ALL s. ?Q s))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3, template_app (template_hole 2, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 1,
                     template_app (template_hole 0, t_empty)))),
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, t_empty)))))
           ))),
    ("Generalise.generaliseEx",
     "(!!s. (?P s) ==> (?Q s)) ==> ((EX s. ?P s) ==> (EX s. ?Q s))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3, template_app (template_hole 2, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 1,
                     template_app (template_hole 0, t_empty)))),
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, t_empty)))))
           ))),
    ("Generalise.generaliseConj",
     "[| (?P) ==> (?Q); (?P') ==> (?Q') |] ==> ((?P & ?P') ==> (?Q & ?Q'))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 3))),
                template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 2))))
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 1))),
                template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 1)))),
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0)))))
           )))]
