Loading theory "Draft.Language" (required by "Draft.TerminationTemplates" via "Draft.Termination" via "Draft.Semantic")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.TerminationTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.TerminationTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.TerminationTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.087s elapsed time, 0.382s cpu time, 0.000s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.TerminationTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.185s elapsed time, 0.754s cpu time, 0.076s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.TerminationTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.407s elapsed time, 1.517s cpu time, 0.429s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.TerminationTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.BigO"
### 0.840s elapsed time, 3.179s cpu time, 0.624s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.811s elapsed time, 3.014s cpu time, 0.323s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.031s elapsed time, 6.225s cpu time, 1.418s GC time
Loading theory "Draft.Templates" (required by "Draft.TerminationTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.106s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.TerminationTemplates")
consts
  switch ::
    "('s => 'v) => ('v set * ('s, 'p, 'f) com) list => ('s, 'p, 'f) com"
consts
  guards :: "('f * 's set) list => ('s, 'p, 'f) com => ('s, 'p, 'f) com"
consts
  flatten :: "('s, 'p, 'f) com => ('s, 'p, 'f) com list"
consts
  sequence ::
    "(('s, 'p, 'f) com => ('s, 'p, 'f) com => ('s, 'p, 'f) com)
     => ('s, 'p, 'f) com list => ('s, 'p, 'f) com"
consts
  normalize :: "('s, 'p, 'f) com => ('s, 'p, 'f) com"
consts
  strip_guards :: "'f set => ('s, 'p, 'f) com => ('s, 'p, 'f) com"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.552s elapsed time, 1.159s cpu time, 0.119s GC time
consts
  mark_guards :: "'f => ('s, 'p, 'g) com => ('s, 'p, 'f) com"
### No equation for constructor "Skip"
### No equation for constructor "Basic"
### No equation for constructor "Spec"
### No equation for constructor "Seq"
### No equation for constructor "Cond"
### No equation for constructor "While"
### No equation for constructor "Call"
### No equation for constructor "DynCom"
### No equation for constructor "Throw"
### No equation for constructor "Catch"
consts
  dest_Guard :: "('s, 'p, 'f) com => 'f * 's set * ('s, 'p, 'f) com"
consts
  merge_guards :: "('s, 'p, 'f) com => ('s, 'p, 'f) com"
consts
  noguards :: "('s, 'p, 'f) com => bool"
consts
  nothrows :: "('s, 'p, 'f) com => bool"
Proofs for inductive predicate(s) "com_relp"
  Proving monotonicity ...
### Legacy feature! Old 'recdef' command -- use 'fun' or 'function' instead
Defining recursive function "Language.inter_guards" ...
Proving induction theorem ...
Postprocessing ...
Simplifying nested TCs ...
... Postprocessing finished
Proving unsplit equation...
th:
(Skip \<inter>\<^sub>g Skip) = None ==> (Skip \<inter>\<^sub>g Skip) = None
split ths:
(Skip \<inter>\<^sub>g Basic ?bc) = None
(Skip \<inter>\<^sub>g Spec ?bd) = None
(Skip \<inter>\<^sub>g Seq ?be ?bf) = None
(Skip \<inter>\<^sub>g Cond ?bg ?bh ?bi) = None
(Skip \<inter>\<^sub>g While ?bj ?bk) = None
(Skip \<inter>\<^sub>g Call ?bl) = None
(Skip \<inter>\<^sub>g DynCom ?bm) = None
(Skip \<inter>\<^sub>g Guard ?bn ?bo ?bp) = None
(Skip \<inter>\<^sub>g Throw) = None
(Skip \<inter>\<^sub>g Catch ?bq ?br) = None
(Basic ?w \<inter>\<^sub>g Skip) = None
(Basic ?w \<inter>\<^sub>g Spec ?cj) = None
(Basic ?w \<inter>\<^sub>g Seq ?ck ?cl) = None
(Basic ?w \<inter>\<^sub>g Cond ?cm ?cn ?co) = None
(Basic ?w \<inter>\<^sub>g While ?cp ?cq) = None
(Basic ?w \<inter>\<^sub>g Call ?cr) = None
(Basic ?w \<inter>\<^sub>g DynCom ?cs) = None
(Basic ?w \<inter>\<^sub>g Guard ?ct ?cu ?cv) = None
(Basic ?w \<inter>\<^sub>g Throw) = None
(Basic ?w \<inter>\<^sub>g Catch ?cw ?cx) = None
(Spec ?x \<inter>\<^sub>g Skip) = None
(Spec ?x \<inter>\<^sub>g Basic ?do) = None
(Spec ?x \<inter>\<^sub>g Seq ?dq ?dr) = None
(Spec ?x \<inter>\<^sub>g Cond ?ds ?dt ?du) = None
(Spec ?x \<inter>\<^sub>g While ?dv ?dw) = None
(Spec ?x \<inter>\<^sub>g Call ?dx) = None
(Spec ?x \<inter>\<^sub>g DynCom ?dy) = None
(Spec ?x \<inter>\<^sub>g Guard ?dz ?ea ?eb) = None
(Spec ?x \<inter>\<^sub>g Throw) = None
(Spec ?x \<inter>\<^sub>g Catch ?ec ?ed) = None
(Seq ?y ?z \<inter>\<^sub>g Skip) = None
(Seq ?y ?z \<inter>\<^sub>g Basic ?ev) = None
(Seq ?y ?z \<inter>\<^sub>g Spec ?ew) = None
(Seq ?y ?z \<inter>\<^sub>g Cond ?ez ?fa ?fb) = None
(Seq ?y ?z \<inter>\<^sub>g While ?fc ?fd) = None
(Seq ?y ?z \<inter>\<^sub>g Call ?fe) = None
(Seq ?y ?z \<inter>\<^sub>g DynCom ?ff) = None
(Seq ?y ?z \<inter>\<^sub>g Guard ?fg ?fh ?fi) = None
(Seq ?y ?z \<inter>\<^sub>g Throw) = None
(Seq ?y ?z \<inter>\<^sub>g Catch ?fj ?fk) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Skip) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Basic ?gb) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Spec ?gc) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Seq ?gd ?ge) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g While ?gi ?gj) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Call ?gk) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g DynCom ?gl) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Guard ?gm ?gn ?go) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Throw) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Catch ?gp ?gq) = None
(While ?ad ?ae \<inter>\<^sub>g Skip) = None
(While ?ad ?ae \<inter>\<^sub>g Basic ?hh) = None
(While ?ad ?ae \<inter>\<^sub>g Spec ?hi) = None
(While ?ad ?ae \<inter>\<^sub>g Seq ?hj ?hk) = None
(While ?ad ?ae \<inter>\<^sub>g Cond ?hl ?hm ?hn) = None
(While ?ad ?ae \<inter>\<^sub>g Call ?hq) = None
(While ?ad ?ae \<inter>\<^sub>g DynCom ?hr) = None
(While ?ad ?ae \<inter>\<^sub>g Guard ?hs ?ht ?hu) = None
(While ?ad ?ae \<inter>\<^sub>g Throw) = None
(While ?ad ?ae \<inter>\<^sub>g Catch ?hv ?hw) = None
(Call ?af \<inter>\<^sub>g Skip) = None
(Call ?af \<inter>\<^sub>g Basic ?in) = None
(Call ?af \<inter>\<^sub>g Spec ?io) = None
(Call ?af \<inter>\<^sub>g Seq ?ip ?iq) = None
(Call ?af \<inter>\<^sub>g Cond ?ir ?is ?it) = None
(Call ?af \<inter>\<^sub>g While ?iu ?iv) = None
(Call ?af \<inter>\<^sub>g DynCom ?ix) = None
(Call ?af \<inter>\<^sub>g Guard ?iy ?iz ?ja) = None
(Call ?af \<inter>\<^sub>g Throw) = None
(Call ?af \<inter>\<^sub>g Catch ?jb ?jc) = None
(DynCom ?ag \<inter>\<^sub>g Skip) = None
(DynCom ?ag \<inter>\<^sub>g Basic ?jt) = None
(DynCom ?ag \<inter>\<^sub>g Spec ?ju) = None
(DynCom ?ag \<inter>\<^sub>g Seq ?jv ?jw) = None
(DynCom ?ag \<inter>\<^sub>g Cond ?jx ?jy ?jz) = None
(DynCom ?ag \<inter>\<^sub>g While ?ka ?kb) = None
(DynCom ?ag \<inter>\<^sub>g Call ?kc) = None
(DynCom ?ag \<inter>\<^sub>g Guard ?ke ?kf ?kg) = None
(DynCom ?ag \<inter>\<^sub>g Throw) = None
(DynCom ?ag \<inter>\<^sub>g Catch ?kh ?ki) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Skip) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Basic ?kz) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Spec ?la) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Seq ?lb ?lc) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Cond ?ld ?le ?lf) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g While ?lg ?lh) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Call ?li) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g DynCom ?lj) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Throw) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Catch ?ln ?lo) = None
(Throw \<inter>\<^sub>g Skip) = None
(Throw \<inter>\<^sub>g Basic ?mf) = None
(Throw \<inter>\<^sub>g Spec ?mg) = None
(Throw \<inter>\<^sub>g Seq ?mh ?mi) = None
(Throw \<inter>\<^sub>g Cond ?mj ?mk ?ml) = None
(Throw \<inter>\<^sub>g While ?mm ?mn) = None
(Throw \<inter>\<^sub>g Call ?mo) = None
(Throw \<inter>\<^sub>g DynCom ?mp) = None
(Throw \<inter>\<^sub>g Guard ?mq ?mr ?ms) = None
(Throw \<inter>\<^sub>g Catch ?mt ?mu) = None
(Catch ?ak ?al \<inter>\<^sub>g Skip) = None
(Catch ?ak ?al \<inter>\<^sub>g Basic ?nl) = None
(Catch ?ak ?al \<inter>\<^sub>g Spec ?nm) = None
(Catch ?ak ?al \<inter>\<^sub>g Seq ?nn ?no) = None
(Catch ?ak ?al \<inter>\<^sub>g Cond ?np ?nq ?nr) = None
(Catch ?ak ?al \<inter>\<^sub>g While ?ns ?nt) = None
(Catch ?ak ?al \<inter>\<^sub>g Call ?nu) = None
(Catch ?ak ?al \<inter>\<^sub>g DynCom ?nv) = None
(Catch ?ak ?al \<inter>\<^sub>g Guard ?nw ?nx ?ny) = None
(Catch ?ak ?al \<inter>\<^sub>g Throw) = None
--
### recdef (solve_eq): splitto: cannot find variable to split on
Proofs for inductive predicate(s) "subseteq_guards"
  Proving monotonicity ...
### theory "Draft.Language"
### 4.483s elapsed time, 10.151s cpu time, 2.252s GC time
Loading theory "Draft.Semantic" (required by "Draft.TerminationTemplates" via "Draft.Termination")
Proofs for inductive predicate(s) "exec"
  Proving monotonicity ...
Proofs for inductive predicate(s) "execn"
  Proving monotonicity ...
### theory "Draft.Semantic"
### 1.995s elapsed time, 2.458s cpu time, 0.386s GC time
Loading theory "Draft.Termination" (required by "Draft.TerminationTemplates")
Proofs for inductive predicate(s) "terminates"
  Proving monotonicity ...
### theory "Draft.Termination"
### 0.775s elapsed time, 1.673s cpu time, 1.212s GC time
Loading theory "Draft.TerminationTemplates"
val templateLemmas =
   [("Termination.terminates_Skip'", "?\<Gamma>\<turnstile>Skip \<down> ?s",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0),
           template_var 0)
         )),
    ("Termination.terminates_iff_terminates_merge_guards",
     "?\<Gamma>\<turnstile>?c \<down> ?s =
      ?\<Gamma>\<turnstile>merge_guards ?c \<down> ?s",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Termination.terminates_iff_terminates_normalize",
     "?\<Gamma>\<turnstile>Language.normalize ?c \<down> ?s =
      ?\<Gamma>\<turnstile>?c \<down> ?s",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0))),
    ("Termination.terminates_to_terminates_merge_guards",
     "?\<Gamma>\<turnstile>?c \<down> ?s ==>
      ?\<Gamma>\<turnstile>merge_guards ?c \<down> ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Termination.terminates_to_terminates_normalize",
     "?\<Gamma>\<turnstile>?c \<down> ?s ==>
      ?\<Gamma>\<turnstile>Language.normalize ?c \<down> ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Termination.terminates_merge_guards_to_terminates",
     "?\<Gamma>\<turnstile>merge_guards ?c \<down> ?s ==>
      ?\<Gamma>\<turnstile>?c \<down> ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_app (template_hole 0, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Termination.terminates_normalize_to_terminates",
     "?\<Gamma>\<turnstile>Language.normalize ?c \<down> ?s ==>
      ?\<Gamma>\<turnstile>?c \<down> ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_app (template_hole 0, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Termination.terminates_Normal_elim_cases",
     "[| ?\<Gamma>\<turnstile>Skip \<down> Normal ?s; ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_hole 1),
              template_app (template_hole 0, template_var 1))
            ),
        template_predicate (template_var 0)],
       template_predicate (template_var 0))),
    ("Termination.terminates_Normal_elim_cases",
     "[| ?\<Gamma>\<turnstile>Throw \<down> Normal ?s; ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_hole 1),
              template_app (template_hole 0, template_var 1))
            ),
        template_predicate (template_var 0)],
       template_predicate (template_var 0))),
    ("Termination.terminates_to_terminates_mark_guards",
     "?\<Gamma>\<turnstile>?c \<down> ?s ==>
      ?\<Gamma>\<turnstile>mark_guards ?f ?c \<down> ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_var 1)
           ))),
    ("Termination.terminates_mark_guards_to_terminates",
     "?\<Gamma>\<turnstile>mark_guards ?f ?c \<down> ?s ==>
      ?\<Gamma>\<turnstile>?c \<down> ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1),
             template_var 0)
           ))),
    ("Termination.terminates_strip_to_terminates",
     "strip ?F ?\<Gamma>\<turnstile>?c \<down> ?s ==>
      ?\<Gamma>\<turnstile>?c \<down> ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 3),
                    template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Termination.terminates_strip_guards_to_terminates",
     "?\<Gamma>\<turnstile>strip_guards ?F ?c \<down> ?s ==>
      ?\<Gamma>\<turnstile>?c \<down> ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1),
             template_var 0)
           ))),
    ("Termination.terminates_Normal_elim_cases",
     "[| ?\<Gamma>\<turnstile>Basic ?f \<down> Normal ?s; ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_app (template_hole 1, template_var 2)),
              template_app (template_hole 0, template_var 1))
            ),
        template_predicate (template_var 0)],
       template_predicate (template_var 0))),
    ("Termination.terminates_Normal_elim_cases",
     "[| ?\<Gamma>\<turnstile>Spec ?r \<down> Normal ?s; ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_app (template_hole 1, template_var 2)),
              template_app (template_hole 0, template_var 1))
            ),
        template_predicate (template_var 0)],
       template_predicate (template_var 0))),
    ("Termination.terminates_implies_exec",
     "?\<Gamma>\<turnstile>?c \<down> ?s ==>
      EX t. ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Termination.terminates_to_terminates_sequence_flatten",
     "?\<Gamma>\<turnstile>?c \<down> ?s ==>
      ?\<Gamma>\<turnstile>sequence Seq (flatten ?c) \<down> ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("Termination.terminates_merge_guards_to_terminates_Normal",
     "?\<Gamma>\<turnstile>merge_guards ?c \<down> Normal ?s ==>
      ?\<Gamma>\<turnstile>?c \<down> Normal ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_app (template_hole 1, template_var 1)),
              template_app (template_hole 0, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Termination.terminates_sequence_flatten_to_terminates",
     "?\<Gamma>\<turnstile>sequence Seq (flatten ?c) \<down> ?s ==>
      ?\<Gamma>\<turnstile>?c \<down> ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_app (template_hole 0, template_var 1))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Termination.terminates_mark_guards_to_terminates_Normal",
     "?\<Gamma>\<turnstile>mark_guards ?f ?c \<down> Normal ?s ==>
      ?\<Gamma>\<turnstile>?c \<down> Normal ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_app (template_hole 0, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Termination.terminates_callUndefined",
     "?\<Gamma> ?p = None ==>
      ?\<Gamma>\<turnstile>call ?init ?p ?return ?result \<down> Normal ?s",
     template_implication
      ([template_equation
         (template_app (template_var 5, template_var 4), template_hole 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 5),
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 4),
                   template_var 2),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Termination.terminates_Call_body",
     "?\<Gamma> ?p = Some ?bdy ==>
      ?\<Gamma>\<turnstile>Call ?p \<down> ?s =
      ?\<Gamma>\<turnstile>the (?\<Gamma> ?p) \<down> ?s",
     template_implication
      ([template_equation
         (template_app (template_var 3, template_var 2),
          template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_app (template_hole 1, template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_hole 0,
               template_app (template_var 3, template_var 2))),
           template_var 0)))),
    ("Termination.inter_guards_terminates",
     "[| (?c1.0 \<inter>\<^sub>g ?c2.0) = Some ?c;
         ?\<Gamma>\<turnstile>?c1.0 \<down> ?s |]
      ==> ?\<Gamma>\<turnstile>?c \<down> ?s",
     template_implication
      ([template_equation
         (template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3)),
          template_app (template_hole 1, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 1),
                template_var 4),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_var 0)
           ))),
    ("Termination.inter_guards_terminates'",
     "[| (?c1.0 \<inter>\<^sub>g ?c2.0) = Some ?c;
         ?\<Gamma>\<turnstile>?c2.0 \<down> ?s |]
      ==> ?\<Gamma>\<turnstile>?c \<down> ?s",
     template_implication
      ([template_equation
         (template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3)),
          template_app (template_hole 1, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 1),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_var 0)
           ))),
    ("Termination.terminates_Normal_Call_body",
     "?p : dom ?\<Gamma> ==>
      ?\<Gamma>\<turnstile>Call ?p \<down> Normal ?s =
      ?\<Gamma>\<turnstile>the (?\<Gamma> ?p) \<down> Normal ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 1),
             template_app (template_hole 2, template_var 2)),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_hole 0,
               template_app (template_var 1, template_var 2))),
           template_app (template_hole 1, template_var 0))))),
    ("Termination.terminates_Normal_elim_cases",
     "[| ?\<Gamma>\<turnstile>DynCom ?c \<down> Normal ?s;
         ?\<Gamma>\<turnstile>?c ?s \<down> Normal ?s ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_app (template_hole 1, template_var 2)),
              template_app (template_hole 0, template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 3),
                   template_app (template_var 2, template_var 1)),
                 template_app (template_hole 0, template_var 1))
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Termination.terminates_dynCall",
     "?\<Gamma>\<turnstile>call ?init (?p ?s) ?return
                            ?c \<down> Normal ?s ==>
      ?\<Gamma>\<turnstile>dynCall ?init ?p ?return ?c \<down> Normal ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 2, template_var 4),
                      template_app (template_var 3, template_var 2)),
                    template_var 1),
                  template_var 0)),
              template_app (template_hole 1, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 5),
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3),
                   template_var 1),
                 template_var 0)),
             template_app (template_hole 1, template_var 2))
           ))),
    ("Termination.terminates_restrict_to_terminates",
     "[| ?\<Gamma>|\<^bsub>?M\<^esub>\<turnstile>?c \<down> ?s;
         ?\<Gamma>|\<^bsub>?M\<^esub>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow>\<notin>{Stuck} |]
      ==> ?\<Gamma>\<turnstile>?c \<down> ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 2)),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 4, template_var 3),
                      template_var 2)),
                  template_var 1),
                template_var 0),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_hole 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 3),
               template_var 1),
             template_var 0)
           ))),
    ("Termination.wf_terminates_while",
     "wf {(t, s).
          ?\<Gamma>\<turnstile>While ?b ?c \<down> Normal s &
          s : ?b &
          ?\<Gamma>\<turnstile> \<langle>?c,Normal
       s\<rangle> \<Rightarrow> Normal t}",
     template_predicate
      (
         template_app
          (template_hole 8,
           template_app
            (template_hole 7, template_app (template_hole 6, t_empty)))
         )),
    ("Termination.terminates_noFault_strip_guards",
     "[| ?\<Gamma>\<turnstile>?c \<down> Normal ?s;
         ?\<Gamma>\<turnstile> \<langle>?c,Normal
      ?s\<rangle> \<Rightarrow>\<notin>Fault ` ?F |]
      ==> ?\<Gamma>\<turnstile>strip_guards ?F ?c \<down> Normal ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_app (template_hole 4, template_var 1)),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 3),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app (template_hole 4, template_var 1))
           ))),
    ("Termination.terminates_noFault_strip",
     "[| ?\<Gamma>\<turnstile>?c \<down> Normal ?s;
         ?\<Gamma>\<turnstile> \<langle>?c,Normal
      ?s\<rangle> \<Rightarrow>\<notin>Fault ` ?F |]
      ==> strip ?F ?\<Gamma>\<turnstile>?c \<down> Normal ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_app (template_hole 4, template_var 1)),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 3)),
               template_var 2),
             template_app (template_hole 4, template_var 1))
           ))),
    ("Termination.terminates_fewer_guards",
     "[| ?\<Gamma>\<turnstile>?c' \<down> ?s; ?c \<subseteq>\<^sub>g ?c';
         ?\<Gamma>\<turnstile> \<langle>?c',?s\<rangle> \<Rightarrow>\<notin>range
  Fault |]
      ==> ?\<Gamma>\<turnstile>?c \<down> ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_hole 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 3),
               template_var 0),
             template_var 1)
           ))),
    ("Termination.terminates_dynCall_elim",
     "[| ?\<Gamma>\<turnstile>dynCall ?init ?p ?return ?c \<down> Normal ?s;
         ?\<Gamma>\<turnstile>call ?init (?p ?s) ?return
                               ?c \<down> Normal ?s ==>
         ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 6),
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 2, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_app (template_hole 1, template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 6),
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 5),
                         template_app (template_var 4, template_var 1)),
                       template_var 3),
                     template_var 2)),
                 template_app (template_hole 1, template_var 1))
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Termination.terminates_fewer_guards_Normal",
     "[| ?\<Gamma>\<turnstile>?c' \<down> Normal ?s;
         ?c \<subseteq>\<^sub>g ?c';
         ?\<Gamma>\<turnstile> \<langle>?c',Normal
       ?s\<rangle> \<Rightarrow>\<notin>range Fault |]
      ==> ?\<Gamma>\<turnstile>?c \<down> Normal ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2),
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_app (template_hole 5, template_var 1)),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_hole 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, template_var 3),
               template_var 0),
             template_app (template_hole 5, template_var 1))
           ))),
    ("Termination.terminates_while",
     "[| ?\<Gamma>\<turnstile>While ?b ?c \<down> Normal (?f ?k);
         ALL i.
            ?\<Gamma>\<turnstile> \<langle>?c,Normal
         (?f i)\<rangle> \<Rightarrow> Normal (?f (Suc i)) |]
      ==> EX i. ?f i ~: ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 4),
                template_app
                 (template_app (template_hole 7, template_var 3),
                  template_var 2)),
              template_app
               (template_hole 6,
                template_app (template_var 1, template_var 0)))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Termination.terminates_Normal_elim_cases",
     "[| ?\<Gamma>\<turnstile>Seq ?c1.0 ?c2.0 \<down> Normal ?s;
         [| ?\<Gamma>\<turnstile>?c1.0 \<down> Normal ?s;
            ALL s'.
               ?\<Gamma>\<turnstile> \<langle>?c1.0,Normal
               ?s\<rangle> \<Rightarrow> s' -->
               ?\<Gamma>\<turnstile>?c2.0 \<down> s' |]
         ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_app (template_hole 3, template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 5, template_var 4),
                   template_var 3),
                 template_app (template_hole 3, template_var 1))
               )],
          template_implication
           ([template_predicate (template_app (template_hole 2, t_empty))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Termination.terminates_Normal_elim_cases",
     "[| ?\<Gamma>\<turnstile>Guard ?f ?g ?c \<down> Normal ?s;
         [| ?s : ?g; ?\<Gamma>\<turnstile>?c \<down> Normal ?s |] ==> ?P;
         ?s ~: ?g ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 5),
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_app (template_hole 2, template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 3)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_app (template_hole 4, template_var 5),
                     template_var 2),
                   template_app (template_hole 2, template_var 1))
                 )],
            template_predicate (template_var 0))),
        template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 3)
                   )
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Termination.terminates_sequence_appD",
     "?\<Gamma>\<turnstile>sequence Seq (?xs @ ?ys) \<down> Normal ?s ==>
      ?\<Gamma>\<turnstile>sequence Seq ?xs \<down> Normal ?s &
      (ALL s'.
          ?\<Gamma>\<turnstile> \<langle>sequence Seq
    ?xs,Normal ?s\<rangle> \<Rightarrow> s' -->
          ?\<Gamma>\<turnstile>sequence Seq ?ys \<down> s')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 3),
                template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_var 1))),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 8, template_var 3),
                   template_app
                    (template_app (template_hole 7, template_hole 6),
                     template_var 2)),
                 template_app (template_hole 4, template_var 0))),
             template_app (template_hole 2, t_empty))
           ))),
    ("Termination.terminates_Normal_elim_cases",
     "[| ?\<Gamma>\<turnstile>Catch ?c1.0 ?c2.0 \<down> Normal ?s;
         [| ?\<Gamma>\<turnstile>?c1.0 \<down> Normal ?s;
            ALL s'.
               ?\<Gamma>\<turnstile> \<langle>?c1.0,Normal
               ?s\<rangle> \<Rightarrow> Abrupt s' -->
               ?\<Gamma>\<turnstile>?c2.0 \<down> Normal s' |]
         ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 4),
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)),
              template_app (template_hole 4, template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 6, template_var 4),
                   template_var 3),
                 template_app (template_hole 4, template_var 1))
               )],
          template_implication
           ([template_predicate (template_app (template_hole 3, t_empty))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Termination.terminates_sequence_app",
     "[| ?\<Gamma>\<turnstile>sequence Seq ?xs \<down> Normal ?s;
         ALL s'.
            ?\<Gamma>\<turnstile> \<langle>sequence Seq
      ?xs,Normal ?s\<rangle> \<Rightarrow> s' -->
            ?\<Gamma>\<turnstile>sequence Seq ?ys \<down> s' |]
      ==> ?\<Gamma>\<turnstile>sequence Seq (?xs @ ?ys) \<down> Normal ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 3),
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 2)),
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, template_var 3),
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0))),
             template_app (template_hole 4, template_var 1))
           ))),
    ("Termination.terminates_Normal_elim_cases",
     "[| ?\<Gamma>\<turnstile>Call ?p \<down> Normal ?s;
         !!bdy.
            [| ?\<Gamma> ?p = Some bdy;
               ?\<Gamma>\<turnstile>bdy \<down> Normal ?s |]
            ==> ?P;
         ?\<Gamma> ?p = None ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_app (template_hole 5, template_var 2)),
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_implication
         ([template_equation
            (template_app (template_var 3, template_var 2),
             template_hole 0)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Termination.terminates_block",
     "[| ?\<Gamma>\<turnstile>?bdy \<down> Normal (?init ?s);
         ALL t.
            ?\<Gamma>\<turnstile> \<langle>?bdy,Normal
           (?init ?s)\<rangle> \<Rightarrow> Normal t -->
            ?\<Gamma>\<turnstile>?c ?s t \<down> Normal (?return ?s t) |]
      ==> ?\<Gamma>\<turnstile>block ?init ?bdy ?return
                                ?c \<down> Normal ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 5),
                template_var 4),
              template_app
               (template_hole 4,
                template_app (template_var 3, template_var 2)))
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 5),
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 4),
                   template_var 0),
                 template_var 1)),
             template_app (template_hole 4, template_var 2))
           ))),
    ("Termination.terminates_while_lemma",
     "[| ?\<Gamma>\<turnstile>?w \<down> ?fk; ?fk = Normal (?f ?k);
         ?w = While ?b ?c;
         ALL i.
            ?\<Gamma>\<turnstile> \<langle>?c,Normal
         (?f i)\<rangle> \<Rightarrow> Normal (?f (Suc i)) |]
      ==> EX i. ?f i ~: ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_equation
         (template_var 4,
          template_app
           (template_hole 8,
            template_app (template_var 3, template_var 2))),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 6, template_var 1),
            template_var 0)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Termination.terminates_Normal_elim_cases",
     "[| ?\<Gamma>\<turnstile>Cond ?b ?c1.0 ?c2.0 \<down> Normal ?s;
         [| ?s : ?b; ?\<Gamma>\<turnstile>?c1.0 \<down> Normal ?s |] ==> ?P;
         [| ?s ~: ?b; ?\<Gamma>\<turnstile>?c2.0 \<down> Normal ?s |]
         ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 5),
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_app (template_hole 2, template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 4)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_app (template_hole 4, template_var 5),
                     template_var 3),
                   template_app (template_hole 2, template_var 1))
                 )],
            template_predicate (template_var 0))),
        template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 4)
                   )
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_app (template_hole 4, template_var 5),
                     template_var 2),
                   template_app (template_hole 2, template_var 1))
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Termination.terminates_sequence_appE",
     "[| ?\<Gamma>\<turnstile>sequence Seq (?xs @ ?ys) \<down> Normal ?s;
         [| ?\<Gamma>\<turnstile>sequence Seq ?xs \<down> Normal ?s;
            ALL s'.
               ?\<Gamma>\<turnstile> \<langle>sequence Seq
         ?xs,Normal ?s\<rangle> \<Rightarrow> s' -->
               ?\<Gamma>\<turnstile>sequence Seq ?ys \<down> s' |]
         ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 4),
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 2))),
              template_app (template_hole 3, template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 7, template_var 4),
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_var 3)),
                 template_app (template_hole 3, template_var 1))
               )],
          template_implication
           ([template_predicate (template_app (template_hole 2, t_empty))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Termination.terminates_block_elim",
     "[| ?\<Gamma>\<turnstile>block ?init ?bdy ?return ?c \<down> Normal ?s;
         [| ?\<Gamma>\<turnstile>?bdy \<down> Normal (?init ?s);
            ALL t.
               ?\<Gamma>\<turnstile> \<langle>?bdy,Normal
              (?init ?s)\<rangle> \<Rightarrow> Normal t -->
               ?\<Gamma>\<turnstile>?c ?s t \<down> Normal (?return ?s t) |]
         ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 6),
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 4, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_app (template_hole 3, template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 5, template_var 6),
                   template_var 4),
                 template_app
                  (template_hole 3,
                   template_app (template_var 5, template_var 1)))
               )],
          template_implication
           ([template_predicate (template_app (template_hole 2, t_empty))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Termination.terminates_call",
     "[| ?\<Gamma> ?p = Some ?bdy;
         ?\<Gamma>\<turnstile>?bdy \<down> Normal (?init ?s);
         ALL t.
            ?\<Gamma>\<turnstile> \<langle>?bdy,Normal
           (?init ?s)\<rangle> \<Rightarrow> Normal t -->
            ?\<Gamma>\<turnstile>?c ?s t \<down> Normal (?return ?s t) |]
      ==> ?\<Gamma>\<turnstile>call ?init ?p ?return ?c \<down> Normal ?s",
     template_implication
      ([template_equation
         (template_app (template_var 6, template_var 5),
          template_app (template_hole 6, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 6),
                template_var 4),
              template_app
               (template_hole 4,
                template_app (template_var 3, template_var 2)))
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 6),
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 5),
                   template_var 0),
                 template_var 1)),
             template_app (template_hole 4, template_var 2))
           ))),
    ("Termination.terminates_elim_cases",
     "[| ?\<Gamma>\<turnstile>Skip \<down> ?s; !!s. ?s = Normal s ==> ?P;
         !!f. ?s = Fault f ==> ?P; ?s = Stuck ==> ?P;
         !!s. ?s = Abrupt s ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 2),
                template_hole 7),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_implication
         ([template_equation (template_var 1, template_hole 1)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("Termination.terminates_elim_cases",
     "[| ?\<Gamma>\<turnstile>Throw \<down> ?s; !!f. ?s = Fault f ==> ?P;
         ?s = Stuck ==> ?P; !!s. ?s = Normal s ==> ?P;
         !!s. ?s = Abrupt s ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 2),
                template_hole 7),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_implication
         ([template_equation (template_var 1, template_hole 3)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Termination.terminates_elim_cases",
     "[| ?\<Gamma>\<turnstile>Basic ?f \<down> ?s;
         !!s. ?s = Normal s ==> ?P; !!f. ?s = Fault f ==> ?P;
         ?s = Stuck ==> ?P; !!s. ?s = Abrupt s ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 3),
                template_app (template_hole 7, template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_implication
         ([template_equation (template_var 1, template_hole 1)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("Termination.terminates_elim_cases",
     "[| ?\<Gamma>\<turnstile>Spec ?r \<down> ?s; !!s. ?s = Normal s ==> ?P;
         !!f. ?s = Fault f ==> ?P; ?s = Stuck ==> ?P;
         !!s. ?s = Abrupt s ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 3),
                template_app (template_hole 7, template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_implication
         ([template_equation (template_var 1, template_hole 1)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("Termination.terminates_Normal_elim_cases",
     "[| ?\<Gamma>\<turnstile>While ?b ?c \<down> Normal ?s;
         [| ?s : ?b; ?\<Gamma>\<turnstile>?c \<down> Normal ?s;
            ALL s'.
               ?\<Gamma>\<turnstile> \<langle>?c,Normal
            ?s\<rangle> \<Rightarrow> s' -->
               ?\<Gamma>\<turnstile>While ?b ?c \<down> s' |]
         ==> ?P;
         ?s ~: ?b ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 4),
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2)),
              template_app (template_hole 5, template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 3)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_app (template_hole 7, template_var 4),
                     template_var 2),
                   template_app (template_hole 5, template_var 1))
                 )],
            template_implication
             ([template_predicate
                (template_app (template_hole 3, t_empty))],
              template_predicate (template_var 0)))),
        template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_var 3)
                   )
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Termination.terminates_elim_cases",
     "[| ?\<Gamma>\<turnstile>DynCom ?c \<down> ?s;
         !!f. ?s = Fault f ==> ?P; ?s = Stuck ==> ?P;
         !!s. [| ?s = Normal s;
                 ?\<Gamma>\<turnstile>?c s \<down> Normal s |]
              ==> ?P;
         !!s. ?s = Abrupt s ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 3),
                template_app (template_hole 7, template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_implication
         ([template_equation (template_var 1, template_hole 3)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Termination.terminates_call_elim",
     "[| ?\<Gamma>\<turnstile>call ?init ?p ?return ?c \<down> Normal ?s;
         !!bdy.
            [| ?\<Gamma> ?p = Some bdy;
               ?\<Gamma>\<turnstile>bdy \<down> Normal (?init ?s);
               ALL t.
                  ?\<Gamma>\<turnstile> \<langle>bdy,Normal
                (?init ?s)\<rangle> \<Rightarrow> Normal t -->
                  ?\<Gamma>\<turnstile>?c ?s
  t \<down> Normal (?return ?s t) |]
            ==> ?P;
         ?\<Gamma> ?p = None ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 6),
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 8, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_app (template_hole 7, template_var 1))
            ),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_implication
         ([template_equation
            (template_app (template_var 6, template_var 4),
             template_hole 0)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Termination.terminates_elim_cases",
     "[| ?\<Gamma>\<turnstile>Seq ?c1.0 ?c2.0 \<down> ?s;
         !!f. ?s = Fault f ==> ?P;
         !!s. [| ?s = Normal s; ?\<Gamma>\<turnstile>?c1.0 \<down> Normal s;
                 ALL s'.
                    ?\<Gamma>\<turnstile> \<langle>?c1.0,Normal
                    s\<rangle> \<Rightarrow> s' -->
                    ?\<Gamma>\<turnstile>?c2.0 \<down> s' |]
              ==> ?P;
         ?s = Stuck ==> ?P; !!s. ?s = Abrupt s ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 4),
                template_app
                 (template_app (template_hole 10, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_implication
         ([template_equation (template_var 1, template_hole 1)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("Termination.terminates_elim_cases",
     "[| ?\<Gamma>\<turnstile>Catch ?c1.0 ?c2.0 \<down> ?s;
         !!f. ?s = Fault f ==> ?P; ?s = Stuck ==> ?P;
         !!s. ?s = Abrupt s ==> ?P;
         !!s. [| ?s = Normal s; ?\<Gamma>\<turnstile>?c1.0 \<down> Normal s;
                 ALL s'.
                    ?\<Gamma>\<turnstile> \<langle>?c1.0,Normal
                    s\<rangle> \<Rightarrow> Abrupt s' -->
                    ?\<Gamma>\<turnstile>?c2.0 \<down> Normal s' |]
              ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 4),
                template_app
                 (template_app (template_hole 10, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_implication
         ([template_equation (template_var 1, template_hole 6)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Termination.terminates_elim_cases",
     "[| ?\<Gamma>\<turnstile>Guard ?f ?g ?c \<down> ?s;
         !!s. [| ?s = Normal s; s : ?g;
                 ?\<Gamma>\<turnstile>?c \<down> Normal s |]
              ==> ?P;
         !!s. [| ?s = Normal s; s ~: ?g |] ==> ?P; !!f. ?s = Fault f ==> ?P;
         ?s = Stuck ==> ?P; !!s. ?s = Abrupt s ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 5),
                template_app
                 (template_app
                   (template_app (template_hole 9, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_implication
         ([template_equation (template_var 1, template_hole 1)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0))),
    ("Termination.terminates_elim_cases",
     "[| ?\<Gamma>\<turnstile>Call ?p \<down> ?s; !!f. ?s = Fault f ==> ?P;
         !!bdy s.
            [| ?s = Normal s; ?\<Gamma> ?p = Some bdy;
               ?\<Gamma>\<turnstile>bdy \<down> Normal s |]
            ==> ?P;
         !!s. [| ?s = Normal s; ?\<Gamma> ?p = None |] ==> ?P;
         ?s = Stuck ==> ?P; !!s. ?s = Abrupt s ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 12, template_var 3),
                template_app (template_hole 11, template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_implication
         ([template_equation (template_var 1, template_hole 1)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("Termination.terminates_elim_cases",
     "[| ?\<Gamma>\<turnstile>Cond ?b ?c1.0 ?c2.0 \<down> ?s;
         !!f. ?s = Fault f ==> ?P;
         !!s. [| ?s = Normal s; s : ?b;
                 ?\<Gamma>\<turnstile>?c1.0 \<down> Normal s |]
              ==> ?P;
         !!s. [| ?s = Normal s; s ~: ?b;
                 ?\<Gamma>\<turnstile>?c2.0 \<down> Normal s |]
              ==> ?P;
         ?s = Stuck ==> ?P; !!s. ?s = Abrupt s ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 5),
                template_app
                 (template_app
                   (template_app (template_hole 9, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_implication
         ([template_equation (template_var 1, template_hole 1)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Termination.terminates_elim_cases",
     "[| ?\<Gamma>\<turnstile>While ?b ?c \<down> ?s;
         !!f. ?s = Fault f ==> ?P;
         !!s. [| ?s = Normal s; s : ?b;
                 ?\<Gamma>\<turnstile>?c \<down> Normal s;
                 ALL s'.
                    ?\<Gamma>\<turnstile> \<langle>?c,Normal
                 s\<rangle> \<Rightarrow> s' -->
                    ?\<Gamma>\<turnstile>While ?b ?c \<down> s' |]
              ==> ?P;
         !!s. [| ?s = Normal s; s ~: ?b |] ==> ?P; ?s = Stuck ==> ?P;
         !!s. ?s = Abrupt s ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, template_var 4),
                template_app
                 (template_app (template_hole 12, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_implication
         ([template_equation (template_var 1, template_hole 1)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.TerminationTemplates"
### 0.429s elapsed time, 0.688s cpu time, 0.160s GC time
val it = (): unit
