Loading theory "Draft.Simpl_Heap" (required by "Draft.HeapListTemplates" via "Draft.HeapList")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.HeapListTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.HeapListTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.HeapListTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Simpl_Heap"
### 0.121s elapsed time, 0.496s cpu time, 0.045s GC time
Loading theory "Draft.HeapList" (required by "Draft.HeapListTemplates")
### theory "HOL-Library.Function_Algebras"
### 0.142s elapsed time, 0.580s cpu time, 0.045s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.HeapListTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  Path :: "ref => (ref => ref) => ref => ref list => bool"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.213s elapsed time, 0.857s cpu time, 0.045s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.HeapListTemplates" via "Draft.ExtrEqs")
### theory "Draft.HeapList"
### 0.186s elapsed time, 0.723s cpu time, 0.099s GC time
### theory "HOL-Library.Nat_Bijection"
### 0.327s elapsed time, 1.276s cpu time, 0.144s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.HeapListTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.764s elapsed time, 2.399s cpu time, 0.331s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.965s elapsed time, 2.812s cpu time, 0.737s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.853s elapsed time, 4.284s cpu time, 0.905s GC time
Loading theory "Draft.Templates" (required by "Draft.HeapListTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.050s elapsed time, 0.068s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.HeapListTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.457s elapsed time, 0.506s cpu time, 0.063s GC time
Loading theory "Draft.HeapListTemplates"
val templateLemmas =
   [("HeapList.List_Null", "List Null ?h ?ps = (?ps = [])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_hole 2),
                template_var 1),
              template_var 0)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("HeapList.List_empty", "List ?p ?h [] = (?p = Null)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0),
              template_hole 2)
            )],
       template_equation (template_var 1, template_hole 0))),
    ("HeapList.List_distinct", "List ?p ?h ?ps ==> distinct ?ps",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("HeapList.list_distinct", "islist ?p ?h ==> distinct (list ?p ?h)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("HeapList.List_islist", "List ?p ?h ?ps ==> islist ?p ?h",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 1)
           ))),
    ("HeapList.conj_impl_simp", "(?P & ?Q --> ?K) = (?P --> ?Q --> ?K)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("HeapList.Null_notin_List", "List ?p ?h ?ps ==> Null ~: set ?ps",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_app (template_hole 0, template_var 0))
               )
           ))),
    ("HeapList.List_list", "List ?p ?h ?ps ==> list ?p ?h = ?ps",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("HeapList.Null_notin_list",
     "islist ?p ?h ==> Null ~: set (list ?p ?h)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)))
               )
           ))),
    ("HeapList.List_unique1", "List ?p ?h ?as ==> EX! as. List ?p ?h as",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("HeapList.List_hd_not_in_tl", "List (?h ?p) ?h ?ps ==> ?p ~: set ?ps",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app (template_var 2, template_var 1)),
                template_var 2),
              template_var 0)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app (template_hole 0, template_var 0))
               )
           ))),
    ("HeapList.Null_notin_Path", "Path ?p ?f ?q ?ps ==> Null ~: set ?ps",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_app (template_hole 0, template_var 0))
               )
           ))),
    ("HeapList.Path_Null_iff",
     "Path Null ?h ?y ?xs = (?xs = [] & ?y = Null)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_hole 4))
           ))),
    ("HeapList.List_conv_islist_list",
     "List ?p ?h ?ps = (islist ?p ?h & ?ps = list ?p ?h)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)))
           ))),
    ("HeapList.List_upd_same_lemma",
     "?p ~= Null ==> ~ List ?p (?h(?p := ?p)) ?ps",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 2))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 1),
                       template_var 2),
                     template_var 2)),
                 template_var 0)
               )
           ))),
    ("HeapList.List_upd_same",
     "List ?p (?h(?p := ?p)) ?ps = (?p = Null & ?ps = [])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_app
                 (template_app
                   (template_app (template_hole 5, template_var 1),
                    template_var 2),
                  template_var 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_hole 2)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("HeapList.List_unique",
     "[| List ?p ?h ?as; List ?p ?h ?bs |] ==> ?as = ?bs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("HeapList.List_unique_all_impl_simp",
     "List ?p ?h ?ps ==> (ALL ps. List ?p ?h ps --> ?P ps) = ?P ?ps",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app (template_hole 1, t_empty),
         template_app (template_var 0, template_var 1)))),
    ("HeapList.List_unique_ex_conj_simp",
     "List ?p ?h ?ps ==> (EX ps. List ?p ?h ps & ?P ps) = ?P ?ps",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app (template_hole 1, t_empty),
         template_app (template_var 0, template_var 1)))),
    ("HeapList.List_app",
     "List ?p ?h (?as @ ?bs) = (EX y. Path ?p ?h y ?as & List y ?h ?bs)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("HeapList.notin_List_update",
     "?q ~: set ?ps ==> List ?p (?h(?q := ?y)) ?ps = List ?p ?h ?ps",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_app (template_hole 3, template_var 3))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 4),
               template_var 0)),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 3)))),
    ("HeapList.heap_eq_List_eq",
     "ALL x:set ?ps. ?h x = ?g x ==> List ?p ?h ?ps = List ?p ?g ?ps",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 3)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1),
           template_var 3)))),
    ("HeapList.islist_upd",
     "[| islist ?p ?h; ?y ~: set (list ?p ?h) |]
      ==> islist ?p (?h(?y := ?q))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_app
                   (template_hole 2,
                    template_app
                     (template_app (template_hole 1, template_var 3),
                      template_var 2)))
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("HeapList.List_updateI",
     "[| List ?p ?h ?ps; ?q ~: set ?ps |] ==> List ?p (?h(?q := ?y)) ?ps",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_app (template_hole 1, template_var 2))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 4),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("HeapList.List_cons",
     "List ?p ?h (?a # ?ps) = (?p = ?a & ?p ~= Null & List (?h ?p) ?h ?ps)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_hole 0))),
               template_app
                (template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_var 2, template_var 3)),
                   template_var 2),
                 template_var 0)))
           ))),
    ("HeapList.Path_append",
     "Path ?p ?f ?q (?as @ ?bs) =
      (EX y. Path ?p ?f y ?as & Path y ?f ?q ?bs)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app (template_hole 1, t_empty))),
    ("HeapList.notin_Path_update",
     "?u ~: set ?ps ==> Path ?p (?f(?u := ?v)) ?q ?ps = Path ?p ?f ?q ?ps",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 5),
                  template_app (template_hole 3, template_var 4))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 5),
                 template_var 1)),
             template_var 0),
           template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 0),
           template_var 4)))),
    ("HeapList.List_update_new",
     "set ?ps <= set ?alloc ==>
      List ?p (?h(new (set ?alloc) := ?x)) ?ps = List ?p ?h ?ps",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_var 4),
          template_app (template_hole 4, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_app
                  (template_hole 0,
                   template_app (template_hole 4, template_var 3))),
               template_var 0)),
           template_var 4),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 4)))),
    ("HeapList.heap_eq_ListI1",
     "[| List ?p ?h ?ps; ALL x:set ?ps. ?g x = ?h x |] ==> List ?p ?g ?ps",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 0),
             template_var 1)
           ))),
    ("HeapList.heap_eq_ListI",
     "[| List ?p ?h ?ps; ALL x:set ?ps. ?h x = ?g x |] ==> List ?p ?g ?ps",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 0),
             template_var 1)
           ))),
    ("HeapList.list_Ref_conv",
     "[| islist (?h ?p) ?h; ?p ~= Null |]
      ==> list ?p ?h = ?p # list (?h ?p) ?h",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_var 1, template_var 0)),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_var 1, template_var 0)),
             template_var 1))))),
    ("HeapList.notin_Path_updateI",
     "[| Path ?p ?h ?q ?ps; ?r ~: set ?ps |]
      ==> Path ?p (?h(?r := ?y)) ?q ?ps",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_app (template_hole 1, template_var 2))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 5),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 1),
                   template_var 0)),
               template_var 3),
             template_var 2)
           ))),
    ("HeapList.Path_update_new",
     "set ?ps <= set ?alloc ==>
      Path ?p (?f(new (set ?alloc) := ?x)) ?q ?ps = Path ?p ?f ?q ?ps",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_var 5),
          template_app (template_hole 4, template_var 4))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_app
                    (template_hole 0,
                     template_app (template_hole 4, template_var 4))),
                 template_var 1)),
             template_var 0),
           template_var 5),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 0),
           template_var 5)))),
    ("HeapList.List_not_Null",
     "?p ~= Null ==>
      List ?p ?h ?as = (EX ps. ?as = ?p # ps & List (?h ?p) ?h ps)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 6))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_var 0),
         template_app (template_hole 3, t_empty)))),
    ("HeapList.list_upd_conv",
     "[| islist ?p ?h; ?y ~: set (list ?p ?h) |]
      ==> list ?p (?h(?y := ?q)) = list ?p ?h",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 3),
                      template_var 2)))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 3),
           template_var 2)))),
    ("HeapList.Path_snoc",
     "[| Path ?p (?f(?a := ?q)) ?a ?as; ?a ~= Null |]
      ==> Path ?p (?f(?a := ?q)) ?q (?as @ [?a])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 4),
                  template_app
                   (template_app
                     (template_app (template_hole 6, template_var 3),
                      template_var 2),
                    template_var 1)),
                template_var 2),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 2, template_hole 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 7, template_var 4),
                 template_app
                  (template_app
                    (template_app (template_hole 6, template_var 3),
                     template_var 2),
                   template_var 1)),
               template_var 1),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_hole 0)))
           ))),
    ("HeapList.Path_not_Null_iff",
     "?p ~= Null ==>
      Path ?p ?h ?q ?as =
      (?as = [] & ?q = ?p |
       (EX ps. ?as = ?p # ps & Path (?h ?p) ?h ?q ps))",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 8))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_hole 2)),
                   template_app
                    (template_app (template_hole 9, template_var 1),
                     template_var 3))),
               template_app (template_hole 1, t_empty))
             )))),
    ("HeapList.Path_upd_same",
     "Path ?p (?f(?p := ?p)) ?q ?qs =
      (?p = Null & ?q = Null & ?qs = [] |
       ?p ~= Null & ?q = ?p & (ALL x:set ?qs. x = ?p))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 3),
                  template_app
                   (template_app
                     (template_app (template_hole 9, template_var 2),
                      template_var 3),
                    template_var 3)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 3),
                     template_hole 5)),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 6, template_var 1),
                       template_hole 5)),
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_hole 3)))),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 6, template_var 3),
                     template_hole 5))),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 1),
                     template_var 3)),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 0)),
                   t_empty))))
           )))]:
   (string * thm * template) list
### theory "Draft.HeapListTemplates"
### 0.268s elapsed time, 0.372s cpu time, 0.000s GC time
val it = (): unit
