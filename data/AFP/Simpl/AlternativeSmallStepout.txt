Loading theory "Draft.Language" (required by "Draft.AlternativeSmallStepTemplates" via "Draft.AlternativeSmallStep" via "Draft.HoareTotalDef" via "Draft.HoarePartialDef" via "Draft.Semantic")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.AlternativeSmallStepTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.AlternativeSmallStepTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.AlternativeSmallStepTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.132s elapsed time, 0.565s cpu time, 0.000s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.AlternativeSmallStepTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.198s elapsed time, 0.813s cpu time, 0.105s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.AlternativeSmallStepTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.296s elapsed time, 1.197s cpu time, 0.105s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.AlternativeSmallStepTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### theory "HOL-Library.BigO"
### 0.881s elapsed time, 3.365s cpu time, 0.764s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.987s elapsed time, 3.619s cpu time, 0.872s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.882s elapsed time, 5.828s cpu time, 1.199s GC time
Loading theory "Draft.Templates" (required by "Draft.AlternativeSmallStepTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.050s elapsed time, 0.102s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.AlternativeSmallStepTemplates")
consts
  switch ::
    "('s => 'v) => ('v set * ('s, 'p, 'f) com) list => ('s, 'p, 'f) com"
consts
  guards :: "('f * 's set) list => ('s, 'p, 'f) com => ('s, 'p, 'f) com"
consts
  flatten :: "('s, 'p, 'f) com => ('s, 'p, 'f) com list"
consts
  sequence ::
    "(('s, 'p, 'f) com => ('s, 'p, 'f) com => ('s, 'p, 'f) com)
     => ('s, 'p, 'f) com list => ('s, 'p, 'f) com"
consts
  normalize :: "('s, 'p, 'f) com => ('s, 'p, 'f) com"
consts
  strip_guards :: "'f set => ('s, 'p, 'f) com => ('s, 'p, 'f) com"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.520s elapsed time, 1.103s cpu time, 0.137s GC time
consts
  mark_guards :: "'f => ('s, 'p, 'g) com => ('s, 'p, 'f) com"
### No equation for constructor "Skip"
### No equation for constructor "Basic"
### No equation for constructor "Spec"
### No equation for constructor "Seq"
### No equation for constructor "Cond"
### No equation for constructor "While"
### No equation for constructor "Call"
### No equation for constructor "DynCom"
### No equation for constructor "Throw"
### No equation for constructor "Catch"
consts
  dest_Guard :: "('s, 'p, 'f) com => 'f * 's set * ('s, 'p, 'f) com"
consts
  merge_guards :: "('s, 'p, 'f) com => ('s, 'p, 'f) com"
consts
  noguards :: "('s, 'p, 'f) com => bool"
consts
  nothrows :: "('s, 'p, 'f) com => bool"
Proofs for inductive predicate(s) "com_relp"
  Proving monotonicity ...
### Legacy feature! Old 'recdef' command -- use 'fun' or 'function' instead
Defining recursive function "Language.inter_guards" ...
Proving induction theorem ...
Postprocessing ...
Simplifying nested TCs ...
... Postprocessing finished
Proving unsplit equation...
th:
(Skip \<inter>\<^sub>g Skip) = None ==> (Skip \<inter>\<^sub>g Skip) = None
split ths:
(Skip \<inter>\<^sub>g Basic ?bc) = None
(Skip \<inter>\<^sub>g Spec ?bd) = None
(Skip \<inter>\<^sub>g Seq ?be ?bf) = None
(Skip \<inter>\<^sub>g Cond ?bg ?bh ?bi) = None
(Skip \<inter>\<^sub>g While ?bj ?bk) = None
(Skip \<inter>\<^sub>g Call ?bl) = None
(Skip \<inter>\<^sub>g DynCom ?bm) = None
(Skip \<inter>\<^sub>g Guard ?bn ?bo ?bp) = None
(Skip \<inter>\<^sub>g Throw) = None
(Skip \<inter>\<^sub>g Catch ?bq ?br) = None
(Basic ?w \<inter>\<^sub>g Skip) = None
(Basic ?w \<inter>\<^sub>g Spec ?cj) = None
(Basic ?w \<inter>\<^sub>g Seq ?ck ?cl) = None
(Basic ?w \<inter>\<^sub>g Cond ?cm ?cn ?co) = None
(Basic ?w \<inter>\<^sub>g While ?cp ?cq) = None
(Basic ?w \<inter>\<^sub>g Call ?cr) = None
(Basic ?w \<inter>\<^sub>g DynCom ?cs) = None
(Basic ?w \<inter>\<^sub>g Guard ?ct ?cu ?cv) = None
(Basic ?w \<inter>\<^sub>g Throw) = None
(Basic ?w \<inter>\<^sub>g Catch ?cw ?cx) = None
(Spec ?x \<inter>\<^sub>g Skip) = None
(Spec ?x \<inter>\<^sub>g Basic ?do) = None
(Spec ?x \<inter>\<^sub>g Seq ?dq ?dr) = None
(Spec ?x \<inter>\<^sub>g Cond ?ds ?dt ?du) = None
(Spec ?x \<inter>\<^sub>g While ?dv ?dw) = None
(Spec ?x \<inter>\<^sub>g Call ?dx) = None
(Spec ?x \<inter>\<^sub>g DynCom ?dy) = None
(Spec ?x \<inter>\<^sub>g Guard ?dz ?ea ?eb) = None
(Spec ?x \<inter>\<^sub>g Throw) = None
(Spec ?x \<inter>\<^sub>g Catch ?ec ?ed) = None
(Seq ?y ?z \<inter>\<^sub>g Skip) = None
(Seq ?y ?z \<inter>\<^sub>g Basic ?ev) = None
(Seq ?y ?z \<inter>\<^sub>g Spec ?ew) = None
(Seq ?y ?z \<inter>\<^sub>g Cond ?ez ?fa ?fb) = None
(Seq ?y ?z \<inter>\<^sub>g While ?fc ?fd) = None
(Seq ?y ?z \<inter>\<^sub>g Call ?fe) = None
(Seq ?y ?z \<inter>\<^sub>g DynCom ?ff) = None
(Seq ?y ?z \<inter>\<^sub>g Guard ?fg ?fh ?fi) = None
(Seq ?y ?z \<inter>\<^sub>g Throw) = None
(Seq ?y ?z \<inter>\<^sub>g Catch ?fj ?fk) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Skip) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Basic ?gb) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Spec ?gc) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Seq ?gd ?ge) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g While ?gi ?gj) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Call ?gk) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g DynCom ?gl) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Guard ?gm ?gn ?go) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Throw) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Catch ?gp ?gq) = None
(While ?ad ?ae \<inter>\<^sub>g Skip) = None
(While ?ad ?ae \<inter>\<^sub>g Basic ?hh) = None
(While ?ad ?ae \<inter>\<^sub>g Spec ?hi) = None
(While ?ad ?ae \<inter>\<^sub>g Seq ?hj ?hk) = None
(While ?ad ?ae \<inter>\<^sub>g Cond ?hl ?hm ?hn) = None
(While ?ad ?ae \<inter>\<^sub>g Call ?hq) = None
(While ?ad ?ae \<inter>\<^sub>g DynCom ?hr) = None
(While ?ad ?ae \<inter>\<^sub>g Guard ?hs ?ht ?hu) = None
(While ?ad ?ae \<inter>\<^sub>g Throw) = None
(While ?ad ?ae \<inter>\<^sub>g Catch ?hv ?hw) = None
(Call ?af \<inter>\<^sub>g Skip) = None
(Call ?af \<inter>\<^sub>g Basic ?in) = None
(Call ?af \<inter>\<^sub>g Spec ?io) = None
(Call ?af \<inter>\<^sub>g Seq ?ip ?iq) = None
(Call ?af \<inter>\<^sub>g Cond ?ir ?is ?it) = None
(Call ?af \<inter>\<^sub>g While ?iu ?iv) = None
(Call ?af \<inter>\<^sub>g DynCom ?ix) = None
(Call ?af \<inter>\<^sub>g Guard ?iy ?iz ?ja) = None
(Call ?af \<inter>\<^sub>g Throw) = None
(Call ?af \<inter>\<^sub>g Catch ?jb ?jc) = None
(DynCom ?ag \<inter>\<^sub>g Skip) = None
(DynCom ?ag \<inter>\<^sub>g Basic ?jt) = None
(DynCom ?ag \<inter>\<^sub>g Spec ?ju) = None
(DynCom ?ag \<inter>\<^sub>g Seq ?jv ?jw) = None
(DynCom ?ag \<inter>\<^sub>g Cond ?jx ?jy ?jz) = None
(DynCom ?ag \<inter>\<^sub>g While ?ka ?kb) = None
(DynCom ?ag \<inter>\<^sub>g Call ?kc) = None
(DynCom ?ag \<inter>\<^sub>g Guard ?ke ?kf ?kg) = None
(DynCom ?ag \<inter>\<^sub>g Throw) = None
(DynCom ?ag \<inter>\<^sub>g Catch ?kh ?ki) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Skip) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Basic ?kz) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Spec ?la) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Seq ?lb ?lc) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Cond ?ld ?le ?lf) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g While ?lg ?lh) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Call ?li) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g DynCom ?lj) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Throw) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Catch ?ln ?lo) = None
(Throw \<inter>\<^sub>g Skip) = None
(Throw \<inter>\<^sub>g Basic ?mf) = None
(Throw \<inter>\<^sub>g Spec ?mg) = None
(Throw \<inter>\<^sub>g Seq ?mh ?mi) = None
(Throw \<inter>\<^sub>g Cond ?mj ?mk ?ml) = None
(Throw \<inter>\<^sub>g While ?mm ?mn) = None
(Throw \<inter>\<^sub>g Call ?mo) = None
(Throw \<inter>\<^sub>g DynCom ?mp) = None
(Throw \<inter>\<^sub>g Guard ?mq ?mr ?ms) = None
(Throw \<inter>\<^sub>g Catch ?mt ?mu) = None
(Catch ?ak ?al \<inter>\<^sub>g Skip) = None
(Catch ?ak ?al \<inter>\<^sub>g Basic ?nl) = None
(Catch ?ak ?al \<inter>\<^sub>g Spec ?nm) = None
(Catch ?ak ?al \<inter>\<^sub>g Seq ?nn ?no) = None
(Catch ?ak ?al \<inter>\<^sub>g Cond ?np ?nq ?nr) = None
(Catch ?ak ?al \<inter>\<^sub>g While ?ns ?nt) = None
(Catch ?ak ?al \<inter>\<^sub>g Call ?nu) = None
(Catch ?ak ?al \<inter>\<^sub>g DynCom ?nv) = None
(Catch ?ak ?al \<inter>\<^sub>g Guard ?nw ?nx ?ny) = None
(Catch ?ak ?al \<inter>\<^sub>g Throw) = None
--
### recdef (solve_eq): splitto: cannot find variable to split on
Proofs for inductive predicate(s) "subseteq_guards"
  Proving monotonicity ...
### theory "Draft.Language"
### 4.088s elapsed time, 9.144s cpu time, 1.404s GC time
Loading theory "Draft.Semantic" (required by "Draft.AlternativeSmallStepTemplates" via "Draft.AlternativeSmallStep" via "Draft.HoareTotalDef" via "Draft.HoarePartialDef")
Proofs for inductive predicate(s) "exec"
  Proving monotonicity ...
Proofs for inductive predicate(s) "execn"
  Proving monotonicity ...
### theory "Draft.Semantic"
### 2.354s elapsed time, 3.349s cpu time, 1.127s GC time
Loading theory "Draft.HoarePartialDef" (required by "Draft.AlternativeSmallStepTemplates" via "Draft.AlternativeSmallStep" via "Draft.HoareTotalDef")
Loading theory "Draft.Termination" (required by "Draft.AlternativeSmallStepTemplates" via "Draft.AlternativeSmallStep" via "Draft.HoareTotalDef")
Proofs for inductive predicate(s) "terminates"
### Ambiguous input (line 84 of "$AFP/Simpl/HoarePartialDef.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" n)
###       ("\<^const>HoarePartialDef.cnvalid" ("_position" \<Gamma>)
###         ("_position" \<Theta>) ("_position" n) ("_position" F)
###         ("_position" P) ("_position" c) ("_position" Q) ("_position" A))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HoarePartialDef.cvalid" ("_position" \<Gamma>)
###       ("_position" \<Theta>) ("_position" F) ("_position" P) ("_position" c)
###       ("_position" Q) ("_position" A))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_tuple"
###       ("\<^const>HOL.All_binder" ("_position" n) ("_position" \<Gamma>))
###       ("_tuple_arg"
###         ("\<^const>HoarePartialDef.nvalid" ("_position" \<Theta>)
###           ("_position" n) ("_position" F) ("_position" P) ("_position" c)
###           ("_position" Q) ("_position" A)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HoarePartialDef.cvalid" ("_position" \<Gamma>)
###       ("_position" \<Theta>) ("_position" F) ("_position" P) ("_position" c)
###       ("_position" Q) ("_position" A))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
  Proving monotonicity ...
Proofs for inductive predicate(s) "hoarep"
  Proving monotonicity ...
### theory "Draft.HoarePartialDef"
### 0.373s elapsed time, 0.876s cpu time, 0.196s GC time
### theory "Draft.Termination"
### 0.579s elapsed time, 1.130s cpu time, 0.320s GC time
Loading theory "Draft.HoareTotalDef" (required by "Draft.AlternativeSmallStepTemplates" via "Draft.AlternativeSmallStep")
Proofs for inductive predicate(s) "hoaret"
  Proving monotonicity ...
### theory "Draft.HoareTotalDef"
### 0.737s elapsed time, 1.628s cpu time, 1.216s GC time
Loading theory "Draft.AlternativeSmallStep" (required by "Draft.AlternativeSmallStepTemplates")
Proofs for inductive predicate(s) "step"
  Proving monotonicity ...
val trancl_induct3 =
   "[| ?r^++ (?ax, ?ay, ?az) (?bx, ?by, ?bz);
       !!a aa b. ?r (?ax, ?ay, ?az) (a, aa, b) ==> ?P a aa b;
       !!a aa b ab ac ba.
          [| ?r^++ (?ax, ?ay, ?az) (a, aa, b); ?r (a, aa, b) (ab, ac, ba);
             ?P a aa b |]
          ==> ?P ab ac ba |]
    ==> ?P ?bx ?by ?bz":
   thm
val it = (): unit
Proofs for inductive predicate(s) "execs"
  Proving monotonicity ...
val converse_rtrancl_induct3 =
   "[| ?r^** (?cs, ?css, ?s) (?cs', ?css', ?t); ?P ?cs' ?css' ?t;
       !!a aa b ab ac ba.
          [| ?r (a, aa, b) (ab, ac, ba);
             ?r^** (ab, ac, ba) (?cs', ?css', ?t); ?P ab ac ba |]
          ==> ?P a aa b |]
    ==> ?P ?cs ?css ?s":
   thm
val it = (): unit
Proofs for inductive predicate(s) "terminatess"
  Proving monotonicity ...
val rtrancl_induct3 =
   "[| ?r^** (?ax, ?ay, ?az) (?bx, ?by, ?bz); ?P ?ax ?ay ?az;
       !!a aa b ab ac ba.
          [| ?r^** (?ax, ?ay, ?az) (a, aa, b); ?r (a, aa, b) (ab, ac, ba);
             ?P a aa b |]
          ==> ?P ab ac ba |]
    ==> ?P ?bx ?by ?bz":
   thm
val it = (): unit
locale AlternativeSmallStep.inf
  fixes
    CS ::
      "('s, 'p, 'f) com list *
       (('s, 'p, 'f) com list * ('s, 'p, 'f) com list) list *
       ('s, 'f) xstate
       => ('s, 'p, 'f) com list"
    and
    CSS ::
      "('s, 'p, 'f) com list *
       (('s, 'p, 'f) com list * ('s, 'p, 'f) com list) list *
       ('s, 'f) xstate
       => (('s, 'p, 'f) com list * ('s, 'p, 'f) com list) list"
    and
    S :: "('s, 'p, 'f) com list *
          (('s, 'p, 'f) com list * ('s, 'p, 'f) com list) list *
          ('s, 'f) xstate
          => ('s, 'f) xstate"
  defines "CS == fst"
    and "CSS == %c. fst (snd c)"
    and "S == %c. snd (snd c)"
consts
  seq :: "(nat => 'a list) => nat => 'a list"
### Ambiguous input (line 2968 of "$AFP/Simpl/AlternativeSmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>AlternativeSmallStep.terminatess" ("_position" \<Gamma>)
###       ("_position" cs) ("_position" css) ("_position" s))
###     ("\<^const>HOL.Not"
###       ("_applC" ("_position" inf)
###         ("_cargs" ("_position" \<Gamma>)
###           ("_cargs" ("_position" cs)
###             ("_cargs" ("_position" css) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>AlternativeSmallStep.terminatess" ("_position" \<Gamma>)
###     ("_position" cs) ("_position" css)
###     ("\<^const>HOL.eq" ("_position" s)
###       ("\<^const>HOL.Not"
###         ("_applC" ("_position" inf)
###           ("_cargs" ("_position" \<Gamma>)
###             ("_cargs" ("_position" cs)
###               ("_cargs" ("_position" css) ("_position" s)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.AlternativeSmallStep"
### 2.081s elapsed time, 3.757s cpu time, 1.808s GC time
Loading theory "Draft.AlternativeSmallStepTemplates"
val templateLemmas =
   [("AlternativeSmallStep.wf_termi_call_steps",
     "wf (termi_call_steps ?\<Gamma>)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("AlternativeSmallStep.terminatess_Stuck",
     "?\<Gamma>\<turnstile>?cs,?css \<Down> Stuck",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("AlternativeSmallStep.Basic_terminates",
     "?\<Gamma>\<turnstile>Basic ?f \<down> ?t",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 1)),
           template_var 0)
         )),
    ("AlternativeSmallStep.terminatess_Fault",
     "?\<Gamma>\<turnstile>?cs,?css \<Down> Fault ?f",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("AlternativeSmallStep.not_inf_Stuck",
     "~ AlternativeSmallStep.inf ?\<Gamma> ?cs ?css Stuck",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1),
                 template_var 0),
               template_hole 0)
             )
         )),
    ("AlternativeSmallStep.not_inf_Fault",
     "~ AlternativeSmallStep.inf ?\<Gamma> ?cs ?css (Fault ?m)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2),
                 template_var 1),
               template_app (template_hole 0, template_var 0))
             )
         )),
    ("AlternativeSmallStep.terminatess_iff_not_inf",
     "?\<Gamma>\<turnstile>?cs,?css \<Down> ?s =
      (~ AlternativeSmallStep.inf ?\<Gamma> ?cs ?css ?s)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("AlternativeSmallStep.terminates_iff_not_inf",
     "?\<Gamma>\<turnstile>?c \<down> ?s =
      (~ AlternativeSmallStep.inf ?\<Gamma> [?c] [] ?s)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1)),
             template_hole 0),
           template_var 0)))),
    ("AlternativeSmallStep.terminatess_impl_not_inf",
     "?\<Gamma>\<turnstile>?cs,?css \<Down> ?s ==>
      ~ AlternativeSmallStep.inf ?\<Gamma> ?cs ?css ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0)
               )
           ))),
    ("AlternativeSmallStep.not_inf_impl_terminatess",
     "~ AlternativeSmallStep.inf ?\<Gamma> ?cs ?css ?s ==>
      ?\<Gamma>\<turnstile>?cs,?css \<Down> ?s",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 3),
                      template_var 2),
                    template_var 1),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("AlternativeSmallStep.terminates_impl_not_inf",
     "?\<Gamma>\<turnstile>?c \<down> ?s ==>
      ~ AlternativeSmallStep.inf ?\<Gamma> [?c] [] ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 3, template_var 2),
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_hole 1)),
                   template_hole 0),
                 template_var 0)
               )
           ))),
    ("AlternativeSmallStep.not_inf_impl_terminates",
     "~ AlternativeSmallStep.inf ?\<Gamma> [?c] [] ?s ==>
      ?\<Gamma>\<turnstile>?c \<down> ?s",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 4, template_var 2),
                      template_app
                       (template_app (template_hole 3, template_var 1),
                        template_hole 2)),
                    template_hole 1),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("AlternativeSmallStep.Stuck_app_steps",
     "?\<Gamma>\<turnstile> (?cs @ ?xs, ?css, Stuck) \<rightarrow>\<^sup>*
                            (?xs, ?css, Stuck)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 3)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1)),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0))),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)))
         )),
    ("AlternativeSmallStep.execs_Stuck_end",
     "[| ?\<Gamma>\<turnstile> \<langle>?cs,?css,?s\<rangle> \<Rightarrow> ?t;
         ?s = Stuck |]
      ==> ?t = Stuck",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_equation (template_var 1, template_hole 0)],
       template_equation (template_var 0, template_hole 0))),
    ("AlternativeSmallStep.CollInt_iff",
     "{s. ?P s} Int {s. ?Q s} = {s. ?P s & ?Q s}",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, t_empty)),
         template_app (template_hole 1, t_empty)),
       template_app (template_hole 1, t_empty))),
    ("AlternativeSmallStep.Fault_app_steps",
     "?\<Gamma>\<turnstile> (?cs @ ?xs, ?css,
                             Fault ?f) \<rightarrow>\<^sup>*
                            (?xs, ?css, Fault ?f)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 4)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 2)),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app (template_hole 0, template_var 0)))),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 0))))
         )),
    ("AlternativeSmallStep.execs_Fault_end",
     "[| ?\<Gamma>\<turnstile> \<langle>?cs,?css,?s\<rangle> \<Rightarrow> ?t;
         ?s = Fault ?f |]
      ==> ?t = Fault ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_equation
         (template_var 2, template_app (template_hole 0, template_var 0))],
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("AlternativeSmallStep.inf_Seq",
     "AlternativeSmallStep.inf ?\<Gamma> (Seq ?c1.0 ?c2.0 # ?cs) ?css
       (Normal ?s) =
      AlternativeSmallStep.inf ?\<Gamma> (?c1.0 # ?c2.0 # ?cs) ?css
       (Normal ?s)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 3)),
               template_var 2)),
           template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_app
              (template_app (template_hole 2, template_var 4),
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2))),
           template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("AlternativeSmallStep.steps_eq_exec",
     "?\<Gamma>\<turnstile> ([?c], [], ?s) \<rightarrow>\<^sup>*
                            ([], [], ?t) =
      ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> ?t",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 3)),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_hole 3)),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1))),
         template_app
          (template_app (template_hole 5, template_hole 3),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0))),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("AlternativeSmallStep.steps_impl_execs",
     "?\<Gamma>\<turnstile> (?cs, ?css, ?s) \<rightarrow>\<^sup>*
                            ([], [], ?t) ==>
      ?\<Gamma>\<turnstile> \<langle>?cs,?css,?s\<rangle> \<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_var 4)),
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 1))),
              template_app
               (template_app (template_hole 4, template_hole 2),
                template_app
                 (template_app (template_hole 3, template_hole 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("AlternativeSmallStep.exec_impl_steps",
     "?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> ?t ==>
      ?\<Gamma>\<turnstile> (?c # ?cs, ?css, ?s) \<rightarrow>\<^sup>*
                            (?cs, ?css, ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 5)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 4),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 3))),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)))
           ))),
    ("AlternativeSmallStep.k_steps_to_rtrancl",
     "ALL i<?k. ?\<Gamma>\<turnstile> ?p i \<rightarrow> ?p (Suc i) ==>
      ?\<Gamma>\<turnstile> ?p 0 \<rightarrow>\<^sup>* ?p ?k",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 3, template_var 1)),
               template_app (template_var 0, template_hole 0)),
             template_app (template_var 0, template_var 2))
           ))),
    ("AlternativeSmallStep.steps_impl_exec",
     "?\<Gamma>\<turnstile> ([?c], [], ?s) \<rightarrow>\<^sup>*
                            ([], [], ?t) ==>
      ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 3)),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 2),
                      template_hole 3)),
                  template_app
                   (template_app (template_hole 2, template_hole 1),
                    template_var 1))),
              template_app
               (template_app (template_hole 5, template_hole 3),
                template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("AlternativeSmallStep.not_inf_Stuck'",
     "[| ALL i. ?\<Gamma>\<turnstile> ?f i \<rightarrow> ?f (Suc i);
         ?f ?k = (?cs, ?css, Stuck) |]
      ==> False",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_equation
         (template_app (template_var 3, template_var 2),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)))],
       template_predicate (template_hole 0))),
    ("AlternativeSmallStep.skolemize1",
     "ALL x. ?P x --> (EX y. ?Q x y) ==> EX f. ALL x. ?P x --> ?Q x (f x)",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("AlternativeSmallStep.not_inf_Fault'",
     "[| ALL i. ?\<Gamma>\<turnstile> ?f i \<rightarrow> ?f (Suc i);
         ?f ?k = (?cs, ?css, Fault ?m) |]
      ==> False",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_equation
         (template_app (template_var 4, template_var 3),
          template_app
           (template_app (template_hole 3, template_var 2),
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))))],
       template_predicate (template_hole 0))),
    ("AlternativeSmallStep.skolemize2'",
     "ALL x. EX y z. ?P x y z ==> EX f g. ALL x. ?P x (f x) (g x)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("AlternativeSmallStep.inf_Catch",
     "AlternativeSmallStep.inf ?\<Gamma> (Catch ?c1.0 ?c2.0 # ?cs) ?css
       (Normal ?s) =
      AlternativeSmallStep.inf ?\<Gamma> [?c1.0] ((?cs, ?c2.0 # ?cs) # ?css)
       (Normal ?s)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 6, template_var 5),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 4),
                   template_var 3)),
               template_var 2)),
           template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 6, template_var 5),
             template_app
              (template_app (template_hole 5, template_var 4),
               template_hole 2)),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_app
                  (template_app (template_hole 5, template_var 3),
                   template_var 2))),
             template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("AlternativeSmallStep.step_elim_cases",
     "[| ?\<Gamma>\<turnstile> (?c # ?cs, ?css, Stuck) \<rightarrow> ?u;
         ?u = (?cs, ?css, Stuck) ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 5),
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 4),
                      template_var 3)),
                  template_app
                   (template_app (template_hole 2, template_var 2),
                    template_hole 1))),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app
              (template_app (template_hole 4, template_var 3),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_hole 1)))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("AlternativeSmallStep.step_preserves_terminations",
     "[| ?\<Gamma>\<turnstile> (?cs, ?css, ?s) \<rightarrow>
                               (?cs', ?css', ?t);
         ?\<Gamma>\<turnstile>?cs,?css \<Down> ?s |]
      ==> ?\<Gamma>\<turnstile>?cs',?css' \<Down> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 6),
                template_app
                 (template_app (template_hole 2, template_var 5),
                  template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3))),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 6),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("AlternativeSmallStep.not_inf_implies_wf",
     "~ AlternativeSmallStep.inf ?\<Gamma> ?cs ?css ?s ==>
      wf {(c2, c1).
          ?\<Gamma>\<turnstile> (?cs, ?css, ?s) \<rightarrow>\<^sup>* c1 &
          ?\<Gamma>\<turnstile> c1 \<rightarrow> c2}",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 8, template_var 3),
                      template_var 2),
                    template_var 1),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_hole 7,
             template_app
              (template_hole 6, template_app (template_hole 5, t_empty)))
           ))),
    ("AlternativeSmallStep.conseq_extract_state_indep_prop",
     "[| ALL s:?P. ?R;
         ?R ==>
         ?\<Gamma>,?\<Theta>
            \<turnstile>\<^sub>t\<^bsub>/?F\<^esub> ?P ?c ?Q,?A |]
      ==> ?\<Gamma>,?\<Theta>
             \<turnstile>\<^sub>t\<^bsub>/?F\<^esub> ?P ?c ?Q,?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 7), t_empty)
            ),
        template_implication
         ([template_predicate (template_var 6)],
          template_predicate
           (
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 0, template_var 5),
                          template_var 4),
                        template_var 3),
                      template_var 7),
                    template_var 2),
                  template_var 1),
                template_var 0)
              ))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 4),
                     template_var 3),
                   template_var 7),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("AlternativeSmallStep.step_Normal_elim_cases",
     "[| ?\<Gamma>\<turnstile> (Skip # ?cs, ?css, Normal ?s) \<rightarrow>
                               ?u;
         ?u = (?cs, ?css, Normal ?s) ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 5),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_hole 3),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 2, template_var 3),
                    template_app (template_hole 1, template_var 2)))),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app
              (template_app (template_hole 5, template_var 4),
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app (template_hole 1, template_var 2))))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("AlternativeSmallStep.step_Normal_elim_cases",
     "[| ?\<Gamma>\<turnstile> (Throw # ?cs, ?css, Normal ?s) \<rightarrow>
                               ?u;
         ?u = (?cs, ?css, Abrupt ?s) ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 5),
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_hole 4),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_app (template_hole 2, template_var 2)))),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app
              (template_app (template_hole 6, template_var 4),
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_app (template_hole 0, template_var 2))))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("AlternativeSmallStep.step_elim_cases",
     "[| ?\<Gamma>\<turnstile> (?c # ?cs, ?css, Abrupt ?s) \<rightarrow> ?u;
         ?u = (?cs, ?css, Abrupt ?s) ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 6),
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 5),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 2, template_var 3),
                    template_app (template_hole 1, template_var 2)))),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app
              (template_app (template_hole 4, template_var 4),
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app (template_hole 1, template_var 2))))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("AlternativeSmallStep.step_elim_cases",
     "[| ?\<Gamma>\<turnstile> (?c # ?cs, ?css, Fault ?f) \<rightarrow> ?u;
         ?u = (?cs, ?css, Fault ?f) ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 6),
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 5),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 2, template_var 3),
                    template_app (template_hole 1, template_var 2)))),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app
              (template_app (template_hole 4, template_var 4),
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app (template_hole 1, template_var 2))))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("AlternativeSmallStep.steps_preserves_terminations",
     "[| ?\<Gamma>\<turnstile> (?cs, ?css, ?s) \<rightarrow>\<^sup>*
                               (?cs', ?css', ?t);
         ?\<Gamma>\<turnstile>?cs,?css \<Down> ?s |]
      ==> ?\<Gamma>\<turnstile>?cs',?css' \<Down> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 6)),
                template_app
                 (template_app (template_hole 2, template_var 5),
                  template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3))),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 6),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("AlternativeSmallStep.inf_WhileTrue",
     "?s : ?b ==>
      AlternativeSmallStep.inf ?\<Gamma> (While ?b ?c # ?cs) ?css
       (Normal ?s) =
      AlternativeSmallStep.inf ?\<Gamma> (?c # While ?b ?c # ?cs) ?css
       (Normal ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 5),
              template_var 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 4),
                     template_var 2)),
                 template_var 1)),
             template_var 0),
           template_app (template_hole 0, template_var 5)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 4),
                       template_var 2)),
                   template_var 1))),
             template_var 0),
           template_app (template_hole 0, template_var 5))))),
    ("AlternativeSmallStep.terminatess_impl_no_inf_chain",
     "?\<Gamma>\<turnstile>?cs,?css \<Down> ?s ==>
      \<nexists>f.
         f 0 = (?cs, ?css, ?s) &
         (ALL i.
             ?\<Gamma>\<turnstile> f i \<rightarrow>\<^sup>+ f (Suc i))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 11, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_negation
        (template_predicate (template_app (template_hole 9, t_empty))))),
    ("AlternativeSmallStep.step_Normal_elim_cases",
     "[| ?\<Gamma>\<turnstile> (Basic ?f # ?cs, ?css,
                                Normal ?s) \<rightarrow>
                               ?u;
         ?u = (?cs, ?css, Normal (?f ?s)) ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 6),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app
                       (template_hole 4,
                        template_app (template_hole 3, template_var 5)),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 2, template_var 3),
                    template_app (template_hole 1, template_var 2)))),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app
              (template_app (template_hole 5, template_var 4),
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app
                  (template_hole 1,
                   template_app (template_var 5, template_var 2)))))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("AlternativeSmallStep.step_Normal_elim_cases",
     "[| ?\<Gamma>\<turnstile> ([], (?nrms, ?abrs) # ?css,
                                Abrupt ?s) \<rightarrow>
                               ?u;
         ?u = (?abrs, ?css, Normal ?s) ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 6),
                template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_app
                         (template_hole 4,
                          template_app
                           (template_app (template_hole 3, template_var 5),
                            template_var 4)),
                        template_var 3)),
                    template_app (template_hole 2, template_var 2)))),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app
              (template_app (template_hole 7, template_var 4),
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_app (template_hole 0, template_var 2))))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("AlternativeSmallStep.step_Normal_elim_cases",
     "[| ?\<Gamma>\<turnstile> ([], (?nrms, ?abrs) # ?css,
                                Normal ?s) \<rightarrow>
                               ?u;
         ?u = (?nrms, ?css, Normal ?s) ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 6),
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app
                       (template_app
                         (template_hole 3,
                          template_app
                           (template_app (template_hole 2, template_var 5),
                            template_var 4)),
                        template_var 3)),
                    template_app (template_hole 1, template_var 2)))),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app
              (template_app (template_hole 6, template_var 5),
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_app (template_hole 1, template_var 2))))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("AlternativeSmallStep.steps_preserves_termination",
     "[| ?\<Gamma>\<turnstile> ([?c], [], ?s) \<rightarrow>\<^sup>*
                               (?c' # ?cs', ?css', ?t);
         ?\<Gamma>\<turnstile>?c \<down> ?s |]
      ==> ?\<Gamma>\<turnstile>?c' \<down> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 6)),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 5),
                      template_hole 3)),
                  template_app
                   (template_app (template_hole 2, template_hole 1),
                    template_var 4))),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 2)),
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 6),
                template_var 5),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 6),
               template_var 3),
             template_var 0)
           ))),
    ("AlternativeSmallStep.terminates_impl_no_inf_chain",
     "?\<Gamma>\<turnstile>?c \<down> ?s ==>
      \<nexists>f.
         f 0 = ([?c], [], ?s) &
         (ALL i.
             ?\<Gamma>\<turnstile> f i \<rightarrow>\<^sup>+ f (Suc i))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 14, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_negation
        (template_predicate (template_app (template_hole 12, t_empty))))),
    ("AlternativeSmallStep.app_css_step",
     "?\<Gamma>\<turnstile> (?cs, ?css, ?s) \<rightarrow>
                            (?cs', ?css', ?t) ==>
      ?\<Gamma>\<turnstile> (?cs, ?css @ ?xs, ?s) \<rightarrow>
                            (?cs', ?css' @ ?xs, ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 7),
                template_app
                 (template_app (template_hole 2, template_var 6),
                  template_app
                   (template_app (template_hole 1, template_var 5),
                    template_var 4))),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 7),
               template_app
                (template_app (template_hole 2, template_var 6),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 0)),
                   template_var 4))),
             template_app
              (template_app (template_hole 2, template_var 3),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0)),
                 template_var 1)))
           ))),
    ("AlternativeSmallStep.skolemize2",
     "ALL x. ?P x --> (EX y z. ?Q x y z) ==>
      EX f g. ALL x. ?P x --> ?Q x (f x) (g x)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("AlternativeSmallStep.Cons_change_css_step",
     "?\<Gamma>\<turnstile> (?cs, ?css, ?s) \<rightarrow>
                            (?cs', ?css' @ ?css, ?t) ==>
      ?\<Gamma>\<turnstile> (?cs, ?xss, ?s) \<rightarrow>
                            (?cs', ?css' @ ?xss, ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 7),
                template_app
                 (template_app (template_hole 2, template_var 6),
                  template_app
                   (template_app (template_hole 1, template_var 5),
                    template_var 4))),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_app
                 (template_app
                   (template_hole 1,
                    template_app
                     (template_app (template_hole 0, template_var 2),
                      template_var 5)),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 7),
               template_app
                (template_app (template_hole 2, template_var 6),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 4))),
             template_app
              (template_app (template_hole 2, template_var 3),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0)),
                 template_var 1)))
           ))),
    ("AlternativeSmallStep.drop_suffix_css_step",
     "?\<Gamma>\<turnstile> (?cs, ?pcss @ ?css, ?s) \<rightarrow>
                            (?cs', ?pcss' @ ?css, ?t) ==>
      ?\<Gamma>\<turnstile> (?cs, ?pcss, ?s) \<rightarrow>
                            (?cs', ?pcss', ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 7),
                template_app
                 (template_app (template_hole 2, template_var 6),
                  template_app
                   (template_app
                     (template_hole 1,
                      template_app
                       (template_app (template_hole 0, template_var 5),
                        template_var 4)),
                    template_var 3))),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_app
                 (template_app
                   (template_hole 1,
                    template_app
                     (template_app (template_hole 0, template_var 1),
                      template_var 4)),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 7),
               template_app
                (template_app (template_hole 2, template_var 6),
                 template_app
                  (template_app (template_hole 1, template_var 5),
                   template_var 3))),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)))
           ))),
    ("AlternativeSmallStep.execs_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>?c #
  ?cs,?css,?s\<rangle> \<Rightarrow> ?t;
         !!t. [| ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> t;
                 ?\<Gamma>\<turnstile> \<langle>?cs,?css,t\<rangle> \<Rightarrow> ?t |]
              ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 6),
                    template_app
                     (template_app (template_hole 2, template_var 5),
                      template_var 4)),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("AlternativeSmallStep.step_Normal_elim_cases",
     "[| ?\<Gamma>\<turnstile> (DynCom ?c # ?cs, ?css,
                                Normal ?s) \<rightarrow>
                               ?u;
         ?u = (?c ?s # ?cs, ?css, Normal ?s) ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 6),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app
                       (template_hole 4,
                        template_app (template_hole 3, template_var 5)),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 2, template_var 3),
                    template_app (template_hole 1, template_var 2)))),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_var 5, template_var 2)),
                   template_var 4)),
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app (template_hole 1, template_var 2))))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("AlternativeSmallStep.image_Un_conv",
     "?f ` (UN p:dom ?\<Gamma>. UN Z. {?x p Z}) =
      (UN p:dom ?\<Gamma>. UN Z. {?f (?x p Z)})",
     template_equation
      (template_app
        (template_app (template_hole 12, template_var 2),
         template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 10, t_empty),
             template_app (template_hole 5, template_var 0)))),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty),
           template_app (template_hole 5, template_var 0))))),
    ("AlternativeSmallStep.app_css_steps",
     "?\<Gamma>\<turnstile> (?cs, ?css, ?s) \<rightarrow>\<^sup>+
                            (?cs', ?css', ?t) ==>
      ?\<Gamma>\<turnstile> (?cs, ?css @ ?xs, ?s) \<rightarrow>\<^sup>+
                            (?cs', ?css' @ ?xs, ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 7)),
                template_app
                 (template_app (template_hole 2, template_var 6),
                  template_app
                   (template_app (template_hole 1, template_var 5),
                    template_var 4))),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 7)),
               template_app
                (template_app (template_hole 2, template_var 6),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 0)),
                   template_var 4))),
             template_app
              (template_app (template_hole 2, template_var 3),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0)),
                 template_var 1)))
           ))),
    ("AlternativeSmallStep.not_infI",
     "(!!f. [| f 0 = (?cs, ?css, ?s);
               !!i. ?\<Gamma>\<turnstile> f i \<rightarrow> f (Suc i) |]
            ==> False) ==>
      ~ AlternativeSmallStep.inf ?\<Gamma> ?cs ?css ?s",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 3),
                   template_var 2),
                 template_var 1)
               )
           ))),
    ("AlternativeSmallStep.step_Normal_elim_cases",
     "[| ?\<Gamma>\<turnstile> (Seq ?c1.0 ?c2.0 # ?cs, ?css,
                                Normal ?s) \<rightarrow>
                               ?u;
         ?u = (?c1.0 # ?c2.0 # ?cs, ?css, Normal ?s) ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 7),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app
                       (template_hole 4,
                        template_app
                         (template_app (template_hole 3, template_var 6),
                          template_var 5)),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 2, template_var 3),
                    template_app (template_hole 1, template_var 2)))),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 6),
                   template_app
                    (template_app (template_hole 4, template_var 5),
                     template_var 4))),
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app (template_hole 1, template_var 2))))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("AlternativeSmallStep.drop_suffix",
     "?\<Gamma>\<turnstile> (?c # ?cs @ ?xs, ?css, ?s) \<rightarrow>
                            (?cs' @ ?xs, ?css, ?t) ==>
      ?\<Gamma>\<turnstile> (?c # ?cs, ?css, ?s) \<rightarrow>
                            (?cs', ?css, ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 7),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 6),
                      template_app
                       (template_app (template_hole 1, template_var 5),
                        template_var 4))),
                  template_app
                   (template_app (template_hole 0, template_var 3),
                    template_var 2))),
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 1, template_var 1),
                    template_var 4)),
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 7),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 6),
                     template_var 5)),
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2))),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)))
           ))),
    ("AlternativeSmallStep.terminatess_elim_cases",
     "[| ?\<Gamma>\<turnstile>?c # ?cs,?css \<Down> ?t;
         [| ?\<Gamma>\<turnstile>?c \<down> ?t;
            ALL t.
               ?\<Gamma>\<turnstile> \<langle>?c,?t\<rangle> \<Rightarrow> t -->
               ?\<Gamma>\<turnstile>?cs,?css \<Down> t |]
         ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 5),
                  template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 5),
                   template_var 4),
                 template_var 1)
               )],
          template_implication
           ([template_predicate (template_app (template_hole 2, t_empty))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("AlternativeSmallStep.app_step",
     "[| ?\<Gamma>\<turnstile> (?cs, ?css, ?s) \<rightarrow>
                               (?cs', ?css', ?t);
         ?css = ?css' |]
      ==> ?\<Gamma>\<turnstile> (?cs @ ?xs, ?css, ?s) \<rightarrow>
                                (?cs' @ ?xs, ?css', ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 7),
                template_app
                 (template_app (template_hole 3, template_var 6),
                  template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 4))),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)))
            ),
        template_equation (template_var 5, template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 7),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 0, template_var 6),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 4))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0)),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)))
           ))),
    ("AlternativeSmallStep.drop_suffix_same_css_step",
     "[| ?\<Gamma>\<turnstile> (?cs @ ?xs, ?css, ?s) \<rightarrow>
                               (?cs' @ ?xs, ?css, ?t);
         ?cs ~= [] |]
      ==> ?\<Gamma>\<turnstile> (?cs, ?xss, ?s) \<rightarrow>
                                (?cs', ?xss, ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 7),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 6),
                      template_var 5)),
                  template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3))),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 5)),
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 1)))
            ),
        template_negation
         (template_equation (template_var 6, template_hole 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, template_var 7),
               template_app
                (template_app (template_hole 5, template_var 6),
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_var 3))),
             template_app
              (template_app (template_hole 5, template_var 2),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 1)))
           ))),
    ("AlternativeSmallStep.renumber",
     "ALL i. (?a, ?f i) : ?r^* & (?f i, ?f (Suc i)) : ?r ==>
      EX f. f 0 = ?a & (ALL i. (f i, f (Suc i)) : ?r)",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("AlternativeSmallStep.step_Normal_elim_cases",
     "[| ?\<Gamma>\<turnstile> (Catch ?c1.0 ?c2.0 # ?cs, ?css,
                                Normal ?s) \<rightarrow>
                               ?u;
         ?u = ([?c1.0], (?cs, ?c2.0 # ?cs) # ?css, Normal ?s) ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 7),
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app
                       (template_hole 7,
                        template_app
                         (template_app (template_hole 6, template_var 6),
                          template_var 5)),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 5, template_var 3),
                    template_app (template_hole 4, template_var 2)))),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 6),
                   template_hole 2)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 0, template_var 4),
                         template_app
                          (template_app (template_hole 7, template_var 5),
                           template_var 4))),
                     template_var 3)),
                 template_app (template_hole 4, template_var 2))))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("AlternativeSmallStep.step_elim_cases",
     "[| ?\<Gamma>\<turnstile> ([], ?css, Stuck) \<rightarrow> ?u;
         !!nrms abrs css.
            [| ?css = (nrms, abrs) # css; ?u = (nrms, css, Stuck) |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 3),
                template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_app
                   (template_app (template_hole 7, template_var 2),
                    template_hole 6))),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("AlternativeSmallStep.step_elim_cases",
     "[| ?\<Gamma>\<turnstile> ([], ?css, Abrupt ?s) \<rightarrow> ?u;
         !!nrms abrs css.
            [| ?css = (nrms, abrs) # css; ?u = (abrs, css, Normal ?s) |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 4),
                template_app
                 (template_app (template_hole 10, template_hole 9),
                  template_app
                   (template_app (template_hole 8, template_var 3),
                    template_app (template_hole 7, template_var 2)))),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("AlternativeSmallStep.step_elim_cases",
     "[| ?\<Gamma>\<turnstile> ([], ?css, Fault ?f) \<rightarrow> ?u;
         !!nrms abrs css.
            [| ?css = (nrms, abrs) # css; ?u = (nrms, css, Fault ?f) |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 4),
                template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_app
                   (template_app (template_hole 7, template_var 3),
                    template_app (template_hole 6, template_var 2)))),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("AlternativeSmallStep.step_elim_cases",
     "[| ?\<Gamma>\<turnstile> ([], ?css, Normal ?s) \<rightarrow> ?u;
         !!nrms abrs css.
            [| ?css = (nrms, abrs) # css; ?u = (nrms, css, Normal ?s) |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 4),
                template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_app
                   (template_app (template_hole 7, template_var 3),
                    template_app (template_hole 6, template_var 2)))),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("AlternativeSmallStep.Nil_change_css_step",
     "[| ?\<Gamma>\<turnstile> ([], ?ass @ ?css, ?s) \<rightarrow>
                               (?cs', ?ass' @ ?css, ?t);
         ?ass ~= [] |]
      ==> ?\<Gamma>\<turnstile> ([], ?ass @ ?xss, ?s) \<rightarrow>
                                (?cs', ?ass' @ ?xss, ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 7),
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app
                       (template_app (template_hole 3, template_var 6),
                        template_var 5)),
                    template_var 4))),
              template_app
               (template_app (template_hole 6, template_var 3),
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 2),
                      template_var 5)),
                  template_var 1)))
            ),
        template_negation
         (template_equation (template_var 6, template_hole 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, template_var 7),
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 6),
                       template_var 0)),
                   template_var 4))),
             template_app
              (template_app (template_hole 6, template_var 3),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 0)),
                 template_var 1)))
           ))),
    ("AlternativeSmallStep.drop_suffix_css_step'",
     "[| ?\<Gamma>\<turnstile> (?cs, ?cssxs, ?s) \<rightarrow>
                               (?cs', ?css'xs, ?t);
         ?cssxs = ?css @ ?xs; ?css'xs = ?css' @ ?xs |]
      ==> ?\<Gamma>\<turnstile> (?cs, ?css, ?s) \<rightarrow>
                                (?cs', ?css', ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 9),
                template_app
                 (template_app (template_hole 3, template_var 8),
                  template_app
                   (template_app (template_hole 2, template_var 7),
                    template_var 6))),
              template_app
               (template_app (template_hole 3, template_var 5),
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3)))
            ),
        template_equation
         (template_var 7,
          template_app
           (template_app (template_hole 0, template_var 2),
            template_var 1)),
        template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 0, template_var 0),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 9),
               template_app
                (template_app (template_hole 3, template_var 8),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 6))),
             template_app
              (template_app (template_hole 3, template_var 5),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 3)))
           ))),
    ("AlternativeSmallStep.infE",
     "[| AlternativeSmallStep.inf ?\<Gamma> (?c # ?cs) ?css ?s;
         AlternativeSmallStep.inf ?\<Gamma> [?c] [] ?s ==> ?P;
         !!t. [| ?\<Gamma>\<turnstile> \<langle>?c,?s\<rangle> \<Rightarrow> t;
                 AlternativeSmallStep.inf ?\<Gamma> ?cs ?css t |]
              ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 5),
                  template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 5, template_var 5),
                     template_app
                      (template_app (template_hole 4, template_var 4),
                       template_hole 3)),
                   template_hole 2),
                 template_var 1)
               )],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("AlternativeSmallStep.last_butlast_tl",
     "[| butlast ?bs = ?x # butlast ?as; ?bs ~= []; ?as ~= [];
         fst (last ?as) = fst (last ?bs); snd (last ?as) = snd (last ?bs) |]
      ==> ?as = tl ?bs",
     template_implication
      ([template_equation
         (template_app (template_hole 9, template_var 2),
          template_app
           (template_app (template_hole 8, template_var 1),
            template_app (template_hole 9, template_var 0))),
        template_negation
         (template_equation (template_var 2, template_hole 6)),
        template_negation
         (template_equation (template_var 0, template_hole 6)),
        template_equation
         (template_app
           (template_hole 4,
            template_app (template_hole 3, template_var 0)),
          template_app
           (template_hole 4,
            template_app (template_hole 3, template_var 2))),
        template_equation
         (template_app
           (template_hole 1,
            template_app (template_hole 3, template_var 0)),
          template_app
           (template_hole 1,
            template_app (template_hole 3, template_var 2)))],
       template_equation
        (template_var 0, template_app (template_hole 0, template_var 2)))),
    ("AlternativeSmallStep.drop_suffix_hd_css_step''",
     "?\<Gamma>\<turnstile> (?p # ?ps @ ?cs, ?css, ?s) \<rightarrow>
                            (?cs', (?pnorm @ ?cs, ?pabr @ ?cs) # ?css,
                             ?t) ==>
      ?\<Gamma>\<turnstile> (?p # ?ps, ?css, ?s) \<rightarrow>
                            (?cs', (?pnorm, ?pabr) # ?css, ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 9),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 8),
                      template_app
                       (template_app (template_hole 3, template_var 7),
                        template_var 6))),
                  template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 4))),
              template_app
               (template_app (template_hole 5, template_var 3),
                template_app
                 (template_app
                   (template_hole 2,
                    template_app
                     (template_app
                       (template_hole 1,
                        template_app
                         (template_app
                           (template_hole 0,
                            template_app
                             (template_app
                               (template_hole 3, template_var 2),
                              template_var 6)),
                          template_app
                           (template_app (template_hole 3, template_var 1),
                            template_var 6))),
                      template_var 5)),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, template_var 9),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 8),
                     template_var 7)),
                 template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 4))),
             template_app
              (template_app (template_hole 5, template_var 3),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 0, template_var 2),
                         template_var 1)),
                     template_var 5)),
                 template_var 0)))
           ))),
    ("AlternativeSmallStep.last_butlast_app",
     "[| butlast ?as = ?xs @ butlast ?bs; ?bs ~= []; ?as ~= [];
         fst (last ?as) = fst (last ?bs); snd (last ?as) = snd (last ?bs) |]
      ==> ?as = ?xs @ ?bs",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 2),
          template_app
           (template_app (template_hole 7, template_var 1),
            template_app (template_hole 8, template_var 0))),
        template_negation
         (template_equation (template_var 0, template_hole 5)),
        template_negation
         (template_equation (template_var 2, template_hole 5)),
        template_equation
         (template_app
           (template_hole 3,
            template_app (template_hole 2, template_var 2)),
          template_app
           (template_hole 3,
            template_app (template_hole 2, template_var 0))),
        template_equation
         (template_app
           (template_hole 0,
            template_app (template_hole 2, template_var 2)),
          template_app
           (template_hole 0,
            template_app (template_hole 2, template_var 0)))],
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 7, template_var 1),
           template_var 0)))),
    ("AlternativeSmallStep.lem",
     "ALL y. ?r^++ ?a y --> ?P ?a --> ?P y ==>
      ((?b, ?a) : {(y, x). ?P x & ?r x y}^+) =
      ((?b, ?a) : {(y, x). ?P x & ?r^++ x y})",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 2)),
           template_app
            (template_hole 3,
             template_app
              (template_hole 2, template_app (template_hole 1, t_empty)))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 2)),
           template_app
            (template_hole 2, template_app (template_hole 1, t_empty)))))),
    ("AlternativeSmallStep.wf_implies_termi_reach",
     "[| wf {(c2, c1).
             ?\<Gamma>\<turnstile> (?cs, ?css, ?s) \<rightarrow>\<^sup>*
                                   c1 &
             ?\<Gamma>\<turnstile> c1 \<rightarrow> c2};
         ?\<Gamma>\<turnstile> (?cs, ?css, ?s) \<rightarrow>\<^sup>* ?c1.0;
         ?c1.0 = (?cs1.0, ?css1.0, ?s1.0) |]
      ==> ?\<Gamma>\<turnstile>?cs1.0,?css1.0 \<Down> ?s1.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_hole 8, template_app (template_hole 7, t_empty)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 7)),
                template_app
                 (template_app (template_hole 3, template_var 6),
                  template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 4))),
              template_var 3)
            ),
        template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 3, template_var 2),
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 7),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("AlternativeSmallStep.step_Cons",
     "?\<Gamma>\<turnstile> (?c # ?cs, ?css, ?s) \<rightarrow>
                            (?cs', ?css', ?t) ==>
      EX pcss.
         ?css' = pcss @ ?css &
         (if pcss = [] then EX ps. ?cs' = ps @ ?cs
          else EX pcs_normal pcs_abrupt.
                  pcss = [(pcs_normal @ ?cs, pcs_abrupt @ ?cs)])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 14, template_var 7),
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_app (template_hole 12, template_var 6),
                      template_var 5)),
                  template_app
                   (template_app (template_hole 11, template_var 4),
                    template_var 3))),
              template_app
               (template_app (template_hole 13, template_var 2),
                template_app
                 (template_app (template_hole 11, template_var 1),
                  template_var 0)))
            )],
       template_predicate (template_app (template_hole 10, t_empty)))),
    ("AlternativeSmallStep.renumber'",
     "[| ALL i. (?a, ?f i) : ?r^* & (?f i, ?f (Suc i)) : ?r;
         (?a, ?b) : ?r^*; ?b = ?f 0 |]
      ==> EX f. f 0 = ?a & (ALL i. (f i, f (Suc i)) : ?r)",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 0)),
              template_app (template_hole 4, template_var 1))
            ),
        template_equation
         (template_var 0, template_app (template_var 2, template_hole 1))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("AlternativeSmallStep.drop_suffix'",
     "[| ?\<Gamma>\<turnstile> (?csxs, ?css, ?s) \<rightarrow>
                               (?cs'xs, ?css', ?t);
         ?css = ?css'; ?csxs = ?cs @ ?xs; ?cs'xs = ?cs' @ ?xs; ?cs ~= [] |]
      ==> ?\<Gamma>\<turnstile> (?cs, ?css, ?s) \<rightarrow>
                                (?cs', ?css, ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 9),
                template_app
                 (template_app (template_hole 6, template_var 8),
                  template_app
                   (template_app (template_hole 5, template_var 7),
                    template_var 6))),
              template_app
               (template_app (template_hole 6, template_var 5),
                template_app
                 (template_app (template_hole 5, template_var 4),
                  template_var 3)))
            ),
        template_equation (template_var 7, template_var 4),
        template_equation
         (template_var 8,
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 1)),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 2, template_var 0),
            template_var 1)),
        template_negation
         (template_equation (template_var 2, template_hole 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, template_var 9),
               template_app
                (template_app (template_hole 6, template_var 2),
                 template_app
                  (template_app (template_hole 5, template_var 7),
                   template_var 6))),
             template_app
              (template_app (template_hole 6, template_var 0),
               template_app
                (template_app (template_hole 5, template_var 7),
                 template_var 3)))
           ))),
    ("AlternativeSmallStep.drop_suffix_hd_css_step'",
     "[| ?\<Gamma>\<turnstile> (?pcs, ?css, ?s) \<rightarrow>
                               (?cs', ?css'css, ?t);
         ?pcs = ?p # ?ps @ ?cs;
         ?css'css = (?pnorm @ ?cs, ?pabr @ ?cs) # ?css |]
      ==> ?\<Gamma>\<turnstile> (?p # ?ps, ?css, ?s) \<rightarrow>
                                (?cs', (?pnorm, ?pabr) # ?css, ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 11),
                template_app
                 (template_app (template_hole 7, template_var 10),
                  template_app
                   (template_app (template_hole 6, template_var 9),
                    template_var 8))),
              template_app
               (template_app (template_hole 7, template_var 7),
                template_app
                 (template_app (template_hole 6, template_var 6),
                  template_var 5)))
            ),
        template_equation
         (template_var 10,
          template_app
           (template_app (template_hole 4, template_var 4),
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2))),
        template_equation
         (template_var 6,
          template_app
           (template_app
             (template_hole 1,
              template_app
               (template_app
                 (template_hole 0,
                  template_app
                   (template_app (template_hole 3, template_var 1),
                    template_var 2)),
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_var 2))),
            template_var 9))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 8, template_var 11),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 4, template_var 4),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 6, template_var 9),
                   template_var 8))),
             template_app
              (template_app (template_hole 7, template_var 7),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 0, template_var 1),
                         template_var 0)),
                     template_var 9)),
                 template_var 5)))
           ))),
    ("AlternativeSmallStep.step_Cons'",
     "[| ?\<Gamma>\<turnstile> (?ccs, ?css, ?s) \<rightarrow>
                               (?cs', ?css', ?t);
         ?ccs = ?c # ?cs |]
      ==> EX css''.
             ?css' = css'' @ ?css &
             (if css'' = [] then EX p. ?cs' = p @ ?cs
              else EX pnorm pabr. css'' = [(pnorm @ ?cs, pabr @ ?cs)])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 14, template_var 8),
                template_app
                 (template_app (template_hole 13, template_var 7),
                  template_app
                   (template_app (template_hole 12, template_var 6),
                    template_var 5))),
              template_app
               (template_app (template_hole 13, template_var 4),
                template_app
                 (template_app (template_hole 12, template_var 3),
                  template_var 2)))
            ),
        template_equation
         (template_var 7,
          template_app
           (template_app (template_hole 10, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("AlternativeSmallStep.step_Nil''",
     "?\<Gamma>\<turnstile> ([], (?pcs_normal, ?pcs_abrupt) # ?pcss @ ?css,
                             ?s) \<rightarrow>
                            (?cs', ?pcss @ ?css, ?t) ==>
      case ?s of Abrupt s' => ?cs' = ?pcs_abrupt & ?t = Normal s'
      | _ => ?cs' = ?pcs_normal & ?t = ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 7),
                template_app
                 (template_app (template_hole 10, template_hole 9),
                  template_app
                   (template_app
                     (template_hole 8,
                      template_app
                       (template_app
                         (template_hole 7,
                          template_app
                           (template_app (template_hole 6, template_var 6),
                            template_var 5)),
                        template_app
                         (template_app (template_hole 5, template_var 4),
                          template_var 3))),
                    template_var 2))),
              template_app
               (template_app (template_hole 10, template_var 1),
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 5, template_var 4),
                      template_var 3)),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, t_empty), t_empty),
                 t_empty),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 6)),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 2))),
             template_var 2)
           ))),
    ("AlternativeSmallStep.drop_suffix_hd_css_step",
     "?\<Gamma>\<turnstile> (?p # ?ps @ ?cs, ?css, ?s) \<rightarrow>
                            (?cs',
                             [(?pnorm @ ?ps @ ?cs, ?pabr @ ?ps @ ?cs)] @
                             ?css,
                             ?t) ==>
      ?\<Gamma>\<turnstile> (?p # ?ps, ?css, ?s) \<rightarrow>
                            (?cs', [(?pnorm @ ?ps, ?pabr @ ?ps)] @ ?css,
                             ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 9),
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 8),
                      template_app
                       (template_app (template_hole 5, template_var 7),
                        template_var 6))),
                  template_app
                   (template_app (template_hole 4, template_var 5),
                    template_var 4))),
              template_app
               (template_app (template_hole 7, template_var 3),
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app
                       (template_hole 3,
                        template_app
                         (template_app
                           (template_hole 2,
                            template_app
                             (template_app
                               (template_hole 1,
                                template_app
                                 (template_app
                                   (template_hole 5, template_var 2),
                                  template_app
                                   (template_app
                                     (template_hole 5, template_var 7),
                                    template_var 6))),
                              template_app
                               (template_app
                                 (template_hole 5, template_var 1),
                                template_app
                                 (template_app
                                   (template_hole 5, template_var 7),
                                  template_var 6)))),
                          template_hole 0)),
                      template_var 5)),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 8, template_var 9),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 8),
                     template_var 7)),
                 template_app
                  (template_app (template_hole 4, template_var 5),
                   template_var 4))),
             template_app
              (template_app (template_hole 7, template_var 3),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_hole 2,
                           template_app
                            (template_app
                              (template_hole 1,
                               template_app
                                (template_app
                                  (template_hole 5, template_var 2),
                                 template_var 7)),
                             template_app
                              (template_app
                                (template_hole 5, template_var 1),
                               template_var 7))),
                         template_hole 0)),
                     template_var 5)),
                 template_var 0)))
           ))),
    ("AlternativeSmallStep.step_Normal_elim_cases",
     "[| ?\<Gamma>\<turnstile> (Guard ?f ?g ?c # ?cs, ?css,
                                Normal ?s) \<rightarrow>
                               ?u;
         [| ?u = (?c # ?cs, ?css, Normal ?s); ?s : ?g |] ==> ?P;
         [| ?u = (?cs, ?css, Fault ?f); ?s ~: ?g |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 8),
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app
                       (template_hole 7,
                        template_app
                         (template_app
                           (template_app (template_hole 6, template_var 7),
                            template_var 6),
                          template_var 5)),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 5, template_var 3),
                    template_app (template_hole 4, template_var 2)))),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 5),
                   template_var 4)),
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_app (template_hole 4, template_var 2))))],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 6)
                 )],
            template_predicate (template_var 0))),
        template_implication
         ([template_equation
            (template_var 1,
             template_app
              (template_app (template_hole 8, template_var 4),
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_app (template_hole 1, template_var 7))))],
          template_implication
           ([template_negation
              (
                 template_predicate
                  (
                     template_app
                      (template_app (template_hole 2, template_var 2),
                       template_var 6)
                     )
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("AlternativeSmallStep.ConseqMGT",
     "[| ALL Z.
            ?\<Gamma>,?\<Theta>
               \<turnstile>\<^sub>t\<^bsub>/?F\<^esub> (?P' Z) ?c
                 (?Q' Z),(?A' Z);
         !!s. s : ?P ==>
              s : ?P' s &
              (ALL t. t : ?Q' s --> t : ?Q) &
              (ALL t. t : ?A' s --> t : ?A) |]
      ==> ?\<Gamma>,?\<Theta>
             \<turnstile>\<^sub>t\<^bsub>/?F\<^esub> ?P ?c ?Q,?A",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 4, template_var 9),
                       template_var 8),
                     template_var 7),
                   template_var 2),
                 template_var 5),
               template_var 1),
             template_var 0)
           ))),
    ("AlternativeSmallStep.step_Normal_elim_cases",
     "[| ?\<Gamma>\<turnstile> (Cond ?b ?c1.0 ?c2.0 # ?cs, ?css,
                                Normal ?s) \<rightarrow>
                               ?u;
         [| ?u = (?c1.0 # ?cs, ?css, Normal ?s); ?s : ?b |] ==> ?P;
         [| ?u = (?c2.0 # ?cs, ?css, Normal ?s); ?s ~: ?b |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 8),
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app
                       (template_hole 6,
                        template_app
                         (template_app
                           (template_app (template_hole 5, template_var 7),
                            template_var 6),
                          template_var 5)),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 4, template_var 3),
                    template_app (template_hole 3, template_var 2)))),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 6),
                   template_var 4)),
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_app (template_hole 3, template_var 2))))],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 7)
                 )],
            template_predicate (template_var 0))),
        template_implication
         ([template_equation
            (template_var 1,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 5),
                   template_var 4)),
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_app (template_hole 3, template_var 2))))],
          template_implication
           ([template_negation
              (
                 template_predicate
                  (
                     template_app
                      (template_app (template_hole 1, template_var 2),
                       template_var 7)
                     )
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("AlternativeSmallStep.MGT_Call",
     "ALL p:dom ?\<Gamma>.
         ALL Z.
            ?\<Gamma>,?\<Theta>
               \<turnstile>\<^sub>t\<^bsub>/?F\<^esub> {s.
                  s = Z &
                  ?\<Gamma>\<turnstile> \<langle>Call
            p,Normal
               s\<rangle> \<Rightarrow>\<notin>{Stuck} Un Fault ` (- ?F) &
                  ?\<Gamma>\<turnstile>Call p \<down> Normal s}
                 Call p
                 {t. ?\<Gamma>\<turnstile> \<langle>Call
               p,Normal
                  Z\<rangle> \<Rightarrow> Normal
      t},{t. ?\<Gamma>\<turnstile> \<langle>Call
       p,Normal Z\<rangle> \<Rightarrow> Abrupt t}",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 19,
             template_app (template_hole 18, template_var 2)),
           t_empty)
         )),
    ("AlternativeSmallStep.step_Normal_elim_cases",
     "[| ?\<Gamma>\<turnstile> (Spec ?r # ?cs, ?css,
                                Normal ?s) \<rightarrow>
                               ?u;
         !!t. [| ?u = (?cs, ?css, Normal t); (?s, t) : ?r |] ==> ?P;
         [| ?u = (?cs, ?css, Stuck); ALL t. (?s, t) ~: ?r |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 12, template_var 6),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app (template_hole 9, template_var 5)),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 8, template_var 3),
                    template_app (template_hole 7, template_var 2)))),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_implication
         ([template_equation
            (template_var 1,
             template_app
              (template_app (template_hole 11, template_var 4),
               template_app
                (template_app (template_hole 8, template_var 3),
                 template_hole 2)))],
          template_implication
           ([template_predicate (template_app (template_hole 1, t_empty))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("AlternativeSmallStep.step_Normal_elim_cases",
     "[| ?\<Gamma>\<turnstile> (While ?b ?c # ?cs, ?css,
                                Normal ?s) \<rightarrow>
                               ?u;
         [| ?u = (?c # While ?b ?c # ?cs, ?css, Normal ?s); ?s : ?b |]
         ==> ?P;
         [| ?u = (?cs, ?css, Normal ?s); ?s ~: ?b |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 7),
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app
                       (template_hole 6,
                        template_app
                         (template_app (template_hole 5, template_var 6),
                          template_var 5)),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 4, template_var 3),
                    template_app (template_hole 3, template_var 2)))),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 5),
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 5, template_var 6),
                         template_var 5)),
                     template_var 4))),
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_app (template_hole 3, template_var 2))))],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 6)
                 )],
            template_predicate (template_var 0))),
        template_implication
         ([template_equation
            (template_var 1,
             template_app
              (template_app (template_hole 7, template_var 4),
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_app (template_hole 3, template_var 2))))],
          template_implication
           ([template_negation
              (
                 template_predicate
                  (
                     template_app
                      (template_app (template_hole 1, template_var 2),
                       template_var 6)
                     )
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("AlternativeSmallStep.step_Normal_elim_cases",
     "[| ?\<Gamma>\<turnstile> (Call ?p # ?cs, ?css,
                                Normal ?s) \<rightarrow>
                               ?u;
         !!bdy.
            [| ?u = ([bdy], (?cs, Throw # ?cs) # ?css, Normal ?s);
               ?\<Gamma> ?p = Some bdy |]
            ==> ?P;
         [| ?u = (?cs, ?css, Stuck); ?\<Gamma> ?p = None |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 15, template_var 6),
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_app
                       (template_hole 13,
                        template_app (template_hole 12, template_var 5)),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 11, template_var 3),
                    template_app (template_hole 10, template_var 2)))),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_implication
         ([template_equation
            (template_var 1,
             template_app
              (template_app (template_hole 14, template_var 4),
               template_app
                (template_app (template_hole 11, template_var 3),
                 template_hole 1)))],
          template_implication
           ([template_equation
              (template_app (template_var 6, template_var 5),
               template_hole 0)],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("AlternativeSmallStep.step_Nil",
     "[| ?\<Gamma>\<turnstile> ([], ?ass @ ?css, ?s) \<rightarrow>
                               (?cs', ?css', ?t);
         ?ass ~= [] |]
      ==> ?css' = tl ?ass @ ?css &
          (case ?s of Abrupt s' => ?cs' = snd (hd ?ass) & ?t = Normal s'
           | _ => ?cs' = fst (hd ?ass) & ?t = ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 16, template_var 6),
                template_app
                 (template_app (template_hole 15, template_hole 14),
                  template_app
                   (template_app
                     (template_hole 13,
                      template_app
                       (template_app (template_hole 12, template_var 5),
                        template_var 4)),
                    template_var 3))),
              template_app
               (template_app (template_hole 15, template_var 2),
                template_app
                 (template_app (template_hole 13, template_var 1),
                  template_var 0)))
            ),
        template_negation
         (template_equation (template_var 5, template_hole 9))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 10, template_var 1),
                 template_app
                  (template_app
                    (template_hole 12,
                     template_app (template_hole 7, template_var 5)),
                   template_var 4))),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 6, t_empty), t_empty),
                   t_empty),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 5, template_var 2),
                       template_app
                        (template_hole 4,
                         template_app (template_hole 3, template_var 5)))),
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 3))),
               template_var 3))
           ))),
    ("AlternativeSmallStep.rtrancl_induct3",
     "[| ?r^** (?ax, ?ay, ?az) (?bx, ?by, ?bz); ?P ?ax ?ay ?az;
         !!a aa b ab ac ba.
            [| ?r^** (?ax, ?ay, ?az) (a, aa, b); ?r (a, aa, b) (ab, ac, ba);
               ?P a aa b |]
            ==> ?P ab ac ba |]
      ==> ?P ?bx ?by ?bz",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 7),
                template_app
                 (template_app (template_hole 4, template_var 6),
                  template_app
                   (template_app (template_hole 3, template_var 5),
                    template_var 4))),
              template_app
               (template_app (template_hole 4, template_var 3),
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_var 0, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 0, template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("AlternativeSmallStep.converse_rtrancl_induct3",
     "[| ?r^** (?cs, ?css, ?s) (?cs', ?css', ?t); ?P ?cs' ?css' ?t;
         !!a aa b ab ac ba.
            [| ?r (a, aa, b) (ab, ac, ba);
               ?r^** (ab, ac, ba) (?cs', ?css', ?t); ?P ab ac ba |]
            ==> ?P a aa b |]
      ==> ?P ?cs ?css ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 7),
                template_app
                 (template_app (template_hole 4, template_var 6),
                  template_app
                   (template_app (template_hole 3, template_var 5),
                    template_var 4))),
              template_app
               (template_app (template_hole 4, template_var 3),
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_var 0, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 0, template_var 6),
               template_var 5),
             template_var 4)
           ))),
    ("AlternativeSmallStep.step_Nil'",
     "[| ?\<Gamma>\<turnstile> (?cs, ?asscss, ?s) \<rightarrow>
                               (?cs', ?css', ?t);
         ?cs = []; ?asscss = ?ass @ ?css; ?ass ~= [] |]
      ==> ?css' = tl ?ass @ ?css &
          (case ?s of Abrupt s' => ?cs' = snd (hd ?ass) & ?t = Normal s'
           | _ => ?cs' = fst (hd ?ass) & ?t = ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 16, template_var 8),
                template_app
                 (template_app (template_hole 15, template_var 7),
                  template_app
                   (template_app (template_hole 14, template_var 6),
                    template_var 5))),
              template_app
               (template_app (template_hole 15, template_var 4),
                template_app
                 (template_app (template_hole 14, template_var 3),
                  template_var 2)))
            ),
        template_equation (template_var 7, template_hole 12),
        template_equation
         (template_var 6,
          template_app
           (template_app (template_hole 10, template_var 1),
            template_var 0)),
        template_negation
         (template_equation (template_var 1, template_hole 8))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 11, template_var 3),
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app (template_hole 6, template_var 1)),
                   template_var 0))),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 5, t_empty), t_empty),
                   t_empty),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 13, template_var 4),
                       template_app
                        (template_hole 4,
                         template_app (template_hole 3, template_var 1)))),
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 5))),
               template_var 5))
           ))),
    ("AlternativeSmallStep.step_elim_cases",
     "[| ?\<Gamma>\<turnstile> (Skip # ?cs, ?css, ?s) \<rightarrow> ?u;
         !!s. [| ?s = Normal s; ?u = (?cs, ?css, Normal s) |] ==> ?P;
         !!f. [| ?s = Fault f; ?u = (?cs, ?css, Fault f) |] ==> ?P;
         !!s. [| ?s = Abrupt s; ?u = (?cs, ?css, Abrupt s) |] ==> ?P;
         [| ?s = Stuck; ?u = (?cs, ?css, Stuck) |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 12, template_var 5),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app (template_hole 10, template_hole 9),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 8, template_var 3),
                    template_var 2))),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_implication
         ([template_equation (template_var 2, template_hole 0)],
          template_implication
           ([template_equation
              (template_var 1,
               template_app
                (template_app (template_hole 11, template_var 4),
                 template_app
                  (template_app (template_hole 8, template_var 3),
                   template_hole 0)))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("AlternativeSmallStep.step_elim_cases",
     "[| ?\<Gamma>\<turnstile> (Throw # ?cs, ?css, ?s) \<rightarrow> ?u;
         !!f. [| ?s = Fault f; ?u = (?cs, ?css, Fault f) |] ==> ?P;
         !!s. [| ?s = Abrupt s; ?u = (?cs, ?css, Abrupt s) |] ==> ?P;
         [| ?s = Stuck; ?u = (?cs, ?css, Stuck) |] ==> ?P;
         !!s. [| ?s = Normal s; ?u = (?cs, ?css, Abrupt s) |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 12, template_var 5),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app (template_hole 10, template_hole 9),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 8, template_var 3),
                    template_var 2))),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_implication
         ([template_equation (template_var 2, template_hole 1)],
          template_implication
           ([template_equation
              (template_var 1,
               template_app
                (template_app (template_hole 11, template_var 4),
                 template_app
                  (template_app (template_hole 8, template_var 3),
                   template_hole 1)))],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("AlternativeSmallStep.trancl_induct3",
     "[| ?r^++ (?ax, ?ay, ?az) (?bx, ?by, ?bz);
         !!a aa b. ?r (?ax, ?ay, ?az) (a, aa, b) ==> ?P a aa b;
         !!a aa b ab ac ba.
            [| ?r^++ (?ax, ?ay, ?az) (a, aa, b); ?r (a, aa, b) (ab, ac, ba);
               ?P a aa b |]
            ==> ?P ab ac ba |]
      ==> ?P ?bx ?by ?bz",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 7),
                template_app
                 (template_app (template_hole 4, template_var 6),
                  template_app
                   (template_app (template_hole 3, template_var 5),
                    template_var 4))),
              template_app
               (template_app (template_hole 4, template_var 3),
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)))
            ),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 0, template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("AlternativeSmallStep.step_elim_cases",
     "[| ?\<Gamma>\<turnstile> (Basic ?f # ?cs, ?css, ?s) \<rightarrow> ?u;
         !!f. [| ?s = Fault f; ?u = (?cs, ?css, Fault f) |] ==> ?P;
         !!s. [| ?s = Abrupt s; ?u = (?cs, ?css, Abrupt s) |] ==> ?P;
         !!s. [| ?s = Normal s; ?u = (?cs, ?css, Normal (?f s)) |] ==> ?P;
         [| ?s = Stuck; ?u = (?cs, ?css, Stuck) |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 12, template_var 6),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app (template_hole 9, template_var 5)),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 8, template_var 3),
                    template_var 2))),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_implication
         ([template_equation (template_var 2, template_hole 0)],
          template_implication
           ([template_equation
              (template_var 1,
               template_app
                (template_app (template_hole 11, template_var 4),
                 template_app
                  (template_app (template_hole 8, template_var 3),
                   template_hole 0)))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("AlternativeSmallStep.step_elim_cases",
     "[| ?\<Gamma>\<turnstile> (DynCom ?c # ?cs, ?css, ?s) \<rightarrow> ?u;
         !!f. [| ?s = Fault f; ?u = (?cs, ?css, Fault f) |] ==> ?P;
         !!s. [| ?s = Abrupt s; ?u = (?cs, ?css, Abrupt s) |] ==> ?P;
         [| ?s = Stuck; ?u = (?cs, ?css, Stuck) |] ==> ?P;
         !!s. [| ?s = Normal s; ?u = (?c s # ?cs, ?css, Normal s) |]
              ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 12, template_var 6),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app (template_hole 9, template_var 5)),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 8, template_var 3),
                    template_var 2))),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_implication
         ([template_equation (template_var 2, template_hole 1)],
          template_implication
           ([template_equation
              (template_var 1,
               template_app
                (template_app (template_hole 11, template_var 4),
                 template_app
                  (template_app (template_hole 8, template_var 3),
                   template_hole 1)))],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("AlternativeSmallStep.step_elim_cases",
     "[| ?\<Gamma>\<turnstile> (Seq ?c1.0 ?c2.0 # ?cs, ?css,
                                ?s) \<rightarrow>
                               ?u;
         !!f. [| ?s = Fault f; ?u = (?cs, ?css, Fault f) |] ==> ?P;
         !!s. [| ?s = Abrupt s; ?u = (?cs, ?css, Abrupt s) |] ==> ?P;
         !!s. [| ?s = Normal s;
                 ?u = (?c1.0 # ?c2.0 # ?cs, ?css, Normal s) |]
              ==> ?P;
         [| ?s = Stuck; ?u = (?cs, ?css, Stuck) |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 12, template_var 7),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app
                         (template_app (template_hole 9, template_var 6),
                          template_var 5)),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 8, template_var 3),
                    template_var 2))),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_implication
         ([template_equation (template_var 2, template_hole 0)],
          template_implication
           ([template_equation
              (template_var 1,
               template_app
                (template_app (template_hole 11, template_var 4),
                 template_app
                  (template_app (template_hole 8, template_var 3),
                   template_hole 0)))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("AlternativeSmallStep.step_elim_cases",
     "[| ?\<Gamma>\<turnstile> (Catch ?c1.0 ?c2.0 # ?cs, ?css,
                                ?s) \<rightarrow>
                               ?u;
         !!f. [| ?s = Fault f; ?u = (?cs, ?css, Fault f) |] ==> ?P;
         !!s. [| ?s = Abrupt s; ?u = (?cs, ?css, Abrupt s) |] ==> ?P;
         [| ?s = Stuck; ?u = (?cs, ?css, Stuck) |] ==> ?P;
         !!s. [| ?s = Normal s;
                 ?u = ([?c1.0], (?cs, ?c2.0 # ?cs) # ?css, Normal s) |]
              ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 15, template_var 7),
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_app
                       (template_hole 13,
                        template_app
                         (template_app (template_hole 12, template_var 6),
                          template_var 5)),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 11, template_var 3),
                    template_var 2))),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_implication
         ([template_equation (template_var 2, template_hole 4)],
          template_implication
           ([template_equation
              (template_var 1,
               template_app
                (template_app (template_hole 14, template_var 4),
                 template_app
                  (template_app (template_hole 11, template_var 3),
                   template_hole 4)))],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("AlternativeSmallStep.step_elim_cases",
     "[| ?\<Gamma>\<turnstile> (Guard ?f ?g ?c # ?cs, ?css,
                                ?s) \<rightarrow>
                               ?u;
         !!s. [| ?s = Normal s; ?u = (?c # ?cs, ?css, Normal s); s : ?g |]
              ==> ?P;
         !!s. [| ?s = Normal s; ?u = (?cs, ?css, Fault ?f); s ~: ?g |]
              ==> ?P;
         !!f. [| ?s = Fault f; ?u = (?cs, ?css, Fault f) |] ==> ?P;
         !!s. [| ?s = Abrupt s; ?u = (?cs, ?css, Abrupt s) |] ==> ?P;
         [| ?s = Stuck; ?u = (?cs, ?css, Stuck) |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 14, template_var 8),
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_app
                       (template_hole 12,
                        template_app
                         (template_app
                           (template_app (template_hole 11, template_var 7),
                            template_var 6),
                          template_var 5)),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 10, template_var 3),
                    template_var 2))),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_implication
         ([template_equation (template_var 2, template_hole 0)],
          template_implication
           ([template_equation
              (template_var 1,
               template_app
                (template_app (template_hole 13, template_var 4),
                 template_app
                  (template_app (template_hole 10, template_var 3),
                   template_hole 0)))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("AlternativeSmallStep.step_elim_cases",
     "[| ?\<Gamma>\<turnstile> (Cond ?b ?c1.0 ?c2.0 # ?cs, ?css,
                                ?s) \<rightarrow>
                               ?u;
         !!f. [| ?s = Fault f; ?u = (?cs, ?css, Fault f) |] ==> ?P;
         !!s. [| ?s = Abrupt s; ?u = (?cs, ?css, Abrupt s) |] ==> ?P;
         !!s. [| ?s = Normal s; ?u = (?c1.0 # ?cs, ?css, Normal s);
                 s : ?b |]
              ==> ?P;
         !!s. [| ?s = Normal s; ?u = (?c2.0 # ?cs, ?css, Normal s);
                 s ~: ?b |]
              ==> ?P;
         [| ?s = Stuck; ?u = (?cs, ?css, Stuck) |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 14, template_var 8),
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_app
                       (template_hole 12,
                        template_app
                         (template_app
                           (template_app (template_hole 11, template_var 7),
                            template_var 6),
                          template_var 5)),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 10, template_var 3),
                    template_var 2))),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_implication
         ([template_equation (template_var 2, template_hole 0)],
          template_implication
           ([template_equation
              (template_var 1,
               template_app
                (template_app (template_hole 13, template_var 4),
                 template_app
                  (template_app (template_hole 10, template_var 3),
                   template_hole 0)))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("AlternativeSmallStep.step_elim_cases",
     "[| ?\<Gamma>\<turnstile> (Spec ?r # ?cs, ?css, ?s) \<rightarrow> ?u;
         !!f. [| ?s = Fault f; ?u = (?cs, ?css, Fault f) |] ==> ?P;
         !!s. [| ?s = Abrupt s; ?u = (?cs, ?css, Abrupt s) |] ==> ?P;
         !!s t.
            [| ?s = Normal s; ?u = (?cs, ?css, Normal t); (s, t) : ?r |]
            ==> ?P;
         !!s. [| ?s = Normal s; ?u = (?cs, ?css, Stuck);
                 ALL t. (s, t) ~: ?r |]
              ==> ?P;
         [| ?s = Stuck; ?u = (?cs, ?css, Stuck) |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 16, template_var 6),
                template_app
                 (template_app
                   (template_hole 15,
                    template_app
                     (template_app
                       (template_hole 14,
                        template_app (template_hole 13, template_var 5)),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 12, template_var 3),
                    template_var 2))),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_implication
         ([template_equation (template_var 2, template_hole 2)],
          template_implication
           ([template_equation
              (template_var 1,
               template_app
                (template_app (template_hole 15, template_var 4),
                 template_app
                  (template_app (template_hole 12, template_var 3),
                   template_hole 2)))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("AlternativeSmallStep.step_elim_cases",
     "[| ?\<Gamma>\<turnstile> (While ?b ?c # ?cs, ?css, ?s) \<rightarrow>
                               ?u;
         !!f. [| ?s = Fault f; ?u = (?cs, ?css, Fault f) |] ==> ?P;
         !!s. [| ?s = Abrupt s; ?u = (?cs, ?css, Abrupt s) |] ==> ?P;
         !!s. [| ?s = Normal s;
                 ?u = (?c # While ?b ?c # ?cs, ?css, Normal s); s : ?b |]
              ==> ?P;
         !!s. [| ?s = Normal s; ?u = (?cs, ?css, Normal s); s ~: ?b |]
              ==> ?P;
         [| ?s = Stuck; ?u = (?cs, ?css, Stuck) |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 14, template_var 7),
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_app
                       (template_hole 12,
                        template_app
                         (template_app (template_hole 11, template_var 6),
                          template_var 5)),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 10, template_var 3),
                    template_var 2))),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_implication
         ([template_equation (template_var 2, template_hole 0)],
          template_implication
           ([template_equation
              (template_var 1,
               template_app
                (template_app (template_hole 13, template_var 4),
                 template_app
                  (template_app (template_hole 10, template_var 3),
                   template_hole 0)))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("AlternativeSmallStep.Call_lemma",
     "ALL q:dom ?\<Gamma>.
         ALL Z.
            ?\<Gamma>,?\<Theta>
               \<turnstile>\<^sub>t\<^bsub>/?F\<^esub> {s.
                  s = Z &
                  ?\<Gamma>\<turnstile> \<langle>Call
            q,Normal
               s\<rangle> \<Rightarrow>\<notin>{Stuck} Un Fault ` (- ?F) &
                  ?\<Gamma>\<turnstile>Call q \<down> Normal s &
                  ((s, q), ?\<sigma>, ?p) : termi_call_steps ?\<Gamma>}
                 Call q
                 {t. ?\<Gamma>\<turnstile> \<langle>Call
               q,Normal
                  Z\<rangle> \<Rightarrow> Normal
      t},{t. ?\<Gamma>\<turnstile> \<langle>Call
       q,Normal Z\<rangle> \<Rightarrow> Abrupt t} ==>
      ?\<Gamma>,?\<Theta>
         \<turnstile>\<^sub>t\<^bsub>/?F\<^esub> ({?\<sigma>} Int
            {s. s = ?Z &
                ?\<Gamma>\<turnstile> \<langle>the
          (?\<Gamma>
            ?p),Normal
                 s\<rangle> \<Rightarrow>\<notin>{Stuck} Un Fault ` (- ?F) &
                ?\<Gamma>\<turnstile>the (?\<Gamma> ?p) \<down> Normal s})
           the (?\<Gamma> ?p)
           {t. ?\<Gamma>\<turnstile> \<langle>the
         (?\<Gamma>
           ?p),Normal
                ?Z\<rangle> \<Rightarrow> Normal
     t},{t. ?\<Gamma>\<turnstile> \<langle>the
      (?\<Gamma> ?p),Normal ?Z\<rangle> \<Rightarrow> Abrupt t}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 27,
                template_app (template_hole 26, template_var 5)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 24, template_var 5),
                       template_var 4),
                     template_var 3),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 2),
                         template_hole 1)),
                     template_app (template_hole 23, t_empty))),
                 template_app
                  (template_hole 0,
                   template_app (template_var 5, template_var 1))),
               template_app (template_hole 23, t_empty)),
             template_app (template_hole 23, t_empty))
           ))),
    ("AlternativeSmallStep.Call_lemma_switch_Call_body",
     "[| ALL q:dom ?\<Gamma>.
            ALL Z.
               ?\<Gamma>,?\<Theta>
                  \<turnstile>\<^sub>t\<^bsub>/?F\<^esub> {s.
                     s = Z &
                     ?\<Gamma>\<turnstile> \<langle>Call
               q,Normal
                  s\<rangle> \<Rightarrow>\<notin>{Stuck} Un
            Fault ` (- ?F) &
                     ?\<Gamma>\<turnstile>Call q \<down> Normal s &
                     ((s, q), ?\<sigma>, ?p) : termi_call_steps ?\<Gamma>}
                    Call q
                    {t. ?\<Gamma>\<turnstile> \<langle>Call
                  q,Normal
                     Z\<rangle> \<Rightarrow> Normal
         t},{t. ?\<Gamma>\<turnstile> \<langle>Call
          q,Normal Z\<rangle> \<Rightarrow> Abrupt t};
         ?p : dom ?\<Gamma> |]
      ==> ?\<Gamma>,?\<Theta>
             \<turnstile>\<^sub>t\<^bsub>/?F\<^esub> ({?\<sigma>} Int
                {s. s = ?Z &
                    ?\<Gamma>\<turnstile> \<langle>Call
              ?p,Normal
                  s\<rangle> \<Rightarrow>\<notin>{Stuck} Un
            Fault ` (- ?F) &
                    ?\<Gamma>\<turnstile>Call ?p \<down> Normal s})
               the (?\<Gamma> ?p)
               {t. ?\<Gamma>\<turnstile> \<langle>Call
             ?p,Normal
                 ?Z\<rangle> \<Rightarrow> Normal
      t},{t. ?\<Gamma>\<turnstile> \<langle>Call
       ?p,Normal ?Z\<rangle> \<Rightarrow> Abrupt t}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 28,
                template_app (template_hole 27, template_var 5)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 27, template_var 5))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 25, template_var 5),
                       template_var 4),
                     template_var 3),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 2),
                         template_hole 1)),
                     template_app (template_hole 24, t_empty))),
                 template_app
                  (template_hole 0,
                   template_app (template_var 5, template_var 1))),
               template_app (template_hole 24, t_empty)),
             template_app (template_hole 24, t_empty))
           ))),
    ("AlternativeSmallStep.step_elim_cases",
     "[| ?\<Gamma>\<turnstile> (Call ?p # ?cs, ?css, ?s) \<rightarrow> ?u;
         !!f. [| ?s = Fault f; ?u = (?cs, ?css, Fault f) |] ==> ?P;
         !!s. [| ?s = Abrupt s; ?u = (?cs, ?css, Abrupt s) |] ==> ?P;
         !!bdy s.
            [| ?s = Normal s;
               ?u = ([bdy], (?cs, Throw # ?cs) # ?css, Normal s);
               ?\<Gamma> ?p = Some bdy |]
            ==> ?P;
         !!s. [| ?s = Normal s; ?u = (?cs, ?css, Stuck);
                 ?\<Gamma> ?p = None |]
              ==> ?P;
         [| ?s = Stuck; ?u = (?cs, ?css, Stuck) |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 20, template_var 6),
                template_app
                 (template_app
                   (template_hole 19,
                    template_app
                     (template_app
                       (template_hole 18,
                        template_app (template_hole 17, template_var 5)),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 16, template_var 3),
                    template_var 2))),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_implication
         ([template_equation (template_var 2, template_hole 1)],
          template_implication
           ([template_equation
              (template_var 1,
               template_app
                (template_app (template_hole 19, template_var 4),
                 template_app
                  (template_app (template_hole 16, template_var 3),
                   template_hole 1)))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("AlternativeSmallStep.Call_lemma'",
     "ALL q:dom ?\<Gamma>.
         ALL Z.
            ?\<Gamma>,?\<Theta>
               \<turnstile>\<^sub>t\<^bsub>/?F\<^esub> {s.
                  s = Z &
                  ?\<Gamma>\<turnstile> \<langle>Call
            q,Normal
               s\<rangle> \<Rightarrow>\<notin>{Stuck} Un Fault ` (- ?F) &
                  ?\<Gamma>\<turnstile>Call q \<down> Normal s &
                  ((s, q), ?\<sigma>, ?p) : termi_call_steps ?\<Gamma>}
                 Call q
                 {t. ?\<Gamma>\<turnstile> \<langle>Call
               q,Normal
                  Z\<rangle> \<Rightarrow> Normal
      t},{t. ?\<Gamma>\<turnstile> \<langle>Call
       q,Normal Z\<rangle> \<Rightarrow> Abrupt t} ==>
      ?\<Gamma>,?\<Theta>
         \<turnstile>\<^sub>t\<^bsub>/?F\<^esub> {s.
            s = ?Z &
            ?\<Gamma>\<turnstile> \<langle>?c,Normal
         s\<rangle> \<Rightarrow>\<notin>{Stuck} Un Fault ` (- ?F) &
            ?\<Gamma>\<turnstile>the (?\<Gamma>
 ?p) \<down> Normal ?\<sigma> &
            (EX cs css.
                ?\<Gamma>\<turnstile> ([the (?\<Gamma> ?p)], [],
 Normal ?\<sigma>) \<rightarrow>\<^sup>*
(?c # cs, css, Normal s))}
           ?c {t. ?\<Gamma>\<turnstile> \<langle>?c,Normal
               ?Z\<rangle> \<Rightarrow> Normal
    t},{t. ?\<Gamma>\<turnstile> \<langle>?c,Normal
        ?Z\<rangle> \<Rightarrow> Abrupt t}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 33,
                template_app (template_hole 32, template_var 6)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 30, template_var 6),
                       template_var 5),
                     template_var 4),
                   template_app (template_hole 29, t_empty)),
                 template_var 0),
               template_app (template_hole 29, t_empty)),
             template_app (template_hole 29, t_empty))
           ))),
    ("AlternativeSmallStep.terminatess_elim_cases",
     "[| ?\<Gamma>\<turnstile>[],?css \<Down> ?t; ?css = [] ==> ?P;
         !!nrms css s abrs.
            [| ?css = (nrms, abrs) # css; ?t = Normal s;
               ?\<Gamma>\<turnstile>nrms,css \<Down> Normal s |]
            ==> ?P;
         !!abrs css s nrms.
            [| ?css = (nrms, abrs) # css; ?t = Abrupt s;
               ?\<Gamma>\<turnstile>abrs,css \<Down> Normal s |]
            ==> ?P;
         !!nrms css f abrs.
            [| ?css = (nrms, abrs) # css; ?t = Fault f;
               ?\<Gamma>\<turnstile>nrms,css \<Down> Fault f |]
            ==> ?P;
         !!nrms css abrs.
            [| ?css = (nrms, abrs) # css; ?t = Stuck;
               ?\<Gamma>\<turnstile>nrms,css \<Down> Stuck |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 14, template_var 3),
                  template_hole 13),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 2, template_hole 11)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate (template_var 0))),
    ("AlternativeSmallStep.execs_elim_cases",
     "[| ?\<Gamma>\<turnstile> \<langle>[],?css,?s\<rangle> \<Rightarrow> ?t;
         [| ?css = []; ?t = ?s |] ==> ?P;
         !!nrms css s abrs.
            [| ?css = (nrms, abrs) # css; ?s = Normal s;
               ?\<Gamma>\<turnstile> \<langle>nrms,css,Normal
                  s\<rangle> \<Rightarrow> ?t |]
            ==> ?P;
         !!abrs css s nrms.
            [| ?css = (nrms, abrs) # css; ?s = Abrupt s;
               ?\<Gamma>\<turnstile> \<langle>abrs,css,Normal
                  s\<rangle> \<Rightarrow> ?t |]
            ==> ?P;
         !!nrms css f abrs.
            [| ?css = (nrms, abrs) # css; ?s = Fault f;
               ?\<Gamma>\<turnstile> \<langle>nrms,css,Fault
                  f\<rangle> \<Rightarrow> ?t |]
            ==> ?P;
         !!nrms css abrs.
            [| ?css = (nrms, abrs) # css; ?s = Stuck;
               ?\<Gamma>\<turnstile> \<langle>nrms,css,Stuck\<rangle> \<Rightarrow> ?t |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 14, template_var 4),
                    template_hole 13),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 3, template_hole 11)],
          template_implication
           ([template_equation (template_var 1, template_var 2)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate (template_var 0))),
    ("AlternativeSmallStep.step_induct",
     "[| ?\<Gamma>\<turnstile> (?c, ?css, ?s) \<rightarrow>
                               (?c', ?css', ?s');
         !!cs css s. ?P (Skip # cs) css (Normal s) cs css (Normal s);
         !!s g f c cs css.
            s : g ==>
            ?P (Guard f g c # cs) css (Normal s) (c # cs) css (Normal s);
         !!s g f c cs css.
            s ~: g ==>
            ?P (Guard f g c # cs) css (Normal s) cs css (Fault f);
         !!c cs css f. ?P (c # cs) css (Fault f) cs css (Fault f);
         !!nrms abrs css f.
            ?P [] ((nrms, abrs) # css) (Fault f) nrms css (Fault f);
         !!c cs css s. ?P (c # cs) css (Abrupt s) cs css (Abrupt s);
         !!nrms abrs css s.
            ?P [] ((nrms, abrs) # css) (Normal s) nrms css (Normal s);
         !!nrms abrs css s.
            ?P [] ((nrms, abrs) # css) (Abrupt s) abrs css (Normal s);
         !!f cs css s.
            ?P (Basic f # cs) css (Normal s) cs css (Normal (f s));
         !!s t r cs css.
            (s, t) : r ==>
            ?P (Spec r # cs) css (Normal s) cs css (Normal t);
         !!s r cs css.
            ALL t. (s, t) ~: r ==>
            ?P (Spec r # cs) css (Normal s) cs css Stuck;
         !!c\<^sub>1 c\<^sub>2 cs css s.
            ?P (Seq c\<^sub>1 c\<^sub>2 # cs) css (Normal s)
             (c\<^sub>1 # c\<^sub>2 # cs) css (Normal s);
         !!s b c\<^sub>1 c\<^sub>2 cs css.
            s : b ==>
            ?P (Cond b c\<^sub>1 c\<^sub>2 # cs) css (Normal s)
             (c\<^sub>1 # cs) css (Normal s);
         !!s b c\<^sub>1 c\<^sub>2 cs css.
            s ~: b ==>
            ?P (Cond b c\<^sub>1 c\<^sub>2 # cs) css (Normal s)
             (c\<^sub>2 # cs) css (Normal s);
         !!s b c cs css.
            s : b ==>
            ?P (While b c # cs) css (Normal s) (c # While b c # cs) css
             (Normal s);
         !!s b c cs css.
            s ~: b ==> ?P (While b c # cs) css (Normal s) cs css (Normal s);
         !!p bdy cs css s.
            ?\<Gamma> p = Some bdy ==>
            ?P (Call p # cs) css (Normal s) [bdy] ((cs, Throw # cs) # css)
             (Normal s);
         !!p cs css s.
            ?\<Gamma> p = None ==>
            ?P (Call p # cs) css (Normal s) cs css Stuck;
         !!c cs css. ?P (c # cs) css Stuck cs css Stuck;
         !!nrms abrs css. ?P [] ((nrms, abrs) # css) Stuck nrms css Stuck;
         !!c cs css s.
            ?P (DynCom c # cs) css (Normal s) (c s # cs) css (Normal s);
         !!cs css s. ?P (Throw # cs) css (Normal s) cs css (Abrupt s);
         !!c\<^sub>1 c\<^sub>2 cs css s.
            ?P (Catch c\<^sub>1 c\<^sub>2 # cs) css (Normal s) [c\<^sub>1]
             ((cs, c\<^sub>2 # cs) # css) (Normal s) |]
      ==> ?P ?c ?css ?s ?c' ?css' ?s'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 39, t_empty),
                template_app
                 (template_app (template_hole 38, template_var 6),
                  template_app
                   (template_app (template_hole 37, template_var 5),
                    template_var 4))),
              template_app
               (template_app (template_hole 38, template_var 3),
                template_app
                 (template_app (template_hole 37, template_var 2),
                  template_var 1)))
            ),
        template_predicate (template_app (template_hole 36, t_empty)),
        template_predicate (template_app (template_hole 34, t_empty)),
        template_predicate (template_app (template_hole 34, t_empty)),
        template_predicate (template_app (template_hole 28, t_empty)),
        template_predicate (template_app (template_hole 36, t_empty)),
        template_predicate (template_app (template_hole 28, t_empty)),
        template_predicate (template_app (template_hole 36, t_empty)),
        template_predicate (template_app (template_hole 36, t_empty)),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate (template_app (template_hole 34, t_empty)),
        template_predicate (template_app (template_hole 34, t_empty)),
        template_predicate (template_app (template_hole 28, t_empty)),
        template_predicate (template_app (template_hole 34, t_empty)),
        template_predicate (template_app (template_hole 34, t_empty)),
        template_predicate (template_app (template_hole 34, t_empty)),
        template_predicate (template_app (template_hole 34, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 28, t_empty)),
        template_predicate (template_app (template_hole 36, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 36, t_empty)),
        template_predicate (template_app (template_hole 28, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_var 0, template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)
           )))]:
   (string * thm * template) list
### theory "Draft.AlternativeSmallStepTemplates"
### 0.502s elapsed time, 0.684s cpu time, 0.054s GC time
val it = (): unit
