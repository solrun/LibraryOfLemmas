Loading theory "HOL-Library.Cancellation" (required by "Draft.Descartes_Sign_RuleMoreTemplates" via "Draft.Descartes_Sign_Rule" via "HOL-Computational_Algebra.Polynomial" via "HOL-Computational_Algebra.Factorial_Ring" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Descartes_Sign_RuleMoreTemplates" via "Draft.Descartes_Sign_Rule" via "HOL-Computational_Algebra.Polynomial")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Descartes_Sign_RuleMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.More_List" (required by "Draft.Descartes_Sign_RuleMoreTemplates" via "Draft.Descartes_Sign_Rule" via "HOL-Computational_Algebra.Polynomial")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.121s elapsed time, 0.499s cpu time, 0.051s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Descartes_Sign_RuleMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.More_List"
### 0.200s elapsed time, 0.814s cpu time, 0.051s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Descartes_Sign_RuleMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Infinite_Set"
### 0.315s elapsed time, 1.250s cpu time, 0.146s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Descartes_Sign_RuleMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
### theory "HOL-Library.Set_Algebras"
### 0.215s elapsed time, 0.846s cpu time, 0.095s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Descartes_Sign_RuleMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.311s elapsed time, 1.231s cpu time, 0.095s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Descartes_Sign_RuleMoreTemplates" via "Draft.ExtrEqs")
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.500s elapsed time, 1.983s cpu time, 0.241s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Descartes_Sign_RuleMoreTemplates" via "Draft.Descartes_Sign_Rule" via "HOL-Computational_Algebra.Polynomial" via "HOL-Computational_Algebra.Factorial_Ring")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
consts
  shift :: "'a list => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
Proofs for coinductive predicate(s) "streamsp"
consts
  right :: "'a tree => 'a tree"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.073s elapsed time, 4.007s cpu time, 0.976s GC time
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.105s elapsed time, 4.085s cpu time, 0.881s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
Found termination order: "size <*mlex*> {}"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  mset :: "'a list => 'a multiset"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
### theory "HOL-Library.Tree"
### 2.056s elapsed time, 6.381s cpu time, 1.234s GC time
Loading theory "Draft.Templates" (required by "Draft.Descartes_Sign_RuleMoreTemplates" via "Draft.ExtrEqs")
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.105s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Descartes_Sign_RuleMoreTemplates")
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.557s elapsed time, 1.181s cpu time, 0.165s GC time
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 3.123s elapsed time, 7.583s cpu time, 1.407s GC time
Loading theory "HOL-Computational_Algebra.Factorial_Ring" (required by "Draft.Descartes_Sign_RuleMoreTemplates" via "Draft.Descartes_Sign_Rule" via "HOL-Computational_Algebra.Polynomial")
class normalization_semidom = algebraic_semidom +
  semidom_divide_unit_factor +
  fixes normalize :: "'a => 'a"
  assumes
    "unit_factor_mult_normalize": "!!a. unit_factor a * normalize a = a"
    and "normalize_0": "normalize (0::'a) = (0::'a)"
class semiring_gcd = gcd + normalization_semidom +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
    and "normalize_gcd": "!!a b. normalize (gcd a b) = gcd a b"
    and "lcm_gcd": "!!a b. lcm a b = normalize (a * b div gcd a b)"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
class factorial_semiring_gcd = factorial_semiring + Gcd +
  assumes "gcd_eq_gcd_factorial": "!!a b. gcd a b = gcd_factorial a b"
    and "lcm_eq_lcm_factorial": "!!a b. lcm a b = lcm_factorial a b"
    and "Gcd_eq_Gcd_factorial": "!!A. Gcd A = Gcd_factorial A"
    and "Lcm_eq_Lcm_factorial": "!!A. Lcm A = Lcm_factorial A"
### theory "HOL-Computational_Algebra.Factorial_Ring"
### 5.222s elapsed time, 6.864s cpu time, 2.242s GC time
Loading theory "HOL-Computational_Algebra.Polynomial" (required by "Draft.Descartes_Sign_RuleMoreTemplates" via "Draft.Descartes_Sign_Rule")
instantiation
  poly :: (zero) zero
  zero_poly == zero_class.zero :: 'a poly
consts
  Poly :: "'a list => 'a poly"
instantiation
  poly :: ({zero,equal}) equal
  equal_poly == equal_class.equal :: 'a poly => 'a poly => bool
instantiation
  poly :: (comm_monoid_add) comm_monoid_add
  plus_poly == plus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (cancel_comm_monoid_add) cancel_comm_monoid_add
  minus_poly == minus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (ab_group_add) ab_group_add
  uminus_poly == uminus :: 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
instantiation
  poly :: (comm_semiring_0) comm_semiring_0
  times_poly == times :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (comm_semiring_1) comm_semiring_1
  one_poly == one_class.one :: 'a poly
instantiation
  poly :: (linordered_idom) linordered_idom
  sgn_poly == sgn :: 'a poly => 'a poly
  abs_poly == abs :: 'a poly => 'a poly
  less_eq_poly == less_eq :: 'a poly => 'a poly => bool
  less_poly == less :: 'a poly => 'a poly => bool
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "algebraic_int"
  Proving monotonicity ...
instantiation
  poly :: (idom_divide) idom_divide
  divide_poly == divide :: 'a poly => 'a poly => 'a poly
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
instantiation
  poly :: ({idom_divide,semidom_divide_unit_factor}) normalization_semidom
  normalize_poly == normalize :: 'a poly => 'a poly
  unit_factor_poly == unit_factor :: 'a poly => 'a poly
class field_unit_factor = field + unit_factor +
  assumes "unit_factor_field": "unit_factor = id"
Proofs for inductive predicate(s) "eucl_rel_poly"
  Proving monotonicity ...
instantiation
  poly :: (field) semidom_modulo
  modulo_poly == modulo :: 'a poly => 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
### theory "HOL-Computational_Algebra.Polynomial"
### 4.107s elapsed time, 4.675s cpu time, 0.637s GC time
Loading theory "Draft.Descartes_Sign_Rule" (required by "Draft.Descartes_Sign_RuleMoreTemplates")
Found termination order: "length <*mlex*> {}"
### theory "Draft.Descartes_Sign_Rule"
### 0.222s elapsed time, 0.223s cpu time, 0.000s GC time
Loading theory "Draft.Descartes_Sign_RuleMoreTemplates"
val templateLemmas =
   [("Descartes_Sign_Rule.length_psums", "length (psums ?xs) = length ?xs",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Descartes_Sign_Rule.sign_changes_singleton", "sign_changes [?x] = 0",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_hole 0)),
    ("Descartes_Sign_Rule.sign_changes_replicate",
     "sign_changes (replicate ?n ?x) = 0",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Descartes_Sign_Rule.sign_changes_0_Cons",
     "sign_changes ((0::?'a) # ?xs) = sign_changes ?xs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("Descartes_Sign_Rule.sign_changes_uminus",
     "sign_changes (map uminus ?xs) = sign_changes ?xs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("Descartes_Sign_Rule.sign_changes_Cons_ge",
     "sign_changes ?xs <= sign_changes (?x # ?xs)",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 1),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Descartes_Sign_Rule.psums_0_Cons",
     "psums ((0::?'a) # ?xs) = (0::?'a) # psums ?xs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0),
         template_app (template_hole 2, template_var 0)))),
    ("Descartes_Sign_Rule.map_uminus_psums",
     "map uminus (psums ?xs) = psums (map uminus ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)))),
    ("Descartes_Sign_Rule.finite_roots_with",
     "?p ~= 0 ==> finite (roots_with ?P ?p)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Descartes_Sign_Rule.sign_changes_Cons_Cons_0",
     "sign_changes (?x # (0::?'a) # ?xs) = sign_changes (?x # ?xs)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Descartes_Sign_Rule.sign_changes_filter",
     "sign_changes (filter (%x. x ~= (0::?'a)) ?xs) = sign_changes ?xs",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty), template_var 0)),
       template_app (template_hole 4, template_var 0))),
    ("Descartes_Sign_Rule.psums_Cons",
     "psums (?x # ?xs) = ?x # map ((+) ?x) (psums ?xs)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 3, template_var 0))))),
    ("Descartes_Sign_Rule.last_psums",
     "?xs ~= [] ==> last (psums ?xs) = sum_list ?xs",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Descartes_Sign_Rule.sign_changes_coeff_sign_changes",
     "Poly ?xs = ?p ==> sign_changes ?xs = sign_changes (coeffs ?p)",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 1), template_var 0)],
       template_equation
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Descartes_Sign_Rule.psums_replicate_0_append",
     "psums (replicate ?n (0::?'a) @ ?xs) =
      replicate ?n (0::?'a) @ psums ?xs",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_app (template_hole 3, template_var 0)))),
    ("Descartes_Sign_Rule.reduce_root_pCons",
     "reduce_root ?a (pCons ?c ?p) =
      pCons ?c (smult ?a (reduce_root ?a ?p))",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0))))),
    ("Descartes_Sign_Rule.coeff_sign_changes_reduce_root",
     "(0::?'a) < ?a ==>
      sign_changes (coeffs (reduce_root ?a ?p)) = sign_changes (coeffs ?p)",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 1)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))))),
    ("Descartes_Sign_Rule.coeff_sign_changes_smult",
     "(0::?'a) < ?a ==>
      sign_changes (coeffs (smult ?a ?p)) = sign_changes (coeffs ?p)",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 1)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))))),
    ("Descartes_Sign_Rule.sign_changes_cong",
     "map sgn ?xs = map sgn ?ys ==> sign_changes ?xs = sign_changes ?ys",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_hole 2),
            template_var 1),
          template_app
           (template_app (template_hole 3, template_hole 2),
            template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Descartes_Sign_Rule.filter_dropWhile",
     "filter (%x. ~ ?P x) (dropWhile ?P ?xs) = filter (%x. ~ ?P x) ?xs",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, t_empty), template_var 0))),
    ("Descartes_Sign_Rule.coeff_poly_times_one_minus_x",
     "coeff ?g ?n = sum (coeff (?g * [:1::?'a, - (1::?'a):])) {..?n}",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 6, t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("Descartes_Sign_Rule.psums_nth",
     "?n < length ?xs ==> psums ?xs ! ?n = sum ((!) ?xs) {..?n}",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 1, t_empty),
           template_app (template_hole 0, template_var 1))))),
    ("Descartes_Sign_Rule.sign_changes_Cons_Cons_same",
     "(0::?'a) < ?x * ?y ==>
      sign_changes (?x # ?y # ?xs) = sign_changes (?y # ?xs)",
     template_implication
      ([template_inequation
         (less_than, template_hole 4,
          template_app
           (template_app (template_hole 3, template_var 2),
            template_var 1))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Descartes_Sign_Rule.reduce_root_nonzero",
     "[| ?a ~= (0::?'a); ?p ~= 0 |] ==> reduce_root ?a ?p ~= 0",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3)),
        template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_hole 1)
           ))),
    ("Descartes_Sign_Rule.sign_changes_Cons_Cons_different",
     "?x * ?y < (0::?'a) ==>
      sign_changes (?x # ?y # ?xs) = 1 + sign_changes (?y # ?xs)",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 6, template_var 2), template_var 1),
          template_hole 5)],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)))))),
    ("Descartes_Sign_Rule.sign_changes_decompose",
     "?x ~= (0::?'a) ==>
      sign_changes (?xs @ ?x # ?ys) =
      sign_changes (?xs @ [?x]) + sign_changes (?x # ?ys)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 6))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_hole 0)))),
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)))))),
    ("Descartes_Sign_Rule.sign_changes_two",
     "sign_changes [?x, ?y] =
      (if (0::?'a) < ?x & ?y < (0::?'a) | ?x < (0::?'a) & (0::?'a) < ?y
       then 1 else 0)",
     template_equation
      (template_app
        (template_hole 9,
         template_app
          (template_app (template_hole 8, template_var 1),
           template_app
            (template_app (template_hole 8, template_var 0),
             template_hole 7))),
       template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_hole 2),
                       template_var 1)),
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_hole 2))),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_hole 2)),
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_var 0)))),
           template_hole 1),
         template_hole 0))),
    ("Descartes_Sign_Rule.count_roots_with_times_root",
     "[| ?p ~= 0; ?P ?a |]
      ==> count_roots_with ?P ([:?a, - (1::?'a):] * ?p) =
          Suc (count_roots_with ?P ?p)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 7)),
        template_predicate (template_app (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1)),
                   template_hole 7))),
             template_var 2)),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 2))))),
    ("Descartes_Sign_Rule.Poly_times_one_minus_x_eq_psums",
     "[| length ?xs = length ?ys;
         Poly ?xs = Poly ?ys * [:1::?'a, - (1::?'a):] |]
      ==> ?ys = psums ?xs",
     template_implication
      ([template_equation
         (template_app (template_hole 9, template_var 1),
          template_app (template_hole 9, template_var 0)),
        template_equation
         (template_app (template_hole 7, template_var 1),
          template_app
           (template_app
             (template_hole 6,
              template_app (template_hole 7, template_var 0)),
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 3, template_hole 4)),
                template_hole 2))))],
       template_equation
        (template_var 0, template_app (template_hole 0, template_var 1)))),
    ("Descartes_Sign_Rule.descartes_sign_rule",
     "?p ~= 0 ==>
      EX d. even d &
            sign_changes (coeffs ?p) = count_roots_with ((<) 0) ?p + d",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 13))],
       template_predicate (template_app (template_hole 12, t_empty)))),
    ("Descartes_Sign_Rule.pos_root_exI",
     "[| poly ?p 0 * lead_coeff ?p < 0;
         !!x. [| 0 < x; poly ?p x = 0 |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 1),
                template_hole 4)),
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 1))),
          template_hole 4),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Descartes_Sign_Rule.descartes_sign_rule_aux",
     "?p ~= 0 ==>
      count_roots_with ((<) 0) ?p <= sign_changes (coeffs ?p) &
      even (sign_changes (coeffs ?p) - count_roots_with ((<) 0) ?p)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 12))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app (template_hole 9, t_empty),
                     template_var 0)),
                 template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 0)))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_var 0))),
                 template_app
                  (template_app (template_hole 9, t_empty),
                   template_var 0))))
           ))),
    ("Descartes_Sign_Rule.even_sign_changes_iff",
     "[| ?xs ~= []; hd ?xs ~= (0::?'a); last ?xs ~= (0::?'a) |]
      ==> even (sign_changes ?xs) = (sgn (hd ?xs) = sgn (last ?xs))",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 11)),
        template_negation
         (
            template_equation
             (template_app (template_hole 9, template_var 0),
              template_hole 8)
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 7, template_var 0),
              template_hole 8)
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_hole 2))),
                template_app (template_hole 1, template_var 0))
              )],
         template_equation
          (template_app
            (template_hole 0,
             template_app (template_hole 9, template_var 0)),
           template_app
            (template_hole 0,
             template_app (template_hole 7, template_var 0)))))),
    ("Descartes_Sign_Rule.odd_coeff_sign_changes_imp_pos_roots",
     "[| ?p ~= 0; odd (sign_changes (coeffs ?p));
         !!x. [| 0 < x; poly ?p x = 0 |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 11)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_hole 9,
                      template_app (template_hole 8, template_hole 7))),
                  template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_var 1)))
                )
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Descartes_Sign_Rule.arthan",
     "[| ?xs ~= []; last ?xs ~= (0::?'a); sum_list ?xs = (0::?'a) |]
      ==> sign_changes (psums ?xs) < sign_changes ?xs &
          odd (sign_changes ?xs - sign_changes (psums ?xs))",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 13)),
        template_negation
         (
            template_equation
             (template_app (template_hole 11, template_var 0),
              template_hole 10)
            ),
        template_equation
         (template_app (template_hole 9, template_var 0),
          template_hole 10)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_var 0))),
                 template_app (template_hole 6, template_var 0))),
             template_app
              (template_hole 15,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1))),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 6, template_var 0)),
                   template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_var 0))))))
           ))),
    ("Descartes_Sign_Rule.sign_changes_poly_times_one_minus_x",
     "?g ~= 0 ==>
      0 < sign_changes (coeffs ([:1::?'a, - (1::?'a):] * ?g)) -
          sign_changes (coeffs ?g) &
      odd (sign_changes (coeffs ([:1::?'a, - (1::?'a):] * ?g)) -
           sign_changes (coeffs ?g))",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 14))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app (template_hole 12, template_hole 11),
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_hole 9,
                       template_app
                        (template_hole 8,
                         template_app
                          (template_app
                            (template_hole 7,
                             template_app
                              (template_app
                                (template_hole 6, template_hole 5),
                               template_app
                                (template_app
                                  (template_hole 6,
                                   template_app
                                    (template_hole 4, template_hole 5)),
                                 template_hole 14))),
                           template_var 0)))),
                   template_app
                    (template_hole 9,
                     template_app (template_hole 8, template_var 0))))),
             template_app
              (template_hole 16,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_hole 0))),
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_hole 9,
                       template_app
                        (template_hole 8,
                         template_app
                          (template_app
                            (template_hole 7,
                             template_app
                              (template_app
                                (template_hole 6, template_hole 5),
                               template_app
                                (template_app
                                  (template_hole 6,
                                   template_app
                                    (template_hole 4, template_hole 5)),
                                 template_hole 14))),
                           template_var 0)))),
                   template_app
                    (template_hole 9,
                     template_app (template_hole 8, template_var 0))))))
           ))),
    ("Descartes_Sign_Rule.odd_coeff_sign_changes_imp_pos_roots_aux",
     "[| ?p ~= 0; poly ?p 0 ~= 0; odd (sign_changes (coeffs ?p));
         !!x. [| 0 < x; poly ?p x = 0 |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 11)),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 9, template_var 1),
                template_hole 8),
              template_hole 8)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_hole 6,
                      template_app (template_hole 5, template_hole 4))),
                  template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_var 1)))
                )
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Descartes_Sign_Rule.sign_changes_poly_times_root_minus_x",
     "[| ?g ~= 0; (0::?'a) < ?a |]
      ==> 0 < sign_changes (coeffs ([:?a, - (1::?'a):] * ?g)) -
              sign_changes (coeffs ?g) &
          odd (sign_changes (coeffs ([:?a, - (1::?'a):] * ?g)) -
               sign_changes (coeffs ?g))",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 16)),
        template_inequation (less_than, template_hole 14, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app (template_hole 12, template_hole 11),
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_hole 9,
                       template_app
                        (template_hole 8,
                         template_app
                          (template_app
                            (template_hole 7,
                             template_app
                              (template_app
                                (template_hole 6, template_var 0),
                               template_app
                                (template_app
                                  (template_hole 6,
                                   template_app
                                    (template_hole 5, template_hole 4)),
                                 template_hole 16))),
                           template_var 1)))),
                   template_app
                    (template_hole 9,
                     template_app (template_hole 8, template_var 1))))),
             template_app
              (template_hole 18,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_hole 0))),
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_hole 9,
                       template_app
                        (template_hole 8,
                         template_app
                          (template_app
                            (template_hole 7,
                             template_app
                              (template_app
                                (template_hole 6, template_var 0),
                               template_app
                                (template_app
                                  (template_hole 6,
                                   template_app
                                    (template_hole 5, template_hole 4)),
                                 template_hole 16))),
                           template_var 1)))),
                   template_app
                    (template_hole 9,
                     template_app (template_hole 8, template_var 1))))))
           ))),
    ("Descartes_Sign_Rule.sign_changes_induct",
     "[| ?P []; !!x. ?P [x]; !!xs. ?P xs ==> ?P ((0::?'a) # xs);
         !!x y xs.
            [| x ~= (0::?'a); ?P ((x + y) # xs) |] ==> ?P (x # y # xs) |]
      ==> ?P ?xs",
     template_implication
      ([template_predicate (template_app (template_var 1, template_hole 7)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Descartes_Sign_Rule.arthan_aux1",
     "[| ?xs ~= []; last ?xs ~= (0::?'a);
         ?x + ?y + sum_list ?xs = (0::?'a) |]
      ==> int (sign_changes (psums (?x # ?y # ?xs))) -
          int (sign_changes (psums ((?x + ?y) # ?xs)))
          <= int (sign_changes (?x # ?y # ?xs)) -
             int (sign_changes ((?x + ?y) # ?xs)) &
          even
           (int (sign_changes (?x # ?y # ?xs)) -
            int (sign_changes ((?x + ?y) # ?xs)) -
            (int (sign_changes (psums (?x # ?y # ?xs))) -
             int (sign_changes (psums ((?x + ?y) # ?xs)))))",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 16)),
        template_negation
         (
            template_equation
             (template_app (template_hole 14, template_var 2),
              template_hole 13)
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 12,
              template_app
               (template_app (template_hole 12, template_var 1),
                template_var 0)),
            template_app (template_hole 11, template_var 2)),
          template_hole 13)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_hole 7,
                         template_app
                          (template_hole 6,
                           template_app
                            (template_hole 5,
                             template_app
                              (template_app
                                (template_hole 4, template_var 1),
                               template_app
                                (template_app
                                  (template_hole 4, template_var 0),
                                 template_var 2)))))),
                     template_app
                      (template_hole 7,
                       template_app
                        (template_hole 6,
                         template_app
                          (template_hole 5,
                           template_app
                            (template_app
                              (template_hole 4,
                               template_app
                                (template_app
                                  (template_hole 12, template_var 1),
                                 template_var 0)),
                             template_var 2)))))),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_hole 7,
                       template_app
                        (template_hole 6,
                         template_app
                          (template_app (template_hole 4, template_var 1),
                           template_app
                            (template_app (template_hole 4, template_var 0),
                             template_var 2))))),
                   template_app
                    (template_hole 7,
                     template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_hole 4,
                           template_app
                            (template_app
                              (template_hole 12, template_var 1),
                             template_var 0)),
                         template_var 2)))))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_hole 0))),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_hole 7,
                         template_app
                          (template_hole 6,
                           template_app
                            (template_app (template_hole 4, template_var 1),
                             template_app
                              (template_app
                                (template_hole 4, template_var 0),
                               template_var 2))))),
                     template_app
                      (template_hole 7,
                       template_app
                        (template_hole 6,
                         template_app
                          (template_app
                            (template_hole 4,
                             template_app
                              (template_app
                                (template_hole 12, template_var 1),
                               template_var 0)),
                           template_var 2))))),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_hole 7,
                       template_app
                        (template_hole 6,
                         template_app
                          (template_hole 5,
                           template_app
                            (template_app (template_hole 4, template_var 1),
                             template_app
                              (template_app
                                (template_hole 4, template_var 0),
                               template_var 2)))))),
                   template_app
                    (template_hole 7,
                     template_app
                      (template_hole 6,
                       template_app
                        (template_hole 5,
                         template_app
                          (template_app
                            (template_hole 4,
                             template_app
                              (template_app
                                (template_hole 12, template_var 1),
                               template_var 0)),
                           template_var 2))))))))
           ))),
    ("Descartes_Sign_Rule.arthan_wlog",
     "[| ?xs ~= []; last ?xs ~= (0::?'a); ?x + ?y + sum_list ?xs = (0::?'a);
         !!x y xs.
            [| xs ~= []; last xs ~= (0::?'a);
               x + y + sum_list xs = (0::?'a); (0::?'a) <= x |]
            ==> ?P x y xs;
         !!x y xs.
            [| xs ~= []; ?P x y xs |] ==> ?P (- x) (- y) (map uminus xs) |]
      ==> ?P ?x ?y ?xs",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 10)),
        template_negation
         (
            template_equation
             (template_app (template_hole 8, template_var 3),
              template_hole 7)
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1)),
            template_app (template_hole 5, template_var 3)),
          template_hole 7),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 0, template_var 2),
               template_var 1),
             template_var 3)
           )))]:
   (string * thm * template) list
### theory "Draft.Descartes_Sign_RuleMoreTemplates"
### 0.467s elapsed time, 0.726s cpu time, 0.122s GC time
val it = (): unit
