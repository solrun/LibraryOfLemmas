Loading theory "HOL-Library.Function_Algebras" (required by "Draft.After2Templates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.After2Templates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.After2Templates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.After2Templates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.130s elapsed time, 0.539s cpu time, 0.054s GC time
Loading theory "Draft.Automaton" (required by "Draft.After2Templates" via "Draft.After2" via "Draft.Position_Autos")
### theory "HOL-Library.Set_Algebras"
### 0.202s elapsed time, 0.829s cpu time, 0.054s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.After2Templates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
consts
  add_atoms :: "'a rexp => 'a list => 'a list"
locale rexp_DA
  fixes init :: "'a rexp => 's"
    and delta :: "'a => 's => 's"
    and final :: "'s => bool"
    and L :: "'s => 'a list set"
  assumes "rexp_DA init delta final L"
### theory "HOL-Library.Nat_Bijection"
### 0.347s elapsed time, 1.394s cpu time, 0.144s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.After2Templates" via "Draft.ExtrEqs")
locale rexp_DFA
  fixes init :: "'a rexp => 'b"
    and delta :: "'a => 'b => 'b"
    and final :: "'b => bool"
    and L :: "'b => 'a list set"
  assumes "rexp_DFA init delta final L"
### theory "Draft.Automaton"
### 0.271s elapsed time, 1.067s cpu time, 0.091s GC time
Loading theory "Draft.Position_Autos" (required by "Draft.After2Templates" via "Draft.After2")
consts
  mrexps :: "'a rexp => (bool * 'a) rexp set"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.996s elapsed time, 3.748s cpu time, 0.888s GC time
Found termination order: "{}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "{}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.096s elapsed time, 3.945s cpu time, 0.937s GC time
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst (final_b p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.045s elapsed time, 6.629s cpu time, 1.214s GC time
Loading theory "Draft.Templates" (required by "Draft.After2Templates" via "Draft.ExtrEqs")
Found termination order: "(%p. size (fst (final_b p))) <*mlex*> {}"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.076s elapsed time, 0.212s cpu time, 0.070s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.After2Templates")
### theory "Draft.Position_Autos"
### 1.738s elapsed time, 5.276s cpu time, 1.140s GC time
Loading theory "Draft.After2" (required by "Draft.After2Templates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.544s elapsed time, 1.137s cpu time, 0.095s GC time
consts
  mrexps2 :: "'a rexp => 'a mrexp2 set"
consts
  empty_mrexp2 :: "'a rexp => 'a mrexp2"
consts
  shift2 :: "bool => 'a mrexp2 => 'a => 'a mrexp2"
consts
  strip2 :: "'a mrexp2 => (bool * 'a) rexp"
consts
  ok2 :: "'a mrexp2 => bool"
instantiation
  ok_mrexp2 :: (equal) equal
  equal_ok_mrexp2 == equal_class.equal ::
    'a ok_mrexp2 => 'a ok_mrexp2 => bool
Found termination order: "(%p. size (final_b p)) <*mlex*> {}"
### Ignoring duplicate rewrite rule:
### eq_mrexp2 (Atom2 ?v1 ?va1) One2 == False
### Ignoring duplicate rewrite rule:
### eq_mrexp2 (Plus2 ?v1 ?va1 ?vb1 ?vc1) One2 == False
### Ignoring duplicate rewrite rule:
### eq_mrexp2 (Times2 ?v1 ?va1 ?vb1 ?vc1) One2 == False
### Ignoring duplicate rewrite rule:
### eq_mrexp2 (Star2 ?v1 ?va1) One2 == False
### Ignoring duplicate rewrite rule:
### eq_mrexp2 One2 (Atom2 ?v1 ?va1) == False
### Ignoring duplicate rewrite rule:
### eq_mrexp2 One2 (Plus2 ?v1 ?va1 ?vb1 ?vc1) == False
### Ignoring duplicate rewrite rule:
### eq_mrexp2 One2 (Times2 ?v1 ?va1 ?vb1 ?vc1) == False
### Ignoring duplicate rewrite rule:
### eq_mrexp2 One2 (Star2 ?v1 ?va1) == False
### theory "Draft.After2"
### 3.748s elapsed time, 5.883s cpu time, 1.301s GC time
Loading theory "Draft.After2Templates"
val templateLemmas =
   [("After2.ok2_empty_mrexp2", "ok2 (empty_mrexp2 ?r)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("After2.finite_mrexps3", "finite (mrexps2 ?r)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("After2.nonfin_empty_mrexp2", "~ fin (empty_mrexp2 ?r)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0))
             )
         )),
    ("After2.empty_mrexp2_mrexps2", "empty_mrexp2 ?s : mrexps2 ?s",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 0))
         )),
    ("After2.nul_empty_mrexp2", "nul (empty_mrexp2 ?r) = nullable ?r",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("After2.eq_mrexp2_refl", "?r = ?s ==> eq_mrexp2 ?r ?s",
     template_implication
      ([template_equation (template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("After2.ok2_shift2", "ok2 ?r ==> ok2 (shift2 ?m ?r ?c)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2),
               template_var 0))
           ))),
    ("After2.strip2_empty_mrexp2",
     "strip2 (empty_mrexp2 ?r) = empty_mrexp ?r",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app (template_hole 2, t_empty), template_var 0))),
    ("After2.ok2_fin_final", "ok2 ?r ==> fin ?r = final (strip2 ?r)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("After2.ok2_nul_nullable", "ok2 ?r ==> nul ?r = nullable (strip2 ?r)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("After2.strip_mrexps2", "(strip o strip2) ` mrexps2 ?r = {?r}",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_hole 4)),
             template_hole 3)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("After2.shift2_mrexps2",
     "?r : mrexps2 ?s ==> shift2 ?x ?r ?a : mrexps2 ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app (template_hole 1, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 3),
                 template_var 0)),
             template_app (template_hole 1, template_var 2))
           ))),
    ("After2.strip2_shift2",
     "ok2 ?r ==>
      strip2 (shift2 ?m ?r ?c) = Position_Autos.shift ?m (strip2 ?r) ?c",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_app (template_hole 2, template_var 2)),
           template_var 0)))),
    ("After2.eq_mrexp2_eq",
     "[| ok2 ?r; ok2 ?s |] ==> eq_mrexp2 ?r ?s = (?r = ?s)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0)
              )],
         template_equation (template_var 1, template_var 0)))),
    ("After2.eq_mrexp2_imp_eq",
     "[| eq_mrexp2 ?r ?s; ok2 ?r; ok2 ?s |] ==> ?r = ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0)))]:
   (string * thm * template) list
### theory "Draft.After2Templates"
### 0.360s elapsed time, 0.551s cpu time, 0.070s GC time
val it = (): unit
