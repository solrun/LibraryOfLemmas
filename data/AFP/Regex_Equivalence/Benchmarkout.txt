Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.BenchmarkTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Tree" (required by "Draft.BenchmarkTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.BenchmarkTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.BenchmarkTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.146s elapsed time, 0.601s cpu time, 0.042s GC time
Loading theory "Draft.Automaton" (required by "Draft.BenchmarkTemplates" via "Draft.Benchmark" via "Draft.Regex_Equivalence" via "Draft.Deriv_Autos")
### theory "HOL-Library.Set_Algebras"
### 0.188s elapsed time, 0.767s cpu time, 0.042s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.BenchmarkTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
consts
  add_atoms :: "'a rexp => 'a list => 'a list"
### theory "HOL-Library.Nat_Bijection"
### 0.317s elapsed time, 1.262s cpu time, 0.124s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.BenchmarkTemplates" via "Draft.ExtrEqs")
locale rexp_DA
  fixes init :: "'a rexp => 's"
    and delta :: "'a => 's => 's"
    and final :: "'s => bool"
    and L :: "'s => 'a list set"
  assumes "rexp_DA init delta final L"
locale rexp_DFA
  fixes init :: "'a rexp => 'b"
    and delta :: "'a => 'b => 'b"
    and final :: "'b => bool"
    and L :: "'b => 'a list set"
  assumes "rexp_DFA init delta final L"
### theory "Draft.Automaton"
### 0.294s elapsed time, 1.164s cpu time, 0.083s GC time
Loading theory "Draft.Position_Autos" (required by "Draft.BenchmarkTemplates" via "Draft.Benchmark" via "Draft.Regex_Equivalence")
consts
  mrexps :: "'a rexp => (bool * 'a) rexp set"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.008s elapsed time, 3.808s cpu time, 0.911s GC time
Loading theory "Draft.Derivatives_Finite" (required by "Draft.BenchmarkTemplates" via "Draft.Benchmark" via "Draft.Regex_Equivalence" via "Draft.Deriv_Autos" via "Draft.Deriv_PDeriv")
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "{}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.126s elapsed time, 4.274s cpu time, 0.972s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
consts
  ACI_norm :: "'a rexp => 'a rexp"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst (final_b p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.202s elapsed time, 7.893s cpu time, 1.394s GC time
Loading theory "Draft.Templates" (required by "Draft.BenchmarkTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.104s elapsed time, 0.395s cpu time, 0.085s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.BenchmarkTemplates")
Found termination order: "(%p. size (fst (final_b p))) <*mlex*> {}"
### theory "Draft.Position_Autos"
### 1.894s elapsed time, 6.657s cpu time, 1.355s GC time
Loading theory "Draft.After2" (required by "Draft.BenchmarkTemplates" via "Draft.Benchmark" via "Draft.Regex_Equivalence")
Loading theory "Draft.Before2" (required by "Draft.BenchmarkTemplates" via "Draft.Benchmark" via "Draft.Regex_Equivalence")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.687s elapsed time, 2.717s cpu time, 0.259s GC time
consts
  final3 :: "'a mrexp3 => bool"
consts
  mrexps3 :: "'a rexp => 'a mrexp3 set"
consts
  follow3 :: "bool => 'a mrexp3 => 'a mrexp3"
Found termination order:
  "(%p. size (fst p)) <*mlex*> (%p. size (snd p)) <*mlex*> {}"
consts
  empty_mrexp3 :: "'a rexp => 'a mrexp3"
consts
  move3 :: "'a => 'a mrexp3 => bool => 'a mrexp3"
consts
  strip3 :: "'a mrexp3 => (bool * 'a) rexp"
consts
  ok3 :: "'a mrexp3 => bool"
consts
  ACI_norm_alt :: "'a rexp => 'a rexp"
consts
  mrexps2 :: "'a rexp => 'a mrexp2 set"
### Generation of a parametrized correspondence relation failed.
### Reason:  No relator for the type "Before2.mrexp3" found.
consts
  empty_mrexp2 :: "'a rexp => 'a mrexp2"
Proofs for inductive predicate(s) "ACI"
  Proving monotonicity ...
consts
  shift2 :: "bool => 'a mrexp2 => 'a => 'a mrexp2"
consts
  strip2 :: "'a mrexp2 => (bool * 'a) rexp"
consts
  ok2 :: "'a mrexp2 => bool"
instantiation
  ok_mrexp3 :: (equal) equal
  equal_ok_mrexp3 == equal_class.equal ::
    'a ok_mrexp3 => 'a ok_mrexp3 => bool
### theory "Draft.Derivatives_Finite"
### 2.760s elapsed time, 9.438s cpu time, 1.864s GC time
Loading theory "Draft.Deriv_PDeriv" (required by "Draft.BenchmarkTemplates" via "Draft.Benchmark" via "Draft.Regex_Equivalence" via "Draft.Deriv_Autos")
consts
  pset :: "'a rexp => 'a rexp set"
instantiation
  ok_mrexp2 :: (equal) equal
  equal_ok_mrexp2 == equal_class.equal ::
    'a ok_mrexp2 => 'a ok_mrexp2 => bool
Found termination order:
  "(%p. size (fst p)) <*mlex*> (%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  pnorm_alt :: "'a rexp => 'a rexp"
consts
  pnderiv :: "'a => 'a rexp => 'a rexp"
### theory "Draft.Deriv_PDeriv"
### 2.280s elapsed time, 8.099s cpu time, 1.828s GC time
Loading theory "Draft.Deriv_Autos" (required by "Draft.BenchmarkTemplates" via "Draft.Benchmark" via "Draft.Regex_Equivalence")
instantiation
  ACI_rexp :: ({equal,linorder}) {equal,linorder}
  less_eq_ACI_rexp == less_eq :: 'a ACI_rexp => 'a ACI_rexp => bool
  less_ACI_rexp == less :: 'a ACI_rexp => 'a ACI_rexp => bool
  equal_ACI_rexp == equal_class.equal :: 'a ACI_rexp => 'a ACI_rexp => bool
### theory "Draft.Deriv_Autos"
### 0.808s elapsed time, 2.494s cpu time, 0.379s GC time
Found termination order: "(%p. size (final_b p)) <*mlex*> {}"
### Ignoring duplicate rewrite rule:
### eq_mrexp3 (Atom3 ?v1 ?va1) One3 == False
### Ignoring duplicate rewrite rule:
### eq_mrexp3 (Plus3 ?v1 ?va1 ?vb1 ?vc1) One3 == False
### Ignoring duplicate rewrite rule:
### eq_mrexp3 (Times3 ?v1 ?va1 ?vb1 ?vc1) One3 == False
### Ignoring duplicate rewrite rule:
### eq_mrexp3 (Star3 ?v1 ?va1) One3 == False
### Ignoring duplicate rewrite rule:
### eq_mrexp3 One3 (Atom3 ?v1 ?va1) == False
### Ignoring duplicate rewrite rule:
### eq_mrexp3 One3 (Plus3 ?v1 ?va1 ?vb1 ?vc1) == False
### Ignoring duplicate rewrite rule:
### eq_mrexp3 One3 (Times3 ?v1 ?va1 ?vb1 ?vc1) == False
### Ignoring duplicate rewrite rule:
### eq_mrexp3 One3 (Star3 ?v1 ?va1) == False
Found termination order: "(%p. size (final_b p)) <*mlex*> {}"
### theory "Draft.Before2"
### 5.476s elapsed time, 17.801s cpu time, 3.638s GC time
### Ignoring duplicate rewrite rule:
### eq_mrexp2 (Atom2 ?v1 ?va1) One2 == False
### Ignoring duplicate rewrite rule:
### eq_mrexp2 (Plus2 ?v1 ?va1 ?vb1 ?vc1) One2 == False
### Ignoring duplicate rewrite rule:
### eq_mrexp2 (Times2 ?v1 ?va1 ?vb1 ?vc1) One2 == False
### Ignoring duplicate rewrite rule:
### eq_mrexp2 (Star2 ?v1 ?va1) One2 == False
### Ignoring duplicate rewrite rule:
### eq_mrexp2 One2 (Atom2 ?v1 ?va1) == False
### Ignoring duplicate rewrite rule:
### eq_mrexp2 One2 (Plus2 ?v1 ?va1 ?vb1 ?vc1) == False
### Ignoring duplicate rewrite rule:
### eq_mrexp2 One2 (Times2 ?v1 ?va1 ?vb1 ?vc1) == False
### Ignoring duplicate rewrite rule:
### eq_mrexp2 One2 (Star2 ?v1 ?va1) == False
### theory "Draft.After2"
### 5.612s elapsed time, 17.940s cpu time, 3.638s GC time
Loading theory "Draft.Regex_Equivalence" (required by "Draft.BenchmarkTemplates" via "Draft.Benchmark")
See theory exports
### theory "Draft.Regex_Equivalence"
### 1.133s elapsed time, 1.327s cpu time, 0.157s GC time
Loading theory "Draft.Benchmark" (required by "Draft.BenchmarkTemplates")
structure Rexp:
  sig
    val Atom: 'a -> 'a Isabelle6248122.Generated_Code.rexp
    val One: 'a Isabelle6248122.Generated_Code.rexp
    val Plus:
       'a Isabelle6248122.Generated_Code.rexp *
       'a Isabelle6248122.Generated_Code.rexp
         -> 'a Isabelle6248122.Generated_Code.rexp
    val Star:
       'a Isabelle6248122.Generated_Code.rexp ->
         'a Isabelle6248122.Generated_Code.rexp
    val Times:
       'a Isabelle6248122.Generated_Code.rexp *
       'a Isabelle6248122.Generated_Code.rexp
         -> 'a Isabelle6248122.Generated_Code.rexp
    val Zero: 'a Isabelle6248122.Generated_Code.rexp
    val bool_checkers:
       (Isabelle6248122.Generated_Code.char list *
        (bool Isabelle6248122.Generated_Code.rexp ->
           bool Isabelle6248122.Generated_Code.rexp -> bool)
       )
       list
    val bool_matchers:
       (Isabelle6248122.Generated_Code.char list *
        (bool Isabelle6248122.Generated_Code.rexp -> bool list -> bool)
       )
       list
  end
val timeout = 10.000: Time.time
datatype res = Res of bool * Time.time | TO
constructor Res: bool * Time.time -> res
constructor TO: res
val sum = fn: res list -> Time.time
val average = fn: res list -> Time.time
val time = fn: ('a -> 'b -> bool) -> 'a * 'b -> res
structure Generator:
  sig
    val aterm:
       term gen ->
         term gen ->
           term gen -> term gen -> int * int * int * int -> term gen
    val aterm': int gen -> int gen -> int * int * int * int -> term gen
    val atyp: typ gen -> typ gen -> int * int -> typ gen
    val atyp': int gen -> int gen -> int * int -> typ gen
    val basic_name: string -> int gen -> string gen
    val bernoulli: real -> bool gen
    val binom_dist: real -> int -> int gen
    val bound: (int, 'a) gen_state -> (term, 'a) gen_state
    val char: char gen
    val char_of: string -> char gen
    val cobool: (bool, 'a) cogen
    val cochar: (char, 'a) cogen
    type ('a, 'b) cogen = ('a, 'b, SpecCheck_Random.rand) cogen_state
    type ('a, 'b, 'c) cogen_state =
       'a -> ('b, 'c) gen_state -> ('b, 'c) gen_state
    val coint: (int, 'a) cogen
    val colist: ('a, 'b) cogen -> ('a list, 'b) cogen
    val const:
       (string, 'a) gen_state -> (typ, 'a) gen_state -> (term, 'a) gen_state
    val const': int gen -> term gen
    val const_name: int gen -> string gen
    val cooption: ('a, 'b) cogen -> ('a option, 'b) cogen
    val costring: (string, 'a) cogen
    val cosubstring: (substring, 'a) cogen
    val digit: char gen
    val dummyS: (sort, 'a) gen_state
    val dummyT: (typ, 'a) gen_state
    val elements: 'a vector -> 'a gen
    val elementsL: 'a list -> 'a gen
    val elementsW: (int * 'a) vector -> 'a gen
    val elementsWL: (int * 'a) list -> 'a gen
    val filter: ('a -> bool) -> ('a, 'b) gen_state -> ('a, 'b) gen_state
    val filter_bounded:
       int -> ('a -> bool) -> ('a, 'b) gen_state -> ('a, 'b) gen_state
    val free:
       (string, 'a) gen_state -> (typ, 'a) gen_state -> (term, 'a) gen_state
    val free': int gen -> term gen
    val free_name: int gen -> string gen
    val function: ('a, 'b) cogen -> 'b gen -> ('a -> 'b) gen
    val function': 'a gen -> (''b -> 'a) gen
    type 'a gen = ('a, SpecCheck_Random.rand) gen_state
    type ('a, 'b) gen_state = 'b -> 'a * 'b
    val indexname:
       (string, 'a) gen_state ->
         (int, 'a) gen_state -> (indexname, 'a) gen_state
    val join: (('a, 'b) gen_state, 'b) gen_state -> ('a, 'b) gen_state
    val letter: char gen
    val list:
       (int, 'a) gen_state -> ('b, 'a) gen_state -> ('b list, 'a) gen_state
    val lowercase_letter: char gen
    val map: ('a -> 'b) -> ('a, 'c) gen_state -> ('b, 'c) gen_state
    val map2:
       ('a -> 'b -> 'c) ->
         ('a, 'd) gen_state -> ('b, 'd) gen_state -> ('c, 'd) gen_state
    val map3:
       ('a -> 'b -> 'c -> 'd) ->
         ('a, 'e) gen_state ->
           ('b, 'e) gen_state -> ('c, 'e) gen_state -> ('d, 'e) gen_state
    val map4:
       ('a -> 'b -> 'c -> 'd -> 'e) ->
         ('a, 'f) gen_state ->
           ('b, 'f) gen_state ->
             ('c, 'f) gen_state -> ('d, 'f) gen_state -> ('e, 'f) gen_state
    val neg: int -> int gen
    val nonneg: int -> int gen
    val nonpos: int -> int gen
    val of_seq: ('a option, 'a Seq.seq) gen_state
    val one_of: 'a gen vector -> 'a gen
    val one_ofL: 'a gen list -> 'a gen
    val one_ofW: (int * 'a gen) vector -> 'a gen
    val one_ofWL: (int * 'a gen) list -> 'a gen
    val option:
       (bool, 'a) gen_state ->
         ('b, 'a) gen_state -> ('b option, 'a) gen_state
    val pos: int -> int gen
    val range_char: char * char -> char gen
    val range_int: int * int -> int gen
    val range_real: real * real -> real gen
    val real: real gen
    val real_finite: real gen
    val real_neg: real gen
    val real_nonneg: real gen
    val real_nonpos: real gen
    val real_pos: real gen
    val ref_gen: ('a, 'b) gen_state -> ('a ref, 'b) gen_state
    val return: 'a -> ('a, 'b) gen_state
    val seq:
       ('a option, 'b * SpecCheck_Random.rand) gen_state ->
         'b -> 'a Seq.seq gen
    val shuffle: 'a list -> 'a list gen
    val sort:
       (int, 'a) gen_state -> (class, 'a) gen_state -> (sort, 'a) gen_state
    val string: int gen -> char gen -> string gen
    val substring: string gen -> substring gen
    val term_tree:
       (int -> int -> (term * int, 'a) gen_state) -> (term, 'a) gen_state
    val term_tree_path:
       ((term * int) list -> (term * int, 'a) gen_state) ->
         (term, 'a) gen_state
    val tfree:
       (string, 'a) gen_state -> (sort, 'a) gen_state -> (typ, 'a) gen_state
    val tfree': int gen -> typ gen
    val tfree_name: (string, 'a) gen_state -> (string, 'a) gen_state
    val tfree_name': int gen -> string gen
    val tvar:
       (indexname, 'a) gen_state ->
         (sort, 'a) gen_state -> (typ, 'a) gen_state
    val tvar': int gen -> int gen -> typ gen
    val tvar_name: (indexname, 'a) gen_state -> (indexname, 'a) gen_state
    val tvar_name': int gen -> int gen -> indexname gen
    val typ: typ gen -> typ gen -> typ gen -> int * int * int -> typ gen
    val typ':
       int gen ->
         int gen -> typ gen -> typ gen -> int * int * int -> typ gen
    val typ'': int gen -> int gen -> int gen -> int * int * int -> typ gen
    val type':
       string gen ->
         int gen -> typ gen -> typ gen -> int * int * int -> typ gen
    val type'':
       int gen ->
         int gen -> typ gen -> typ gen -> int * int * int -> typ gen
    val type_name: int gen -> string gen
    val unfold_while:
       ('a -> (bool, 'b) gen_state) ->
         ('a, 'b) gen_state -> ('a list, 'b) gen_state
    val unit: (unit, 'a) gen_state
    val uppercase_letter: char gen
    val var:
       (indexname, 'a) gen_state ->
         (typ, 'a) gen_state -> (term, 'a) gen_state
    val var': int gen -> int gen -> term gen
    val var_name: int gen -> int gen -> indexname gen
    val variant: (int, 'a) cogen
    val vector:
       (int, 'a) gen_state ->
         ('b, 'a) gen_state -> ('b vector, 'a) gen_state
    val zip:
       ('a, 'b) gen_state -> ('c, 'b) gen_state -> ('a * 'c, 'b) gen_state
    val zip3:
       ('a, 'b) gen_state ->
         ('c, 'b) gen_state ->
           ('d, 'b) gen_state -> ('a * 'c * 'd, 'b) gen_state
    val zip4:
       ('a, 'b) gen_state ->
         ('c, 'b) gen_state ->
           ('d, 'b) gen_state ->
             ('e, 'b) gen_state -> ('a * 'c * 'd * 'e, 'b) gen_state
  end
val list_n = fn: int -> ('a -> 'b * 'a) -> 'a -> 'b list * 'a
val regex = fn:
   int -> (bool Generated_Code.rexp, SpecCheck_Random.rand) gen_state
val header = fn: (char list * 'a) list -> unit
val pad = fn: int -> int
val round = fn: int -> Time.time list -> unit
val run = fn:
   (char list *
    (bool Generated_Code.rexp -> bool Generated_Code.rexp -> bool)
   )
   list
     -> int list -> unit
val run_re = fn:
   (int -> 'a * 'b) ->
     (char list * ('a -> 'b -> bool)) list -> int list -> unit
val pow = fn: int -> bool Generated_Code.rexp
val powl = fn: int -> bool Generated_Code.rexp
val sum = fn:
   (int -> 'a Generated_Code.rexp) -> int -> 'a Generated_Code.rexp
val b = fn: int -> bool Generated_Code.rexp * bool Generated_Code.rexp
val bl = fn: int -> bool Generated_Code.rexp * bool Generated_Code.rexp
val seq = fn: int -> 'a Generated_Code.rexp -> 'a Generated_Code.rexp
val seql = fn: int -> 'a Generated_Code.rexp -> 'a Generated_Code.rexp
val re = fn: int -> bool Generated_Code.rexp * bool list
val rel = fn: int -> bool Generated_Code.rexp * bool list
val monster =
   Plus
    (Plus
      (Times
        (Times
          (Times
            (One,
             Plus
              (Atom false,
               Star
                (
                   Times
                    (Zero, Star (Plus (Plus (..., ...), Plus (..., ...))))
                   ))),
           Times
            (Times
              (Times
                (Plus (Times (Times (..., ...), Star (Star ...)), Zero),
                 Times
                  (Star (Times (One, Star ...)),
                   Times (Star (Times (..., ...)), Times (..., ...)))),
               Plus
                (Times
                  (Times (Plus (..., ...), Plus (..., ...)),
                   Star (Plus (Plus (..., ...), Times (..., ...)))),
                 Star
                  (
                     Times
                      (Plus (One, Atom true), Times (Plus (..., ...), One))
                     ))),
             Plus
              (Star
                (
                   Plus
                    (Star (Plus (Times (..., ...), Plus (..., ...))),
                     Times
                      (Star (Star (Atom true)), Star (Plus (..., ...))))
                   ),
               Times
                (Times
                  (Plus (Star (Star ...), One),
                   Star (Times (Star ..., Times (..., ...)))),
                 One)))),
         Star
          (
             Plus
              (Times
                (Plus
                  (Plus
                    (Star (Times (Plus (..., ...), Times (..., ...))),
                     Plus
                      (Plus (Times (..., ...), Times (..., ...)),
                       Plus (Star ..., Star ...))),
                   Plus
                    (Times
                      (Star (Star (Times (..., ...))),
                       Times (Plus (..., ...), Times (..., ...))),
                     Plus
                      (Star (Times (..., ...)),
                       Plus (One, Plus (..., ...))))),
                 Plus
                  (Plus
                    (Times
                      (Plus (Star ..., Plus (..., ...)),
                       Times (Times (..., ...), Star ...)),
                     Times (Star Zero, One)),
                   Times
                    (Star (Times (Star (Star ...), Star (Star ...))),
                     Times
                      (Plus (Star ..., Plus (..., ...)),
                       Star (Star (Plus (..., ...))))))),
               Plus
                (Star
                  (
                     Star
                      (
                         Times
                          (Plus (Star (Star One), Star (Star (Star ...))),
                           Atom true)
                         )
                     ),
                 Atom false))
             )),
       Star
        (
           Times
            (Plus
              (Star
                (
                   Times
                    (Times
                      (Times
                        (Plus (Times (..., ...), One),
                         Star (Star (Atom true))),
                       Zero),
                     Times
                      (Star (Times (Zero, Star (Star (Plus (..., ...))))),
                       Times
                        (Plus (Times (..., ...), Star One),
                         Plus (One, Times (..., ...)))))
                   ),
               Times
                (Star
                  (
                     Star
                      (
                         Star
                          (
                             Plus
                              (Plus (Plus (..., ...), Plus (..., ...)),
                               Plus (Times (..., ...), Star One))
                             )
                         )
                     ),
                 Star
                  (
                     Plus
                      (Times
                        (Plus (Star (Star ...), Plus (..., ...)),
                         Star (Plus (One, Times (..., ...)))),
                       Times (Zero, Star (Star (Times (..., ...)))))
                     ))),
             Times
              (Plus
                (Zero,
                 Star
                  (
                     Star
                      (
                         Times
                          (Atom false,
                           Plus
                            (Plus (Star ..., Star ...),
                             Star (Plus (..., ...))))
                         )
                     )),
               Times
                (Times
                  (Star
                    (
                       Plus
                        (Times (Times (..., ...), One),
                         Star (Times (Star ..., Star ...)))
                       ),
                   Plus
                    (Times
                      (Times (Atom false, Star ...),
                       Plus (Star ..., Plus (..., ...))),
                     Times
                      (Plus (Plus (..., ...), Times (..., ...)),
                       Plus (Star ..., Star ...)))),
                 Times
                  (Star
                    (
                       Plus
                        (Star One,
                         Plus (Times (..., ...), Times (..., ...)))
                       ),
                   Times
                    (Plus
                      (Times (Star ..., Plus (..., ...)),
                       Star (Plus (..., ...))),
                     Times (Plus (Plus (..., ...), Zero), Zero))))))
           )),
     Times
      (Plus
        (Plus
          (Atom false,
           Plus
            (Times
              (Plus
                (Plus
                  (Times (Plus (..., ...), Times (..., ...)),
                   Times (Star (Star ...), One)),
                 One),
               Plus
                (Star
                  (
                     Times
                      (Plus (Plus (..., ...), One),
                       Times (Plus (..., ...), Star ...))
                     ),
                 Plus
                  (One, Times (Times (..., ...), Star (Plus (..., ...)))))),
             Times
              (Times
                (Times
                  (Times (One, Star (Plus (..., ...))),
                   Times (Star (Star ...), Star (Plus (..., ...)))),
                 Times
                  (Plus (Times (..., ...), Times (..., ...)),
                   Times (Atom false, Atom false))),
               Star
                (
                   Plus
                    (Times
                      (Plus (Plus (..., ...), Star ...),
                       Star (Plus (..., ...))),
                     Times
                      (Times (Star ..., Star ...),
                       Plus (Plus (..., ...), Star ...)))
                   )))),
         Star
          (
             Times
              (Atom false,
               Star
                (
                   Plus
                    (Star
                      (
                         Times
                          (Zero,
                           Times
                            (Star (Plus (..., ...)),
                             Star (Times (..., ...))))
                         ),
                     Times
                      (One,
                       Plus
                        (Times (Plus (..., ...), Times (..., ...)),
                         Times (Times (..., ...), Times (..., ...)))))
                   ))
             )),
       Plus
        (Plus
          (Plus
            (Zero,
             Times
              (Star One,
               Times
                (Star (Times (Star Zero, Atom true)),
                 Star
                  (Plus (Atom true, Times (Atom true, Plus (..., ...))))))),
           Times
            (Times
              (Plus
                (Times (Star (Plus (Star ..., Plus (..., ...))), Atom true),
                 Times (Plus (Plus (..., ...), Plus (..., ...)), One)),
               Times
                (Times
                  (Plus (Plus (..., ...), Star (Plus (..., ...))),
                   Plus (Star (Plus (..., ...)), Times (..., ...))),
                 Times
                  (Plus (Times (..., ...), Star (Plus (..., ...))), Zero))),
             Plus
              (Plus
                (Plus
                  (Star (Times (Star ..., Times (..., ...))),
                   Times (Zero, Times (..., ...))),
                 Times
                  (Times (Times (..., ...), Times (..., ...)),
                   Plus (Star (Atom false), Star (Times (..., ...))))),
               Times
                (Star (Atom false),
                 Star
                  (Times (Star (Atom true), Plus (Star ..., Star ...))))))),
         Star
          (
             Plus
              (Plus
                (Times
                  (Plus
                    (Star (Times (Times (..., ...), Times (..., ...))),
                     Atom true),
                   Zero),
                 Star
                  (
                     Plus
                      (Star
                        (
                           Times
                            (Times (Atom false, Plus (..., ...)),
                             Times (Star ..., Times (..., ...)))
                           ),
                       Plus
                        (One,
                         Times (Plus (..., ...), Star (Plus (..., ...)))))
                     )),
               Star (Star (Star (Star (Atom true)))))
             )))):
   bool Generated_Code.rexp
val runTO = fn:
   char list *
   (bool Generated_Code.rexp -> bool Generated_Code.rexp -> bool)
     -> int list -> unit
val evil =
   Star
    (
       Star
        (
           Star
            (
               Times
                (Times
                  (Star (Star (Atom false)),
                   Plus
                    (Star
                      (
                         Star
                          (
                             Plus
                              (Times
                                (Atom false, Plus (Atom false, Atom true)),
                               Times
                                (Times
                                  (Times (Atom false, Plus (..., ...)),
                                   Times (Atom true, Atom false)),
                                 Times
                                  (Star (Times (..., ...)), Atom false)))
                             )
                         ),
                     Times
                      (Times
                        (Plus (Atom false, Plus (Atom true, Atom true)),
                         Atom true),
                       Star (Plus (Atom false, Atom true))))),
                 Plus (Atom false, Star (Atom false)))
               )
           )
       ):
   bool Generated_Code.rexp
### theory "Draft.Benchmark"
### 1.118s elapsed time, 1.194s cpu time, 0.106s GC time
Loading theory "Draft.BenchmarkTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.BenchmarkTemplates"
### 0.444s elapsed time, 0.638s cpu time, 0.081s GC time
val it = (): unit
