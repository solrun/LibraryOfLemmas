Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Before2Templates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Before2Templates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Before2Templates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.Before2Templates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.122s elapsed time, 0.504s cpu time, 0.047s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Loading theory "Draft.Automaton" (required by "Draft.Before2Templates" via "Draft.Before2" via "Draft.Position_Autos")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.218s elapsed time, 0.889s cpu time, 0.047s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Before2Templates" via "Draft.ExtrEqs")
consts
  add_atoms :: "'a rexp => 'a list => 'a list"
locale rexp_DA
  fixes init :: "'a rexp => 's"
    and delta :: "'a => 's => 's"
    and final :: "'s => bool"
    and L :: "'s => 'a list set"
  assumes "rexp_DA init delta final L"
### theory "HOL-Library.Nat_Bijection"
### 0.341s elapsed time, 1.369s cpu time, 0.126s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Before2Templates" via "Draft.ExtrEqs")
locale rexp_DFA
  fixes init :: "'a rexp => 'b"
    and delta :: "'a => 'b => 'b"
    and final :: "'b => bool"
    and L :: "'b => 'a list set"
  assumes "rexp_DFA init delta final L"
### theory "Draft.Automaton"
### 0.279s elapsed time, 1.106s cpu time, 0.080s GC time
Loading theory "Draft.Position_Autos" (required by "Draft.Before2Templates" via "Draft.Before2")
consts
  mrexps :: "'a rexp => (bool * 'a) rexp set"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "{}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.074s elapsed time, 4.067s cpu time, 0.936s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "{}"
### theory "HOL-Library.Stream"
### 1.140s elapsed time, 4.176s cpu time, 0.931s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst (final_b p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.054s elapsed time, 6.777s cpu time, 1.171s GC time
Loading theory "Draft.Templates" (required by "Draft.Before2Templates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.057s elapsed time, 0.137s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Before2Templates")
Found termination order: "(%p. size (fst (final_b p))) <*mlex*> {}"
### theory "Draft.Position_Autos"
### 1.785s elapsed time, 5.491s cpu time, 1.100s GC time
Loading theory "Draft.Before2" (required by "Draft.Before2Templates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.533s elapsed time, 1.107s cpu time, 0.081s GC time
consts
  final3 :: "'a mrexp3 => bool"
consts
  mrexps3 :: "'a rexp => 'a mrexp3 set"
consts
  follow3 :: "bool => 'a mrexp3 => 'a mrexp3"
consts
  empty_mrexp3 :: "'a rexp => 'a mrexp3"
consts
  move3 :: "'a => 'a mrexp3 => bool => 'a mrexp3"
consts
  strip3 :: "'a mrexp3 => (bool * 'a) rexp"
consts
  ok3 :: "'a mrexp3 => bool"
### Generation of a parametrized correspondence relation failed.
### Reason:  No relator for the type "Before2.mrexp3" found.
instantiation
  ok_mrexp3 :: (equal) equal
  equal_ok_mrexp3 == equal_class.equal ::
    'a ok_mrexp3 => 'a ok_mrexp3 => bool
Found termination order: "(%p. size (final_b p)) <*mlex*> {}"
### Ignoring duplicate rewrite rule:
### eq_mrexp3 (Atom3 ?v1 ?va1) One3 == False
### Ignoring duplicate rewrite rule:
### eq_mrexp3 (Plus3 ?v1 ?va1 ?vb1 ?vc1) One3 == False
### Ignoring duplicate rewrite rule:
### eq_mrexp3 (Times3 ?v1 ?va1 ?vb1 ?vc1) One3 == False
### Ignoring duplicate rewrite rule:
### eq_mrexp3 (Star3 ?v1 ?va1) One3 == False
### Ignoring duplicate rewrite rule:
### eq_mrexp3 One3 (Atom3 ?v1 ?va1) == False
### Ignoring duplicate rewrite rule:
### eq_mrexp3 One3 (Plus3 ?v1 ?va1 ?vb1 ?vc1) == False
### Ignoring duplicate rewrite rule:
### eq_mrexp3 One3 (Times3 ?v1 ?va1 ?vb1 ?vc1) == False
### Ignoring duplicate rewrite rule:
### eq_mrexp3 One3 (Star3 ?v1 ?va1) == False
### theory "Draft.Before2"
### 3.662s elapsed time, 5.605s cpu time, 1.229s GC time
Loading theory "Draft.Before2Templates"
val templateLemmas =
   [("Before2.ok3_empty_mrexp3", "ok3 (empty_mrexp3 ?r)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Before2.finite_atoms", "finite (atoms ?r)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Before2.finite_mrexps3", "finite (mrexps3 ?r)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Before2.empty_mrexp3_mrexps", "empty_mrexp3 ?r : mrexps3 ?r",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 0))
         )),
    ("Before2.nonfin1_empty_mrexp3", "?c ~: fin1 (empty_mrexp3 ?r)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)))
             )
         )),
    ("Before2.nul_empty_mrexp3", "nul (empty_mrexp3 ?r) = nullable ?r",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Before2.ok3_follow3", "ok3 ?r ==> ok3 (follow3 ?m ?r)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Before2.eq_mrexp3_refl", "?r = ?s ==> eq_mrexp3 ?r ?s",
     template_implication
      ([template_equation (template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Before2.ok3_move3", "ok3 ?r ==> ok3 (move3 ?m ?r ?c)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2),
               template_var 0))
           ))),
    ("Before2.strip3_empty_mrexp3",
     "strip3 (empty_mrexp3 ?r) = empty_mrexp ?r",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app (template_hole 2, t_empty), template_var 0))),
    ("Before2.ok3_final3_final", "ok3 ?r ==> final3 ?r = final (strip3 ?r)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Before2.ok3_nul_nullable", "ok3 ?r ==> nul ?r = nullable (strip3 ?r)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Before2.strip_mrexps3", "(strip o strip3) ` mrexps3 ?r = {?r}",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_hole 4)),
             template_hole 3)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Before2.ok3_fin1_final1",
     "ok3 ?r ==> fin1 ?r = Collect (final1 (strip3 ?r))",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("Before2.nul_follow3", "ok3 ?r ==> nul (follow3 ?m ?r) = nul ?r",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app (template_hole 1, template_var 1)))),
    ("Before2.follow3_mrexps3",
     "?r : mrexps3 ?s ==> follow3 ?m ?r : mrexps3 ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app (template_hole 1, template_var 1))
           ))),
    ("Before2.follow3_follow",
     "ok3 ?r ==> strip3 (follow3 ?m ?r) = follow ?m (strip3 ?r)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app (template_hole 2, template_var 1))))),
    ("Before2.move3_mrexps3",
     "?r : mrexps3 ?s ==> move3 ?x ?r ?a : mrexps3 ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app (template_hole 1, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 3),
                 template_var 0)),
             template_app (template_hole 1, template_var 2))
           ))),
    ("Before2.strip3_move3",
     "ok3 ?r ==> strip3 (move3 ?m ?r ?c) = move ?m (strip3 ?r) ?c",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_app (template_hole 2, template_var 2)),
           template_var 0)))),
    ("Before2.eq_mrexp3_eq",
     "[| ok3 ?r; ok3 ?s |] ==> eq_mrexp3 ?r ?s = (?r = ?s)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0)
              )],
         template_equation (template_var 1, template_var 0)))),
    ("Before2.fin1_atoms",
     "[| ?x : fin1 ?mr; ?mr : mrexps3 ?r |] ==> ?x : atoms ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Before2.eq_mrexp3_imp_eq",
     "[| eq_mrexp3 ?r ?s; ok3 ?r; ok3 ?s |] ==> ?r = ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0)))]:
   (string * thm * template) list
### theory "Draft.Before2Templates"
### 0.361s elapsed time, 0.534s cpu time, 0.053s GC time
val it = (): unit
