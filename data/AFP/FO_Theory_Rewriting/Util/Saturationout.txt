Loading theory "Draft.Saturation" (required by "Draft.SaturationTemplates")
Loading theory "Draft.Templates" (required by "Draft.SaturationTemplates" via "Draft.ExtrEqs")
locale set_closure_oprator
  fixes f :: "'a => 'a => 'a"
  assumes "set_closure_oprator f"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.067s elapsed time, 0.160s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SaturationTemplates")
locale set_closure_oprator
  fixes f :: "'a => 'a => 'a"
  assumes "set_closure_oprator f"
Proofs for inductive predicate(s) "closurep"
  Proving monotonicity ...
locale semilattice_closure_operator
  fixes f :: "'a => 'a => 'a"
    and less_eq :: "'a => 'a => bool"
    and e :: "'a"
  assumes "semilattice_closure_operator f less_eq e"
Found termination order: "{}"
Found termination order: "{}"
locale set_closure_partial_oprator
  fixes P :: "'a => 'a => bool"
    and f :: "'a => 'a => 'a"
  assumes "set_closure_partial_oprator P f"
locale set_closure_partial_oprator
  fixes P :: "'a => 'a => bool"
    and f :: "'a => 'a => 'a"
  assumes "set_closure_partial_oprator P f"
Proofs for inductive predicate(s) "pred_closurep"
  Proving monotonicity ...
locale semilattice_closure_partial_operator
  fixes P :: "'a => 'a => bool"
    and f :: "'a => 'a => 'a"
    and less_eq :: "'a => 'a => bool"
    and e :: "'a"
  assumes "semilattice_closure_partial_operator P f less_eq e"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.571s elapsed time, 1.167s cpu time, 0.094s GC time
locale semilattice_closure_partial_operator
  fixes P :: "'a => 'a => bool"
    and f :: "'a => 'a => 'a"
    and less_eq :: "'a => 'a => bool"
    and e :: "'a"
  assumes "semilattice_closure_partial_operator P f less_eq e"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Draft.Saturation"
### 0.756s elapsed time, 1.437s cpu time, 0.094s GC time
Loading theory "Draft.SaturationTemplates"
val templateLemmas =
   [("Saturation.inv_to_set",
     "(ALL i<length ?ss. ?ss ! i : ?S) = (set ?ss <= ?S)",
     template_equation
      (template_app (template_hole 7, t_empty),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Saturation.ac_comp_fun_commute",
     "[| !!x y. ?f x y = ?f y x; !!x y z. ?f x (?f y z) = ?f (?f x y) z |]
      ==> comp_fun_commute ?f",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Saturation.closure_sound",
     "[| !!s t. [| s : ?S; t : ?S |] ==> ?f s t : ?S;
         !!x y. ?f x y = ?f y x; !!x y z. ?f x (?f y z) = ?f (?f x y) z;
         set ?ss <= ?S; ?ss ~= [] |]
      ==> fold ?f (tl ?ss) (hd ?ss) : ?S",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_inequation
         (less_equals, template_app (template_hole 6, template_var 0),
          template_var 2),
        template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 1),
                   template_app (template_hole 1, template_var 0)),
                 template_app (template_hole 0, template_var 0))),
             template_var 2)
           )))]:
   (string * thm * template) list
### theory "Draft.SaturationTemplates"
### 0.301s elapsed time, 0.471s cpu time, 0.059s GC time
val it = (): unit
