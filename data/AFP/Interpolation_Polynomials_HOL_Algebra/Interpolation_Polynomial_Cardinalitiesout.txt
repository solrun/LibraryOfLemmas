Loading theory "HOL-Library.Cancellation" (required by "Draft.Interpolation_Polynomial_CardinalitiesMoreTemplates" via "Draft.Interpolation_Polynomial_Cardinalities" via "Draft.Bounded_Degree_Polynomials" via "HOL-Algebra.Polynomial_Divisibility" via "HOL-Algebra.Polynomials" via "HOL-Algebra.Ring_Divisibility" via "HOL-Algebra.Divisibility" via "HOL-Combinatorics.List_Permutation" via "HOL-Combinatorics.Permutations" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Interpolation_Polynomial_CardinalitiesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.FuncSet" (required by "Draft.Interpolation_Polynomial_CardinalitiesMoreTemplates" via "Draft.Interpolation_Polynomial_Cardinalities" via "Draft.Bounded_Degree_Polynomials" via "HOL-Algebra.Polynomial_Divisibility" via "HOL-Algebra.Polynomials" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice" via "HOL-Algebra.Order" via "HOL-Algebra.Congruence")
Loading theory "HOL-Combinatorics.Transposition" (required by "Draft.Interpolation_Polynomial_CardinalitiesMoreTemplates" via "Draft.Interpolation_Polynomial_Cardinalities" via "Draft.Bounded_Degree_Polynomials" via "HOL-Algebra.Polynomial_Divisibility" via "HOL-Algebra.Polynomials" via "HOL-Algebra.Ring_Divisibility" via "HOL-Algebra.Divisibility" via "HOL-Combinatorics.List_Permutation" via "HOL-Combinatorics.Permutations")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.121s elapsed time, 0.512s cpu time, 0.033s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Interpolation_Polynomial_CardinalitiesMoreTemplates" via "Draft.Interpolation_Polynomial_Cardinalities" via "Draft.Bounded_Degree_Polynomials" via "HOL-Algebra.Polynomial_Divisibility" via "HOL-Algebra.Polynomials" via "HOL-Algebra.Ring_Divisibility" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Elementary_Groups")
### theory "HOL-Combinatorics.Transposition"
### 0.144s elapsed time, 0.596s cpu time, 0.033s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Interpolation_Polynomial_CardinalitiesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  enumerate :: "'a set => nat => 'a"
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.FuncSet"
### 0.389s elapsed time, 1.557s cpu time, 0.104s GC time
Loading theory "HOL-Algebra.Congruence" (required by "Draft.Interpolation_Polynomial_CardinalitiesMoreTemplates" via "Draft.Interpolation_Polynomial_Cardinalities" via "Draft.Bounded_Degree_Polynomials" via "HOL-Algebra.Polynomial_Divisibility" via "HOL-Algebra.Polynomials" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice" via "HOL-Algebra.Order")
### theory "HOL-Library.Infinite_Set"
### 0.304s elapsed time, 1.187s cpu time, 0.163s GC time
Loading theory "HOL-Library.Disjoint_Sets" (required by "Draft.Interpolation_Polynomial_CardinalitiesMoreTemplates" via "Draft.Interpolation_Polynomial_Cardinalities" via "Draft.Bounded_Degree_Polynomials" via "HOL-Algebra.Polynomial_Divisibility" via "HOL-Algebra.Polynomials" via "HOL-Algebra.Ring_Divisibility" via "HOL-Algebra.Divisibility" via "HOL-Combinatorics.List_Permutation" via "HOL-Combinatorics.Permutations")
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.464s elapsed time, 1.855s cpu time, 0.195s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Interpolation_Polynomial_CardinalitiesMoreTemplates" via "Draft.Interpolation_Polynomial_Cardinalities" via "Draft.Bounded_Degree_Polynomials" via "HOL-Algebra.Polynomial_Divisibility" via "HOL-Algebra.Polynomials" via "HOL-Algebra.Ring_Divisibility" via "HOL-Algebra.Divisibility" via "HOL-Combinatorics.List_Permutation" via "HOL-Combinatorics.Permutations")
### theory "HOL-Library.Nat_Bijection"
### 0.351s elapsed time, 1.377s cpu time, 0.163s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Interpolation_Polynomial_CardinalitiesMoreTemplates" via "Draft.ExtrEqs")
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
### theory "HOL-Library.Disjoint_Sets"
### 0.297s elapsed time, 1.173s cpu time, 0.124s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Interpolation_Polynomial_CardinalitiesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
locale equivalence
  fixes S :: "('a, 'b) eq_object_scheme"  (structure)
  assumes "equivalence S"
consts
  shift :: "'a list => 'a stream => 'a stream"
locale partition
  fixes A :: "'a set"
    and B :: "'a set set"
  assumes "Congruence.partition A B"
### theory "HOL-Library.Set_Algebras"
### 0.408s elapsed time, 1.470s cpu time, 0.607s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Interpolation_Polynomial_CardinalitiesMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### theory "HOL-Algebra.Congruence"
### 0.943s elapsed time, 3.575s cpu time, 0.868s GC time
Loading theory "HOL-Algebra.Order" (required by "Draft.Interpolation_Polynomial_CardinalitiesMoreTemplates" via "Draft.Interpolation_Polynomial_Cardinalities" via "Draft.Bounded_Degree_Polynomials" via "HOL-Algebra.Polynomial_Divisibility" via "HOL-Algebra.Polynomials" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice")
consts
  cycle :: "'a list => 'a stream"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.150s elapsed time, 4.389s cpu time, 1.032s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Interpolation_Polynomial_CardinalitiesMoreTemplates" via "Draft.ExtrEqs")
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
Found termination order: "size <*mlex*> {}"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
Found termination order: "size <*mlex*> {}"
locale partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "partial_order L"
consts
  mset :: "'a list => 'a multiset"
Found termination order: "size <*mlex*> {}"
locale weak_partial_order_bottom
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_bottom L"
locale weak_partial_order_top
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_top L"
locale weak_total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_total_order L"
Found termination order: "size <*mlex*> {}"
locale total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "total_order L"
### theory "HOL-Algebra.Order"
### 0.946s elapsed time, 3.722s cpu time, 0.450s GC time
Loading theory "HOL-Algebra.Lattice" (required by "Draft.Interpolation_Polynomial_CardinalitiesMoreTemplates" via "Draft.Interpolation_Polynomial_Cardinalities" via "Draft.Bounded_Degree_Polynomials" via "HOL-Algebra.Polynomial_Divisibility" via "HOL-Algebra.Polynomials" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice")
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "size <*mlex*> {}"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
locale weak_upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_upper_semilattice L"
locale weak_lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lower_semilattice L"
Found termination order: "size <*mlex*> {}"
locale weak_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lattice L"
### theory "HOL-Library.BigO"
### 0.869s elapsed time, 3.429s cpu time, 0.367s GC time
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "size <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale weak_bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_bounded_lattice L"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
locale upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "upper_semilattice L"
locale lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lower_semilattice L"
locale Lattice.lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lattice L"
Found termination order: "size <*mlex*> {}"
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
### theory "HOL-Algebra.Lattice"
### 0.814s elapsed time, 2.680s cpu time, 0.372s GC time
Loading theory "HOL-Algebra.Complete_Lattice" (required by "Draft.Interpolation_Polynomial_CardinalitiesMoreTemplates" via "Draft.Interpolation_Polynomial_Cardinalities" via "Draft.Bounded_Degree_Polynomials" via "HOL-Algebra.Polynomial_Divisibility" via "HOL-Algebra.Polynomials" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group")
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
### theory "HOL-Library.Tree"
### 2.113s elapsed time, 7.674s cpu time, 0.973s GC time
Loading theory "Draft.Templates" (required by "Draft.Interpolation_Polynomial_CardinalitiesMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.060s elapsed time, 0.179s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Interpolation_Polynomial_CardinalitiesMoreTemplates")
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
### theory "HOL-Algebra.Complete_Lattice"
### 0.984s elapsed time, 3.103s cpu time, 1.298s GC time
Loading theory "HOL-Algebra.Group" (required by "Draft.Interpolation_Polynomial_CardinalitiesMoreTemplates" via "Draft.Interpolation_Polynomial_Cardinalities" via "Draft.Bounded_Degree_Polynomials" via "HOL-Algebra.Polynomial_Divisibility" via "HOL-Algebra.Polynomials" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.977s elapsed time, 3.077s cpu time, 1.292s GC time
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
locale Group.monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.monoid G"
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
locale Group.group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.group G"
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
overloading
  nat_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => nat => 'a
### theory "HOL-Library.Multiset"
### 4.069s elapsed time, 13.904s cpu time, 3.112s GC time
Loading theory "HOL-Combinatorics.Permutations" (required by "Draft.Interpolation_Polynomial_CardinalitiesMoreTemplates" via "Draft.Interpolation_Polynomial_Cardinalities" via "Draft.Bounded_Degree_Polynomials" via "HOL-Algebra.Polynomial_Divisibility" via "HOL-Algebra.Polynomials" via "HOL-Algebra.Ring_Divisibility" via "HOL-Algebra.Divisibility" via "HOL-Combinatorics.List_Permutation")
overloading
  int_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => int => 'a
locale submonoid
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "submonoid H G"
locale subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "subgroup H G"
Proofs for inductive predicate(s) "swapidseq"
  Proving monotonicity ...
locale group_hom
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and H :: "('c, 'd) monoid_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "group_hom G H h"
"(bij, bij_betw, permutation)"
  :: "(('a => 'b) => bool) *
      (('c => 'd) => 'c set => 'd set => bool) * (('e => 'e) => bool)"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale comm_group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "comm_group G"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
### theory "HOL-Combinatorics.Permutations"
### 1.201s elapsed time, 3.153s cpu time, 1.558s GC time
Loading theory "HOL-Combinatorics.List_Permutation" (required by "Draft.Interpolation_Polynomial_CardinalitiesMoreTemplates" via "Draft.Interpolation_Polynomial_Cardinalities" via "Draft.Bounded_Degree_Polynomials" via "HOL-Algebra.Polynomial_Divisibility" via "HOL-Algebra.Polynomials" via "HOL-Algebra.Ring_Divisibility" via "HOL-Algebra.Divisibility")
### theory "HOL-Combinatorics.List_Permutation"
### 0.068s elapsed time, 0.135s cpu time, 0.000s GC time
### theory "HOL-Algebra.Group"
### 1.724s elapsed time, 4.411s cpu time, 1.682s GC time
Loading theory "HOL-Algebra.Coset" (required by "Draft.Interpolation_Polynomial_CardinalitiesMoreTemplates" via "Draft.Interpolation_Polynomial_Cardinalities" via "Draft.Bounded_Degree_Polynomials" via "HOL-Algebra.Polynomial_Divisibility" via "HOL-Algebra.Polynomials" via "HOL-Algebra.Ring_Divisibility" via "HOL-Algebra.Ideal" via "HOL-Algebra.AbelCoset")
Loading theory "HOL-Algebra.FiniteProduct" (required by "Draft.Interpolation_Polynomial_CardinalitiesMoreTemplates" via "Draft.Interpolation_Polynomial_Cardinalities" via "Draft.Bounded_Degree_Polynomials" via "HOL-Algebra.Polynomial_Divisibility" via "HOL-Algebra.Polynomials" via "HOL-Algebra.Ring")
Proofs for inductive predicate(s) "foldSetDp"
  Proving monotonicity ...
locale normal
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "normal H G"
locale LCD
  fixes B :: "'b set"
    and D :: "'a set"
    and f :: "'b => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
  assumes "LCD B D (\<cdot>)"
locale ACeD
  fixes D :: "'a set"
    and f :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and e :: "'a"
  assumes "ACeD D (\<cdot>) e"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
### theory "HOL-Algebra.FiniteProduct"
### 0.402s elapsed time, 0.878s cpu time, 0.161s GC time
Loading theory "HOL-Algebra.Ring" (required by "Draft.Interpolation_Polynomial_CardinalitiesMoreTemplates" via "Draft.Interpolation_Polynomial_Cardinalities" via "Draft.Bounded_Degree_Polynomials" via "HOL-Algebra.Polynomial_Divisibility" via "HOL-Algebra.Polynomials")
### Ambiguous input (line 611 of "~~/src/HOL/Algebra/Coset.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>r_congruent_indexed" ("_index" ("_position" G))
###       ("_position" H))
###     ("_Coll" ("_pattern" ("_position" x) ("_position" y))
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" x)
###           ("_applC" ("_position" carrier) ("_position" G)))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" y)
###             ("_applC" ("_position" carrier) ("_position" G)))
###           ("\<^const>Set.member"
###             ("\<^const>Group.monoid.mult_indexed"
###               ("\<^const>Group.m_inv_indexed" ("_index" ("_position" G))
###                 ("_position" x))
###               ("_index" ("_position" G)) ("_position" y))
###             ("_position" H)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>r_congruent_indexed" ("_index" ("_position" G))
###     ("\<^const>HOL.eq" ("_position" H)
###       ("_Coll" ("_pattern" ("_position" x) ("_position" y))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" x)
###             ("_applC" ("_position" carrier) ("_position" G)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" y)
###               ("_applC" ("_position" carrier) ("_position" G)))
###             ("\<^const>Set.member"
###               ("\<^const>Group.monoid.mult_indexed"
###                 ("\<^const>Group.m_inv_indexed" ("_index" ("_position" G))
###                   ("_position" x))
###                 ("_index" ("_position" G)) ("_position" y))
###               ("_position" H))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### Cannot skip proof of schematic goal statement
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### Cannot skip proof of schematic goal statement
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### Cannot skip proof of schematic goal statement
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### Cannot skip proof of schematic goal statement
### theory "HOL-Algebra.Coset"
### 1.001s elapsed time, 2.178s cpu time, 0.380s GC time
Loading theory "HOL-Algebra.Generated_Groups" (required by "Draft.Interpolation_Polynomial_CardinalitiesMoreTemplates" via "Draft.Interpolation_Polynomial_Cardinalities" via "Draft.Bounded_Degree_Polynomials" via "HOL-Algebra.Polynomial_Divisibility" via "HOL-Algebra.Polynomials" via "HOL-Algebra.Ring_Divisibility" via "HOL-Algebra.Multiplicative_Group")
Loading theory "HOL-Algebra.Divisibility" (required by "Draft.Interpolation_Polynomial_CardinalitiesMoreTemplates" via "Draft.Interpolation_Polynomial_Cardinalities" via "Draft.Bounded_Degree_Polynomials" via "HOL-Algebra.Polynomial_Divisibility" via "HOL-Algebra.Polynomials" via "HOL-Algebra.Ring_Divisibility")
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
Proofs for inductive predicate(s) "generatep"
  Proving monotonicity ...
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
locale monoid_cancel
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "monoid_cancel G"
locale comm_monoid_cancel
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "comm_monoid_cancel G"
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
carrier (| carrier = ?carrier, ... = ?more |) = ?carrier
partial_object.more (| carrier = ?carrier, ... = ?more |) = ?more
carrier_update ?carrier' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier' ?carrier, ... = ?more |)
partial_object.more_update ?more' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier, ... = ?more' ?more |)
(\<otimes>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub>) =
?mult
\<one>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub> =
?one
monoid.more
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
?more
mult_update ?mult'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult' ?mult, one = ?one, ... = ?more |)
one_update ?one'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one' ?one, ... = ?more |)
monoid.more_update ?more'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more' ?more |)
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
### ML warning (line 44 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 47 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Matches are not exhaustive.
signature RINGSIMP =
  sig
    val add_struct: string * term list -> attribute
    val algebra_tac: Proof.context -> int -> tactic
    val del_struct: string * term list -> attribute
    val print_structures: Proof.context -> unit
  end
structure Ringsimp: RINGSIMP
### theory "HOL-Algebra.Generated_Groups"
### 0.659s elapsed time, 2.051s cpu time, 0.416s GC time
Loading theory "HOL-Algebra.Elementary_Groups" (required by "Draft.Interpolation_Polynomial_CardinalitiesMoreTemplates" via "Draft.Interpolation_Polynomial_Cardinalities" via "Draft.Bounded_Degree_Polynomials" via "HOL-Algebra.Polynomial_Divisibility" via "HOL-Algebra.Polynomials" via "HOL-Algebra.Ring_Divisibility" via "HOL-Algebra.Multiplicative_Group")
locale group_disjoint_sum
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and A :: "'a set"
    and B :: "'a set"
  assumes "group_disjoint_sum G A B"
locale factorial_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "factorial_monoid G"
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
### theory "HOL-Algebra.Elementary_Groups"
### 0.527s elapsed time, 1.633s cpu time, 0.314s GC time
essentially_equal ?G ?fs1.0 ?fs2.0 =
(EX fs1'. mset ?fs1.0 = mset fs1' & fs1' [\<sim>]\<^bsub>?G\<^esub> ?fs2.0)
locale ring_hom_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "ring_hom_cring R S h"
locale gcd_condition_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "gcd_condition_monoid G"
locale primeness_condition_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "primeness_condition_monoid G"
locale divisor_chain_condition_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "divisor_chain_condition_monoid G"
### theory "HOL-Algebra.Ring"
### 2.481s elapsed time, 6.507s cpu time, 1.217s GC time
Loading theory "HOL-Algebra.AbelCoset" (required by "Draft.Interpolation_Polynomial_CardinalitiesMoreTemplates" via "Draft.Interpolation_Polynomial_Cardinalities" via "Draft.Bounded_Degree_Polynomials" via "HOL-Algebra.Polynomial_Divisibility" via "HOL-Algebra.Polynomials" via "HOL-Algebra.Ring_Divisibility" via "HOL-Algebra.Ideal")
Loading theory "HOL-Algebra.Module" (required by "Draft.Interpolation_Polynomial_CardinalitiesMoreTemplates" via "Draft.Interpolation_Polynomial_Cardinalities" via "Draft.Bounded_Degree_Polynomials" via "HOL-Algebra.Polynomial_Divisibility" via "HOL-Algebra.Polynomials" via "HOL-Algebra.Ring_Divisibility" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly")
### theory "HOL-Algebra.Divisibility"
### 2.056s elapsed time, 5.749s cpu time, 1.090s GC time
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
locale abelian_group_hom
  fixes G :: "('a, 'b) ring_scheme"  (structure)
    and H :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "abelian_group_hom G H h"
### Cannot skip proof of schematic goal statement
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
[| ?M <= carrier G; ?g : carrier G; ?h : carrier G |]
==> ?M #>\<^bsub>add_monoid G\<^esub> ?g #>\<^bsub>add_monoid G\<^esub> ?h =
    ?M #>\<^bsub>add_monoid G\<^esub> ?g \<oplus> ?h
[| abelian_group ?G; ?M <= carrier ?G; ?g : carrier ?G; ?h : carrier ?G |]
==> ?M +>\<^bsub>?G\<^esub> ?g +>\<^bsub>?G\<^esub> ?h =
    ?M +>\<^bsub>?G\<^esub> ?g \<oplus>\<^bsub>?G\<^esub> ?h
locale algebra
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "algebra R M"
locale additive_subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) ring_scheme"  (structure)
  assumes "additive_subgroup H G"
locale abelian_subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_subgroup H G"
locale submodule
  fixes H :: "'c set"
    and R :: "('a, 'b) ring_scheme"
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "submodule H R M"
### theory "HOL-Algebra.Module"
### 1.255s elapsed time, 2.928s cpu time, 0.550s GC time
### theory "HOL-Algebra.AbelCoset"
### 2.084s elapsed time, 3.887s cpu time, 0.735s GC time
Loading theory "HOL-Algebra.Ideal" (required by "Draft.Interpolation_Polynomial_CardinalitiesMoreTemplates" via "Draft.Interpolation_Polynomial_Cardinalities" via "Draft.Bounded_Degree_Polynomials" via "HOL-Algebra.Polynomial_Divisibility" via "HOL-Algebra.Polynomials" via "HOL-Algebra.Ring_Divisibility")
locale ideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ideal I R"
locale principalideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "principalideal I R"
locale maximalideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "maximalideal I R"
locale primeideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "primeideal I R"
### theory "HOL-Algebra.Ideal"
### 1.370s elapsed time, 1.610s cpu time, 0.331s GC time
Loading theory "HOL-Algebra.RingHom" (required by "Draft.Interpolation_Polynomial_CardinalitiesMoreTemplates" via "Draft.Interpolation_Polynomial_Cardinalities" via "Draft.Bounded_Degree_Polynomials" via "HOL-Algebra.Polynomial_Divisibility" via "HOL-Algebra.Polynomials" via "HOL-Algebra.Ring_Divisibility" via "HOL-Algebra.QuotRing")
locale ring_hom_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "ring_hom_ring R S h"
### theory "HOL-Algebra.RingHom"
### 0.592s elapsed time, 0.720s cpu time, 0.176s GC time
Loading theory "HOL-Algebra.QuotRing" (required by "Draft.Interpolation_Polynomial_CardinalitiesMoreTemplates" via "Draft.Interpolation_Polynomial_Cardinalities" via "Draft.Bounded_Degree_Polynomials" via "HOL-Algebra.Polynomial_Divisibility" via "HOL-Algebra.Polynomials" via "HOL-Algebra.Ring_Divisibility")
Loading theory "HOL-Algebra.UnivPoly" (required by "Draft.Interpolation_Polynomial_CardinalitiesMoreTemplates" via "Draft.Interpolation_Polynomial_Cardinalities" via "Draft.Bounded_Degree_Polynomials" via "HOL-Algebra.Polynomial_Divisibility" via "HOL-Algebra.Polynomials" via "HOL-Algebra.Ring_Divisibility" via "HOL-Algebra.Multiplicative_Group")
locale bound
  fixes z :: "'a"
    and n :: "nat"
    and f :: "nat => 'a"
  assumes "bound z n f"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale UP
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale UP
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
### theory "HOL-Algebra.QuotRing"
### 1.721s elapsed time, 3.880s cpu time, 0.993s GC time
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale UP
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  defines "P == UP R"
locale UP_pre_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_pre_univ_prop R S h"
  defines "P == UP R"
locale UP_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
    and s :: "'c"
    and Eval :: "(nat => 'a) => 'c"
  assumes "UP_univ_prop R S h s"
  defines "P == UP R"
    and "Eval == eval R S h s"
locale UP_pre_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_pre_univ_prop R S h"
  defines "P == UP R"
locale UP_pre_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_pre_univ_prop R S h"
  defines "P == UP R"
locale Group.monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.monoid G"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
### theory "HOL-Algebra.UnivPoly"
### 7.126s elapsed time, 12.136s cpu time, 4.951s GC time
Loading theory "HOL-Algebra.Multiplicative_Group" (required by "Draft.Interpolation_Polynomial_CardinalitiesMoreTemplates" via "Draft.Interpolation_Polynomial_Cardinalities" via "Draft.Bounded_Degree_Polynomials" via "HOL-Algebra.Polynomial_Divisibility" via "HOL-Algebra.Polynomials" via "HOL-Algebra.Ring_Divisibility")
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale Group.group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.group G"
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
### theory "HOL-Algebra.Multiplicative_Group"
### 1.901s elapsed time, 2.551s cpu time, 0.561s GC time
Loading theory "HOL-Algebra.Ring_Divisibility" (required by "Draft.Interpolation_Polynomial_CardinalitiesMoreTemplates" via "Draft.Interpolation_Polynomial_Cardinalities" via "Draft.Bounded_Degree_Polynomials" via "HOL-Algebra.Polynomial_Divisibility" via "HOL-Algebra.Polynomials")
Loading theory "HOL-Algebra.Subrings" (required by "Draft.Interpolation_Polynomial_CardinalitiesMoreTemplates" via "Draft.Interpolation_Polynomial_Cardinalities" via "Draft.Bounded_Degree_Polynomials" via "HOL-Algebra.Polynomial_Divisibility" via "HOL-Algebra.Polynomials")
locale subring
  fixes H :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "subring H R"
locale subcring
  fixes H :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "subcring H R"
locale subdomain
  fixes H :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "subdomain H R"
locale subfield
  fixes K :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "subfield K R"
locale factorial_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "factorial_domain R"
locale noetherian_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "noetherian_ring R"
locale noetherian_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "noetherian_domain R"
locale principal_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "principal_domain R"
locale euclidean_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and \<phi> :: "'a => nat"
  assumes "euclidean_domain R \<phi>"
### theory "HOL-Algebra.Subrings"
### 2.378s elapsed time, 6.253s cpu time, 3.384s GC time
Loading theory "HOL-Algebra.Embedded_Algebras" (required by "Draft.Interpolation_Polynomial_CardinalitiesMoreTemplates" via "Draft.Interpolation_Polynomial_Cardinalities" via "Draft.Bounded_Degree_Polynomials" via "HOL-Algebra.Polynomial_Divisibility")
locale embedded_algebra
  fixes K :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "embedded_algebra K R"
Found termination order: "{}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "independent"
  Proving monotonicity ...
Proofs for inductive predicate(s) "dimension"
  Proving monotonicity ...
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale ring_hom_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "ring_hom_ring R S h"
locale subalgebra
  fixes K :: "'a set"
    and V :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "subalgebra K V R"
### theory "HOL-Algebra.Embedded_Algebras"
### 2.835s elapsed time, 6.078s cpu time, 1.039s GC time
### theory "HOL-Algebra.Ring_Divisibility"
### 5.309s elapsed time, 12.440s cpu time, 4.429s GC time
Loading theory "HOL-Algebra.Polynomials" (required by "Draft.Interpolation_Polynomial_CardinalitiesMoreTemplates" via "Draft.Interpolation_Polynomial_Cardinalities" via "Draft.Bounded_Degree_Polynomials" via "HOL-Algebra.Polynomial_Divisibility")
Found termination order: "length <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
Found termination order: "{}"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
### theory "HOL-Algebra.Polynomials"
### 17.302s elapsed time, 41.576s cpu time, 34.792s GC time
Loading theory "HOL-Algebra.Polynomial_Divisibility" (required by "Draft.Interpolation_Polynomial_CardinalitiesMoreTemplates" via "Draft.Interpolation_Polynomial_Cardinalities" via "Draft.Bounded_Degree_Polynomials")
### theory "HOL-Algebra.Polynomial_Divisibility"
### 10.720s elapsed time, 11.597s cpu time, 1.176s GC time
Loading theory "Draft.Bounded_Degree_Polynomials" (required by "Draft.Interpolation_Polynomial_CardinalitiesMoreTemplates" via "Draft.Interpolation_Polynomial_Cardinalities")
Loading theory "Draft.Lagrange_Interpolation" (required by "Draft.Interpolation_Polynomial_CardinalitiesMoreTemplates" via "Draft.Interpolation_Polynomial_Cardinalities")
### theory "Draft.Bounded_Degree_Polynomials"
### 0.767s elapsed time, 1.641s cpu time, 0.220s GC time
### theory "Draft.Lagrange_Interpolation"
### 1.460s elapsed time, 2.403s cpu time, 0.316s GC time
Loading theory "Draft.Interpolation_Polynomial_Cardinalities" (required by "Draft.Interpolation_Polynomial_CardinalitiesMoreTemplates")
### theory "Draft.Interpolation_Polynomial_Cardinalities"
### 1.217s elapsed time, 1.330s cpu time, 0.158s GC time
Loading theory "Draft.Interpolation_Polynomial_CardinalitiesMoreTemplates"
val templateLemmas =
   [("Interpolation_Polynomial_Cardinalities.card_vimage_inj_on",
     "[| inj_on ?f ?B; ?A <= ?f ` ?B |]
      ==> card (?f -` ?A Int ?B) = card ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 5, template_var 2),
            template_var 1))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Interpolation_Polynomial_Cardinalities.inv_subsetI",
     "(!!x. [| x : ?A; ?f x : ?B |] ==> x : ?C) ==> ?f -` ?B Int ?A <= ?C",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 3),
         template_var 0)))]:
   (string * thm * template) list
### theory "Draft.Interpolation_Polynomial_CardinalitiesMoreTemplates"
### 0.560s elapsed time, 0.870s cpu time, 0.104s GC time
val it = (): unit
