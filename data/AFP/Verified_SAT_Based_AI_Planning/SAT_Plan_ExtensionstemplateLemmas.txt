   [("SAT_Plan_Extensions.is_cnf_encode_interfering_operator_exclusion",
     "is_cnf (encode_interfering_operator_exclusion ?\<Pi> ?t)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("SAT_Plan_Extensions.cnf_of_encode_problem_with_operator_interference_exclusion_structure",
     "cnf (\<Phi>\<^sub>I ?\<Pi>)
      <= cnf (\<Phi>\<^sub>\<forall> ?\<Pi> ?t)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 1)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SAT_Plan_Extensions.is_cnf_encode_problem_with_operator_interference_exclusion",
     "is_valid_problem_strips ?\<Pi> ==>
      is_cnf (\<Phi>\<^sub>\<forall> ?\<Pi> ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("SAT_Plan_Extensions.cnf_of_encode_problem_with_operator_interference_exclusion_structure",
     "cnf (encode_all_frame_axioms ?\<Pi> ?t)
      <= cnf (\<Phi>\<^sub>\<forall> ?\<Pi> ?t)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SAT_Plan_Extensions.cnf_of_encode_problem_with_operator_interference_exclusion_structure",
     "cnf ((\<Phi>\<^sub>G ?\<Pi>) ?t)
      <= cnf (\<Phi>\<^sub>\<forall> ?\<Pi> ?t)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SAT_Plan_Extensions.cnf_of_encode_problem_with_operator_interference_exclusion_structure",
     "cnf (encode_operators ?\<Pi> ?t)
      <= cnf (\<Phi>\<^sub>\<forall> ?\<Pi> ?t)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SAT_Plan_Extensions.cnf_of_encode_problem_with_operator_interference_exclusion_structure",
     "cnf (encode_interfering_operator_exclusion ?\<Pi> ?t)
      <= cnf (\<Phi>\<^sub>\<forall> ?\<Pi> ?t)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SAT_Plan_Extensions.encode_problem_forall_step_decoded_plan_is_serializable_ii",
     "list_all (%op. ListMem op (?\<Pi>\<^sub>\<O>))
       (concat (\<Phi>\<inverse> ?\<Pi> ?\<A> ?t))",
     template_predicate
      (
         template_app
          (template_app (template_hole 4, t_empty),
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0)))
         )),
    ("SAT_Plan_Extensions.encode_problem_with_operator_interference_exclusion_has_model_then_also_partial_encodings",
     "?\<A> \<Turnstile> \<Phi>\<^sub>\<forall> ?\<Pi> ?t ==>
      ?\<A> \<Turnstile> \<Phi>\<^sub>I ?\<Pi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 0, template_var 1))
           ))),
    ("SAT_Plan_Extensions.encode_problem_with_operator_interference_exclusion_has_model_then_also_partial_encodings",
     "?\<A> \<Turnstile> \<Phi>\<^sub>\<forall> ?\<Pi> ?t ==>
      ?\<A> \<Turnstile> encode_all_frame_axioms ?\<Pi> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("SAT_Plan_Extensions.encode_problem_with_operator_interference_exclusion_has_model_then_also_partial_encodings",
     "?\<A> \<Turnstile> \<Phi>\<^sub>\<forall> ?\<Pi> ?t ==>
      ?\<A> \<Turnstile> (\<Phi>\<^sub>G ?\<Pi>) ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("SAT_Plan_Extensions.encode_problem_with_operator_interference_exclusion_has_model_then_also_partial_encodings",
     "?\<A> \<Turnstile> \<Phi>\<^sub>\<forall> ?\<Pi> ?t ==>
      ?\<A> \<Turnstile> encode_operators ?\<Pi> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("SAT_Plan_Extensions.encode_problem_with_operator_interference_exclusion_has_model_then_also_partial_encodings",
     "?\<A> \<Turnstile> \<Phi>\<^sub>\<forall> ?\<Pi> ?t ==>
      ?\<A> \<Turnstile> encode_interfering_operator_exclusion ?\<Pi> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("SAT_Plan_Extensions.encode_problem_serializable_sound",
     "[| is_valid_problem_strips ?\<Pi>;
         ?\<A> \<Turnstile> \<Phi>\<^sub>\<forall> ?\<Pi> ?t |]
      ==> is_parallel_solution_for_problem ?\<Pi>
           (\<Phi>\<inverse> ?\<Pi> ?\<A> ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("SAT_Plan_Extensions.serializable_encoding_decoded_plan_is_serializable",
     "[| is_valid_problem_strips ?\<Pi>;
         ?\<A> \<Turnstile> \<Phi>\<^sub>\<forall> ?\<Pi> ?t |]
      ==> is_serial_solution_for_problem ?\<Pi>
           (concat (\<Phi>\<inverse> ?\<Pi> ?\<A> ?t))",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 0)))
           ))),
    ("SAT_Plan_Extensions.encode_problem_forall_step_decoded_plan_is_serializable_i",
     "[| is_valid_problem_strips ?\<Pi>;
         ?\<A> \<Turnstile> \<Phi>\<^sub>\<forall> ?\<Pi> ?t |]
      ==> ?\<Pi>\<^sub>G \<subseteq>\<^sub>m
          execute_serial_plan (?\<Pi>\<^sub>I)
           (concat (\<Phi>\<inverse> ?\<Pi> ?\<A> ?t))",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 2)),
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 1),
                   template_var 0))))
           ))),
    ("SAT_Plan_Extensions.cnf_of_encode_interfering_operator_pair_exclusion_is_i",
     "cnf (encode_interfering_operator_pair_exclusion ?\<Pi> ?k ?op\<^sub>1
            ?op\<^sub>2) =
      {{(Operator ?k (index (?\<Pi>\<^sub>\<O>) ?op\<^sub>1))\<inverse>,
        (Operator ?k (index (?\<Pi>\<^sub>\<O>) ?op\<^sub>2))\<inverse>}}",
     template_equation
      (template_app
        (template_hole 9,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 8, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 3)),
                     template_var 1)))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 2),
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app (template_hole 2, template_var 3)),
                       template_var 0)))),
               template_hole 1))),
         template_hole 0))),
    ("SAT_Plan_Extensions.encode_problem_serializable_sound",
     "[| is_valid_problem_strips ?\<Pi>;
         ?\<A> \<Turnstile> \<Phi>\<^sub>\<forall> ?\<Pi> ?t |]
      ==> ALL k<length (\<Phi>\<inverse> ?\<Pi> ?\<A> ?t).
             are_all_operators_non_interfering
              ((\<Phi>\<inverse> ?\<Pi> ?\<A> ?t) ! k)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app
               (template_app (template_hole 7, template_var 2),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("SAT_Plan_Extensions.encode_problem_with_operator_interference_exclusion_complete_i",
     "[| is_valid_problem_strips ?\<Pi>;
         is_parallel_solution_for_problem ?\<Pi> ?\<pi>;
         ALL k<length ?\<pi>.
            are_all_operators_non_interfering (?\<pi> ! k) |]
      ==> valuation_for_plan ?\<Pi> ?\<pi> \<Turnstile>
          encode_interfering_operator_exclusion ?\<Pi> (length ?\<pi>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_app (template_hole 5, template_var 0)))
           ))),
    ("SAT_Plan_Extensions.encode_problem_serializable_complete",
     "[| is_valid_problem_strips ?\<Pi>;
         is_parallel_solution_for_problem ?\<Pi> ?\<pi>;
         ALL k<length ?\<pi>.
            are_all_operators_non_interfering (?\<pi> ! k) |]
      ==> valuation_for_plan ?\<Pi> ?\<pi> \<Turnstile>
          \<Phi>\<^sub>\<forall> ?\<Pi> length ?\<pi>",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_app (template_hole 5, template_var 0)))
           ))),
    ("SAT_Plan_Extensions.encode_problem_serializable_sound_i",
     "[| is_valid_problem_strips ?\<Pi>;
         ?\<A> \<Turnstile> \<Phi>\<^sub>\<forall> ?\<Pi> ?t; ?k < ?t;
         ?ops : set (subseqs ((\<Phi>\<inverse> ?\<Pi> ?\<A> ?t) ! ?k)) |]
      ==> are_all_operators_non_interfering ?ops",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app
               (template_app (template_hole 7, template_var 4),
                template_var 2))
            ),
        template_inequation (less_than, template_var 1, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_hole 4,
                template_app
                 (template_hole 3,
                  template_app
                   (template_app
                     (template_hole 2,
                      template_app
                       (template_app
                         (template_app (template_hole 1, template_var 4),
                          template_var 3),
                        template_var 2)),
                    template_var 1))))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("SAT_Plan_Extensions.cnf_of_encode_interfering_operator_exclusion_contains_clause_if",
     "[| ?k < ?t; ?op\<^sub>1 : set (?\<Pi>\<^sub>\<O>);
         ?op\<^sub>2 : set (?\<Pi>\<^sub>\<O>);
         index (?\<Pi>\<^sub>\<O>) ?op\<^sub>1 ~=
         index (?\<Pi>\<^sub>\<O>) ?op\<^sub>2;
         are_operators_interfering ?op\<^sub>1 ?op\<^sub>2 |]
      ==> {(Operator ?k (index (?\<Pi>\<^sub>\<O>) ?op\<^sub>1))\<inverse>,
           (Operator ?k (index (?\<Pi>\<^sub>\<O>) ?op\<^sub>2))\<inverse>}
          : cnf (encode_interfering_operator_exclusion ?\<Pi> ?t)",
     template_implication
      ([template_inequation (less_than, template_var 4, template_var 3),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2),
              template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 0),
              template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 1)))
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 11, template_var 1)),
                template_var 2),
              template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 11, template_var 1)),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 4),
                       template_app
                        (template_app
                          (template_hole 8,
                           template_app (template_hole 11, template_var 1)),
                         template_var 2)))),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 4),
                         template_app
                          (template_app
                            (template_hole 8,
                             template_app
                              (template_hole 11, template_var 1)),
                           template_var 0)))),
                   template_hole 2))),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3)))
           ))),
    ("SAT_Plan_Extensions.cnf_of_encode_interfering_operator_exclusion_is",
     "cnf (encode_interfering_operator_exclusion ?\<Pi> ?t) =
      \<Union>
       (UN (op\<^sub>1,
           op\<^sub>2):{(op\<^sub>1, op\<^sub>2).
                        (op\<^sub>1, op\<^sub>2)
                        : set (?\<Pi>\<^sub>\<O>) \<times>
                          set (?\<Pi>\<^sub>\<O>) &
                        index (?\<Pi>\<^sub>\<O>) op\<^sub>1 ~=
                        index (?\<Pi>\<^sub>\<O>) op\<^sub>2 &
                        are_operators_interfering op\<^sub>1 op\<^sub>2}.
           {{{(Operator k (index (?\<Pi>\<^sub>\<O>) op\<^sub>1))\<inverse>,
              (Operator k
                (index (?\<Pi>\<^sub>\<O>) op\<^sub>2))\<inverse>}} |
            k. k : {0..<?t}})",
     template_equation
      (template_app
        (template_hole 28,
         template_app
          (template_app (template_hole 27, template_var 1),
           template_var 0)),
       template_app
        (template_hole 26,
         template_app
          (template_hole 25,
           template_app
            (template_app
              (template_hole 24, template_app (template_hole 23, t_empty)),
             template_app
              (template_hole 8,
               template_app (template_hole 7, t_empty))))))),
    ("SAT_Plan_Extensions.cnf_of_encode_interfering_operator_exclusion_is_ii",
     "set (concat
            (map (%(op\<^sub>1, op\<^sub>2).
                     map (%k. encode_interfering_operator_pair_exclusion
                               ?\<Pi> k op\<^sub>1 op\<^sub>2)
                      [0..<?t])
              (filter
                (%(op\<^sub>1, op\<^sub>2).
                    index (?\<Pi>\<^sub>\<O>) op\<^sub>1 ~=
                    index (?\<Pi>\<^sub>\<O>) op\<^sub>2 &
                    are_operators_interfering op\<^sub>1 op\<^sub>2)
                (List.product (?\<Pi>\<^sub>\<O>) (?\<Pi>\<^sub>\<O>))))) =
      (UN (op\<^sub>1,
          op\<^sub>2):{(op\<^sub>1, op\<^sub>2).
                       (op\<^sub>1, op\<^sub>2)
                       : set (?\<Pi>\<^sub>\<O>) \<times>
                         set (?\<Pi>\<^sub>\<O>) &
                       index (?\<Pi>\<^sub>\<O>) op\<^sub>1 ~=
                       index (?\<Pi>\<^sub>\<O>) op\<^sub>2 &
                       are_operators_interfering op\<^sub>1 op\<^sub>2}.
          (%k. encode_interfering_operator_pair_exclusion ?\<Pi> k
                op\<^sub>1 op\<^sub>2) `
          {0..<?t})",
     template_equation
      (template_app
        (template_hole 26,
         template_app
          (template_hole 25,
           template_app
            (template_app
              (template_hole 24, template_app (template_hole 23, t_empty)),
             template_app
              (template_app
                (template_hole 18,
                 template_app (template_hole 17, t_empty)),
               template_app
                (template_app
                  (template_hole 10,
                   template_app (template_hole 12, template_var 1)),
                 template_app (template_hole 12, template_var 1)))))),
       template_app
        (template_hole 9,
         template_app
          (template_app
            (template_hole 8, template_app (template_hole 7, t_empty)),
           template_app
            (template_hole 4, template_app (template_hole 17, t_empty)))))),
    ("SAT_Plan_Extensions.cnf_of_encode_interfering_operator_exclusion_is_iii",
     "cnf `
      set (concat
            (map (%(op\<^sub>1, op\<^sub>2).
                     map (%k. encode_interfering_operator_pair_exclusion
                               ?\<Pi> k op\<^sub>1 op\<^sub>2)
                      [0..<?t])
              (filter
                (%(op\<^sub>1, op\<^sub>2).
                    index (?\<Pi>\<^sub>\<O>) op\<^sub>1 ~=
                    index (?\<Pi>\<^sub>\<O>) op\<^sub>2 &
                    are_operators_interfering op\<^sub>1 op\<^sub>2)
                (List.product (?\<Pi>\<^sub>\<O>) (?\<Pi>\<^sub>\<O>))))) =
      (UN (op\<^sub>1,
          op\<^sub>2):{(op\<^sub>1, op\<^sub>2).
                       (op\<^sub>1, op\<^sub>2)
                       : set (?\<Pi>\<^sub>\<O>) \<times>
                         set (?\<Pi>\<^sub>\<O>) &
                       index (?\<Pi>\<^sub>\<O>) op\<^sub>1 ~=
                       index (?\<Pi>\<^sub>\<O>) op\<^sub>2 &
                       are_operators_interfering op\<^sub>1 op\<^sub>2}.
          {{{(Operator k (index (?\<Pi>\<^sub>\<O>) op\<^sub>1))\<inverse>,
             (Operator k
               (index (?\<Pi>\<^sub>\<O>) op\<^sub>2))\<inverse>}} |
           k. k : {0..<?t}})",
     template_equation
      (template_app
        (template_app (template_hole 37, template_hole 36),
         template_app
          (template_hole 35,
           template_app
            (template_hole 34,
             template_app
              (template_app
                (template_hole 33,
                 template_app (template_hole 32, t_empty)),
               template_app
                (template_app
                  (template_hole 27,
                   template_app (template_hole 26, t_empty)),
                 template_app
                  (template_app
                    (template_hole 19,
                     template_app (template_hole 21, template_var 1)),
                   template_app (template_hole 21, template_var 1))))))),
       template_app
        (template_hole 18,
         template_app
          (template_app
            (template_hole 17, template_app (template_hole 16, t_empty)),
           template_app
            (template_hole 4,
             template_app (template_hole 26, t_empty))))))]
