Loading theory "Draft.Map_Supplement" (required by "Draft.STRIPS_SemanticsMoreTemplates" via "Draft.STRIPS_Semantics")
Loading theory "Draft.List_Supplement" (required by "Draft.STRIPS_SemanticsMoreTemplates" via "Draft.STRIPS_Semantics")
Loading theory "HOL-Library.Case_Converter" (required by "Draft.STRIPS_SemanticsMoreTemplates" via "Draft.STRIPS_Semantics" via "Draft.STRIPS_Representation" via "Draft.State_Variable_Representation" via "Propositional_Proof_Systems.CNF" via "HOL-Library.Simps_Case_Conv")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.STRIPS_SemanticsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
consts
  embed :: "'a list => 'a list list"
### theory "Draft.Map_Supplement"
### 0.063s elapsed time, 0.279s cpu time, 0.000s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.STRIPS_SemanticsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.List_Supplement"
### 0.069s elapsed time, 0.302s cpu time, 0.000s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.STRIPS_SemanticsMoreTemplates" via "Draft.STRIPS_Semantics" via "Draft.STRIPS_Representation" via "Draft.State_Variable_Representation" via "Propositional_Proof_Systems.Formulas" via "HOL-Library.Countable")
### theory "HOL-Library.Function_Algebras"
### 0.140s elapsed time, 0.572s cpu time, 0.049s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.STRIPS_SemanticsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
signature CASE_CONVERTER =
  sig
    type elimination_strategy
    val keep_constructor_context: elimination_strategy
    val replace_by_type:
       (Proof.context -> string * string -> bool) -> elimination_strategy
    val to_case:
       Proof.context ->
         elimination_strategy ->
           (string * typ -> int) -> thm list -> thm list option
  end
structure Case_Converter: CASE_CONVERTER
### theory "HOL-Library.Case_Converter"
### 0.195s elapsed time, 0.798s cpu time, 0.049s GC time
Loading theory "HOL-Library.Simps_Case_Conv" (required by "Draft.STRIPS_SemanticsMoreTemplates" via "Draft.STRIPS_Semantics" via "Draft.STRIPS_Representation" via "Draft.State_Variable_Representation" via "Propositional_Proof_Systems.CNF")
signature SIMPS_CASE_CONV =
  sig
    val gen_to_simps: Proof.context -> thm list -> thm -> thm list
    val to_case: Proof.context -> thm list -> thm
    val to_simps: Proof.context -> thm -> thm list
  end
structure Simps_Case_Conv: SIMPS_CASE_CONV
### theory "HOL-Library.Simps_Case_Conv"
### 0.082s elapsed time, 0.317s cpu time, 0.054s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.STRIPS_SemanticsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.196s elapsed time, 0.773s cpu time, 0.054s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.STRIPS_SemanticsMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.305s elapsed time, 1.193s cpu time, 0.104s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.STRIPS_SemanticsMoreTemplates" via "Draft.ExtrEqs")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.391s elapsed time, 1.530s cpu time, 0.178s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.STRIPS_SemanticsMoreTemplates" via "Draft.STRIPS_Semantics" via "Draft.STRIPS_Representation" via "Draft.State_Variable_Representation" via "Propositional_Proof_Systems.Formulas")
consts
  left :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
consts
  right :: "'a tree => 'a tree"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### Additional type variable(s) in locale specification "countable": 'a
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "finite_item"
consts
  flat :: "'a list stream => 'a stream"
  Proving monotonicity ...
### theory "HOL-Library.BigO"
### 0.780s elapsed time, 3.080s cpu time, 0.267s GC time
Loading theory "Propositional_Proof_Systems.CNF" (required by "Draft.STRIPS_SemanticsMoreTemplates" via "Draft.STRIPS_Semantics" via "Draft.STRIPS_Representation" via "Draft.State_Variable_Representation")
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.073s elapsed time, 4.083s cpu time, 0.885s GC time
[| (?x, ?y) : ?r; (?xs, ?ys) : listrel ?r |]
==> (?x # ?xs, ?y # ?ys) : listrel ?r
[| (?x, ?y) : ?r; (?xs, ?ys) : listrel ?r |]
==> (?x # ?xs, ?y # ?ys) : listrel ?r
[| (?x, ?y) : ?r; (?xs, ?ys) : listrel ?r |]
==> (?x # ?xs, ?y # ?ys) : listrel ?r
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  atoms_of_lit :: "'a literal => 'a"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Ambiguous input (line 25 of "$AFP/Propositional_Proof_Systems/CNF.thy") produces 2 parse trees:
### ("_constrain"
###   ("_Finset"
###     ("\<^const>Transitive_Closure.trancl"
###       ("\<^const>Groups.zero_class.zero")))
###   ("_tapp" ("_type_name" nat) ("_type_name" clause)))
### ("_constrain"
###   ("_Finset"
###     ("\<^const>CNF.literal.Pos" ("\<^const>Groups.zero_class.zero")))
###   ("_tapp" ("_type_name" nat) ("_type_name" clause)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
"insert (0\<^sup>+) \<box>"
  :: "nat literal set"
### Ambiguous input (line 28 of "$AFP/Propositional_Proof_Systems/CNF.thy") produces 2 parse trees:
### ("_constrain"
###   ("_Finset"
###     ("\<^const>Transitive_Closure.trancl"
###       ("\<^const>Groups.zero_class.zero")))
###   ("_tapp" ("_type_name" nat) ("_type_name" clause)))
### ("_constrain"
###   ("_Finset"
###     ("\<^const>CNF.literal.Pos" ("\<^const>Groups.zero_class.zero")))
###   ("_tapp" ("_type_name" nat) ("_type_name" clause)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Propositional_Proof_Systems.CNF"
### 0.673s elapsed time, 2.212s cpu time, 0.749s GC time
"{0\<^sup>+}"
  :: "nat literal set"
### theory "HOL-Library.Countable"
### 1.344s elapsed time, 4.846s cpu time, 0.941s GC time
Loading theory "Propositional_Proof_Systems.Formulas" (required by "Draft.STRIPS_SemanticsMoreTemplates" via "Draft.STRIPS_Semantics" via "Draft.STRIPS_Representation" via "Draft.State_Variable_Representation")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.012s elapsed time, 6.617s cpu time, 1.163s GC time
Loading theory "Draft.Templates" (required by "Draft.STRIPS_SemanticsMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.056s elapsed time, 0.134s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.STRIPS_SemanticsMoreTemplates")
consts
  subformulae :: "'a formula => 'a formula list"
### Ambiguous input (line 62 of "$AFP/Propositional_Proof_Systems/Formulas.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>BigAnd" ("_position" Nil))
###     ("_applC" ("\<^const>Formulas.formula.Not")
###       ("\<^const>Formulas.formula.Bot"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>BigAnd"
###     ("\<^const>HOL.eq" ("_position" Nil)
###       ("_applC" ("\<^const>Formulas.formula.Not")
###         ("\<^const>Formulas.formula.Bot")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 63 of "$AFP/Propositional_Proof_Systems/Formulas.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Formulas.formula.And"
###     ("\<^fixed>BigAnd"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs))
###         ("_position" F)))
###     ("\<^fixed>BigAnd" ("_position" Fs))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>BigAnd"
###       ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs)))
###     ("\<^const>Formulas.formula.And" ("_position" F)
###       ("\<^fixed>BigAnd" ("_position" Fs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>BigAnd"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs))
###       ("\<^const>Formulas.formula.And" ("_position" F)
###         ("\<^fixed>BigAnd" ("_position" Fs))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  BigAnd :: "'a formula list => 'a formula"
### Ambiguous input (line 69 of "$AFP/Propositional_Proof_Systems/Formulas.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>BigOr" ("_position" Nil))
###     ("\<^const>Formulas.formula.Bot")))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>BigOr"
###     ("\<^const>HOL.eq" ("_position" Nil)
###       ("\<^const>Formulas.formula.Bot"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 70 of "$AFP/Propositional_Proof_Systems/Formulas.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Formulas.formula.Or"
###     ("\<^fixed>BigOr"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs))
###         ("_position" F)))
###     ("\<^fixed>BigOr" ("_position" Fs))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>BigOr"
###       ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs)))
###     ("\<^const>Formulas.formula.Or" ("_position" F)
###       ("\<^fixed>BigOr" ("_position" Fs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>BigOr"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs))
###       ("\<^const>Formulas.formula.Or" ("_position" F)
###         ("\<^fixed>BigOr" ("_position" Fs))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  BigOr :: "'a formula list => 'a formula"
consts
  pn_atoms :: "'a formula => 'a set * 'a set"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.808s elapsed time, 1.979s cpu time, 0.824s GC time
Found termination order: "size <*mlex*> {}"
"(3, 2)"
  :: "nat * nat"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Propositional_Proof_Systems.Formulas"
### 1.824s elapsed time, 3.744s cpu time, 0.991s GC time
Loading theory "Propositional_Proof_Systems.Sema" (required by "Draft.STRIPS_SemanticsMoreTemplates" via "Draft.STRIPS_Semantics" via "Draft.STRIPS_Representation" via "Draft.State_Variable_Representation")
consts
  formula_semantics :: "('a => bool) => 'a formula => bool"
consts
  formula_semantics_alt :: "('a => bool) => 'a formula => bool"
consts
  formula_semantics_tt :: "('a => bool) => 'a formula => bool"
### Ambiguous input (line 72 of "$AFP/Propositional_Proof_Systems/Sema.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" A)
###     ("\<^const>Formulas.BigAnd"
###       ("\<^const>HOL.iff" ("_position" F)
###         ("_Ball" ("_position" f)
###           ("_applC" ("_position" set) ("_position" F))
###           ("\<^const>Sema.formula_semantics" ("_position" A)
###             ("_position" f)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Sema.formula_semantics" ("_position" A)
###       ("\<^const>Formulas.BigAnd" ("_position" F)))
###     ("_Ball" ("_position" f) ("_applC" ("_position" set) ("_position" F))
###       ("\<^const>Sema.formula_semantics" ("_position" A) ("_position" f)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 73 of "$AFP/Propositional_Proof_Systems/Sema.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" A)
###     ("\<^const>Formulas.BigOr"
###       ("\<^const>HOL.iff" ("_position" F)
###         ("_Bex" ("_position" f) ("_applC" ("_position" set) ("_position" F))
###           ("\<^const>Sema.formula_semantics" ("_position" A)
###             ("_position" f)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Sema.formula_semantics" ("_position" A)
###       ("\<^const>Formulas.BigOr" ("_position" F)))
###     ("_Bex" ("_position" f) ("_applC" ("_position" set) ("_position" F))
###       ("\<^const>Sema.formula_semantics" ("_position" A) ("_position" f)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Propositional_Proof_Systems.Sema"
### 0.095s elapsed time, 0.100s cpu time, 0.000s GC time
Loading theory "Draft.State_Variable_Representation" (required by "Draft.STRIPS_SemanticsMoreTemplates" via "Draft.STRIPS_Semantics" via "Draft.STRIPS_Representation")
### theory "Draft.State_Variable_Representation"
### 0.164s elapsed time, 0.165s cpu time, 0.000s GC time
Loading theory "Draft.STRIPS_Representation" (required by "Draft.STRIPS_SemanticsMoreTemplates" via "Draft.STRIPS_Semantics")
"stop"
  :: "'a"
### theory "Draft.STRIPS_Representation"
### 0.528s elapsed time, 0.595s cpu time, 0.083s GC time
Loading theory "Draft.STRIPS_Semantics" (required by "Draft.STRIPS_SemanticsMoreTemplates")
consts
  execute_serial_plan ::
    "('a => bool option) => 'a strips_operator list => 'a => bool option"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
*** Undefined fact: "f" (line 389 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")2880fComp_deffactATP.fComp_deff_arg_min_list_ffactList.f_arg_min_list_ff_inv_into_ffactHilbert_Choice.f_inv_into_ff_the_inv_into_ffactFun.f_the_inv_into_ff_the_inv_into_f_bij_betwfactFun.f_the_inv_into_f_bij_betwfact_0factFactorial.semiring_char_0_class.fact_0fact_1factFactorial.semiring_char_0_class.fact_1fact_2factFactorial.semiring_char_0_class.fact_2fact_SucfactFactorial.semiring_char_0_class.fact_Sucfact_Suc_0factFactorial.semiring_char_0_class.fact_Suc_0fact_binomialfactBinomial.fact_binomialfact_codefactFactorial.fact_codefact_dictfactFactorial.semiring_char_0_class.fact_dictfact_div_factfactFactorial.fact_div_factfact_div_fact_le_powfactFactorial.fact_div_fact_le_powfact_doublefactFactorial.fact_doublefact_dvdfactFactorial.fact_dvdfact_fact_dvd_factfactBinomial.fact_fact_dvd_factfact_ge_1factFactorial.fact_ge_1fact_ge_Suc_0_natfactFactorial.fact_ge_Suc_0_natfact_ge_selffactFactorial.fact_ge_selffact_ge_zerofactFactorial.fact_ge_zerofact_gt_zerofactFactorial.fact_gt_zerofact_in_IntsfactFactorial.fact_in_Intsfact_in_NatsfactFactorial.fact_in_Natsfact_le_powerfactFactorial.fact_le_powerfact_less_monofactFactorial.fact_less_monofact_less_mono_natfactFactorial.fact_less_mono_natfact_modfactFactorial.fact_modfact_monofactFactorial.fact_monofact_mono_natfactFactorial.fact_mono_natfact_nonzerofactFactorial.fact_nonzerofact_not_negfactFactorial.fact_not_negfact_num_eq_iffactFactorial.fact_num_eq_iffact_numeralfactFactorial.fact_numeralfact_prodfactFactorial.semiring_char_0_class.fact_prodfact_prod_SucfactFactorial.semiring_char_0_class.fact_prod_Sucfact_prod_revfactFactorial.semiring_char_0_class.fact_prod_revfact_reducefactFactorial.fact_reducefact_splitfactFactorial.semiring_char_0_class.fact_split
*** At command "thm" (line 389 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
Found termination order: "(%p. size_list length (snd p)) <*mlex*> {}"
consts
  are_all_operators_non_interfering ::
    "'variable strips_operator list => bool"
Found termination order: "(%p. size_list length (snd p)) <*mlex*> {}"
*** Undefined fact: "Cons.IH" (line 712 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
*** At command "thm" (line 712 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
*** Undefined fact: "Cons.prems" (line 1667 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
*** At command "thm" (line 1667 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
[| are_all_operators_applicable I ?ops;
   are_all_operator_effects_consistent ?ops;
   are_all_operators_non_interfering ?ops |]
==> execute_parallel_operator I ?ops = execute_serial_plan I ?ops
### theory "Draft.STRIPS_Semantics"
### 0.741s elapsed time, 0.934s cpu time, 0.065s GC time
Loading theory "Draft.STRIPS_SemanticsMoreTemplates"
val templateLemmas =
   [("STRIPS_Semantics.trace_parallel_plan_strips_not_nil",
     "trace_parallel_plan_strips ?I ?\<pi> ~= []",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("STRIPS_Semantics.length_trace_parallel_plan_gt_0",
     "0 < length (trace_parallel_plan_strips ?I ?\<pi>)",
     template_inequation
      (less_than, template_hole 2,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("STRIPS_Semantics.trace_parallel_plan_strips_head_is_initial_state",
     "trace_parallel_plan_strips ?I ?\<pi> ! 0 = ?I",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0),
       template_var 1)),
    ("STRIPS_Semantics.are_operators_interfering_symmetric",
     "are_operators_interfering ?op\<^sub>1 ?op\<^sub>2 ==>
      are_operators_interfering ?op\<^sub>2 ?op\<^sub>1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("STRIPS_Semantics.are_all_effects_consistent_tail",
     "are_all_operator_effects_consistent (?op # ?ops) ==>
      are_all_operator_effects_consistent ?ops",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("STRIPS_Semantics.are_all_operators_non_interfering_tail",
     "are_all_operators_non_interfering (?op # ?ops) ==>
      are_all_operators_non_interfering ?ops",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("STRIPS_Semantics.length_trace_parallel_plan_strips_lte_length_plan_plus_one",
     "length (trace_parallel_plan_strips ?I ?\<pi>) <= length ?\<pi> + 1",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("STRIPS_Semantics.are_all_operators_applicable_cons",
     "are_all_operators_applicable ?s (?op # ?ops) ==>
      is_operator_applicable_in ?s ?op",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 1)
           ))),
    ("STRIPS_Semantics.are_all_operators_applicable_cons",
     "are_all_operators_applicable ?s (?op # ?ops) ==>
      are_all_operators_applicable ?s ?ops",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("STRIPS_Semantics.trace_parallel_plan_strips_last_cons_then",
     "last (?s # trace_parallel_plan_strips ?s' ?\<pi>) =
      last (trace_parallel_plan_strips ?s' ?\<pi>)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("STRIPS_Semantics.length_trace_minus_one_lt_length_trace",
     "length (trace_parallel_plan_strips ?I ?\<pi>) - 1
      < length (trace_parallel_plan_strips ?I ?\<pi>)",
     template_inequation
      (less_than,
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_hole 0),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("STRIPS_Semantics.is_valid_problem_strips_initial_of_dom",
     "is_valid_problem_strips ?\<Pi> ==>
      dom (?\<Pi>\<^sub>I) = set (?\<Pi>\<^sub>\<V>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("STRIPS_Semantics.is_valid_problem_dom_of_goal_state_is",
     "is_valid_problem_strips ?\<Pi> ==>
      dom (?\<Pi>\<^sub>G) <= set (?\<Pi>\<^sub>\<V>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("STRIPS_Semantics.execute_parallel_plan_reaches_goal_iff_goal_is_last_element_of_trace",
     "(?G \<subseteq>\<^sub>m execute_parallel_plan ?I ?\<pi>) =
      (?G \<subseteq>\<^sub>m last (trace_parallel_plan_strips ?I ?\<pi>))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("STRIPS_Semantics.execute_parallel_operator_cons",
     "execute_parallel_operator ?s (?op # ?ops) =
      execute_parallel_operator (?s ++ map_of (effect_to_assignments ?op))
       ?ops",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)))),
         template_var 0))),
    ("STRIPS_Semantics.embedding_lemma",
     "[| is_valid_problem_strips ?\<Pi>;
         is_serial_solution_for_problem ?\<Pi> ?\<pi> |]
      ==> is_parallel_solution_for_problem ?\<Pi>
           (List_Supplement.embed ?\<pi>)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("STRIPS_Semantics.trace_parallel_plan_strips_length_gt_one_if",
     "?k < length (trace_parallel_plan_strips ?I ?\<pi>) - 1 ==>
      1 < length (trace_parallel_plan_strips ?I ?\<pi>)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app
             (template_hole 3,
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0))),
            template_hole 0))],
       template_inequation
        (less_than, template_hole 0,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("STRIPS_Semantics.map_of_constant_assignments_dom",
     "?m = map_of (map (%v. (v, ?d)) ?vs) ==> dom ?m = set ?vs",
     template_implication
      ([template_equation
         (template_var 2,
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, t_empty), template_var 0)))],
       template_equation
        (template_app (template_hole 1, template_var 2),
         template_app (template_hole 0, template_var 0)))),
    ("STRIPS_Semantics.are_all_operators_applicable_set",
     "are_all_operators_applicable ?s ?ops =
      (ALL op:set ?ops. ALL v:set (precondition_of op). ?s v = Some True)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 0)),
         t_empty))),
    ("STRIPS_Semantics.effect_to_assignments_simp",
     "effect_to_assignments ?op =
      map (%v. (v, True)) (add_effects_of ?op) @
      map (%v. (v, False)) (delete_effects_of ?op)",
     template_equation
      (template_app (template_hole 7, template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, t_empty),
             template_app (template_hole 2, template_var 0))),
         template_app
          (template_app (template_hole 5, t_empty),
           template_app (template_hole 0, template_var 0))))),
    ("STRIPS_Semantics.execute_parallel_operator_cons_equals_corollary",
     "are_all_operators_applicable ?s (?a # ?ops) ==>
      execute_parallel_operator ?s (?a # ?ops) =
      execute_parallel_operator (?s \<then> ?a) ?ops",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("STRIPS_Semantics.is_valid_problem_strips_operator_variable_sets",
     "[| is_valid_problem_strips ?\<Pi>; ?op : set (?\<Pi>\<^sub>\<O>) |]
      ==> set (add_effects_of ?op) <= set (?\<Pi>\<^sub>\<V>)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 2,
           template_app (template_hole 0, template_var 1))))),
    ("STRIPS_Semantics.is_valid_problem_strips_operator_variable_sets",
     "[| is_valid_problem_strips ?\<Pi>; ?op : set (?\<Pi>\<^sub>\<O>) |]
      ==> set (delete_effects_of ?op) <= set (?\<Pi>\<^sub>\<V>)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 2,
           template_app (template_hole 0, template_var 1))))),
    ("STRIPS_Semantics.is_valid_problem_strips_operator_variable_sets",
     "[| is_valid_problem_strips ?\<Pi>; ?op : set (?\<Pi>\<^sub>\<O>) |]
      ==> set (precondition_of ?op) <= set (?\<Pi>\<^sub>\<V>)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 2,
           template_app (template_hole 0, template_var 1))))),
    ("STRIPS_Semantics.is_valid_problem_strips_operator_variable_sets",
     "[| is_valid_problem_strips ?\<Pi>; ?op : set (?\<Pi>\<^sub>\<O>) |]
      ==> disjnt (set (add_effects_of ?op)) (set (delete_effects_of ?op))",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0))),
             template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("STRIPS_Semantics.execute_serial_plan_split_i",
     "[| are_all_operators_applicable ?s (?op # ?\<pi>);
         are_all_operators_non_interfering (?op # ?\<pi>) |]
      ==> are_all_operators_applicable (?s \<then> ?op) ?\<pi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("STRIPS_Semantics.set_to_precondition_of_op_is",
     "set (to_precondition ?op) =
      {(v, True) |v. v : set (precondition_of ?op)}",
     template_equation
      (template_app
        (template_hole 10, template_app (template_hole 9, template_var 0)),
       template_app (template_hole 8, t_empty))),
    ("STRIPS_Semantics.trace_parallel_plan_plan_prefix",
     "?k < length (trace_parallel_plan_strips ?I ?\<pi>) ==>
      trace_parallel_plan_strips ?I ?\<pi> ! ?k =
      execute_parallel_plan ?I (take ?k ?\<pi>)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("STRIPS_Semantics.embedding_lemma_i",
     "[| is_operator_applicable_in ?I ?op;
         are_operator_effects_consistent ?op ?op |]
      ==> ?I \<then> ?op = execute_parallel_operator ?I [?op]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("STRIPS_Semantics.effect__strips_iii_a",
     "[| ?s' = ?s \<then> ?op; ?v : set (add_effects_of ?op) |]
      ==> ?s' ?v = Some True",
     template_implication
      ([template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 6, template_var 2),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)))
            )],
       template_equation
        (template_app (template_var 3, template_var 0),
         template_app (template_hole 1, template_hole 0)))),
    ("STRIPS_Semantics.execute_serial_plan_split",
     "[| are_all_operators_applicable ?s ?\<pi>\<^sub>1;
         are_all_operators_non_interfering ?\<pi>\<^sub>1 |]
      ==> execute_serial_plan ?s (?\<pi>\<^sub>1 @ ?\<pi>\<^sub>2) =
          execute_serial_plan (execute_serial_plan ?s ?\<pi>\<^sub>1)
           ?\<pi>\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("STRIPS_Semantics.execute_parallel_operator_equals_execute_sequential_strips_if",
     "[| are_all_operators_applicable ?s ?ops;
         are_all_operator_effects_consistent ?ops;
         are_all_operators_non_interfering ?ops |]
      ==> execute_parallel_operator ?s ?ops = execute_serial_plan ?s ?ops",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 4, template_var 0)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("STRIPS_Semantics.execute_parallel_plan_precondition_cons",
     "[| are_all_operators_applicable ?s (?a # ?ops);
         are_all_operator_effects_consistent (?a # ?ops);
         are_all_operators_non_interfering (?a # ?ops) |]
      ==> are_all_operator_effects_consistent ?ops",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 0,
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("STRIPS_Semantics.execute_parallel_plan_precondition_cons",
     "[| are_all_operators_applicable ?s (?a # ?ops);
         are_all_operator_effects_consistent (?a # ?ops);
         are_all_operators_non_interfering (?a # ?ops) |]
      ==> are_all_operators_non_interfering ?ops",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 0,
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("STRIPS_Semantics.map_of_effect_to_assignments_is_none_if",
     "[| ?v ~: set (add_effects_of ?op);
         ?v ~: set (delete_effects_of ?op) |]
      ==> map_of (effect_to_assignments ?op) ?v = None",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_var 0)))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_app
                   (template_hole 6,
                    template_app (template_hole 4, template_var 0)))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_var 1),
         template_hole 0))),
    ("STRIPS_Semantics.execute_serial_plan_is_execute_parallel_plan_ii",
     "[| ALL op:set ?\<pi>. are_operator_effects_consistent op op;
         ?G \<subseteq>\<^sub>m execute_serial_plan ?I ?\<pi> |]
      ==> ?G \<subseteq>\<^sub>m
          execute_parallel_plan ?I (List_Supplement.embed ?\<pi>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 2)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 2)))
           ))),
    ("STRIPS_Semantics.is_parallel_solution_for_problem_operator_set",
     "[| is_parallel_solution_for_problem ?\<Pi> ?\<pi>; ?ops : set ?\<pi>;
         ?op : set ?ops |]
      ==> ?op : set (?\<Pi>\<^sub>\<O>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 3)))
           ))),
    ("STRIPS_Semantics.effect_to_assignments_i",
     "?as = effect_to_assignments ?op ==>
      ?as =
      map (%v. (v, True)) (add_effects_of ?op) @
      map (%v. (v, False)) (delete_effects_of ?op)",
     template_implication
      ([template_equation
         (template_var 1, template_app (template_hole 7, template_var 0))],
       template_equation
        (template_var 1,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, t_empty),
               template_app (template_hole 2, template_var 0))),
           template_app
            (template_app (template_hole 5, t_empty),
             template_app (template_hole 0, template_var 0)))))),
    ("STRIPS_Semantics.execute_parallel_plan_precondition_cons_i",
     "[| ~ are_operators_interfering ?op ?op';
         is_operator_applicable_in ?s ?op;
         is_operator_applicable_in ?s ?op' |]
      ==> is_operator_applicable_in
           (?s ++ map_of (effect_to_assignments ?op)) ?op'",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2)))),
             template_var 1)
           ))),
    ("STRIPS_Semantics.trace_parallel_plan_strips_operator_preconditions",
     "?k < length (trace_parallel_plan_strips ?I ?\<pi>) - 1 ==>
      are_all_operators_applicable
       (trace_parallel_plan_strips ?I ?\<pi> ! ?k) (?\<pi> ! ?k) &
      are_all_operator_effects_consistent (?\<pi> ! ?k)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_var 0))),
            template_hole 5))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 6, template_var 1),
                         template_var 0)),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 2))),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)))
           ))),
    ("STRIPS_Semantics.embedding_lemma_iii",
     "ALL op:set ?\<pi>. op : set (?\<Pi>\<^sub>\<O>) ==>
      ALL ops:set (List_Supplement.embed ?\<pi>).
         ALL op:set ops. op : set (?\<Pi>\<^sub>\<O>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))),
             t_empty)
           ))),
    ("STRIPS_Semantics.flattening_lemma_i",
     "ALL ops:set ?\<pi>. ALL op:set ops. op : set (?\<Pi>\<^sub>\<O>) ==>
      ALL op:set (concat ?\<pi>). op : set (?\<Pi>\<^sub>\<O>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 0, template_var 1))),
             t_empty)
           ))),
    ("STRIPS_Semantics.plan_is_at_least_singleton_plan_if_trace_has_at_least_two_elements",
     "[| ?k < length (trace_parallel_plan_strips ?I ?\<pi>) - 1;
         !!ops \<pi>'. ?\<pi> = ops # \<pi>' ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1))),
            template_hole 4)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("STRIPS_Semantics.trace_parallel_plan_step_effect_is",
     "?k < length (trace_parallel_plan_strips ?I ?\<pi>) - 1 ==>
      trace_parallel_plan_strips ?I ?\<pi> ! Suc ?k =
      execute_parallel_operator (trace_parallel_plan_strips ?I ?\<pi> ! ?k)
       (?\<pi> ! ?k)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_var 0))),
            template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 6, template_var 1),
               template_var 0)),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_var 0)),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("STRIPS_Semantics.execute_parallel_operator_no_effect_if",
     "ALL op:set ?ops.
         ?v ~: set (add_effects_of op) &
         ?v ~: set (delete_effects_of op) ==>
      execute_parallel_operator ?s ?ops ?v = ?s ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 2)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2),
           template_var 1),
         template_app (template_var 0, template_var 1)))),
    ("STRIPS_Semantics.effect__strips_iii_b",
     "[| ?s' = ?s \<then> ?op;
         ?v : set (delete_effects_of ?op) &
         ?v ~: set (add_effects_of ?op) |]
      ==> ?s' ?v = Some False",
     template_implication
      ([template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 9, template_var 2),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 0),
                  template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_var 1)))),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 7, template_var 0),
                  template_app
                   (template_hole 6,
                    template_app (template_hole 3, template_var 1)))))
            )],
       template_equation
        (template_app (template_var 3, template_var 0),
         template_app (template_hole 1, template_hole 0)))),
    ("STRIPS_Semantics.operator_effect__strips",
     "[| ?s' = ?s \<then> ?op;
         ?v ~: set (add_effects_of ?op) &
         ?v : set (delete_effects_of ?op) |]
      ==> ?s' ?v = Some False",
     template_implication
      ([template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 9, template_var 2),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 0),
                    template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 1))))),
              template_app
               (template_app (template_hole 6, template_var 0),
                template_app
                 (template_hole 5,
                  template_app (template_hole 3, template_var 1))))
            )],
       template_equation
        (template_app (template_var 3, template_var 0),
         template_app (template_hole 1, template_hole 0)))),
    ("STRIPS_Semantics.flattening_lemma",
     "[| is_valid_problem_strips ?\<Pi>;
         ALL ops:set ?\<pi>. EX op. ops = [op];
         is_parallel_solution_for_problem ?\<Pi> ?\<pi> |]
      ==> is_serial_solution_for_problem ?\<Pi> (concat ?\<pi>)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 0)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("STRIPS_Semantics.are_all_operators_non_interfering_set_contains_no_distinct_interfering_operator_pairs",
     "[| are_all_operators_non_interfering ?ops;
         are_operators_interfering ?op\<^sub>1 ?op\<^sub>2;
         ?op\<^sub>1 ~= ?op\<^sub>2 |]
      ==> ?op\<^sub>1 ~: set ?ops | ?op\<^sub>2 ~: set ?ops",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_app (template_hole 0, template_var 2)))),
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_var 2))))
           ))),
    ("STRIPS_Semantics.execute_parallel_plan_precondition_cons",
     "[| are_all_operators_applicable ?s (?a # ?ops);
         are_all_operator_effects_consistent (?a # ?ops);
         are_all_operators_non_interfering (?a # ?ops) |]
      ==> are_all_operators_applicable
           (?s ++ map_of (effect_to_assignments ?a)) ?ops",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1)))),
             template_var 0)
           ))),
    ("STRIPS_Semantics.execute_parallel_operator_effect",
     "[| are_all_operators_applicable ?s ?ops;
         are_all_operator_effects_consistent ?ops |]
      ==> ?op : set ?ops & ?v : set (add_effects_of ?op) -->
          execute_parallel_operator ?s ?ops ?v = Some True",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 3),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 11, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 8, template_var 1),
                     template_app (template_hole 7, template_var 2))),
                 template_app
                  (template_app (template_hole 6, template_var 0),
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 1))))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 2),
                   template_var 0)),
               template_app (template_hole 1, template_hole 0)))
           ))),
    ("STRIPS_Semantics.execute_parallel_operator_effect",
     "[| are_all_operators_applicable ?s ?ops;
         are_all_operator_effects_consistent ?ops |]
      ==> ?op : set ?ops & ?v : set (delete_effects_of ?op) -->
          execute_parallel_operator ?s ?ops ?v = Some False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 3),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 11, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 8, template_var 1),
                     template_app (template_hole 7, template_var 2))),
                 template_app
                  (template_app (template_hole 6, template_var 0),
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 1))))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 2),
                   template_var 0)),
               template_app (template_hole 1, template_hole 0)))
           ))),
    ("STRIPS_Semantics.effect__strips_iii_c",
     "[| ?s' = ?s \<then> ?op;
         ?v ~: set (add_effects_of ?op) &
         ?v ~: set (delete_effects_of ?op) |]
      ==> ?s' ?v = ?s ?v",
     template_implication
      ([template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 7, template_var 2),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 0),
                    template_app
                     (template_hole 3,
                      template_app (template_hole 2, template_var 1))))),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 0),
                  template_app
                   (template_hole 3,
                    template_app (template_hole 1, template_var 1)))))
            )],
       template_equation
        (template_app (template_var 3, template_var 0),
         template_app (template_var 2, template_var 0)))),
    ("STRIPS_Semantics.execute_parallel_operator_positive_effect_if_i",
     "[| are_all_operators_applicable ?s ?ops;
         are_all_operator_effects_consistent ?ops; ?op : set ?ops;
         ?v : set (add_effects_of ?op) |]
      ==> map_of (effect_to_assignments ?op) ?v = Some True",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 3),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app (template_hole 8, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_var 0),
         template_app (template_hole 1, template_hole 0)))),
    ("STRIPS_Semantics.execute_parallel_operator_positive_effect_if",
     "[| are_all_operators_applicable ?s ?ops;
         are_all_operator_effects_consistent ?ops; ?op : set ?ops;
         ?v : set (add_effects_of ?op) |]
      ==> execute_parallel_operator ?s ?ops ?v = Some True",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 9, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app (template_hole 7, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_var 0),
         template_app (template_hole 1, template_hole 0)))),
    ("STRIPS_Semantics.execute_parallel_operator_negative_effect_if_i",
     "[| are_all_operators_applicable ?s ?ops;
         are_all_operator_effects_consistent ?ops; ?op : set ?ops;
         ?v : set (delete_effects_of ?op) |]
      ==> map_of (effect_to_assignments ?op) ?v = Some False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 3),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app (template_hole 8, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_var 0),
         template_app (template_hole 1, template_hole 0)))),
    ("STRIPS_Semantics.execute_parallel_operator_negative_effect_if",
     "[| are_all_operators_applicable ?s ?ops;
         are_all_operator_effects_consistent ?ops; ?op : set ?ops;
         ?v : set (delete_effects_of ?op) |]
      ==> execute_parallel_operator ?s ?ops ?v = Some False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 9, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app (template_hole 7, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_var 0),
         template_app (template_hole 1, template_hole 0)))),
    ("STRIPS_Semantics.are_all_operator_effects_consistent_set",
     "are_all_operator_effects_consistent ?ops =
      (ALL op\<^sub>1:set ?ops.
          ALL op\<^sub>2:set ?ops.
             set (add_effects_of op\<^sub>1) Int
             set (delete_effects_of op\<^sub>2) =
             {} &
             set (delete_effects_of op\<^sub>1) Int
             set (add_effects_of op\<^sub>2) =
             {})",
     template_equation
      (template_app (template_hole 9, template_var 0),
       template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 0)),
         t_empty))),
    ("STRIPS_Semantics.execute_parallel_operators_strips_none_if_contraposition",
     "execute_parallel_operator ?s ?ops ?v ~= None ==>
      (EX op:set ?ops.
          ?v : set (add_effects_of op) | ?v : set (delete_effects_of op)) |
      ?s ?v ~= None",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 2),
                  template_var 1),
                template_var 0),
              template_hole 7)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 1)),
                 t_empty)),
             template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app (template_var 2, template_var 0)),
                 template_hole 7)))
           ))),
    ("STRIPS_Semantics.effect_to_assignments_construction_from_function_graph",
     "set (add_effects_of ?op) Int set (delete_effects_of ?op) = {} ==>
      effect_to_assignments ?op =
      map (%v. (v, if ListMem v (add_effects_of ?op) then True else False))
       (add_effects_of ?op @ delete_effects_of ?op)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 13,
              template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 0))),
            template_app
             (template_hole 12,
              template_app (template_hole 10, template_var 0))),
          template_hole 9)],
       template_equation
        (template_app (template_hole 7, template_var 0),
         template_app
          (template_app (template_hole 6, t_empty),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 11, template_var 0)),
             template_app (template_hole 10, template_var 0)))))),
    ("STRIPS_Semantics.effect_to_assignments_construction_from_function_graph",
     "set (add_effects_of ?op) Int set (delete_effects_of ?op) = {} ==>
      effect_to_assignments ?op =
      map (%v. (v, if ListMem v (delete_effects_of ?op) then False
                   else True))
       (add_effects_of ?op @ delete_effects_of ?op)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 13,
              template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 0))),
            template_app
             (template_hole 12,
              template_app (template_hole 10, template_var 0))),
          template_hole 9)],
       template_equation
        (template_app (template_hole 7, template_var 0),
         template_app
          (template_app (template_hole 6, t_empty),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 11, template_var 0)),
             template_app (template_hole 10, template_var 0)))))),
    ("STRIPS_Semantics.flattening_lemma_ii",
     "[| ALL ops:set ?\<pi>.
            EX op. ops = [op] & is_valid_operator_strips ?\<Pi> op;
         ?G \<subseteq>\<^sub>m execute_parallel_plan ?I ?\<pi> |]
      ==> ?G \<subseteq>\<^sub>m execute_serial_plan ?I (concat ?\<pi>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 3)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 3)))
           ))),
    ("STRIPS_Semantics.execute_parallel_operators_strips_none_if",
     "[| ALL op:set ?ops.
            ?v ~: set (add_effects_of op) &
            ?v ~: set (delete_effects_of op);
         ?s ?v = None |]
      ==> execute_parallel_operator ?s ?ops ?v = None",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 2)),
              t_empty)
            ),
        template_equation
         (template_app (template_var 0, template_var 1), template_hole 1)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2),
           template_var 1),
         template_hole 1))),
    ("STRIPS_Semantics.execute_parallel_operator_cons_equals",
     "[| are_all_operators_applicable ?s (?a # ?ops);
         are_all_operator_effects_consistent (?a # ?ops);
         are_all_operators_non_interfering (?a # ?ops) |]
      ==> execute_parallel_operator ?s (?a # ?ops) =
          execute_parallel_operator
           (?s ++ map_of (effect_to_assignments ?a)) ?ops",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 7, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1)))),
           template_var 0)))),
    ("STRIPS_Semantics.effect_to_assignments_iii_a",
     "[| ?v : set (add_effects_of ?op); ?as = effect_to_assignments ?op;
         !!a. [| a : set ?as; a = (?v, True) |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 2)))
            ),
        template_equation
         (template_var 1, template_app (template_hole 6, template_var 2)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("STRIPS_Semantics.effect_to_assignments_iii_b",
     "[| ?v : set (delete_effects_of ?op); ?as = effect_to_assignments ?op;
         !!a. [| a : set ?as; a = (?v, False) |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 2)))
            ),
        template_equation
         (template_var 1, template_app (template_hole 6, template_var 2)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("STRIPS_Semantics.execute_parallel_operator_effect",
     "[| are_all_operators_applicable ?s ?ops;
         are_all_operator_effects_consistent ?ops |]
      ==> (ALL op:set ?ops.
              ?v ~: set (add_effects_of op) &
              ?v ~: set (delete_effects_of op)) -->
          execute_parallel_operator ?s ?ops ?v = ?s ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 11, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app (template_hole 8, template_var 1)),
                 t_empty)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 1),
                   template_var 0)),
               template_app (template_var 2, template_var 0)))
           ))),
    ("STRIPS_Semantics.trace_parallel_plan_strips_none_if",
     "[| is_valid_problem_strips ?\<Pi>;
         is_parallel_solution_for_problem ?\<Pi> ?\<pi>;
         ?k < length (trace_parallel_plan_strips (?\<Pi>\<^sub>I) ?\<pi>) |]
      ==> ((trace_parallel_plan_strips (?\<Pi>\<^sub>I) ?\<pi> ! ?k) ?v =
           None) =
          (?v ~: set (?\<Pi>\<^sub>\<V>))",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_hole 10,
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 3)),
              template_var 2)))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app (template_hole 8, template_var 3)),
                     template_var 2)),
                 template_var 1),
               template_var 0)),
           template_hole 4),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 3))))))),
    ("STRIPS_Semantics.are_operator_effects_consistent_set",
     "[| ?op\<^sub>1 : set ?ops; ?op\<^sub>2 : set ?ops |]
      ==> are_operator_effects_consistent ?op\<^sub>1 ?op\<^sub>2 =
          (set (add_effects_of ?op\<^sub>1) Int
           set (delete_effects_of ?op\<^sub>2) =
           {} &
           set (delete_effects_of ?op\<^sub>1) Int
           set (add_effects_of ?op\<^sub>2) =
           {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app (template_hole 9, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_app (template_hole 9, template_var 1))
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 7, template_var 2),
                template_var 0)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_hole 3,
                           template_app (template_hole 2, template_var 2))),
                       template_app
                        (template_hole 3,
                         template_app (template_hole 1, template_var 0)))),
                   template_hole 0)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_hole 3,
                         template_app (template_hole 1, template_var 2))),
                     template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0)))),
                 template_hole 0))
             )))),
    ("STRIPS_Semantics.length_trace_parallel_plan_strips_lt_length_plan_plus_one_then",
     "length (trace_parallel_plan_strips ?I ?\<pi>) < length ?\<pi> + 1 ==>
      ~ are_all_operators_applicable
         (execute_parallel_plan ?I
           (take (length (trace_parallel_plan_strips ?I ?\<pi>) - 1)
             ?\<pi>))
         (?\<pi> ! (length (trace_parallel_plan_strips ?I ?\<pi>) - 1)) |
      ~ are_all_operator_effects_consistent
         (?\<pi> ! (length (trace_parallel_plan_strips ?I ?\<pi>) - 1))",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 12,
            template_app
             (template_app (template_hole 11, template_var 1),
              template_var 0)),
          template_app
           (template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 0)),
            template_hole 8))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 1),
                       template_app
                        (template_app
                          (template_hole 3,
                           template_app
                            (template_app
                              (template_hole 2,
                               template_app
                                (template_hole 12,
                                 template_app
                                  (template_app
                                    (template_hole 11, template_var 1),
                                   template_var 0))),
                             template_hole 8)),
                         template_var 0))),
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_hole 12,
                           template_app
                            (template_app
                              (template_hole 11, template_var 1),
                             template_var 0))),
                       template_hole 8))))),
             template_app
              (template_hole 6,
               template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_hole 12,
                         template_app
                          (template_app (template_hole 11, template_var 1),
                           template_var 0))),
                     template_hole 8)))))
           ))),
    ("STRIPS_Semantics.effect_to_assignments_ii",
     "[| ?as = effect_to_assignments ?op;
         !!as\<^sub>1 as\<^sub>2.
            [| ?as = as\<^sub>1 @ as\<^sub>2;
               as\<^sub>1 = map (%v. (v, True)) (add_effects_of ?op);
               as\<^sub>2 = map (%v. (v, False)) (delete_effects_of ?op) |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_var 2, template_app (template_hole 8, template_var 1)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("STRIPS_Semantics.effect__strips_i",
     "[| ?e = effect__strips ?op;
         !!es\<^sub>1 es\<^sub>2.
            [| ?e = es\<^sub>1 @ es\<^sub>2;
               es\<^sub>1 = map (%v. (v, True)) (add_effects_of ?op);
               es\<^sub>2 = map (%v. (v, False)) (delete_effects_of ?op) |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_var 2, template_app (template_hole 8, template_var 1)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("STRIPS_Semantics.effect__strips_ii",
     "[| ?e = ?ConjunctiveEffect (?es\<^sub>1 @ ?es\<^sub>2);
         ?es\<^sub>1 = map (%v. (v, True)) (add_effects_of ?op);
         ?es\<^sub>2 = map (%v. (v, False)) (delete_effects_of ?op) |]
      ==> ALL v:set (add_effects_of ?op).
             EX e':set ?es\<^sub>1. e' = (v, True)",
     template_implication
      ([template_equation
         (template_var 4,
          template_app
           (template_var 3,
            template_app
             (template_app (template_hole 12, template_var 2),
              template_var 1))),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 10, t_empty),
            template_app (template_hole 7, template_var 0))),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 10, t_empty),
            template_app (template_hole 5, template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 7, template_var 0))),
             t_empty)
           ))),
    ("STRIPS_Semantics.effect__strips_ii",
     "[| ?e = ?ConjunctiveEffect (?es\<^sub>1 @ ?es\<^sub>2);
         ?es\<^sub>1 = map (%v. (v, True)) (add_effects_of ?op);
         ?es\<^sub>2 = map (%v. (v, False)) (delete_effects_of ?op) |]
      ==> ALL v:set (delete_effects_of ?op).
             EX e':set ?es\<^sub>2. e' = (v, False)",
     template_implication
      ([template_equation
         (template_var 4,
          template_app
           (template_var 3,
            template_app
             (template_app (template_hole 12, template_var 2),
              template_var 1))),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 10, t_empty),
            template_app (template_hole 7, template_var 0))),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 10, t_empty),
            template_app (template_hole 5, template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 5, template_var 0))),
             t_empty)
           ))),
    ("STRIPS_Semantics.execute_parallel_plan_is_execute_sequential_plan_if",
     "[| ?is_valid_problem ?\<Pi>;
         ?G \<subseteq>\<^sub>m last (trace_parallel_plan_strips ?I ?\<pi>);
         ALL k<length ?\<pi>.
            are_all_operators_applicable
             (trace_parallel_plan_strips ?I ?\<pi> ! k) (?\<pi> ! k) &
            are_all_operator_effects_consistent (?\<pi> ! k) &
            are_all_operators_non_interfering (?\<pi> ! k) |]
      ==> ?G \<subseteq>\<^sub>m execute_serial_plan ?I (concat ?\<pi>)",
     template_implication
      ([template_predicate (template_app (template_var 4, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 2),
              template_app
               (template_hole 13,
                template_app
                 (template_app (template_hole 12, template_var 1),
                  template_var 0)))
            ),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 14, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("STRIPS_Semantics.effect_to_assignments_set_is",
     "set (effect_to_assignments ?op) =
      {((v, a), True) |v a. (v, a) : set (add_effects_of ?op)} Un
      {((v, a), False) |v a. (v, a) : set (delete_effects_of ?op)}",
     template_equation
      (template_app
        (template_hole 15, template_app (template_hole 14, template_var 0)),
       template_app
        (template_app
          (template_hole 13, template_app (template_hole 12, t_empty)),
         template_app (template_hole 12, t_empty))))]:
   (string * thm * template) list
### theory "Draft.STRIPS_SemanticsMoreTemplates"
### 0.375s elapsed time, 0.547s cpu time, 0.108s GC time
*** Undefined fact: "Cons.prems" (line 1667 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
*** At command "thm" (line 1667 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
*** Undefined fact: "Cons.IH" (line 712 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
*** At command "thm" (line 712 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
*** Undefined fact: "f" (line 389 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")2880fComp_deffactATP.fComp_deff_arg_min_list_ffactList.f_arg_min_list_ff_inv_into_ffactHilbert_Choice.f_inv_into_ff_the_inv_into_ffactFun.f_the_inv_into_ff_the_inv_into_f_bij_betwfactFun.f_the_inv_into_f_bij_betwfact_0factFactorial.semiring_char_0_class.fact_0fact_1factFactorial.semiring_char_0_class.fact_1fact_2factFactorial.semiring_char_0_class.fact_2fact_SucfactFactorial.semiring_char_0_class.fact_Sucfact_Suc_0factFactorial.semiring_char_0_class.fact_Suc_0fact_binomialfactBinomial.fact_binomialfact_codefactFactorial.fact_codefact_dictfactFactorial.semiring_char_0_class.fact_dictfact_div_factfactFactorial.fact_div_factfact_div_fact_le_powfactFactorial.fact_div_fact_le_powfact_doublefactFactorial.fact_doublefact_dvdfactFactorial.fact_dvdfact_fact_dvd_factfactBinomial.fact_fact_dvd_factfact_ge_1factFactorial.fact_ge_1fact_ge_Suc_0_natfactFactorial.fact_ge_Suc_0_natfact_ge_selffactFactorial.fact_ge_selffact_ge_zerofactFactorial.fact_ge_zerofact_gt_zerofactFactorial.fact_gt_zerofact_in_IntsfactFactorial.fact_in_Intsfact_in_NatsfactFactorial.fact_in_Natsfact_le_powerfactFactorial.fact_le_powerfact_less_monofactFactorial.fact_less_monofact_less_mono_natfactFactorial.fact_less_mono_natfact_modfactFactorial.fact_modfact_monofactFactorial.fact_monofact_mono_natfactFactorial.fact_mono_natfact_nonzerofactFactorial.fact_nonzerofact_not_negfactFactorial.fact_not_negfact_num_eq_iffactFactorial.fact_num_eq_iffact_numeralfactFactorial.fact_numeralfact_prodfactFactorial.semiring_char_0_class.fact_prodfact_prod_SucfactFactorial.semiring_char_0_class.fact_prod_Sucfact_prod_revfactFactorial.semiring_char_0_class.fact_prod_revfact_reducefactFactorial.fact_reducefact_splitfactFactorial.semiring_char_0_class.fact_split
*** At command "thm" (line 389 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
Exception- TOPLEVEL_ERROR raised
