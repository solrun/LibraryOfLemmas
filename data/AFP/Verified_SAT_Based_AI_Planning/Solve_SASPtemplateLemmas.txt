   [("Solve_SASP.Tree2_list_to_rbt", "Tree2.bst (list_to_rbt ?xs)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Solve_SASP.map_of_eq", "AList_Upd_Del.map_of ?xs = Map.map_of ?xs",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Solve_SASP.atoms_formula_vars", "atoms ?f = set (formula_vars ?f)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Solve_SASP.set_tree_intorder",
     "Tree2.set_tree ?t = set (Tree2.inorder ?t)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Solve_SASP.set_list_to_rbt",
     "Tree2.set_tree (list_to_rbt ?xs) = set ?xs",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Solve_SASP.inv_list_to_rbt",
     "invc (list_to_rbt ?xs) & invh (list_to_rbt ?xs)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0))),
           template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 0)))
         )),
    ("Solve_SASP.distinct_if_sorted",
     "Sorted_Less.sorted ?xs ==> distinct ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Solve_SASP.foldr_And",
     "foldr (\<^bold>\<and>) ?as (\<^bold>\<not> \<bottom>) =
      \<^bold>\<And>?as",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_hole 3), template_var 0),
         template_app (template_hole 2, template_hole 1)),
       template_app (template_hole 0, template_var 0))),
    ("Solve_SASP.find_max_append",
     "find_max (?xs @ ?ys) = max (find_max ?xs) (find_max ?ys)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Solve_SASP.find_max_works", "?x : set ?xs ==> ?x <= find_max ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_inequation
        (less_equals, template_var 1,
         template_app (template_hole 0, template_var 0)))),
    ("Solve_SASP.changing_atoms_works'",
     "?M o ?g \<Turnstile> ?phi = ?M \<Turnstile> map_formula ?g ?phi",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Solve_SASP.cnf_to_dimacs_disj",
     "is_disj ?f ==> cnf_to_dimacs ?f = [disj_to_dimacs ?f]",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)))),
    ("Solve_SASP.isdisj_disjD",
     "is_disj (?f1.0 \<^bold>\<or> ?f2.0) ==>
      is_disj ?f1.0 & is_disj ?f2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 1)),
             template_app (template_hole 2, template_var 0))
           ))),
    ("Solve_SASP.max_var",
     "?v : atoms ?f ==> ?v <= find_max (formula_vars ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_inequation
        (less_equals, template_var 1,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Solve_SASP.match_pres_submap",
     "Solve_SASP.match_pres
       (Tree2.inorder (M.tree_map_of' RBT_Set.empty ?pres)) ?s =
      (Map.map_of ?pres \<subseteq>\<^sub>m ?s)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app (template_hole 4, template_hole 3),
                 template_hole 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Solve_SASP.decode_sound",
     "decode ?M ?h ?prob = Inl ?plan ==>
      ast_problem.valid_plan ?prob ?plan",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Solve_SASP.atoms_And_append",
     "atoms \<^bold>\<And>?as1.0 @ ?as2.0 =
      atoms \<^bold>\<And>?as1.0 Un atoms \<^bold>\<And>?as2.0",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1))),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))))),
    ("Solve_SASP.cnf_And",
     "set (cnf_to_dimacs (?f1.0 \<^bold>\<and> ?f2.0)) =
      set (cnf_to_dimacs ?f1.0) Un set (cnf_to_dimacs ?f2.0)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1))),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))))),
    ("Solve_SASP.model_to_dimacs_model_append'",
     "model_to_dimacs_model ?M (?vs @ ?vs') =
      model_to_dimacs_model ?M ?vs @ model_to_dimacs_model ?M ?vs'",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Solve_SASP.model_to_dimacs_model_distinct",
     "1 < ?n_vars ==>
      distinct
       (map dimacs_lit_to_var (model_to_dimacs_model ?M [1..<?n_vars]))",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 1)],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app
                  (template_app (template_hole 0, template_hole 5),
                   template_var 1))))
           ))),
    ("Solve_SASP.match_pres_distinct",
     "distinct (map fst ?pres) ==>
      Solve_SASP.match_pres ?pres ?s =
      (Map.map_of ?pres \<subseteq>\<^sub>m ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Solve_SASP.map_of_lookup",
     "sorted1 (Tree2.inorder ?T) ==>
      Map.map_of (Tree2.inorder ?T) = lookup ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_app (template_hole 3, template_var 0)))
            )],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 3, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Solve_SASP.gtD", "?l < ?n ==> EX m. ?n = Suc m & ?l <= m",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Solve_SASP.model_to_dimacs_neg_nin",
     "?n_vars <= ?x ==>
      int ?x ~: set (model_to_dimacs_model ?M [?a..<?n_vars])",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 2)),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 3))))
               )
           ))),
    ("Solve_SASP.model_to_dimacs_model_append",
     "set (model_to_dimacs_model ?M (?vs @ ?vs')) =
      set (model_to_dimacs_model ?M ?vs) Un
      set (model_to_dimacs_model ?M ?vs')",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1))),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0))))),
    ("Solve_SASP.model_to_dimacs_pos_nin",
     "?n_vars <= ?x ==>
      - int ?x ~: set (model_to_dimacs_model ?M [?a..<?n_vars])",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 2))),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 3))))
               )
           ))),
    ("Solve_SASP.map_le_cong",
     "(!!x. ?m1.0 x = ?m2.0 x) ==>
      (?m1.0 \<subseteq>\<^sub>m ?s) = (?m2.0 \<subseteq>\<^sub>m ?s)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Solve_SASP.fold_max_ge",
     "?b <= ?a ==> ?b <= fold (%x m. if m <= x then x else m) ?ys ?a",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_app
            (template_app (template_hole 1, t_empty), template_var 0),
           template_var 1)))),
    ("Solve_SASP.upt_eqD",
     "[?a..<?b] = [?a..<?b'] ==> ?b = ?b' | ?b' <= ?a | ?b <= ?a",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 3, template_var 2),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2)),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)))
           ))),
    ("Solve_SASP.lookup_someD",
     "lookup ?T ?x = Some ?y ==>
      EX p. p : set (Tree2.inorder ?T) & p = (?x, ?y)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 8, template_var 2), template_var 1),
          template_app (template_hole 7, template_var 0))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Solve_SASP.dimacs_model_to_abs_atom",
     "[| 0 < ?x; int ?x : set ?dimacs_M;
         distinct (map dimacs_lit_to_var ?dimacs_M) |]
      ==> dimacs_model_to_abs ?dimacs_M ?M ?x",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 2)),
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)
           ))),
    ("Solve_SASP.upt_eq_Cons_conv",
     "(?x # ?xs = [?i..<?j]) = (?i < ?j & ?i = ?x & [?i + 1..<?j] = ?xs)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 6, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 3)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 1, template_var 1),
                         template_hole 0)),
                     template_var 0)),
                 template_var 2)))
           ))),
    ("Solve_SASP.one_always_in",
     "1 < ?n_vars ==>
      1 : set (model_to_dimacs_model ?M [1..<?n_vars]) |
      - 1 : set (model_to_dimacs_model ?M [1..<?n_vars])",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_app
                      (template_app (template_hole 1, template_hole 7),
                       template_var 1))))),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 0, template_hole 4)),
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_app
                    (template_app (template_hole 1, template_hole 7),
                     template_var 1)))))
           ))),
    ("Solve_SASP.is_cnf_disj",
     "[| is_cnf (?f1.0 \<^bold>\<or> ?f2.0);
         !!f. [| ?f1.0 \<^bold>\<or> ?f2.0 = f; is_disj f |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Solve_SASP.pos_in_model",
     "[| ?M ?n; 0 < ?n; ?n < ?n_vars |]
      ==> int ?n : set (model_to_dimacs_model ?M [1..<?n_vars])",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1)),
        template_inequation (less_than, template_hole 6, template_var 1),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 1)),
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 0))))
           ))),
    ("Solve_SASP.dimacs_model_to_abs_atom'",
     "[| 0 < ?x; - int ?x : set ?dimacs_M;
         distinct (map dimacs_lit_to_var ?dimacs_M) |]
      ==> ~ dimacs_model_to_abs ?dimacs_M ?M ?x",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 2))),
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_var 1))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 2)
               )
           ))),
    ("Solve_SASP.encode_sound",
     "[| ast_problem.valid_plan ?prob ?\<pi>s; length ?\<pi>s <= ?h;
         encode ?h ?prob = Inl ?cnf_formula |]
      ==> EX dimacs_M. dimacs_model dimacs_M ?cnf_formula",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_equals, template_app (template_hole 5, template_var 2),
          template_var 1),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 1), template_var 3),
          template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Solve_SASP.dimacs_model_code",
     "dimacs_model ?ls ?cs =
      (let tls = list_to_rbt ?ls
       in (ALL c:set ?cs. size (inter_rbt tls (list_to_rbt c)) ~= 0) &
          distinct (map dimacs_lit_to_var ?ls))",
     template_equation
      (template_app
        (template_app (template_hole 13, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 12,
           template_app (template_hole 11, template_var 1)),
         t_empty))),
    ("Solve_SASP.neg_in_model",
     "[| ~ ?M ?n; 0 < ?n; ?n < ?n_vars |]
      ==> - int ?n : set (model_to_dimacs_model ?M [1..<?n_vars])",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_var 2, template_var 1))
            ),
        template_inequation (less_than, template_hole 7, template_var 1),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 1))),
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 0))))
           ))),
    ("Solve_SASP.model_to_dimacs_model_complete_max_var",
     "[| ALL v:atoms ?f. 0 < v; is_cnf ?f;
         dimacs_model ?dimacs_M (cnf_to_dimacs ?f) |]
      ==> dimacs_model_to_abs ?dimacs_M (%_. False) \<Turnstile> ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)),
              t_empty)
            ),
        template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0), t_empty)),
             template_var 1)
           ))),
    ("Solve_SASP.encode_complete",
     "encode ?h ?prob = Inr ?err ==>
      ~ (ast_problem.well_formed ?prob &
         (ALL op:set (ast_problem.ast\<delta> ?prob).
             consistent_pres_op op) &
         (ALL op:set (ast_problem.ast\<delta> ?prob).
             is_standard_operator op))",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 9, template_var 2), template_var 1),
          template_app (template_hole 8, template_var 0))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 1)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_hole 3,
                           template_app (template_hole 2, template_var 1))),
                       t_empty)),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_hole 3,
                         template_app (template_hole 2, template_var 1))),
                     t_empty)))
               )
           ))),
    ("Solve_SASP.in_model",
     "[| 0 < ?n; ?n < ?n_vars |]
      ==> int ?n : set (model_to_dimacs_model ?M [1..<?n_vars]) |
          - int ?n : set (model_to_dimacs_model ?M [1..<?n_vars])",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 2),
        template_inequation (less_than, template_var 2, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 2)),
                 template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_app
                      (template_app (template_hole 2, template_hole 1),
                       template_var 1))))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 0,
                   template_app (template_hole 5, template_var 2))),
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_var 1)))))
           ))),
    ("Solve_SASP.planning_dimacs_sound_code",
     "[| ast_problem.well_formed ?prob;
         ALL \<pi>:set (ast_problem.ast\<delta> ?prob).
            is_standard_operator' \<pi> |]
      ==> let cnf_formula = SASP_to_DIMACS ?h ?prob;
              decoded_plan = decode_DIMACS_model ?dimacs_M ?h ?prob
          in dimacs_model ?dimacs_M cnf_formula -->
             ast_problem.valid_plan ?prob decoded_plan",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_hole 9,
                  template_app (template_hole 8, template_var 2))),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 2)),
             t_empty)
           ))),
    ("Solve_SASP.model_to_dimacs_model_sound_max_var",
     "[| ALL v:atoms ?f. 0 < v; is_cnf ?f; ?M \<Turnstile> ?f |]
      ==> dimacs_model
           (model_to_dimacs_model ?M [1..<find_max (formula_vars ?f) + 2])
           (cnf_to_dimacs ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app (template_hole 15, template_var 1)),
              t_empty)
            ),
        template_predicate
         (template_app (template_hole 12, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 9, template_var 0),
                 template_app
                  (template_app (template_hole 8, template_hole 7),
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_hole 5,
                         template_app (template_hole 4, template_var 1))),
                     template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_hole 1)))))),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Solve_SASP.upt_append_sing",
     "[| ?xs @ [?x] = [?a..<?n_vars]; ?a < ?n_vars |]
      ==> ?xs = [?a..<?n_vars - 1] & ?x = ?n_vars - 1 & 0 < ?n_vars",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 9, template_var 3),
            template_app
             (template_app (template_hole 8, template_var 2),
              template_hole 7)),
          template_app
           (template_app (template_hole 6, template_var 1),
            template_var 0)),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 10, template_var 3),
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_hole 2)))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_hole 2))),
               template_app
                (template_app (template_hole 5, template_hole 0),
                 template_var 0)))
           ))),
    ("Solve_SASP.changing_atoms_works",
     "[| !!x. ?P x ==> (?f o ?g) x = x; ALL x:atoms ?phi. ?P x |]
      ==> ?M \<Turnstile> ?phi = ?M o ?f \<Turnstile> map_formula ?g ?phi",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0), template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 3)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))))),
    ("Solve_SASP.model_to_dimacs_model_sound_exists",
     "[| 1 < ?n_vars; ALL v:atoms ?f. 0 < v & v < ?n_vars; is_cnf ?f;
         ?M \<Turnstile> ?f |]
      ==> EX M_dimacs. dimacs_model M_dimacs (cnf_to_dimacs ?f)",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 1)),
              t_empty)
            ),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Solve_SASP.decode_complete",
     "decode ?M ?h ?prob = Inr ?err ==>
      ~ (ast_problem.well_formed ?prob &
         (ALL op:set (ast_problem.ast\<delta> ?prob).
             consistent_pres_op op) &
         (ALL \<pi>:set (ast_problem.ast\<delta> ?prob).
             is_standard_operator \<pi>) &
         dimacs_model ?M (SASP_to_DIMACS' ?h ?prob))",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 11, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 10, template_var 0))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_var 1)),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app
                          (template_hole 5,
                           template_app (template_hole 4, template_var 1))),
                       t_empty)),
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_app
                          (template_hole 6,
                           template_app
                            (template_hole 5,
                             template_app
                              (template_hole 4, template_var 1))),
                         t_empty)),
                     template_app
                      (template_app (template_hole 1, template_var 3),
                       template_app
                        (template_app (template_hole 0, template_var 2),
                         template_var 1)))))
               )
           ))),
    ("Solve_SASP.planning_dimacs_complete_code",
     "[| ast_problem.well_formed ?prob;
         ALL \<pi>:set (ast_problem.ast\<delta> ?prob).
            is_standard_operator' \<pi>;
         ast_problem.valid_plan ?prob ?\<pi>s; length ?\<pi>s <= ?h |]
      ==> let cnf_formula = SASP_to_DIMACS ?h ?prob
          in EX dimacs_M. dimacs_model dimacs_M cnf_formula",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_hole 9,
                  template_app (template_hole 8, template_var 2))),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 2)),
             t_empty)
           ))),
    ("Solve_SASP.model_to_dimacs_model_sound",
     "[| 1 < ?n_vars; ALL v:atoms ?f. 0 < v & v < ?n_vars; is_cnf ?f;
         ?M \<Turnstile> ?f |]
      ==> dimacs_model (model_to_dimacs_model ?M [1..<?n_vars])
           (cnf_to_dimacs ?f)",
     template_implication
      ([template_inequation (less_than, template_hole 10, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)),
              t_empty)
            ),
        template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app
                  (template_app (template_hole 1, template_hole 10),
                   template_var 2))),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Solve_SASP.model_to_dimacs_model_complete",
     "[| ALL v:atoms ?f. 0 < v & v < ?n_vars; is_cnf ?f;
         distinct (map dimacs_lit_to_var ?dimacs_M);
         dimacs_model ?dimacs_M (cnf_to_dimacs ?f) |]
      ==> dimacs_model_to_abs ?dimacs_M (%_. False) \<Turnstile> ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 12, template_var 2)),
              t_empty)
            ),
        template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0), t_empty)),
             template_var 2)
           ))),
    ("Solve_SASP.model_to_dimacs_model_complete_disj",
     "[| ALL v:atoms ?f. 0 < v & v < ?n_vars; is_disj ?f;
         distinct (map dimacs_lit_to_var ?dimacs_M);
         dimacs_model ?dimacs_M (cnf_to_dimacs ?f) |]
      ==> dimacs_model_to_abs ?dimacs_M (%_. False) \<Turnstile> ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 12, template_var 2)),
              t_empty)
            ),
        template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0), t_empty)),
             template_var 2)
           ))),
    ("Solve_SASP.disj_to_dimacs_sound",
     "[| 1 < ?n_vars; ALL v:atoms ?f. 0 < v & v < ?n_vars; is_disj ?f;
         ?M \<Turnstile> ?f |]
      ==> EX l:set (model_to_dimacs_model ?M [1..<?n_vars]).
             l : set (disj_to_dimacs ?f)",
     template_implication
      ([template_inequation (less_than, template_hole 12, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 1)),
              t_empty)
            ),
        template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_app
                    (template_app (template_hole 2, template_hole 12),
                     template_var 2)))),
             t_empty)
           ))),
    ("Solve_SASP.planning_dimacs_sound_code'",
     "[| ast_problem.well_formed ?prob;
         !!op. op : set (ast_problem.ast\<delta> ?prob) ==>
               consistent_pres_op op;
         ALL \<pi>:set (ast_problem.ast\<delta> ?prob).
            is_standard_operator \<pi> |]
      ==> let cnf_formula = SASP_to_DIMACS' ?h ?prob;
              decoded_plan = decode_DIMACS_model' ?dimacs_M ?h ?prob
          in dimacs_model ?dimacs_M cnf_formula -->
             ast_problem.valid_plan ?prob decoded_plan",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 2)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_hole 11,
                  template_app (template_hole 10, template_var 2))),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 2)),
             t_empty)
           ))),
    ("Solve_SASP.int_cases2'",
     "[| ?z ~= 0; !!n. [| 0 ~= int n; ?z = int n |] ==> ?P;
         !!n. [| 0 ~= - int n; ?z = - int n |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3)),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Solve_SASP.model_to_dimacs_model_all_clauses",
     "[| 1 < ?n_vars; ALL v:atoms ?f. 0 < v & v < ?n_vars; is_cnf ?f;
         ?M \<Turnstile> ?f; ?c : set (cnf_to_dimacs ?f) |]
      ==> EX l:set (model_to_dimacs_model ?M [1..<?n_vars]). l : set ?c",
     template_implication
      ([template_inequation (less_than, template_hole 14, template_var 3),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 12, template_var 2)),
              t_empty)
            ),
        template_predicate (template_app (template_hole 9, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_app
                    (template_app (template_hole 1, template_hole 14),
                     template_var 3)))),
             t_empty)
           ))),
    ("Solve_SASP.planning_dimacs_complete_code'",
     "[| ast_problem.well_formed ?prob;
         !!op. op : set (ast_problem.ast\<delta> ?prob) ==>
               consistent_pres_op op;
         !!op. op : set (ast_problem.ast\<delta> ?prob) ==>
               is_standard_operator op;
         ast_problem.valid_plan ?prob ?\<pi>s; length ?\<pi>s <= ?h |]
      ==> let cnf_formula = SASP_to_DIMACS' ?h ?prob
          in EX dimacs_M. dimacs_model dimacs_M cnf_formula",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 2)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 2)),
             t_empty)
           ))),
    ("Solve_SASP.model_to_dimacs_model_all_vars",
     "[| ALL v:atoms ?f. 0 < v & v < ?n_vars; is_cnf ?f;
         ?M \<Turnstile> ?f |]
      ==> ALL n<?n_vars.
             0 < n -->
             int n : set (model_to_dimacs_model ?M [1..<?n_vars]) |
             - int n : set (model_to_dimacs_model ?M [1..<?n_vars])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app (template_hole 15, template_var 2)),
              t_empty)
            ),
        template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_var 2)
            )],
       template_predicate (template_app (template_hole 9, t_empty))))]
