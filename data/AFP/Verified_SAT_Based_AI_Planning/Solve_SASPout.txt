Loading theory "Draft.List_Supplement" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.Solve_SASP" via "Draft.AST_SAS_Plus_Equivalence" via "Draft.SAS_Plus_Semantics")
Loading theory "Draft.Map_Supplement" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.Solve_SASP" via "Draft.AST_SAS_Plus_Equivalence" via "Draft.SAS_Plus_Semantics")
Loading theory "AI_Planning_Languages_Semantics.SASP_Semantics" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.Solve_SASP" via "Draft.AST_SAS_Plus_Equivalence")
Loading theory "HOL-Data_Structures.Cmp" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.Solve_SASP" via "HOL-Data_Structures.RBT_Map" via "HOL-Data_Structures.RBT_Set")
locale ast_problem
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
### theory "Draft.Map_Supplement"
### 0.059s elapsed time, 0.264s cpu time, 0.000s GC time
Loading theory "HOL-Data_Structures.Less_False" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.Solve_SASP" via "HOL-Data_Structures.RBT_Map" via "HOL-Data_Structures.RBT_Set" via "HOL-Data_Structures.Isin2" via "HOL-Data_Structures.Set_Specs" via "HOL-Data_Structures.List_Ins_Del" via "HOL-Data_Structures.Sorted_Less")
consts
  embed :: "'a list => 'a list list"
### theory "Draft.List_Supplement"
### 0.077s elapsed time, 0.336s cpu time, 0.000s GC time
Loading theory "HOL-Library.Case_Converter" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.Solve_SASP" via "Draft.AST_SAS_Plus_Equivalence" via "Draft.SAS_Plus_Semantics" via "Draft.SAS_Plus_Representation" via "Draft.State_Variable_Representation" via "Propositional_Proof_Systems.CNF" via "HOL-Library.Simps_Case_Conv")
### theory "HOL-Data_Structures.Less_False"
### 0.050s elapsed time, 0.187s cpu time, 0.040s GC time
Loading theory "HOL-Data_Structures.Sorted_Less" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.Solve_SASP" via "HOL-Data_Structures.RBT_Map" via "HOL-Data_Structures.RBT_Set" via "HOL-Data_Structures.Isin2" via "HOL-Data_Structures.Set_Specs" via "HOL-Data_Structures.List_Ins_Del")
locale wf_ast_problem
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
  assumes "wf_ast_problem problem"
locale ast_problem
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
### theory "HOL-Data_Structures.Sorted_Less"
### 0.046s elapsed time, 0.187s cpu time, 0.000s GC time
Loading theory "HOL-Data_Structures.AList_Upd_Del" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.Solve_SASP" via "HOL-Data_Structures.RBT_Map" via "HOL-Data_Structures.Lookup2" via "HOL-Data_Structures.Map_Specs")
locale ast_problem
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
Found termination order: "size_list size <*mlex*> {}"
signature CASE_CONVERTER =
  sig
    type elimination_strategy
    val keep_constructor_context: elimination_strategy
    val replace_by_type:
       (Proof.context -> string * string -> bool) -> elimination_strategy
    val to_case:
       Proof.context ->
         elimination_strategy ->
           (string * typ -> int) -> thm list -> thm list option
  end
structure Case_Converter: CASE_CONVERTER
### theory "HOL-Library.Case_Converter"
### 0.198s elapsed time, 0.767s cpu time, 0.090s GC time
Loading theory "HOL-Data_Structures.List_Ins_Del" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.Solve_SASP" via "HOL-Data_Structures.RBT_Map" via "HOL-Data_Structures.RBT_Set" via "HOL-Data_Structures.Isin2" via "HOL-Data_Structures.Set_Specs")
### theory "HOL-Data_Structures.Cmp"
### 0.327s elapsed time, 1.305s cpu time, 0.090s GC time
Loading theory "HOL-Library.Simps_Case_Conv" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.Solve_SASP" via "Draft.AST_SAS_Plus_Equivalence" via "Draft.SAS_Plus_Semantics" via "Draft.SAS_Plus_Representation" via "Draft.State_Variable_Representation" via "Propositional_Proof_Systems.CNF")
Found termination order:
  "(%p. size_list (size_list size) (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale wf_ast_problem
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
  assumes "wf_ast_problem problem"
signature SIMPS_CASE_CONV =
  sig
    val gen_to_simps: Proof.context -> thm list -> thm -> thm list
    val to_case: Proof.context -> thm list -> thm
    val to_simps: Proof.context -> thm -> thm list
  end
structure Simps_Case_Conv: SIMPS_CASE_CONV
### theory "HOL-Library.Simps_Case_Conv"
### 0.060s elapsed time, 0.243s cpu time, 0.000s GC time
Loading theory "HOL-Library.Code_Abstract_Nat" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.Solve_SASP" via "HOL-Library.Code_Target_Nat")
### theory "AI_Planning_Languages_Semantics.SASP_Semantics"
### 0.388s elapsed time, 1.554s cpu time, 0.090s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "HOL-Library.Code_Abstract_Nat"
### 0.071s elapsed time, 0.272s cpu time, 0.053s GC time
Loading theory "HOL-Library.Code_Target_Nat" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.Solve_SASP")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Data_Structures.List_Ins_Del"
### 0.222s elapsed time, 0.880s cpu time, 0.053s GC time
Loading theory "HOL-Data_Structures.Set_Specs" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.Solve_SASP" via "HOL-Data_Structures.RBT_Map" via "HOL-Data_Structures.RBT_Set" via "HOL-Data_Structures.Isin2")
### Code generator: dropping subsumed code equation
### divmod_nat ?m ?n ==
### if ?n = 0 | ?m < ?n then (0, ?m)
### else let (q, y) = divmod_nat (?m - ?n) ?n in (Suc q, y)
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit1 ?n) ==
### if ?m < ?n then (0, numeral (num.Bit1 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit1 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit1 ?n) ==
### if ?m <= ?n then (0, numeral (num.Bit0 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit0 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r + 1)
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit1 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit0 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod ?m num.One == (numeral ?m, 0)
### Code generator: dropping subsumed code equation
### Suc ?m <= ?n == ?m < ?n
### Code generator: dropping subsumed code equation
### 0 <= ?n == True
### Code generator: dropping subsumed code equation
### ?m < Suc ?n == ?m <= ?n
### Code generator: dropping subsumed code equation
### ?n < 0 == False
locale Set
  fixes empty :: "'s"
    and insert :: "'a => 's => 's"
    and delete :: "'a => 's => 's"
    and isin :: "'s => 'a => bool"
    and set :: "'s => 'a set"
    and invar :: "'s => bool"
  assumes "Set empty insert delete isin set invar"
### theory "HOL-Library.Function_Algebras"
### 0.163s elapsed time, 0.636s cpu time, 0.053s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### Code generator: dropping subsumed code equation
### of_nat ?n == semiring_1_class.of_nat_aux (%i. i + (1::?'a)) ?n (0::?'a)
locale Set_by_Ordered
  fixes empty :: "'t"
    and insert :: "'a => 't => 't"
    and delete :: "'a => 't => 't"
    and isin :: "'t => 'a => bool"
    and inorder :: "'t => 'a list"
    and inv :: "'t => bool"
  assumes "Set_by_Ordered empty insert delete isin inorder inv"
### theory "HOL-Library.Code_Target_Nat"
### 0.127s elapsed time, 0.511s cpu time, 0.000s GC time
Loading theory "AI_Planning_Languages_Semantics.SASP_Checker" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.Solve_SASP")
locale Set2
  fixes empty :: "'s"
    and delete :: "'a => 's => 's"
    and isin :: "'s => 'a => bool"
    and set :: "'s => 'a set"
    and invar :: "'s => bool"
    and insert :: "'a => 's => 's"
    and union :: "'s => 's => 's"
    and inter :: "'s => 's => 's"
    and diff :: "'s => 's => 's"
  assumes "Set2 empty delete isin set invar insert union inter diff"
### theory "HOL-Data_Structures.Set_Specs"
### 0.129s elapsed time, 0.502s cpu time, 0.080s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.Solve_SASP" via "Draft.AST_SAS_Plus_Equivalence" via "Draft.SAS_Plus_Semantics" via "Draft.SAS_Plus_Representation" via "Draft.State_Variable_Representation" via "Propositional_Proof_Systems.Formulas" via "HOL-Library.Countable")
### theory "HOL-Data_Structures.AList_Upd_Del"
### 0.480s elapsed time, 1.888s cpu time, 0.182s GC time
Loading theory "HOL-Data_Structures.Map_Specs" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.Solve_SASP" via "HOL-Data_Structures.RBT_Map" via "HOL-Data_Structures.Lookup2")
locale Map
  fixes empty :: "'m"
    and update :: "'a => 'b => 'm => 'm"
    and delete :: "'a => 'm => 'm"
    and lookup :: "'m => 'a => 'b option"
    and invar :: "'m => bool"
  assumes "Map empty update delete lookup invar"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale Map_by_Ordered
  fixes empty :: "'t"
    and update :: "'a => 'b => 't => 't"
    and delete :: "'a => 't => 't"
    and lookup :: "'t => 'a => 'b option"
    and inorder :: "'t => ('a * 'b) list"
    and inv :: "'t => bool"
  assumes "Map_by_Ordered empty update delete lookup inorder inv"
### theory "HOL-Data_Structures.Map_Specs"
### 0.111s elapsed time, 0.446s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
See theory exports
### theory "HOL-Library.Nat_Bijection"
### 0.456s elapsed time, 1.790s cpu time, 0.218s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.279s elapsed time, 1.085s cpu time, 0.138s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.411s elapsed time, 1.624s cpu time, 0.138s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.Solve_SASP" via "Draft.AST_SAS_Plus_Equivalence" via "Draft.SAS_Plus_Semantics" via "Draft.SAS_Plus_Representation" via "Draft.State_Variable_Representation" via "Propositional_Proof_Systems.Formulas")
locale wf_ast_problem
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
  assumes "wf_ast_problem problem"
locale ast_problem
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
Found termination order:
  "(%p. size_list (size_list size) (fst p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list (size_list size) (fst (snd p))) <*mlex*> {}"
### Additional type variable(s) in locale specification "countable": 'a
locale wf_ast_problem
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
  assumes "wf_ast_problem problem"
consts
  shift :: "'a list => 'a stream => 'a stream"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### Legacy feature! export_code with file argument (line 346 of "$AFP/AI_Planning_Languages_Semantics/SASP_Checker.thy")
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### theory "AI_Planning_Languages_Semantics.SASP_Checker"
### 1.439s elapsed time, 5.524s cpu time, 0.874s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.ExtrEqs")
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.129s elapsed time, 4.296s cpu time, 0.803s GC time
Loading theory "List-Index.List_Index" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.Solve_SASP" via "Draft.AST_SAS_Plus_Equivalence")
consts
  find_index :: "('a => bool) => 'a list => nat"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  map_index' :: "nat => (nat => 'a => 'b) => 'a list => 'b list"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.324s elapsed time, 5.069s cpu time, 0.871s GC time
Loading theory "Propositional_Proof_Systems.CNF" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.Solve_SASP" via "Draft.AST_SAS_Plus_Equivalence" via "Draft.SAS_Plus_Semantics" via "Draft.SAS_Plus_Representation" via "Draft.State_Variable_Representation")
consts
  insert_nth :: "nat => 'a => 'a list => 'a list"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "List-Index.List_Index"
### 0.402s elapsed time, 1.582s cpu time, 0.137s GC time
Loading theory "Propositional_Proof_Systems.Formulas" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.Solve_SASP" via "Draft.AST_SAS_Plus_Equivalence" via "Draft.SAS_Plus_Semantics" via "Draft.SAS_Plus_Representation" via "Draft.State_Variable_Representation")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  atoms_of_lit :: "'a literal => 'a"
### theory "Propositional_Proof_Systems.CNF"
### 0.753s elapsed time, 2.772s cpu time, 1.082s GC time
Loading theory "Propositional_Proof_Systems.CNF_Sema" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.Solve_SASP" via "Draft.SAT_Solve_SAS_Plus" via "Draft.SAT_Plan_Extensions" via "Draft.SAT_Plan_Base" via "Draft.CNF_Semantics_Supplement" via "Propositional_Proof_Systems.CNF_Formulas_Sema")
### Ambiguous input (line 7 of "$AFP/Propositional_Proof_Systems/CNF_Sema.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lit_semantics)
###       ("_cargs" ("_position" \<A>)
###         ("\<^const>Transitive_Closure.trancl" ("_position" k))))
###     ("_applC" ("_position" \<A>) ("_position" k))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lit_semantics)
###       ("_cargs" ("_position" \<A>)
###         ("\<^const>CNF.literal.Pos" ("_position" k))))
###     ("_applC" ("_position" \<A>) ("_position" k))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 8 of "$AFP/Propositional_Proof_Systems/CNF_Sema.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lit_semantics)
###       ("_cargs" ("_position" \<A>)
###         ("\<^const>Relation.converse" ("_position" k))))
###     ("\<^const>HOL.Not" ("_applC" ("_position" \<A>) ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lit_semantics)
###       ("_cargs" ("_position" \<A>)
###         ("\<^const>CNF.literal.Neg" ("_position" k))))
###     ("\<^const>HOL.Not" ("_applC" ("_position" \<A>) ("_position" k)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  lit_semantics :: "('a => bool) => 'a literal => bool"
### theory "Propositional_Proof_Systems.CNF_Sema"
### 0.048s elapsed time, 0.192s cpu time, 0.000s GC time
[| (?x, ?y) : ?r; (?xs, ?ys) : listrel ?r |]
==> (?x # ?xs, ?y # ?ys) : listrel ?r
[| (?x, ?y) : ?r; (?xs, ?ys) : listrel ?r |]
==> (?x # ?xs, ?y # ?ys) : listrel ?r
[| (?x, ?y) : ?r; (?xs, ?ys) : listrel ?r |]
==> (?x # ?xs, ?y # ?ys) : listrel ?r
"filter (eff_enabled s) effs"
  :: "((nat * nat) list * nat * nat option * nat) list"
### Ambiguous input (line 25 of "$AFP/Propositional_Proof_Systems/CNF.thy") produces 2 parse trees:
### ("_constrain"
###   ("_Finset"
###     ("\<^const>Transitive_Closure.trancl"
###       ("\<^const>Groups.zero_class.zero")))
###   ("_tapp" ("_type_name" nat) ("_type_name" clause)))
### ("_constrain"
###   ("_Finset"
###     ("\<^const>CNF.literal.Pos" ("\<^const>Groups.zero_class.zero")))
###   ("_tapp" ("_type_name" nat) ("_type_name" clause)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
"insert (0\<^sup>+) \<box>"
  :: "nat literal set"
### Ambiguous input (line 28 of "$AFP/Propositional_Proof_Systems/CNF.thy") produces 2 parse trees:
### ("_constrain"
###   ("_Finset"
###     ("\<^const>Transitive_Closure.trancl"
###       ("\<^const>Groups.zero_class.zero")))
###   ("_tapp" ("_type_name" nat) ("_type_name" clause)))
### ("_constrain"
###   ("_Finset"
###     ("\<^const>CNF.literal.Pos" ("\<^const>Groups.zero_class.zero")))
###   ("_tapp" ("_type_name" nat) ("_type_name" clause)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
"{0\<^sup>+}"
  :: "nat literal set"
### theory "HOL-Library.BigO"
### 1.132s elapsed time, 4.275s cpu time, 1.217s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.490s elapsed time, 8.896s cpu time, 2.102s GC time
Loading theory "Draft.Templates" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Data_Structures.Tree2" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.Solve_SASP" via "HOL-Data_Structures.RBT_Map" via "HOL-Data_Structures.RBT_Set" via "HOL-Data_Structures.RBT")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.181s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Solve_SASPMoreTemplates")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Data_Structures.Tree2"
### 0.256s elapsed time, 0.790s cpu time, 0.060s GC time
Loading theory "HOL-Data_Structures.Isin2" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.Solve_SASP" via "HOL-Data_Structures.RBT_Map" via "HOL-Data_Structures.RBT_Set")
Loading theory "HOL-Data_Structures.Lookup2" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.Solve_SASP" via "HOL-Data_Structures.RBT_Map")
consts
  subformulae :: "'a formula => 'a formula list"
### Ambiguous input (line 62 of "$AFP/Propositional_Proof_Systems/Formulas.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>BigAnd" ("_position" Nil))
###     ("_applC" ("\<^const>Formulas.formula.Not")
###       ("\<^const>Formulas.formula.Bot"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>BigAnd"
###     ("\<^const>HOL.eq" ("_position" Nil)
###       ("_applC" ("\<^const>Formulas.formula.Not")
###         ("\<^const>Formulas.formula.Bot")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 63 of "$AFP/Propositional_Proof_Systems/Formulas.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Formulas.formula.And"
###     ("\<^fixed>BigAnd"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs))
###         ("_position" F)))
###     ("\<^fixed>BigAnd" ("_position" Fs))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>BigAnd"
###       ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs)))
###     ("\<^const>Formulas.formula.And" ("_position" F)
###       ("\<^fixed>BigAnd" ("_position" Fs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>BigAnd"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs))
###       ("\<^const>Formulas.formula.And" ("_position" F)
###         ("\<^fixed>BigAnd" ("_position" Fs))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  BigAnd :: "'a formula list => 'a formula"
### Ambiguous input (line 69 of "$AFP/Propositional_Proof_Systems/Formulas.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>BigOr" ("_position" Nil))
###     ("\<^const>Formulas.formula.Bot")))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>BigOr"
###     ("\<^const>HOL.eq" ("_position" Nil)
###       ("\<^const>Formulas.formula.Bot"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 70 of "$AFP/Propositional_Proof_Systems/Formulas.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Formulas.formula.Or"
###     ("\<^fixed>BigOr"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs))
###         ("_position" F)))
###     ("\<^fixed>BigOr" ("_position" Fs))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>BigOr"
###       ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs)))
###     ("\<^const>Formulas.formula.Or" ("_position" F)
###       ("\<^fixed>BigOr" ("_position" Fs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>BigOr"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs))
###       ("\<^const>Formulas.formula.Or" ("_position" F)
###         ("\<^fixed>BigOr" ("_position" Fs))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  BigOr :: "'a formula list => 'a formula"
consts
  pn_atoms :: "'a formula => 'a set * 'a set"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "HOL-Data_Structures.Isin2"
### 0.751s elapsed time, 2.799s cpu time, 1.135s GC time
Loading theory "HOL-Data_Structures.Set2_Join" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.Solve_SASP" via "Draft.Set2_Join_RBT")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.958s elapsed time, 3.438s cpu time, 1.195s GC time
Loading theory "HOL-Data_Structures.RBT" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.Solve_SASP" via "HOL-Data_Structures.RBT_Map" via "HOL-Data_Structures.RBT_Set")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "HOL-Data_Structures.Lookup2"
### 0.773s elapsed time, 2.893s cpu time, 1.135s GC time
locale Set2_Join
  fixes join :: "('a * 'b) tree => 'a => ('a * 'b) tree => ('a * 'b) tree"
    and inv :: "('a * 'b) tree => bool"
  assumes "Set2_Join join inv"
### Missing patterns in function definition:
### split_min \<langle>\<rangle> = undefined
Found termination order: "size <*mlex*> {}"
"(3, 2)"
  :: "nat * nat"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Propositional_Proof_Systems.Formulas"
### 2.568s elapsed time, 8.664s cpu time, 2.514s GC time
Loading theory "Propositional_Proof_Systems.CNF_Formulas" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.Solve_SASP" via "Draft.SAT_Solve_SAS_Plus" via "Draft.SAT_Plan_Extensions" via "Draft.SAT_Plan_Base" via "Draft.CNF_Semantics_Supplement" via "Propositional_Proof_Systems.CNF_Formulas_Sema")
Loading theory "Propositional_Proof_Systems.Sema" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.Solve_SASP" via "Draft.AST_SAS_Plus_Equivalence" via "Draft.SAS_Plus_Semantics" via "Draft.SAS_Plus_Representation" via "Draft.State_Variable_Representation")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  formula_semantics :: "('a => bool) => 'a formula => bool"
consts
  formula_semantics_alt :: "('a => bool) => 'a formula => bool"
consts
  formula_semantics_tt :: "('a => bool) => 'a formula => bool"
Found termination order: "{}"
### Ambiguous input (line 72 of "$AFP/Propositional_Proof_Systems/Sema.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" A)
###     ("\<^const>Formulas.BigAnd"
###       ("\<^const>HOL.iff" ("_position" F)
###         ("_Ball" ("_position" f)
###           ("_applC" ("_position" set) ("_position" F))
###           ("\<^const>Sema.formula_semantics" ("_position" A)
###             ("_position" f)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Sema.formula_semantics" ("_position" A)
###       ("\<^const>Formulas.BigAnd" ("_position" F)))
###     ("_Ball" ("_position" f) ("_applC" ("_position" set) ("_position" F))
###       ("\<^const>Sema.formula_semantics" ("_position" A) ("_position" f)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 73 of "$AFP/Propositional_Proof_Systems/Sema.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" A)
###     ("\<^const>Formulas.BigOr"
###       ("\<^const>HOL.iff" ("_position" F)
###         ("_Bex" ("_position" f) ("_applC" ("_position" set) ("_position" F))
###           ("\<^const>Sema.formula_semantics" ("_position" A)
###             ("_position" f)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Sema.formula_semantics" ("_position" A)
###       ("\<^const>Formulas.BigOr" ("_position" F)))
###     ("_Bex" ("_position" f) ("_applC" ("_position" set) ("_position" F))
###       ("\<^const>Sema.formula_semantics" ("_position" A) ("_position" f)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Propositional_Proof_Systems.Sema"
### 0.168s elapsed time, 0.669s cpu time, 0.079s GC time
Loading theory "Draft.State_Variable_Representation" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.Solve_SASP" via "Draft.AST_SAS_Plus_Equivalence" via "Draft.SAS_Plus_Semantics" via "Draft.SAS_Plus_Representation")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.State_Variable_Representation"
### 0.262s elapsed time, 1.034s cpu time, 0.098s GC time
Loading theory "Draft.SAS_Plus_Representation" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.Solve_SASP" via "Draft.AST_SAS_Plus_Equivalence" via "Draft.SAS_Plus_Semantics")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Data_Structures.Set2_Join"
### 2.234s elapsed time, 8.298s cpu time, 2.216s GC time
Loading theory "Draft.STRIPS_Representation" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.Solve_SASP" via "Draft.SAT_Solve_SAS_Plus" via "Draft.SAS_Plus_STRIPS" via "Draft.STRIPS_Semantics")
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### Ambiguous input (line 76 of "$AFP/Propositional_Proof_Systems/CNF_Formulas.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" cnf)
###       ("_applC" ("_position" Atom) ("_position" k)))
###     ("_Finset" ("_Finset" ("\<^const>CNF.literal.Pos" ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" cnf)
###       ("_applC" ("_position" Atom) ("_position" k)))
###     ("_Finset"
###       ("_Finset" ("\<^const>Transitive_Closure.trancl" ("_position" k))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 77 of "$AFP/Propositional_Proof_Systems/CNF_Formulas.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" cnf)
###       ("_applC" ("_position" Not)
###         ("_applC" ("_position" Atom) ("_position" k))))
###     ("_Finset" ("_Finset" ("\<^const>CNF.literal.Neg" ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" cnf)
###       ("_applC" ("_position" Not)
###         ("_applC" ("_position" Atom) ("_position" k))))
###     ("_Finset" ("_Finset" ("\<^const>Relation.converse" ("_position" k))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Missing patterns in function definition:
### !!va. cnf (\<^bold>\<not> (\<^bold>\<not> va)) = undefined
### !!va vb. cnf (\<^bold>\<not> (va \<^bold>\<and> vb)) = undefined
### !!va vb. cnf (\<^bold>\<not> (va \<^bold>\<or> vb)) = undefined
### (2 more)
### theory "Draft.SAS_Plus_Representation"
### 1.480s elapsed time, 5.658s cpu time, 1.993s GC time
Loading theory "Draft.SAS_Plus_Semantics" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.Solve_SASP" via "Draft.AST_SAS_Plus_Equivalence")
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 95 of "$AFP/Propositional_Proof_Systems/CNF_Formulas.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" cnf_lists)
###       ("_applC" ("_position" Atom) ("_position" k)))
###     ("_list" ("_list" ("\<^const>CNF.literal.Pos" ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" cnf_lists)
###       ("_applC" ("_position" Atom) ("_position" k)))
###     ("_list"
###       ("_list" ("\<^const>Transitive_Closure.trancl" ("_position" k))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 96 of "$AFP/Propositional_Proof_Systems/CNF_Formulas.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" cnf_lists)
###       ("_applC" ("_position" Not)
###         ("_applC" ("_position" Atom) ("_position" k))))
###     ("_list" ("_list" ("\<^const>CNF.literal.Neg" ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" cnf_lists)
###       ("_applC" ("_position" Not)
###         ("_applC" ("_position" Atom) ("_position" k))))
###     ("_list" ("_list" ("\<^const>Relation.converse" ("_position" k))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Missing patterns in function definition:
### !!va. cnf_lists (\<^bold>\<not> (\<^bold>\<not> va)) = undefined
### !!va vb. cnf_lists (\<^bold>\<not> (va \<^bold>\<and> vb)) = undefined
### !!va vb. cnf_lists (\<^bold>\<not> (va \<^bold>\<or> vb)) = undefined
### (2 more)
Found termination order: "size <*mlex*> {}"
consts
  form_of_lit :: "'a literal => 'a formula"
Found termination order: "{}"
### theory "Propositional_Proof_Systems.CNF_Formulas"
### 2.290s elapsed time, 8.858s cpu time, 2.384s GC time
Loading theory "Propositional_Proof_Systems.CNF_Formulas_Sema" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.Solve_SASP" via "Draft.SAT_Solve_SAS_Plus" via "Draft.SAT_Plan_Extensions" via "Draft.SAT_Plan_Base" via "Draft.CNF_Semantics_Supplement")
consts
  execute_serial_plan_sas_plus ::
    "('a => 'b option)
     => ('a, 'b) sas_plus_operator list => 'a => 'b option"
### theory "Draft.STRIPS_Representation"
### 0.855s elapsed time, 3.414s cpu time, 0.443s GC time
Loading theory "Draft.STRIPS_Semantics" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.Solve_SASP" via "Draft.SAT_Solve_SAS_Plus" via "Draft.SAS_Plus_STRIPS")
Found termination order: "(%p. size_list length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list length (snd p)) <*mlex*> {}"
Found termination order:
  "(%p. size (snd p)) <*mlex*> (%p. size (fst p)) <*mlex*> {}"
### theory "HOL-Data_Structures.RBT"
### 3.248s elapsed time, 12.341s cpu time, 2.659s GC time
Loading theory "HOL-Data_Structures.RBT_Set" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.Solve_SASP" via "HOL-Data_Structures.RBT_Map")
### theory "Draft.SAS_Plus_Semantics"
### 0.864s elapsed time, 3.433s cpu time, 0.468s GC time
Loading theory "Draft.AST_SAS_Plus_Equivalence" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.Solve_SASP")
### theory "Propositional_Proof_Systems.CNF_Formulas_Sema"
### 0.531s elapsed time, 2.108s cpu time, 0.254s GC time
Loading theory "Draft.CNF_Supplement" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.Solve_SASP" via "Draft.SAT_Solve_SAS_Plus" via "Draft.SAT_Plan_Extensions" via "Draft.SAT_Plan_Base" via "Draft.CNF_Semantics_Supplement")
consts
  execute_serial_plan ::
    "('a => bool option) => 'a strips_operator list => 'a => bool option"
Found termination order: "{}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### Ambiguous input (line 16 of "$AFP/Verified_SAT_Based_AI_Planning/CNF_Supplement.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" literal_formula_to_literal)
###       ("_applC" ("_position" Atom) ("_position" a)))
###     ("\<^const>Transitive_Closure.trancl" ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" literal_formula_to_literal)
###       ("_applC" ("_position" Atom) ("_position" a)))
###     ("\<^const>CNF.literal.Pos" ("_position" a))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 17 of "$AFP/Verified_SAT_Based_AI_Planning/CNF_Supplement.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" literal_formula_to_literal)
###       ("_applC" ("\<^const>Formulas.formula.Not")
###         ("_applC" ("_position" Atom) ("_position" a))))
###     ("\<^const>Relation.converse" ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" literal_formula_to_literal)
###       ("_applC" ("\<^const>Formulas.formula.Not")
###         ("_applC" ("_position" Atom) ("_position" a))))
###     ("\<^const>CNF.literal.Neg" ("_position" a))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Missing patterns in function definition:
### literal_formula_to_literal \<bottom> = undefined
### literal_formula_to_literal (\<^bold>\<not> \<bottom>) = undefined
### !!va. literal_formula_to_literal (\<^bold>\<not> (\<^bold>\<not> va)) =
###       undefined
### (6 more)
Found termination order: "{}"
### theory "Draft.CNF_Supplement"
### 0.359s elapsed time, 1.428s cpu time, 0.113s GC time
Loading theory "Draft.CNF_Semantics_Supplement" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.Solve_SASP" via "Draft.SAT_Solve_SAS_Plus" via "Draft.SAT_Plan_Extensions" via "Draft.SAT_Plan_Base")
Found termination order: "(%p. size_list length (snd p)) <*mlex*> {}"
### theory "Draft.CNF_Semantics_Supplement"
### 0.047s elapsed time, 0.191s cpu time, 0.000s GC time
"stop"
  :: "'a"
consts
  are_all_operators_non_interfering ::
    "'variable strips_operator list => bool"
*** Undefined fact: "Suc.IH" (line 472 of "$AFP/Verified_SAT_Based_AI_Planning/SAS_Plus_Semantics.thy")
*** At command "thm" (line 472 of "$AFP/Verified_SAT_Based_AI_Planning/SAS_Plus_Semantics.thy")
[| ALL op:set ?\<psi>. are_operator_effects_consistent op op;
   ?G \<subseteq>\<^sub>m execute_serial_plan_sas_plus ?I ?\<psi> |]
==> ?G \<subseteq>\<^sub>m
    execute_parallel_plan_sas_plus ?I (List_Supplement.embed ?\<psi>)
Found termination order: "{}"
Found termination order: "(%p. size_list length (snd p)) <*mlex*> {}"
Found termination order: "{}"
*** Undefined fact: "f" (line 389 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")2880fComp_deffactATP.fComp_deff_arg_min_list_ffactList.f_arg_min_list_ff_inv_into_ffactHilbert_Choice.f_inv_into_ff_the_inv_into_ffactFun.f_the_inv_into_ff_the_inv_into_f_bij_betwfactFun.f_the_inv_into_f_bij_betwfact_0factFactorial.semiring_char_0_class.fact_0fact_1factFactorial.semiring_char_0_class.fact_1fact_2factFactorial.semiring_char_0_class.fact_2fact_SucfactFactorial.semiring_char_0_class.fact_Sucfact_Suc_0factFactorial.semiring_char_0_class.fact_Suc_0fact_binomialfactBinomial.fact_binomialfact_codefactFactorial.fact_codefact_dictfactFactorial.semiring_char_0_class.fact_dictfact_div_factfactFactorial.fact_div_factfact_div_fact_le_powfactFactorial.fact_div_fact_le_powfact_doublefactFactorial.fact_doublefact_dvdfactFactorial.fact_dvdfact_fact_dvd_factfactBinomial.fact_fact_dvd_factfact_ge_1factFactorial.fact_ge_1fact_ge_Suc_0_natfactFactorial.fact_ge_Suc_0_natfact_ge_selffactFactorial.fact_ge_selffact_ge_zerofactFactorial.fact_ge_zerofact_gt_zerofactFactorial.fact_gt_zerofact_in_IntsfactFactorial.fact_in_Intsfact_in_NatsfactFactorial.fact_in_Natsfact_le_powerfactFactorial.fact_le_powerfact_less_monofactFactorial.fact_less_monofact_less_mono_natfactFactorial.fact_less_mono_natfact_modfactFactorial.fact_modfact_monofactFactorial.fact_monofact_mono_natfactFactorial.fact_mono_natfact_nonzerofactFactorial.fact_nonzerofact_not_negfactFactorial.fact_not_negfact_num_eq_iffactFactorial.fact_num_eq_iffact_numeralfactFactorial.fact_numeralfact_prodfactFactorial.semiring_char_0_class.fact_prodfact_prod_SucfactFactorial.semiring_char_0_class.fact_prod_Sucfact_prod_revfactFactorial.semiring_char_0_class.fact_prod_revfact_reducefactFactorial.fact_reducefact_splitfactFactorial.semiring_char_0_class.fact_split
*** At command "thm" (line 389 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
*** Undefined fact: "Cons.IH" (line 712 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
*** At command "thm" (line 712 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
Found termination order: "{}"
Found termination order: "{}"
*** Undefined fact: "Cons.prems" (line 1667 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
*** At command "thm" (line 1667 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
locale ast_problem
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
[| are_all_operators_applicable I ?ops;
   are_all_operator_effects_consistent ?ops;
   are_all_operators_non_interfering ?ops |]
==> execute_parallel_operator I ?ops = execute_serial_plan I ?ops
### theory "Draft.STRIPS_Semantics"
### 1.188s elapsed time, 4.628s cpu time, 0.525s GC time
Loading theory "Draft.SAS_Plus_STRIPS" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.Solve_SASP" via "Draft.SAT_Solve_SAS_Plus")
Loading theory "Draft.SAT_Plan_Base" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.Solve_SASP" via "Draft.SAT_Solve_SAS_Plus" via "Draft.SAT_Plan_Extensions")
locale ast_problem
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale abs_ast_prob
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
  assumes "abs_ast_prob problem"
locale ast_problem
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
Found termination order: "size <*mlex*> {}"
locale abs_ast_prob
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
  assumes "abs_ast_prob problem"
Found termination order: "size <*mlex*> {}"
locale abs_ast_prob
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
  assumes "abs_ast_prob problem"
locale ast_problem
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
locale abs_ast_prob
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
  assumes "abs_ast_prob problem"
locale ast_problem
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
locale abs_ast_prob
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
  assumes "abs_ast_prob problem"
### theory "HOL-Data_Structures.RBT_Set"
### 2.206s elapsed time, 8.387s cpu time, 2.852s GC time
Loading theory "Draft.Set2_Join_RBT" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.Solve_SASP")
locale ast_problem
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
locale abs_ast_prob
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
  assumes "abs_ast_prob problem"
locale ast_problem
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
locale abs_ast_prob
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
  assumes "abs_ast_prob problem"
locale ast_problem
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
locale abs_ast_prob
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
  assumes "abs_ast_prob problem"
locale ast_problem
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
### theory "Draft.SAS_Plus_STRIPS"
### 1.489s elapsed time, 5.662s cpu time, 2.220s GC time
Loading theory "HOL-Data_Structures.RBT_Map" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.Solve_SASP")
locale abs_ast_prob
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
  assumes "abs_ast_prob problem"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale abs_ast_prob
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
  assumes "abs_ast_prob problem"
locale ast_problem
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
locale abs_ast_prob
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
  assumes "abs_ast_prob problem"
### theory "Draft.AST_SAS_Plus_Equivalence"
### 3.126s elapsed time, 12.035s cpu time, 3.147s GC time
### Ambiguous input (line 1723 of "$AFP/Verified_SAT_Based_AI_Planning/SAT_Plan_Base.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###       ("\<^const>SAT_Plan_Base.encode_problem" ("_position" \<Pi>)
###         ("_position" t)))
###     ("_applC" ("_position" cnf_semantics)
###       ("_cargs" ("_position" \<A>)
###         ("_applC" ("_position" cnf)
###           ("\<^const>SAT_Plan_Base.encode_problem" ("_position" \<Pi>)
###             ("_position" t)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###     ("\<^const>SAT_Plan_Base.encode_problem" ("_position" \<Pi>)
###       ("\<^const>HOL.eq" ("_position" t)
###         ("_applC" ("_position" cnf_semantics)
###           ("_cargs" ("_position" \<A>)
###             ("_applC" ("_position" cnf)
###               ("\<^const>SAT_Plan_Base.encode_problem" ("_position" \<Pi>)
###                 ("_position" t)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###     ("\<^const>SAT_Plan_Base.encode_problem"
###       ("\<^const>HOL.eq" ("_applC" ("_position" \<Pi>) ("_position" t))
###         ("_position" cnf_semantics))
###       ("_applC" ("_position" \<A>)
###         ("_applC" ("_position" cnf)
###           ("\<^const>SAT_Plan_Base.encode_problem" ("_position" \<Pi>)
###             ("_position" t)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###     ("\<^const>SAT_Plan_Base.encode_problem"
###       ("\<^const>HOL.eq" ("_applC" ("_position" \<Pi>) ("_position" t))
###         ("_applC" ("_position" cnf_semantics) ("_position" \<A>)))
###       ("_applC" ("_position" cnf)
###         ("\<^const>SAT_Plan_Base.encode_problem" ("_position" \<Pi>)
###           ("_position" t))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
*** Undefined fact: "calculation" (line 2193 of "$AFP/Verified_SAT_Based_AI_Planning/SAS_Plus_STRIPS.thy")
*** At command "thm" (line 2193 of "$AFP/Verified_SAT_Based_AI_Planning/SAS_Plus_STRIPS.thy")
*** Undefined fact: "assms" (line 2355 of "$AFP/Verified_SAT_Based_AI_Planning/SAS_Plus_STRIPS.thy")
*** At command "thm" (line 2355 of "$AFP/Verified_SAT_Based_AI_Planning/SAS_Plus_STRIPS.thy")
*** Undefined fact: "nb\<^sub>1\<^sub>2" (line 2373 of "$AFP/Verified_SAT_Based_AI_Planning/SAS_Plus_STRIPS.thy")
*** At command "thm" (line 2373 of "$AFP/Verified_SAT_Based_AI_Planning/SAS_Plus_STRIPS.thy")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
*** Undefined fact: "nb\<^sub>5" (line 2392 of "$AFP/Verified_SAT_Based_AI_Planning/SAS_Plus_STRIPS.thy")
*** At command "thm" (line 2392 of "$AFP/Verified_SAT_Based_AI_Planning/SAS_Plus_STRIPS.thy")
### theory "HOL-Data_Structures.RBT_Map"
### 1.542s elapsed time, 5.854s cpu time, 2.752s GC time
*** Undefined fact: "Suc.prems" (line 3293 of "$AFP/Verified_SAT_Based_AI_Planning/SAT_Plan_Base.thy")
*** At command "thm" (line 3293 of "$AFP/Verified_SAT_Based_AI_Planning/SAT_Plan_Base.thy")
"stop"
  :: "'a"
*** Undefined fact: "nb\<^sub>3" (line 3357 of "$AFP/Verified_SAT_Based_AI_Planning/SAT_Plan_Base.thy")
*** At command "thm" (line 3357 of "$AFP/Verified_SAT_Based_AI_Planning/SAT_Plan_Base.thy")
### Ambiguous input (line 3624 of "$AFP/Verified_SAT_Based_AI_Planning/SAT_Plan_Base.thy") produces 10 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###     ("\<^const>SAT_Plan_Base.encode_problem"
###       ("\<^const>HOL.iff"
###         ("_applC" ("_position" \<Pi>) ("\<^const>Groups.zero_class.zero"))
###         ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###           ("\<^const>Formulas.formula.And"
###             ("\<^const>SAT_Plan_Base.encode_initial_state"
###               ("_position" \<Pi>))
###             ("\<^const>SAT_Plan_Base.encode_goal_state"
###               ("_position" \<Pi>)))))
###       ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###     ("\<^const>SAT_Plan_Base.encode_problem"
###       ("\<^const>HOL.iff"
###         ("_applC" ("_position" \<Pi>) ("\<^const>Groups.zero_class.zero"))
###         ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###           ("\<^const>SAT_Plan_Base.encode_initial_state"
###             ("\<^const>Formulas.formula.And" ("_position" \<Pi>)
###               ("\<^const>SAT_Plan_Base.encode_goal_state"
###                 ("_position" \<Pi>))))))
###       ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###       ("\<^const>SAT_Plan_Base.encode_problem" ("_position" \<Pi>)
###         ("\<^const>Groups.zero_class.zero")))
###     ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###       ("\<^const>SAT_Plan_Base.encode_initial_state"
###         ("\<^const>Formulas.formula.And" ("_position" \<Pi>)
###           ("_applC"
###             ("\<^const>SAT_Plan_Base.encode_goal_state" ("_position" \<Pi>))
###             ("\<^const>Groups.zero_class.zero")))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###     ("\<^const>SAT_Plan_Base.encode_problem" ("_position" \<Pi>)
###       ("\<^const>HOL.iff" ("\<^const>Groups.zero_class.zero")
###         ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###           ("\<^const>SAT_Plan_Base.encode_initial_state"
###             ("\<^const>Formulas.formula.And" ("_position" \<Pi>)
###               ("_applC"
###                 ("\<^const>SAT_Plan_Base.encode_goal_state"
###                   ("_position" \<Pi>))
###                 ("\<^const>Groups.zero_class.zero")))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###     ("\<^const>SAT_Plan_Base.encode_problem"
###       ("\<^const>HOL.iff"
###         ("_applC" ("_position" \<Pi>) ("\<^const>Groups.zero_class.zero"))
###         ("_position" \<A>))
###       ("\<^const>Sema.valid"
###         ("\<^const>SAT_Plan_Base.encode_initial_state"
###           ("\<^const>Formulas.formula.And" ("_position" \<Pi>)
###             ("_applC"
###               ("\<^const>SAT_Plan_Base.encode_goal_state"
###                 ("_position" \<Pi>))
###               ("\<^const>Groups.zero_class.zero"))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###       ("\<^const>SAT_Plan_Base.encode_problem" ("_position" \<Pi>)
###         ("\<^const>Groups.zero_class.zero")))
###     ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###       ("\<^const>Formulas.formula.And"
###         ("\<^const>SAT_Plan_Base.encode_initial_state" ("_position" \<Pi>))
###         ("_applC"
###           ("\<^const>SAT_Plan_Base.encode_goal_state" ("_position" \<Pi>))
###           ("\<^const>Groups.zero_class.zero"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###     ("\<^const>SAT_Plan_Base.encode_problem" ("_position" \<Pi>)
###       ("\<^const>HOL.iff" ("\<^const>Groups.zero_class.zero")
###         ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###           ("\<^const>Formulas.formula.And"
###             ("\<^const>SAT_Plan_Base.encode_initial_state"
###               ("_position" \<Pi>))
###             ("_applC"
###               ("\<^const>SAT_Plan_Base.encode_goal_state"
###                 ("_position" \<Pi>))
###               ("\<^const>Groups.zero_class.zero"))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###     ("\<^const>SAT_Plan_Base.encode_problem"
###       ("\<^const>HOL.iff"
###         ("_applC" ("_position" \<Pi>) ("\<^const>Groups.zero_class.zero"))
###         ("_position" \<A>))
###       ("\<^const>Sema.valid"
###         ("\<^const>Formulas.formula.And"
###           ("\<^const>SAT_Plan_Base.encode_initial_state"
###             ("_position" \<Pi>))
###           ("_applC"
###             ("\<^const>SAT_Plan_Base.encode_goal_state" ("_position" \<Pi>))
###             ("\<^const>Groups.zero_class.zero")))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###     ("\<^const>Formulas.formula.And"
###       ("\<^const>SAT_Plan_Base.encode_problem" ("_position" \<Pi>)
###         ("\<^const>HOL.iff" ("\<^const>Groups.zero_class.zero")
###           ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###             ("\<^const>SAT_Plan_Base.encode_initial_state"
###               ("_position" \<Pi>)))))
###       ("_applC"
###         ("\<^const>SAT_Plan_Base.encode_goal_state" ("_position" \<Pi>))
###         ("\<^const>Groups.zero_class.zero")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###     ("\<^const>Formulas.formula.And"
###       ("\<^const>SAT_Plan_Base.encode_problem"
###         ("\<^const>HOL.iff"
###           ("_applC" ("_position" \<Pi>) ("\<^const>Groups.zero_class.zero"))
###           ("_position" \<A>))
###         ("\<^const>Sema.valid"
###           ("\<^const>SAT_Plan_Base.encode_initial_state"
###             ("_position" \<Pi>))))
###       ("_applC"
###         ("\<^const>SAT_Plan_Base.encode_goal_state" ("_position" \<Pi>))
###         ("\<^const>Groups.zero_class.zero")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
*** Undefined fact: "inj_on_f_set_l" (line 4806 of "$AFP/Verified_SAT_Based_AI_Planning/SAT_Plan_Base.thy")
*** At command "thm" (line 4806 of "$AFP/Verified_SAT_Based_AI_Planning/SAT_Plan_Base.thy")
### theory "Draft.SAT_Plan_Base"
### 3.425s elapsed time, 12.489s cpu time, 5.201s GC time
Loading theory "Draft.SAT_Plan_Extensions" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.Solve_SASP" via "Draft.SAT_Solve_SAS_Plus")
"stop"
  :: "'a"
### theory "Draft.Set2_Join_RBT"
### 2.542s elapsed time, 8.974s cpu time, 3.115s GC time
"stop"
  :: "'a"
### theory "Draft.SAT_Plan_Extensions"
### 0.155s elapsed time, 0.321s cpu time, 0.000s GC time
Loading theory "Draft.SAT_Solve_SAS_Plus" (required by "Draft.Solve_SASPMoreTemplates" via "Draft.Solve_SASP")
### theory "Draft.SAT_Solve_SAS_Plus"
### 0.280s elapsed time, 0.414s cpu time, 0.117s GC time
Loading theory "Draft.Solve_SASP" (required by "Draft.Solve_SASPMoreTemplates")
locale abs_ast_prob
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
  assumes "abs_ast_prob problem"
locale cnf_to_dimacs
  fixes h :: "nat"
    and n_ops :: "nat"
Found termination order: "{}"
Found termination order: "{}"
locale cnf_to_dimacs
  fixes h :: "nat"
    and n_ops :: "nat"
locale sat_solve_sasp
  fixes
    \<Pi> ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
    and h :: "nat"
  assumes "sat_solve_sasp \<Pi>"
locale sat_solve_sasp
  fixes
    \<Pi> ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
    and h :: "nat"
  assumes "sat_solve_sasp \<Pi>"
locale sat_solve_sasp
  fixes
    \<Pi> ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
    and h :: "nat"
  assumes "sat_solve_sasp \<Pi>"
### Missing patterns in function definition:
### !!va. disj_to_dimacs (\<^bold>\<not> (\<^bold>\<not> va)) = undefined
### !!va vb. disj_to_dimacs (\<^bold>\<not> (va \<^bold>\<and> vb)) = undefined
### !!va vb. disj_to_dimacs (\<^bold>\<not> (va \<^bold>\<or> vb)) = undefined
### (3 more)
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### Ambiguous input (line 463 of "$AFP/Verified_SAT_Based_AI_Planning/Solve_SASP.thy") produces 3 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" dimacs_to_cnf) ("_position" f))
###   ("\<^const>Formulas.BigAnd"
###     ("_applC" ("_position" map)
###       ("_cargs" ("_position" dimacs_to_disj) ("_position" f)))))
### ("\<^const>Pure.eq" ("_applC" ("_position" dimacs_to_cnf) ("_position" f))
###   ("_applC" ("\<^const>Formulas.BigAnd" ("_position" map))
###     ("_cargs" ("_position" dimacs_to_disj) ("_position" f))))
### ("\<^const>Pure.eq" ("_applC" ("_position" dimacs_to_cnf) ("_position" f))
###   ("_applC"
###     ("\<^const>Formulas.BigAnd"
###       ("_applC" ("_position" map) ("_position" dimacs_to_disj)))
###     ("_position" f)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale sat_solve_sasp
  fixes
    \<Pi> ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
    and h :: "nat"
  assumes "sat_solve_sasp \<Pi>"
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
locale Map
  fixes empty :: "'m"
    and update :: "'a => 'b => 'm => 'm"
    and delete :: "'a => 'm => 'm"
    and lookup :: "'m => 'a => 'b option"
    and invar :: "'m => bool"
  assumes "Map empty update delete lookup invar"
locale Map_by_Ordered
  fixes empty :: "'t"
    and update :: "'a => 'b => 't => 't"
    and delete :: "'a => 't => 't"
    and lookup :: "'t => 'a => 'b option"
    and inorder :: "'t => ('a * 'b) list"
    and inv :: "'t => bool"
  assumes "Map_by_Ordered empty update delete lookup inorder inv"
Found termination order: "size_list (nat o abs) <*mlex*> {}"
### Code generator: dropping subsumed code equation
### dimacs_model ?ls ?cs ==
### list_all (%c. list_ex (%l. ListMem l c) ?ls) ?cs &
### distinct (map dimacs_lit_to_var ?ls)
### Code generator: dropping subsumed code equation
### ast_problem.ast\<delta> ?problem ==
### case ?problem of (D, I, G, \<delta>) => \<delta>
### Code generator: dropping subsumed code equation
### ast_problem.astDom ?problem == case ?problem of (D, I, G, \<delta>) => D
### Code generator: dropping subsumed code equation
### ast_problem.astI ?problem == case ?problem of (D, I, G, \<delta>) => I
### Code generator: dropping subsumed code equation
### ast_problem.astG ?problem == case ?problem of (D, I, G, \<delta>) => G
See theory exports
See theory exports
### theory "Draft.Solve_SASP"
### 3.754s elapsed time, 4.045s cpu time, 0.351s GC time
Loading theory "Draft.Solve_SASPMoreTemplates"
val templateLemmas =
   [("Solve_SASP.Tree2_list_to_rbt", "Tree2.bst (list_to_rbt ?xs)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Solve_SASP.map_of_eq", "AList_Upd_Del.map_of ?xs = Map.map_of ?xs",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Solve_SASP.atoms_formula_vars", "atoms ?f = set (formula_vars ?f)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Solve_SASP.set_tree_intorder",
     "Tree2.set_tree ?t = set (Tree2.inorder ?t)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Solve_SASP.set_list_to_rbt",
     "Tree2.set_tree (list_to_rbt ?xs) = set ?xs",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Solve_SASP.inv_list_to_rbt",
     "invc (list_to_rbt ?xs) & invh (list_to_rbt ?xs)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0))),
           template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 0)))
         )),
    ("Solve_SASP.distinct_if_sorted",
     "Sorted_Less.sorted ?xs ==> distinct ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Solve_SASP.foldr_And",
     "foldr (\<^bold>\<and>) ?as (\<^bold>\<not> \<bottom>) =
      \<^bold>\<And>?as",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_hole 3), template_var 0),
         template_app (template_hole 2, template_hole 1)),
       template_app (template_hole 0, template_var 0))),
    ("Solve_SASP.find_max_append",
     "find_max (?xs @ ?ys) = max (find_max ?xs) (find_max ?ys)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Solve_SASP.find_max_works", "?x : set ?xs ==> ?x <= find_max ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_inequation
        (less_equals, template_var 1,
         template_app (template_hole 0, template_var 0)))),
    ("Solve_SASP.changing_atoms_works'",
     "?M o ?g \<Turnstile> ?phi = ?M \<Turnstile> map_formula ?g ?phi",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Solve_SASP.cnf_to_dimacs_disj",
     "is_disj ?f ==> cnf_to_dimacs ?f = [disj_to_dimacs ?f]",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)))),
    ("Solve_SASP.isdisj_disjD",
     "is_disj (?f1.0 \<^bold>\<or> ?f2.0) ==>
      is_disj ?f1.0 & is_disj ?f2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 1)),
             template_app (template_hole 2, template_var 0))
           ))),
    ("Solve_SASP.max_var",
     "?v : atoms ?f ==> ?v <= find_max (formula_vars ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_inequation
        (less_equals, template_var 1,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Solve_SASP.match_pres_submap",
     "Solve_SASP.match_pres
       (Tree2.inorder (M.tree_map_of' RBT_Set.empty ?pres)) ?s =
      (Map.map_of ?pres \<subseteq>\<^sub>m ?s)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app (template_hole 4, template_hole 3),
                 template_hole 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Solve_SASP.decode_sound",
     "decode ?M ?h ?prob = Inl ?plan ==>
      ast_problem.valid_plan ?prob ?plan",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Solve_SASP.atoms_And_append",
     "atoms \<^bold>\<And>?as1.0 @ ?as2.0 =
      atoms \<^bold>\<And>?as1.0 Un atoms \<^bold>\<And>?as2.0",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1))),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))))),
    ("Solve_SASP.cnf_And",
     "set (cnf_to_dimacs (?f1.0 \<^bold>\<and> ?f2.0)) =
      set (cnf_to_dimacs ?f1.0) Un set (cnf_to_dimacs ?f2.0)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1))),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))))),
    ("Solve_SASP.model_to_dimacs_model_append'",
     "model_to_dimacs_model ?M (?vs @ ?vs') =
      model_to_dimacs_model ?M ?vs @ model_to_dimacs_model ?M ?vs'",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Solve_SASP.model_to_dimacs_model_distinct",
     "1 < ?n_vars ==>
      distinct
       (map dimacs_lit_to_var (model_to_dimacs_model ?M [1..<?n_vars]))",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 1)],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app
                  (template_app (template_hole 0, template_hole 5),
                   template_var 1))))
           ))),
    ("Solve_SASP.match_pres_distinct",
     "distinct (map fst ?pres) ==>
      Solve_SASP.match_pres ?pres ?s =
      (Map.map_of ?pres \<subseteq>\<^sub>m ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Solve_SASP.map_of_lookup",
     "sorted1 (Tree2.inorder ?T) ==>
      Map.map_of (Tree2.inorder ?T) = lookup ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_app (template_hole 3, template_var 0)))
            )],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 3, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Solve_SASP.gtD", "?l < ?n ==> EX m. ?n = Suc m & ?l <= m",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Solve_SASP.model_to_dimacs_neg_nin",
     "?n_vars <= ?x ==>
      int ?x ~: set (model_to_dimacs_model ?M [?a..<?n_vars])",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 2)),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 3))))
               )
           ))),
    ("Solve_SASP.model_to_dimacs_model_append",
     "set (model_to_dimacs_model ?M (?vs @ ?vs')) =
      set (model_to_dimacs_model ?M ?vs) Un
      set (model_to_dimacs_model ?M ?vs')",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1))),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0))))),
    ("Solve_SASP.model_to_dimacs_pos_nin",
     "?n_vars <= ?x ==>
      - int ?x ~: set (model_to_dimacs_model ?M [?a..<?n_vars])",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 2))),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 3))))
               )
           ))),
    ("Solve_SASP.map_le_cong",
     "(!!x. ?m1.0 x = ?m2.0 x) ==>
      (?m1.0 \<subseteq>\<^sub>m ?s) = (?m2.0 \<subseteq>\<^sub>m ?s)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Solve_SASP.fold_max_ge",
     "?b <= ?a ==> ?b <= fold (%x m. if m <= x then x else m) ?ys ?a",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_app
            (template_app (template_hole 1, t_empty), template_var 0),
           template_var 1)))),
    ("Solve_SASP.upt_eqD",
     "[?a..<?b] = [?a..<?b'] ==> ?b = ?b' | ?b' <= ?a | ?b <= ?a",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 3, template_var 2),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2)),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)))
           ))),
    ("Solve_SASP.lookup_someD",
     "lookup ?T ?x = Some ?y ==>
      EX p. p : set (Tree2.inorder ?T) & p = (?x, ?y)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 8, template_var 2), template_var 1),
          template_app (template_hole 7, template_var 0))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Solve_SASP.dimacs_model_to_abs_atom",
     "[| 0 < ?x; int ?x : set ?dimacs_M;
         distinct (map dimacs_lit_to_var ?dimacs_M) |]
      ==> dimacs_model_to_abs ?dimacs_M ?M ?x",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 2)),
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)
           ))),
    ("Solve_SASP.upt_eq_Cons_conv",
     "(?x # ?xs = [?i..<?j]) = (?i < ?j & ?i = ?x & [?i + 1..<?j] = ?xs)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 6, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 3)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 1, template_var 1),
                         template_hole 0)),
                     template_var 0)),
                 template_var 2)))
           ))),
    ("Solve_SASP.one_always_in",
     "1 < ?n_vars ==>
      1 : set (model_to_dimacs_model ?M [1..<?n_vars]) |
      - 1 : set (model_to_dimacs_model ?M [1..<?n_vars])",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_app
                      (template_app (template_hole 1, template_hole 7),
                       template_var 1))))),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 0, template_hole 4)),
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_app
                    (template_app (template_hole 1, template_hole 7),
                     template_var 1)))))
           ))),
    ("Solve_SASP.is_cnf_disj",
     "[| is_cnf (?f1.0 \<^bold>\<or> ?f2.0);
         !!f. [| ?f1.0 \<^bold>\<or> ?f2.0 = f; is_disj f |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Solve_SASP.pos_in_model",
     "[| ?M ?n; 0 < ?n; ?n < ?n_vars |]
      ==> int ?n : set (model_to_dimacs_model ?M [1..<?n_vars])",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1)),
        template_inequation (less_than, template_hole 6, template_var 1),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 1)),
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 0))))
           ))),
    ("Solve_SASP.dimacs_model_to_abs_atom'",
     "[| 0 < ?x; - int ?x : set ?dimacs_M;
         distinct (map dimacs_lit_to_var ?dimacs_M) |]
      ==> ~ dimacs_model_to_abs ?dimacs_M ?M ?x",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 2))),
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_var 1))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 2)
               )
           ))),
    ("Solve_SASP.encode_sound",
     "[| ast_problem.valid_plan ?prob ?\<pi>s; length ?\<pi>s <= ?h;
         encode ?h ?prob = Inl ?cnf_formula |]
      ==> EX dimacs_M. dimacs_model dimacs_M ?cnf_formula",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_equals, template_app (template_hole 5, template_var 2),
          template_var 1),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 1), template_var 3),
          template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Solve_SASP.dimacs_model_code",
     "dimacs_model ?ls ?cs =
      (let tls = list_to_rbt ?ls
       in (ALL c:set ?cs. size (inter_rbt tls (list_to_rbt c)) ~= 0) &
          distinct (map dimacs_lit_to_var ?ls))",
     template_equation
      (template_app
        (template_app (template_hole 13, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 12,
           template_app (template_hole 11, template_var 1)),
         t_empty))),
    ("Solve_SASP.neg_in_model",
     "[| ~ ?M ?n; 0 < ?n; ?n < ?n_vars |]
      ==> - int ?n : set (model_to_dimacs_model ?M [1..<?n_vars])",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_var 2, template_var 1))
            ),
        template_inequation (less_than, template_hole 7, template_var 1),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 1))),
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 0))))
           ))),
    ("Solve_SASP.model_to_dimacs_model_complete_max_var",
     "[| ALL v:atoms ?f. 0 < v; is_cnf ?f;
         dimacs_model ?dimacs_M (cnf_to_dimacs ?f) |]
      ==> dimacs_model_to_abs ?dimacs_M (%_. False) \<Turnstile> ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)),
              t_empty)
            ),
        template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0), t_empty)),
             template_var 1)
           ))),
    ("Solve_SASP.encode_complete",
     "encode ?h ?prob = Inr ?err ==>
      ~ (ast_problem.well_formed ?prob &
         (ALL op:set (ast_problem.ast\<delta> ?prob).
             consistent_pres_op op) &
         (ALL op:set (ast_problem.ast\<delta> ?prob).
             is_standard_operator op))",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 9, template_var 2), template_var 1),
          template_app (template_hole 8, template_var 0))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 1)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_hole 3,
                           template_app (template_hole 2, template_var 1))),
                       t_empty)),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_hole 3,
                         template_app (template_hole 2, template_var 1))),
                     t_empty)))
               )
           ))),
    ("Solve_SASP.in_model",
     "[| 0 < ?n; ?n < ?n_vars |]
      ==> int ?n : set (model_to_dimacs_model ?M [1..<?n_vars]) |
          - int ?n : set (model_to_dimacs_model ?M [1..<?n_vars])",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 2),
        template_inequation (less_than, template_var 2, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 2)),
                 template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_app
                      (template_app (template_hole 2, template_hole 1),
                       template_var 1))))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 0,
                   template_app (template_hole 5, template_var 2))),
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_var 1)))))
           ))),
    ("Solve_SASP.planning_dimacs_sound_code",
     "[| ast_problem.well_formed ?prob;
         ALL \<pi>:set (ast_problem.ast\<delta> ?prob).
            is_standard_operator' \<pi> |]
      ==> let cnf_formula = SASP_to_DIMACS ?h ?prob;
              decoded_plan = decode_DIMACS_model ?dimacs_M ?h ?prob
          in dimacs_model ?dimacs_M cnf_formula -->
             ast_problem.valid_plan ?prob decoded_plan",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_hole 9,
                  template_app (template_hole 8, template_var 2))),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 2)),
             t_empty)
           ))),
    ("Solve_SASP.model_to_dimacs_model_sound_max_var",
     "[| ALL v:atoms ?f. 0 < v; is_cnf ?f; ?M \<Turnstile> ?f |]
      ==> dimacs_model
           (model_to_dimacs_model ?M [1..<find_max (formula_vars ?f) + 2])
           (cnf_to_dimacs ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app (template_hole 15, template_var 1)),
              t_empty)
            ),
        template_predicate
         (template_app (template_hole 12, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 9, template_var 0),
                 template_app
                  (template_app (template_hole 8, template_hole 7),
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_hole 5,
                         template_app (template_hole 4, template_var 1))),
                     template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_hole 1)))))),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Solve_SASP.upt_append_sing",
     "[| ?xs @ [?x] = [?a..<?n_vars]; ?a < ?n_vars |]
      ==> ?xs = [?a..<?n_vars - 1] & ?x = ?n_vars - 1 & 0 < ?n_vars",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 9, template_var 3),
            template_app
             (template_app (template_hole 8, template_var 2),
              template_hole 7)),
          template_app
           (template_app (template_hole 6, template_var 1),
            template_var 0)),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 10, template_var 3),
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_hole 2)))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_hole 2))),
               template_app
                (template_app (template_hole 5, template_hole 0),
                 template_var 0)))
           ))),
    ("Solve_SASP.changing_atoms_works",
     "[| !!x. ?P x ==> (?f o ?g) x = x; ALL x:atoms ?phi. ?P x |]
      ==> ?M \<Turnstile> ?phi = ?M o ?f \<Turnstile> map_formula ?g ?phi",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0), template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 3)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))))),
    ("Solve_SASP.model_to_dimacs_model_sound_exists",
     "[| 1 < ?n_vars; ALL v:atoms ?f. 0 < v & v < ?n_vars; is_cnf ?f;
         ?M \<Turnstile> ?f |]
      ==> EX M_dimacs. dimacs_model M_dimacs (cnf_to_dimacs ?f)",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 1)),
              t_empty)
            ),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Solve_SASP.decode_complete",
     "decode ?M ?h ?prob = Inr ?err ==>
      ~ (ast_problem.well_formed ?prob &
         (ALL op:set (ast_problem.ast\<delta> ?prob).
             consistent_pres_op op) &
         (ALL \<pi>:set (ast_problem.ast\<delta> ?prob).
             is_standard_operator \<pi>) &
         dimacs_model ?M (SASP_to_DIMACS' ?h ?prob))",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 11, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 10, template_var 0))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_var 1)),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app
                          (template_hole 5,
                           template_app (template_hole 4, template_var 1))),
                       t_empty)),
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_app
                          (template_hole 6,
                           template_app
                            (template_hole 5,
                             template_app
                              (template_hole 4, template_var 1))),
                         t_empty)),
                     template_app
                      (template_app (template_hole 1, template_var 3),
                       template_app
                        (template_app (template_hole 0, template_var 2),
                         template_var 1)))))
               )
           ))),
    ("Solve_SASP.planning_dimacs_complete_code",
     "[| ast_problem.well_formed ?prob;
         ALL \<pi>:set (ast_problem.ast\<delta> ?prob).
            is_standard_operator' \<pi>;
         ast_problem.valid_plan ?prob ?\<pi>s; length ?\<pi>s <= ?h |]
      ==> let cnf_formula = SASP_to_DIMACS ?h ?prob
          in EX dimacs_M. dimacs_model dimacs_M cnf_formula",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_hole 9,
                  template_app (template_hole 8, template_var 2))),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 2)),
             t_empty)
           ))),
    ("Solve_SASP.model_to_dimacs_model_sound",
     "[| 1 < ?n_vars; ALL v:atoms ?f. 0 < v & v < ?n_vars; is_cnf ?f;
         ?M \<Turnstile> ?f |]
      ==> dimacs_model (model_to_dimacs_model ?M [1..<?n_vars])
           (cnf_to_dimacs ?f)",
     template_implication
      ([template_inequation (less_than, template_hole 10, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)),
              t_empty)
            ),
        template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app
                  (template_app (template_hole 1, template_hole 10),
                   template_var 2))),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Solve_SASP.model_to_dimacs_model_complete",
     "[| ALL v:atoms ?f. 0 < v & v < ?n_vars; is_cnf ?f;
         distinct (map dimacs_lit_to_var ?dimacs_M);
         dimacs_model ?dimacs_M (cnf_to_dimacs ?f) |]
      ==> dimacs_model_to_abs ?dimacs_M (%_. False) \<Turnstile> ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 12, template_var 2)),
              t_empty)
            ),
        template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0), t_empty)),
             template_var 2)
           ))),
    ("Solve_SASP.model_to_dimacs_model_complete_disj",
     "[| ALL v:atoms ?f. 0 < v & v < ?n_vars; is_disj ?f;
         distinct (map dimacs_lit_to_var ?dimacs_M);
         dimacs_model ?dimacs_M (cnf_to_dimacs ?f) |]
      ==> dimacs_model_to_abs ?dimacs_M (%_. False) \<Turnstile> ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 12, template_var 2)),
              t_empty)
            ),
        template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0), t_empty)),
             template_var 2)
           ))),
    ("Solve_SASP.disj_to_dimacs_sound",
     "[| 1 < ?n_vars; ALL v:atoms ?f. 0 < v & v < ?n_vars; is_disj ?f;
         ?M \<Turnstile> ?f |]
      ==> EX l:set (model_to_dimacs_model ?M [1..<?n_vars]).
             l : set (disj_to_dimacs ?f)",
     template_implication
      ([template_inequation (less_than, template_hole 12, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 1)),
              t_empty)
            ),
        template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_app
                    (template_app (template_hole 2, template_hole 12),
                     template_var 2)))),
             t_empty)
           ))),
    ("Solve_SASP.planning_dimacs_sound_code'",
     "[| ast_problem.well_formed ?prob;
         !!op. op : set (ast_problem.ast\<delta> ?prob) ==>
               consistent_pres_op op;
         ALL \<pi>:set (ast_problem.ast\<delta> ?prob).
            is_standard_operator \<pi> |]
      ==> let cnf_formula = SASP_to_DIMACS' ?h ?prob;
              decoded_plan = decode_DIMACS_model' ?dimacs_M ?h ?prob
          in dimacs_model ?dimacs_M cnf_formula -->
             ast_problem.valid_plan ?prob decoded_plan",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 2)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_hole 11,
                  template_app (template_hole 10, template_var 2))),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 2)),
             t_empty)
           ))),
    ("Solve_SASP.int_cases2'",
     "[| ?z ~= 0; !!n. [| 0 ~= int n; ?z = int n |] ==> ?P;
         !!n. [| 0 ~= - int n; ?z = - int n |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3)),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Solve_SASP.model_to_dimacs_model_all_clauses",
     "[| 1 < ?n_vars; ALL v:atoms ?f. 0 < v & v < ?n_vars; is_cnf ?f;
         ?M \<Turnstile> ?f; ?c : set (cnf_to_dimacs ?f) |]
      ==> EX l:set (model_to_dimacs_model ?M [1..<?n_vars]). l : set ?c",
     template_implication
      ([template_inequation (less_than, template_hole 14, template_var 3),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 12, template_var 2)),
              t_empty)
            ),
        template_predicate (template_app (template_hole 9, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_app
                    (template_app (template_hole 1, template_hole 14),
                     template_var 3)))),
             t_empty)
           ))),
    ("Solve_SASP.planning_dimacs_complete_code'",
     "[| ast_problem.well_formed ?prob;
         !!op. op : set (ast_problem.ast\<delta> ?prob) ==>
               consistent_pres_op op;
         !!op. op : set (ast_problem.ast\<delta> ?prob) ==>
               is_standard_operator op;
         ast_problem.valid_plan ?prob ?\<pi>s; length ?\<pi>s <= ?h |]
      ==> let cnf_formula = SASP_to_DIMACS' ?h ?prob
          in EX dimacs_M. dimacs_model dimacs_M cnf_formula",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 2)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 2)),
             t_empty)
           ))),
    ("Solve_SASP.model_to_dimacs_model_all_vars",
     "[| ALL v:atoms ?f. 0 < v & v < ?n_vars; is_cnf ?f;
         ?M \<Turnstile> ?f |]
      ==> ALL n<?n_vars.
             0 < n -->
             int n : set (model_to_dimacs_model ?M [1..<?n_vars]) |
             - int n : set (model_to_dimacs_model ?M [1..<?n_vars])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app (template_hole 15, template_var 2)),
              t_empty)
            ),
        template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_var 2)
            )],
       template_predicate (template_app (template_hole 9, t_empty))))]:
   (string * thm * template) list
### theory "Draft.Solve_SASPMoreTemplates"
### 0.511s elapsed time, 0.756s cpu time, 0.119s GC time
*** Undefined fact: "inj_on_f_set_l" (line 4806 of "$AFP/Verified_SAT_Based_AI_Planning/SAT_Plan_Base.thy")
*** At command "thm" (line 4806 of "$AFP/Verified_SAT_Based_AI_Planning/SAT_Plan_Base.thy")
*** Undefined fact: "nb\<^sub>3" (line 3357 of "$AFP/Verified_SAT_Based_AI_Planning/SAT_Plan_Base.thy")
*** At command "thm" (line 3357 of "$AFP/Verified_SAT_Based_AI_Planning/SAT_Plan_Base.thy")
*** Undefined fact: "Suc.prems" (line 3293 of "$AFP/Verified_SAT_Based_AI_Planning/SAT_Plan_Base.thy")
*** At command "thm" (line 3293 of "$AFP/Verified_SAT_Based_AI_Planning/SAT_Plan_Base.thy")
*** Undefined fact: "nb\<^sub>5" (line 2392 of "$AFP/Verified_SAT_Based_AI_Planning/SAS_Plus_STRIPS.thy")
*** At command "thm" (line 2392 of "$AFP/Verified_SAT_Based_AI_Planning/SAS_Plus_STRIPS.thy")
*** Undefined fact: "nb\<^sub>1\<^sub>2" (line 2373 of "$AFP/Verified_SAT_Based_AI_Planning/SAS_Plus_STRIPS.thy")
*** At command "thm" (line 2373 of "$AFP/Verified_SAT_Based_AI_Planning/SAS_Plus_STRIPS.thy")
*** Undefined fact: "assms" (line 2355 of "$AFP/Verified_SAT_Based_AI_Planning/SAS_Plus_STRIPS.thy")
*** At command "thm" (line 2355 of "$AFP/Verified_SAT_Based_AI_Planning/SAS_Plus_STRIPS.thy")
*** Undefined fact: "calculation" (line 2193 of "$AFP/Verified_SAT_Based_AI_Planning/SAS_Plus_STRIPS.thy")
*** At command "thm" (line 2193 of "$AFP/Verified_SAT_Based_AI_Planning/SAS_Plus_STRIPS.thy")
*** Undefined fact: "Cons.prems" (line 1667 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
*** At command "thm" (line 1667 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
*** Undefined fact: "Cons.IH" (line 712 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
*** At command "thm" (line 712 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
*** Undefined fact: "f" (line 389 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")2880fComp_deffactATP.fComp_deff_arg_min_list_ffactList.f_arg_min_list_ff_inv_into_ffactHilbert_Choice.f_inv_into_ff_the_inv_into_ffactFun.f_the_inv_into_ff_the_inv_into_f_bij_betwfactFun.f_the_inv_into_f_bij_betwfact_0factFactorial.semiring_char_0_class.fact_0fact_1factFactorial.semiring_char_0_class.fact_1fact_2factFactorial.semiring_char_0_class.fact_2fact_SucfactFactorial.semiring_char_0_class.fact_Sucfact_Suc_0factFactorial.semiring_char_0_class.fact_Suc_0fact_binomialfactBinomial.fact_binomialfact_codefactFactorial.fact_codefact_dictfactFactorial.semiring_char_0_class.fact_dictfact_div_factfactFactorial.fact_div_factfact_div_fact_le_powfactFactorial.fact_div_fact_le_powfact_doublefactFactorial.fact_doublefact_dvdfactFactorial.fact_dvdfact_fact_dvd_factfactBinomial.fact_fact_dvd_factfact_ge_1factFactorial.fact_ge_1fact_ge_Suc_0_natfactFactorial.fact_ge_Suc_0_natfact_ge_selffactFactorial.fact_ge_selffact_ge_zerofactFactorial.fact_ge_zerofact_gt_zerofactFactorial.fact_gt_zerofact_in_IntsfactFactorial.fact_in_Intsfact_in_NatsfactFactorial.fact_in_Natsfact_le_powerfactFactorial.fact_le_powerfact_less_monofactFactorial.fact_less_monofact_less_mono_natfactFactorial.fact_less_mono_natfact_modfactFactorial.fact_modfact_monofactFactorial.fact_monofact_mono_natfactFactorial.fact_mono_natfact_nonzerofactFactorial.fact_nonzerofact_not_negfactFactorial.fact_not_negfact_num_eq_iffactFactorial.fact_num_eq_iffact_numeralfactFactorial.fact_numeralfact_prodfactFactorial.semiring_char_0_class.fact_prodfact_prod_SucfactFactorial.semiring_char_0_class.fact_prod_Sucfact_prod_revfactFactorial.semiring_char_0_class.fact_prod_revfact_reducefactFactorial.fact_reducefact_splitfactFactorial.semiring_char_0_class.fact_split
*** At command "thm" (line 389 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
*** Undefined fact: "Suc.IH" (line 472 of "$AFP/Verified_SAT_Based_AI_Planning/SAS_Plus_Semantics.thy")
*** At command "thm" (line 472 of "$AFP/Verified_SAT_Based_AI_Planning/SAS_Plus_Semantics.thy")
Exception- TOPLEVEL_ERROR raised
