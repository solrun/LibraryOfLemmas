Loading theory "Draft.Map_Supplement" (required by "Draft.SAT_Plan_ExtensionsMoreTemplates" via "Draft.SAT_Plan_Extensions" via "Draft.SAT_Plan_Base" via "Draft.STRIPS_Semantics")
Loading theory "Draft.List_Supplement" (required by "Draft.SAT_Plan_ExtensionsMoreTemplates" via "Draft.SAT_Plan_Extensions" via "Draft.SAT_Plan_Base" via "Draft.STRIPS_Semantics")
Loading theory "HOL-Library.Case_Converter" (required by "Draft.SAT_Plan_ExtensionsMoreTemplates" via "Draft.SAT_Plan_Extensions" via "Draft.SAT_Plan_Base" via "Draft.STRIPS_Semantics" via "Draft.STRIPS_Representation" via "Draft.State_Variable_Representation" via "Propositional_Proof_Systems.CNF" via "HOL-Library.Simps_Case_Conv")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SAT_Plan_ExtensionsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
consts
  embed :: "'a list => 'a list list"
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "Draft.Map_Supplement"
### 0.061s elapsed time, 0.279s cpu time, 0.000s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SAT_Plan_ExtensionsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "Draft.List_Supplement"
### 0.066s elapsed time, 0.297s cpu time, 0.000s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.SAT_Plan_ExtensionsMoreTemplates" via "Draft.SAT_Plan_Extensions" via "Draft.SAT_Plan_Base" via "Propositional_Proof_Systems.Formulas" via "HOL-Library.Countable")
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.140s elapsed time, 0.581s cpu time, 0.045s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SAT_Plan_ExtensionsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
signature CASE_CONVERTER =
  sig
    type elimination_strategy
    val keep_constructor_context: elimination_strategy
    val replace_by_type:
       (Proof.context -> string * string -> bool) -> elimination_strategy
    val to_case:
       Proof.context ->
         elimination_strategy ->
           (string * typ -> int) -> thm list -> thm list option
  end
structure Case_Converter: CASE_CONVERTER
### theory "HOL-Library.Case_Converter"
### 0.183s elapsed time, 0.757s cpu time, 0.045s GC time
Loading theory "HOL-Library.Simps_Case_Conv" (required by "Draft.SAT_Plan_ExtensionsMoreTemplates" via "Draft.SAT_Plan_Extensions" via "Draft.SAT_Plan_Base" via "Draft.STRIPS_Semantics" via "Draft.STRIPS_Representation" via "Draft.State_Variable_Representation" via "Propositional_Proof_Systems.CNF")
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
signature SIMPS_CASE_CONV =
  sig
    val gen_to_simps: Proof.context -> thm list -> thm -> thm list
    val to_case: Proof.context -> thm list -> thm
    val to_simps: Proof.context -> thm -> thm list
  end
structure Simps_Case_Conv: SIMPS_CASE_CONV
### theory "HOL-Library.Simps_Case_Conv"
### 0.086s elapsed time, 0.332s cpu time, 0.056s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SAT_Plan_ExtensionsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.196s elapsed time, 0.773s cpu time, 0.056s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SAT_Plan_ExtensionsMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.303s elapsed time, 1.186s cpu time, 0.101s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SAT_Plan_ExtensionsMoreTemplates" via "Draft.ExtrEqs")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.392s elapsed time, 1.537s cpu time, 0.177s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.SAT_Plan_ExtensionsMoreTemplates" via "Draft.SAT_Plan_Extensions" via "Draft.SAT_Plan_Base" via "Propositional_Proof_Systems.Formulas")
consts
  left :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
consts
  right :: "'a tree => 'a tree"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### Additional type variable(s) in locale specification "countable": 'a
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
### theory "HOL-Library.BigO"
### 0.779s elapsed time, 3.076s cpu time, 0.264s GC time
Loading theory "List-Index.List_Index" (required by "Draft.SAT_Plan_ExtensionsMoreTemplates" via "Draft.SAT_Plan_Extensions" via "Draft.SAT_Plan_Base")
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  find_index :: "('a => bool) => 'a list => nat"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.046s elapsed time, 3.975s cpu time, 0.832s GC time
Loading theory "Propositional_Proof_Systems.CNF" (required by "Draft.SAT_Plan_ExtensionsMoreTemplates" via "Draft.SAT_Plan_Extensions" via "Draft.SAT_Plan_Base" via "Draft.STRIPS_Semantics" via "Draft.STRIPS_Representation" via "Draft.State_Variable_Representation")
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
consts
  map_index' :: "nat => (nat => 'a => 'b) => 'a list => 'b list"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
consts
  insert_nth :: "nat => 'a => 'a list => 'a list"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "List-Index.List_Index"
### 0.445s elapsed time, 1.745s cpu time, 0.172s GC time
[| (?x, ?y) : ?r; (?xs, ?ys) : listrel ?r |]
==> (?x # ?xs, ?y # ?ys) : listrel ?r
[| (?x, ?y) : ?r; (?xs, ?ys) : listrel ?r |]
==> (?x # ?xs, ?y # ?ys) : listrel ?r
[| (?x, ?y) : ?r; (?xs, ?ys) : listrel ?r |]
==> (?x # ?xs, ?y # ?ys) : listrel ?r
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.360s elapsed time, 5.156s cpu time, 0.890s GC time
Loading theory "Propositional_Proof_Systems.Formulas" (required by "Draft.SAT_Plan_ExtensionsMoreTemplates" via "Draft.SAT_Plan_Extensions" via "Draft.SAT_Plan_Base")
Found termination order: "size <*mlex*> {}"
consts
  atoms_of_lit :: "'a literal => 'a"
### Ambiguous input (line 25 of "$AFP/Propositional_Proof_Systems/CNF.thy") produces 2 parse trees:
### ("_constrain"
###   ("_Finset"
###     ("\<^const>Transitive_Closure.trancl"
###       ("\<^const>Groups.zero_class.zero")))
###   ("_tapp" ("_type_name" nat) ("_type_name" clause)))
### ("_constrain"
###   ("_Finset"
###     ("\<^const>CNF.literal.Pos" ("\<^const>Groups.zero_class.zero")))
###   ("_tapp" ("_type_name" nat) ("_type_name" clause)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
"insert (0\<^sup>+) \<box>"
  :: "nat literal set"
### Ambiguous input (line 28 of "$AFP/Propositional_Proof_Systems/CNF.thy") produces 2 parse trees:
### ("_constrain"
###   ("_Finset"
###     ("\<^const>Transitive_Closure.trancl"
###       ("\<^const>Groups.zero_class.zero")))
###   ("_tapp" ("_type_name" nat) ("_type_name" clause)))
### ("_constrain"
###   ("_Finset"
###     ("\<^const>CNF.literal.Pos" ("\<^const>Groups.zero_class.zero")))
###   ("_tapp" ("_type_name" nat) ("_type_name" clause)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
"{0\<^sup>+}"
  :: "nat literal set"
### theory "Propositional_Proof_Systems.CNF"
### 0.495s elapsed time, 1.804s cpu time, 0.192s GC time
Loading theory "Propositional_Proof_Systems.CNF_Sema" (required by "Draft.SAT_Plan_ExtensionsMoreTemplates" via "Draft.SAT_Plan_Extensions" via "Draft.SAT_Plan_Base" via "Draft.CNF_Semantics_Supplement" via "Propositional_Proof_Systems.CNF_Formulas_Sema")
### Ambiguous input (line 7 of "$AFP/Propositional_Proof_Systems/CNF_Sema.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lit_semantics)
###       ("_cargs" ("_position" \<A>)
###         ("\<^const>Transitive_Closure.trancl" ("_position" k))))
###     ("_applC" ("_position" \<A>) ("_position" k))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lit_semantics)
###       ("_cargs" ("_position" \<A>)
###         ("\<^const>CNF.literal.Pos" ("_position" k))))
###     ("_applC" ("_position" \<A>) ("_position" k))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 8 of "$AFP/Propositional_Proof_Systems/CNF_Sema.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lit_semantics)
###       ("_cargs" ("_position" \<A>)
###         ("\<^const>Relation.converse" ("_position" k))))
###     ("\<^const>HOL.Not" ("_applC" ("_position" \<A>) ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lit_semantics)
###       ("_cargs" ("_position" \<A>)
###         ("\<^const>CNF.literal.Neg" ("_position" k))))
###     ("\<^const>HOL.Not" ("_applC" ("_position" \<A>) ("_position" k)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  lit_semantics :: "('a => bool) => 'a literal => bool"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Propositional_Proof_Systems.CNF_Sema"
### 0.046s elapsed time, 0.145s cpu time, 0.000s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.062s elapsed time, 7.145s cpu time, 1.157s GC time
Loading theory "Draft.Templates" (required by "Draft.SAT_Plan_ExtensionsMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.058s elapsed time, 0.139s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SAT_Plan_ExtensionsMoreTemplates")
consts
  subformulae :: "'a formula => 'a formula list"
### Ambiguous input (line 62 of "$AFP/Propositional_Proof_Systems/Formulas.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>BigAnd" ("_position" Nil))
###     ("_applC" ("\<^const>Formulas.formula.Not")
###       ("\<^const>Formulas.formula.Bot"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>BigAnd"
###     ("\<^const>HOL.eq" ("_position" Nil)
###       ("_applC" ("\<^const>Formulas.formula.Not")
###         ("\<^const>Formulas.formula.Bot")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 63 of "$AFP/Propositional_Proof_Systems/Formulas.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Formulas.formula.And"
###     ("\<^fixed>BigAnd"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs))
###         ("_position" F)))
###     ("\<^fixed>BigAnd" ("_position" Fs))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>BigAnd"
###       ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs)))
###     ("\<^const>Formulas.formula.And" ("_position" F)
###       ("\<^fixed>BigAnd" ("_position" Fs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>BigAnd"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs))
###       ("\<^const>Formulas.formula.And" ("_position" F)
###         ("\<^fixed>BigAnd" ("_position" Fs))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  BigAnd :: "'a formula list => 'a formula"
### Ambiguous input (line 69 of "$AFP/Propositional_Proof_Systems/Formulas.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>BigOr" ("_position" Nil))
###     ("\<^const>Formulas.formula.Bot")))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>BigOr"
###     ("\<^const>HOL.eq" ("_position" Nil)
###       ("\<^const>Formulas.formula.Bot"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 70 of "$AFP/Propositional_Proof_Systems/Formulas.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Formulas.formula.Or"
###     ("\<^fixed>BigOr"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs))
###         ("_position" F)))
###     ("\<^fixed>BigOr" ("_position" Fs))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>BigOr"
###       ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs)))
###     ("\<^const>Formulas.formula.Or" ("_position" F)
###       ("\<^fixed>BigOr" ("_position" Fs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>BigOr"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs))
###       ("\<^const>Formulas.formula.Or" ("_position" F)
###         ("\<^fixed>BigOr" ("_position" Fs))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  BigOr :: "'a formula list => 'a formula"
consts
  pn_atoms :: "'a formula => 'a set * 'a set"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.780s elapsed time, 1.892s cpu time, 0.742s GC time
Found termination order: "size <*mlex*> {}"
"(3, 2)"
  :: "nat * nat"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Propositional_Proof_Systems.Formulas"
### 1.877s elapsed time, 3.968s cpu time, 1.006s GC time
Loading theory "Propositional_Proof_Systems.CNF_Formulas" (required by "Draft.SAT_Plan_ExtensionsMoreTemplates" via "Draft.SAT_Plan_Extensions" via "Draft.SAT_Plan_Base" via "Draft.CNF_Semantics_Supplement" via "Propositional_Proof_Systems.CNF_Formulas_Sema")
Loading theory "Propositional_Proof_Systems.Sema" (required by "Draft.SAT_Plan_ExtensionsMoreTemplates" via "Draft.SAT_Plan_Extensions" via "Draft.SAT_Plan_Base" via "Draft.STRIPS_Semantics" via "Draft.STRIPS_Representation" via "Draft.State_Variable_Representation")
consts
  formula_semantics :: "('a => bool) => 'a formula => bool"
consts
  formula_semantics_alt :: "('a => bool) => 'a formula => bool"
consts
  formula_semantics_tt :: "('a => bool) => 'a formula => bool"
### Ambiguous input (line 72 of "$AFP/Propositional_Proof_Systems/Sema.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" A)
###     ("\<^const>Formulas.BigAnd"
###       ("\<^const>HOL.iff" ("_position" F)
###         ("_Ball" ("_position" f)
###           ("_applC" ("_position" set) ("_position" F))
###           ("\<^const>Sema.formula_semantics" ("_position" A)
###             ("_position" f)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Sema.formula_semantics" ("_position" A)
###       ("\<^const>Formulas.BigAnd" ("_position" F)))
###     ("_Ball" ("_position" f) ("_applC" ("_position" set) ("_position" F))
###       ("\<^const>Sema.formula_semantics" ("_position" A) ("_position" f)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 73 of "$AFP/Propositional_Proof_Systems/Sema.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" A)
###     ("\<^const>Formulas.BigOr"
###       ("\<^const>HOL.iff" ("_position" F)
###         ("_Bex" ("_position" f) ("_applC" ("_position" set) ("_position" F))
###           ("\<^const>Sema.formula_semantics" ("_position" A)
###             ("_position" f)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Sema.formula_semantics" ("_position" A)
###       ("\<^const>Formulas.BigOr" ("_position" F)))
###     ("_Bex" ("_position" f) ("_applC" ("_position" set) ("_position" F))
###       ("\<^const>Sema.formula_semantics" ("_position" A) ("_position" f)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Propositional_Proof_Systems.Sema"
### 0.116s elapsed time, 0.237s cpu time, 0.000s GC time
Loading theory "Draft.State_Variable_Representation" (required by "Draft.SAT_Plan_ExtensionsMoreTemplates" via "Draft.SAT_Plan_Extensions" via "Draft.SAT_Plan_Base" via "Draft.STRIPS_Semantics" via "Draft.STRIPS_Representation")
### theory "Draft.State_Variable_Representation"
### 0.192s elapsed time, 0.405s cpu time, 0.049s GC time
Loading theory "Draft.STRIPS_Representation" (required by "Draft.SAT_Plan_ExtensionsMoreTemplates" via "Draft.SAT_Plan_Extensions" via "Draft.SAT_Plan_Base" via "Draft.STRIPS_Semantics")
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
"stop"
  :: "'a"
### Ambiguous input (line 76 of "$AFP/Propositional_Proof_Systems/CNF_Formulas.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" cnf)
###       ("_applC" ("_position" Atom) ("_position" k)))
###     ("_Finset" ("_Finset" ("\<^const>CNF.literal.Pos" ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" cnf)
###       ("_applC" ("_position" Atom) ("_position" k)))
###     ("_Finset"
###       ("_Finset" ("\<^const>Transitive_Closure.trancl" ("_position" k))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 77 of "$AFP/Propositional_Proof_Systems/CNF_Formulas.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" cnf)
###       ("_applC" ("_position" Not)
###         ("_applC" ("_position" Atom) ("_position" k))))
###     ("_Finset" ("_Finset" ("\<^const>CNF.literal.Neg" ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" cnf)
###       ("_applC" ("_position" Not)
###         ("_applC" ("_position" Atom) ("_position" k))))
###     ("_Finset" ("_Finset" ("\<^const>Relation.converse" ("_position" k))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Missing patterns in function definition:
### !!va. cnf (\<^bold>\<not> (\<^bold>\<not> va)) = undefined
### !!va vb. cnf (\<^bold>\<not> (va \<^bold>\<and> vb)) = undefined
### !!va vb. cnf (\<^bold>\<not> (va \<^bold>\<or> vb)) = undefined
### (2 more)
### theory "Draft.STRIPS_Representation"
### 0.911s elapsed time, 2.273s cpu time, 1.010s GC time
Loading theory "Draft.STRIPS_Semantics" (required by "Draft.SAT_Plan_ExtensionsMoreTemplates" via "Draft.SAT_Plan_Extensions" via "Draft.SAT_Plan_Base")
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 95 of "$AFP/Propositional_Proof_Systems/CNF_Formulas.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" cnf_lists)
###       ("_applC" ("_position" Atom) ("_position" k)))
###     ("_list" ("_list" ("\<^const>CNF.literal.Pos" ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" cnf_lists)
###       ("_applC" ("_position" Atom) ("_position" k)))
###     ("_list"
###       ("_list" ("\<^const>Transitive_Closure.trancl" ("_position" k))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 96 of "$AFP/Propositional_Proof_Systems/CNF_Formulas.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" cnf_lists)
###       ("_applC" ("_position" Not)
###         ("_applC" ("_position" Atom) ("_position" k))))
###     ("_list" ("_list" ("\<^const>CNF.literal.Neg" ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" cnf_lists)
###       ("_applC" ("_position" Not)
###         ("_applC" ("_position" Atom) ("_position" k))))
###     ("_list" ("_list" ("\<^const>Relation.converse" ("_position" k))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Missing patterns in function definition:
### !!va. cnf_lists (\<^bold>\<not> (\<^bold>\<not> va)) = undefined
### !!va vb. cnf_lists (\<^bold>\<not> (va \<^bold>\<and> vb)) = undefined
### !!va vb. cnf_lists (\<^bold>\<not> (va \<^bold>\<or> vb)) = undefined
### (2 more)
Found termination order: "size <*mlex*> {}"
consts
  execute_serial_plan ::
    "('a => bool option) => 'a strips_operator list => 'a => bool option"
consts
  form_of_lit :: "'a literal => 'a formula"
### theory "Propositional_Proof_Systems.CNF_Formulas"
### 1.627s elapsed time, 3.791s cpu time, 1.118s GC time
Loading theory "Propositional_Proof_Systems.CNF_Formulas_Sema" (required by "Draft.SAT_Plan_ExtensionsMoreTemplates" via "Draft.SAT_Plan_Extensions" via "Draft.SAT_Plan_Base" via "Draft.CNF_Semantics_Supplement")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
*** Undefined fact: "f" (line 389 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")2880fComp_deffactATP.fComp_deff_arg_min_list_ffactList.f_arg_min_list_ff_inv_into_ffactHilbert_Choice.f_inv_into_ff_the_inv_into_ffactFun.f_the_inv_into_ff_the_inv_into_f_bij_betwfactFun.f_the_inv_into_f_bij_betwfact_0factFactorial.semiring_char_0_class.fact_0fact_1factFactorial.semiring_char_0_class.fact_1fact_2factFactorial.semiring_char_0_class.fact_2fact_SucfactFactorial.semiring_char_0_class.fact_Sucfact_Suc_0factFactorial.semiring_char_0_class.fact_Suc_0fact_binomialfactBinomial.fact_binomialfact_codefactFactorial.fact_codefact_dictfactFactorial.semiring_char_0_class.fact_dictfact_div_factfactFactorial.fact_div_factfact_div_fact_le_powfactFactorial.fact_div_fact_le_powfact_doublefactFactorial.fact_doublefact_dvdfactFactorial.fact_dvdfact_fact_dvd_factfactBinomial.fact_fact_dvd_factfact_ge_1factFactorial.fact_ge_1fact_ge_Suc_0_natfactFactorial.fact_ge_Suc_0_natfact_ge_selffactFactorial.fact_ge_selffact_ge_zerofactFactorial.fact_ge_zerofact_gt_zerofactFactorial.fact_gt_zerofact_in_IntsfactFactorial.fact_in_Intsfact_in_NatsfactFactorial.fact_in_Natsfact_le_powerfactFactorial.fact_le_powerfact_less_monofactFactorial.fact_less_monofact_less_mono_natfactFactorial.fact_less_mono_natfact_modfactFactorial.fact_modfact_monofactFactorial.fact_monofact_mono_natfactFactorial.fact_mono_natfact_nonzerofactFactorial.fact_nonzerofact_not_negfactFactorial.fact_not_negfact_num_eq_iffactFactorial.fact_num_eq_iffact_numeralfactFactorial.fact_numeralfact_prodfactFactorial.semiring_char_0_class.fact_prodfact_prod_SucfactFactorial.semiring_char_0_class.fact_prod_Sucfact_prod_revfactFactorial.semiring_char_0_class.fact_prod_revfact_reducefactFactorial.fact_reducefact_splitfactFactorial.semiring_char_0_class.fact_split
*** At command "thm" (line 389 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
Found termination order: "(%p. size_list length (snd p)) <*mlex*> {}"
consts
  are_all_operators_non_interfering ::
    "'variable strips_operator list => bool"
Found termination order: "(%p. size_list length (snd p)) <*mlex*> {}"
*** Undefined fact: "Cons.IH" (line 712 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
*** At command "thm" (line 712 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
### theory "Propositional_Proof_Systems.CNF_Formulas_Sema"
### 0.437s elapsed time, 1.106s cpu time, 0.155s GC time
Loading theory "Draft.CNF_Supplement" (required by "Draft.SAT_Plan_ExtensionsMoreTemplates" via "Draft.SAT_Plan_Extensions" via "Draft.SAT_Plan_Base" via "Draft.CNF_Semantics_Supplement")
*** Undefined fact: "Cons.prems" (line 1667 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
*** At command "thm" (line 1667 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
Found termination order: "{}"
[| are_all_operators_applicable I ?ops;
   are_all_operator_effects_consistent ?ops;
   are_all_operators_non_interfering ?ops |]
==> execute_parallel_operator I ?ops = execute_serial_plan I ?ops
### theory "Draft.STRIPS_Semantics"
### 0.967s elapsed time, 2.297s cpu time, 0.215s GC time
### Ambiguous input (line 16 of "$AFP/Verified_SAT_Based_AI_Planning/CNF_Supplement.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" literal_formula_to_literal)
###       ("_applC" ("_position" Atom) ("_position" a)))
###     ("\<^const>Transitive_Closure.trancl" ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" literal_formula_to_literal)
###       ("_applC" ("_position" Atom) ("_position" a)))
###     ("\<^const>CNF.literal.Pos" ("_position" a))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 17 of "$AFP/Verified_SAT_Based_AI_Planning/CNF_Supplement.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" literal_formula_to_literal)
###       ("_applC" ("\<^const>Formulas.formula.Not")
###         ("_applC" ("_position" Atom) ("_position" a))))
###     ("\<^const>Relation.converse" ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" literal_formula_to_literal)
###       ("_applC" ("\<^const>Formulas.formula.Not")
###         ("_applC" ("_position" Atom) ("_position" a))))
###     ("\<^const>CNF.literal.Neg" ("_position" a))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Missing patterns in function definition:
### literal_formula_to_literal \<bottom> = undefined
### literal_formula_to_literal (\<^bold>\<not> \<bottom>) = undefined
### !!va. literal_formula_to_literal (\<^bold>\<not> (\<^bold>\<not> va)) =
###       undefined
### (6 more)
Found termination order: "{}"
### theory "Draft.CNF_Supplement"
### 0.293s elapsed time, 0.601s cpu time, 0.099s GC time
Loading theory "Draft.CNF_Semantics_Supplement" (required by "Draft.SAT_Plan_ExtensionsMoreTemplates" via "Draft.SAT_Plan_Extensions" via "Draft.SAT_Plan_Base")
### theory "Draft.CNF_Semantics_Supplement"
### 0.038s elapsed time, 0.040s cpu time, 0.000s GC time
Loading theory "Draft.SAT_Plan_Base" (required by "Draft.SAT_Plan_ExtensionsMoreTemplates" via "Draft.SAT_Plan_Extensions")
### Ambiguous input (line 1723 of "$AFP/Verified_SAT_Based_AI_Planning/SAT_Plan_Base.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###       ("\<^const>SAT_Plan_Base.encode_problem" ("_position" \<Pi>)
###         ("_position" t)))
###     ("_applC" ("_position" cnf_semantics)
###       ("_cargs" ("_position" \<A>)
###         ("_applC" ("_position" cnf)
###           ("\<^const>SAT_Plan_Base.encode_problem" ("_position" \<Pi>)
###             ("_position" t)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###     ("\<^const>SAT_Plan_Base.encode_problem" ("_position" \<Pi>)
###       ("\<^const>HOL.eq" ("_position" t)
###         ("_applC" ("_position" cnf_semantics)
###           ("_cargs" ("_position" \<A>)
###             ("_applC" ("_position" cnf)
###               ("\<^const>SAT_Plan_Base.encode_problem" ("_position" \<Pi>)
###                 ("_position" t)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###     ("\<^const>SAT_Plan_Base.encode_problem"
###       ("\<^const>HOL.eq" ("_applC" ("_position" \<Pi>) ("_position" t))
###         ("_position" cnf_semantics))
###       ("_applC" ("_position" \<A>)
###         ("_applC" ("_position" cnf)
###           ("\<^const>SAT_Plan_Base.encode_problem" ("_position" \<Pi>)
###             ("_position" t)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###     ("\<^const>SAT_Plan_Base.encode_problem"
###       ("\<^const>HOL.eq" ("_applC" ("_position" \<Pi>) ("_position" t))
###         ("_applC" ("_position" cnf_semantics) ("_position" \<A>)))
###       ("_applC" ("_position" cnf)
###         ("\<^const>SAT_Plan_Base.encode_problem" ("_position" \<Pi>)
###           ("_position" t))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
"stop"
  :: "'a"
*** Undefined fact: "Suc.prems" (line 3293 of "$AFP/Verified_SAT_Based_AI_Planning/SAT_Plan_Base.thy")
*** At command "thm" (line 3293 of "$AFP/Verified_SAT_Based_AI_Planning/SAT_Plan_Base.thy")
*** Undefined fact: "nb\<^sub>3" (line 3357 of "$AFP/Verified_SAT_Based_AI_Planning/SAT_Plan_Base.thy")
*** At command "thm" (line 3357 of "$AFP/Verified_SAT_Based_AI_Planning/SAT_Plan_Base.thy")
### Ambiguous input (line 3624 of "$AFP/Verified_SAT_Based_AI_Planning/SAT_Plan_Base.thy") produces 10 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###     ("\<^const>SAT_Plan_Base.encode_problem"
###       ("\<^const>HOL.iff"
###         ("_applC" ("_position" \<Pi>) ("\<^const>Groups.zero_class.zero"))
###         ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###           ("\<^const>Formulas.formula.And"
###             ("\<^const>SAT_Plan_Base.encode_initial_state"
###               ("_position" \<Pi>))
###             ("\<^const>SAT_Plan_Base.encode_goal_state"
###               ("_position" \<Pi>)))))
###       ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###     ("\<^const>SAT_Plan_Base.encode_problem"
###       ("\<^const>HOL.iff"
###         ("_applC" ("_position" \<Pi>) ("\<^const>Groups.zero_class.zero"))
###         ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###           ("\<^const>SAT_Plan_Base.encode_initial_state"
###             ("\<^const>Formulas.formula.And" ("_position" \<Pi>)
###               ("\<^const>SAT_Plan_Base.encode_goal_state"
###                 ("_position" \<Pi>))))))
###       ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###       ("\<^const>SAT_Plan_Base.encode_problem" ("_position" \<Pi>)
###         ("\<^const>Groups.zero_class.zero")))
###     ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###       ("\<^const>SAT_Plan_Base.encode_initial_state"
###         ("\<^const>Formulas.formula.And" ("_position" \<Pi>)
###           ("_applC"
###             ("\<^const>SAT_Plan_Base.encode_goal_state" ("_position" \<Pi>))
###             ("\<^const>Groups.zero_class.zero")))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###     ("\<^const>SAT_Plan_Base.encode_problem" ("_position" \<Pi>)
###       ("\<^const>HOL.iff" ("\<^const>Groups.zero_class.zero")
###         ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###           ("\<^const>SAT_Plan_Base.encode_initial_state"
###             ("\<^const>Formulas.formula.And" ("_position" \<Pi>)
###               ("_applC"
###                 ("\<^const>SAT_Plan_Base.encode_goal_state"
###                   ("_position" \<Pi>))
###                 ("\<^const>Groups.zero_class.zero")))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###     ("\<^const>SAT_Plan_Base.encode_problem"
###       ("\<^const>HOL.iff"
###         ("_applC" ("_position" \<Pi>) ("\<^const>Groups.zero_class.zero"))
###         ("_position" \<A>))
###       ("\<^const>Sema.valid"
###         ("\<^const>SAT_Plan_Base.encode_initial_state"
###           ("\<^const>Formulas.formula.And" ("_position" \<Pi>)
###             ("_applC"
###               ("\<^const>SAT_Plan_Base.encode_goal_state"
###                 ("_position" \<Pi>))
###               ("\<^const>Groups.zero_class.zero"))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###       ("\<^const>SAT_Plan_Base.encode_problem" ("_position" \<Pi>)
###         ("\<^const>Groups.zero_class.zero")))
###     ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###       ("\<^const>Formulas.formula.And"
###         ("\<^const>SAT_Plan_Base.encode_initial_state" ("_position" \<Pi>))
###         ("_applC"
###           ("\<^const>SAT_Plan_Base.encode_goal_state" ("_position" \<Pi>))
###           ("\<^const>Groups.zero_class.zero"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###     ("\<^const>SAT_Plan_Base.encode_problem" ("_position" \<Pi>)
###       ("\<^const>HOL.iff" ("\<^const>Groups.zero_class.zero")
###         ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###           ("\<^const>Formulas.formula.And"
###             ("\<^const>SAT_Plan_Base.encode_initial_state"
###               ("_position" \<Pi>))
###             ("_applC"
###               ("\<^const>SAT_Plan_Base.encode_goal_state"
###                 ("_position" \<Pi>))
###               ("\<^const>Groups.zero_class.zero"))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###     ("\<^const>SAT_Plan_Base.encode_problem"
###       ("\<^const>HOL.iff"
###         ("_applC" ("_position" \<Pi>) ("\<^const>Groups.zero_class.zero"))
###         ("_position" \<A>))
###       ("\<^const>Sema.valid"
###         ("\<^const>Formulas.formula.And"
###           ("\<^const>SAT_Plan_Base.encode_initial_state"
###             ("_position" \<Pi>))
###           ("_applC"
###             ("\<^const>SAT_Plan_Base.encode_goal_state" ("_position" \<Pi>))
###             ("\<^const>Groups.zero_class.zero")))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###     ("\<^const>Formulas.formula.And"
###       ("\<^const>SAT_Plan_Base.encode_problem" ("_position" \<Pi>)
###         ("\<^const>HOL.iff" ("\<^const>Groups.zero_class.zero")
###           ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###             ("\<^const>SAT_Plan_Base.encode_initial_state"
###               ("_position" \<Pi>)))))
###       ("_applC"
###         ("\<^const>SAT_Plan_Base.encode_goal_state" ("_position" \<Pi>))
###         ("\<^const>Groups.zero_class.zero")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###     ("\<^const>Formulas.formula.And"
###       ("\<^const>SAT_Plan_Base.encode_problem"
###         ("\<^const>HOL.iff"
###           ("_applC" ("_position" \<Pi>) ("\<^const>Groups.zero_class.zero"))
###           ("_position" \<A>))
###         ("\<^const>Sema.valid"
###           ("\<^const>SAT_Plan_Base.encode_initial_state"
###             ("_position" \<Pi>))))
###       ("_applC"
###         ("\<^const>SAT_Plan_Base.encode_goal_state" ("_position" \<Pi>))
###         ("\<^const>Groups.zero_class.zero")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
*** Undefined fact: "inj_on_f_set_l" (line 4806 of "$AFP/Verified_SAT_Based_AI_Planning/SAT_Plan_Base.thy")
*** At command "thm" (line 4806 of "$AFP/Verified_SAT_Based_AI_Planning/SAT_Plan_Base.thy")
### theory "Draft.SAT_Plan_Base"
### 1.467s elapsed time, 1.765s cpu time, 0.219s GC time
Loading theory "Draft.SAT_Plan_Extensions" (required by "Draft.SAT_Plan_ExtensionsMoreTemplates")
"stop"
  :: "'a"
"stop"
  :: "'a"
### theory "Draft.SAT_Plan_Extensions"
### 0.165s elapsed time, 0.243s cpu time, 0.096s GC time
Loading theory "Draft.SAT_Plan_ExtensionsMoreTemplates"
val templateLemmas =
   [("SAT_Plan_Extensions.is_cnf_encode_interfering_operator_exclusion",
     "is_cnf (encode_interfering_operator_exclusion ?\<Pi> ?t)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("SAT_Plan_Extensions.cnf_of_encode_problem_with_operator_interference_exclusion_structure",
     "cnf (\<Phi>\<^sub>I ?\<Pi>)
      <= cnf (\<Phi>\<^sub>\<forall> ?\<Pi> ?t)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 1)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SAT_Plan_Extensions.is_cnf_encode_problem_with_operator_interference_exclusion",
     "is_valid_problem_strips ?\<Pi> ==>
      is_cnf (\<Phi>\<^sub>\<forall> ?\<Pi> ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("SAT_Plan_Extensions.cnf_of_encode_problem_with_operator_interference_exclusion_structure",
     "cnf (encode_all_frame_axioms ?\<Pi> ?t)
      <= cnf (\<Phi>\<^sub>\<forall> ?\<Pi> ?t)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SAT_Plan_Extensions.cnf_of_encode_problem_with_operator_interference_exclusion_structure",
     "cnf ((\<Phi>\<^sub>G ?\<Pi>) ?t)
      <= cnf (\<Phi>\<^sub>\<forall> ?\<Pi> ?t)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SAT_Plan_Extensions.cnf_of_encode_problem_with_operator_interference_exclusion_structure",
     "cnf (encode_operators ?\<Pi> ?t)
      <= cnf (\<Phi>\<^sub>\<forall> ?\<Pi> ?t)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SAT_Plan_Extensions.cnf_of_encode_problem_with_operator_interference_exclusion_structure",
     "cnf (encode_interfering_operator_exclusion ?\<Pi> ?t)
      <= cnf (\<Phi>\<^sub>\<forall> ?\<Pi> ?t)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SAT_Plan_Extensions.encode_problem_forall_step_decoded_plan_is_serializable_ii",
     "list_all (%op. ListMem op (?\<Pi>\<^sub>\<O>))
       (concat (\<Phi>\<inverse> ?\<Pi> ?\<A> ?t))",
     template_predicate
      (
         template_app
          (template_app (template_hole 4, t_empty),
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0)))
         )),
    ("SAT_Plan_Extensions.encode_problem_with_operator_interference_exclusion_has_model_then_also_partial_encodings",
     "?\<A> \<Turnstile> \<Phi>\<^sub>\<forall> ?\<Pi> ?t ==>
      ?\<A> \<Turnstile> \<Phi>\<^sub>I ?\<Pi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 0, template_var 1))
           ))),
    ("SAT_Plan_Extensions.encode_problem_with_operator_interference_exclusion_has_model_then_also_partial_encodings",
     "?\<A> \<Turnstile> \<Phi>\<^sub>\<forall> ?\<Pi> ?t ==>
      ?\<A> \<Turnstile> encode_all_frame_axioms ?\<Pi> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("SAT_Plan_Extensions.encode_problem_with_operator_interference_exclusion_has_model_then_also_partial_encodings",
     "?\<A> \<Turnstile> \<Phi>\<^sub>\<forall> ?\<Pi> ?t ==>
      ?\<A> \<Turnstile> (\<Phi>\<^sub>G ?\<Pi>) ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("SAT_Plan_Extensions.encode_problem_with_operator_interference_exclusion_has_model_then_also_partial_encodings",
     "?\<A> \<Turnstile> \<Phi>\<^sub>\<forall> ?\<Pi> ?t ==>
      ?\<A> \<Turnstile> encode_operators ?\<Pi> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("SAT_Plan_Extensions.encode_problem_with_operator_interference_exclusion_has_model_then_also_partial_encodings",
     "?\<A> \<Turnstile> \<Phi>\<^sub>\<forall> ?\<Pi> ?t ==>
      ?\<A> \<Turnstile> encode_interfering_operator_exclusion ?\<Pi> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("SAT_Plan_Extensions.encode_problem_serializable_sound",
     "[| is_valid_problem_strips ?\<Pi>;
         ?\<A> \<Turnstile> \<Phi>\<^sub>\<forall> ?\<Pi> ?t |]
      ==> is_parallel_solution_for_problem ?\<Pi>
           (\<Phi>\<inverse> ?\<Pi> ?\<A> ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("SAT_Plan_Extensions.serializable_encoding_decoded_plan_is_serializable",
     "[| is_valid_problem_strips ?\<Pi>;
         ?\<A> \<Turnstile> \<Phi>\<^sub>\<forall> ?\<Pi> ?t |]
      ==> is_serial_solution_for_problem ?\<Pi>
           (concat (\<Phi>\<inverse> ?\<Pi> ?\<A> ?t))",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 0)))
           ))),
    ("SAT_Plan_Extensions.encode_problem_forall_step_decoded_plan_is_serializable_i",
     "[| is_valid_problem_strips ?\<Pi>;
         ?\<A> \<Turnstile> \<Phi>\<^sub>\<forall> ?\<Pi> ?t |]
      ==> ?\<Pi>\<^sub>G \<subseteq>\<^sub>m
          execute_serial_plan (?\<Pi>\<^sub>I)
           (concat (\<Phi>\<inverse> ?\<Pi> ?\<A> ?t))",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 2)),
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 1),
                   template_var 0))))
           ))),
    ("SAT_Plan_Extensions.cnf_of_encode_interfering_operator_pair_exclusion_is_i",
     "cnf (encode_interfering_operator_pair_exclusion ?\<Pi> ?k ?op\<^sub>1
            ?op\<^sub>2) =
      {{(Operator ?k (index (?\<Pi>\<^sub>\<O>) ?op\<^sub>1))\<inverse>,
        (Operator ?k (index (?\<Pi>\<^sub>\<O>) ?op\<^sub>2))\<inverse>}}",
     template_equation
      (template_app
        (template_hole 9,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 8, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 3)),
                     template_var 1)))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 2),
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app (template_hole 2, template_var 3)),
                       template_var 0)))),
               template_hole 1))),
         template_hole 0))),
    ("SAT_Plan_Extensions.encode_problem_serializable_sound",
     "[| is_valid_problem_strips ?\<Pi>;
         ?\<A> \<Turnstile> \<Phi>\<^sub>\<forall> ?\<Pi> ?t |]
      ==> ALL k<length (\<Phi>\<inverse> ?\<Pi> ?\<A> ?t).
             are_all_operators_non_interfering
              ((\<Phi>\<inverse> ?\<Pi> ?\<A> ?t) ! k)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app
               (template_app (template_hole 7, template_var 2),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("SAT_Plan_Extensions.encode_problem_with_operator_interference_exclusion_complete_i",
     "[| is_valid_problem_strips ?\<Pi>;
         is_parallel_solution_for_problem ?\<Pi> ?\<pi>;
         ALL k<length ?\<pi>.
            are_all_operators_non_interfering (?\<pi> ! k) |]
      ==> valuation_for_plan ?\<Pi> ?\<pi> \<Turnstile>
          encode_interfering_operator_exclusion ?\<Pi> (length ?\<pi>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_app (template_hole 5, template_var 0)))
           ))),
    ("SAT_Plan_Extensions.encode_problem_serializable_complete",
     "[| is_valid_problem_strips ?\<Pi>;
         is_parallel_solution_for_problem ?\<Pi> ?\<pi>;
         ALL k<length ?\<pi>.
            are_all_operators_non_interfering (?\<pi> ! k) |]
      ==> valuation_for_plan ?\<Pi> ?\<pi> \<Turnstile>
          \<Phi>\<^sub>\<forall> ?\<Pi> length ?\<pi>",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_app (template_hole 5, template_var 0)))
           ))),
    ("SAT_Plan_Extensions.encode_problem_serializable_sound_i",
     "[| is_valid_problem_strips ?\<Pi>;
         ?\<A> \<Turnstile> \<Phi>\<^sub>\<forall> ?\<Pi> ?t; ?k < ?t;
         ?ops : set (subseqs ((\<Phi>\<inverse> ?\<Pi> ?\<A> ?t) ! ?k)) |]
      ==> are_all_operators_non_interfering ?ops",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app
               (template_app (template_hole 7, template_var 4),
                template_var 2))
            ),
        template_inequation (less_than, template_var 1, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_hole 4,
                template_app
                 (template_hole 3,
                  template_app
                   (template_app
                     (template_hole 2,
                      template_app
                       (template_app
                         (template_app (template_hole 1, template_var 4),
                          template_var 3),
                        template_var 2)),
                    template_var 1))))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("SAT_Plan_Extensions.cnf_of_encode_interfering_operator_exclusion_contains_clause_if",
     "[| ?k < ?t; ?op\<^sub>1 : set (?\<Pi>\<^sub>\<O>);
         ?op\<^sub>2 : set (?\<Pi>\<^sub>\<O>);
         index (?\<Pi>\<^sub>\<O>) ?op\<^sub>1 ~=
         index (?\<Pi>\<^sub>\<O>) ?op\<^sub>2;
         are_operators_interfering ?op\<^sub>1 ?op\<^sub>2 |]
      ==> {(Operator ?k (index (?\<Pi>\<^sub>\<O>) ?op\<^sub>1))\<inverse>,
           (Operator ?k (index (?\<Pi>\<^sub>\<O>) ?op\<^sub>2))\<inverse>}
          : cnf (encode_interfering_operator_exclusion ?\<Pi> ?t)",
     template_implication
      ([template_inequation (less_than, template_var 4, template_var 3),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2),
              template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 0),
              template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 1)))
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 11, template_var 1)),
                template_var 2),
              template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 11, template_var 1)),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 4),
                       template_app
                        (template_app
                          (template_hole 8,
                           template_app (template_hole 11, template_var 1)),
                         template_var 2)))),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 4),
                         template_app
                          (template_app
                            (template_hole 8,
                             template_app
                              (template_hole 11, template_var 1)),
                           template_var 0)))),
                   template_hole 2))),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3)))
           ))),
    ("SAT_Plan_Extensions.cnf_of_encode_interfering_operator_exclusion_is",
     "cnf (encode_interfering_operator_exclusion ?\<Pi> ?t) =
      \<Union>
       (UN (op\<^sub>1,
           op\<^sub>2):{(op\<^sub>1, op\<^sub>2).
                        (op\<^sub>1, op\<^sub>2)
                        : set (?\<Pi>\<^sub>\<O>) \<times>
                          set (?\<Pi>\<^sub>\<O>) &
                        index (?\<Pi>\<^sub>\<O>) op\<^sub>1 ~=
                        index (?\<Pi>\<^sub>\<O>) op\<^sub>2 &
                        are_operators_interfering op\<^sub>1 op\<^sub>2}.
           {{{(Operator k (index (?\<Pi>\<^sub>\<O>) op\<^sub>1))\<inverse>,
              (Operator k
                (index (?\<Pi>\<^sub>\<O>) op\<^sub>2))\<inverse>}} |
            k. k : {0..<?t}})",
     template_equation
      (template_app
        (template_hole 28,
         template_app
          (template_app (template_hole 27, template_var 1),
           template_var 0)),
       template_app
        (template_hole 26,
         template_app
          (template_hole 25,
           template_app
            (template_app
              (template_hole 24, template_app (template_hole 23, t_empty)),
             template_app
              (template_hole 8,
               template_app (template_hole 7, t_empty))))))),
    ("SAT_Plan_Extensions.cnf_of_encode_interfering_operator_exclusion_is_ii",
     "set (concat
            (map (%(op\<^sub>1, op\<^sub>2).
                     map (%k. encode_interfering_operator_pair_exclusion
                               ?\<Pi> k op\<^sub>1 op\<^sub>2)
                      [0..<?t])
              (filter
                (%(op\<^sub>1, op\<^sub>2).
                    index (?\<Pi>\<^sub>\<O>) op\<^sub>1 ~=
                    index (?\<Pi>\<^sub>\<O>) op\<^sub>2 &
                    are_operators_interfering op\<^sub>1 op\<^sub>2)
                (List.product (?\<Pi>\<^sub>\<O>) (?\<Pi>\<^sub>\<O>))))) =
      (UN (op\<^sub>1,
          op\<^sub>2):{(op\<^sub>1, op\<^sub>2).
                       (op\<^sub>1, op\<^sub>2)
                       : set (?\<Pi>\<^sub>\<O>) \<times>
                         set (?\<Pi>\<^sub>\<O>) &
                       index (?\<Pi>\<^sub>\<O>) op\<^sub>1 ~=
                       index (?\<Pi>\<^sub>\<O>) op\<^sub>2 &
                       are_operators_interfering op\<^sub>1 op\<^sub>2}.
          (%k. encode_interfering_operator_pair_exclusion ?\<Pi> k
                op\<^sub>1 op\<^sub>2) `
          {0..<?t})",
     template_equation
      (template_app
        (template_hole 26,
         template_app
          (template_hole 25,
           template_app
            (template_app
              (template_hole 24, template_app (template_hole 23, t_empty)),
             template_app
              (template_app
                (template_hole 18,
                 template_app (template_hole 17, t_empty)),
               template_app
                (template_app
                  (template_hole 10,
                   template_app (template_hole 12, template_var 1)),
                 template_app (template_hole 12, template_var 1)))))),
       template_app
        (template_hole 9,
         template_app
          (template_app
            (template_hole 8, template_app (template_hole 7, t_empty)),
           template_app
            (template_hole 4, template_app (template_hole 17, t_empty)))))),
    ("SAT_Plan_Extensions.cnf_of_encode_interfering_operator_exclusion_is_iii",
     "cnf `
      set (concat
            (map (%(op\<^sub>1, op\<^sub>2).
                     map (%k. encode_interfering_operator_pair_exclusion
                               ?\<Pi> k op\<^sub>1 op\<^sub>2)
                      [0..<?t])
              (filter
                (%(op\<^sub>1, op\<^sub>2).
                    index (?\<Pi>\<^sub>\<O>) op\<^sub>1 ~=
                    index (?\<Pi>\<^sub>\<O>) op\<^sub>2 &
                    are_operators_interfering op\<^sub>1 op\<^sub>2)
                (List.product (?\<Pi>\<^sub>\<O>) (?\<Pi>\<^sub>\<O>))))) =
      (UN (op\<^sub>1,
          op\<^sub>2):{(op\<^sub>1, op\<^sub>2).
                       (op\<^sub>1, op\<^sub>2)
                       : set (?\<Pi>\<^sub>\<O>) \<times>
                         set (?\<Pi>\<^sub>\<O>) &
                       index (?\<Pi>\<^sub>\<O>) op\<^sub>1 ~=
                       index (?\<Pi>\<^sub>\<O>) op\<^sub>2 &
                       are_operators_interfering op\<^sub>1 op\<^sub>2}.
          {{{(Operator k (index (?\<Pi>\<^sub>\<O>) op\<^sub>1))\<inverse>,
             (Operator k
               (index (?\<Pi>\<^sub>\<O>) op\<^sub>2))\<inverse>}} |
           k. k : {0..<?t}})",
     template_equation
      (template_app
        (template_app (template_hole 37, template_hole 36),
         template_app
          (template_hole 35,
           template_app
            (template_hole 34,
             template_app
              (template_app
                (template_hole 33,
                 template_app (template_hole 32, t_empty)),
               template_app
                (template_app
                  (template_hole 27,
                   template_app (template_hole 26, t_empty)),
                 template_app
                  (template_app
                    (template_hole 19,
                     template_app (template_hole 21, template_var 1)),
                   template_app (template_hole 21, template_var 1))))))),
       template_app
        (template_hole 18,
         template_app
          (template_app
            (template_hole 17, template_app (template_hole 16, t_empty)),
           template_app
            (template_hole 4,
             template_app (template_hole 26, t_empty))))))]:
   (string * thm * template) list
### theory "Draft.SAT_Plan_ExtensionsMoreTemplates"
### 0.390s elapsed time, 0.522s cpu time, 0.076s GC time
*** Undefined fact: "inj_on_f_set_l" (line 4806 of "$AFP/Verified_SAT_Based_AI_Planning/SAT_Plan_Base.thy")
*** At command "thm" (line 4806 of "$AFP/Verified_SAT_Based_AI_Planning/SAT_Plan_Base.thy")
*** Undefined fact: "nb\<^sub>3" (line 3357 of "$AFP/Verified_SAT_Based_AI_Planning/SAT_Plan_Base.thy")
*** At command "thm" (line 3357 of "$AFP/Verified_SAT_Based_AI_Planning/SAT_Plan_Base.thy")
*** Undefined fact: "Suc.prems" (line 3293 of "$AFP/Verified_SAT_Based_AI_Planning/SAT_Plan_Base.thy")
*** At command "thm" (line 3293 of "$AFP/Verified_SAT_Based_AI_Planning/SAT_Plan_Base.thy")
*** Undefined fact: "Cons.prems" (line 1667 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
*** At command "thm" (line 1667 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
*** Undefined fact: "Cons.IH" (line 712 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
*** At command "thm" (line 712 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
*** Undefined fact: "f" (line 389 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")2880fComp_deffactATP.fComp_deff_arg_min_list_ffactList.f_arg_min_list_ff_inv_into_ffactHilbert_Choice.f_inv_into_ff_the_inv_into_ffactFun.f_the_inv_into_ff_the_inv_into_f_bij_betwfactFun.f_the_inv_into_f_bij_betwfact_0factFactorial.semiring_char_0_class.fact_0fact_1factFactorial.semiring_char_0_class.fact_1fact_2factFactorial.semiring_char_0_class.fact_2fact_SucfactFactorial.semiring_char_0_class.fact_Sucfact_Suc_0factFactorial.semiring_char_0_class.fact_Suc_0fact_binomialfactBinomial.fact_binomialfact_codefactFactorial.fact_codefact_dictfactFactorial.semiring_char_0_class.fact_dictfact_div_factfactFactorial.fact_div_factfact_div_fact_le_powfactFactorial.fact_div_fact_le_powfact_doublefactFactorial.fact_doublefact_dvdfactFactorial.fact_dvdfact_fact_dvd_factfactBinomial.fact_fact_dvd_factfact_ge_1factFactorial.fact_ge_1fact_ge_Suc_0_natfactFactorial.fact_ge_Suc_0_natfact_ge_selffactFactorial.fact_ge_selffact_ge_zerofactFactorial.fact_ge_zerofact_gt_zerofactFactorial.fact_gt_zerofact_in_IntsfactFactorial.fact_in_Intsfact_in_NatsfactFactorial.fact_in_Natsfact_le_powerfactFactorial.fact_le_powerfact_less_monofactFactorial.fact_less_monofact_less_mono_natfactFactorial.fact_less_mono_natfact_modfactFactorial.fact_modfact_monofactFactorial.fact_monofact_mono_natfactFactorial.fact_mono_natfact_nonzerofactFactorial.fact_nonzerofact_not_negfactFactorial.fact_not_negfact_num_eq_iffactFactorial.fact_num_eq_iffact_numeralfactFactorial.fact_numeralfact_prodfactFactorial.semiring_char_0_class.fact_prodfact_prod_SucfactFactorial.semiring_char_0_class.fact_prod_Sucfact_prod_revfactFactorial.semiring_char_0_class.fact_prod_revfact_reducefactFactorial.fact_reducefact_splitfactFactorial.semiring_char_0_class.fact_split
*** At command "thm" (line 389 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
Exception- TOPLEVEL_ERROR raised
