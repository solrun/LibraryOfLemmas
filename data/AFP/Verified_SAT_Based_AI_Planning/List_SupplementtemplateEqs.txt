   [("List_Supplement.concat_is_inverse_of_embed",
     "concat (List_Supplement.embed ?xs) = ?xs",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("List_Supplement.length_map_upt",
     "length (map ?f [?a..<?b]) = ?b - ?a",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("List_Supplement.embed_append",
     "List_Supplement.embed (?xs @ ?ys) =
      List_Supplement.embed ?xs @ List_Supplement.embed ?ys",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("List_Supplement.not_list_ex_equals_list_all_not",
     "(~ list_ex ?P ?xs) = list_all (%x. ~ ?P x) ?xs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("List_Supplement.list_ex_intersection",
     "list_ex (%v. list_ex ((=) v) ?ys) ?xs = (set ?xs Int set ?ys ~= {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, t_empty), template_var 0)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_app (template_hole 1, template_var 1)),
             template_hole 0)
           ))),
    ("List_Supplement.set_of_embed_is",
     "set (List_Supplement.embed ?xs) = {[x] |x. x : set ?xs}",
     template_equation
      (template_app
        (template_hole 9, template_app (template_hole 8, template_var 0)),
       template_app (template_hole 7, t_empty)))]
