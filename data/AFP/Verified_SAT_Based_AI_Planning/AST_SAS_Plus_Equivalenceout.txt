Loading theory "AI_Planning_Languages_Semantics.SASP_Semantics" (required by "Draft.AST_SAS_Plus_EquivalenceMoreTemplates" via "Draft.AST_SAS_Plus_Equivalence")
Loading theory "Draft.List_Supplement" (required by "Draft.AST_SAS_Plus_EquivalenceMoreTemplates" via "Draft.AST_SAS_Plus_Equivalence" via "Draft.SAS_Plus_Semantics")
Loading theory "Draft.Map_Supplement" (required by "Draft.AST_SAS_Plus_EquivalenceMoreTemplates" via "Draft.AST_SAS_Plus_Equivalence" via "Draft.SAS_Plus_Semantics")
Loading theory "HOL-Library.Case_Converter" (required by "Draft.AST_SAS_Plus_EquivalenceMoreTemplates" via "Draft.AST_SAS_Plus_Equivalence" via "Draft.SAS_Plus_Semantics" via "Draft.SAS_Plus_Representation" via "Draft.State_Variable_Representation" via "Propositional_Proof_Systems.CNF" via "HOL-Library.Simps_Case_Conv")
locale ast_problem
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
### theory "Draft.Map_Supplement"
### 0.050s elapsed time, 0.235s cpu time, 0.000s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.AST_SAS_Plus_EquivalenceMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
consts
  embed :: "'a list => 'a list list"
### theory "Draft.List_Supplement"
### 0.065s elapsed time, 0.296s cpu time, 0.000s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.AST_SAS_Plus_EquivalenceMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
locale wf_ast_problem
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
  assumes "wf_ast_problem problem"
locale ast_problem
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.116s elapsed time, 0.452s cpu time, 0.047s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.AST_SAS_Plus_EquivalenceMoreTemplates" via "Draft.AST_SAS_Plus_Equivalence" via "Draft.SAS_Plus_Semantics" via "Draft.SAS_Plus_Representation" via "Draft.State_Variable_Representation" via "Propositional_Proof_Systems.Formulas" via "HOL-Library.Countable")
signature CASE_CONVERTER =
  sig
    type elimination_strategy
    val keep_constructor_context: elimination_strategy
    val replace_by_type:
       (Proof.context -> string * string -> bool) -> elimination_strategy
    val to_case:
       Proof.context ->
         elimination_strategy ->
           (string * typ -> int) -> thm list -> thm list option
  end
structure Case_Converter: CASE_CONVERTER
### theory "HOL-Library.Case_Converter"
### 0.206s elapsed time, 0.847s cpu time, 0.047s GC time
Loading theory "HOL-Library.Simps_Case_Conv" (required by "Draft.AST_SAS_Plus_EquivalenceMoreTemplates" via "Draft.AST_SAS_Plus_Equivalence" via "Draft.SAS_Plus_Semantics" via "Draft.SAS_Plus_Representation" via "Draft.State_Variable_Representation" via "Propositional_Proof_Systems.CNF")
locale ast_problem
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
Found termination order: "size_list size <*mlex*> {}"
signature SIMPS_CASE_CONV =
  sig
    val gen_to_simps: Proof.context -> thm list -> thm -> thm list
    val to_case: Proof.context -> thm list -> thm
    val to_simps: Proof.context -> thm -> thm list
  end
structure Simps_Case_Conv: SIMPS_CASE_CONV
### theory "HOL-Library.Simps_Case_Conv"
### 0.091s elapsed time, 0.353s cpu time, 0.057s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.AST_SAS_Plus_EquivalenceMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
Found termination order:
  "(%p. size_list (size_list size) (fst (snd p))) <*mlex*> {}"
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
locale wf_ast_problem
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
  assumes "wf_ast_problem problem"
### theory "HOL-Library.Nat_Bijection"
### 0.314s elapsed time, 1.235s cpu time, 0.105s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.AST_SAS_Plus_EquivalenceMoreTemplates" via "Draft.ExtrEqs")
### theory "AI_Planning_Languages_Semantics.SASP_Semantics"
### 0.393s elapsed time, 1.579s cpu time, 0.105s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.AST_SAS_Plus_EquivalenceMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.200s elapsed time, 0.791s cpu time, 0.072s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.AST_SAS_Plus_EquivalenceMoreTemplates" via "Draft.ExtrEqs")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.433s elapsed time, 1.686s cpu time, 0.211s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.AST_SAS_Plus_EquivalenceMoreTemplates" via "Draft.AST_SAS_Plus_Equivalence" via "Draft.SAS_Plus_Semantics" via "Draft.SAS_Plus_Representation" via "Draft.State_Variable_Representation" via "Propositional_Proof_Systems.Formulas")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### Additional type variable(s) in locale specification "countable": 'a
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.892s elapsed time, 3.516s cpu time, 0.346s GC time
Loading theory "List-Index.List_Index" (required by "Draft.AST_SAS_Plus_EquivalenceMoreTemplates" via "Draft.AST_SAS_Plus_Equivalence")
consts
  find_index :: "('a => bool) => 'a list => nat"
### theory "HOL-Library.BigO"
### 1.005s elapsed time, 3.807s cpu time, 0.838s GC time
Loading theory "Propositional_Proof_Systems.CNF" (required by "Draft.AST_SAS_Plus_EquivalenceMoreTemplates" via "Draft.AST_SAS_Plus_Equivalence" via "Draft.SAS_Plus_Semantics" via "Draft.SAS_Plus_Representation" via "Draft.State_Variable_Representation")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
consts
  map_index' :: "nat => (nat => 'a => 'b) => 'a list => 'b list"
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
consts
  insert_nth :: "nat => 'a => 'a list => 'a list"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "List-Index.List_Index"
### 0.633s elapsed time, 2.323s cpu time, 0.739s GC time
[| (?x, ?y) : ?r; (?xs, ?ys) : listrel ?r |]
==> (?x # ?xs, ?y # ?ys) : listrel ?r
[| (?x, ?y) : ?r; (?xs, ?ys) : listrel ?r |]
==> (?x # ?xs, ?y # ?ys) : listrel ?r
[| (?x, ?y) : ?r; (?xs, ?ys) : listrel ?r |]
==> (?x # ?xs, ?y # ?ys) : listrel ?r
### theory "HOL-Library.Countable"
### 1.371s elapsed time, 5.207s cpu time, 0.931s GC time
Loading theory "Propositional_Proof_Systems.Formulas" (required by "Draft.AST_SAS_Plus_EquivalenceMoreTemplates" via "Draft.AST_SAS_Plus_Equivalence" via "Draft.SAS_Plus_Semantics" via "Draft.SAS_Plus_Representation" via "Draft.State_Variable_Representation")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  atoms_of_lit :: "'a literal => 'a"
### Ambiguous input (line 25 of "$AFP/Propositional_Proof_Systems/CNF.thy") produces 2 parse trees:
### ("_constrain"
###   ("_Finset"
###     ("\<^const>Transitive_Closure.trancl"
###       ("\<^const>Groups.zero_class.zero")))
###   ("_tapp" ("_type_name" nat) ("_type_name" clause)))
### ("_constrain"
###   ("_Finset"
###     ("\<^const>CNF.literal.Pos" ("\<^const>Groups.zero_class.zero")))
###   ("_tapp" ("_type_name" nat) ("_type_name" clause)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
"insert (0\<^sup>+) \<box>"
  :: "nat literal set"
### Ambiguous input (line 28 of "$AFP/Propositional_Proof_Systems/CNF.thy") produces 2 parse trees:
### ("_constrain"
###   ("_Finset"
###     ("\<^const>Transitive_Closure.trancl"
###       ("\<^const>Groups.zero_class.zero")))
###   ("_tapp" ("_type_name" nat) ("_type_name" clause)))
### ("_constrain"
###   ("_Finset"
###     ("\<^const>CNF.literal.Pos" ("\<^const>Groups.zero_class.zero")))
###   ("_tapp" ("_type_name" nat) ("_type_name" clause)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
"{0\<^sup>+}"
  :: "nat literal set"
### theory "Propositional_Proof_Systems.CNF"
### 0.498s elapsed time, 1.882s cpu time, 0.175s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.092s elapsed time, 7.139s cpu time, 1.210s GC time
Loading theory "Draft.Templates" (required by "Draft.AST_SAS_Plus_EquivalenceMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.073s elapsed time, 0.194s cpu time, 0.068s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.AST_SAS_Plus_EquivalenceMoreTemplates")
consts
  subformulae :: "'a formula => 'a formula list"
### Ambiguous input (line 62 of "$AFP/Propositional_Proof_Systems/Formulas.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>BigAnd" ("_position" Nil))
###     ("_applC" ("\<^const>Formulas.formula.Not")
###       ("\<^const>Formulas.formula.Bot"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>BigAnd"
###     ("\<^const>HOL.eq" ("_position" Nil)
###       ("_applC" ("\<^const>Formulas.formula.Not")
###         ("\<^const>Formulas.formula.Bot")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 63 of "$AFP/Propositional_Proof_Systems/Formulas.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Formulas.formula.And"
###     ("\<^fixed>BigAnd"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs))
###         ("_position" F)))
###     ("\<^fixed>BigAnd" ("_position" Fs))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>BigAnd"
###       ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs)))
###     ("\<^const>Formulas.formula.And" ("_position" F)
###       ("\<^fixed>BigAnd" ("_position" Fs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>BigAnd"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs))
###       ("\<^const>Formulas.formula.And" ("_position" F)
###         ("\<^fixed>BigAnd" ("_position" Fs))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  BigAnd :: "'a formula list => 'a formula"
### Ambiguous input (line 69 of "$AFP/Propositional_Proof_Systems/Formulas.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>BigOr" ("_position" Nil))
###     ("\<^const>Formulas.formula.Bot")))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>BigOr"
###     ("\<^const>HOL.eq" ("_position" Nil)
###       ("\<^const>Formulas.formula.Bot"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 70 of "$AFP/Propositional_Proof_Systems/Formulas.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Formulas.formula.Or"
###     ("\<^fixed>BigOr"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs))
###         ("_position" F)))
###     ("\<^fixed>BigOr" ("_position" Fs))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>BigOr"
###       ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs)))
###     ("\<^const>Formulas.formula.Or" ("_position" F)
###       ("\<^fixed>BigOr" ("_position" Fs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>BigOr"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs))
###       ("\<^const>Formulas.formula.Or" ("_position" F)
###         ("\<^fixed>BigOr" ("_position" Fs))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  BigOr :: "'a formula list => 'a formula"
consts
  pn_atoms :: "'a formula => 'a set * 'a set"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.775s elapsed time, 1.891s cpu time, 0.750s GC time
Found termination order: "size <*mlex*> {}"
"(3, 2)"
  :: "nat * nat"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Propositional_Proof_Systems.Formulas"
### 1.853s elapsed time, 3.855s cpu time, 0.993s GC time
Loading theory "Propositional_Proof_Systems.Sema" (required by "Draft.AST_SAS_Plus_EquivalenceMoreTemplates" via "Draft.AST_SAS_Plus_Equivalence" via "Draft.SAS_Plus_Semantics" via "Draft.SAS_Plus_Representation" via "Draft.State_Variable_Representation")
consts
  formula_semantics :: "('a => bool) => 'a formula => bool"
consts
  formula_semantics_alt :: "('a => bool) => 'a formula => bool"
consts
  formula_semantics_tt :: "('a => bool) => 'a formula => bool"
### Ambiguous input (line 72 of "$AFP/Propositional_Proof_Systems/Sema.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" A)
###     ("\<^const>Formulas.BigAnd"
###       ("\<^const>HOL.iff" ("_position" F)
###         ("_Ball" ("_position" f)
###           ("_applC" ("_position" set) ("_position" F))
###           ("\<^const>Sema.formula_semantics" ("_position" A)
###             ("_position" f)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Sema.formula_semantics" ("_position" A)
###       ("\<^const>Formulas.BigAnd" ("_position" F)))
###     ("_Ball" ("_position" f) ("_applC" ("_position" set) ("_position" F))
###       ("\<^const>Sema.formula_semantics" ("_position" A) ("_position" f)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 73 of "$AFP/Propositional_Proof_Systems/Sema.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" A)
###     ("\<^const>Formulas.BigOr"
###       ("\<^const>HOL.iff" ("_position" F)
###         ("_Bex" ("_position" f) ("_applC" ("_position" set) ("_position" F))
###           ("\<^const>Sema.formula_semantics" ("_position" A)
###             ("_position" f)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Sema.formula_semantics" ("_position" A)
###       ("\<^const>Formulas.BigOr" ("_position" F)))
###     ("_Bex" ("_position" f) ("_applC" ("_position" set) ("_position" F))
###       ("\<^const>Sema.formula_semantics" ("_position" A) ("_position" f)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Propositional_Proof_Systems.Sema"
### 0.099s elapsed time, 0.105s cpu time, 0.000s GC time
Loading theory "Draft.State_Variable_Representation" (required by "Draft.AST_SAS_Plus_EquivalenceMoreTemplates" via "Draft.AST_SAS_Plus_Equivalence" via "Draft.SAS_Plus_Semantics" via "Draft.SAS_Plus_Representation")
### theory "Draft.State_Variable_Representation"
### 0.175s elapsed time, 0.175s cpu time, 0.000s GC time
Loading theory "Draft.SAS_Plus_Representation" (required by "Draft.AST_SAS_Plus_EquivalenceMoreTemplates" via "Draft.AST_SAS_Plus_Equivalence" via "Draft.SAS_Plus_Semantics")
### theory "Draft.SAS_Plus_Representation"
### 0.644s elapsed time, 0.707s cpu time, 0.087s GC time
Loading theory "Draft.SAS_Plus_Semantics" (required by "Draft.AST_SAS_Plus_EquivalenceMoreTemplates" via "Draft.AST_SAS_Plus_Equivalence")
consts
  execute_serial_plan_sas_plus ::
    "('a => 'b option)
     => ('a, 'b) sas_plus_operator list => 'a => 'b option"
Found termination order: "(%p. size_list length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list length (snd p)) <*mlex*> {}"
[| ALL op:set ?\<psi>. are_operator_effects_consistent op op;
   ?G \<subseteq>\<^sub>m execute_serial_plan_sas_plus ?I ?\<psi> |]
==> ?G \<subseteq>\<^sub>m
    execute_parallel_plan_sas_plus ?I (List_Supplement.embed ?\<psi>)
*** Undefined fact: "Suc.IH" (line 472 of "$AFP/Verified_SAT_Based_AI_Planning/SAS_Plus_Semantics.thy")
*** At command "thm" (line 472 of "$AFP/Verified_SAT_Based_AI_Planning/SAS_Plus_Semantics.thy")
### theory "Draft.SAS_Plus_Semantics"
### 0.546s elapsed time, 0.627s cpu time, 0.048s GC time
Loading theory "Draft.AST_SAS_Plus_Equivalence" (required by "Draft.AST_SAS_Plus_EquivalenceMoreTemplates")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
locale ast_problem
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
locale ast_problem
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
locale abs_ast_prob
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
  assumes "abs_ast_prob problem"
locale ast_problem
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
locale abs_ast_prob
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
  assumes "abs_ast_prob problem"
locale abs_ast_prob
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
  assumes "abs_ast_prob problem"
locale ast_problem
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
locale abs_ast_prob
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
  assumes "abs_ast_prob problem"
locale ast_problem
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
locale abs_ast_prob
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
  assumes "abs_ast_prob problem"
locale ast_problem
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
locale abs_ast_prob
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
  assumes "abs_ast_prob problem"
locale ast_problem
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
locale abs_ast_prob
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
  assumes "abs_ast_prob problem"
locale ast_problem
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
locale abs_ast_prob
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
  assumes "abs_ast_prob problem"
locale ast_problem
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
locale abs_ast_prob
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
  assumes "abs_ast_prob problem"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale abs_ast_prob
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
  assumes "abs_ast_prob problem"
locale ast_problem
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
locale abs_ast_prob
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
  assumes "abs_ast_prob problem"
### theory "Draft.AST_SAS_Plus_Equivalence"
### 1.613s elapsed time, 1.691s cpu time, 0.107s GC time
Loading theory "Draft.AST_SAS_Plus_EquivalenceMoreTemplates"
val templateLemmas =
   [("AST_SAS_Plus_Equivalence.rem_implicit_pres_ops_init",
     "ast_problem.I (rem_implicit_pres_ops ?prob) = ast_problem.I ?prob",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("AST_SAS_Plus_Equivalence.rem_implicit_pres_ops_numVars",
     "ast_problem.numVars (rem_implicit_pres_ops ?prob) =
      ast_problem.numVars ?prob",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("AST_SAS_Plus_Equivalence.rem_implicit_pres_ops_goal",
     "ast_problem.G (rem_implicit_pres_ops ?prob) = ast_problem.G ?prob",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("AST_SAS_Plus_Equivalence.rem_implicit_pres_ops_valid_states",
     "ast_problem.valid_states (rem_implicit_pres_ops ?prob) =
      ast_problem.valid_states ?prob",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("AST_SAS_Plus_Equivalence.rem_implicit_pres_ops_astI",
     "ast_problem.astI (rem_implicit_pres_ops ?prob) =
      ast_problem.astI ?prob",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("AST_SAS_Plus_Equivalence.rem_implicit_pres_ops_astG",
     "ast_problem.astG (rem_implicit_pres_ops ?prob) =
      ast_problem.astG ?prob",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("AST_SAS_Plus_Equivalence.implicit_pres_empty",
     "implicit_pres (map rem_effect_implicit_pres ?effs) = []",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_hole 0)),
    ("AST_SAS_Plus_Equivalence.consistent_pres_op_then'",
     "consistent_pres_op ?op ==> consistent_pres_op' ?op",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("AST_SAS_Plus_Equivalence.rem_implicit_pres_ops_numVals",
     "ast_problem.numVals (rem_implicit_pres_ops ?prob) ?x =
      ast_problem.numVals ?prob ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("AST_SAS_Plus_Equivalence.rem_implicit_pres_ops_wf_partial_state",
     "ast_problem.wf_partial_state (rem_implicit_pres_ops ?prob) ?s =
      ast_problem.wf_partial_state ?prob ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("AST_SAS_Plus_Equivalence.upt_eq_Nil_conv'",
     "([] = [?i..<?j]) = (?j = 0 | ?j <= ?i)",
     template_bimplication
      (template_equation
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("AST_SAS_Plus_Equivalence.in_rem_implicit_pres_\<delta>",
     "?op : set (ast_problem.ast\<delta> ?prob) ==>
      rem_implicit_pres ?op
      : set (ast_problem.ast\<delta> (rem_implicit_pres_ops ?prob))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 1, template_var 1)),
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("AST_SAS_Plus_Equivalence.rem_implicit_pres_wf_operator",
     "[| consistent_pres_op ?op; ast_problem.wf_operator ?prob ?op |]
      ==> ast_problem.wf_operator (rem_implicit_pres_ops ?prob)
           (rem_implicit_pres ?op)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("AST_SAS_Plus_Equivalence.map_of_zip_Some",
     "?v < length ?xs ==>
      map_of (zip [0..<length ?xs] ?xs) ?v = Some (?xs ! ?v)",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_app (template_hole 7, template_var 0))),
               template_var 0)),
           template_var 1),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("AST_SAS_Plus_Equivalence.rem_implicit_pres_is_standard_operator'",
     "is_standard_operator (?n, ?p, ?es, ?c) ==>
      is_standard_operator' (rem_implicit_pres (?n, ?p, ?es, ?c))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 3),
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_app
                   (template_app (template_hole 2, template_var 1),
                    template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0)))))
           ))),
    ("AST_SAS_Plus_Equivalence.is_standard_operator_rem_implicit",
     "is_standard_operator (?n, ?p, ?vp, ?v) ==>
      is_standard_operator (rem_implicit_pres (?n, ?p, ?vp, ?v))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 3),
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_app
                   (template_app (template_hole 1, template_var 1),
                    template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0)))))
           ))),
    ("AST_SAS_Plus_Equivalence.rem_implicit_pres_ops_in\<delta>D",
     "?op : set (ast_problem.ast\<delta> (rem_implicit_pres_ops ?prob)) ==>
      EX op'.
         op' : set (ast_problem.ast\<delta> ?prob) &
         ?op = rem_implicit_pres op'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 0))))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("AST_SAS_Plus_Equivalence.pair4_eqD",
     "(?a1.0, ?a2.0, ?a3.0, ?a4.0) = (?b1.0, ?b2.0, ?b3.0, ?b4.0) ==>
      ?a3.0 = ?b3.0",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 7),
            template_app
             (template_app (template_hole 2, template_var 6),
              template_app
               (template_app (template_hole 1, template_var 5),
                template_var 4))),
          template_app
           (template_app (template_hole 3, template_var 3),
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))))],
       template_equation (template_var 5, template_var 1))),
    ("AST_SAS_Plus_Equivalence.rem_implicit_pres_ops_well_formed",
     "[| !!op. op : set (ast_problem.ast\<delta> ?prob) ==>
               consistent_pres_op op;
         ast_problem.well_formed ?prob |]
      ==> ast_problem.well_formed (rem_implicit_pres_ops ?prob)",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("AST_SAS_Plus_Equivalence.map_of_zip_map_Some",
     "?v < length ?xs ==>
      map_of (zip [0..<length ?xs] (map ?f ?xs)) ?v = Some (?f (?xs ! ?v))",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 8, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_app (template_hole 8, template_var 1))),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1))),
           template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_var 0,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)))))),
    ("AST_SAS_Plus_Equivalence.rem_implicit_pres_ops_enabled",
     "(!!op. op : set (ast_problem.ast\<delta> ?prob) ==>
             consistent_pres_op op) ==>
      ast_problem.enabled (rem_implicit_pres_ops ?prob) ?name ?s =
      ast_problem.enabled ?prob ?name ?s",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("AST_SAS_Plus_Equivalence.is_standard_operator_rem_implicit_pres_ops'",
     "[| ?op : set (ast_problem.ast\<delta> (rem_implicit_pres_ops ?prob));
         !!op. op : set (ast_problem.ast\<delta> ?prob) ==>
               is_standard_operator op |]
      ==> is_standard_operator ?op",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 4,
                template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 0))))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("AST_SAS_Plus_Equivalence.rem_implicit_pres_ops_lookup_op_None",
     "(ast_problem.lookup_operator (?vars, ?init, ?goal, ?ops) ?name =
       None) =
      (ast_problem.lookup_operator
        (rem_implicit_pres_ops (?vars, ?init, ?goal, ?ops)) ?name =
       None)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 4),
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1)))),
           template_var 0),
         template_hole 1),
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 4, template_var 4),
                 template_app
                  (template_app (template_hole 3, template_var 3),
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 1))))),
           template_var 0),
         template_hole 1))),
    ("AST_SAS_Plus_Equivalence.subsuming_states_append",
     "distinct (map fst (?xs @ ?ys)) ==>
      (map_of (?xs @ ?ys) \<subseteq>\<^sub>m ?s) =
      (map_of ?ys \<subseteq>\<^sub>m ?s &
       map_of ?xs \<subseteq>\<^sub>m ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_var 0)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_var 0))))),
    ("AST_SAS_Plus_Equivalence.rem_implicit_pres_ops_enabled_1",
     "[| !!op. op : set (ast_problem.ast\<delta> ?prob) ==>
               consistent_pres_op op;
         ast_problem.enabled ?prob ?name ?s |]
      ==> ast_problem.enabled (rem_implicit_pres_ops ?prob) ?name ?s",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 1),
             template_var 0)
           ))),
    ("AST_SAS_Plus_Equivalence.rem_implicit_pres_ops_enabled_2",
     "[| !!op. op : set (ast_problem.ast\<delta> ?prob) ==>
               consistent_pres_op op;
         ast_problem.enabled (rem_implicit_pres_ops ?prob) ?name ?s |]
      ==> ast_problem.enabled ?prob ?name ?s",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 1,
                  template_app (template_hole 0, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("AST_SAS_Plus_Equivalence.consistent_map_lists",
     "[| distinct (map fst (?xs1.0 @ ?xs2.0));
         ?x : dom (map_of ?xs1.0) Int dom (map_of ?xs2.0) |]
      ==> map_of ?xs1.0 ?x = map_of ?xs2.0 ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_hole 6),
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 2))),
                template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 1))))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("AST_SAS_Plus_Equivalence.map_add_comm",
     "(!!x. x : dom ?m1.0 & x : dom ?m2.0 ==> ?m1.0 x = ?m2.0 x) ==>
      ?m1.0 ++ ?m2.0 = ?m2.0 ++ ?m1.0",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("AST_SAS_Plus_Equivalence.rem_implicit_pres_ops_lookup_op_Some_1'",
     "ast_problem.lookup_operator ?prob ?name = Some (?n, ?p, ?vp, ?e) ==>
      ast_problem.lookup_operator (rem_implicit_pres_ops ?prob) ?name =
      Some (rem_implicit_pres (?n, ?p, ?vp, ?e))",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 5), template_var 4),
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)))))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 1, template_var 5)),
           template_var 4),
         template_app
          (template_hole 5,
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 4, template_var 3),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0)))))))),
    ("AST_SAS_Plus_Equivalence.rem_implicit_pres_ops_execute",
     "[| !!op. op : set (ast_problem.ast\<delta> ?prob) ==>
               is_standard_operator op;
         ?s : ast_problem.valid_states ?prob |]
      ==> ast_problem.execute (rem_implicit_pres_ops ?prob) ?name ?s =
          ast_problem.execute ?prob ?name ?s",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 0),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0),
           template_var 1)))),
    ("AST_SAS_Plus_Equivalence.in_implicit_pres",
     "(?x, ?a) : set (implicit_pres ?effs) ==>
      EX epres v vp. (epres, ?x, vp, v) : set ?effs & vp = Some ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_var 2),
                  template_var 1)),
              template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 0)))
            )],
       template_predicate (template_app (template_hole 10, t_empty)))),
    ("AST_SAS_Plus_Equivalence.in_set_zip_lengthE",
     "[| (?x, ?y) : set (zip [0..<length ?xs] ?xs);
         [| ?x < length ?xs; ?xs ! ?x = ?y |] ==> ?R |]
      ==> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 3),
                  template_var 2)),
              template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_hole 4),
                      template_app (template_hole 3, template_var 1))),
                  template_var 1)))
            ),
        template_implication
         ([template_inequation
            (less_than, template_var 3,
             template_app (template_hole 3, template_var 1))],
          template_implication
           ([template_equation
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3),
               template_var 2)],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("AST_SAS_Plus_Equivalence.first_map_add_submap",
     "[| !!x. x : dom ?m1.0 & x : dom ?m2.0 ==> ?m1.0 x = ?m2.0 x;
         ?m1.0 ++ ?m2.0 \<subseteq>\<^sub>m ?x |]
      ==> ?m1.0 \<subseteq>\<^sub>m ?x",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("AST_SAS_Plus_Equivalence.subsuming_states_map_add",
     "(!!x. x : dom ?m1.0 Int dom ?m2.0 ==> ?m1.0 x = ?m2.0 x) ==>
      (?m1.0 ++ ?m2.0 \<subseteq>\<^sub>m ?s) =
      (?m1.0 \<subseteq>\<^sub>m ?s & ?m2.0 \<subseteq>\<^sub>m ?s)",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))))),
    ("AST_SAS_Plus_Equivalence.rem_implicit_pres_ops_lookup_op_Some_2'",
     "ast_problem.lookup_operator (rem_implicit_pres_ops ?prob) ?name =
      Some (?n, ?p, ?e, ?c) ==>
      EX op'.
         ast_problem.lookup_operator ?prob ?name = Some op' &
         (?n, ?p, ?e, ?c) = rem_implicit_pres op'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 5)),
            template_var 4),
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)))))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("AST_SAS_Plus_Equivalence.rem_implicit_pres_ops_lookup_op_Some_2",
     "ast_problem.lookup_operator
       (rem_implicit_pres_ops (?vars, ?init, ?goal, ?ops)) ?name =
      Some ?op ==>
      EX op'.
         ast_problem.lookup_operator (?vars, ?init, ?goal, ?ops) ?name =
         Some op' &
         ?op = rem_implicit_pres op'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 9,
              template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 5),
                  template_app
                   (template_app (template_hole 6, template_var 4),
                    template_app
                     (template_app (template_hole 5, template_var 3),
                      template_var 2))))),
            template_var 1),
          template_app (template_hole 4, template_var 0))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("AST_SAS_Plus_Equivalence.is_standard_operator_rem_implicit_pres_ops",
     "[| !!op. op : set (ast_problem.ast\<delta> (?a, ?b, ?c, ?d)) ==>
               is_standard_operator op;
         ?op
         : set (ast_problem.ast\<delta>
                 (rem_implicit_pres_ops (?a, ?b, ?c, ?d))) |]
      ==> is_standard_operator ?op",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_app (template_hole 4, template_var 4),
                      template_app
                       (template_app (template_hole 3, template_var 3),
                        template_app
                         (template_app (template_hole 2, template_var 2),
                          template_var 1)))))))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("AST_SAS_Plus_Equivalence.rem_implicit_pres_ops_is_standard_operator'",
     "[| !!op. op : set (ast_problem.ast\<delta> (?vs, ?I, ?G, ?ops)) ==>
               is_standard_operator op;
         ?\<pi>
         : set (ast_problem.ast\<delta>
                 (rem_implicit_pres_ops (?vs, ?I, ?G, ?ops))) |]
      ==> is_standard_operator' ?\<pi>",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app
               (template_hole 7,
                template_app
                 (template_hole 6,
                  template_app
                   (template_hole 1,
                    template_app
                     (template_app (template_hole 5, template_var 4),
                      template_app
                       (template_app (template_hole 4, template_var 3),
                        template_app
                         (template_app (template_hole 3, template_var 2),
                          template_var 1)))))))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("AST_SAS_Plus_Equivalence.rem_implicit_pres_ops_valid_plan",
     "[| wf_ast_problem ?prob;
         !!op. op : set (ast_problem.ast\<delta> ?prob) ==>
               consistent_pres_op op;
         !!op. op : set (ast_problem.ast\<delta> ?prob) ==>
               is_standard_operator op |]
      ==> ast_problem.valid_plan (rem_implicit_pres_ops ?prob) ?\<pi>s =
          ast_problem.valid_plan ?prob ?\<pi>s",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("AST_SAS_Plus_Equivalence.rem_implicit_pres_ops_lookup_op_Some_1",
     "ast_problem.lookup_operator (?vars, ?init, ?goal, ?ops) ?name =
      Some (?n, ?p, ?vp, ?e) ==>
      ast_problem.lookup_operator
       (rem_implicit_pres_ops (?vars, ?init, ?goal, ?ops)) ?name =
      Some (rem_implicit_pres (?n, ?p, ?vp, ?e))",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, template_var 8),
                template_app
                 (template_app (template_hole 7, template_var 7),
                  template_app
                   (template_app (template_hole 6, template_var 6),
                    template_var 5)))),
            template_var 4),
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)))))],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 8, template_var 8),
                 template_app
                  (template_app (template_hole 7, template_var 7),
                   template_app
                    (template_app (template_hole 6, template_var 6),
                     template_var 5))))),
           template_var 4),
         template_app
          (template_hole 5,
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 4, template_var 3),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0)))))))),
    ("AST_SAS_Plus_Equivalence.rem_implicit_pres_ops_path_to",
     "[| wf_ast_problem ?prob;
         !!op. op : set (ast_problem.ast\<delta> ?prob) ==>
               consistent_pres_op op;
         !!op. op : set (ast_problem.ast\<delta> ?prob) ==>
               is_standard_operator op;
         ?s : ast_problem.valid_states ?prob |]
      ==> ast_problem.path_to (rem_implicit_pres_ops ?prob) ?s ?\<pi>s ?s' =
          ast_problem.path_to ?prob ?s ?\<pi>s ?s'",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 3)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 3)),
               template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0))))]:
   (string * thm * template) list
### theory "Draft.AST_SAS_Plus_EquivalenceMoreTemplates"
### 0.375s elapsed time, 0.515s cpu time, 0.066s GC time
*** Undefined fact: "Suc.IH" (line 472 of "$AFP/Verified_SAT_Based_AI_Planning/SAS_Plus_Semantics.thy")
*** At command "thm" (line 472 of "$AFP/Verified_SAT_Based_AI_Planning/SAS_Plus_Semantics.thy")
Exception- TOPLEVEL_ERROR raised
