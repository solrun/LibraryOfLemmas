Loading theory "Draft.List_Supplement" (required by "Draft.SAT_Plan_BaseMoreTemplates" via "Draft.SAT_Plan_Base" via "Draft.STRIPS_Semantics")
Loading theory "Draft.Map_Supplement" (required by "Draft.SAT_Plan_BaseMoreTemplates" via "Draft.SAT_Plan_Base" via "Draft.STRIPS_Semantics")
Loading theory "HOL-Library.Case_Converter" (required by "Draft.SAT_Plan_BaseMoreTemplates" via "Draft.SAT_Plan_Base" via "Draft.STRIPS_Semantics" via "Draft.STRIPS_Representation" via "Draft.State_Variable_Representation" via "Propositional_Proof_Systems.CNF" via "HOL-Library.Simps_Case_Conv")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SAT_Plan_BaseMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
consts
  embed :: "'a list => 'a list list"
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "Draft.List_Supplement"
### 0.056s elapsed time, 0.252s cpu time, 0.000s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SAT_Plan_BaseMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "Draft.Map_Supplement"
### 0.062s elapsed time, 0.275s cpu time, 0.000s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.SAT_Plan_BaseMoreTemplates" via "Draft.SAT_Plan_Base" via "Propositional_Proof_Systems.Formulas" via "HOL-Library.Countable")
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.152s elapsed time, 0.627s cpu time, 0.045s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SAT_Plan_BaseMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
signature CASE_CONVERTER =
  sig
    type elimination_strategy
    val keep_constructor_context: elimination_strategy
    val replace_by_type:
       (Proof.context -> string * string -> bool) -> elimination_strategy
    val to_case:
       Proof.context ->
         elimination_strategy ->
           (string * typ -> int) -> thm list -> thm list option
  end
structure Case_Converter: CASE_CONVERTER
### theory "HOL-Library.Case_Converter"
### 0.178s elapsed time, 0.720s cpu time, 0.045s GC time
Loading theory "HOL-Library.Simps_Case_Conv" (required by "Draft.SAT_Plan_BaseMoreTemplates" via "Draft.SAT_Plan_Base" via "Draft.STRIPS_Semantics" via "Draft.STRIPS_Representation" via "Draft.State_Variable_Representation" via "Propositional_Proof_Systems.CNF")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
signature SIMPS_CASE_CONV =
  sig
    val gen_to_simps: Proof.context -> thm list -> thm -> thm list
    val to_case: Proof.context -> thm list -> thm
    val to_simps: Proof.context -> thm -> thm list
  end
structure Simps_Case_Conv: SIMPS_CASE_CONV
### theory "HOL-Library.Simps_Case_Conv"
### 0.070s elapsed time, 0.287s cpu time, 0.000s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SAT_Plan_BaseMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.212s elapsed time, 0.836s cpu time, 0.061s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SAT_Plan_BaseMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.338s elapsed time, 1.328s cpu time, 0.106s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SAT_Plan_BaseMoreTemplates" via "Draft.ExtrEqs")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.461s elapsed time, 1.809s cpu time, 0.193s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.SAT_Plan_BaseMoreTemplates" via "Draft.SAT_Plan_Base" via "Propositional_Proof_Systems.Formulas")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### Additional type variable(s) in locale specification "countable": 'a
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
### theory "HOL-Library.BigO"
### 0.810s elapsed time, 3.192s cpu time, 0.278s GC time
Loading theory "List-Index.List_Index" (required by "Draft.SAT_Plan_BaseMoreTemplates" via "Draft.SAT_Plan_Base")
consts
  flat :: "'a list stream => 'a stream"
consts
  find_index :: "('a => bool) => 'a list => nat"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
### theory "HOL-Library.Stream"
### 1.149s elapsed time, 4.378s cpu time, 0.876s GC time
Loading theory "Propositional_Proof_Systems.CNF" (required by "Draft.SAT_Plan_BaseMoreTemplates" via "Draft.SAT_Plan_Base" via "Draft.STRIPS_Semantics" via "Draft.STRIPS_Representation" via "Draft.State_Variable_Representation")
consts
  map_index' :: "nat => (nat => 'a => 'b) => 'a list => 'b list"
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
consts
  insert_nth :: "nat => 'a => 'a list => 'a list"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "List-Index.List_Index"
### 0.631s elapsed time, 2.334s cpu time, 0.731s GC time
[| (?x, ?y) : ?r; (?xs, ?ys) : listrel ?r |]
==> (?x # ?xs, ?y # ?ys) : listrel ?r
[| (?x, ?y) : ?r; (?xs, ?ys) : listrel ?r |]
==> (?x # ?xs, ?y # ?ys) : listrel ?r
[| (?x, ?y) : ?r; (?xs, ?ys) : listrel ?r |]
==> (?x # ?xs, ?y # ?ys) : listrel ?r
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.373s elapsed time, 5.211s cpu time, 0.920s GC time
Loading theory "Propositional_Proof_Systems.Formulas" (required by "Draft.SAT_Plan_BaseMoreTemplates" via "Draft.SAT_Plan_Base")
Found termination order: "size <*mlex*> {}"
consts
  atoms_of_lit :: "'a literal => 'a"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Ambiguous input (line 25 of "$AFP/Propositional_Proof_Systems/CNF.thy") produces 2 parse trees:
### ("_constrain"
###   ("_Finset"
###     ("\<^const>Transitive_Closure.trancl"
###       ("\<^const>Groups.zero_class.zero")))
###   ("_tapp" ("_type_name" nat) ("_type_name" clause)))
### ("_constrain"
###   ("_Finset"
###     ("\<^const>CNF.literal.Pos" ("\<^const>Groups.zero_class.zero")))
###   ("_tapp" ("_type_name" nat) ("_type_name" clause)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
"insert (0\<^sup>+) \<box>"
  :: "nat literal set"
### Ambiguous input (line 28 of "$AFP/Propositional_Proof_Systems/CNF.thy") produces 2 parse trees:
### ("_constrain"
###   ("_Finset"
###     ("\<^const>Transitive_Closure.trancl"
###       ("\<^const>Groups.zero_class.zero")))
###   ("_tapp" ("_type_name" nat) ("_type_name" clause)))
### ("_constrain"
###   ("_Finset"
###     ("\<^const>CNF.literal.Pos" ("\<^const>Groups.zero_class.zero")))
###   ("_tapp" ("_type_name" nat) ("_type_name" clause)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
"{0\<^sup>+}"
  :: "nat literal set"
### theory "Propositional_Proof_Systems.CNF"
### 0.496s elapsed time, 1.763s cpu time, 0.190s GC time
Loading theory "Propositional_Proof_Systems.CNF_Sema" (required by "Draft.SAT_Plan_BaseMoreTemplates" via "Draft.SAT_Plan_Base" via "Draft.CNF_Semantics_Supplement" via "Propositional_Proof_Systems.CNF_Formulas_Sema")
### Ambiguous input (line 7 of "$AFP/Propositional_Proof_Systems/CNF_Sema.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lit_semantics)
###       ("_cargs" ("_position" \<A>)
###         ("\<^const>Transitive_Closure.trancl" ("_position" k))))
###     ("_applC" ("_position" \<A>) ("_position" k))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lit_semantics)
###       ("_cargs" ("_position" \<A>)
###         ("\<^const>CNF.literal.Pos" ("_position" k))))
###     ("_applC" ("_position" \<A>) ("_position" k))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 8 of "$AFP/Propositional_Proof_Systems/CNF_Sema.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lit_semantics)
###       ("_cargs" ("_position" \<A>)
###         ("\<^const>Relation.converse" ("_position" k))))
###     ("\<^const>HOL.Not" ("_applC" ("_position" \<A>) ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lit_semantics)
###       ("_cargs" ("_position" \<A>)
###         ("\<^const>CNF.literal.Neg" ("_position" k))))
###     ("\<^const>HOL.Not" ("_applC" ("_position" \<A>) ("_position" k)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  lit_semantics :: "('a => bool) => 'a literal => bool"
### theory "Propositional_Proof_Systems.CNF_Sema"
### 0.045s elapsed time, 0.133s cpu time, 0.000s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.184s elapsed time, 7.618s cpu time, 1.253s GC time
Loading theory "Draft.Templates" (required by "Draft.SAT_Plan_BaseMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.127s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SAT_Plan_BaseMoreTemplates")
consts
  subformulae :: "'a formula => 'a formula list"
### Ambiguous input (line 62 of "$AFP/Propositional_Proof_Systems/Formulas.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>BigAnd" ("_position" Nil))
###     ("_applC" ("\<^const>Formulas.formula.Not")
###       ("\<^const>Formulas.formula.Bot"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>BigAnd"
###     ("\<^const>HOL.eq" ("_position" Nil)
###       ("_applC" ("\<^const>Formulas.formula.Not")
###         ("\<^const>Formulas.formula.Bot")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 63 of "$AFP/Propositional_Proof_Systems/Formulas.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Formulas.formula.And"
###     ("\<^fixed>BigAnd"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs))
###         ("_position" F)))
###     ("\<^fixed>BigAnd" ("_position" Fs))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>BigAnd"
###       ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs)))
###     ("\<^const>Formulas.formula.And" ("_position" F)
###       ("\<^fixed>BigAnd" ("_position" Fs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>BigAnd"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs))
###       ("\<^const>Formulas.formula.And" ("_position" F)
###         ("\<^fixed>BigAnd" ("_position" Fs))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  BigAnd :: "'a formula list => 'a formula"
### Ambiguous input (line 69 of "$AFP/Propositional_Proof_Systems/Formulas.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>BigOr" ("_position" Nil))
###     ("\<^const>Formulas.formula.Bot")))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>BigOr"
###     ("\<^const>HOL.eq" ("_position" Nil)
###       ("\<^const>Formulas.formula.Bot"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 70 of "$AFP/Propositional_Proof_Systems/Formulas.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Formulas.formula.Or"
###     ("\<^fixed>BigOr"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs))
###         ("_position" F)))
###     ("\<^fixed>BigOr" ("_position" Fs))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>BigOr"
###       ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs)))
###     ("\<^const>Formulas.formula.Or" ("_position" F)
###       ("\<^fixed>BigOr" ("_position" Fs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>BigOr"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs))
###       ("\<^const>Formulas.formula.Or" ("_position" F)
###         ("\<^fixed>BigOr" ("_position" Fs))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  BigOr :: "'a formula list => 'a formula"
consts
  pn_atoms :: "'a formula => 'a set * 'a set"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.785s elapsed time, 1.877s cpu time, 0.693s GC time
Found termination order: "size <*mlex*> {}"
"(3, 2)"
  :: "nat * nat"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Propositional_Proof_Systems.Formulas"
### 1.873s elapsed time, 3.978s cpu time, 0.937s GC time
Loading theory "Propositional_Proof_Systems.CNF_Formulas" (required by "Draft.SAT_Plan_BaseMoreTemplates" via "Draft.SAT_Plan_Base" via "Draft.CNF_Semantics_Supplement" via "Propositional_Proof_Systems.CNF_Formulas_Sema")
Loading theory "Propositional_Proof_Systems.Sema" (required by "Draft.SAT_Plan_BaseMoreTemplates" via "Draft.SAT_Plan_Base" via "Draft.STRIPS_Semantics" via "Draft.STRIPS_Representation" via "Draft.State_Variable_Representation")
consts
  formula_semantics :: "('a => bool) => 'a formula => bool"
consts
  formula_semantics_alt :: "('a => bool) => 'a formula => bool"
consts
  formula_semantics_tt :: "('a => bool) => 'a formula => bool"
### Ambiguous input (line 72 of "$AFP/Propositional_Proof_Systems/Sema.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" A)
###     ("\<^const>Formulas.BigAnd"
###       ("\<^const>HOL.iff" ("_position" F)
###         ("_Ball" ("_position" f)
###           ("_applC" ("_position" set) ("_position" F))
###           ("\<^const>Sema.formula_semantics" ("_position" A)
###             ("_position" f)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Sema.formula_semantics" ("_position" A)
###       ("\<^const>Formulas.BigAnd" ("_position" F)))
###     ("_Ball" ("_position" f) ("_applC" ("_position" set) ("_position" F))
###       ("\<^const>Sema.formula_semantics" ("_position" A) ("_position" f)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 73 of "$AFP/Propositional_Proof_Systems/Sema.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" A)
###     ("\<^const>Formulas.BigOr"
###       ("\<^const>HOL.iff" ("_position" F)
###         ("_Bex" ("_position" f) ("_applC" ("_position" set) ("_position" F))
###           ("\<^const>Sema.formula_semantics" ("_position" A)
###             ("_position" f)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Sema.formula_semantics" ("_position" A)
###       ("\<^const>Formulas.BigOr" ("_position" F)))
###     ("_Bex" ("_position" f) ("_applC" ("_position" set) ("_position" F))
###       ("\<^const>Sema.formula_semantics" ("_position" A) ("_position" f)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Propositional_Proof_Systems.Sema"
### 0.100s elapsed time, 0.206s cpu time, 0.000s GC time
Loading theory "Draft.State_Variable_Representation" (required by "Draft.SAT_Plan_BaseMoreTemplates" via "Draft.SAT_Plan_Base" via "Draft.STRIPS_Semantics" via "Draft.STRIPS_Representation")
### theory "Draft.State_Variable_Representation"
### 0.192s elapsed time, 0.402s cpu time, 0.041s GC time
Loading theory "Draft.STRIPS_Representation" (required by "Draft.SAT_Plan_BaseMoreTemplates" via "Draft.SAT_Plan_Base" via "Draft.STRIPS_Semantics")
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
"stop"
  :: "'a"
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 76 of "$AFP/Propositional_Proof_Systems/CNF_Formulas.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" cnf)
###       ("_applC" ("_position" Atom) ("_position" k)))
###     ("_Finset" ("_Finset" ("\<^const>CNF.literal.Pos" ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" cnf)
###       ("_applC" ("_position" Atom) ("_position" k)))
###     ("_Finset"
###       ("_Finset" ("\<^const>Transitive_Closure.trancl" ("_position" k))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 77 of "$AFP/Propositional_Proof_Systems/CNF_Formulas.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" cnf)
###       ("_applC" ("_position" Not)
###         ("_applC" ("_position" Atom) ("_position" k))))
###     ("_Finset" ("_Finset" ("\<^const>CNF.literal.Neg" ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" cnf)
###       ("_applC" ("_position" Not)
###         ("_applC" ("_position" Atom) ("_position" k))))
###     ("_Finset" ("_Finset" ("\<^const>Relation.converse" ("_position" k))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Missing patterns in function definition:
### !!va. cnf (\<^bold>\<not> (\<^bold>\<not> va)) = undefined
### !!va vb. cnf (\<^bold>\<not> (va \<^bold>\<and> vb)) = undefined
### !!va vb. cnf (\<^bold>\<not> (va \<^bold>\<or> vb)) = undefined
### (2 more)
### theory "Draft.STRIPS_Representation"
### 0.905s elapsed time, 2.253s cpu time, 1.000s GC time
Loading theory "Draft.STRIPS_Semantics" (required by "Draft.SAT_Plan_BaseMoreTemplates" via "Draft.SAT_Plan_Base")
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 95 of "$AFP/Propositional_Proof_Systems/CNF_Formulas.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" cnf_lists)
###       ("_applC" ("_position" Atom) ("_position" k)))
###     ("_list" ("_list" ("\<^const>CNF.literal.Pos" ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" cnf_lists)
###       ("_applC" ("_position" Atom) ("_position" k)))
###     ("_list"
###       ("_list" ("\<^const>Transitive_Closure.trancl" ("_position" k))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 96 of "$AFP/Propositional_Proof_Systems/CNF_Formulas.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" cnf_lists)
###       ("_applC" ("_position" Not)
###         ("_applC" ("_position" Atom) ("_position" k))))
###     ("_list" ("_list" ("\<^const>CNF.literal.Neg" ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" cnf_lists)
###       ("_applC" ("_position" Not)
###         ("_applC" ("_position" Atom) ("_position" k))))
###     ("_list" ("_list" ("\<^const>Relation.converse" ("_position" k))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Missing patterns in function definition:
### !!va. cnf_lists (\<^bold>\<not> (\<^bold>\<not> va)) = undefined
### !!va vb. cnf_lists (\<^bold>\<not> (va \<^bold>\<and> vb)) = undefined
### !!va vb. cnf_lists (\<^bold>\<not> (va \<^bold>\<or> vb)) = undefined
### (2 more)
Found termination order: "size <*mlex*> {}"
consts
  form_of_lit :: "'a literal => 'a formula"
consts
  execute_serial_plan ::
    "('a => bool option) => 'a strips_operator list => 'a => bool option"
### theory "Propositional_Proof_Systems.CNF_Formulas"
### 1.609s elapsed time, 3.738s cpu time, 1.104s GC time
Loading theory "Propositional_Proof_Systems.CNF_Formulas_Sema" (required by "Draft.SAT_Plan_BaseMoreTemplates" via "Draft.SAT_Plan_Base" via "Draft.CNF_Semantics_Supplement")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
*** Undefined fact: "f" (line 389 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")2880fComp_deffactATP.fComp_deff_arg_min_list_ffactList.f_arg_min_list_ff_inv_into_ffactHilbert_Choice.f_inv_into_ff_the_inv_into_ffactFun.f_the_inv_into_ff_the_inv_into_f_bij_betwfactFun.f_the_inv_into_f_bij_betwfact_0factFactorial.semiring_char_0_class.fact_0fact_1factFactorial.semiring_char_0_class.fact_1fact_2factFactorial.semiring_char_0_class.fact_2fact_SucfactFactorial.semiring_char_0_class.fact_Sucfact_Suc_0factFactorial.semiring_char_0_class.fact_Suc_0fact_binomialfactBinomial.fact_binomialfact_codefactFactorial.fact_codefact_dictfactFactorial.semiring_char_0_class.fact_dictfact_div_factfactFactorial.fact_div_factfact_div_fact_le_powfactFactorial.fact_div_fact_le_powfact_doublefactFactorial.fact_doublefact_dvdfactFactorial.fact_dvdfact_fact_dvd_factfactBinomial.fact_fact_dvd_factfact_ge_1factFactorial.fact_ge_1fact_ge_Suc_0_natfactFactorial.fact_ge_Suc_0_natfact_ge_selffactFactorial.fact_ge_selffact_ge_zerofactFactorial.fact_ge_zerofact_gt_zerofactFactorial.fact_gt_zerofact_in_IntsfactFactorial.fact_in_Intsfact_in_NatsfactFactorial.fact_in_Natsfact_le_powerfactFactorial.fact_le_powerfact_less_monofactFactorial.fact_less_monofact_less_mono_natfactFactorial.fact_less_mono_natfact_modfactFactorial.fact_modfact_monofactFactorial.fact_monofact_mono_natfactFactorial.fact_mono_natfact_nonzerofactFactorial.fact_nonzerofact_not_negfactFactorial.fact_not_negfact_num_eq_iffactFactorial.fact_num_eq_iffact_numeralfactFactorial.fact_numeralfact_prodfactFactorial.semiring_char_0_class.fact_prodfact_prod_SucfactFactorial.semiring_char_0_class.fact_prod_Sucfact_prod_revfactFactorial.semiring_char_0_class.fact_prod_revfact_reducefactFactorial.fact_reducefact_splitfactFactorial.semiring_char_0_class.fact_split
*** At command "thm" (line 389 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
Found termination order: "(%p. size_list length (snd p)) <*mlex*> {}"
consts
  are_all_operators_non_interfering ::
    "'variable strips_operator list => bool"
Found termination order: "(%p. size_list length (snd p)) <*mlex*> {}"
*** Undefined fact: "Cons.IH" (line 712 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
*** At command "thm" (line 712 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
### theory "Propositional_Proof_Systems.CNF_Formulas_Sema"
### 0.430s elapsed time, 1.101s cpu time, 0.157s GC time
Loading theory "Draft.CNF_Supplement" (required by "Draft.SAT_Plan_BaseMoreTemplates" via "Draft.SAT_Plan_Base" via "Draft.CNF_Semantics_Supplement")
*** Undefined fact: "Cons.prems" (line 1667 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
*** At command "thm" (line 1667 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
Found termination order: "{}"
[| are_all_operators_applicable I ?ops;
   are_all_operator_effects_consistent ?ops;
   are_all_operators_non_interfering ?ops |]
==> execute_parallel_operator I ?ops = execute_serial_plan I ?ops
### theory "Draft.STRIPS_Semantics"
### 0.957s elapsed time, 2.271s cpu time, 0.220s GC time
### Ambiguous input (line 16 of "$AFP/Verified_SAT_Based_AI_Planning/CNF_Supplement.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" literal_formula_to_literal)
###       ("_applC" ("_position" Atom) ("_position" a)))
###     ("\<^const>Transitive_Closure.trancl" ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" literal_formula_to_literal)
###       ("_applC" ("_position" Atom) ("_position" a)))
###     ("\<^const>CNF.literal.Pos" ("_position" a))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 17 of "$AFP/Verified_SAT_Based_AI_Planning/CNF_Supplement.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" literal_formula_to_literal)
###       ("_applC" ("\<^const>Formulas.formula.Not")
###         ("_applC" ("_position" Atom) ("_position" a))))
###     ("\<^const>Relation.converse" ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" literal_formula_to_literal)
###       ("_applC" ("\<^const>Formulas.formula.Not")
###         ("_applC" ("_position" Atom) ("_position" a))))
###     ("\<^const>CNF.literal.Neg" ("_position" a))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Missing patterns in function definition:
### literal_formula_to_literal \<bottom> = undefined
### literal_formula_to_literal (\<^bold>\<not> \<bottom>) = undefined
### !!va. literal_formula_to_literal (\<^bold>\<not> (\<^bold>\<not> va)) =
###       undefined
### (6 more)
Found termination order: "{}"
### theory "Draft.CNF_Supplement"
### 0.292s elapsed time, 0.608s cpu time, 0.124s GC time
Loading theory "Draft.CNF_Semantics_Supplement" (required by "Draft.SAT_Plan_BaseMoreTemplates" via "Draft.SAT_Plan_Base")
### theory "Draft.CNF_Semantics_Supplement"
### 0.038s elapsed time, 0.040s cpu time, 0.000s GC time
Loading theory "Draft.SAT_Plan_Base" (required by "Draft.SAT_Plan_BaseMoreTemplates")
### Ambiguous input (line 1723 of "$AFP/Verified_SAT_Based_AI_Planning/SAT_Plan_Base.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###       ("\<^const>SAT_Plan_Base.encode_problem" ("_position" \<Pi>)
###         ("_position" t)))
###     ("_applC" ("_position" cnf_semantics)
###       ("_cargs" ("_position" \<A>)
###         ("_applC" ("_position" cnf)
###           ("\<^const>SAT_Plan_Base.encode_problem" ("_position" \<Pi>)
###             ("_position" t)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###     ("\<^const>SAT_Plan_Base.encode_problem" ("_position" \<Pi>)
###       ("\<^const>HOL.eq" ("_position" t)
###         ("_applC" ("_position" cnf_semantics)
###           ("_cargs" ("_position" \<A>)
###             ("_applC" ("_position" cnf)
###               ("\<^const>SAT_Plan_Base.encode_problem" ("_position" \<Pi>)
###                 ("_position" t)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###     ("\<^const>SAT_Plan_Base.encode_problem"
###       ("\<^const>HOL.eq" ("_applC" ("_position" \<Pi>) ("_position" t))
###         ("_position" cnf_semantics))
###       ("_applC" ("_position" \<A>)
###         ("_applC" ("_position" cnf)
###           ("\<^const>SAT_Plan_Base.encode_problem" ("_position" \<Pi>)
###             ("_position" t)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###     ("\<^const>SAT_Plan_Base.encode_problem"
###       ("\<^const>HOL.eq" ("_applC" ("_position" \<Pi>) ("_position" t))
###         ("_applC" ("_position" cnf_semantics) ("_position" \<A>)))
###       ("_applC" ("_position" cnf)
###         ("\<^const>SAT_Plan_Base.encode_problem" ("_position" \<Pi>)
###           ("_position" t))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
*** Undefined fact: "Suc.prems" (line 3293 of "$AFP/Verified_SAT_Based_AI_Planning/SAT_Plan_Base.thy")
*** At command "thm" (line 3293 of "$AFP/Verified_SAT_Based_AI_Planning/SAT_Plan_Base.thy")
"stop"
  :: "'a"
*** Undefined fact: "nb\<^sub>3" (line 3357 of "$AFP/Verified_SAT_Based_AI_Planning/SAT_Plan_Base.thy")
*** At command "thm" (line 3357 of "$AFP/Verified_SAT_Based_AI_Planning/SAT_Plan_Base.thy")
### Ambiguous input (line 3624 of "$AFP/Verified_SAT_Based_AI_Planning/SAT_Plan_Base.thy") produces 10 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###     ("\<^const>SAT_Plan_Base.encode_problem"
###       ("\<^const>HOL.iff"
###         ("_applC" ("_position" \<Pi>) ("\<^const>Groups.zero_class.zero"))
###         ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###           ("\<^const>Formulas.formula.And"
###             ("\<^const>SAT_Plan_Base.encode_initial_state"
###               ("_position" \<Pi>))
###             ("\<^const>SAT_Plan_Base.encode_goal_state"
###               ("_position" \<Pi>)))))
###       ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###     ("\<^const>SAT_Plan_Base.encode_problem"
###       ("\<^const>HOL.iff"
###         ("_applC" ("_position" \<Pi>) ("\<^const>Groups.zero_class.zero"))
###         ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###           ("\<^const>SAT_Plan_Base.encode_initial_state"
###             ("\<^const>Formulas.formula.And" ("_position" \<Pi>)
###               ("\<^const>SAT_Plan_Base.encode_goal_state"
###                 ("_position" \<Pi>))))))
###       ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###       ("\<^const>SAT_Plan_Base.encode_problem" ("_position" \<Pi>)
###         ("\<^const>Groups.zero_class.zero")))
###     ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###       ("\<^const>SAT_Plan_Base.encode_initial_state"
###         ("\<^const>Formulas.formula.And" ("_position" \<Pi>)
###           ("_applC"
###             ("\<^const>SAT_Plan_Base.encode_goal_state" ("_position" \<Pi>))
###             ("\<^const>Groups.zero_class.zero")))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###     ("\<^const>SAT_Plan_Base.encode_problem" ("_position" \<Pi>)
###       ("\<^const>HOL.iff" ("\<^const>Groups.zero_class.zero")
###         ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###           ("\<^const>SAT_Plan_Base.encode_initial_state"
###             ("\<^const>Formulas.formula.And" ("_position" \<Pi>)
###               ("_applC"
###                 ("\<^const>SAT_Plan_Base.encode_goal_state"
###                   ("_position" \<Pi>))
###                 ("\<^const>Groups.zero_class.zero")))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###     ("\<^const>SAT_Plan_Base.encode_problem"
###       ("\<^const>HOL.iff"
###         ("_applC" ("_position" \<Pi>) ("\<^const>Groups.zero_class.zero"))
###         ("_position" \<A>))
###       ("\<^const>Sema.valid"
###         ("\<^const>SAT_Plan_Base.encode_initial_state"
###           ("\<^const>Formulas.formula.And" ("_position" \<Pi>)
###             ("_applC"
###               ("\<^const>SAT_Plan_Base.encode_goal_state"
###                 ("_position" \<Pi>))
###               ("\<^const>Groups.zero_class.zero"))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###       ("\<^const>SAT_Plan_Base.encode_problem" ("_position" \<Pi>)
###         ("\<^const>Groups.zero_class.zero")))
###     ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###       ("\<^const>Formulas.formula.And"
###         ("\<^const>SAT_Plan_Base.encode_initial_state" ("_position" \<Pi>))
###         ("_applC"
###           ("\<^const>SAT_Plan_Base.encode_goal_state" ("_position" \<Pi>))
###           ("\<^const>Groups.zero_class.zero"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###     ("\<^const>SAT_Plan_Base.encode_problem" ("_position" \<Pi>)
###       ("\<^const>HOL.iff" ("\<^const>Groups.zero_class.zero")
###         ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###           ("\<^const>Formulas.formula.And"
###             ("\<^const>SAT_Plan_Base.encode_initial_state"
###               ("_position" \<Pi>))
###             ("_applC"
###               ("\<^const>SAT_Plan_Base.encode_goal_state"
###                 ("_position" \<Pi>))
###               ("\<^const>Groups.zero_class.zero"))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###     ("\<^const>SAT_Plan_Base.encode_problem"
###       ("\<^const>HOL.iff"
###         ("_applC" ("_position" \<Pi>) ("\<^const>Groups.zero_class.zero"))
###         ("_position" \<A>))
###       ("\<^const>Sema.valid"
###         ("\<^const>Formulas.formula.And"
###           ("\<^const>SAT_Plan_Base.encode_initial_state"
###             ("_position" \<Pi>))
###           ("_applC"
###             ("\<^const>SAT_Plan_Base.encode_goal_state" ("_position" \<Pi>))
###             ("\<^const>Groups.zero_class.zero")))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###     ("\<^const>Formulas.formula.And"
###       ("\<^const>SAT_Plan_Base.encode_problem" ("_position" \<Pi>)
###         ("\<^const>HOL.iff" ("\<^const>Groups.zero_class.zero")
###           ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###             ("\<^const>SAT_Plan_Base.encode_initial_state"
###               ("_position" \<Pi>)))))
###       ("_applC"
###         ("\<^const>SAT_Plan_Base.encode_goal_state" ("_position" \<Pi>))
###         ("\<^const>Groups.zero_class.zero")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" \<A>)
###     ("\<^const>Formulas.formula.And"
###       ("\<^const>SAT_Plan_Base.encode_problem"
###         ("\<^const>HOL.iff"
###           ("_applC" ("_position" \<Pi>) ("\<^const>Groups.zero_class.zero"))
###           ("_position" \<A>))
###         ("\<^const>Sema.valid"
###           ("\<^const>SAT_Plan_Base.encode_initial_state"
###             ("_position" \<Pi>))))
###       ("_applC"
###         ("\<^const>SAT_Plan_Base.encode_goal_state" ("_position" \<Pi>))
###         ("\<^const>Groups.zero_class.zero")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
*** Undefined fact: "inj_on_f_set_l" (line 4806 of "$AFP/Verified_SAT_Based_AI_Planning/SAT_Plan_Base.thy")
*** At command "thm" (line 4806 of "$AFP/Verified_SAT_Based_AI_Planning/SAT_Plan_Base.thy")
### theory "Draft.SAT_Plan_Base"
### 1.482s elapsed time, 1.827s cpu time, 0.267s GC time
Loading theory "Draft.SAT_Plan_BaseMoreTemplates"
"stop"
  :: "'a"
val templateLemmas =
   [("SAT_Plan_Base.encode_frame_axioms_is_cnf",
     "is_cnf (encode_all_frame_axioms ?\<Pi> ?t)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("SAT_Plan_Base.empty_valution_is_False", "\<A>\<^sub>0 ?v = False",
     template_equation
      (template_app (template_hole 1, template_var 0), template_hole 0)),
    ("SAT_Plan_Base.is_cnf_encode_negative_transition_frame_axiom",
     "is_cnf (encode_negative_transition_frame_axiom ?\<Pi> ?t ?v)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0))
         )),
    ("SAT_Plan_Base.encode_operator_effect_is_cnf",
     "is_cnf (encode_operator_effect ?\<Pi> ?t ?op)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0))
         )),
    ("SAT_Plan_Base.encode_operator_precondition_is_cnf",
     "is_cnf (encode_operator_precondition ?\<Pi> ?k ?op)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0))
         )),
    ("SAT_Plan_Base.is_cnf_encode_positive_transition_frame_axiom",
     "is_cnf (encode_positive_transition_frame_axiom ?\<Pi> ?t ?v)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0))
         )),
    ("SAT_Plan_Base.is_cnf_encode_all_operator_preconditions",
     "is_cnf
       (encode_all_operator_preconditions ?\<Pi> (?\<Pi>\<^sub>\<O>) ?t)",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 1)),
             template_var 0))
         )),
    ("SAT_Plan_Base.is_cnf_encode_initial_state",
     "is_valid_problem_strips ?\<Pi> ==> is_cnf (\<Phi>\<^sub>I ?\<Pi>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("SAT_Plan_Base.cnf_of_encode_problem_structure",
     "cnf (\<Phi>\<^sub>I ?\<Pi>) <= cnf (\<Phi> ?\<Pi> ?t)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 1)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SAT_Plan_Base.encode_goal_state_is_cnf",
     "is_valid_problem_strips ?\<Pi> ==>
      is_cnf ((\<Phi>\<^sub>G ?\<Pi>) ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("SAT_Plan_Base.encode_operators_is_cnf",
     "is_valid_problem_strips ?\<Pi> ==>
      is_cnf (encode_operators ?\<Pi> ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("SAT_Plan_Base.is_cnf_encode_problem",
     "is_valid_problem_strips ?\<Pi> ==> is_cnf (\<Phi> ?\<Pi> ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("SAT_Plan_Base.cnf_of_encode_problem_structure",
     "cnf (encode_all_frame_axioms ?\<Pi> ?t) <= cnf (\<Phi> ?\<Pi> ?t)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SAT_Plan_Base.cnf_of_encode_problem_structure",
     "cnf ((\<Phi>\<^sub>G ?\<Pi>) ?t) <= cnf (\<Phi> ?\<Pi> ?t)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SAT_Plan_Base.cnf_of_encode_problem_structure",
     "cnf (encode_operators ?\<Pi> ?t) <= cnf (\<Phi> ?\<Pi> ?t)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SAT_Plan_Base.encode_all_operator_effects_is_cnf",
     "is_valid_problem_strips ?\<Pi> ==>
      is_cnf (encode_all_operator_effects ?\<Pi> (?\<Pi>\<^sub>\<O>) ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_app (template_hole 0, template_var 1)),
               template_var 0))
           ))),
    ("SAT_Plan_Base.cnf_of_encode_all_operator_effects_subset_cnf_of_encode_problem",
     "cnf (encode_all_operator_effects ?\<Pi> (?\<Pi>\<^sub>\<O>) ?t)
      <= cnf (\<Phi> ?\<Pi> ?t)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, template_var 1)),
           template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SAT_Plan_Base.cnf_of_operator_precondition_encoding_subset_encoding",
     "cnf (encode_all_operator_preconditions ?\<Pi> (?\<Pi>\<^sub>\<O>) ?t)
      <= cnf (\<Phi> ?\<Pi> ?t)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, template_var 1)),
           template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SAT_Plan_Base.encode_problem_has_model_then_also_partial_encodings",
     "?\<A> \<Turnstile> \<Phi> ?\<Pi> ?t ==>
      ?\<A> \<Turnstile> \<Phi>\<^sub>I ?\<Pi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 0, template_var 1))
           ))),
    ("SAT_Plan_Base.is_disj_big_or_if",
     "ALL f:set ?fs. is_lit_plus f ==> is_disj \<^bold>\<Or>?fs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("SAT_Plan_Base.decode_plan_step_distinct",
     "?k < ?t ==> distinct ((\<Phi>\<inverse> ?\<Pi> ?\<A> ?t) ! ?k)",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2)],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0),
                   template_var 2)),
               template_var 3))
           ))),
    ("SAT_Plan_Base.encode_problem_has_model_then_also_partial_encodings",
     "?\<A> \<Turnstile> \<Phi> ?\<Pi> ?t ==>
      ?\<A> \<Turnstile> encode_all_frame_axioms ?\<Pi> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("SAT_Plan_Base.encode_problem_has_model_then_also_partial_encodings",
     "?\<A> \<Turnstile> \<Phi> ?\<Pi> ?t ==>
      ?\<A> \<Turnstile> (\<Phi>\<^sub>G ?\<Pi>) ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("SAT_Plan_Base.encode_problem_has_model_then_also_partial_encodings",
     "?\<A> \<Turnstile> \<Phi> ?\<Pi> ?t ==>
      ?\<A> \<Turnstile> encode_operators ?\<Pi> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("SAT_Plan_Base.decode_plan_length",
     "?\<pi> = \<Phi>\<inverse> ?\<Pi> ?\<nu> ?t ==> length ?\<pi> = ?t",
     template_implication
      ([template_equation
         (template_var 3,
          template_app
           (template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1),
            template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 3), template_var 0))),
    ("SAT_Plan_Base.list_product_is_nil_iff",
     "(List.product ?xs ?ys = []) = (?xs = [] | ?ys = [])",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 6, template_var 1), template_var 0),
         template_hole 5),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("SAT_Plan_Base.decode_state_at_dom",
     "is_valid_problem_strips ?\<Pi> ==>
      dom (\<Phi>\<^sub>S\<inverse> ?\<Pi> ?\<A> ?k) =
      set (?\<Pi>\<^sub>\<V>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 2))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 2))))),
    ("SAT_Plan_Base.cnf_foldr_and",
     "cnf (foldr (\<^bold>\<and>) ?fs (\<^bold>\<not> \<bottom>)) =
      \<Union> (cnf ` set ?fs)",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_app (template_hole 6, template_hole 5),
             template_var 0),
           template_app (template_hole 4, template_hole 3))),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty),
           template_app (template_hole 0, template_var 0))))),
    ("SAT_Plan_Base.model_of_encode_problem_makespan_zero_iff",
     "?\<A> \<Turnstile> \<Phi> ?\<Pi> 0 =
      ?\<A> \<Turnstile>
      \<Phi>\<^sub>I ?\<Pi> \<^bold>\<and> (\<Phi>\<^sub>G ?\<Pi>) 0",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_hole 3)),
       template_app
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_hole 3))))),
    ("SAT_Plan_Base.decode_state_at_valid_variable",
     "(\<Phi>\<^sub>S\<inverse> ?\<Pi> ?\<A> ?k) ?v ~= None ==>
      ?v : set (?\<Pi>\<^sub>\<V>)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 3)))
           ))),
    ("SAT_Plan_Base.valuation_models_encoding_cnf_formula_equals",
     "is_valid_problem_strips ?\<Pi> ==>
      ?\<A> \<Turnstile> \<Phi> ?\<Pi> ?t =
      cnf_semantics ?\<A> (cnf (\<Phi> ?\<Pi> ?t))",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)))))),
    ("SAT_Plan_Base.decode_plan_set_is",
     "set (\<Phi>\<inverse> ?\<Pi> ?\<A> ?t) =
      (UN k<?t. {decode_plan' ?\<Pi> ?\<A> k})",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, t_empty),
           template_app (template_hole 0, template_var 0))))),
    ("SAT_Plan_Base.encode_problem_parallel_complete",
     "[| is_valid_problem_strips ?\<Pi>;
         is_parallel_solution_for_problem ?\<Pi> ?\<pi> |]
      ==> valuation_for_plan ?\<Pi> ?\<pi> \<Turnstile>
          \<Phi> ?\<Pi> length ?\<pi>",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("SAT_Plan_Base.encode_problem_parallel_sound",
     "[| is_valid_problem_strips ?\<Pi>;
         ?\<A> \<Turnstile> \<Phi> ?\<Pi> ?t |]
      ==> is_parallel_solution_for_problem ?\<Pi>
           (\<Phi>\<inverse> ?\<Pi> ?\<A> ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("SAT_Plan_Base.cnf_of_operator_encoding_structure",
     "cnf (encode_operators ?\<Pi> ?t) =
      cnf (encode_all_operator_preconditions ?\<Pi> (?\<Pi>\<^sub>\<O>)
            ?t) Un
      cnf (encode_all_operator_effects ?\<Pi> (?\<Pi>\<^sub>\<O>) ?t)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 1),
                 template_app (template_hole 1, template_var 1)),
               template_var 0))),
         template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_app (template_hole 1, template_var 1)),
             template_var 0))))),
    ("SAT_Plan_Base.decode_state_at_initial_state",
     "[| is_valid_problem_strips ?\<Pi>;
         ?\<A> \<Turnstile> \<Phi> ?\<Pi> ?t |]
      ==> \<Phi>\<^sub>S\<inverse> ?\<Pi> ?\<A> 0 = ?\<Pi>\<^sub>I",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_hole 1),
         template_app (template_hole 0, template_var 2)))),
    ("SAT_Plan_Base.decode_state_at_goal_state",
     "[| is_valid_problem_strips ?\<Pi>;
         ?\<A> \<Turnstile> \<Phi> ?\<Pi> ?t |]
      ==> ?\<Pi>\<^sub>G \<subseteq>\<^sub>m
          \<Phi>\<^sub>S\<inverse> ?\<Pi> ?\<A> ?t",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("SAT_Plan_Base.set_filter_op_list_mem_vs",
     "set (filter (%op. ListMem ?v ?vs) ?ops) =
      {op: set ?ops. ?v : set ?vs}",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, t_empty), template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("SAT_Plan_Base.encode_state_variable_is_lit_plus_if",
     "[| is_valid_problem_strips ?\<Pi>; ?v : dom ?s |]
      ==> is_lit_plus
           (encode_state_variable ?k (index (?\<Pi>\<^sub>\<V>) ?v)
             (?s ?v))",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 0),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 3)),
                   template_var 2)),
               template_app (template_var 1, template_var 2)))
           ))),
    ("SAT_Plan_Base.encode_problem_parallel_correct_i",
     "[| is_valid_problem_strips ?\<Pi>;
         ?\<A> \<Turnstile> \<Phi> ?\<Pi> 0 |]
      ==> cnf ((\<Phi>\<^sub>G ?\<Pi>) 0) <= cnf (\<Phi>\<^sub>I ?\<Pi>)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_hole 4))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 4)),
         template_app
          (template_hole 2,
           template_app (template_hole 0, template_var 1))))),
    ("SAT_Plan_Base.decode_plan_step_element_then",
     "[| ?k < ?t; ?op : set ((\<Phi>\<inverse> ?\<Pi> ?\<A> ?t) ! ?k) |]
      ==> ?op : set (?\<Pi>\<^sub>\<O>)",
     template_implication
      ([template_inequation (less_than, template_var 4, template_var 3),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_hole 2,
                    template_app
                     (template_app
                       (template_app (template_hole 1, template_var 1),
                        template_var 0),
                      template_var 3)),
                  template_var 4)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_hole 3,
               template_app (template_hole 0, template_var 1)))
           ))),
    ("SAT_Plan_Base.valuation_models_encoding_cnf_formula_equals_corollary",
     "is_valid_problem_strips ?\<Pi> ==>
      ?\<A> \<Turnstile> \<Phi> ?\<Pi> ?t =
      (ALL C:cnf (\<Phi> ?\<Pi> ?t). EX L:C. lit_semantics ?\<A> L)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 0))),
           t_empty)))),
    ("SAT_Plan_Base.encode_operator_effects_is_cnf_i",
     "is_cnf
       \<^bold>\<And>map (%v. \<^bold>\<not>
                               (Atom
                                 (Operator ?t
                                   (index (?\<Pi>\<^sub>\<O>)
                                     ?op))) \<^bold>\<or>
                              Atom
                               (State (Suc ?t)
                                 (index (?\<Pi>\<^sub>\<V>) v)))
                      (add_effects_of ?op)",
     template_predicate
      (
         template_app
          (template_hole 13,
           template_app
            (template_hole 12,
             template_app
              (template_app (template_hole 11, t_empty),
               template_app (template_hole 0, template_var 0))))
         )),
    ("SAT_Plan_Base.decode_plan_step_element_then",
     "[| ?k < ?t; ?op : set ((\<Phi>\<inverse> ?\<Pi> ?\<A> ?t) ! ?k) |]
      ==> ?\<A> (Operator ?k (index (?\<Pi>\<^sub>\<O>) ?op))",
     template_implication
      ([template_inequation (less_than, template_var 4, template_var 3),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app
                       (template_app (template_hole 3, template_var 1),
                        template_var 0),
                      template_var 3)),
                  template_var 4)))
            )],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app (template_hole 2, template_var 4),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1)),
                 template_var 2)))
           ))),
    ("SAT_Plan_Base.encode_operator_effects_is_cnf_ii",
     "is_cnf
       \<^bold>\<And>map (%v. \<^bold>\<not>
                               (Atom
                                 (Operator ?t
                                   (index (?\<Pi>\<^sub>\<O>)
                                     ?op))) \<^bold>\<or>
                              \<^bold>\<not>
                               (Atom
                                 (State (Suc ?t)
                                   (index (?\<Pi>\<^sub>\<V>) v))))
                      (delete_effects_of ?op)",
     template_predicate
      (
         template_app
          (template_hole 13,
           template_app
            (template_hole 12,
             template_app
              (template_app (template_hole 11, t_empty),
               template_app (template_hole 0, template_var 0))))
         )),
    ("SAT_Plan_Base.set_map_or",
     "set (map (%v. ?A v \<^bold>\<or> ?B v) ?vs) =
      {?A v \<^bold>\<or> ?B v |v. v : set ?vs}",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, t_empty), template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("SAT_Plan_Base.cnf_of_big_or_of_literal_formulas_is",
     "ALL f:set ?fs. is_literal_formula f ==>
      cnf \<^bold>\<Or>?fs =
      {{literal_formula_to_literal f |f. f : set ?fs}}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 12, template_var 0)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_hole 9, template_app (template_hole 8, template_var 0)),
         template_app
          (template_app
            (template_hole 7, template_app (template_hole 6, t_empty)),
           template_hole 0)))),
    ("SAT_Plan_Base.encode_problem_parallel_correct_ii",
     "[| is_valid_problem_strips ?\<Pi>;
         ?\<A> \<Turnstile> \<Phi> ?\<Pi> ?t;
         ?k < length (\<Phi>\<inverse> ?\<Pi> ?\<A> ?t) |]
      ==> are_all_operator_effects_consistent
           ((\<Phi>\<inverse> ?\<Pi> ?\<A> ?t) ! ?k)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_var 3),
                template_var 1))
            ),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_hole 3,
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 2),
                   template_var 1)),
               template_var 0))
           ))),
    ("SAT_Plan_Base.cnf_of_encode_initial_state_set_ii",
     "is_valid_problem_strips ?\<Pi> ==>
      cnf (\<Phi>\<^sub>I ?\<Pi>) =
      (UN v:set (?\<Pi>\<^sub>\<V>).
          {{literal_formula_to_literal
             (encode_state_variable 0 (index (?\<Pi>\<^sub>\<V>) v)
               ((?\<Pi>\<^sub>I) v))}})",
     template_implication
      ([template_predicate
         (template_app (template_hole 16, template_var 0))],
       template_equation
        (template_app
          (template_hole 14,
           template_app (template_hole 13, template_var 0)),
         template_app
          (template_hole 12,
           template_app
            (template_app (template_hole 11, t_empty),
             template_app
              (template_hole 0,
               template_app (template_hole 4, template_var 0))))))),
    ("SAT_Plan_Base.foldr_fun_upd",
     "[| inj_on ?f (set ?xs); ?x : set ?xs |]
      ==> foldr (%x \<A>. \<A>(?f x := ?g x)) ?xs ?\<A> (?f ?x) = ?g ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_app (template_hole 4, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 4, template_var 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, t_empty), template_var 3),
             template_var 0),
           template_app (template_var 4, template_var 2)),
         template_app (template_var 1, template_var 2)))),
    ("SAT_Plan_Base.valuation_of_state_variable_implies_lit_semantics_if",
     "[| ?v : dom ?S; ?\<A> (State ?k (index ?vs ?v)) = the (?S ?v) |]
      ==> lit_semantics ?\<A>
           (literal_formula_to_literal
             (encode_state_variable ?k (index ?vs ?v) (?S ?v)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_app (template_hole 7, template_var 3))
            ),
        template_equation
         (template_app
           (template_var 2,
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 4, template_var 0),
                template_var 4))),
          template_app
           (template_hole 3,
            template_app (template_var 3, template_var 4)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_var 4)),
                 template_app (template_var 3, template_var 4))))
           ))),
    ("SAT_Plan_Base.foldr_fun_no_upd",
     "[| inj_on ?f (set ?xs); ?y ~: ?f ` set ?xs |]
      ==> foldr (%x \<A>. \<A>(?f x := ?g x)) ?xs ?\<A> ?y = ?\<A> ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_app (template_hole 6, template_var 3))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_app
                   (template_app (template_hole 3, template_var 4),
                    template_app (template_hole 6, template_var 3)))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, t_empty), template_var 3),
             template_var 0),
           template_var 2),
         template_app (template_var 0, template_var 2)))),
    ("SAT_Plan_Base.encode_problem_parallel_complete_vi_d",
     "[| is_parallel_solution_for_problem ?\<Pi> ?\<pi>; ?k < length ?\<pi>;
         ?op ~: set (?\<pi> ! ?k) |]
      ==> ~ valuation_for_plan ?\<Pi> ?\<pi>
             (Operator ?k (index (?\<Pi>\<^sub>\<O>) ?op))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 8, template_var 2)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 0),
                  template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 2),
                      template_var 1)))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 3),
                   template_var 2),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app (template_hole 0, template_var 3)),
                     template_var 0)))
               )
           ))),
    ("SAT_Plan_Base.cnf_of_encode_operator_precondition",
     "cnf (encode_operator_precondition ?\<Pi> ?t ?op) =
      (UN v:set (precondition_of ?op).
          {{(Operator ?t (index (?\<Pi>\<^sub>\<O>) ?op))\<inverse>,
            (State ?t (index (?\<Pi>\<^sub>\<V>) v))\<^sup>+}})",
     template_equation
      (template_app
        (template_hole 17,
         template_app
          (template_app
            (template_app (template_hole 16, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 15,
         template_app
          (template_app (template_hole 14, t_empty),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("SAT_Plan_Base.encode_problem_parallel_correct_x",
     "[| is_valid_problem_strips ?\<Pi>;
         ?\<A> \<Turnstile> \<Phi> ?\<Pi> ?t |]
      ==> map (decode_state_at ?\<Pi> ?\<A>)
           [0..<Suc (length (\<Phi>\<inverse> ?\<Pi> ?\<A> ?t))] =
          trace_parallel_plan_strips (?\<Pi>\<^sub>I)
           (\<Phi>\<inverse> ?\<Pi> ?\<A> ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_app
               (template_app (template_hole 10, template_var 2),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 1),
                   template_var 0))))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1),
             template_var 0))))),
    ("SAT_Plan_Base.encode_problem_parallel_correct_ii",
     "[| is_valid_problem_strips ?\<Pi>;
         ?\<A> \<Turnstile> \<Phi> ?\<Pi> ?t;
         ?k < length (\<Phi>\<inverse> ?\<Pi> ?\<A> ?t) |]
      ==> are_all_operators_applicable
           (\<Phi>\<^sub>S\<inverse> ?\<Pi> ?\<A> ?k)
           ((\<Phi>\<inverse> ?\<Pi> ?\<A> ?t) ! ?k)",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app (template_hole 6, template_var 3),
                template_var 1))
            ),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_hole 4,
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_app (template_hole 3, template_var 3),
                     template_var 2),
                   template_var 1)),
               template_var 0))
           ))),
    ("SAT_Plan_Base.encode_problem_parallel_correct_xi",
     "[| is_valid_problem_strips ?\<Pi>;
         ?\<A> \<Turnstile> \<Phi> ?\<Pi> ?t;
         ?ops : set (\<Phi>\<inverse> ?\<Pi> ?\<A> ?t); ?op : set ?ops |]
      ==> ?op : set (?\<Pi>\<^sub>\<O>)",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_app (template_hole 6, template_var 4),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 4)))
           ))),
    ("SAT_Plan_Base.encode_problem_parallel_complete_vi_a",
     "[| is_parallel_solution_for_problem ?\<Pi> ?\<pi>;
         ?k < length (trace_parallel_plan_strips (?\<Pi>\<^sub>I) ?\<pi>) -
              1 |]
      ==> valuation_for_plan ?\<Pi> ?\<pi>
           (Operator ?k (index (?\<Pi>\<^sub>\<O>) ?op)) =
          (?op : set (?\<pi> ! ?k))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 12,
              template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app (template_hole 9, template_var 3)),
                  template_var 2))),
            template_hole 8))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 6, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 3)),
               template_var 0))),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)))))),
    ("SAT_Plan_Base.encode_problem_parallel_complete_vi_b",
     "[| is_parallel_solution_for_problem ?\<Pi> ?\<pi>;
         length (trace_parallel_plan_strips (?\<Pi>\<^sub>I) ?\<pi>) - 1
         <= ?l;
         ?l < length ?\<pi> |]
      ==> ~ valuation_for_plan ?\<Pi> ?\<pi>
             (Operator ?l (index (?\<Pi>\<^sub>\<O>) ?op))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 11,
              template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app (template_hole 8, template_var 3)),
                  template_var 2))),
            template_hole 7),
          template_var 1),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 5, template_var 2))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 3),
                   template_var 2),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app (template_hole 0, template_var 3)),
                     template_var 0)))
               )
           ))),
    ("SAT_Plan_Base.decode_plan'_set_is",
     "set (decode_plan' ?\<Pi> ?\<A> ?k) =
      {?\<Pi>\<^sub>\<O> ! index (?\<Pi>\<^sub>\<O>) op |op.
       op : set (?\<Pi>\<^sub>\<O>) &
       ?\<A> (Operator ?k (index (?\<Pi>\<^sub>\<O>) op))}",
     template_equation
      (template_app
        (template_hole 10,
         template_app
          (template_app
            (template_app (template_hole 9, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 8, t_empty))),
    ("SAT_Plan_Base.encode_problem_parallel_correct_vii",
     "[| is_valid_problem_strips ?\<Pi>;
         ?\<A> \<Turnstile> \<Phi> ?\<Pi> ?t |]
      ==> length
           (map (decode_state_at ?\<Pi> ?\<A>)
             [0..<Suc (length (\<Phi>\<inverse> ?\<Pi> ?\<A> ?t))]) =
          length
           (trace_parallel_plan_strips (?\<Pi>\<^sub>I)
             (\<Phi>\<inverse> ?\<Pi> ?\<A> ?t))",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 1),
              template_app
               (template_app (template_hole 11, template_var 2),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_app (template_hole 2, template_var 2),
                       template_var 1),
                     template_var 0)))))),
         template_app
          (template_hole 9,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_app
              (template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1),
               template_var 0)))))),
    ("SAT_Plan_Base.cnf_of_encode_initial_state_set_i",
     "cnf (\<Phi>\<^sub>I ?\<Pi>) =
      \<Union>
       {cnf (encode_state_variable 0 (index (?\<Pi>\<^sub>\<V>) v)
              ((?\<Pi>\<^sub>I) v)) |
        v. v : set (?\<Pi>\<^sub>\<V>) & (?\<Pi>\<^sub>I) v ~= None}",
     template_equation
      (template_app
        (template_hole 15, template_app (template_hole 14, template_var 0)),
       template_app
        (template_hole 13, template_app (template_hole 12, t_empty)))),
    ("SAT_Plan_Base.cnf_of_encode_goal_state_set_i",
     "cnf ((\<Phi>\<^sub>G ?\<Pi>) ?t) =
      \<Union>
       {cnf (encode_state_variable ?t (index (?\<Pi>\<^sub>\<V>) v)
              ((?\<Pi>\<^sub>G) v)) |
        v. v : set (?\<Pi>\<^sub>\<V>) & (?\<Pi>\<^sub>G) v ~= None}",
     template_equation
      (template_app
        (template_hole 14,
         template_app
          (template_app (template_hole 13, template_var 1),
           template_var 0)),
       template_app
        (template_hole 12, template_app (template_hole 11, t_empty)))),
    ("SAT_Plan_Base.cnf_of_encode_initial_state_set",
     "[| is_valid_problem_strips ?\<Pi>; ?v : dom (?\<Pi>\<^sub>I) |]
      ==> (?\<Pi>\<^sub>I) ?v = Some False -->
          (EX! C.
              C : cnf (\<Phi>\<^sub>I ?\<Pi>) &
              C = {(State 0 (index (?\<Pi>\<^sub>\<V>) ?v))\<inverse>})",
     template_implication
      ([template_predicate
         (template_app (template_hole 20, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 0),
              template_app
               (template_hole 18,
                template_app (template_hole 17, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 16,
               template_app
                (template_app
                  (template_hole 15,
                   template_app
                    (template_app (template_hole 17, template_var 1),
                     template_var 0)),
                 template_app (template_hole 14, template_hole 13))),
             template_app (template_hole 12, t_empty))
           ))),
    ("SAT_Plan_Base.cnf_of_encode_initial_state_set",
     "[| is_valid_problem_strips ?\<Pi>; ?v : dom (?\<Pi>\<^sub>I) |]
      ==> (?\<Pi>\<^sub>I) ?v = Some True -->
          (EX! C.
              C : cnf (\<Phi>\<^sub>I ?\<Pi>) &
              C = {(State 0 (index (?\<Pi>\<^sub>\<V>) ?v))\<^sup>+})",
     template_implication
      ([template_predicate
         (template_app (template_hole 20, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 0),
              template_app
               (template_hole 18,
                template_app (template_hole 17, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 16,
               template_app
                (template_app
                  (template_hole 15,
                   template_app
                    (template_app (template_hole 17, template_var 1),
                     template_var 0)),
                 template_app (template_hole 14, template_hole 13))),
             template_app (template_hole 12, t_empty))
           ))),
    ("SAT_Plan_Base.encode_problem_parallel_correct_v",
     "[| is_valid_problem_strips ?\<Pi>;
         ?\<A> \<Turnstile> \<Phi> ?\<Pi> ?t;
         ?k < length (\<Phi>\<inverse> ?\<Pi> ?\<A> ?t) |]
      ==> \<Phi>\<^sub>S\<inverse> ?\<Pi> ?\<A> Suc ?k =
          execute_parallel_operator
           (\<Phi>\<^sub>S\<inverse> ?\<Pi> ?\<A> ?k)
           ((\<Phi>\<inverse> ?\<Pi> ?\<A> ?t) ! ?k)",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app (template_hole 8, template_var 3),
                template_var 1))
            ),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_hole 6,
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_var 1)))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_app (template_hole 2, template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2),
               template_var 0)),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 5, template_var 3),
                   template_var 2),
                 template_var 1)),
             template_var 0))))),
    ("SAT_Plan_Base.encode_problem_parallel_correct_vi",
     "[| is_valid_problem_strips ?\<Pi>;
         ?\<A> \<Turnstile> \<Phi> ?\<Pi> ?t;
         ?k < length
               (trace_parallel_plan_strips (?\<Pi>\<^sub>I)
                 (\<Phi>\<inverse> ?\<Pi> ?\<A> ?t)) |]
      ==> trace_parallel_plan_strips (?\<Pi>\<^sub>I)
           (\<Phi>\<inverse> ?\<Pi> ?\<A> ?t) !
          ?k =
          \<Phi>\<^sub>S\<inverse> ?\<Pi> ?\<A> ?k",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app (template_hole 8, template_var 3),
                template_var 1))
            ),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_hole 6,
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 3)),
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1))))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 3)),
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 3),
                   template_var 2),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 0)))),
    ("SAT_Plan_Base.decode_state_at_encoding_variables_equals_some_of_valuation_if",
     "[| is_valid_problem_strips ?\<Pi>;
         ?\<A> \<Turnstile> \<Phi> ?\<Pi> ?t; ?k <= ?t;
         ?v : set (?\<Pi>\<^sub>\<V>) |]
      ==> (\<Phi>\<^sub>S\<inverse> ?\<Pi> ?\<A> ?k) ?v =
          Some (?\<A> (State ?k (index (?\<Pi>\<^sub>\<V>) ?v)))",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_app
               (template_app (template_hole 9, template_var 4),
                template_var 2))
            ),
        template_inequation (less_equals, template_var 1, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 4)))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 4),
               template_var 3),
             template_var 1),
           template_var 0),
         template_app
          (template_hole 2,
           template_app
            (template_var 3,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 5, template_var 4)),
                 template_var 0))))))),
    ("SAT_Plan_Base.cnf_of_encode_goal_state_set",
     "[| is_valid_problem_strips ?\<Pi>; ?v : dom (?\<Pi>\<^sub>G) |]
      ==> (?\<Pi>\<^sub>G) ?v = Some False -->
          (EX! C.
              C : cnf ((\<Phi>\<^sub>G ?\<Pi>) ?t) &
              C = {(State ?t (index (?\<Pi>\<^sub>\<V>) ?v))\<inverse>})",
     template_implication
      ([template_predicate
         (template_app (template_hole 19, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 1),
              template_app
               (template_hole 17,
                template_app (template_hole 16, template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 15,
               template_app
                (template_app
                  (template_hole 14,
                   template_app
                    (template_app (template_hole 16, template_var 2),
                     template_var 1)),
                 template_app (template_hole 13, template_hole 12))),
             template_app (template_hole 11, t_empty))
           ))),
    ("SAT_Plan_Base.cnf_of_encode_goal_state_set",
     "[| is_valid_problem_strips ?\<Pi>; ?v : dom (?\<Pi>\<^sub>G) |]
      ==> (?\<Pi>\<^sub>G) ?v = Some True -->
          (EX! C.
              C : cnf ((\<Phi>\<^sub>G ?\<Pi>) ?t) &
              C = {(State ?t (index (?\<Pi>\<^sub>\<V>) ?v))\<^sup>+})",
     template_implication
      ([template_predicate
         (template_app (template_hole 19, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 1),
              template_app
               (template_hole 17,
                template_app (template_hole 16, template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 15,
               template_app
                (template_app
                  (template_hole 14,
                   template_app
                    (template_app (template_hole 16, template_var 2),
                     template_var 1)),
                 template_app (template_hole 13, template_hole 12))),
             template_app (template_hole 11, t_empty))
           ))),
    ("SAT_Plan_Base.encode_problem_parallel_complete_vi_c",
     "[| is_valid_problem_strips ?\<Pi>;
         is_parallel_solution_for_problem ?\<Pi> ?\<pi>;
         ?k < length (trace_parallel_plan_strips (?\<Pi>\<^sub>I) ?\<pi>) |]
      ==> valuation_for_plan ?\<Pi> ?\<pi>
           (State ?k (index (?\<Pi>\<^sub>\<V>) ?v)) =
          ((trace_parallel_plan_strips (?\<Pi>\<^sub>I) ?\<pi> ! ?k) ?v =
           Some True)",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_hole 11,
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 3)),
              template_var 2)))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_app (template_hole 7, template_var 3),
                  template_var 2),
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 3)),
                    template_var 0)))
              )],
         template_equation
          (template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app (template_hole 9, template_var 3)),
                   template_var 2)),
               template_var 1),
             template_var 0),
           template_app (template_hole 1, template_hole 0))))),
    ("SAT_Plan_Base.set_map_operator_precondition",
     "set (map (%(k, op). encode_operator_precondition ?\<Pi> k op)
            (List.product [0..<?t] ?ops)) =
      {encode_operator_precondition ?\<Pi> k op |k op.
       (k, op) : {0..<?t} \<times> set ?ops}",
     template_equation
      (template_app
        (template_hole 16,
         template_app
          (template_app
            (template_hole 15, template_app (template_hole 14, t_empty)),
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app (template_hole 11, template_hole 10),
                 template_var 1)),
             template_var 0))),
       template_app (template_hole 9, t_empty))),
    ("SAT_Plan_Base.decode_plan_step_element_then_i",
     "?k < ?t ==>
      set ((\<Phi>\<inverse> ?\<Pi> ?\<A> ?t) ! ?k) =
      {?\<Pi>\<^sub>\<O> ! index (?\<Pi>\<^sub>\<O>) op |op.
       op : set (?\<Pi>\<^sub>\<O>) &
       ?\<A> (Operator ?k (index (?\<Pi>\<^sub>\<O>) op))}",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_hole 11,
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_app (template_hole 9, template_var 1),
                   template_var 0),
                 template_var 2)),
             template_var 3)),
         template_app (template_hole 8, t_empty)))),
    ("SAT_Plan_Base.set_map_encode_operator_effect",
     "set (map (%(t, op). encode_operator_effect ?\<Pi> t op)
            (List.product [0..<?t] (?\<Pi>\<^sub>\<O>))) =
      {encode_operator_effect ?\<Pi> k op |k op.
       (k, op) : {0..<?t} \<times> set (?\<Pi>\<^sub>\<O>)}",
     template_equation
      (template_app
        (template_hole 17,
         template_app
          (template_app
            (template_hole 16, template_app (template_hole 15, t_empty)),
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app (template_hole 12, template_hole 11),
                 template_var 0)),
             template_app (template_hole 10, template_var 1)))),
       template_app (template_hole 9, t_empty))),
    ("SAT_Plan_Base.decode_state_at_preconditions",
     "[| is_valid_problem_strips ?\<Pi>;
         ?\<A> \<Turnstile> \<Phi> ?\<Pi> ?t; ?k < ?t;
         ?op : set ((\<Phi>\<inverse> ?\<Pi> ?\<A> ?t) ! ?k);
         ?v : set (precondition_of ?op) |]
      ==> ?\<A> (State ?k (index (?\<Pi>\<^sub>\<V>) ?v))",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 5)),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 4),
              template_app
               (template_app (template_hole 11, template_var 5),
                template_var 3))
            ),
        template_inequation (less_than, template_var 2, template_var 3),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app
                       (template_app (template_hole 6, template_var 5),
                        template_var 4),
                      template_var 3)),
                  template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_var 4,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 5)),
                 template_var 0)))
           ))),
    ("SAT_Plan_Base.set_map_to_operator_atom",
     "set (map (%op. Atom (Operator ?t (index (?\<Pi>\<^sub>\<O>) op)))
            (filter (%op. ListMem ?v ?vs) (?\<Pi>\<^sub>\<O>))) =
      {Atom (Operator ?t (index (?\<Pi>\<^sub>\<O>) op)) |op.
       op : set (?\<Pi>\<^sub>\<O>) & ?v : set ?vs}",
     template_equation
      (template_app
        (template_hole 15,
         template_app
          (template_app (template_hole 14, t_empty),
           template_app
            (template_app (template_hole 9, t_empty),
             template_app (template_hole 10, template_var 2)))),
       template_app (template_hole 7, t_empty))),
    ("SAT_Plan_Base.cnf_of_encode_goal_state_set_ii",
     "is_valid_problem_strips ?\<Pi> ==>
      cnf ((\<Phi>\<^sub>G ?\<Pi>) ?t) =
      \<Union>
       {{{literal_formula_to_literal
           (encode_state_variable ?t (index (?\<Pi>\<^sub>\<V>) v)
             ((?\<Pi>\<^sub>G) v))}} |
        v. v : set (?\<Pi>\<^sub>\<V>) & (?\<Pi>\<^sub>G) v ~= None}",
     template_implication
      ([template_predicate
         (template_app (template_hole 21, template_var 1))],
       template_equation
        (template_app
          (template_hole 19,
           template_app
            (template_app (template_hole 18, template_var 1),
             template_var 0)),
         template_app
          (template_hole 17, template_app (template_hole 16, t_empty))))),
    ("SAT_Plan_Base.valuation_for_operator_variables_is",
     "[| is_parallel_solution_for_problem ?\<Pi> ?\<pi>;
         ?k < length (trace_parallel_plan_strips (?\<Pi>\<^sub>I) ?\<pi>) -
              1;
         ?op : set (?\<Pi>\<^sub>\<O>) |]
      ==> valuation_for_operator_variables ?\<Pi> ?\<pi>
           (trace_parallel_plan_strips (?\<Pi>\<^sub>I) ?\<pi>)
           (Operator ?k (index (?\<Pi>\<^sub>\<O>) ?op)) =
          (?op : set (?\<pi> ! ?k))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 12,
              template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app (template_hole 9, template_var 3)),
                  template_var 2))),
            template_hole 8)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 3)))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_app
              (template_app
                (template_hole 10,
                 template_app (template_hole 9, template_var 3)),
               template_var 2)),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 5, template_var 3)),
               template_var 0))),
         template_app
          (template_app (template_hole 7, template_var 0),
           template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)))))),
    ("SAT_Plan_Base.cnf_of_encode_all_operator_preconditions_structure",
     "cnf (encode_all_operator_preconditions ?\<Pi> (?\<Pi>\<^sub>\<O>)
            ?t) =
      (UN (t, op):{..<?t} \<times> set (?\<Pi>\<^sub>\<O>).
          UN v:set (precondition_of op).
             {{(Operator t (index (?\<Pi>\<^sub>\<O>) op))\<inverse>,
               (State t (index (?\<Pi>\<^sub>\<V>) v))\<^sup>+}})",
     template_equation
      (template_app
        (template_hole 22,
         template_app
          (template_app
            (template_app (template_hole 21, template_var 1),
             template_app (template_hole 20, template_var 1)),
           template_var 0)),
       template_app
        (template_hole 19,
         template_app
          (template_app
            (template_hole 18, template_app (template_hole 17, t_empty)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             t_empty))))),
    ("SAT_Plan_Base.valuation_for_state_variables_is",
     "[| ?k : set ?ks; ?v : set ?vs |]
      ==> foldr (%(k, v). valuation_for_state ?vs (?s k) k v)
           (List.product ?ks ?vs) \<A>\<^sub>0 (State ?k (index ?vs ?v)) =
          (?s ?k ?v = Some True)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 4),
              template_app (template_hole 13, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 2),
              template_app (template_hole 11, template_var 1))
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 9,
                      template_app (template_hole 8, t_empty)),
                    template_app
                     (template_app (template_hole 1, template_var 3),
                      template_var 1)),
                  template_hole 0),
                template_app
                 (template_app (template_hole 6, template_var 4),
                  template_app
                   (template_app (template_hole 5, template_var 1),
                    template_var 2)))
              )],
         template_equation
          (template_app
            (template_app (template_var 0, template_var 4), template_var 2),
           template_app (template_hole 3, template_hole 2))))),
    ("SAT_Plan_Base.encode_problem_parallel_correct_iii",
     "[| is_valid_problem_strips ?\<Pi>;
         ?\<A> \<Turnstile> \<Phi> ?\<Pi> ?t;
         ?k < length (\<Phi>\<inverse> ?\<Pi> ?\<A> ?t);
         ?op : set ((\<Phi>\<inverse> ?\<Pi> ?\<A> ?t) ! ?k) |]
      ==> ?v : set (add_effects_of ?op) -->
          (\<Phi>\<^sub>S\<inverse> ?\<Pi> ?\<A> Suc ?k) ?v = Some True",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 5)),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 4),
              template_app
               (template_app (template_hole 15, template_var 5),
                template_var 3))
            ),
        template_inequation
         (less_than, template_var 2,
          template_app
           (template_hole 13,
            template_app
             (template_app
               (template_app (template_hole 12, template_var 5),
                template_var 4),
              template_var 3))),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app
                       (template_app (template_hole 12, template_var 5),
                        template_var 4),
                      template_var 3)),
                  template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 0),
                 template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 1)))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 3, template_var 5),
                       template_var 4),
                     template_app (template_hole 2, template_var 2)),
                   template_var 0)),
               template_app (template_hole 1, template_hole 0)))
           ))),
    ("SAT_Plan_Base.encode_problem_parallel_correct_iii",
     "[| is_valid_problem_strips ?\<Pi>;
         ?\<A> \<Turnstile> \<Phi> ?\<Pi> ?t;
         ?k < length (\<Phi>\<inverse> ?\<Pi> ?\<A> ?t);
         ?op : set ((\<Phi>\<inverse> ?\<Pi> ?\<A> ?t) ! ?k) |]
      ==> ?v : set (delete_effects_of ?op) -->
          (\<Phi>\<^sub>S\<inverse> ?\<Pi> ?\<A> Suc ?k) ?v = Some False",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 5)),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 4),
              template_app
               (template_app (template_hole 15, template_var 5),
                template_var 3))
            ),
        template_inequation
         (less_than, template_var 2,
          template_app
           (template_hole 13,
            template_app
             (template_app
               (template_app (template_hole 12, template_var 5),
                template_var 4),
              template_var 3))),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app
                       (template_app (template_hole 12, template_var 5),
                        template_var 4),
                      template_var 3)),
                  template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 0),
                 template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 1)))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 3, template_var 5),
                       template_var 4),
                     template_app (template_hole 2, template_var 2)),
                   template_var 0)),
               template_app (template_hole 1, template_hole 0)))
           ))),
    ("SAT_Plan_Base.cnf_of_encode_all_operator_preconditions_contains_clause_if",
     "[| is_valid_problem_strips ?\<Pi>; ?k < ?t;
         ?op : set (?\<Pi>\<^sub>\<O>); ?v : set (precondition_of ?op) |]
      ==> {(Operator ?k (index (?\<Pi>\<^sub>\<O>) ?op))\<inverse>,
           (State ?k (index (?\<Pi>\<^sub>\<V>) ?v))\<^sup>+}
          : cnf (encode_all_operator_preconditions ?\<Pi>
                  (?\<Pi>\<^sub>\<O>) ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 19, template_var 4)),
        template_inequation (less_than, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 1),
              template_app
               (template_hole 16,
                template_app (template_hole 15, template_var 4)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 0),
              template_app
               (template_hole 13,
                template_app (template_hole 12, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_hole 9,
                     template_app
                      (template_app (template_hole 8, template_var 3),
                       template_app
                        (template_app
                          (template_hole 7,
                           template_app (template_hole 15, template_var 4)),
                         template_var 1)))),
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 5, template_var 3),
                         template_app
                          (template_app
                            (template_hole 4,
                             template_app
                              (template_hole 3, template_var 4)),
                           template_var 0)))),
                   template_hole 2))),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_app (template_hole 15, template_var 4)),
                 template_var 2)))
           ))),
    ("SAT_Plan_Base.cnf_of_operator_effect_encoding_contains_add_effect_clause_if",
     "[| is_valid_problem_strips ?\<Pi>; ?k < ?t;
         ?op : set (?\<Pi>\<^sub>\<O>); ?v : set (add_effects_of ?op) |]
      ==> {(Operator ?k (index (?\<Pi>\<^sub>\<O>) ?op))\<inverse>,
           (State (Suc ?k) (index (?\<Pi>\<^sub>\<V>) ?v))\<^sup>+}
          : cnf (encode_all_operator_effects ?\<Pi> (?\<Pi>\<^sub>\<O>)
                  ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 20, template_var 4)),
        template_inequation (less_than, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 1),
              template_app
               (template_hole 17,
                template_app (template_hole 16, template_var 4)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 0),
              template_app
               (template_hole 14,
                template_app (template_hole 13, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_hole 10,
                     template_app
                      (template_app (template_hole 9, template_var 3),
                       template_app
                        (template_app
                          (template_hole 8,
                           template_app (template_hole 16, template_var 4)),
                         template_var 1)))),
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app
                      (template_hole 7,
                       template_app
                        (template_app
                          (template_hole 6,
                           template_app (template_hole 5, template_var 3)),
                         template_app
                          (template_app
                            (template_hole 4,
                             template_app
                              (template_hole 3, template_var 4)),
                           template_var 0)))),
                   template_hole 2))),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_app (template_hole 16, template_var 4)),
                 template_var 2)))
           ))),
    ("SAT_Plan_Base.cnf_of_operator_effect_encoding_contains_delete_effect_clause_if",
     "[| is_valid_problem_strips ?\<Pi>; ?k < ?t;
         ?op : set (?\<Pi>\<^sub>\<O>); ?v : set (delete_effects_of ?op) |]
      ==> {(Operator ?k (index (?\<Pi>\<^sub>\<O>) ?op))\<inverse>,
           (State (Suc ?k) (index (?\<Pi>\<^sub>\<V>) ?v))\<inverse>}
          : cnf (encode_all_operator_effects ?\<Pi> (?\<Pi>\<^sub>\<O>)
                  ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 19, template_var 4)),
        template_inequation (less_than, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 1),
              template_app
               (template_hole 16,
                template_app (template_hole 15, template_var 4)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 0),
              template_app
               (template_hole 13,
                template_app (template_hole 12, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_hole 9,
                     template_app
                      (template_app (template_hole 8, template_var 3),
                       template_app
                        (template_app
                          (template_hole 7,
                           template_app (template_hole 15, template_var 4)),
                         template_var 1)))),
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_hole 9,
                       template_app
                        (template_app
                          (template_hole 6,
                           template_app (template_hole 5, template_var 3)),
                         template_app
                          (template_app
                            (template_hole 4,
                             template_app
                              (template_hole 3, template_var 4)),
                           template_var 0)))),
                   template_hole 2))),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_app (template_hole 15, template_var 4)),
                 template_var 2)))
           ))),
    ("SAT_Plan_Base.model_initial_state_set_valuations",
     "is_valid_problem_strips ?\<Pi> ==>
      set (map (%v. case (?\<Pi>\<^sub>I) v of None => \<A>\<^sub>0
                    | Some b => \<A>\<^sub>0
                        (State 0 (index (?\<Pi>\<^sub>\<V>) v) := b))
            (?\<Pi>\<^sub>\<V>)) =
      {\<A>\<^sub>0
       (State 0 (index (?\<Pi>\<^sub>\<V>) v) := the ((?\<Pi>\<^sub>I) v)) |
       v. v : set (?\<Pi>\<^sub>\<V>)}",
     template_implication
      ([template_predicate
         (template_app (template_hole 18, template_var 0))],
       template_equation
        (template_app
          (template_hole 16,
           template_app
            (template_app (template_hole 15, t_empty),
             template_app (template_hole 8, template_var 0))),
         template_app (template_hole 6, t_empty)))),
    ("SAT_Plan_Base.encode_problem_parallel_complete_vi_f",
     "[| is_valid_problem_strips ?\<Pi>;
         is_parallel_solution_for_problem ?\<Pi> ?\<pi>;
         length (trace_parallel_plan_strips (?\<Pi>\<^sub>I) ?\<pi>) <= ?l;
         ?l < length ?\<pi> + 1 |]
      ==> valuation_for_plan ?\<Pi> ?\<pi>
           (State ?l (index (?\<Pi>\<^sub>\<V>) ?v)) =
          valuation_for_plan ?\<Pi> ?\<pi>
           (State
             (length (trace_parallel_plan_strips (?\<Pi>\<^sub>I) ?\<pi>) -
              1)
             (index (?\<Pi>\<^sub>\<V>) ?v))",
     template_implication
      ([template_predicate
         (template_app (template_hole 15, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 12,
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 3)),
              template_var 2)),
          template_var 1),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 2)),
            template_hole 6))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 3)),
               template_var 0))),
         template_app
          (template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_hole 12,
                     template_app
                      (template_app
                        (template_hole 11,
                         template_app (template_hole 10, template_var 3)),
                       template_var 2))),
                 template_hole 6)),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 3)),
               template_var 0)))))),
    ("SAT_Plan_Base.cnf_of_negative_transition_frame_axiom",
     "cnf (encode_negative_transition_frame_axiom ?\<Pi> ?k ?v) =
      {{(State ?k (index (?\<Pi>\<^sub>\<V>) ?v))\<inverse>,
        (State (Suc ?k) (index (?\<Pi>\<^sub>\<V>) ?v))\<^sup>+} Un
       {(Operator ?k (index (?\<Pi>\<^sub>\<O>) op))\<^sup>+ |op.
        op : set (?\<Pi>\<^sub>\<O>) & ?v : set (delete_effects_of op)}}",
     template_equation
      (template_app
        (template_hole 24,
         template_app
          (template_app
            (template_app (template_hole 23, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 22,
           template_app
            (template_app
              (template_hole 21,
               template_app
                (template_app
                  (template_hole 20,
                   template_app
                    (template_hole 19,
                     template_app
                      (template_app (template_hole 18, template_var 1),
                       template_app
                        (template_app
                          (template_hole 17,
                           template_app (template_hole 16, template_var 2)),
                         template_var 0)))),
                 template_app
                  (template_app
                    (template_hole 20,
                     template_app
                      (template_hole 15,
                       template_app
                        (template_app
                          (template_hole 18,
                           template_app (template_hole 14, template_var 1)),
                         template_app
                          (template_app
                            (template_hole 17,
                             template_app
                              (template_hole 16, template_var 2)),
                           template_var 0)))),
                   template_hole 13))),
             template_app (template_hole 12, t_empty))),
         template_hole 0))),
    ("SAT_Plan_Base.cnf_of_positive_transition_frame_axiom",
     "cnf (encode_positive_transition_frame_axiom ?\<Pi> ?k ?v) =
      {{(State ?k (index (?\<Pi>\<^sub>\<V>) ?v))\<^sup>+,
        (State (Suc ?k) (index (?\<Pi>\<^sub>\<V>) ?v))\<inverse>} Un
       {(Operator ?k (index (?\<Pi>\<^sub>\<O>) op))\<^sup>+ |op.
        op : set (?\<Pi>\<^sub>\<O>) & ?v : set (add_effects_of op)}}",
     template_equation
      (template_app
        (template_hole 24,
         template_app
          (template_app
            (template_app (template_hole 23, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 22,
           template_app
            (template_app
              (template_hole 21,
               template_app
                (template_app
                  (template_hole 20,
                   template_app
                    (template_hole 19,
                     template_app
                      (template_app (template_hole 18, template_var 1),
                       template_app
                        (template_app
                          (template_hole 17,
                           template_app (template_hole 16, template_var 2)),
                         template_var 0)))),
                 template_app
                  (template_app
                    (template_hole 20,
                     template_app
                      (template_hole 15,
                       template_app
                        (template_app
                          (template_hole 18,
                           template_app (template_hole 14, template_var 1)),
                         template_app
                          (template_app
                            (template_hole 17,
                             template_app
                              (template_hole 16, template_var 2)),
                           template_var 0)))),
                   template_hole 13))),
             template_app (template_hole 12, t_empty))),
         template_hole 0))),
    ("SAT_Plan_Base.cnf_of_encode_operator_effect_structure",
     "cnf (encode_operator_effect ?\<Pi> ?t ?op) =
      (UN v:set (add_effects_of ?op).
          {{(Operator ?t (index (?\<Pi>\<^sub>\<O>) ?op))\<inverse>,
            (State (Suc ?t) (index (?\<Pi>\<^sub>\<V>) v))\<^sup>+}}) Un
      (UN v:set (delete_effects_of ?op).
          {{(Operator ?t (index (?\<Pi>\<^sub>\<O>) ?op))\<inverse>,
            (State (Suc ?t) (index (?\<Pi>\<^sub>\<V>) v))\<inverse>}})",
     template_equation
      (template_app
        (template_hole 20,
         template_app
          (template_app
            (template_app (template_hole 19, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 18,
           template_app
            (template_hole 17,
             template_app
              (template_app (template_hole 16, t_empty),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0))))),
         template_app
          (template_hole 17,
           template_app
            (template_app (template_hole 16, t_empty),
             template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0))))))),
    ("SAT_Plan_Base.encode_problem_parallel_correct_iv",
     "[| is_valid_problem_strips ?\<Pi>;
         ?\<A> \<Turnstile> \<Phi> ?\<Pi> ?t; ?k < ?t;
         ?v : set (?\<Pi>\<^sub>\<V>);
         ~ (EX op:set ((\<Phi>\<inverse> ?\<Pi> ?\<A> ?t) ! ?k).
               ?v : set (add_effects_of op) |
               ?v : set (delete_effects_of op)) |]
      ==> cnf_semantics ?\<A>
           {{(State ?k (index (?\<Pi>\<^sub>\<V>) ?v))\<inverse>,
             (State (Suc ?k) (index (?\<Pi>\<^sub>\<V>) ?v))\<^sup>+}}",
     template_implication
      ([template_predicate
         (template_app (template_hole 24, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 23, template_var 3),
              template_app
               (template_app (template_hole 22, template_var 4),
                template_var 2))
            ),
        template_inequation (less_than, template_var 1, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 20, template_var 0),
              template_app
               (template_hole 19,
                template_app (template_hole 18, template_var 4)))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 16,
                    template_app
                     (template_hole 15,
                      template_app
                       (template_app
                         (template_hole 14,
                          template_app
                           (template_app
                             (template_app
                               (template_hole 13, template_var 4),
                              template_var 3),
                            template_var 2)),
                        template_var 1))),
                  t_empty)
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 9, template_var 3),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 5, template_var 1),
                         template_app
                          (template_app
                            (template_hole 4,
                             template_app
                              (template_hole 18, template_var 4)),
                           template_var 0)))),
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_app
                            (template_hole 5,
                             template_app
                              (template_hole 2, template_var 1)),
                           template_app
                            (template_app
                              (template_hole 4,
                               template_app
                                (template_hole 18, template_var 4)),
                             template_var 0)))),
                     template_hole 1))),
               template_hole 0))
           ))),
    ("SAT_Plan_Base.encode_problem_parallel_correct_iv",
     "[| is_valid_problem_strips ?\<Pi>;
         ?\<A> \<Turnstile> \<Phi> ?\<Pi> ?t; ?k < ?t;
         ?v : set (?\<Pi>\<^sub>\<V>);
         ~ (EX op:set ((\<Phi>\<inverse> ?\<Pi> ?\<A> ?t) ! ?k).
               ?v : set (add_effects_of op) |
               ?v : set (delete_effects_of op)) |]
      ==> cnf_semantics ?\<A>
           {{(State ?k (index (?\<Pi>\<^sub>\<V>) ?v))\<^sup>+,
             (State (Suc ?k) (index (?\<Pi>\<^sub>\<V>) ?v))\<inverse>}}",
     template_implication
      ([template_predicate
         (template_app (template_hole 24, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 23, template_var 3),
              template_app
               (template_app (template_hole 22, template_var 4),
                template_var 2))
            ),
        template_inequation (less_than, template_var 1, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 20, template_var 0),
              template_app
               (template_hole 19,
                template_app (template_hole 18, template_var 4)))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 16,
                    template_app
                     (template_hole 15,
                      template_app
                       (template_app
                         (template_hole 14,
                          template_app
                           (template_app
                             (template_app
                               (template_hole 13, template_var 4),
                              template_var 3),
                            template_var 2)),
                        template_var 1))),
                  t_empty)
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 9, template_var 3),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 5, template_var 1),
                         template_app
                          (template_app
                            (template_hole 4,
                             template_app
                              (template_hole 18, template_var 4)),
                           template_var 0)))),
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_app
                            (template_hole 5,
                             template_app
                              (template_hole 2, template_var 1)),
                           template_app
                            (template_app
                              (template_hole 4,
                               template_app
                                (template_hole 18, template_var 4)),
                             template_var 0)))),
                     template_hole 1))),
               template_hole 0))
           ))),
    ("SAT_Plan_Base.encode_problem_parallel_complete_i",
     "[| is_valid_problem_strips ?\<Pi>;
         ?\<Pi>\<^sub>G \<subseteq>\<^sub>m
         execute_parallel_plan (?\<Pi>\<^sub>I) ?\<pi>;
         ALL v k.
            k < length
                 (trace_parallel_plan_strips (?\<Pi>\<^sub>I) ?\<pi>) -->
            ?\<A> (State k (index (?\<Pi>\<^sub>\<V>) v)) =
            ((trace_parallel_plan_strips (?\<Pi>\<^sub>I) ?\<pi> ! k) v =
             Some True) &
            (~ ?\<A> (State k (index (?\<Pi>\<^sub>\<V>) v))) =
            ((trace_parallel_plan_strips (?\<Pi>\<^sub>I) ?\<pi> ! k) v ~=
             Some True) |]
      ==> ?\<A> \<Turnstile> \<Phi>\<^sub>I ?\<Pi>",
     template_implication
      ([template_predicate
         (template_app (template_hole 22, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 21,
                template_app (template_hole 20, template_var 2)),
              template_app
               (template_app
                 (template_hole 19,
                  template_app (template_hole 18, template_var 2)),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 17, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 2))
           ))),
    ("SAT_Plan_Base.encode_all_frame_axioms_set",
     "set (map (%(k, v). encode_negative_transition_frame_axiom ?\<Pi> k v)
            (List.product [0..<?t] (?\<Pi>\<^sub>\<V>)) @
           map (%(k, v). encode_positive_transition_frame_axiom ?\<Pi> k v)
            (List.product [0..<?t] (?\<Pi>\<^sub>\<V>))) =
      {encode_negative_transition_frame_axiom ?\<Pi> k v |k v.
       (k, v) : {0..<?t} \<times> set (?\<Pi>\<^sub>\<V>)} Un
      {encode_positive_transition_frame_axiom ?\<Pi> k v |k v.
       (k, v) : {0..<?t} \<times> set (?\<Pi>\<^sub>\<V>)}",
     template_equation
      (template_app
        (template_hole 20,
         template_app
          (template_app
            (template_hole 19,
             template_app
              (template_app
                (template_hole 18,
                 template_app (template_hole 17, t_empty)),
               template_app
                (template_app
                  (template_hole 15,
                   template_app
                    (template_app (template_hole 14, template_hole 13),
                     template_var 0)),
                 template_app (template_hole 12, template_var 1)))),
           template_app
            (template_app
              (template_hole 18, template_app (template_hole 17, t_empty)),
             template_app
              (template_app
                (template_hole 15,
                 template_app
                  (template_app (template_hole 14, template_hole 13),
                   template_var 0)),
               template_app (template_hole 12, template_var 1))))),
       template_app
        (template_app
          (template_hole 10, template_app (template_hole 9, t_empty)),
         template_app (template_hole 9, t_empty)))),
    ("SAT_Plan_Base.cnf_of_encode_all_operator_effects_structure",
     "cnf (encode_all_operator_effects ?\<Pi> (?\<Pi>\<^sub>\<O>) ?t) =
      (UN (k, op):{0..<?t} \<times> set (?\<Pi>\<^sub>\<O>).
          UN v:set (add_effects_of op).
             {{(Operator k (index (?\<Pi>\<^sub>\<O>) op))\<inverse>,
               (State (Suc k) (index (?\<Pi>\<^sub>\<V>) v))\<^sup>+}}) Un
      (UN (k, op):{0..<?t} \<times> set (?\<Pi>\<^sub>\<O>).
          UN v:set (delete_effects_of op).
             {{(Operator k (index (?\<Pi>\<^sub>\<O>) op))\<inverse>,
               (State (Suc k) (index (?\<Pi>\<^sub>\<V>) v))\<inverse>}})",
     template_equation
      (template_app
        (template_hole 26,
         template_app
          (template_app
            (template_app (template_hole 25, template_var 1),
             template_app (template_hole 24, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 23,
           template_app
            (template_hole 22,
             template_app
              (template_app
                (template_hole 21,
                 template_app (template_hole 20, t_empty)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_hole 2),
                     template_var 0)),
                 t_empty)))),
         template_app
          (template_hole 22,
           template_app
            (template_app
              (template_hole 21, template_app (template_hole 20, t_empty)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_var 0)),
               t_empty)))))),
    ("SAT_Plan_Base.encode_problem_parallel_complete_ii",
     "[| is_valid_problem_strips ?\<Pi>;
         ?\<Pi>\<^sub>G \<subseteq>\<^sub>m
         execute_parallel_plan (?\<Pi>\<^sub>I) ?\<pi>;
         ALL v k.
            k < length
                 (trace_parallel_plan_strips (?\<Pi>\<^sub>I) ?\<pi>) -->
            ?\<A> (State k (index (?\<Pi>\<^sub>\<V>) v)) =
            ((trace_parallel_plan_strips (?\<Pi>\<^sub>I) ?\<pi> ! k) v =
             Some True);
         ALL v l.
            length (trace_parallel_plan_strips (?\<Pi>\<^sub>I) ?\<pi>)
            <= l &
            l < length ?\<pi> + 1 -->
            ?\<A> (State l (index (?\<Pi>\<^sub>\<V>) v)) =
            ?\<A>
             (State
               (length
                 (trace_parallel_plan_strips (?\<Pi>\<^sub>I) ?\<pi>) -
                1)
               (index (?\<Pi>\<^sub>\<V>) v)) |]
      ==> ?\<A> \<Turnstile> (\<Phi>\<^sub>G ?\<Pi>) (length ?\<pi>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 26, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 25,
                template_app (template_hole 24, template_var 2)),
              template_app
               (template_app
                 (template_hole 23,
                  template_app (template_hole 22, template_var 2)),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 21, t_empty)),
        template_predicate (template_app (template_hole 21, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_app (template_hole 4, template_var 1)))
           ))),
    ("SAT_Plan_Base.encode_problem_parallel_complete_iii",
     "[| is_valid_problem_strips ?\<Pi>;
         ?\<Pi>\<^sub>G \<subseteq>\<^sub>m
         execute_parallel_plan (?\<Pi>\<^sub>I) ?\<pi>;
         ALL k op.
            k < length
                 (trace_parallel_plan_strips (?\<Pi>\<^sub>I) ?\<pi>) -
                1 -->
            ?\<A> (Operator k (index (?\<Pi>\<^sub>\<O>) op)) =
            (op : set (?\<pi> ! k));
         ALL l op.
            length (trace_parallel_plan_strips (?\<Pi>\<^sub>I) ?\<pi>) - 1
            <= l &
            l < length ?\<pi> -->
            ~ ?\<A> (Operator l (index (?\<Pi>\<^sub>\<O>) op));
         ALL v k.
            k < length
                 (trace_parallel_plan_strips (?\<Pi>\<^sub>I) ?\<pi>) -->
            ?\<A> (State k (index (?\<Pi>\<^sub>\<V>) v)) =
            ((trace_parallel_plan_strips (?\<Pi>\<^sub>I) ?\<pi> ! k) v =
             Some True) |]
      ==> ?\<A> \<Turnstile> encode_operators ?\<Pi> (length ?\<pi>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 33, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 32,
                template_app (template_hole 31, template_var 2)),
              template_app
               (template_app
                 (template_hole 30,
                  template_app (template_hole 29, template_var 2)),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 28, t_empty)),
        template_predicate (template_app (template_hole 28, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_app (template_hole 11, template_var 1)))
           ))),
    ("SAT_Plan_Base.encode_problem_parallel_complete_iii_b",
     "[| is_valid_problem_strips ?\<Pi>;
         ?\<Pi>\<^sub>G \<subseteq>\<^sub>m
         execute_parallel_plan (?\<Pi>\<^sub>I) ?\<pi>;
         ?C : cnf (encode_all_operator_effects ?\<Pi> (?\<Pi>\<^sub>\<O>)
                    (length ?\<pi>));
         ALL k op.
            k < length
                 (trace_parallel_plan_strips (?\<Pi>\<^sub>I) ?\<pi>) -
                1 -->
            ?\<A> (Operator k (index (?\<Pi>\<^sub>\<O>) op)) =
            (op : set (?\<pi> ! k));
         ALL l op.
            length (trace_parallel_plan_strips (?\<Pi>\<^sub>I) ?\<pi>) - 1
            <= l &
            l < length ?\<pi> -->
            ~ ?\<A> (Operator l (index (?\<Pi>\<^sub>\<O>) op));
         ALL v k.
            k < length
                 (trace_parallel_plan_strips (?\<Pi>\<^sub>I) ?\<pi>) -->
            ?\<A> (State k (index (?\<Pi>\<^sub>\<V>) v)) =
            ((trace_parallel_plan_strips (?\<Pi>\<^sub>I) ?\<pi> ! k) v =
             Some True) |]
      ==> clause_semantics ?\<A> ?C",
     template_implication
      ([template_predicate
         (template_app (template_hole 35, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 34,
                template_app (template_hole 33, template_var 3)),
              template_app
               (template_app
                 (template_hole 32,
                  template_app (template_hole 31, template_var 3)),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 30, template_var 1),
              template_app
               (template_hole 29,
                template_app
                 (template_app
                   (template_app (template_hole 28, template_var 3),
                    template_app (template_hole 27, template_var 3)),
                  template_app (template_hole 26, template_var 2))))
            ),
        template_predicate (template_app (template_hole 25, t_empty)),
        template_predicate (template_app (template_hole 25, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("SAT_Plan_Base.encode_problem_parallel_complete_iii_a",
     "[| is_valid_problem_strips ?\<Pi>;
         ?\<Pi>\<^sub>G \<subseteq>\<^sub>m
         execute_parallel_plan (?\<Pi>\<^sub>I) ?\<pi>;
         ?C : cnf (encode_all_operator_preconditions ?\<Pi>
                    (?\<Pi>\<^sub>\<O>) (length ?\<pi>));
         ALL k op.
            k < length
                 (trace_parallel_plan_strips (?\<Pi>\<^sub>I) ?\<pi>) -
                1 -->
            ?\<A> (Operator k (index (?\<Pi>\<^sub>\<O>) op)) =
            (op : set (?\<pi> ! k));
         ALL l op.
            length (trace_parallel_plan_strips (?\<Pi>\<^sub>I) ?\<pi>) - 1
            <= l &
            l < length ?\<pi> -->
            ~ ?\<A> (Operator l (index (?\<Pi>\<^sub>\<O>) op));
         ALL v k.
            k < length
                 (trace_parallel_plan_strips (?\<Pi>\<^sub>I) ?\<pi>) -->
            ?\<A> (State k (index (?\<Pi>\<^sub>\<V>) v)) =
            ((trace_parallel_plan_strips (?\<Pi>\<^sub>I) ?\<pi> ! k) v =
             Some True) |]
      ==> clause_semantics ?\<A> ?C",
     template_implication
      ([template_predicate
         (template_app (template_hole 35, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 34,
                template_app (template_hole 33, template_var 3)),
              template_app
               (template_app
                 (template_hole 32,
                  template_app (template_hole 31, template_var 3)),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 30, template_var 1),
              template_app
               (template_hole 29,
                template_app
                 (template_app
                   (template_app (template_hole 28, template_var 3),
                    template_app (template_hole 27, template_var 3)),
                  template_app (template_hole 26, template_var 2))))
            ),
        template_predicate (template_app (template_hole 25, t_empty)),
        template_predicate (template_app (template_hole 25, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("SAT_Plan_Base.encode_problem_parallel_complete_iv",
     "[| is_valid_problem_strips ?\<Pi>;
         is_parallel_solution_for_problem ?\<Pi> ?\<pi>;
         ALL k op.
            k < length
                 (trace_parallel_plan_strips (?\<Pi>\<^sub>I) ?\<pi>) -
                1 -->
            ?\<A> (Operator k (index (?\<Pi>\<^sub>\<O>) op)) =
            (op : set (?\<pi> ! k));
         ALL v k.
            k < length
                 (trace_parallel_plan_strips (?\<Pi>\<^sub>I) ?\<pi>) -->
            ?\<A> (State k (index (?\<Pi>\<^sub>\<V>) v)) =
            ((trace_parallel_plan_strips (?\<Pi>\<^sub>I) ?\<pi> ! k) v =
             Some True);
         ALL v l.
            length (trace_parallel_plan_strips (?\<Pi>\<^sub>I) ?\<pi>)
            <= l &
            l < length ?\<pi> + 1 -->
            ?\<A> (State l (index (?\<Pi>\<^sub>\<V>) v)) =
            ?\<A>
             (State
               (length
                 (trace_parallel_plan_strips (?\<Pi>\<^sub>I) ?\<pi>) -
                1)
               (index (?\<Pi>\<^sub>\<V>) v)) |]
      ==> ?\<A> \<Turnstile>
          encode_all_frame_axioms ?\<Pi> (length ?\<pi>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 31, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 30, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 29, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_app (template_hole 2, template_var 1)))
           ))),
    ("SAT_Plan_Base.cnf_of_encode_all_frame_axioms_structure",
     "cnf (encode_all_frame_axioms ?\<Pi> ?t) =
      \<Union>
       (UN (k, v):{0..<?t} \<times> set (?\<Pi>\<^sub>\<V>).
           {{{(State k (index (?\<Pi>\<^sub>\<V>) v))\<^sup>+,
              (State (Suc k) (index (?\<Pi>\<^sub>\<V>) v))\<inverse>} Un
             {(Operator k (index (?\<Pi>\<^sub>\<O>) op))\<^sup>+ |op.
              op : set (?\<Pi>\<^sub>\<O>) &
              v : set (add_effects_of op)}}}) Un
      \<Union>
       (UN (k, v):{0..<?t} \<times> set (?\<Pi>\<^sub>\<V>).
           {{{(State k (index (?\<Pi>\<^sub>\<V>) v))\<inverse>,
              (State (Suc k) (index (?\<Pi>\<^sub>\<V>) v))\<^sup>+} Un
             {(Operator k (index (?\<Pi>\<^sub>\<O>) op))\<^sup>+ |op.
              op : set (?\<Pi>\<^sub>\<O>) &
              v : set (delete_effects_of op)}}})",
     template_equation
      (template_app
        (template_hole 35,
         template_app
          (template_app (template_hole 34, template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 33,
           template_app
            (template_hole 32,
             template_app
              (template_hole 31,
               template_app
                (template_app
                  (template_hole 30,
                   template_app (template_hole 29, t_empty)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_hole 1),
                       template_var 0)),
                   t_empty))))),
         template_app
          (template_hole 32,
           template_app
            (template_hole 31,
             template_app
              (template_app
                (template_hole 30,
                 template_app (template_hole 29, t_empty)),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_var 0)),
                 t_empty))))))),
    ("SAT_Plan_Base.encode_problem_parallel_complete_iv_b",
     "[| is_parallel_solution_for_problem ?\<Pi> ?\<pi>;
         ALL k op.
            k < length
                 (trace_parallel_plan_strips (?\<Pi>\<^sub>I) ?\<pi>) -
                1 -->
            ?\<A> (Operator k (index (?\<Pi>\<^sub>\<O>) op)) =
            (op : set (?\<pi> ! k));
         ALL v k.
            k < length
                 (trace_parallel_plan_strips (?\<Pi>\<^sub>I) ?\<pi>) -->
            ?\<A> (State k (index (?\<Pi>\<^sub>\<V>) v)) =
            ((trace_parallel_plan_strips (?\<Pi>\<^sub>I) ?\<pi> ! k) v =
             Some True);
         ALL v l.
            length (trace_parallel_plan_strips (?\<Pi>\<^sub>I) ?\<pi>)
            <= l &
            l < length ?\<pi> + 1 -->
            ?\<A> (State l (index (?\<Pi>\<^sub>\<V>) v)) =
            ?\<A>
             (State
               (length
                 (trace_parallel_plan_strips (?\<Pi>\<^sub>I) ?\<pi>) -
                1)
               (index (?\<Pi>\<^sub>\<V>) v));
         ?C : \<Union>
               (UN (k,
                   v):{0..<length ?\<pi>} \<times> set (?\<Pi>\<^sub>\<V>).
                   {{{(State k (index (?\<Pi>\<^sub>\<V>) v))\<inverse>,
                      (State (Suc k)
                        (index (?\<Pi>\<^sub>\<V>) v))\<^sup>+} Un
                     {(Operator k (index (?\<Pi>\<^sub>\<O>) op))\<^sup>+ |
                      op.
                      op : set (?\<Pi>\<^sub>\<O>) &
                      v : set (delete_effects_of op)}}}) |]
      ==> clause_semantics ?\<A> ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 53, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 52, t_empty)),
        template_predicate (template_app (template_hole 36, t_empty)),
        template_predicate (template_app (template_hole 36, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 24, template_var 0),
              template_app
               (template_hole 23,
                template_app
                 (template_hole 22,
                  template_app
                   (template_app
                     (template_hole 21,
                      template_app (template_hole 20, t_empty)),
                    template_app
                     (template_app
                       (template_hole 3,
                        template_app
                         (template_app (template_hole 2, template_hole 1),
                          template_app (template_hole 25, template_var 2))),
                      t_empty)))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("SAT_Plan_Base.encode_problem_parallel_complete_iv_a",
     "[| is_parallel_solution_for_problem ?\<Pi> ?\<pi>;
         ALL k op.
            k < length
                 (trace_parallel_plan_strips (?\<Pi>\<^sub>I) ?\<pi>) -
                1 -->
            ?\<A> (Operator k (index (?\<Pi>\<^sub>\<O>) op)) =
            (op : set (?\<pi> ! k));
         ALL v k.
            k < length
                 (trace_parallel_plan_strips (?\<Pi>\<^sub>I) ?\<pi>) -->
            ?\<A> (State k (index (?\<Pi>\<^sub>\<V>) v)) =
            ((trace_parallel_plan_strips (?\<Pi>\<^sub>I) ?\<pi> ! k) v =
             Some True);
         ALL v l.
            length (trace_parallel_plan_strips (?\<Pi>\<^sub>I) ?\<pi>)
            <= l &
            l < length ?\<pi> + 1 -->
            ?\<A> (State l (index (?\<Pi>\<^sub>\<V>) v)) =
            ?\<A>
             (State
               (length
                 (trace_parallel_plan_strips (?\<Pi>\<^sub>I) ?\<pi>) -
                1)
               (index (?\<Pi>\<^sub>\<V>) v));
         ?C : \<Union>
               (UN (k,
                   v):{0..<length ?\<pi>} \<times> set (?\<Pi>\<^sub>\<V>).
                   {{{(State k (index (?\<Pi>\<^sub>\<V>) v))\<^sup>+,
                      (State (Suc k)
                        (index (?\<Pi>\<^sub>\<V>) v))\<inverse>} Un
                     {(Operator k (index (?\<Pi>\<^sub>\<O>) op))\<^sup>+ |
                      op.
                      op : set (?\<Pi>\<^sub>\<O>) &
                      v : set (add_effects_of op)}}}) |]
      ==> clause_semantics ?\<A> ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 53, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 52, t_empty)),
        template_predicate (template_app (template_hole 36, t_empty)),
        template_predicate (template_app (template_hole 36, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 24, template_var 0),
              template_app
               (template_hole 23,
                template_app
                 (template_hole 22,
                  template_app
                   (template_app
                     (template_hole 21,
                      template_app (template_hole 20, t_empty)),
                    template_app
                     (template_app
                       (template_hole 3,
                        template_app
                         (template_app (template_hole 2, template_hole 1),
                          template_app (template_hole 25, template_var 2))),
                      t_empty)))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           )))]:
   (string * thm * template) list
### theory "Draft.SAT_Plan_BaseMoreTemplates"
### 0.460s elapsed time, 0.637s cpu time, 0.111s GC time
*** Undefined fact: "inj_on_f_set_l" (line 4806 of "$AFP/Verified_SAT_Based_AI_Planning/SAT_Plan_Base.thy")
*** At command "thm" (line 4806 of "$AFP/Verified_SAT_Based_AI_Planning/SAT_Plan_Base.thy")
*** Undefined fact: "nb\<^sub>3" (line 3357 of "$AFP/Verified_SAT_Based_AI_Planning/SAT_Plan_Base.thy")
*** At command "thm" (line 3357 of "$AFP/Verified_SAT_Based_AI_Planning/SAT_Plan_Base.thy")
*** Undefined fact: "Suc.prems" (line 3293 of "$AFP/Verified_SAT_Based_AI_Planning/SAT_Plan_Base.thy")
*** At command "thm" (line 3293 of "$AFP/Verified_SAT_Based_AI_Planning/SAT_Plan_Base.thy")
*** Undefined fact: "Cons.prems" (line 1667 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
*** At command "thm" (line 1667 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
*** Undefined fact: "Cons.IH" (line 712 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
*** At command "thm" (line 712 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
*** Undefined fact: "f" (line 389 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")2880fComp_deffactATP.fComp_deff_arg_min_list_ffactList.f_arg_min_list_ff_inv_into_ffactHilbert_Choice.f_inv_into_ff_the_inv_into_ffactFun.f_the_inv_into_ff_the_inv_into_f_bij_betwfactFun.f_the_inv_into_f_bij_betwfact_0factFactorial.semiring_char_0_class.fact_0fact_1factFactorial.semiring_char_0_class.fact_1fact_2factFactorial.semiring_char_0_class.fact_2fact_SucfactFactorial.semiring_char_0_class.fact_Sucfact_Suc_0factFactorial.semiring_char_0_class.fact_Suc_0fact_binomialfactBinomial.fact_binomialfact_codefactFactorial.fact_codefact_dictfactFactorial.semiring_char_0_class.fact_dictfact_div_factfactFactorial.fact_div_factfact_div_fact_le_powfactFactorial.fact_div_fact_le_powfact_doublefactFactorial.fact_doublefact_dvdfactFactorial.fact_dvdfact_fact_dvd_factfactBinomial.fact_fact_dvd_factfact_ge_1factFactorial.fact_ge_1fact_ge_Suc_0_natfactFactorial.fact_ge_Suc_0_natfact_ge_selffactFactorial.fact_ge_selffact_ge_zerofactFactorial.fact_ge_zerofact_gt_zerofactFactorial.fact_gt_zerofact_in_IntsfactFactorial.fact_in_Intsfact_in_NatsfactFactorial.fact_in_Natsfact_le_powerfactFactorial.fact_le_powerfact_less_monofactFactorial.fact_less_monofact_less_mono_natfactFactorial.fact_less_mono_natfact_modfactFactorial.fact_modfact_monofactFactorial.fact_monofact_mono_natfactFactorial.fact_mono_natfact_nonzerofactFactorial.fact_nonzerofact_not_negfactFactorial.fact_not_negfact_num_eq_iffactFactorial.fact_num_eq_iffact_numeralfactFactorial.fact_numeralfact_prodfactFactorial.semiring_char_0_class.fact_prodfact_prod_SucfactFactorial.semiring_char_0_class.fact_prod_Sucfact_prod_revfactFactorial.semiring_char_0_class.fact_prod_revfact_reducefactFactorial.fact_reducefact_splitfactFactorial.semiring_char_0_class.fact_split
*** At command "thm" (line 389 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
Exception- TOPLEVEL_ERROR raised
