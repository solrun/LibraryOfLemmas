Loading theory "Draft.List_Supplement" (required by "Draft.SAS_Plus_STRIPSMoreTemplates" via "Draft.SAS_Plus_STRIPS" via "Draft.STRIPS_Semantics")
Loading theory "Draft.Map_Supplement" (required by "Draft.SAS_Plus_STRIPSMoreTemplates" via "Draft.SAS_Plus_STRIPS" via "Draft.STRIPS_Semantics")
Loading theory "HOL-Library.Case_Converter" (required by "Draft.SAS_Plus_STRIPSMoreTemplates" via "Draft.SAS_Plus_STRIPS" via "Draft.STRIPS_Semantics" via "Draft.STRIPS_Representation" via "Draft.State_Variable_Representation" via "Propositional_Proof_Systems.CNF" via "HOL-Library.Simps_Case_Conv")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SAS_Plus_STRIPSMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
consts
  embed :: "'a list => 'a list list"
### theory "Draft.Map_Supplement"
### 0.062s elapsed time, 0.278s cpu time, 0.000s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SAS_Plus_STRIPSMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.List_Supplement"
### 0.072s elapsed time, 0.320s cpu time, 0.000s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.SAS_Plus_STRIPSMoreTemplates" via "Draft.SAS_Plus_STRIPS" via "Draft.STRIPS_Semantics" via "Draft.STRIPS_Representation" via "Draft.State_Variable_Representation" via "Propositional_Proof_Systems.Formulas" via "HOL-Library.Countable")
### theory "HOL-Library.Function_Algebras"
### 0.168s elapsed time, 0.684s cpu time, 0.063s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SAS_Plus_STRIPSMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
signature CASE_CONVERTER =
  sig
    type elimination_strategy
    val keep_constructor_context: elimination_strategy
    val replace_by_type:
       (Proof.context -> string * string -> bool) -> elimination_strategy
    val to_case:
       Proof.context ->
         elimination_strategy ->
           (string * typ -> int) -> thm list -> thm list option
  end
structure Case_Converter: CASE_CONVERTER
### theory "HOL-Library.Case_Converter"
### 0.250s elapsed time, 1.012s cpu time, 0.063s GC time
Loading theory "HOL-Library.Simps_Case_Conv" (required by "Draft.SAS_Plus_STRIPSMoreTemplates" via "Draft.SAS_Plus_STRIPS" via "Draft.STRIPS_Semantics" via "Draft.STRIPS_Representation" via "Draft.State_Variable_Representation" via "Propositional_Proof_Systems.CNF")
signature SIMPS_CASE_CONV =
  sig
    val gen_to_simps: Proof.context -> thm list -> thm -> thm list
    val to_case: Proof.context -> thm list -> thm
    val to_simps: Proof.context -> thm -> thm list
  end
structure Simps_Case_Conv: SIMPS_CASE_CONV
### theory "HOL-Library.Simps_Case_Conv"
### 0.088s elapsed time, 0.341s cpu time, 0.063s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SAS_Plus_STRIPSMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.223s elapsed time, 0.882s cpu time, 0.063s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SAS_Plus_STRIPSMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.391s elapsed time, 1.531s cpu time, 0.127s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SAS_Plus_STRIPSMoreTemplates" via "Draft.ExtrEqs")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.473s elapsed time, 1.844s cpu time, 0.201s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.SAS_Plus_STRIPSMoreTemplates" via "Draft.SAS_Plus_STRIPS" via "Draft.STRIPS_Semantics" via "Draft.STRIPS_Representation" via "Draft.State_Variable_Representation" via "Propositional_Proof_Systems.Formulas")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
### Additional type variable(s) in locale specification "countable": 'a
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.766s elapsed time, 3.020s cpu time, 0.264s GC time
Loading theory "Propositional_Proof_Systems.CNF" (required by "Draft.SAS_Plus_STRIPSMoreTemplates" via "Draft.SAS_Plus_STRIPS" via "Draft.STRIPS_Semantics" via "Draft.STRIPS_Representation" via "Draft.State_Variable_Representation")
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.051s elapsed time, 3.991s cpu time, 0.851s GC time
[| (?x, ?y) : ?r; (?xs, ?ys) : listrel ?r |]
==> (?x # ?xs, ?y # ?ys) : listrel ?r
[| (?x, ?y) : ?r; (?xs, ?ys) : listrel ?r |]
==> (?x # ?xs, ?y # ?ys) : listrel ?r
[| (?x, ?y) : ?r; (?xs, ?ys) : listrel ?r |]
==> (?x # ?xs, ?y # ?ys) : listrel ?r
Found termination order: "size <*mlex*> {}"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  atoms_of_lit :: "'a literal => 'a"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Ambiguous input (line 25 of "$AFP/Propositional_Proof_Systems/CNF.thy") produces 2 parse trees:
### ("_constrain"
###   ("_Finset"
###     ("\<^const>Transitive_Closure.trancl"
###       ("\<^const>Groups.zero_class.zero")))
###   ("_tapp" ("_type_name" nat) ("_type_name" clause)))
### ("_constrain"
###   ("_Finset"
###     ("\<^const>CNF.literal.Pos" ("\<^const>Groups.zero_class.zero")))
###   ("_tapp" ("_type_name" nat) ("_type_name" clause)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
"insert (0\<^sup>+) \<box>"
  :: "nat literal set"
### Ambiguous input (line 28 of "$AFP/Propositional_Proof_Systems/CNF.thy") produces 2 parse trees:
### ("_constrain"
###   ("_Finset"
###     ("\<^const>Transitive_Closure.trancl"
###       ("\<^const>Groups.zero_class.zero")))
###   ("_tapp" ("_type_name" nat) ("_type_name" clause)))
### ("_constrain"
###   ("_Finset"
###     ("\<^const>CNF.literal.Pos" ("\<^const>Groups.zero_class.zero")))
###   ("_tapp" ("_type_name" nat) ("_type_name" clause)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
"{0\<^sup>+}"
  :: "nat literal set"
### theory "Propositional_Proof_Systems.CNF"
### 0.651s elapsed time, 2.156s cpu time, 0.657s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.351s elapsed time, 4.785s cpu time, 0.908s GC time
Loading theory "Propositional_Proof_Systems.Formulas" (required by "Draft.SAS_Plus_STRIPSMoreTemplates" via "Draft.SAS_Plus_STRIPS" via "Draft.STRIPS_Semantics" via "Draft.STRIPS_Representation" via "Draft.State_Variable_Representation")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.987s elapsed time, 6.532s cpu time, 1.122s GC time
Loading theory "Draft.Templates" (required by "Draft.SAS_Plus_STRIPSMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.058s elapsed time, 0.137s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SAS_Plus_STRIPSMoreTemplates")
consts
  subformulae :: "'a formula => 'a formula list"
### Ambiguous input (line 62 of "$AFP/Propositional_Proof_Systems/Formulas.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>BigAnd" ("_position" Nil))
###     ("_applC" ("\<^const>Formulas.formula.Not")
###       ("\<^const>Formulas.formula.Bot"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>BigAnd"
###     ("\<^const>HOL.eq" ("_position" Nil)
###       ("_applC" ("\<^const>Formulas.formula.Not")
###         ("\<^const>Formulas.formula.Bot")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 63 of "$AFP/Propositional_Proof_Systems/Formulas.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Formulas.formula.And"
###     ("\<^fixed>BigAnd"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs))
###         ("_position" F)))
###     ("\<^fixed>BigAnd" ("_position" Fs))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>BigAnd"
###       ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs)))
###     ("\<^const>Formulas.formula.And" ("_position" F)
###       ("\<^fixed>BigAnd" ("_position" Fs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>BigAnd"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs))
###       ("\<^const>Formulas.formula.And" ("_position" F)
###         ("\<^fixed>BigAnd" ("_position" Fs))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  BigAnd :: "'a formula list => 'a formula"
### Ambiguous input (line 69 of "$AFP/Propositional_Proof_Systems/Formulas.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>BigOr" ("_position" Nil))
###     ("\<^const>Formulas.formula.Bot")))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>BigOr"
###     ("\<^const>HOL.eq" ("_position" Nil)
###       ("\<^const>Formulas.formula.Bot"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 70 of "$AFP/Propositional_Proof_Systems/Formulas.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Formulas.formula.Or"
###     ("\<^fixed>BigOr"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs))
###         ("_position" F)))
###     ("\<^fixed>BigOr" ("_position" Fs))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>BigOr"
###       ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs)))
###     ("\<^const>Formulas.formula.Or" ("_position" F)
###       ("\<^fixed>BigOr" ("_position" Fs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>BigOr"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.list.Cons" ("_position" F) ("_position" Fs))
###       ("\<^const>Formulas.formula.Or" ("_position" F)
###         ("\<^fixed>BigOr" ("_position" Fs))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  BigOr :: "'a formula list => 'a formula"
consts
  pn_atoms :: "'a formula => 'a set * 'a set"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.791s elapsed time, 1.928s cpu time, 0.823s GC time
Found termination order: "size <*mlex*> {}"
"(3, 2)"
  :: "nat * nat"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Propositional_Proof_Systems.Formulas"
### 1.818s elapsed time, 3.724s cpu time, 1.051s GC time
Loading theory "Propositional_Proof_Systems.Sema" (required by "Draft.SAS_Plus_STRIPSMoreTemplates" via "Draft.SAS_Plus_STRIPS" via "Draft.STRIPS_Semantics" via "Draft.STRIPS_Representation" via "Draft.State_Variable_Representation")
consts
  formula_semantics :: "('a => bool) => 'a formula => bool"
consts
  formula_semantics_alt :: "('a => bool) => 'a formula => bool"
consts
  formula_semantics_tt :: "('a => bool) => 'a formula => bool"
### Ambiguous input (line 72 of "$AFP/Propositional_Proof_Systems/Sema.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" A)
###     ("\<^const>Formulas.BigAnd"
###       ("\<^const>HOL.iff" ("_position" F)
###         ("_Ball" ("_position" f)
###           ("_applC" ("_position" set) ("_position" F))
###           ("\<^const>Sema.formula_semantics" ("_position" A)
###             ("_position" f)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Sema.formula_semantics" ("_position" A)
###       ("\<^const>Formulas.BigAnd" ("_position" F)))
###     ("_Ball" ("_position" f) ("_applC" ("_position" set) ("_position" F))
###       ("\<^const>Sema.formula_semantics" ("_position" A) ("_position" f)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 73 of "$AFP/Propositional_Proof_Systems/Sema.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sema.formula_semantics" ("_position" A)
###     ("\<^const>Formulas.BigOr"
###       ("\<^const>HOL.iff" ("_position" F)
###         ("_Bex" ("_position" f) ("_applC" ("_position" set) ("_position" F))
###           ("\<^const>Sema.formula_semantics" ("_position" A)
###             ("_position" f)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Sema.formula_semantics" ("_position" A)
###       ("\<^const>Formulas.BigOr" ("_position" F)))
###     ("_Bex" ("_position" f) ("_applC" ("_position" set) ("_position" F))
###       ("\<^const>Sema.formula_semantics" ("_position" A) ("_position" f)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Propositional_Proof_Systems.Sema"
### 0.097s elapsed time, 0.104s cpu time, 0.000s GC time
Loading theory "Draft.State_Variable_Representation" (required by "Draft.SAS_Plus_STRIPSMoreTemplates" via "Draft.SAS_Plus_STRIPS" via "Draft.STRIPS_Semantics" via "Draft.STRIPS_Representation")
### theory "Draft.State_Variable_Representation"
### 0.172s elapsed time, 0.172s cpu time, 0.000s GC time
Loading theory "Draft.SAS_Plus_Representation" (required by "Draft.SAS_Plus_STRIPSMoreTemplates" via "Draft.SAS_Plus_STRIPS" via "Draft.SAS_Plus_Semantics")
Loading theory "Draft.STRIPS_Representation" (required by "Draft.SAS_Plus_STRIPSMoreTemplates" via "Draft.SAS_Plus_STRIPS" via "Draft.STRIPS_Semantics")
"stop"
  :: "'a"
### theory "Draft.STRIPS_Representation"
### 0.584s elapsed time, 1.251s cpu time, 0.172s GC time
Loading theory "Draft.STRIPS_Semantics" (required by "Draft.SAS_Plus_STRIPSMoreTemplates" via "Draft.SAS_Plus_STRIPS")
### theory "Draft.SAS_Plus_Representation"
### 0.681s elapsed time, 1.447s cpu time, 0.172s GC time
Loading theory "Draft.SAS_Plus_Semantics" (required by "Draft.SAS_Plus_STRIPSMoreTemplates" via "Draft.SAS_Plus_STRIPS")
consts
  execute_serial_plan ::
    "('a => bool option) => 'a strips_operator list => 'a => bool option"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  execute_serial_plan_sas_plus ::
    "('a => 'b option)
     => ('a, 'b) sas_plus_operator list => 'a => 'b option"
*** Undefined fact: "f" (line 389 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")2880fComp_deffactATP.fComp_deff_arg_min_list_ffactList.f_arg_min_list_ff_inv_into_ffactHilbert_Choice.f_inv_into_ff_the_inv_into_ffactFun.f_the_inv_into_ff_the_inv_into_f_bij_betwfactFun.f_the_inv_into_f_bij_betwfact_0factFactorial.semiring_char_0_class.fact_0fact_1factFactorial.semiring_char_0_class.fact_1fact_2factFactorial.semiring_char_0_class.fact_2fact_SucfactFactorial.semiring_char_0_class.fact_Sucfact_Suc_0factFactorial.semiring_char_0_class.fact_Suc_0fact_binomialfactBinomial.fact_binomialfact_codefactFactorial.fact_codefact_dictfactFactorial.semiring_char_0_class.fact_dictfact_div_factfactFactorial.fact_div_factfact_div_fact_le_powfactFactorial.fact_div_fact_le_powfact_doublefactFactorial.fact_doublefact_dvdfactFactorial.fact_dvdfact_fact_dvd_factfactBinomial.fact_fact_dvd_factfact_ge_1factFactorial.fact_ge_1fact_ge_Suc_0_natfactFactorial.fact_ge_Suc_0_natfact_ge_selffactFactorial.fact_ge_selffact_ge_zerofactFactorial.fact_ge_zerofact_gt_zerofactFactorial.fact_gt_zerofact_in_IntsfactFactorial.fact_in_Intsfact_in_NatsfactFactorial.fact_in_Natsfact_le_powerfactFactorial.fact_le_powerfact_less_monofactFactorial.fact_less_monofact_less_mono_natfactFactorial.fact_less_mono_natfact_modfactFactorial.fact_modfact_monofactFactorial.fact_monofact_mono_natfactFactorial.fact_mono_natfact_nonzerofactFactorial.fact_nonzerofact_not_negfactFactorial.fact_not_negfact_num_eq_iffactFactorial.fact_num_eq_iffact_numeralfactFactorial.fact_numeralfact_prodfactFactorial.semiring_char_0_class.fact_prodfact_prod_SucfactFactorial.semiring_char_0_class.fact_prod_Sucfact_prod_revfactFactorial.semiring_char_0_class.fact_prod_revfact_reducefactFactorial.fact_reducefact_splitfactFactorial.semiring_char_0_class.fact_split
*** At command "thm" (line 389 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
Found termination order: "(%p. size_list length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list length (snd p)) <*mlex*> {}"
consts
  are_all_operators_non_interfering ::
    "'variable strips_operator list => bool"
Found termination order: "(%p. size_list length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list length (snd p)) <*mlex*> {}"
*** Undefined fact: "Suc.IH" (line 472 of "$AFP/Verified_SAT_Based_AI_Planning/SAS_Plus_Semantics.thy")
*** At command "thm" (line 472 of "$AFP/Verified_SAT_Based_AI_Planning/SAS_Plus_Semantics.thy")
[| ALL op:set ?\<psi>. are_operator_effects_consistent op op;
   ?G \<subseteq>\<^sub>m execute_serial_plan_sas_plus ?I ?\<psi> |]
==> ?G \<subseteq>\<^sub>m
    execute_parallel_plan_sas_plus ?I (List_Supplement.embed ?\<psi>)
### theory "Draft.SAS_Plus_Semantics"
### 0.639s elapsed time, 1.530s cpu time, 0.172s GC time
*** Undefined fact: "Cons.IH" (line 712 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
*** At command "thm" (line 712 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
*** Undefined fact: "Cons.prems" (line 1667 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
*** At command "thm" (line 1667 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
[| are_all_operators_applicable I ?ops;
   are_all_operator_effects_consistent ?ops;
   are_all_operators_non_interfering ?ops |]
==> execute_parallel_operator I ?ops = execute_serial_plan I ?ops
### theory "Draft.STRIPS_Semantics"
### 1.238s elapsed time, 3.069s cpu time, 1.245s GC time
Loading theory "Draft.SAS_Plus_STRIPS" (required by "Draft.SAS_Plus_STRIPSMoreTemplates")
*** Undefined fact: "nb\<^sub>1\<^sub>2" (line 2373 of "$AFP/Verified_SAT_Based_AI_Planning/SAS_Plus_STRIPS.thy")
*** At command "thm" (line 2373 of "$AFP/Verified_SAT_Based_AI_Planning/SAS_Plus_STRIPS.thy")
*** Undefined fact: "assms" (line 2355 of "$AFP/Verified_SAT_Based_AI_Planning/SAS_Plus_STRIPS.thy")
*** At command "thm" (line 2355 of "$AFP/Verified_SAT_Based_AI_Planning/SAS_Plus_STRIPS.thy")
*** Undefined fact: "calculation" (line 2193 of "$AFP/Verified_SAT_Based_AI_Planning/SAS_Plus_STRIPS.thy")
*** At command "thm" (line 2193 of "$AFP/Verified_SAT_Based_AI_Planning/SAS_Plus_STRIPS.thy")
*** Undefined fact: "nb\<^sub>5" (line 2392 of "$AFP/Verified_SAT_Based_AI_Planning/SAS_Plus_STRIPS.thy")
*** At command "thm" (line 2392 of "$AFP/Verified_SAT_Based_AI_Planning/SAS_Plus_STRIPS.thy")
### theory "Draft.SAS_Plus_STRIPS"
### 0.706s elapsed time, 0.988s cpu time, 0.109s GC time
Loading theory "Draft.SAS_Plus_STRIPSMoreTemplates"
val templateLemmas =
   [("SAS_Plus_STRIPS.is_valid_problem_sas_plus_then_strips_transformation_too",
     "is_valid_problem_sas_plus ?\<Psi> ==>
      is_valid_problem_strips (\<phi> ?\<Psi> )",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("SAS_Plus_STRIPS.sas_plus_formalism_and_induced_strips_formalism_are_equally_expressive_ii_a",
     "is_valid_problem_sas_plus ?\<Psi> ==>
      finite (bounded_solution_set_sas_plus' ?\<Psi> ?k)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("SAS_Plus_STRIPS.sas_plus_formalism_and_induced_strips_formalism_are_equally_expressive_ii_b",
     "is_valid_problem_sas_plus ?\<Psi> ==>
      finite (bounded_solution_set_strips' (\<phi> ?\<Psi> ) ?k)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1)),
               template_var 0))
           ))),
    ("SAS_Plus_STRIPS.is_valid_problem_sas_plus_then_strips_transformation_too_iii",
     "is_valid_problem_sas_plus ?\<Psi> ==>
      list_all (is_valid_operator_strips (\<phi> ?\<Psi> ))
       ((\<phi> ?\<Psi> )\<^sub>\<O>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0))),
             template_app
              (template_hole 0,
               template_app (template_hole 1, template_var 0)))
           ))),
    ("SAS_Plus_STRIPS.serial_sas_plus_equivalent_to_serial_strips_ii",
     "concat (\<phi>\<^sub>P ?\<Psi> List_Supplement.embed ?\<psi>) =
      map (sasp_op_to_strips ?\<Psi>) ?\<psi>",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app (template_hole 1, t_empty), template_var 0))),
    ("SAS_Plus_STRIPS.serial_strips_equivalent_to_serial_sas_plus_ii",
     "concat
       (\<phi>\<^sub>P\<inverse> ?\<Pi> List_Supplement.embed ?\<pi>) =
      map (strips_op_to_sasp ?\<Pi>) ?\<pi>",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app (template_hole 1, t_empty), template_var 0))),
    ("SAS_Plus_STRIPS.sasp_op_to_strips_injective",
     "\<phi>\<^sub>O ?\<Psi> ?op\<^sub>1 =
      \<phi>\<^sub>O ?\<Psi> ?op\<^sub>2 ==>
      ?op\<^sub>1 = ?op\<^sub>2",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 1, template_var 2),
            template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("SAS_Plus_STRIPS.bounded_plan_set_finite",
     "finite (bounded_plan_set ?ops ?k)",
     template_predicate
      (
         template_app
          (template_hole 6, template_app (template_hole 5, t_empty))
         )),
    ("SAS_Plus_STRIPS.sas_plus_formalism_and_induced_strips_formalism_are_equally_expressive_i_d",
     "is_valid_problem_sas_plus ?\<Psi> ==>
      card (bounded_solution_set_sas_plus' ?\<Psi> ?k)
      <= card (bounded_solution_set_strips' (\<phi> ?\<Psi> ) ?k)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0))))),
    ("SAS_Plus_STRIPS.is_valid_problem_sas_plus_dom_sas_plus_problem_range_of",
     "is_valid_problem_sas_plus ?\<Psi> ==>
      ALL v:set (?\<Psi>\<^sub>\<V>\<^sub>+). v : dom (range_of ?\<Psi>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 0))),
             t_empty)
           ))),
    ("SAS_Plus_STRIPS.sas_plus_formalism_and_induced_strips_formalism_are_equally_expressive_i_b",
     "is_valid_problem_sas_plus ?\<Psi> ==>
      inj_on (map (sasp_op_to_strips ?\<Psi>))
       (bounded_solution_set_sas_plus' ?\<Psi> ?k)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, t_empty),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("SAS_Plus_STRIPS.strips_equivalent_to_sas_plus",
     "[| is_valid_problem_sas_plus ?\<Psi>;
         SAS_Plus_Semantics.is_parallel_solution_for_problem ?\<Psi>
          ?\<psi> |]
      ==> STRIPS_Semantics.is_parallel_solution_for_problem
           (\<phi> ?\<Psi> ) (\<phi>\<^sub>P ?\<Psi> ?\<psi>)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("SAS_Plus_STRIPS.sas_plus_equivalent_to_strips",
     "[| is_valid_problem_sas_plus ?\<Psi>;
         STRIPS_Semantics.is_parallel_solution_for_problem (\<phi> ?\<Psi> )
          ?\<pi> |]
      ==> SAS_Plus_Semantics.is_parallel_solution_for_problem ?\<Psi>
           (\<phi>\<^sub>P\<inverse> ?\<Psi> ?\<pi>)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("SAS_Plus_STRIPS.serial_sas_plus_equivalent_to_serial_strips",
     "[| is_valid_problem_sas_plus ?\<Psi>;
         SAS_Plus_Semantics.is_serial_solution_for_problem ?\<Psi>
          ?\<psi> |]
      ==> STRIPS_Semantics.is_serial_solution_for_problem (\<phi> ?\<Psi> )
           (map (sasp_op_to_strips ?\<Psi>) ?\<psi>)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_app
              (template_app (template_hole 1, t_empty), template_var 0))
           ))),
    ("SAS_Plus_STRIPS.serial_strips_equivalent_to_serial_sas_plus",
     "[| is_valid_problem_sas_plus ?\<Psi>;
         STRIPS_Semantics.is_serial_solution_for_problem (\<phi> ?\<Psi> )
          ?\<pi> |]
      ==> SAS_Plus_Semantics.is_serial_solution_for_problem ?\<Psi>
           (map (strips_op_to_sasp ?\<Psi>) ?\<pi>)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, t_empty), template_var 0))
           ))),
    ("SAS_Plus_STRIPS.sas_plus_operator_inverse_is",
     "[| is_valid_problem_sas_plus ?\<Psi>;
         ?op : set (?\<Psi>\<^sub>\<O>\<^sub>+) |]
      ==> \<phi>\<^sub>O\<inverse> ?\<Psi> \<phi>\<^sub>O ?\<Psi> ?op =
          ?op",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0))),
    ("SAS_Plus_STRIPS.is_valid_problem_sas_plus_then_strips_transformation_too_iv",
     "is_valid_problem_sas_plus ?\<Psi> ==>
      ALL x.
         (((\<phi> ?\<Psi> )\<^sub>I) x ~= None) =
         ListMem x ((\<phi> ?\<Psi> )\<^sub>\<V>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 9, template_var 0))],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("SAS_Plus_STRIPS.is_valid_problem_sas_plus_then_strips_transformation_too_v",
     "is_valid_problem_sas_plus ?\<Psi> ==>
      ALL x.
         ((\<phi> ?\<Psi> )\<^sub>G) x ~= None -->
         ListMem x ((\<phi> ?\<Psi> )\<^sub>\<V>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 9, template_var 0))],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("SAS_Plus_STRIPS.sas_plus_equivalent_to_strips_i",
     "[| is_valid_problem_sas_plus ?\<Psi>;
         STRIPS_Semantics.is_parallel_solution_for_problem (\<phi> ?\<Psi> )
          ?\<pi> |]
      ==> ?\<Psi>\<^sub>G\<^sub>+ \<subseteq>\<^sub>m
          execute_parallel_plan_sas_plus (?\<Psi>\<^sub>I\<^sub>+)
           (\<phi>\<^sub>P\<inverse> ?\<Psi> ?\<pi>)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1)),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("SAS_Plus_STRIPS.strips_operator_inverse_is",
     "[| is_valid_problem_sas_plus ?\<Psi>;
         ?op' : set ((\<phi> ?\<Psi> )\<^sub>\<O>) |]
      ==> \<phi>\<^sub>O ?\<Psi> \<phi>\<^sub>O\<inverse> ?\<Psi> ?op' =
          ?op'",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_hole 5,
                template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 1))))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0))),
    ("SAS_Plus_STRIPS.sas_plus_formalism_and_induced_strips_formalism_are_equally_expressive_i_c",
     "is_valid_problem_sas_plus ?\<Psi> ==>
      map (sasp_op_to_strips ?\<Psi>) `
      bounded_solution_set_sas_plus' ?\<Psi> ?k =
      bounded_solution_set_strips' (\<phi> ?\<Psi> ) ?k",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 5, t_empty),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("SAS_Plus_STRIPS.strips_equivalent_to_sas_plus_ii",
     "[| is_valid_problem_sas_plus ?\<Psi>;
         SAS_Plus_Semantics.is_parallel_solution_for_problem ?\<Psi>
          ?\<psi> |]
      ==> list_all
           (list_all (%op. ListMem op ((\<phi> ?\<Psi> )\<^sub>\<O>)))
           (\<phi>\<^sub>P ?\<Psi> ?\<psi>)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5, template_app (template_hole 4, t_empty)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("SAS_Plus_STRIPS.strips_equivalent_to_sas_plus_i",
     "[| is_valid_problem_sas_plus ?\<Psi>;
         SAS_Plus_Semantics.is_parallel_solution_for_problem ?\<Psi>
          ?\<psi> |]
      ==> (\<phi> ?\<Psi> )\<^sub>G \<subseteq>\<^sub>m
          execute_parallel_plan ((\<phi> ?\<Psi> )\<^sub>I)
           (\<phi>\<^sub>P ?\<Psi> ?\<psi>)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 1))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 3, template_var 1))),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("SAS_Plus_STRIPS.sas_plus_equivalent_to_strips_ii",
     "[| is_valid_problem_sas_plus ?\<Psi>;
         STRIPS_Semantics.is_parallel_solution_for_problem (\<phi> ?\<Psi> )
          ?\<pi> |]
      ==> list_all (list_all (%op. ListMem op (?\<Psi>\<^sub>\<O>\<^sub>+)))
           (\<phi>\<^sub>P\<inverse> ?\<Psi> ?\<pi>)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4, template_app (template_hole 3, t_empty)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("SAS_Plus_STRIPS.sas_plus_problem_to_strips_problem_variable_set_element_iff",
     "is_valid_problem_sas_plus ?\<Psi> ==>
      ((?v, ?a) : set ((\<phi> ?\<Psi> )\<^sub>\<V>)) =
      (?v : set (?\<Psi>\<^sub>\<V>\<^sub>+) &
       ?a : \<R>\<^sub>+ ?\<Psi> ?v)",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_var 1),
               template_var 0)),
           template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app (template_hole 6, template_var 2)))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)))),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)))))),
    ("SAS_Plus_STRIPS.sas_plus_formalism_and_induced_strips_formalism_are_equally_expressive_i_a",
     "is_valid_problem_sas_plus ?\<Psi> ==>
      inj_on (map (sasp_op_to_strips ?\<Psi>))
       (bounded_plan_set (?\<Psi>\<^sub>\<O>\<^sub>+) ?k)",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 9, t_empty),
             template_app (template_hole 6, t_empty))
           ))),
    ("SAS_Plus_STRIPS.possible_assignments_for_set_is",
     "?v : dom (range_of ?\<Psi>) ==>
      set (possible_assignments_for ?\<Psi> ?v) =
      {(?v, a) |a. a : \<R>\<^sub>+ ?\<Psi> ?v}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 1),
              template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 0)))
            )],
       template_equation
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 0),
             template_var 1)),
         template_app (template_hole 6, t_empty)))),
    ("SAS_Plus_STRIPS.state_to_strips_state_range_is",
     "[| is_valid_problem_sas_plus ?\<Psi>;
         (?v, ?a) : dom (\<phi>\<^sub>S ?\<Psi> ?s) |]
      ==> (\<phi>\<^sub>S ?\<Psi> ?s) (?v, ?a) = Some (the (?s ?v) = ?a)",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 0)))
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 0),
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1))
              )],
         template_predicate
          (
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_hole 0,
                     template_app (template_var 0, template_var 2))),
                 template_var 1))
             )))),
    ("SAS_Plus_STRIPS.sas_plus_equivalent_to_strips_i_a_IX",
     "[| dom ?s <= ?V;
         ALL op:set ?ops. ALL (v, a):set (effect_of op). v : ?V |]
      ==> dom (execute_parallel_operator_sas_plus ?s ?ops) <= ?V",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 8, template_var 2),
          template_var 1),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 0)),
              t_empty)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("SAS_Plus_STRIPS.sas_plus_equivalent_to_strips_i_a_XI",
     "[| is_valid_problem_sas_plus ?\<Psi>;
         ?op' : set ((\<phi> ?\<Psi> )\<^sub>\<O>) |]
      ==> (\<phi>\<^sub>S ?\<Psi> ?s) ++
          map_of (effect_to_assignments ?op') =
          \<phi>\<^sub>S ?\<Psi> ?s ++
                                 map_of
                                  (effect_of
                                    (\<phi>\<^sub>O\<inverse> ?\<Psi> ?op'))",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 1),
              template_app
               (template_hole 11,
                template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_var 2))))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 2),
               template_var 0)),
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1))),
         template_app
          (template_app (template_hole 6, template_var 2),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)))))))),
    ("SAS_Plus_STRIPS.sas_plus_problem_to_strips_problem_variable_set_is",
     "is_valid_problem_sas_plus ?\<Psi> ==>
      set ((\<phi> ?\<Psi> )\<^sub>\<V>) =
      (UN v:set (?\<Psi>\<^sub>\<V>\<^sub>+).
          {(v, a) |a. a : \<R>\<^sub>+ ?\<Psi> v})",
     template_implication
      ([template_predicate
         (template_app (template_hole 15, template_var 0))],
       template_equation
        (template_app
          (template_hole 13,
           template_app
            (template_hole 12,
             template_app (template_hole 11, template_var 0))),
         template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, t_empty),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0))))))),
    ("SAS_Plus_STRIPS.state_to_strips_state_dom_element_iff",
     "is_valid_problem_sas_plus ?\<Psi> ==>
      ((?v, ?a) : dom (\<phi>\<^sub>S ?\<Psi> ?s)) =
      (?v : set (?\<Psi>\<^sub>\<V>\<^sub>+) &
       ?s ?v ~= None & ?a : \<R>\<^sub>+ ?\<Psi> ?v)",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 3))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 12,
                  template_app
                   (template_app (template_hole 11, template_var 2),
                    template_var 1)),
                template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_var 3),
                    template_var 0)))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 2),
                   template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_var 3)))),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app (template_var 0, template_var 2)),
                       template_hole 2))),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 2))))
             )))),
    ("SAS_Plus_STRIPS.serial_sas_plus_equivalent_to_serial_strips_i",
     "[| ?ops : set (\<phi>\<^sub>P ?\<Psi> List_Supplement.embed ?\<psi>);
         !!op. [| op : set ?\<psi>; ?ops = [\<phi>\<^sub>O ?\<Psi> op] |]
               ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 2),
                  template_app (template_hole 7, template_var 1))))
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("SAS_Plus_STRIPS.serial_strips_equivalent_to_serial_sas_plus_i",
     "[| ?ops
         : set (\<phi>\<^sub>P\<inverse> ?\<Pi> List_Supplement.embed
           ?\<pi>);
         !!op. [| op : set ?\<pi>;
                  ?ops = [\<phi>\<^sub>O\<inverse> ?\<Pi> op] |]
               ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 2),
                  template_app (template_hole 7, template_var 1))))
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("SAS_Plus_STRIPS.strips_equivalent_to_sas_plus_i_a_II",
     "[| is_valid_problem_sas_plus ?\<Psi>;
         ALL op:set ?ops. op : set (?\<Psi>\<^sub>\<O>\<^sub>+);
         ?op' : set (map (sasp_op_to_strips ?\<Psi>) ?ops) |]
      ==> is_valid_operator_strips (\<phi> ?\<Psi> ) ?op'",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, t_empty), template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 0)
           ))),
    ("SAS_Plus_STRIPS.sas_plus_equivalent_to_strips_i_a_II",
     "[| is_valid_problem_sas_plus ?\<Psi>;
         set ?ops' <= set ((\<phi> ?\<Psi> )\<^sub>\<O>);
         are_all_operators_applicable (?\<phi>\<^sub>s ?\<Psi> ?s) ?ops' &
         STRIPS_Semantics.are_all_operator_effects_consistent ?ops' |]
      ==> SAS_Plus_Semantics.are_all_operator_effects_consistent
           (map (strips_op_to_sasp ?\<Psi>) ?ops')",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 3)),
        template_inequation
         (less_equals, template_app (template_hole 8, template_var 2),
          template_app
           (template_hole 8,
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 3)))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_var 1, template_var 3),
                      template_var 0)),
                  template_var 2)),
              template_app (template_hole 3, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 2))
           ))),
    ("SAS_Plus_STRIPS.strips_equivalent_to_sas_plus_i_a_III",
     "[| is_valid_problem_sas_plus ?\<Psi>;
         ALL op:set ?ops. op : set (?\<Psi>\<^sub>\<O>\<^sub>+) |]
      ==> execute_parallel_operator (\<phi>\<^sub>S ?\<Psi> ?s)
           (map (sasp_op_to_strips ?\<Psi>) ?ops) =
          \<phi>\<^sub>S ?\<Psi> execute_parallel_operator_sas_plus ?s
                                  ?ops",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 2, t_empty), template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("SAS_Plus_STRIPS.sas_plus_equivalent_to_strips_i_a_XII",
     "[| is_valid_problem_sas_plus ?\<Psi>;
         ALL op':set ?ops'. op' : set ((\<phi> ?\<Psi> )\<^sub>\<O>) |]
      ==> execute_parallel_operator (\<phi>\<^sub>S ?\<Psi> ?s) ?ops' =
          \<phi>\<^sub>S ?\<Psi> execute_parallel_operator_sas_plus ?s
                                  (map (strips_op_to_sasp ?\<Psi>) ?ops')",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 1)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app (template_hole 1, t_empty),
               template_var 1)))))),
    ("SAS_Plus_STRIPS.strips_state_to_state_inverse_is",
     "[| is_valid_problem_sas_plus ?\<Psi>;
         dom ?s <= set (?\<Psi>\<^sub>\<V>\<^sub>+);
         ALL v:dom ?s. the (?s v) : \<R>\<^sub>+ ?\<Psi> v |]
      ==> ?s = \<phi>\<^sub>S\<inverse> ?\<Psi> \<phi>\<^sub>S ?\<Psi> ?s",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 9, template_var 0),
          template_app
           (template_hole 8,
            template_app (template_hole 7, template_var 1))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 9, template_var 0)),
              t_empty)
            )],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("SAS_Plus_STRIPS.strips_equivalent_to_sas_plus_i_a_II",
     "[| is_valid_problem_sas_plus ?\<Psi>;
         ALL op:set ?ops. op : set (?\<Psi>\<^sub>\<O>\<^sub>+);
         ?op' : set (map (sasp_op_to_strips ?\<Psi>) ?ops) |]
      ==> ?op' : set ((\<phi> ?\<Psi> )\<^sub>\<O>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, t_empty), template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 0),
             template_app
              (template_hole 4,
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2))))
           ))),
    ("SAS_Plus_STRIPS.embedded_serial_strips_plan_operator_structure",
     "[| ?ops' : set (List_Supplement.embed ?\<pi>);
         !!op. [| op : set ?\<pi>;
                  map (strips_op_to_sasp ?\<Pi>) ?ops' =
                  [\<phi>\<^sub>O\<inverse> ?\<Pi> op] |]
               ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 2)))
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("SAS_Plus_STRIPS.embedded_serial_sas_plus_plan_operator_structure",
     "[| ?ops : set (List_Supplement.embed ?\<psi>);
         !!op. [| op : set ?\<psi>;
                  map (sasp_op_to_strips ?\<Psi>) ?ops =
                  [\<phi>\<^sub>O ?\<Psi> op] |]
               ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 2)))
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("SAS_Plus_STRIPS.sasp_op_to_strips_effect_consistent",
     "[| ?op = \<phi>\<^sub>O ?\<Psi> ?op';
         ?op' : set (?\<Psi>\<^sub>\<O>\<^sub>+);
         is_valid_operator_sas_plus ?\<Psi> ?op' |]
      ==> (?v, ?a) : set (add_effects_of ?op) -->
          (?v, ?a) ~: set (delete_effects_of ?op)",
     template_implication
      ([template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 11, template_var 3),
            template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_var 0)),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 4)))),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_var 0)),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 0, template_var 4)))))
           ))),
    ("SAS_Plus_STRIPS.sasp_op_to_strips_effect_consistent",
     "[| ?op = \<phi>\<^sub>O ?\<Psi> ?op';
         ?op' : set (?\<Psi>\<^sub>\<O>\<^sub>+);
         is_valid_operator_sas_plus ?\<Psi> ?op' |]
      ==> (?v, ?a) : set (delete_effects_of ?op) -->
          (?v, ?a) ~: set (add_effects_of ?op)",
     template_implication
      ([template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 11, template_var 3),
            template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_var 0)),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 4)))),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_var 0)),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 0, template_var 4)))))
           ))),
    ("SAS_Plus_STRIPS.strips_state_to_state_dom_is",
     "is_valid_problem_sas_plus ?\<Psi> ==>
      dom (\<phi>\<^sub>S\<inverse> ?\<Psi> ?s) =
      (UN v:set (?\<Psi>\<^sub>\<V>\<^sub>+).
          {uu_.
           EX a. uu_ = v &
                 a : \<R>\<^sub>+ ?\<Psi> v & ?s (v, a) = Some True})",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 1))],
       template_equation
        (template_app
          (template_hole 15,
           template_app
            (template_app (template_hole 14, template_var 1),
             template_var 0)),
         template_app
          (template_hole 13,
           template_app
            (template_app (template_hole 12, t_empty),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1))))))),
    ("SAS_Plus_STRIPS.state_to_strips_state_map_le_iff",
     "[| is_valid_problem_sas_plus ?\<Psi>;
         dom ?s <= set (?\<Psi>\<^sub>\<V>\<^sub>+);
         ALL v:dom ?s. the (?s v) : \<R>\<^sub>+ ?\<Psi> v |]
      ==> (?s \<subseteq>\<^sub>m ?t) =
          (\<phi>\<^sub>S ?\<Psi> ?s \<subseteq>\<^sub>m
           \<phi>\<^sub>S ?\<Psi> ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 10, template_var 1),
          template_app
           (template_hole 9,
            template_app (template_hole 8, template_var 2))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 10, template_var 1)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("SAS_Plus_STRIPS.transfom_sas_plus_problem_to_strips_problem_operators_valid",
     "[| is_valid_problem_sas_plus ?\<Psi>;
         ?op' : set ((\<phi> ?\<Psi> )\<^sub>\<O>);
         !!op. [| op : set (?\<Psi>\<^sub>\<O>\<^sub>+);
                  ?op' = \<phi>\<^sub>O ?\<Psi> op;
                  is_valid_operator_sas_plus ?\<Psi> op |]
               ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_app
               (template_hole 9,
                template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_var 2))))
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("SAS_Plus_STRIPS.all_possible_assignments_for_set_is",
     "ALL v:set (?\<Psi>\<^sub>\<V>\<^sub>+). range_of ?\<Psi> v ~= None ==>
      set (all_possible_assignments_for ?\<Psi>) =
      (UN v:set (?\<Psi>\<^sub>\<V>\<^sub>+).
          {(v, a) |a. a : \<R>\<^sub>+ ?\<Psi> v})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app
                 (template_hole 17,
                  template_app (template_hole 16, template_var 0))),
              t_empty)
            )],
       template_equation
        (template_app
          (template_hole 10,
           template_app (template_hole 9, template_var 0)),
         template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, t_empty),
             template_app
              (template_hole 17,
               template_app (template_hole 16, template_var 0))))))),
    ("SAS_Plus_STRIPS.strips_state_to_state_inverse_is_i",
     "[| is_valid_problem_sas_plus ?\<Psi>;
         ?v : set (?\<Psi>\<^sub>\<V>\<^sub>+); ?s ?v ~= None;
         ?a : \<R>\<^sub>+ ?\<Psi> ?v |]
      ==> (\<phi>\<^sub>S ?\<Psi> ?s) (?v, ?a) = Some (the (?s ?v) = ?a)",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2),
              template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 3)))
            ),
        template_negation
         (
            template_equation
             (template_app (template_var 1, template_var 2),
              template_hole 8)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2))
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 1),
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 0))
              )],
         template_predicate
          (
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_hole 0,
                     template_app (template_var 1, template_var 2))),
                 template_var 0))
             )))),
    ("SAS_Plus_STRIPS.sasp_op_to_strips_set_delete_effects_is",
     "is_valid_operator_sas_plus ?\<Psi> ?op ==>
      set (delete_effects_of (\<phi>\<^sub>O ?\<Psi> ?op)) =
      (UN (v, a):set (effect_of ?op).
          {(v, a') |a'. a' : \<R>\<^sub>+ ?\<Psi> v & a' ~= a})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 15,
           template_app
            (template_hole 14,
             template_app
              (template_app (template_hole 13, template_var 1),
               template_var 0))),
         template_app
          (template_hole 12,
           template_app
            (template_app
              (template_hole 11, template_app (template_hole 10, t_empty)),
             template_app
              (template_hole 15,
               template_app (template_hole 0, template_var 0))))))),
    ("SAS_Plus_STRIPS.to_sas_plus_list_of_transformed_sas_plus_problem_operators_structure",
     "[| is_valid_problem_sas_plus ?\<Psi>;
         set ?ops' <= set ((\<phi> ?\<Psi> )\<^sub>\<O>);
         ?op : set (map (strips_op_to_sasp ?\<Psi>) ?ops') |]
      ==> ?op : set (?\<Psi>\<^sub>\<O>\<^sub>+) &
          (EX op':set ?ops'. op' = \<phi>\<^sub>O ?\<Psi> ?op)",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 11, template_var 1),
          template_app
           (template_hole 11,
            template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 2)))),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, t_empty), template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 8, template_var 0),
                 template_app
                  (template_hole 7,
                   template_app (template_hole 3, template_var 2)))),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 11, template_var 1)),
               t_empty))
           ))),
    ("SAS_Plus_STRIPS.sas_plus_equivalent_to_strips_i_a_I",
     "[| is_valid_problem_sas_plus ?\<Psi>;
         set ?ops' <= set ((\<phi> ?\<Psi> )\<^sub>\<O>);
         are_all_operators_applicable (\<phi>\<^sub>S ?\<Psi> ?s) ?ops';
         ?op : set (map (strips_op_to_sasp ?\<Psi>) ?ops') |]
      ==> map_of (sas_plus_operator.precondition_of ?op) \<subseteq>\<^sub>m
          \<phi>\<^sub>S\<inverse> ?\<Psi> \<phi>\<^sub>S ?\<Psi> ?s",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 3)),
        template_inequation
         (less_equals, template_app (template_hole 12, template_var 2),
          template_app
           (template_hole 12,
            template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 3)))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 3),
                  template_var 1)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, t_empty), template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0))),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_app
                (template_app (template_hole 8, template_var 3),
                 template_var 1)))
           ))),
    ("SAS_Plus_STRIPS.strips_equivalent_to_sas_plus_i_a_IV",
     "[| is_valid_problem_sas_plus ?\<Psi>;
         ALL op:set ?ops. op : set (?\<Psi>\<^sub>\<O>\<^sub>+);
         are_all_operators_applicable_in ?I ?ops &
         SAS_Plus_Semantics.are_all_operator_effects_consistent ?ops |]
      ==> are_all_operators_applicable (\<phi>\<^sub>S ?\<Psi> ?I)
           (map (sasp_op_to_strips ?\<Psi>) ?ops) &
          STRIPS_Semantics.are_all_operator_effects_consistent
           (map (sasp_op_to_strips ?\<Psi>) ?ops)",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 1)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 0),
                  template_var 1)),
              template_app (template_hole 5, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 2, t_empty),
                   template_var 1))),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, t_empty), template_var 1)))
           ))),
    ("SAS_Plus_STRIPS.strips_state_to_state_inverse_is_iv",
     "[| is_valid_problem_sas_plus ?\<Psi>;
         dom ?s <= set (?\<Psi>\<^sub>\<V>\<^sub>+);
         ?v : set (?\<Psi>\<^sub>\<V>\<^sub>+); ?s ?v = Some ?a;
         ?a : \<R>\<^sub>+ ?\<Psi> ?v |]
      ==> (\<phi>\<^sub>S\<inverse> ?\<Psi> \<phi>\<^sub>S ?\<Psi> ?s) ?v =
          Some ?a",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 3)),
        template_inequation
         (less_equals, template_app (template_hole 9, template_var 2),
          template_app
           (template_hole 8,
            template_app (template_hole 7, template_var 3))),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 3)))
            ),
        template_equation
         (template_app (template_var 2, template_var 1),
          template_app (template_hole 4, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_var 1),
         template_app (template_hole 4, template_var 0)))),
    ("SAS_Plus_STRIPS.set_filter_all_possible_assignments_true_is",
     "is_valid_problem_sas_plus ?\<Psi> ==>
      set (filter (%(v, a). ?s (v, a) = Some True)
            (all_possible_assignments_for ?\<Psi>)) =
      (UN v:set (?\<Psi>\<^sub>\<V>\<^sub>+).
          Pair v ` {a: \<R>\<^sub>+ ?\<Psi> v. ?s (v, a) = Some True})",
     template_implication
      ([template_predicate
         (template_app (template_hole 18, template_var 1))],
       template_equation
        (template_app
          (template_hole 16,
           template_app
            (template_app
              (template_hole 15, template_app (template_hole 14, t_empty)),
             template_app (template_hole 9, template_var 1))),
         template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, t_empty),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1))))))),
    ("SAS_Plus_STRIPS.sas_plus_equivalent_to_strips_i_a_IV",
     "[| is_valid_problem_sas_plus ?\<Psi>;
         set ?ops' <= set ((\<phi> ?\<Psi> )\<^sub>\<O>);
         are_all_operators_applicable (\<phi>\<^sub>S ?\<Psi> ?s) ?ops' &
         STRIPS_Semantics.are_all_operator_effects_consistent ?ops' |]
      ==> are_all_operators_applicable_in
           (\<phi>\<^sub>S\<inverse> ?\<Psi> \<phi>\<^sub>S ?\<Psi> ?s)
           (map (strips_op_to_sasp ?\<Psi>) ?ops') &
          SAS_Plus_Semantics.are_all_operator_effects_consistent
           (map (strips_op_to_sasp ?\<Psi>) ?ops')",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 11, template_var 1),
          template_app
           (template_hole 11,
            template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 2)))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 2),
                      template_var 0)),
                  template_var 1)),
              template_app (template_hole 5, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_app
                      (template_app (template_hole 6, template_var 2),
                       template_var 0))),
                 template_app
                  (template_app (template_hole 2, t_empty),
                   template_var 1))),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, t_empty), template_var 1)))
           ))),
    ("SAS_Plus_STRIPS.strips_equivalent_to_sas_plus_i_a_V",
     "[| is_valid_problem_sas_plus ?\<Psi>;
         ALL op:set ?ops. op : set (?\<Psi>\<^sub>\<O>\<^sub>+);
         ~ (are_all_operators_applicable_in ?s ?ops &
            SAS_Plus_Semantics.are_all_operator_effects_consistent ?ops) |]
      ==> ~ (are_all_operators_applicable (\<phi>\<^sub>S ?\<Psi> ?s)
              (map (sasp_op_to_strips ?\<Psi>) ?ops) &
             STRIPS_Semantics.are_all_operator_effects_consistent
              (map (sasp_op_to_strips ?\<Psi>) ?ops))",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 1)),
              t_empty)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 0),
                      template_var 1)),
                  template_app (template_hole 5, template_var 1))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 2),
                         template_var 0)),
                     template_app
                      (template_app (template_hole 2, t_empty),
                       template_var 1))),
                 template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 2, t_empty),
                     template_var 1)))
               )
           ))),
    ("SAS_Plus_STRIPS.sas_plus_equivalent_to_strips_i_a_XIII",
     "[| is_valid_problem_sas_plus ?\<Psi>;
         ALL op':set ?ops'. op' : set ((\<phi> ?\<Psi> )\<^sub>\<O>);
         \<phi>\<^sub>S ?\<Psi> ?G \<subseteq>\<^sub>m
         execute_parallel_plan
          (execute_parallel_operator (\<phi>\<^sub>S ?\<Psi> ?I) ?ops')
          ?\<pi> |]
      ==> \<phi>\<^sub>S ?\<Psi> ?G \<subseteq>\<^sub>m
          execute_parallel_plan
           (\<phi>\<^sub>S ?\<Psi> execute_parallel_operator_sas_plus ?I
                                    (map (strips_op_to_sasp ?\<Psi>) ?ops'))
           ?\<pi>",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 3)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 4),
                  template_var 2)),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app
                     (template_hole 3,
                      template_app
                       (template_app (template_hole 5, template_var 4),
                        template_var 1)),
                    template_var 3)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 4),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 5, template_var 4),
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_app
                      (template_app (template_hole 1, t_empty),
                       template_var 3)))),
               template_var 0))
           ))),
    ("SAS_Plus_STRIPS.strips_equivalent_to_sas_plus_i_a_I",
     "[| is_valid_problem_sas_plus ?\<Psi>;
         ALL op:set ?ops. op : set (?\<Psi>\<^sub>\<O>\<^sub>+);
         ?op' : set (map (sasp_op_to_strips ?\<Psi>) ?ops);
         !!op. [| op : set ?ops; ?op' = \<phi>\<^sub>O ?\<Psi> op |]
               ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 2)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, t_empty), template_var 2)))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("SAS_Plus_STRIPS.state_to_strips_state_dom_is",
     "is_valid_problem_sas_plus ?\<Psi> ==>
      dom (\<phi>\<^sub>S ?\<Psi> ?s) =
      (UN v:{v |v. v : set (?\<Psi>\<^sub>\<V>\<^sub>+) & ?s v ~= None}.
          {(v, a) |a. a : \<R>\<^sub>+ ?\<Psi> v})",
     template_implication
      ([template_predicate
         (template_app (template_hole 21, template_var 1))],
       template_equation
        (template_app
          (template_hole 19,
           template_app
            (template_app (template_hole 18, template_var 1),
             template_var 0)),
         template_app
          (template_hole 17,
           template_app
            (template_app (template_hole 16, t_empty),
             template_app (template_hole 8, t_empty)))))),
    ("SAS_Plus_STRIPS.strips_state_to_state_inverse_is_ii",
     "[| is_valid_problem_sas_plus ?\<Psi>;
         ?v : set (?\<Psi>\<^sub>\<V>\<^sub>+); ?s ?v = Some ?a;
         ?a : \<R>\<^sub>+ ?\<Psi> ?v; ?a' : \<R>\<^sub>+ ?\<Psi> ?v;
         ?a' ~= ?a |]
      ==> (\<phi>\<^sub>S ?\<Psi> ?s) (?v, ?a') = Some False",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 3),
              template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 4)))
            ),
        template_equation
         (template_app (template_var 2, template_var 3),
          template_app (template_hole 9, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app
               (template_app (template_hole 7, template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app
               (template_app (template_hole 7, template_var 4),
                template_var 3))
            ),
        template_negation
         (template_equation (template_var 0, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 2),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 0)),
         template_app (template_hole 1, template_hole 0)))),
    ("SAS_Plus_STRIPS.state_to_strips_state_effect_consistent",
     "[| is_valid_problem_sas_plus ?\<Psi>;
         (?v, ?a) : dom (\<phi>\<^sub>S ?\<Psi> ?s);
         (?v, ?a') : dom (\<phi>\<^sub>S ?\<Psi> ?s);
         (\<phi>\<^sub>S ?\<Psi> ?s) (?v, ?a) = Some True;
         (\<phi>\<^sub>S ?\<Psi> ?s) (?v, ?a') = Some True |]
      ==> (?v, ?a) = (?v, ?a')",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2)),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 0)),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 1)))
            ),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_var 4),
              template_var 1),
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)),
          template_app (template_hole 2, template_hole 1)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_var 4),
              template_var 1),
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 0)),
          template_app (template_hole 2, template_hole 1))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 6, template_var 3),
           template_var 0)))),
    ("SAS_Plus_STRIPS.sas_plus_equivalent_to_strips_i_a_VII",
     "[| is_valid_problem_sas_plus ?\<Psi>;
         dom ?s <= set (?\<Psi>\<^sub>\<V>\<^sub>+);
         ALL v:dom ?s. the (?s v) : \<R>\<^sub>+ ?\<Psi> v;
         set ?ops' <= set ((\<phi> ?\<Psi> )\<^sub>\<O>);
         are_all_operators_applicable_in ?s
          (map (strips_op_to_sasp ?\<Psi>) ?ops') &
         SAS_Plus_Semantics.are_all_operator_effects_consistent
          (map (strips_op_to_sasp ?\<Psi>) ?ops') |]
      ==> STRIPS_Semantics.are_all_operator_effects_consistent ?ops'",
     template_implication
      ([template_predicate
         (template_app (template_hole 18, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 16, template_var 1),
          template_app
           (template_hole 15,
            template_app (template_hole 14, template_var 2))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 16, template_var 1)),
              t_empty)
            ),
        template_inequation
         (less_equals, template_app (template_hole 8, template_var 0),
          template_app
           (template_hole 8,
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 2)))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_app
                   (template_app (template_hole 3, t_empty),
                    template_var 0))),
              template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 3, t_empty), template_var 0)))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("SAS_Plus_STRIPS.sas_plus_equivalent_to_strips_i_a_VI",
     "[| is_valid_problem_sas_plus ?\<Psi>;
         dom ?s <= set (?\<Psi>\<^sub>\<V>\<^sub>+);
         ALL v:dom ?s. the (?s v) : \<R>\<^sub>+ ?\<Psi> v;
         set ?ops' <= set ((\<phi> ?\<Psi> )\<^sub>\<O>);
         are_all_operators_applicable_in ?s
          (map (strips_op_to_sasp ?\<Psi>) ?ops') &
         SAS_Plus_Semantics.are_all_operator_effects_consistent
          (map (strips_op_to_sasp ?\<Psi>) ?ops') |]
      ==> are_all_operators_applicable (\<phi>\<^sub>S ?\<Psi> ?s) ?ops'",
     template_implication
      ([template_predicate
         (template_app (template_hole 19, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 17, template_var 1),
          template_app
           (template_hole 16,
            template_app (template_hole 15, template_var 2))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app (template_hole 17, template_var 1)),
              t_empty)
            ),
        template_inequation
         (less_equals, template_app (template_hole 9, template_var 0),
          template_app
           (template_hole 9,
            template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 2)))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_app
                   (template_app (template_hole 4, t_empty),
                    template_var 0))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 4, t_empty), template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("SAS_Plus_STRIPS.strips_state_to_state_inverse_is_iii",
     "[| is_valid_problem_sas_plus ?\<Psi>;
         ?v : set (?\<Psi>\<^sub>\<V>\<^sub>+); ?s ?v = Some ?a;
         ?a : \<R>\<^sub>+ ?\<Psi> ?v; ?a' : \<R>\<^sub>+ ?\<Psi> ?v;
         (\<phi>\<^sub>S ?\<Psi> ?s) (?v, ?a) = Some True;
         (\<phi>\<^sub>S ?\<Psi> ?s) (?v, ?a') = Some True |]
      ==> ?a = ?a'",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 3),
              template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 4)))
            ),
        template_equation
         (template_app (template_var 2, template_var 3),
          template_app (template_hole 8, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_app (template_hole 6, template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_app (template_hole 6, template_var 4),
                template_var 3))
            ),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_var 4),
              template_var 2),
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 1)),
          template_app (template_hole 2, template_hole 1)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_var 4),
              template_var 2),
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 0)),
          template_app (template_hole 2, template_hole 1))],
       template_equation (template_var 1, template_var 0))),
    ("SAS_Plus_STRIPS.sas_plus_equivalent_to_strips_i_a_VIII",
     "[| is_valid_problem_sas_plus ?\<Psi>;
         dom ?s <= set (?\<Psi>\<^sub>\<V>\<^sub>+);
         ALL v:dom ?s. the (?s v) : \<R>\<^sub>+ ?\<Psi> v;
         set ?ops' <= set ((\<phi> ?\<Psi> )\<^sub>\<O>);
         are_all_operators_applicable_in ?s
          (map (strips_op_to_sasp ?\<Psi>) ?ops') &
         SAS_Plus_Semantics.are_all_operator_effects_consistent
          (map (strips_op_to_sasp ?\<Psi>) ?ops') |]
      ==> are_all_operators_applicable (\<phi>\<^sub>S ?\<Psi> ?s) ?ops' &
          STRIPS_Semantics.are_all_operator_effects_consistent ?ops'",
     template_implication
      ([template_predicate
         (template_app (template_hole 20, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 18, template_var 1),
          template_app
           (template_hole 17,
            template_app (template_hole 16, template_var 2))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app (template_hole 18, template_var 1)),
              t_empty)
            ),
        template_inequation
         (less_equals, template_app (template_hole 10, template_var 0),
          template_app
           (template_hole 10,
            template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 2)))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_app
                   (template_app (template_hole 5, t_empty),
                    template_var 0))),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 5, t_empty), template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 1)),
                 template_var 0)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("SAS_Plus_STRIPS.sas_plus_equivalent_to_strips_i_a_X",
     "[| dom ?s <= ?V; ?V <= dom ?D;
         ALL v:dom ?s. the (?s v) : set (the (?D v));
         ALL op:set ?ops.
            ALL (v, a):set (effect_of op). v : ?V & a : set (the (?D v)) |]
      ==> ALL v:dom (execute_parallel_operator_sas_plus ?s ?ops).
             the (execute_parallel_operator_sas_plus ?s ?ops v)
             : set (the (?D v))",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 15, template_var 3),
          template_var 2),
        template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 14, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 15, template_var 3)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 0)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_hole 15,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0))),
             t_empty)
           ))),
    ("SAS_Plus_STRIPS.state_to_strips_state_dom_is_i",
     "ALL v:set (?\<Psi>\<^sub>\<V>\<^sub>+). v : dom (range_of ?\<Psi>) ==>
      set (concat
            (map (possible_assignments_for ?\<Psi>)
              (filter (%v. ?s v ~= None) (?\<Psi>\<^sub>\<V>\<^sub>+)))) =
      (UN v:{v |v. v : set (?\<Psi>\<^sub>\<V>\<^sub>+) & ?s v ~= None}.
          {(v, a) |a. a : \<R>\<^sub>+ ?\<Psi> v})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 26,
                template_app
                 (template_hole 25,
                  template_app (template_hole 24, template_var 1))),
              t_empty)
            )],
       template_equation
        (template_app
          (template_hole 19,
           template_app
            (template_hole 18,
             template_app
              (template_app (template_hole 17, t_empty),
               template_app
                (template_app (template_hole 15, t_empty),
                 template_app (template_hole 24, template_var 1))))),
         template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 10, t_empty),
             template_app (template_hole 2, t_empty)))))),
    ("SAS_Plus_STRIPS.strips_state_to_state_range_is",
     "[| is_valid_problem_sas_plus ?\<Psi>;
         ?v : set (?\<Psi>\<^sub>\<V>\<^sub>+);
         ?a : \<R>\<^sub>+ ?\<Psi> ?v; (?v, ?a) : dom ?s';
         ALL (v, a):dom ?s'.
            ALL (v, a'):dom ?s'.
               ?s' (v, a) = Some True & ?s' (v, a') = Some True -->
               (v, a) = (v, a') |]
      ==> ((\<phi>\<^sub>S\<inverse> ?\<Psi> ?s') ?v = Some ?a) =
          the (?s' (?v, ?a))",
     template_implication
      ([template_predicate
         (template_app (template_hole 21, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 20, template_var 2),
              template_app
               (template_hole 19,
                template_app (template_hole 18, template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 1),
              template_app
               (template_app (template_hole 16, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app (template_hole 14, template_var 2),
                  template_var 1)),
              template_app (template_hole 13, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 13, template_var 0)),
              template_app (template_hole 11, t_empty))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 0),
               template_var 2)),
           template_app (template_hole 1, template_var 1)),
         template_app
          (template_hole 0,
           template_app
            (template_var 0,
             template_app
              (template_app (template_hole 14, template_var 2),
               template_var 1)))))),
    ("SAS_Plus_STRIPS.strips_equivalent_to_sas_plus_i_a",
     "[| is_valid_problem_sas_plus ?\<Psi>;
         dom ?I <= set (?\<Psi>\<^sub>\<V>\<^sub>+);
         ALL v:dom ?I. the (?I v) : \<R>\<^sub>+ ?\<Psi> v;
         dom ?G <= set (?\<Psi>\<^sub>\<V>\<^sub>+);
         ALL v:dom ?G. the (?G v) : \<R>\<^sub>+ ?\<Psi> v;
         ALL ops:set ?\<psi>.
            ALL op:set ops. op : set (?\<Psi>\<^sub>\<O>\<^sub>+);
         ?G \<subseteq>\<^sub>m execute_parallel_plan_sas_plus ?I ?\<psi> |]
      ==> \<phi>\<^sub>S ?\<Psi> ?G \<subseteq>\<^sub>m
          execute_parallel_plan (\<phi>\<^sub>S ?\<Psi> ?I)
           (\<phi>\<^sub>P ?\<Psi> ?\<psi>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 20, template_var 3)),
        template_inequation
         (less_equals, template_app (template_hole 18, template_var 2),
          template_app
           (template_hole 17,
            template_app (template_hole 16, template_var 3))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app (template_hole 18, template_var 2)),
              t_empty)
            ),
        template_inequation
         (less_equals, template_app (template_hole 18, template_var 1),
          template_app
           (template_hole 17,
            template_app (template_hole 16, template_var 3))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app (template_hole 18, template_var 1)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 0)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 2)),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)))
           ))),
    ("SAS_Plus_STRIPS.sas_plus_equivalent_to_strips_i_a",
     "[| is_valid_problem_sas_plus ?\<Psi>;
         dom ?I <= set (?\<Psi>\<^sub>\<V>\<^sub>+);
         ALL v:dom ?I. the (?I v) : \<R>\<^sub>+ ?\<Psi> v;
         dom ?G <= set (?\<Psi>\<^sub>\<V>\<^sub>+);
         ALL v:dom ?G. the (?G v) : \<R>\<^sub>+ ?\<Psi> v;
         ALL ops':set ?\<pi>.
            ALL op':set ops'. op' : set ((\<phi> ?\<Psi> )\<^sub>\<O>);
         \<phi>\<^sub>S ?\<Psi> ?G \<subseteq>\<^sub>m
         execute_parallel_plan (\<phi>\<^sub>S ?\<Psi> ?I) ?\<pi> |]
      ==> ?G \<subseteq>\<^sub>m
          execute_parallel_plan_sas_plus ?I
           (\<phi>\<^sub>P\<inverse> ?\<Psi> ?\<pi>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 21, template_var 3)),
        template_inequation
         (less_equals, template_app (template_hole 19, template_var 2),
          template_app
           (template_hole 18,
            template_app (template_hole 17, template_var 3))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app (template_hole 19, template_var 2)),
              t_empty)
            ),
        template_inequation
         (less_equals, template_app (template_hole 19, template_var 1),
          template_app
           (template_hole 18,
            template_app (template_hole 17, template_var 3))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app (template_hole 19, template_var 1)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 0)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 1)),
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 2)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)))
           )))]:
   (string * thm * template) list
### theory "Draft.SAS_Plus_STRIPSMoreTemplates"
### 0.408s elapsed time, 0.533s cpu time, 0.064s GC time
*** Undefined fact: "nb\<^sub>5" (line 2392 of "$AFP/Verified_SAT_Based_AI_Planning/SAS_Plus_STRIPS.thy")
*** At command "thm" (line 2392 of "$AFP/Verified_SAT_Based_AI_Planning/SAS_Plus_STRIPS.thy")
*** Undefined fact: "calculation" (line 2193 of "$AFP/Verified_SAT_Based_AI_Planning/SAS_Plus_STRIPS.thy")
*** At command "thm" (line 2193 of "$AFP/Verified_SAT_Based_AI_Planning/SAS_Plus_STRIPS.thy")
*** Undefined fact: "assms" (line 2355 of "$AFP/Verified_SAT_Based_AI_Planning/SAS_Plus_STRIPS.thy")
*** At command "thm" (line 2355 of "$AFP/Verified_SAT_Based_AI_Planning/SAS_Plus_STRIPS.thy")
*** Undefined fact: "nb\<^sub>1\<^sub>2" (line 2373 of "$AFP/Verified_SAT_Based_AI_Planning/SAS_Plus_STRIPS.thy")
*** At command "thm" (line 2373 of "$AFP/Verified_SAT_Based_AI_Planning/SAS_Plus_STRIPS.thy")
*** Undefined fact: "Cons.prems" (line 1667 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
*** At command "thm" (line 1667 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
*** Undefined fact: "Cons.IH" (line 712 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
*** At command "thm" (line 712 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
*** Undefined fact: "Suc.IH" (line 472 of "$AFP/Verified_SAT_Based_AI_Planning/SAS_Plus_Semantics.thy")
*** At command "thm" (line 472 of "$AFP/Verified_SAT_Based_AI_Planning/SAS_Plus_Semantics.thy")
*** Undefined fact: "f" (line 389 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")2880fComp_deffactATP.fComp_deff_arg_min_list_ffactList.f_arg_min_list_ff_inv_into_ffactHilbert_Choice.f_inv_into_ff_the_inv_into_ffactFun.f_the_inv_into_ff_the_inv_into_f_bij_betwfactFun.f_the_inv_into_f_bij_betwfact_0factFactorial.semiring_char_0_class.fact_0fact_1factFactorial.semiring_char_0_class.fact_1fact_2factFactorial.semiring_char_0_class.fact_2fact_SucfactFactorial.semiring_char_0_class.fact_Sucfact_Suc_0factFactorial.semiring_char_0_class.fact_Suc_0fact_binomialfactBinomial.fact_binomialfact_codefactFactorial.fact_codefact_dictfactFactorial.semiring_char_0_class.fact_dictfact_div_factfactFactorial.fact_div_factfact_div_fact_le_powfactFactorial.fact_div_fact_le_powfact_doublefactFactorial.fact_doublefact_dvdfactFactorial.fact_dvdfact_fact_dvd_factfactBinomial.fact_fact_dvd_factfact_ge_1factFactorial.fact_ge_1fact_ge_Suc_0_natfactFactorial.fact_ge_Suc_0_natfact_ge_selffactFactorial.fact_ge_selffact_ge_zerofactFactorial.fact_ge_zerofact_gt_zerofactFactorial.fact_gt_zerofact_in_IntsfactFactorial.fact_in_Intsfact_in_NatsfactFactorial.fact_in_Natsfact_le_powerfactFactorial.fact_le_powerfact_less_monofactFactorial.fact_less_monofact_less_mono_natfactFactorial.fact_less_mono_natfact_modfactFactorial.fact_modfact_monofactFactorial.fact_monofact_mono_natfactFactorial.fact_mono_natfact_nonzerofactFactorial.fact_nonzerofact_not_negfactFactorial.fact_not_negfact_num_eq_iffactFactorial.fact_num_eq_iffact_numeralfactFactorial.fact_numeralfact_prodfactFactorial.semiring_char_0_class.fact_prodfact_prod_SucfactFactorial.semiring_char_0_class.fact_prod_Sucfact_prod_revfactFactorial.semiring_char_0_class.fact_prod_revfact_reducefactFactorial.fact_reducefact_splitfactFactorial.semiring_char_0_class.fact_split
*** At command "thm" (line 389 of "$AFP/Verified_SAT_Based_AI_Planning/STRIPS_Semantics.thy")
Exception- TOPLEVEL_ERROR raised
