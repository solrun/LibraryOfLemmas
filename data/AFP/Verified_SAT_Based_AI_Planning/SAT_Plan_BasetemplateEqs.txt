   [("SAT_Plan_Base.empty_valution_is_False", "\<A>\<^sub>0 ?v = False",
     template_equation
      (template_app (template_hole 1, template_var 0), template_hole 0)),
    ("SAT_Plan_Base.list_product_is_nil_iff",
     "(List.product ?xs ?ys = []) = (?xs = [] | ?ys = [])",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 6, template_var 1), template_var 0),
         template_hole 5),
       template_dunno)),
    ("SAT_Plan_Base.cnf_foldr_and",
     "cnf (foldr (\<^bold>\<and>) ?fs (\<^bold>\<not> \<bottom>)) =
      \<Union> (cnf ` set ?fs)",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_app (template_hole 6, template_hole 5),
             template_var 0),
           template_app (template_hole 4, template_hole 3))),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty),
           template_app (template_hole 0, template_var 0))))),
    ("SAT_Plan_Base.model_of_encode_problem_makespan_zero_iff",
     "?\<A> \<Turnstile> \<Phi> ?\<Pi> 0 =
      ?\<A> \<Turnstile>
      \<Phi>\<^sub>I ?\<Pi> \<^bold>\<and> (\<Phi>\<^sub>G ?\<Pi>) 0",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_hole 3)),
       template_app
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_hole 3))))),
    ("SAT_Plan_Base.decode_plan_set_is",
     "set (\<Phi>\<inverse> ?\<Pi> ?\<A> ?t) =
      (UN k<?t. {decode_plan' ?\<Pi> ?\<A> k})",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, t_empty),
           template_app (template_hole 0, template_var 0))))),
    ("SAT_Plan_Base.cnf_of_operator_encoding_structure",
     "cnf (encode_operators ?\<Pi> ?t) =
      cnf (encode_all_operator_preconditions ?\<Pi> (?\<Pi>\<^sub>\<O>)
            ?t) Un
      cnf (encode_all_operator_effects ?\<Pi> (?\<Pi>\<^sub>\<O>) ?t)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 1),
                 template_app (template_hole 1, template_var 1)),
               template_var 0))),
         template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_app (template_hole 1, template_var 1)),
             template_var 0))))),
    ("SAT_Plan_Base.set_filter_op_list_mem_vs",
     "set (filter (%op. ListMem ?v ?vs) ?ops) =
      {op: set ?ops. ?v : set ?vs}",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, t_empty), template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("SAT_Plan_Base.set_map_or",
     "set (map (%v. ?A v \<^bold>\<or> ?B v) ?vs) =
      {?A v \<^bold>\<or> ?B v |v. v : set ?vs}",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, t_empty), template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("SAT_Plan_Base.cnf_of_encode_operator_precondition",
     "cnf (encode_operator_precondition ?\<Pi> ?t ?op) =
      (UN v:set (precondition_of ?op).
          {{(Operator ?t (index (?\<Pi>\<^sub>\<O>) ?op))\<inverse>,
            (State ?t (index (?\<Pi>\<^sub>\<V>) v))\<^sup>+}})",
     template_equation
      (template_app
        (template_hole 17,
         template_app
          (template_app
            (template_app (template_hole 16, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 15,
         template_app
          (template_app (template_hole 14, t_empty),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("SAT_Plan_Base.decode_plan'_set_is",
     "set (decode_plan' ?\<Pi> ?\<A> ?k) =
      {?\<Pi>\<^sub>\<O> ! index (?\<Pi>\<^sub>\<O>) op |op.
       op : set (?\<Pi>\<^sub>\<O>) &
       ?\<A> (Operator ?k (index (?\<Pi>\<^sub>\<O>) op))}",
     template_equation
      (template_app
        (template_hole 10,
         template_app
          (template_app
            (template_app (template_hole 9, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 8, t_empty))),
    ("SAT_Plan_Base.cnf_of_encode_initial_state_set_i",
     "cnf (\<Phi>\<^sub>I ?\<Pi>) =
      \<Union>
       {cnf (encode_state_variable 0 (index (?\<Pi>\<^sub>\<V>) v)
              ((?\<Pi>\<^sub>I) v)) |
        v. v : set (?\<Pi>\<^sub>\<V>) & (?\<Pi>\<^sub>I) v ~= None}",
     template_equation
      (template_app
        (template_hole 15, template_app (template_hole 14, template_var 0)),
       template_app
        (template_hole 13, template_app (template_hole 12, t_empty)))),
    ("SAT_Plan_Base.cnf_of_encode_goal_state_set_i",
     "cnf ((\<Phi>\<^sub>G ?\<Pi>) ?t) =
      \<Union>
       {cnf (encode_state_variable ?t (index (?\<Pi>\<^sub>\<V>) v)
              ((?\<Pi>\<^sub>G) v)) |
        v. v : set (?\<Pi>\<^sub>\<V>) & (?\<Pi>\<^sub>G) v ~= None}",
     template_equation
      (template_app
        (template_hole 14,
         template_app
          (template_app (template_hole 13, template_var 1),
           template_var 0)),
       template_app
        (template_hole 12, template_app (template_hole 11, t_empty)))),
    ("SAT_Plan_Base.set_map_operator_precondition",
     "set (map (%(k, op). encode_operator_precondition ?\<Pi> k op)
            (List.product [0..<?t] ?ops)) =
      {encode_operator_precondition ?\<Pi> k op |k op.
       (k, op) : {0..<?t} \<times> set ?ops}",
     template_equation
      (template_app
        (template_hole 16,
         template_app
          (template_app
            (template_hole 15, template_app (template_hole 14, t_empty)),
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app (template_hole 11, template_hole 10),
                 template_var 1)),
             template_var 0))),
       template_app (template_hole 9, t_empty))),
    ("SAT_Plan_Base.set_map_encode_operator_effect",
     "set (map (%(t, op). encode_operator_effect ?\<Pi> t op)
            (List.product [0..<?t] (?\<Pi>\<^sub>\<O>))) =
      {encode_operator_effect ?\<Pi> k op |k op.
       (k, op) : {0..<?t} \<times> set (?\<Pi>\<^sub>\<O>)}",
     template_equation
      (template_app
        (template_hole 17,
         template_app
          (template_app
            (template_hole 16, template_app (template_hole 15, t_empty)),
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app (template_hole 12, template_hole 11),
                 template_var 0)),
             template_app (template_hole 10, template_var 1)))),
       template_app (template_hole 9, t_empty))),
    ("SAT_Plan_Base.set_map_to_operator_atom",
     "set (map (%op. Atom (Operator ?t (index (?\<Pi>\<^sub>\<O>) op)))
            (filter (%op. ListMem ?v ?vs) (?\<Pi>\<^sub>\<O>))) =
      {Atom (Operator ?t (index (?\<Pi>\<^sub>\<O>) op)) |op.
       op : set (?\<Pi>\<^sub>\<O>) & ?v : set ?vs}",
     template_equation
      (template_app
        (template_hole 15,
         template_app
          (template_app (template_hole 14, t_empty),
           template_app
            (template_app (template_hole 9, t_empty),
             template_app (template_hole 10, template_var 2)))),
       template_app (template_hole 7, t_empty))),
    ("SAT_Plan_Base.cnf_of_encode_all_operator_preconditions_structure",
     "cnf (encode_all_operator_preconditions ?\<Pi> (?\<Pi>\<^sub>\<O>)
            ?t) =
      (UN (t, op):{..<?t} \<times> set (?\<Pi>\<^sub>\<O>).
          UN v:set (precondition_of op).
             {{(Operator t (index (?\<Pi>\<^sub>\<O>) op))\<inverse>,
               (State t (index (?\<Pi>\<^sub>\<V>) v))\<^sup>+}})",
     template_equation
      (template_app
        (template_hole 22,
         template_app
          (template_app
            (template_app (template_hole 21, template_var 1),
             template_app (template_hole 20, template_var 1)),
           template_var 0)),
       template_app
        (template_hole 19,
         template_app
          (template_app
            (template_hole 18, template_app (template_hole 17, t_empty)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             t_empty))))),
    ("SAT_Plan_Base.cnf_of_negative_transition_frame_axiom",
     "cnf (encode_negative_transition_frame_axiom ?\<Pi> ?k ?v) =
      {{(State ?k (index (?\<Pi>\<^sub>\<V>) ?v))\<inverse>,
        (State (Suc ?k) (index (?\<Pi>\<^sub>\<V>) ?v))\<^sup>+} Un
       {(Operator ?k (index (?\<Pi>\<^sub>\<O>) op))\<^sup>+ |op.
        op : set (?\<Pi>\<^sub>\<O>) & ?v : set (delete_effects_of op)}}",
     template_equation
      (template_app
        (template_hole 24,
         template_app
          (template_app
            (template_app (template_hole 23, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 22,
           template_app
            (template_app
              (template_hole 21,
               template_app
                (template_app
                  (template_hole 20,
                   template_app
                    (template_hole 19,
                     template_app
                      (template_app (template_hole 18, template_var 1),
                       template_app
                        (template_app
                          (template_hole 17,
                           template_app (template_hole 16, template_var 2)),
                         template_var 0)))),
                 template_app
                  (template_app
                    (template_hole 20,
                     template_app
                      (template_hole 15,
                       template_app
                        (template_app
                          (template_hole 18,
                           template_app (template_hole 14, template_var 1)),
                         template_app
                          (template_app
                            (template_hole 17,
                             template_app
                              (template_hole 16, template_var 2)),
                           template_var 0)))),
                   template_hole 13))),
             template_app (template_hole 12, t_empty))),
         template_hole 0))),
    ("SAT_Plan_Base.cnf_of_positive_transition_frame_axiom",
     "cnf (encode_positive_transition_frame_axiom ?\<Pi> ?k ?v) =
      {{(State ?k (index (?\<Pi>\<^sub>\<V>) ?v))\<^sup>+,
        (State (Suc ?k) (index (?\<Pi>\<^sub>\<V>) ?v))\<inverse>} Un
       {(Operator ?k (index (?\<Pi>\<^sub>\<O>) op))\<^sup>+ |op.
        op : set (?\<Pi>\<^sub>\<O>) & ?v : set (add_effects_of op)}}",
     template_equation
      (template_app
        (template_hole 24,
         template_app
          (template_app
            (template_app (template_hole 23, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 22,
           template_app
            (template_app
              (template_hole 21,
               template_app
                (template_app
                  (template_hole 20,
                   template_app
                    (template_hole 19,
                     template_app
                      (template_app (template_hole 18, template_var 1),
                       template_app
                        (template_app
                          (template_hole 17,
                           template_app (template_hole 16, template_var 2)),
                         template_var 0)))),
                 template_app
                  (template_app
                    (template_hole 20,
                     template_app
                      (template_hole 15,
                       template_app
                        (template_app
                          (template_hole 18,
                           template_app (template_hole 14, template_var 1)),
                         template_app
                          (template_app
                            (template_hole 17,
                             template_app
                              (template_hole 16, template_var 2)),
                           template_var 0)))),
                   template_hole 13))),
             template_app (template_hole 12, t_empty))),
         template_hole 0))),
    ("SAT_Plan_Base.cnf_of_encode_operator_effect_structure",
     "cnf (encode_operator_effect ?\<Pi> ?t ?op) =
      (UN v:set (add_effects_of ?op).
          {{(Operator ?t (index (?\<Pi>\<^sub>\<O>) ?op))\<inverse>,
            (State (Suc ?t) (index (?\<Pi>\<^sub>\<V>) v))\<^sup>+}}) Un
      (UN v:set (delete_effects_of ?op).
          {{(Operator ?t (index (?\<Pi>\<^sub>\<O>) ?op))\<inverse>,
            (State (Suc ?t) (index (?\<Pi>\<^sub>\<V>) v))\<inverse>}})",
     template_equation
      (template_app
        (template_hole 20,
         template_app
          (template_app
            (template_app (template_hole 19, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 18,
           template_app
            (template_hole 17,
             template_app
              (template_app (template_hole 16, t_empty),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0))))),
         template_app
          (template_hole 17,
           template_app
            (template_app (template_hole 16, t_empty),
             template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0))))))),
    ("SAT_Plan_Base.encode_all_frame_axioms_set",
     "set (map (%(k, v). encode_negative_transition_frame_axiom ?\<Pi> k v)
            (List.product [0..<?t] (?\<Pi>\<^sub>\<V>)) @
           map (%(k, v). encode_positive_transition_frame_axiom ?\<Pi> k v)
            (List.product [0..<?t] (?\<Pi>\<^sub>\<V>))) =
      {encode_negative_transition_frame_axiom ?\<Pi> k v |k v.
       (k, v) : {0..<?t} \<times> set (?\<Pi>\<^sub>\<V>)} Un
      {encode_positive_transition_frame_axiom ?\<Pi> k v |k v.
       (k, v) : {0..<?t} \<times> set (?\<Pi>\<^sub>\<V>)}",
     template_equation
      (template_app
        (template_hole 20,
         template_app
          (template_app
            (template_hole 19,
             template_app
              (template_app
                (template_hole 18,
                 template_app (template_hole 17, t_empty)),
               template_app
                (template_app
                  (template_hole 15,
                   template_app
                    (template_app (template_hole 14, template_hole 13),
                     template_var 0)),
                 template_app (template_hole 12, template_var 1)))),
           template_app
            (template_app
              (template_hole 18, template_app (template_hole 17, t_empty)),
             template_app
              (template_app
                (template_hole 15,
                 template_app
                  (template_app (template_hole 14, template_hole 13),
                   template_var 0)),
               template_app (template_hole 12, template_var 1))))),
       template_app
        (template_app
          (template_hole 10, template_app (template_hole 9, t_empty)),
         template_app (template_hole 9, t_empty)))),
    ("SAT_Plan_Base.cnf_of_encode_all_operator_effects_structure",
     "cnf (encode_all_operator_effects ?\<Pi> (?\<Pi>\<^sub>\<O>) ?t) =
      (UN (k, op):{0..<?t} \<times> set (?\<Pi>\<^sub>\<O>).
          UN v:set (add_effects_of op).
             {{(Operator k (index (?\<Pi>\<^sub>\<O>) op))\<inverse>,
               (State (Suc k) (index (?\<Pi>\<^sub>\<V>) v))\<^sup>+}}) Un
      (UN (k, op):{0..<?t} \<times> set (?\<Pi>\<^sub>\<O>).
          UN v:set (delete_effects_of op).
             {{(Operator k (index (?\<Pi>\<^sub>\<O>) op))\<inverse>,
               (State (Suc k) (index (?\<Pi>\<^sub>\<V>) v))\<inverse>}})",
     template_equation
      (template_app
        (template_hole 26,
         template_app
          (template_app
            (template_app (template_hole 25, template_var 1),
             template_app (template_hole 24, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 23,
           template_app
            (template_hole 22,
             template_app
              (template_app
                (template_hole 21,
                 template_app (template_hole 20, t_empty)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_hole 2),
                     template_var 0)),
                 t_empty)))),
         template_app
          (template_hole 22,
           template_app
            (template_app
              (template_hole 21, template_app (template_hole 20, t_empty)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_var 0)),
               t_empty)))))),
    ("SAT_Plan_Base.cnf_of_encode_all_frame_axioms_structure",
     "cnf (encode_all_frame_axioms ?\<Pi> ?t) =
      \<Union>
       (UN (k, v):{0..<?t} \<times> set (?\<Pi>\<^sub>\<V>).
           {{{(State k (index (?\<Pi>\<^sub>\<V>) v))\<^sup>+,
              (State (Suc k) (index (?\<Pi>\<^sub>\<V>) v))\<inverse>} Un
             {(Operator k (index (?\<Pi>\<^sub>\<O>) op))\<^sup>+ |op.
              op : set (?\<Pi>\<^sub>\<O>) &
              v : set (add_effects_of op)}}}) Un
      \<Union>
       (UN (k, v):{0..<?t} \<times> set (?\<Pi>\<^sub>\<V>).
           {{{(State k (index (?\<Pi>\<^sub>\<V>) v))\<inverse>,
              (State (Suc k) (index (?\<Pi>\<^sub>\<V>) v))\<^sup>+} Un
             {(Operator k (index (?\<Pi>\<^sub>\<O>) op))\<^sup>+ |op.
              op : set (?\<Pi>\<^sub>\<O>) &
              v : set (delete_effects_of op)}}})",
     template_equation
      (template_app
        (template_hole 35,
         template_app
          (template_app (template_hole 34, template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 33,
           template_app
            (template_hole 32,
             template_app
              (template_hole 31,
               template_app
                (template_app
                  (template_hole 30,
                   template_app (template_hole 29, t_empty)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_hole 1),
                       template_var 0)),
                   t_empty))))),
         template_app
          (template_hole 32,
           template_app
            (template_hole 31,
             template_app
              (template_app
                (template_hole 30,
                 template_app (template_hole 29, t_empty)),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_var 0)),
                 t_empty)))))))]
