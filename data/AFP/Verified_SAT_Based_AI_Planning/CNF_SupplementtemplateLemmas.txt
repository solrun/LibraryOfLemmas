   [("CNF_Supplement.literal_formula_to_literal_is_inverse_of_form_of_lit",
     "literal_formula_to_literal (form_of_lit ?L) = ?L",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("CNF_Supplement.is_nnf_cnf", "is_cnf ?F ==> is_nnf ?F",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("CNF_Supplement.cnf_of_literal_formula",
     "is_literal_formula ?f ==> cnf ?f = {{literal_formula_to_literal ?f}}",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0)),
               template_hole 1)),
           template_hole 0)))),
    ("CNF_Supplement.is_cnf_foldr_and_if",
     "ALL f:set ?fs. is_cnf f ==>
      is_cnf (foldr (\<^bold>\<and>) ?fs (\<^bold>\<not> \<bottom>))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 0)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 0),
               template_app (template_hole 1, template_hole 0)))
           ))),
    ("CNF_Supplement.is_literal_formula_then_cnf_is_singleton_clause",
     "[| is_literal_formula ?f; !!C. cnf ?f = {C} ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0)))]
