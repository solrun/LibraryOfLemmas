   [("Option_Monad_Add.assert_eq_iff",
     "(oassert ?\<Phi> = None) = (~ ?\<Phi>)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Option_Monad_Add.assert_eq_iff",
     "(oassert ?\<Phi> = Some ?u) = ?\<Phi>",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_var 1)),
    ("Option_Monad_Add.omap_eq_Nil_conv",
     "(omap ?f ?xs = Some []) = (?xs = [])",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 1), template_var 0),
         template_app (template_hole 3, template_hole 2)),
       template_equation (template_var 0, template_hole 0))),
    ("Option_Monad_Add.omap_option_conv",
     "(omap_option ?f ?xx = Some None) = (?xx = None)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 1), template_var 0),
         template_app (template_hole 3, template_hole 2)),
       template_equation (template_var 0, template_hole 0))),
    ("Option_Monad_Add.omap_length",
     "omap ?f ?l = Some ?l' ==> length ?l' = length ?l",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 2), template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Option_Monad_Add.omap_alt_None",
     "(omap ?f ?l = None) = (EX x:set ?l. ?f x = None)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_hole 4),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         t_empty))),
    ("Option_Monad_Add.omap_option_eq",
     "omap_option ?f ?x =
      (case ?x of None => Some None
       | Some x => ?f x >>= (%x. Some (Some x)))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2)),
           t_empty),
         template_var 0))),
    ("Option_Monad_Add.omap_option_conv",
     "(omap_option ?f ?xx = None) = (EX x. ?xx = Some x & ?f x = None)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 1),
             template_var 0)),
         template_hole 6),
       template_app (template_hole 5, t_empty))),
    ("Option_Monad_Add.omap_list_all2_conv",
     "(omap ?f ?xs = Some ?ys) = list_all2 (%x y. ?f x = Some y) ?xs ?ys",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, t_empty), template_var 1),
         template_var 0))),
    ("Option_Monad_Add.omap_option_conv",
     "(omap_option ?f ?xx = Some (Some ?x')) =
      (EX x. ?xx = Some x & ?f x = Some ?x')",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 2),
             template_var 1)),
         template_app
          (template_hole 6,
           template_app (template_hole 5, template_var 0))),
       template_app (template_hole 4, t_empty))),
    ("Option_Monad_Add.omap_append",
     "omap ?f (?xs @ ?ys) =
      omap ?f ?xs >>= (%xs. omap ?f ?ys >>= (%ys. Some (xs @ ys)))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         t_empty))),
    ("Option_Monad_Add.omap_nth",
     "[| omap ?f ?l = Some ?l'; ?i < length ?l |]
      ==> ?f (?l ! ?i) = Some (?l' ! ?i)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 3), template_var 2),
          template_app (template_hole 6, template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_var 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Option_Monad_Add.omap_alt",
     "(omap ?f ?l = Some ?l') =
      (?l' = map (the o ?f) ?l & (ALL x:set ?l. ?f x ~= None))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 11, template_var 2), template_var 1),
         template_app (template_hole 10, template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_var 0),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 6, template_hole 5),
                       template_var 2)),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 1)),
               t_empty))
           ))),
    ("Option_Monad_Add.omap_cong",
     "[| !!x. x : set ?l' ==> ?f x = ?f' x; ?l = ?l' |]
      ==> omap ?f ?l = omap ?f' ?l'",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_equation (template_var 0, template_var 3)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 3)))),
    ("Option_Monad_Add.omap_eq_Cons_conv",
     "(omap ?f ?xs = Some (?y # ?ys')) =
      (EX x xs'. ?xs = x # xs' & ?f x = Some ?y & omap ?f xs' = Some ?ys')",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_var 3),
             template_var 2)),
         template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 1),
             template_var 0))),
       template_app (template_hole 6, t_empty))),
    ("Option_Monad_Add.omap_eq_append_conv",
     "(omap ?f ?xs = Some (?ys\<^sub>1 @ ?ys\<^sub>2)) =
      (EX xs\<^sub>1 xs\<^sub>2.
          ?xs = xs\<^sub>1 @ xs\<^sub>2 &
          omap ?f xs\<^sub>1 = Some ?ys\<^sub>1 &
          omap ?f xs\<^sub>2 = Some ?ys\<^sub>2)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 3),
             template_var 2)),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0))),
       template_app (template_hole 3, t_empty)))]
