   [("SASP_Checker.simulate_plan'_code",
     "simulate_plan' ?problem [] ?s = Some ?s",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_hole 1),
         template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("SASP_Checker.verify_plan_correct",
     "(verify_plan ?problem ?\<pi>s = Inr ()) =
      (ast_problem.well_formed ?problem &
       ast_problem.valid_plan ?problem ?\<pi>s)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_app (template_hole 4, template_hole 3)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SASP_Checker.map_mp",
     "[| ?m \<subseteq>\<^sub>m ?m'; ?m ?k = Some ?v |]
      ==> ?m' ?k = Some ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app (template_var 3, template_var 1),
          template_app (template_hole 0, template_var 0))],
       template_equation
        (template_app (template_var 2, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("SASP_Checker.map_add_map_of_fold",
     "distinct (map fst ?ps) ==>
      ?m ++ map_of ?ps = fold (%(k, v) m. m(k |-> v)) ?ps ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, template_hole 7),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 0),
           template_app (template_hole 4, template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 3, template_app (template_hole 2, t_empty)),
             template_var 1),
           template_var 0)))),
    ("SASP_Checker.simulate_plan'_code",
     "simulate_plan' ?problem (?\<pi> # ?\<pi>s) ?s =
      (case lookup_operator' ?problem ?\<pi> of None => None
       | Some \<pi> =>
           if enabled_opr' \<pi> ?s
           then simulate_plan' ?problem ?\<pi>s (execute_opr' \<pi> ?s)
           else None)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 7, template_var 3),
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 5, template_hole 4), t_empty),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 2)))),
    ("SASP_Checker.map_of_leI",
     "[| distinct (map fst ?l); !!k v. (k, v) : set ?l ==> ?m k = Some v |]
      ==> map_of ?l \<subseteq>\<^sub>m ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           )))]
