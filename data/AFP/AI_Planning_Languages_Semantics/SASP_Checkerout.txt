Loading theory "Draft.SASP_Semantics" (required by "Draft.SASP_CheckerMoreTemplates" via "Draft.SASP_Checker")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SASP_CheckerMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Code_Abstract_Nat" (required by "Draft.SASP_CheckerMoreTemplates" via "Draft.SASP_Checker" via "HOL-Library.Code_Target_Nat")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SASP_CheckerMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
locale ast_problem
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Code_Abstract_Nat"
### 0.062s elapsed time, 0.286s cpu time, 0.000s GC time
Loading theory "HOL-Library.Code_Target_Nat" (required by "Draft.SASP_CheckerMoreTemplates" via "Draft.SASP_Checker")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.120s elapsed time, 0.504s cpu time, 0.034s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SASP_CheckerMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
locale wf_ast_problem
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
  assumes "wf_ast_problem problem"
### Code generator: dropping subsumed code equation
### divmod_nat ?m ?n ==
### if ?n = 0 | ?m < ?n then (0, ?m)
### else let (q, y) = divmod_nat (?m - ?n) ?n in (Suc q, y)
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit1 ?n) ==
### if ?m < ?n then (0, numeral (num.Bit1 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit1 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit1 ?n) ==
### if ?m <= ?n then (0, numeral (num.Bit0 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit0 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r + 1)
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit1 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit0 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod ?m num.One == (numeral ?m, 0)
### Code generator: dropping subsumed code equation
### Suc ?m <= ?n == ?m < ?n
### Code generator: dropping subsumed code equation
### 0 <= ?n == True
### Code generator: dropping subsumed code equation
### ?m < Suc ?n == ?m <= ?n
### Code generator: dropping subsumed code equation
### ?n < 0 == False
locale ast_problem
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### Code generator: dropping subsumed code equation
### of_nat ?n == semiring_1_class.of_nat_aux (%i. i + (1::?'a)) ?n (0::?'a)
locale ast_problem
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
### theory "HOL-Library.Code_Target_Nat"
### 0.154s elapsed time, 0.603s cpu time, 0.034s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SASP_CheckerMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.361s elapsed time, 1.440s cpu time, 0.113s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SASP_CheckerMoreTemplates" via "Draft.ExtrEqs")
Found termination order:
  "(%p. size_list (size_list size) (fst (snd p))) <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.247s elapsed time, 0.965s cpu time, 0.079s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SASP_CheckerMoreTemplates" via "Draft.ExtrEqs")
locale wf_ast_problem
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
  assumes "wf_ast_problem problem"
### theory "Draft.SASP_Semantics"
### 0.427s elapsed time, 1.705s cpu time, 0.113s GC time
Loading theory "Draft.SASP_Checker" (required by "Draft.SASP_CheckerMoreTemplates")
See theory exports
consts
  shift :: "'a list => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
locale wf_ast_problem
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
  assumes "wf_ast_problem problem"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
locale ast_problem
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order:
  "(%p. size_list (size_list size) (fst p)) <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### theory "HOL-Library.BigO"
### 1.049s elapsed time, 3.953s cpu time, 0.890s GC time
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order:
  "(%p. size_list (size_list size) (fst (snd p))) <*mlex*> {}"
"filter (eff_enabled s) effs"
  :: "((nat * nat) list * nat * nat option * nat) list"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.157s elapsed time, 4.315s cpu time, 0.981s GC time
locale wf_ast_problem
  fixes
    problem ::
      "(char list * nat option * char list list) list *
       nat list *
       (nat * nat) list *
       (char list *
        (nat * nat) list *
        ((nat * nat) list * nat * nat option * nat) list * nat) list"
  assumes "wf_ast_problem problem"
### Legacy feature! export_code with file argument (line 346 of "$AFP/AI_Planning_Languages_Semantics/SASP_Checker.thy")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.SASP_Checker"
### 1.442s elapsed time, 4.795s cpu time, 1.038s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.042s elapsed time, 6.047s cpu time, 1.166s GC time
Loading theory "Draft.Templates" (required by "Draft.SASP_CheckerMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.074s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SASP_CheckerMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.476s elapsed time, 0.528s cpu time, 0.063s GC time
Loading theory "Draft.SASP_CheckerMoreTemplates"
val templateLemmas =
   [("SASP_Checker.simulate_plan'_code",
     "simulate_plan' ?problem [] ?s = Some ?s",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_hole 1),
         template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("SASP_Checker.verify_plan_correct",
     "(verify_plan ?problem ?\<pi>s = Inr ()) =
      (ast_problem.well_formed ?problem &
       ast_problem.valid_plan ?problem ?\<pi>s)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_app (template_hole 4, template_hole 3)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SASP_Checker.map_mp",
     "[| ?m \<subseteq>\<^sub>m ?m'; ?m ?k = Some ?v |]
      ==> ?m' ?k = Some ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app (template_var 3, template_var 1),
          template_app (template_hole 0, template_var 0))],
       template_equation
        (template_app (template_var 2, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("SASP_Checker.map_add_map_of_fold",
     "distinct (map fst ?ps) ==>
      ?m ++ map_of ?ps = fold (%(k, v) m. m(k |-> v)) ?ps ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, template_hole 7),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 0),
           template_app (template_hole 4, template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 3, template_app (template_hole 2, t_empty)),
             template_var 1),
           template_var 0)))),
    ("SASP_Checker.simulate_plan'_code",
     "simulate_plan' ?problem (?\<pi> # ?\<pi>s) ?s =
      (case lookup_operator' ?problem ?\<pi> of None => None
       | Some \<pi> =>
           if enabled_opr' \<pi> ?s
           then simulate_plan' ?problem ?\<pi>s (execute_opr' \<pi> ?s)
           else None)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 7, template_var 3),
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 5, template_hole 4), t_empty),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 2)))),
    ("SASP_Checker.map_of_leI",
     "[| distinct (map fst ?l); !!k v. (k, v) : set ?l ==> ?m k = Some v |]
      ==> map_of ?l \<subseteq>\<^sub>m ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           )))]:
   (string * thm * template) list
### theory "Draft.SASP_CheckerMoreTemplates"
### 0.271s elapsed time, 0.391s cpu time, 0.000s GC time
val it = (): unit
