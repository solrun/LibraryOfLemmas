   [("Error_Monad_Add.lift_opt_simps", "lift_opt None ?e = Inl ?e",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Error_Monad_Add.check_simps", "check False ?e = Inl ?e",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Error_Monad_Add.check_simps", "check True ?e = Inr ()",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2), template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("Error_Monad_Add.lift_opt_simps", "lift_opt (Some ?v) ?e = Inr ?v",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("Error_Monad_Add.check_return_iff",
     "(check ?\<Phi> ?e = Inr ?uu) = ?\<Phi>",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_var 2)),
    ("Error_Monad_Add.reflcl_image_iff", "?R^= `` ?S = ?S Un ?R `` ?S",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 0)))),
    ("Error_Monad_Add.lift_opt_return_iff",
     "(lift_opt ?m ?e = Inr ?x) = (?m = Some ?x)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_equation
        (template_var 2, template_app (template_hole 0, template_var 0)))),
    ("Error_Monad_Add.Let_return_iff",
     "(Let ?v ?f = Inr ?w) = (?f ?v = Inr ?w)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), t_empty),
         template_app (template_hole 0, template_var 0)),
       template_equation
        (template_app (template_var 1, template_var 2),
         template_app (template_hole 0, template_var 0)))),
    ("Error_Monad_Add.bind_return_iff",
     "(?m >>= ?f = Inr ?y) = (EX x. ?m = Inr x & ?f x = Inr ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_app (template_hole 4, template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("Error_Monad_Add.error_monad_bind_split",
     "?P (?m >>= ?f) =
      ((ALL v. ?m = Inl v --> ?P (Inl v)) &
       (ALL v. ?m = Inr v --> ?P (?f v)))",
     template_equation
      (template_app
        (template_var 2,
         template_app
          (template_app (template_hole 8, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, t_empty)),
         template_app (template_hole 1, t_empty)))),
    ("Error_Monad_Add.error_monad_bind_split_asm",
     "?P (?m >>= ?f) =
      (\<nexists>x.
          ?m = Inl x & ~ ?P (Inl x) | (EX x. ?m = Inr x & ~ ?P (?f x)))",
     template_equation
      (template_app
        (template_var 2,
         template_app
          (template_app (template_hole 9, template_var 1), template_var 0)),
       template_app
        (template_hole 8, template_app (template_hole 7, t_empty))))]
