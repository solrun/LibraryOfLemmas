Loading theory "HOL-Library.Adhoc_Overloading" (required by "Draft.Option_Monad_AddMoreTemplates" via "Draft.Option_Monad_Add" via "HOL-Library.Monad_Syntax")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Option_Monad_AddMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Option_Monad_AddMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Option_Monad_AddMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
signature ADHOC_OVERLOADING =
  sig
    val generic_add_overloaded: string -> Context.generic -> Context.generic
    val generic_add_variant:
       string -> term -> Context.generic -> Context.generic
    val generic_remove_overloaded:
       string -> Context.generic -> Context.generic
    val generic_remove_variant:
       string -> term -> Context.generic -> Context.generic
    val is_overloaded: Proof.context -> string -> bool
    val show_variants: bool Config.T
  end
structure Adhoc_Overloading: ADHOC_OVERLOADING
### theory "HOL-Library.Adhoc_Overloading"
### 0.092s elapsed time, 0.395s cpu time, 0.000s GC time
Loading theory "HOL-Library.Monad_Syntax" (required by "Draft.Option_Monad_AddMoreTemplates" via "Draft.Option_Monad_Add")
### theory "HOL-Library.Function_Algebras"
### 0.120s elapsed time, 0.496s cpu time, 0.037s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Option_Monad_AddMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Monad_Syntax"
### 0.042s elapsed time, 0.154s cpu time, 0.037s GC time
Loading theory "Draft.Option_Monad_Add" (required by "Draft.Option_Monad_AddMoreTemplates")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.269s elapsed time, 1.093s cpu time, 0.037s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Option_Monad_AddMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
### theory "HOL-Library.Nat_Bijection"
### 0.378s elapsed time, 1.517s cpu time, 0.128s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Option_Monad_AddMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
### theory "Draft.Option_Monad_Add"
### 0.291s elapsed time, 1.141s cpu time, 0.091s GC time
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.670s elapsed time, 2.174s cpu time, 0.229s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.870s elapsed time, 2.581s cpu time, 0.684s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.729s elapsed time, 4.300s cpu time, 0.862s GC time
Loading theory "Draft.Templates" (required by "Draft.Option_Monad_AddMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.047s elapsed time, 0.061s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Option_Monad_AddMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.449s elapsed time, 0.506s cpu time, 0.072s GC time
Loading theory "Draft.Option_Monad_AddMoreTemplates"
val templateLemmas =
   [("Option_Monad_Add.assert_eq_iff",
     "(oassert ?\<Phi> = None) = (~ ?\<Phi>)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Option_Monad_Add.assert_eq_iff",
     "(oassert ?\<Phi> = Some ?u) = ?\<Phi>",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_var 1)),
    ("Option_Monad_Add.omap_eq_Nil_conv",
     "(omap ?f ?xs = Some []) = (?xs = [])",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 1), template_var 0),
         template_app (template_hole 3, template_hole 2)),
       template_equation (template_var 0, template_hole 0))),
    ("Option_Monad_Add.omap_option_conv",
     "(omap_option ?f ?xx = Some None) = (?xx = None)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 1), template_var 0),
         template_app (template_hole 3, template_hole 2)),
       template_equation (template_var 0, template_hole 0))),
    ("Option_Monad_Add.omap_length",
     "omap ?f ?l = Some ?l' ==> length ?l' = length ?l",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 2), template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Option_Monad_Add.omap_alt_None",
     "(omap ?f ?l = None) = (EX x:set ?l. ?f x = None)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_hole 4),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         t_empty))),
    ("Option_Monad_Add.omap_option_eq",
     "omap_option ?f ?x =
      (case ?x of None => Some None
       | Some x => ?f x >>= (%x. Some (Some x)))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2)),
           t_empty),
         template_var 0))),
    ("Option_Monad_Add.omap_option_conv",
     "(omap_option ?f ?xx = None) = (EX x. ?xx = Some x & ?f x = None)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 1),
             template_var 0)),
         template_hole 6),
       template_app (template_hole 5, t_empty))),
    ("Option_Monad_Add.omap_list_all2_conv",
     "(omap ?f ?xs = Some ?ys) = list_all2 (%x y. ?f x = Some y) ?xs ?ys",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, t_empty), template_var 1),
         template_var 0))),
    ("Option_Monad_Add.omap_option_conv",
     "(omap_option ?f ?xx = Some (Some ?x')) =
      (EX x. ?xx = Some x & ?f x = Some ?x')",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 2),
             template_var 1)),
         template_app
          (template_hole 6,
           template_app (template_hole 5, template_var 0))),
       template_app (template_hole 4, t_empty))),
    ("Option_Monad_Add.omap_append",
     "omap ?f (?xs @ ?ys) =
      omap ?f ?xs >>= (%xs. omap ?f ?ys >>= (%ys. Some (xs @ ys)))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         t_empty))),
    ("Option_Monad_Add.omap_nth",
     "[| omap ?f ?l = Some ?l'; ?i < length ?l |]
      ==> ?f (?l ! ?i) = Some (?l' ! ?i)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 3), template_var 2),
          template_app (template_hole 6, template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_var 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Option_Monad_Add.omap_alt",
     "(omap ?f ?l = Some ?l') =
      (?l' = map (the o ?f) ?l & (ALL x:set ?l. ?f x ~= None))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 11, template_var 2), template_var 1),
         template_app (template_hole 10, template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_var 0),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 6, template_hole 5),
                       template_var 2)),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 1)),
               t_empty))
           ))),
    ("Option_Monad_Add.omap_cong",
     "[| !!x. x : set ?l' ==> ?f x = ?f' x; ?l = ?l' |]
      ==> omap ?f ?l = omap ?f' ?l'",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_equation (template_var 0, template_var 3)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 3)))),
    ("Option_Monad_Add.omap_eq_Cons_conv",
     "(omap ?f ?xs = Some (?y # ?ys')) =
      (EX x xs'. ?xs = x # xs' & ?f x = Some ?y & omap ?f xs' = Some ?ys')",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_var 3),
             template_var 2)),
         template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 1),
             template_var 0))),
       template_app (template_hole 6, t_empty))),
    ("Option_Monad_Add.omap_eq_append_conv",
     "(omap ?f ?xs = Some (?ys\<^sub>1 @ ?ys\<^sub>2)) =
      (EX xs\<^sub>1 xs\<^sub>2.
          ?xs = xs\<^sub>1 @ xs\<^sub>2 &
          omap ?f xs\<^sub>1 = Some ?ys\<^sub>1 &
          omap ?f xs\<^sub>2 = Some ?ys\<^sub>2)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 3),
             template_var 2)),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0))),
       template_app (template_hole 3, t_empty)))]:
   (string * thm * template) list
### theory "Draft.Option_Monad_AddMoreTemplates"
### 0.289s elapsed time, 0.377s cpu time, 0.000s GC time
val it = (): unit
