Loading theory "HOL-Combinatorics.Transposition" (required by "Draft.Simplicial_complexMoreTemplates" via "Draft.Simplicial_complex" via "Draft.Boolean_functions" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "Jordan_Normal_Form.Missing_Misc" via "HOL-Combinatorics.Permutations")
Loading theory "HOL-Library.Cancellation" (required by "Draft.Simplicial_complexMoreTemplates" via "Draft.Simplicial_complex" via "Draft.Boolean_functions" via "Jordan_Normal_Form.Matrix" via "Polynomial_Interpolation.Ring_Hom" via "HOL-Library.Multiset")
Loading theory "HOL-Library.FuncSet" (required by "Draft.Simplicial_complexMoreTemplates" via "Draft.Simplicial_complex" via "Draft.Boolean_functions" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "Jordan_Normal_Form.Missing_Misc")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Simplicial_complexMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.134s elapsed time, 0.554s cpu time, 0.036s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Simplicial_complexMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Combinatorics.Transposition"
### 0.155s elapsed time, 0.636s cpu time, 0.036s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Simplicial_complexMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.202s elapsed time, 0.800s cpu time, 0.065s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Simplicial_complexMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
### theory "HOL-Library.Nat_Bijection"
### 0.307s elapsed time, 1.207s cpu time, 0.128s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Simplicial_complexMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.FuncSet"
### 0.447s elapsed time, 1.770s cpu time, 0.164s GC time
Loading theory "HOL-Algebra.Congruence" (required by "Draft.Simplicial_complexMoreTemplates" via "Draft.Simplicial_complex" via "Draft.Boolean_functions" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice" via "HOL-Algebra.Order")
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.478s elapsed time, 1.910s cpu time, 0.164s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Simplicial_complexMoreTemplates" via "Draft.Simplicial_complex" via "Draft.Boolean_functions" via "Jordan_Normal_Form.Matrix" via "Polynomial_Interpolation.Ring_Hom")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
locale equivalence
  fixes S :: "('a, 'b) eq_object_scheme"  (structure)
  assumes "equivalence S"
consts
  snth :: "'a stream => nat => 'a"
locale partition
  fixes A :: "'a set"
    and B :: "'a set set"
  assumes "Congruence.partition A B"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### theory "HOL-Algebra.Congruence"
### 0.922s elapsed time, 3.492s cpu time, 0.783s GC time
Loading theory "HOL-Algebra.Order" (required by "Draft.Simplicial_complexMoreTemplates" via "Draft.Simplicial_complex" via "Draft.Boolean_functions" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice")
consts
  flat :: "'a list stream => 'a stream"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.102s elapsed time, 4.191s cpu time, 0.864s GC time
Loading theory "HOL-Library.Disjoint_Sets" (required by "Draft.Simplicial_complexMoreTemplates" via "Draft.Simplicial_complex" via "Draft.Boolean_functions" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "Jordan_Normal_Form.Missing_Misc" via "HOL-Combinatorics.Permutations")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Disjoint_Sets"
### 0.304s elapsed time, 1.198s cpu time, 0.134s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Simplicial_complexMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  mset :: "'a list => 'a multiset"
locale partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "partial_order L"
locale weak_partial_order_bottom
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_bottom L"
locale weak_partial_order_top
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_top L"
locale weak_total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_total_order L"
locale total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "total_order L"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "HOL-Algebra.Order"
### 0.977s elapsed time, 3.836s cpu time, 0.421s GC time
Loading theory "HOL-Algebra.Lattice" (required by "Draft.Simplicial_complexMoreTemplates" via "Draft.Simplicial_complex" via "Draft.Boolean_functions" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice")
Found termination order: "size <*mlex*> {}"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
locale weak_upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_upper_semilattice L"
locale weak_lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lower_semilattice L"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
locale weak_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lattice L"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### theory "HOL-Library.Tree"
### 2.263s elapsed time, 8.744s cpu time, 1.415s GC time
Loading theory "Draft.Templates" (required by "Draft.Simplicial_complexMoreTemplates" via "Draft.ExtrEqs")
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.363s elapsed time, 1.244s cpu time, 0.970s GC time
Loading theory "HOL-Library.Complex_Order" (required by "Draft.Simplicial_complexMoreTemplates" via "Draft.Simplicial_complex" via "Draft.Boolean_functions" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Conjugate")
instantiation
  complex :: order
  less_eq_complex == less_eq :: complex => complex => bool
  less_complex == less :: complex => complex => bool
### theory "HOL-Library.BigO"
### 1.172s elapsed time, 4.425s cpu time, 1.323s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Simplicial_complexMoreTemplates")
### theory "HOL-Library.Complex_Order"
### 0.074s elapsed time, 0.281s cpu time, 0.035s GC time
Loading theory "Jordan_Normal_Form.Conjugate" (required by "Draft.Simplicial_complexMoreTemplates" via "Draft.Simplicial_complex" via "Draft.Boolean_functions" via "Jordan_Normal_Form.Matrix")
class conjugate = type +
  fixes conjugate :: "'a => 'a"
  assumes "conjugate_id": "!!a. conjugate (conjugate a) = a"
    and
    "conjugate_cancel_iff": "!!a b. (conjugate a = conjugate b) = (a = b)"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
locale weak_bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_bounded_lattice L"
locale upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "upper_semilattice L"
locale lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lower_semilattice L"
locale Lattice.lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lattice L"
class conjugatable_ring = conjugate + ring +
  assumes
    "conjugate_dist_mul":
      "!!a b. conjugate (a * b) = conjugate a * conjugate b"
    and
    "conjugate_dist_add":
      "!!a b. conjugate (a + b) = conjugate a + conjugate b"
    and "conjugate_neg": "!!a. conjugate (- a) = - conjugate a"
    and "conjugate_zero": "conjugate (0::'a) = (0::'a)"
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
### theory "HOL-Algebra.Lattice"
### 1.183s elapsed time, 4.463s cpu time, 1.358s GC time
Loading theory "HOL-Algebra.Complete_Lattice" (required by "Draft.Simplicial_complexMoreTemplates" via "Draft.Simplicial_complex" via "Draft.Boolean_functions" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group")
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.736s elapsed time, 2.900s cpu time, 0.302s GC time
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
### theory "HOL-Algebra.Complete_Lattice"
### 1.040s elapsed time, 3.457s cpu time, 1.341s GC time
Loading theory "HOL-Algebra.Group" (required by "Draft.Simplicial_complexMoreTemplates" via "Draft.Simplicial_complex" via "Draft.Boolean_functions" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct")
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
locale Group.monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.monoid G"
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
locale Group.group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.group G"
### theory "HOL-Library.Multiset"
### 4.506s elapsed time, 16.398s cpu time, 4.054s GC time
Loading theory "HOL-Computational_Algebra.Factorial_Ring" (required by "Draft.Simplicial_complexMoreTemplates" via "Draft.Simplicial_complex" via "Draft.Boolean_functions" via "Jordan_Normal_Form.Matrix" via "Polynomial_Interpolation.Ring_Hom")
Loading theory "HOL-Combinatorics.Permutations" (required by "Draft.Simplicial_complexMoreTemplates" via "Draft.Simplicial_complex" via "Draft.Boolean_functions" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "Jordan_Normal_Form.Missing_Misc")
overloading
  nat_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => nat => 'a
class conjugatable_ordered_ring = conjugatable_ring +
  ordered_comm_monoid_add +
  assumes "conjugate_square_positive": "!!a. (0::'a) <= a * conjugate a"
overloading
  int_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => int => 'a
locale submonoid
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "submonoid H G"
locale subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "subgroup H G"
Proofs for inductive predicate(s) "swapidseq"
  Proving monotonicity ...
locale group_hom
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and H :: "('c, 'd) monoid_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "group_hom G H h"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale comm_group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "comm_group G"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
### theory "HOL-Combinatorics.Permutations"
### 1.038s elapsed time, 4.206s cpu time, 0.520s GC time
Loading theory "Jordan_Normal_Form.Missing_Misc" (required by "Draft.Simplicial_complexMoreTemplates" via "Draft.Simplicial_complex" via "Draft.Boolean_functions" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring")
class normalization_semidom = algebraic_semidom +
  semidom_divide_unit_factor +
  fixes normalize :: "'a => 'a"
  assumes
    "unit_factor_mult_normalize": "!!a. unit_factor a * normalize a = a"
    and "normalize_0": "normalize (0::'a) = (0::'a)"
### theory "HOL-Algebra.Group"
### 1.588s elapsed time, 6.046s cpu time, 0.777s GC time
Loading theory "HOL-Algebra.FiniteProduct" (required by "Draft.Simplicial_complexMoreTemplates" via "Draft.Simplicial_complex" via "Draft.Boolean_functions" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring")
### theory "Jordan_Normal_Form.Missing_Misc"
### 0.121s elapsed time, 0.469s cpu time, 0.072s GC time
"(bij, bij_betw, permutation)"
  :: "(('a => 'b) => bool) *
      (('c => 'd) => 'c set => 'd set => bool) * (('e => 'e) => bool)"
Proofs for inductive predicate(s) "foldSetDp"
  Proving monotonicity ...
locale LCD
  fixes B :: "'b set"
    and D :: "'a set"
    and f :: "'b => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
  assumes "LCD B D (\<cdot>)"
instantiation
  complex :: conjugatable_ordered_field
  conjugate_complex == conjugate :: complex => complex
instantiation
  real :: conjugatable_ordered_field
  conjugate_real == conjugate :: real => real
locale ACeD
  fixes D :: "'a set"
    and f :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and e :: "'a"
  assumes "ACeD D (\<cdot>) e"
instantiation
  rat :: conjugatable_ordered_field
  conjugate_rat == conjugate :: rat => rat
instantiation
  int :: conjugatable_ordered_ring
  conjugate_int == conjugate :: int => int
### theory "Jordan_Normal_Form.Conjugate"
### 3.482s elapsed time, 12.596s cpu time, 2.506s GC time
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
class semiring_gcd = gcd + normalization_semidom +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
    and "normalize_gcd": "!!a b. normalize (gcd a b) = gcd a b"
    and "lcm_gcd": "!!a b. lcm a b = normalize (a * b div gcd a b)"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
### theory "HOL-Algebra.FiniteProduct"
### 0.434s elapsed time, 1.188s cpu time, 0.080s GC time
Loading theory "HOL-Algebra.Ring" (required by "Draft.Simplicial_complexMoreTemplates" via "Draft.Simplicial_complex" via "Draft.Boolean_functions" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring")
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### Cannot skip proof of schematic goal statement
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### Cannot skip proof of schematic goal statement
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### Cannot skip proof of schematic goal statement
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### Cannot skip proof of schematic goal statement
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
carrier (| carrier = ?carrier, ... = ?more |) = ?carrier
partial_object.more (| carrier = ?carrier, ... = ?more |) = ?more
carrier_update ?carrier' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier' ?carrier, ... = ?more |)
partial_object.more_update ?more' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier, ... = ?more' ?more |)
(\<otimes>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub>) =
?mult
\<one>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub> =
?one
monoid.more
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
?more
mult_update ?mult'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult' ?mult, one = ?one, ... = ?more |)
one_update ?one'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one' ?one, ... = ?more |)
monoid.more_update ?more'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more' ?more |)
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
### ML warning (line 44 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 47 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Matches are not exhaustive.
signature RINGSIMP =
  sig
    val add_struct: string * term list -> attribute
    val algebra_tac: Proof.context -> int -> tactic
    val del_struct: string * term list -> attribute
    val print_structures: Proof.context -> unit
  end
structure Ringsimp: RINGSIMP
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
locale ring_hom_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "ring_hom_cring R S h"
class factorial_semiring_gcd = factorial_semiring + Gcd +
  assumes "gcd_eq_gcd_factorial": "!!a b. gcd a b = gcd_factorial a b"
    and "lcm_eq_lcm_factorial": "!!a b. lcm a b = lcm_factorial a b"
    and "Gcd_eq_Gcd_factorial": "!!A. Gcd A = Gcd_factorial A"
    and "Lcm_eq_Lcm_factorial": "!!A. Lcm A = Lcm_factorial A"
### theory "HOL-Algebra.Ring"
### 2.177s elapsed time, 4.517s cpu time, 0.374s GC time
Loading theory "HOL-Algebra.Module" (required by "Draft.Simplicial_complexMoreTemplates" via "Draft.Simplicial_complex" via "Draft.Boolean_functions" via "Jordan_Normal_Form.Matrix")
Loading theory "Jordan_Normal_Form.Missing_Ring" (required by "Draft.Simplicial_complexMoreTemplates" via "Draft.Simplicial_complex" via "Draft.Boolean_functions" via "Jordan_Normal_Form.Matrix")
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
locale algebra
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "algebra R M"
class ordered_semiring_strict = comm_monoid_add +
  ordered_cancel_ab_semigroup_add + semiring +
  assumes
    "mult_strict_left_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> c * a < c * b"
  assumes
    "mult_strict_right_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> a * c < b * c"
locale submodule
  fixes H :: "'c set"
    and R :: "('a, 'b) ring_scheme"
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "submodule H R M"
### theory "HOL-Algebra.Module"
### 1.248s elapsed time, 3.772s cpu time, 0.224s GC time
class ordered_idom = ordered_semiring_strict + idom +
  assumes "zero_less_one": "(0::'a) < (1::'a)"
### theory "HOL-Computational_Algebra.Factorial_Ring"
### 5.682s elapsed time, 15.498s cpu time, 1.298s GC time
Loading theory "Polynomial_Interpolation.Ring_Hom" (required by "Draft.Simplicial_complexMoreTemplates" via "Draft.Simplicial_complex" via "Draft.Boolean_functions" via "Jordan_Normal_Form.Matrix")
locale zero_hom
  fixes hom :: "'a => 'b"
  assumes "zero_hom hom"
locale one_hom
  fixes hom :: "'a => 'b"
  assumes "one_hom hom"
locale times_hom
  fixes hom :: "'a => 'b"
  assumes "times_hom hom"
locale plus_hom
  fixes hom :: "'a => 'b"
  assumes "plus_hom hom"
locale semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "semigroup_mult_hom hom"
locale semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "semigroup_add_hom hom"
locale monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_hom hom"
locale monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "monoid_add_hom hom"
locale group_add_hom
  fixes hom :: "'a => 'b"
  assumes "group_add_hom hom"
locale ab_semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "ab_semigroup_mult_hom hom"
locale ab_semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "ab_semigroup_add_hom hom"
locale comm_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_hom hom"
locale comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom hom"
locale ab_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "ab_group_add_hom hom"
locale semiring_hom
  fixes hom :: "'a => 'b"
  assumes "semiring_hom hom"
locale ring_hom
  fixes hom :: "'a => 'b"
  assumes "ring_hom hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_hom hom"
locale idom_hom
  fixes hom :: "'a => 'b"
  assumes "idom_hom hom"
locale idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "idom_divide_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
locale field_char_0_hom
  fixes hom :: "'a => 'b"
  assumes "field_char_0_hom hom"
locale zero_hom_0
  fixes hom :: "'a => 'b"
  assumes "zero_hom_0 hom"
locale one_hom_1
  fixes hom :: "'a => 'b"
  assumes "one_hom_1 hom"
locale monoid_mult_hom_1
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_hom_1 hom"
locale monoid_add_hom_0
  fixes hom :: "'a => 'b"
  assumes "monoid_add_hom_0 hom"
locale comm_monoid_mult_hom_1
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_hom_1 hom"
locale comm_monoid_add_hom_0
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom_0 hom"
locale injective
  fixes f :: "'a => 'b"
  assumes "injective f"
locale inj_zero_hom
  fixes hom :: "'a => 'b"
  assumes "inj_zero_hom hom"
locale inj_one_hom
  fixes hom :: "'a => 'b"
  assumes "inj_one_hom hom"
locale inj_semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semigroup_mult_hom hom"
locale inj_semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semigroup_add_hom hom"
locale inj_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_monoid_mult_hom hom"
locale inj_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_monoid_add_hom hom"
locale inj_comm_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_monoid_mult_hom hom"
locale inj_comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_monoid_add_hom hom"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale inj_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semiring_hom hom"
locale inj_comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_semiring_hom hom"
locale inj_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_group_add_hom hom"
locale inj_ab_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_ab_group_add_hom hom"
locale inj_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_ring_hom hom"
locale csemiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "csemiring R"
locale inj_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_ring_hom hom"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
locale inj_idom_hom
  fixes hom :: "'a => 'b"
  assumes "inj_idom_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
locale surjective
  fixes f :: "'a => 'b"
  assumes "surjective f"
locale bijective
  fixes f :: "'a => 'b"
  assumes "bijective f"
locale bijective
  fixes f :: "'a => 'b"
  assumes "bijective f"
locale monoid_mult_isom
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_isom hom"
locale monoid_add_isom
  fixes hom :: "'a => 'b"
  assumes "monoid_add_isom hom"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale comm_monoid_mult_isom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_isom hom"
locale comm_monoid_add_isom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_isom hom"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
### theory "Jordan_Normal_Form.Missing_Ring"
### 2.952s elapsed time, 7.328s cpu time, 0.356s GC time
locale semiring_isom
  fixes hom :: "'a => 'b"
  assumes "semiring_isom hom"
locale comm_semiring_isom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_isom hom"
locale ring_isom
  fixes hom :: "'a => 'b"
  assumes "ring_isom hom"
locale comm_ring_isom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_isom hom"
locale idom_isom
  fixes hom :: "'a => 'b"
  assumes "idom_isom hom"
locale field_isom
  fixes hom :: "'a => 'b"
  assumes "field_isom hom"
locale inj_idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "inj_idom_divide_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
### theory "Polynomial_Interpolation.Ring_Hom"
### 2.230s elapsed time, 3.532s cpu time, 0.214s GC time
Loading theory "Jordan_Normal_Form.Matrix" (required by "Draft.Simplicial_complexMoreTemplates" via "Draft.Simplicial_complex" via "Draft.Boolean_functions")
instantiation
  vec :: (plus) plus
  plus_vec == plus :: 'a vec => 'a vec => 'a vec
instantiation
  vec :: (minus) minus
  minus_vec == minus :: 'a vec => 'a vec => 'a vec
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  vec :: (uminus) uminus
  uminus_vec == uminus :: 'a vec => 'a vec
instantiation
  vec :: (ord) ord
  less_eq_vec == less_eq :: 'a vec => 'a vec => bool
  less_vec == less :: 'a vec => 'a vec => bool
instantiation
  vec :: (preorder) preorder
instantiation
  vec :: (order) order
Found termination order: "{}"
instantiation
  mat :: (ord) ord
  less_eq_mat == less_eq :: 'a mat => 'a mat => bool
  less_mat == less :: 'a mat => 'a mat => bool
instantiation
  mat :: (preorder) preorder
instantiation
  mat :: (order) order
instantiation
  mat :: (plus) plus
  plus_mat == plus :: 'a mat => 'a mat => 'a mat
instantiation
  mat :: (uminus) uminus
  uminus_mat == uminus :: 'a mat => 'a mat
instantiation
  mat :: (minus) minus
  minus_mat == minus :: 'a mat => 'a mat => 'a mat
instantiation
  mat :: (semiring_0) times
  times_mat == times :: 'a mat => 'a mat => 'a mat
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
locale semiring_hom
  fixes hom :: "'a => 'b"
  assumes "semiring_hom hom"
instantiation
  vec :: (conjugate) conjugate
  conjugate_vec == conjugate :: 'a vec => 'a vec
### theory "Jordan_Normal_Form.Matrix"
### 2.465s elapsed time, 2.633s cpu time, 0.216s GC time
Loading theory "Draft.Boolean_functions" (required by "Draft.Simplicial_complexMoreTemplates" via "Draft.Simplicial_complex")
locale boolean_functions
  fixes n :: "nat"
locale boolean_functions
  fixes n :: "nat"
### theory "Draft.Boolean_functions"
### 0.105s elapsed time, 0.191s cpu time, 0.104s GC time
Loading theory "Draft.Simplicial_complex" (required by "Draft.Simplicial_complexMoreTemplates")
locale simplicial_complex
  fixes n :: "nat"
instantiation
  bool :: {one,zero}
  zero_bool == zero_class.zero :: bool
  one_bool == one_class.one :: bool
locale simplicial_complex
  fixes n :: "nat"
locale simplicial_complex
  fixes n :: "nat"
### theory "Draft.Simplicial_complex"
### 0.276s elapsed time, 0.277s cpu time, 0.000s GC time
Loading theory "Draft.Simplicial_complexMoreTemplates"
val templateLemmas =
   [("Simplicial_complex.card_ceros_of_boolean_input",
     "card (ceros_of_boolean_input ?a) <= dim_vec ?a",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Simplicial_complex.simplicial_complex_induced_by_monotone_boolean_function_subset",
     "simplicial_complex_induced_by_monotone_boolean_function ?n ?v
      <= Pow {0..?n}",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 1)))),
    ("Simplicial_complex.card_ceros_count_UNIV",
     "card (ceros_of_boolean_input ?a) + count_true ?a = dim_vec ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0))),
         template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Simplicial_complex.monotone_ceros_of_boolean_input",
     "?r <= ?s ==> ceros_of_boolean_input ?s <= ceros_of_boolean_input ?r",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Simplicial_complex.ceros_of_boolean_input_l_dim",
     "?a : ceros_of_boolean_input ?v ==> ?a < dim_vec ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_inequation
        (less_than, template_var 1,
         template_app (template_hole 0, template_var 0)))),
    ("Simplicial_complex.Pow_singleton", "Pow {?a} = {{}, {?a}}",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app
        (template_app (template_hole 1, template_hole 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 2)),
           template_hole 0)))),
    ("Simplicial_complex.finite_False",
     "finite {x. x < dim_vec ?a & ?a $ x = False}",
     template_predicate
      (
         template_app
          (template_hole 7, template_app (template_hole 6, t_empty))
         )),
    ("Simplicial_complex.finite_True",
     "finite {x. x < dim_vec ?a & ?a $ x = True}",
     template_predicate
      (
         template_app
          (template_hole 7, template_app (template_hole 6, t_empty))
         )),
    ("Simplicial_complex.vec_fun",
     "?v : carrier_vec ?n ==> EX f. ?v = vec ?n f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Simplicial_complex.ceros_of_boolean_input_complementary",
     "ceros_of_boolean_input ?v = {x. x < dim_vec ?v} - {x. ?v $ x}",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app (template_hole 3, t_empty)))),
    ("Simplicial_complex.comp_fun_commute_lambda",
     "comp_fun_commute_on UNIV ((+) o (%i. if vec 4 ?f $ i then 1 else 0))",
     template_predicate
      (
         template_app
          (template_app (template_hole 11, template_hole 10),
           template_app
            (template_app (template_hole 9, template_hole 8), t_empty))
         )),
    ("Simplicial_complex.vec_l_eq",
     "?i < ?n ==> vec (Suc ?n) ?f $ ?i = vec ?n ?f $ ?i",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1)),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_var 2)))),
    ("Simplicial_complex.singleton_in_simplicial_complex_induced",
     "?x < 4 ==>
      {?x}
      : simplicial_complex_induced_by_monotone_boolean_function 4
         bool_fun_threshold_2_3",
     template_implication
      ([template_inequation
         (less_than, template_var 0,
          template_app
           (template_hole 7,
            template_app
             (template_hole 6,
              template_app (template_hole 6, template_hole 5))))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 2)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app (template_hole 6, template_hole 5)))),
               template_hole 0))
           ))),
    ("Simplicial_complex.card_complementary",
     "card (ceros_of_boolean_input ?v) +
      card {x. x < dim_vec ?v & ?v $ x = True} =
      dim_vec ?v",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_hole 8,
             template_app (template_hole 7, template_var 0))),
         template_app
          (template_hole 8, template_app (template_hole 6, t_empty))),
       template_app (template_hole 3, template_var 0))),
    ("Simplicial_complex.less_3_cases",
     "?n < 3 ==> ?n = 0 | ?n = 1 | ?n = 2",
     template_implication
      ([template_inequation
         (less_than, template_var 0,
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_hole 5)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 2)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_hole 1)),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_hole 7,
                   template_app (template_hole 0, template_hole 5)))))
           ))),
    ("Simplicial_complex.Pow_pair",
     "Pow {?a, ?b} = {{}, {?a}, {?b}, {?a, ?b}}",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_hole 2))),
       template_app
        (template_app (template_hole 1, template_hole 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_hole 2)),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 2)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_hole 2))),
               template_hole 0)))))),
    ("Simplicial_complex.tt_2",
     "[| dim_vec ?x = 2; ?x $ 0 = True & ?x $ 1 = True |]
      ==> ceros_of_boolean_input ?x = {}",
     template_implication
      ([template_equation
         (template_app (template_hole 12, template_var 0),
          template_app
           (template_hole 11,
            template_app (template_hole 10, template_hole 9))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 0),
                      template_hole 5)),
                  template_hole 4)),
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 0),
                    template_hole 3)),
                template_hole 4))
            )],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Simplicial_complex.UNIV_disjoint",
     "{x. x < dim_vec ?a & ?a $ x = True} Int
      {x. x < dim_vec ?a & ?a $ x = False} =
      {}",
     template_equation
      (template_app
        (template_app
          (template_hole 9, template_app (template_hole 8, t_empty)),
         template_app (template_hole 8, t_empty)),
       template_hole 0)),
    ("Simplicial_complex.less_4_cases",
     "?n < 4 ==> ?n = 0 | ?n = 1 | ?n = 2 | ?n = 3",
     template_implication
      ([template_inequation
         (less_than, template_var 0,
          template_app
           (template_hole 7,
            template_app
             (template_hole 6,
              template_app (template_hole 6, template_hole 5))))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 2)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_hole 1)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_app
                      (template_hole 7,
                       template_app (template_hole 6, template_hole 5)))),
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_app
                    (template_hole 7,
                     template_app (template_hole 0, template_hole 5))))))
           ))),
    ("Simplicial_complex.ft_2",
     "[| dim_vec ?x = 2; ?x $ 0 = False & ?x $ 1 = True |]
      ==> ceros_of_boolean_input ?x = {0}",
     template_implication
      ([template_equation
         (template_app (template_hole 14, template_var 0),
          template_app
           (template_hole 13,
            template_app (template_hole 12, template_hole 11))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 0),
                      template_hole 7)),
                  template_hole 6)),
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 8, template_var 0),
                    template_hole 5)),
                template_hole 4))
            )],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_hole 7),
           template_hole 0)))),
    ("Simplicial_complex.tf_2",
     "[| dim_vec ?x = 2; ?x $ 0 = True & ?x $ 1 = False |]
      ==> ceros_of_boolean_input ?x = {1}",
     template_implication
      ([template_equation
         (template_app (template_hole 14, template_var 0),
          template_app
           (template_hole 13,
            template_app (template_hole 12, template_hole 11))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 0),
                      template_hole 7)),
                  template_hole 6)),
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 8, template_var 0),
                    template_hole 5)),
                template_hole 4))
            )],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_hole 5),
           template_hole 0)))),
    ("Simplicial_complex.pair_in_simplicial_complex_induced",
     "[| ?x < 4; ?y < 4 |]
      ==> {?x, ?y}
          : simplicial_complex_induced_by_monotone_boolean_function 4
             bool_fun_threshold_2_3",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_hole 7,
            template_app
             (template_hole 6,
              template_app (template_hole 6, template_hole 5)))),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_hole 7,
            template_app
             (template_hole 6,
              template_app (template_hole 6, template_hole 5))))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_hole 2))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app (template_hole 6, template_hole 5)))),
               template_hole 0))
           ))),
    ("Simplicial_complex.ff_2",
     "[| dim_vec ?x = 2; ?x $ 0 = False & ?x $ 1 = False |]
      ==> ceros_of_boolean_input ?x = {0, 1}",
     template_implication
      ([template_equation
         (template_app (template_hole 13, template_var 0),
          template_app
           (template_hole 12,
            template_app (template_hole 11, template_hole 10))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_var 0),
                      template_hole 6)),
                  template_hole 5)),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_var 0),
                    template_hole 4)),
                template_hole 5))
            )],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_hole 6),
           template_app
            (template_app (template_hole 1, template_hole 4),
             template_hole 0))))),
    ("Simplicial_complex.card_boolean_function",
     "?v : carrier_vec ?n ==>
      card {x. x < ?n & ?v $ x = True} =
      (SUM i = 0..<?n. if ?v $ i then 1 else 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 1),
              template_app (template_hole 13, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 11, template_app (template_hole 10, t_empty)),
         template_app
          (template_app (template_hole 4, t_empty),
           template_app
            (template_app (template_hole 0, template_hole 1),
             template_var 0))))),
    ("Simplicial_complex.UNIV_union",
     "{x. x < dim_vec ?a & ?a $ x = True} Un
      {x. x < dim_vec ?a & ?a $ x = False} =
      {x. x < dim_vec ?a}",
     template_equation
      (template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, t_empty)),
         template_app (template_hole 7, t_empty)),
       template_app (template_hole 7, t_empty))),
    ("Simplicial_complex.ttt_3",
     "[| dim_vec ?x = 3; ?x $ 0 = True & ?x $ 1 = True & ?x $ 2 = True |]
      ==> ceros_of_boolean_input ?x = {}",
     template_implication
      ([template_equation
         (template_app (template_hole 13, template_var 0),
          template_app
           (template_hole 12,
            template_app (template_hole 11, template_hole 10))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_var 0),
                      template_hole 6)),
                  template_hole 5)),
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app
                     (template_hole 8,
                      template_app
                       (template_app (template_hole 7, template_var 0),
                        template_hole 4)),
                    template_hole 5)),
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_var 0),
                      template_app
                       (template_hole 12,
                        template_app (template_hole 3, template_hole 10)))),
                  template_hole 5)))
            )],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Simplicial_complex.card_UNIV_union",
     "card {x. x < dim_vec ?a & ?a $ x = True} +
      card {x. x < dim_vec ?a & ?a $ x = False} =
      card {x. x < dim_vec ?a}",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_hole 8, template_app (template_hole 7, t_empty))),
         template_app
          (template_hole 8, template_app (template_hole 7, t_empty))),
       template_app
        (template_hole 8, template_app (template_hole 7, t_empty)))),
    ("Simplicial_complex.ftt_3",
     "[| dim_vec ?x = 3; ?x $ 0 = False & ?x $ 1 = True & ?x $ 2 = True |]
      ==> ceros_of_boolean_input ?x = {0}",
     template_implication
      ([template_equation
         (template_app (template_hole 15, template_var 0),
          template_app
           (template_hole 14,
            template_app (template_hole 13, template_hole 12))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 0),
                      template_hole 8)),
                  template_hole 7)),
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 0),
                        template_hole 6)),
                    template_hole 5)),
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 0),
                      template_app
                       (template_hole 14,
                        template_app (template_hole 4, template_hole 12)))),
                  template_hole 5)))
            )],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_hole 8),
           template_hole 0)))),
    ("Simplicial_complex.tft_3",
     "[| dim_vec ?x = 3; ?x $ 0 = True & ?x $ 1 = False & ?x $ 2 = True |]
      ==> ceros_of_boolean_input ?x = {1}",
     template_implication
      ([template_equation
         (template_app (template_hole 15, template_var 0),
          template_app
           (template_hole 14,
            template_app (template_hole 13, template_hole 12))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 0),
                      template_hole 8)),
                  template_hole 7)),
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 0),
                        template_hole 6)),
                    template_hole 5)),
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 0),
                      template_app
                       (template_hole 14,
                        template_app (template_hole 4, template_hole 12)))),
                  template_hole 7)))
            )],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_hole 6),
           template_hole 0)))),
    ("Simplicial_complex.fft_3",
     "[| dim_vec ?x = 3; ?x $ 0 = False & ?x $ 1 = False & ?x $ 2 = True |]
      ==> ceros_of_boolean_input ?x = {0, 1}",
     template_implication
      ([template_equation
         (template_app (template_hole 15, template_var 0),
          template_app
           (template_hole 14,
            template_app (template_hole 13, template_hole 12))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 0),
                      template_hole 8)),
                  template_hole 7)),
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 0),
                        template_hole 6)),
                    template_hole 7)),
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 0),
                      template_app
                       (template_hole 14,
                        template_app (template_hole 5, template_hole 12)))),
                  template_hole 4)))
            )],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_hole 8),
           template_app
            (template_app (template_hole 1, template_hole 6),
             template_hole 0))))),
    ("Simplicial_complex.ttf_3",
     "[| dim_vec ?x = 3; ?x $ 0 = True & ?x $ 1 = True & ?x $ 2 = False |]
      ==> ceros_of_boolean_input ?x = {2}",
     template_implication
      ([template_equation
         (template_app (template_hole 15, template_var 0),
          template_app
           (template_hole 14,
            template_app (template_hole 13, template_hole 12))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 0),
                      template_hole 8)),
                  template_hole 7)),
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 0),
                        template_hole 6)),
                    template_hole 7)),
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 0),
                      template_app
                       (template_hole 14,
                        template_app (template_hole 5, template_hole 12)))),
                  template_hole 4)))
            )],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 14,
               template_app (template_hole 5, template_hole 12))),
           template_hole 0)))),
    ("Simplicial_complex.ftf_3",
     "[| dim_vec ?x = 3; ?x $ 0 = False & ?x $ 1 = True & ?x $ 2 = False |]
      ==> ceros_of_boolean_input ?x = {0, 2}",
     template_implication
      ([template_equation
         (template_app (template_hole 15, template_var 0),
          template_app
           (template_hole 14,
            template_app (template_hole 13, template_hole 12))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 0),
                      template_hole 8)),
                  template_hole 7)),
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 0),
                        template_hole 6)),
                    template_hole 5)),
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 0),
                      template_app
                       (template_hole 14,
                        template_app (template_hole 4, template_hole 12)))),
                  template_hole 7)))
            )],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_hole 8),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 14,
                 template_app (template_hole 4, template_hole 12))),
             template_hole 0))))),
    ("Simplicial_complex.tff_3",
     "[| dim_vec ?x = 3; ?x $ 0 = True & ?x $ 1 = False & ?x $ 2 = False |]
      ==> ceros_of_boolean_input ?x = {1, 2}",
     template_implication
      ([template_equation
         (template_app (template_hole 15, template_var 0),
          template_app
           (template_hole 14,
            template_app (template_hole 13, template_hole 12))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 0),
                      template_hole 8)),
                  template_hole 7)),
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 0),
                        template_hole 6)),
                    template_hole 5)),
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 0),
                      template_app
                       (template_hole 14,
                        template_app (template_hole 4, template_hole 12)))),
                  template_hole 5)))
            )],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_hole 6),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 14,
                 template_app (template_hole 4, template_hole 12))),
             template_hole 0))))),
    ("Simplicial_complex.fff_3",
     "[| dim_vec ?x = 3; ?x $ 0 = False & ?x $ 1 = False & ?x $ 2 = False |]
      ==> ceros_of_boolean_input ?x = {0, 1, 2}",
     template_implication
      ([template_equation
         (template_app (template_hole 14, template_var 0),
          template_app
           (template_hole 13,
            template_app (template_hole 12, template_hole 11))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 0),
                      template_hole 7)),
                  template_hole 6)),
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_app (template_hole 8, template_var 0),
                        template_hole 5)),
                    template_hole 6)),
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 0),
                      template_app
                       (template_hole 13,
                        template_app (template_hole 4, template_hole 11)))),
                  template_hole 6)))
            )],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_hole 7),
           template_app
            (template_app (template_hole 1, template_hole 5),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_hole 13,
                   template_app (template_hole 4, template_hole 11))),
               template_hole 0)))))),
    ("Simplicial_complex.tttt_4",
     "[| dim_vec ?x = 4;
         ?x $ 0 = True & ?x $ 1 = True & ?x $ 2 = True & ?x $ 3 = True |]
      ==> ceros_of_boolean_input ?x = {}",
     template_implication
      ([template_equation
         (template_app (template_hole 13, template_var 0),
          template_app
           (template_hole 12,
            template_app
             (template_hole 11,
              template_app (template_hole 11, template_hole 10)))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_var 0),
                      template_hole 6)),
                  template_hole 5)),
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app
                     (template_hole 8,
                      template_app
                       (template_app (template_hole 7, template_var 0),
                        template_hole 4)),
                    template_hole 5)),
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app
                       (template_hole 8,
                        template_app
                         (template_app (template_hole 7, template_var 0),
                          template_app
                           (template_hole 12,
                            template_app
                             (template_hole 11, template_hole 10)))),
                      template_hole 5)),
                  template_app
                   (template_app
                     (template_hole 8,
                      template_app
                       (template_app (template_hole 7, template_var 0),
                        template_app
                         (template_hole 12,
                          template_app
                           (template_hole 3, template_hole 10)))),
                    template_hole 5))))
            )],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Simplicial_complex.fttt_4",
     "[| dim_vec ?x = 4;
         ?x $ 0 = False & ?x $ 1 = True & ?x $ 2 = True & ?x $ 3 = True |]
      ==> ceros_of_boolean_input ?x = {0}",
     template_implication
      ([template_equation
         (template_app (template_hole 15, template_var 0),
          template_app
           (template_hole 14,
            template_app
             (template_hole 13,
              template_app (template_hole 13, template_hole 12)))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 0),
                      template_hole 8)),
                  template_hole 7)),
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 0),
                        template_hole 6)),
                    template_hole 5)),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app
                         (template_app (template_hole 9, template_var 0),
                          template_app
                           (template_hole 14,
                            template_app
                             (template_hole 13, template_hole 12)))),
                      template_hole 5)),
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 0),
                        template_app
                         (template_hole 14,
                          template_app
                           (template_hole 4, template_hole 12)))),
                    template_hole 5))))
            )],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_hole 8),
           template_hole 0)))),
    ("Simplicial_complex.tftt_4",
     "[| dim_vec ?x = 4;
         ?x $ 0 = True & ?x $ 1 = False & ?x $ 2 = True & ?x $ 3 = True |]
      ==> ceros_of_boolean_input ?x = {1}",
     template_implication
      ([template_equation
         (template_app (template_hole 15, template_var 0),
          template_app
           (template_hole 14,
            template_app
             (template_hole 13,
              template_app (template_hole 13, template_hole 12)))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 0),
                      template_hole 8)),
                  template_hole 7)),
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 0),
                        template_hole 6)),
                    template_hole 5)),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app
                         (template_app (template_hole 9, template_var 0),
                          template_app
                           (template_hole 14,
                            template_app
                             (template_hole 13, template_hole 12)))),
                      template_hole 7)),
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 0),
                        template_app
                         (template_hole 14,
                          template_app
                           (template_hole 4, template_hole 12)))),
                    template_hole 7))))
            )],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_hole 6),
           template_hole 0)))),
    ("Simplicial_complex.fftt_4",
     "[| dim_vec ?x = 4;
         ?x $ 0 = False & ?x $ 1 = False & ?x $ 2 = True & ?x $ 3 = True |]
      ==> ceros_of_boolean_input ?x = {0, 1}",
     template_implication
      ([template_equation
         (template_app (template_hole 15, template_var 0),
          template_app
           (template_hole 14,
            template_app
             (template_hole 13,
              template_app (template_hole 13, template_hole 12)))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 0),
                      template_hole 8)),
                  template_hole 7)),
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 0),
                        template_hole 6)),
                    template_hole 7)),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app
                         (template_app (template_hole 9, template_var 0),
                          template_app
                           (template_hole 14,
                            template_app
                             (template_hole 13, template_hole 12)))),
                      template_hole 5)),
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 0),
                        template_app
                         (template_hole 14,
                          template_app
                           (template_hole 4, template_hole 12)))),
                    template_hole 5))))
            )],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_hole 8),
           template_app
            (template_app (template_hole 1, template_hole 6),
             template_hole 0))))),
    ("Simplicial_complex.ttft_4",
     "[| dim_vec ?x = 4;
         ?x $ 0 = True & ?x $ 1 = True & ?x $ 2 = False & ?x $ 3 = True |]
      ==> ceros_of_boolean_input ?x = {2}",
     template_implication
      ([template_equation
         (template_app (template_hole 15, template_var 0),
          template_app
           (template_hole 14,
            template_app
             (template_hole 13,
              template_app (template_hole 13, template_hole 12)))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 0),
                      template_hole 8)),
                  template_hole 7)),
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 0),
                        template_hole 6)),
                    template_hole 7)),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app
                         (template_app (template_hole 9, template_var 0),
                          template_app
                           (template_hole 14,
                            template_app
                             (template_hole 13, template_hole 12)))),
                      template_hole 5)),
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 0),
                        template_app
                         (template_hole 14,
                          template_app
                           (template_hole 4, template_hole 12)))),
                    template_hole 7))))
            )],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 14,
               template_app (template_hole 13, template_hole 12))),
           template_hole 0)))),
    ("Simplicial_complex.tttf_4",
     "[| dim_vec ?x = 4;
         ?x $ 0 = True & ?x $ 1 = True & ?x $ 2 = True & ?x $ 3 = False |]
      ==> ceros_of_boolean_input ?x = {3}",
     template_implication
      ([template_equation
         (template_app (template_hole 15, template_var 0),
          template_app
           (template_hole 14,
            template_app
             (template_hole 13,
              template_app (template_hole 13, template_hole 12)))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 0),
                      template_hole 8)),
                  template_hole 7)),
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 0),
                        template_hole 6)),
                    template_hole 7)),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app
                         (template_app (template_hole 9, template_var 0),
                          template_app
                           (template_hole 14,
                            template_app
                             (template_hole 13, template_hole 12)))),
                      template_hole 7)),
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 0),
                        template_app
                         (template_hole 14,
                          template_app
                           (template_hole 5, template_hole 12)))),
                    template_hole 4))))
            )],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 14,
               template_app (template_hole 5, template_hole 12))),
           template_hole 0)))),
    ("Simplicial_complex.ftft_4",
     "[| dim_vec ?x = 4;
         ?x $ 0 = False & ?x $ 1 = True & ?x $ 2 = False & ?x $ 3 = True |]
      ==> ceros_of_boolean_input ?x = {0, 2}",
     template_implication
      ([template_equation
         (template_app (template_hole 15, template_var 0),
          template_app
           (template_hole 14,
            template_app
             (template_hole 13,
              template_app (template_hole 13, template_hole 12)))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 0),
                      template_hole 8)),
                  template_hole 7)),
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 0),
                        template_hole 6)),
                    template_hole 5)),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app
                         (template_app (template_hole 9, template_var 0),
                          template_app
                           (template_hole 14,
                            template_app
                             (template_hole 13, template_hole 12)))),
                      template_hole 7)),
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 0),
                        template_app
                         (template_hole 14,
                          template_app
                           (template_hole 4, template_hole 12)))),
                    template_hole 5))))
            )],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_hole 8),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 14,
                 template_app (template_hole 13, template_hole 12))),
             template_hole 0))))),
    ("Simplicial_complex.fttf_4",
     "[| dim_vec ?x = 4;
         ?x $ 0 = False & ?x $ 1 = True & ?x $ 2 = True & ?x $ 3 = False |]
      ==> ceros_of_boolean_input ?x = {0, 3}",
     template_implication
      ([template_equation
         (template_app (template_hole 15, template_var 0),
          template_app
           (template_hole 14,
            template_app
             (template_hole 13,
              template_app (template_hole 13, template_hole 12)))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 0),
                      template_hole 8)),
                  template_hole 7)),
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 0),
                        template_hole 6)),
                    template_hole 5)),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app
                         (template_app (template_hole 9, template_var 0),
                          template_app
                           (template_hole 14,
                            template_app
                             (template_hole 13, template_hole 12)))),
                      template_hole 5)),
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 0),
                        template_app
                         (template_hole 14,
                          template_app
                           (template_hole 4, template_hole 12)))),
                    template_hole 7))))
            )],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_hole 8),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 14,
                 template_app (template_hole 4, template_hole 12))),
             template_hole 0))))),
    ("Simplicial_complex.tfft_4",
     "[| dim_vec ?x = 4;
         ?x $ 0 = True & ?x $ 1 = False & ?x $ 2 = False & ?x $ 3 = True |]
      ==> ceros_of_boolean_input ?x = {1, 2}",
     template_implication
      ([template_equation
         (template_app (template_hole 15, template_var 0),
          template_app
           (template_hole 14,
            template_app
             (template_hole 13,
              template_app (template_hole 13, template_hole 12)))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 0),
                      template_hole 8)),
                  template_hole 7)),
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 0),
                        template_hole 6)),
                    template_hole 5)),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app
                         (template_app (template_hole 9, template_var 0),
                          template_app
                           (template_hole 14,
                            template_app
                             (template_hole 13, template_hole 12)))),
                      template_hole 5)),
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 0),
                        template_app
                         (template_hole 14,
                          template_app
                           (template_hole 4, template_hole 12)))),
                    template_hole 7))))
            )],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_hole 6),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 14,
                 template_app (template_hole 13, template_hole 12))),
             template_hole 0))))),
    ("Simplicial_complex.tftf_4",
     "[| dim_vec ?x = 4;
         ?x $ 0 = True & ?x $ 1 = False & ?x $ 2 = True & ?x $ 3 = False |]
      ==> ceros_of_boolean_input ?x = {1, 3}",
     template_implication
      ([template_equation
         (template_app (template_hole 15, template_var 0),
          template_app
           (template_hole 14,
            template_app
             (template_hole 13,
              template_app (template_hole 13, template_hole 12)))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 0),
                      template_hole 8)),
                  template_hole 7)),
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 0),
                        template_hole 6)),
                    template_hole 5)),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app
                         (template_app (template_hole 9, template_var 0),
                          template_app
                           (template_hole 14,
                            template_app
                             (template_hole 13, template_hole 12)))),
                      template_hole 7)),
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 0),
                        template_app
                         (template_hole 14,
                          template_app
                           (template_hole 4, template_hole 12)))),
                    template_hole 5))))
            )],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_hole 6),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 14,
                 template_app (template_hole 4, template_hole 12))),
             template_hole 0))))),
    ("Simplicial_complex.ffft_4",
     "[| dim_vec ?x = 4;
         ?x $ 0 = False & ?x $ 1 = False & ?x $ 2 = False & ?x $ 3 = True |]
      ==> ceros_of_boolean_input ?x = {0, 1, 2}",
     template_implication
      ([template_equation
         (template_app (template_hole 15, template_var 0),
          template_app
           (template_hole 14,
            template_app
             (template_hole 13,
              template_app (template_hole 13, template_hole 12)))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 0),
                      template_hole 8)),
                  template_hole 7)),
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 0),
                        template_hole 6)),
                    template_hole 7)),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app
                         (template_app (template_hole 9, template_var 0),
                          template_app
                           (template_hole 14,
                            template_app
                             (template_hole 13, template_hole 12)))),
                      template_hole 7)),
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 0),
                        template_app
                         (template_hole 14,
                          template_app
                           (template_hole 5, template_hole 12)))),
                    template_hole 4))))
            )],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_hole 8),
           template_app
            (template_app (template_hole 1, template_hole 6),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_hole 14,
                   template_app (template_hole 13, template_hole 12))),
               template_hole 0)))))),
    ("Simplicial_complex.fftf_4",
     "[| dim_vec ?x = 4;
         ?x $ 0 = False & ?x $ 1 = False & ?x $ 2 = True & ?x $ 3 = False |]
      ==> ceros_of_boolean_input ?x = {0, 1, 3}",
     template_implication
      ([template_equation
         (template_app (template_hole 15, template_var 0),
          template_app
           (template_hole 14,
            template_app
             (template_hole 13,
              template_app (template_hole 13, template_hole 12)))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 0),
                      template_hole 8)),
                  template_hole 7)),
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 0),
                        template_hole 6)),
                    template_hole 7)),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app
                         (template_app (template_hole 9, template_var 0),
                          template_app
                           (template_hole 14,
                            template_app
                             (template_hole 13, template_hole 12)))),
                      template_hole 5)),
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 0),
                        template_app
                         (template_hole 14,
                          template_app
                           (template_hole 4, template_hole 12)))),
                    template_hole 7))))
            )],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_hole 8),
           template_app
            (template_app (template_hole 1, template_hole 6),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_hole 14,
                   template_app (template_hole 4, template_hole 12))),
               template_hole 0)))))),
    ("Simplicial_complex.ttff_4",
     "[| dim_vec ?x = 4;
         ?x $ 0 = True & ?x $ 1 = True & ?x $ 2 = False & ?x $ 3 = False |]
      ==> ceros_of_boolean_input ?x = {2, 3}",
     template_implication
      ([template_equation
         (template_app (template_hole 15, template_var 0),
          template_app
           (template_hole 14,
            template_app
             (template_hole 13,
              template_app (template_hole 13, template_hole 12)))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 0),
                      template_hole 8)),
                  template_hole 7)),
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 0),
                        template_hole 6)),
                    template_hole 7)),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app
                         (template_app (template_hole 9, template_var 0),
                          template_app
                           (template_hole 14,
                            template_app
                             (template_hole 13, template_hole 12)))),
                      template_hole 5)),
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 0),
                        template_app
                         (template_hole 14,
                          template_app
                           (template_hole 4, template_hole 12)))),
                    template_hole 5))))
            )],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 14,
               template_app (template_hole 13, template_hole 12))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 14,
                 template_app (template_hole 4, template_hole 12))),
             template_hole 0))))),
    ("Simplicial_complex.dim_vec_2_cases",
     "dim_vec ?x = 2 ==>
      (?x $ 0 = ?x $ 1) = True |
      ?x $ 0 = False & ?x $ 1 = True |
      ?x $ 0 = True & ?x $ 1 = False | (?x $ 0 = ?x $ 1) = False",
     template_implication
      ([template_equation
         (template_app (template_hole 11, template_var 0),
          template_app
           (template_hole 10,
            template_app (template_hole 9, template_hole 8)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 5, template_var 0),
                         template_hole 4)),
                     template_app
                      (template_app (template_hole 5, template_var 0),
                       template_hole 3))),
                 template_hole 2)),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app
                          (template_app (template_hole 5, template_var 0),
                           template_hole 4)),
                       template_hole 0)),
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 5, template_var 0),
                         template_hole 3)),
                     template_hole 2))),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app
                          (template_hole 6,
                           template_app
                            (template_app (template_hole 5, template_var 0),
                             template_hole 4)),
                         template_hole 2)),
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app
                          (template_app (template_hole 5, template_var 0),
                           template_hole 3)),
                       template_hole 0))),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app
                          (template_app (template_hole 5, template_var 0),
                           template_hole 4)),
                       template_app
                        (template_app (template_hole 5, template_var 0),
                         template_hole 3))),
                   template_hole 0))))
           ))),
    ("Simplicial_complex.ftff_4",
     "[| dim_vec ?x = 4;
         ?x $ 0 = False & ?x $ 1 = True & ?x $ 2 = False & ?x $ 3 = False |]
      ==> ceros_of_boolean_input ?x = {0, 2, 3}",
     template_implication
      ([template_equation
         (template_app (template_hole 15, template_var 0),
          template_app
           (template_hole 14,
            template_app
             (template_hole 13,
              template_app (template_hole 13, template_hole 12)))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 0),
                      template_hole 8)),
                  template_hole 7)),
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 0),
                        template_hole 6)),
                    template_hole 5)),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app
                         (template_app (template_hole 9, template_var 0),
                          template_app
                           (template_hole 14,
                            template_app
                             (template_hole 13, template_hole 12)))),
                      template_hole 7)),
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 0),
                        template_app
                         (template_hole 14,
                          template_app
                           (template_hole 4, template_hole 12)))),
                    template_hole 7))))
            )],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_hole 8),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 14,
                 template_app (template_hole 13, template_hole 12))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_hole 14,
                   template_app (template_hole 4, template_hole 12))),
               template_hole 0)))))),
    ("Simplicial_complex.tfff_4",
     "[| dim_vec ?x = 4;
         ?x $ 0 = True & ?x $ 1 = False & ?x $ 2 = False & ?x $ 3 = False |]
      ==> ceros_of_boolean_input ?x = {1, 2, 3}",
     template_implication
      ([template_equation
         (template_app (template_hole 15, template_var 0),
          template_app
           (template_hole 14,
            template_app
             (template_hole 13,
              template_app (template_hole 13, template_hole 12)))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 0),
                      template_hole 8)),
                  template_hole 7)),
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 0),
                        template_hole 6)),
                    template_hole 5)),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app
                         (template_app (template_hole 9, template_var 0),
                          template_app
                           (template_hole 14,
                            template_app
                             (template_hole 13, template_hole 12)))),
                      template_hole 5)),
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 0),
                        template_app
                         (template_hole 14,
                          template_app
                           (template_hole 4, template_hole 12)))),
                    template_hole 5))))
            )],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_hole 6),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 14,
                 template_app (template_hole 13, template_hole 12))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_hole 14,
                   template_app (template_hole 4, template_hole 12))),
               template_hole 0)))))),
    ("Simplicial_complex.ffff_4",
     "[| dim_vec ?x = 4;
         ?x $ 0 = False &
         ?x $ 1 = False & ?x $ 2 = False & ?x $ 3 = False |]
      ==> ceros_of_boolean_input ?x = {0, 1, 2, 3}",
     template_implication
      ([template_equation
         (template_app (template_hole 14, template_var 0),
          template_app
           (template_hole 13,
            template_app
             (template_hole 12,
              template_app (template_hole 12, template_hole 11)))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 0),
                      template_hole 7)),
                  template_hole 6)),
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_app (template_hole 8, template_var 0),
                        template_hole 5)),
                    template_hole 6)),
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app
                       (template_hole 9,
                        template_app
                         (template_app (template_hole 8, template_var 0),
                          template_app
                           (template_hole 13,
                            template_app
                             (template_hole 12, template_hole 11)))),
                      template_hole 6)),
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_app (template_hole 8, template_var 0),
                        template_app
                         (template_hole 13,
                          template_app
                           (template_hole 4, template_hole 11)))),
                    template_hole 6))))
            )],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_hole 7),
           template_app
            (template_app (template_hole 1, template_hole 5),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_hole 13,
                   template_app (template_hole 12, template_hole 11))),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_hole 13,
                     template_app (template_hole 4, template_hole 11))),
                 template_hole 0))))))),
    ("Simplicial_complex.ceros_of_boolean_input_set",
     "dim_vec ?x = 4 ==>
      ceros_of_boolean_input ?x
      : {{}, {0}, {1}, {2}, {3}, {0, 1}, {0, 2}, {0, 3}, {1, 2}, {1, 3},
         {2, 3}, {0, 1, 2}, {0, 1, 3}, {0, 2, 3}, {1, 2, 3}, {0, 1, 2, 3}}",
     template_implication
      ([template_equation
         (template_app (template_hole 12, template_var 0),
          template_app
           (template_hole 11,
            template_app
             (template_hole 10,
              template_app (template_hole 10, template_hole 9))))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app (template_hole 7, template_var 0)),
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 4, template_hole 3),
                     template_hole 5)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 4, template_hole 2),
                       template_hole 5)),
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_hole 4,
                           template_app
                            (template_hole 11,
                             template_app
                              (template_hole 10, template_hole 9))),
                         template_hole 5)),
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app
                          (template_app
                            (template_hole 4,
                             template_app
                              (template_hole 11,
                               template_app
                                (template_hole 1, template_hole 9))),
                           template_hole 5)),
                       template_app
                        (template_app
                          (template_hole 6,
                           template_app
                            (template_app
                              (template_hole 4, template_hole 3),
                             template_app
                              (template_app
                                (template_hole 4, template_hole 2),
                               template_hole 5))),
                         template_app
                          (template_app
                            (template_hole 6,
                             template_app
                              (template_app
                                (template_hole 4, template_hole 3),
                               template_app
                                (template_app
                                  (template_hole 4,
                                   template_app
                                    (template_hole 11,
                                     template_app
(template_hole 10, template_hole 9))),
                                 template_hole 5))),
                           template_app
                            (template_app
                              (template_hole 6,
                               template_app
                                (template_app
                                  (template_hole 4, template_hole 3),
                                 template_app
                                  (template_app
                                    (template_hole 4,
                                     template_app
(template_hole 11, template_app (template_hole 1, template_hole 9))),
                                   template_hole 5))),
                             template_app
                              (template_app
                                (template_hole 6,
                                 template_app
                                  (template_app
                                    (template_hole 4, template_hole 2),
                                   template_app
                                    (template_app
(template_hole 4,
 template_app
  (template_hole 11, template_app (template_hole 10, template_hole 9))),
                                     template_hole 5))),
                               template_app
                                (template_app
                                  (template_hole 6,
                                   template_app
                                    (template_app
(template_hole 4, template_hole 2),
                                     template_app
(template_app
  (template_hole 4,
   template_app
    (template_hole 11, template_app (template_hole 1, template_hole 9))),
 template_hole 5))),
                                 template_app
                                  (template_app
                                    (template_hole 6,
                                     template_app
(template_app
  (template_hole 4,
   template_app
    (template_hole 11, template_app (template_hole 10, template_hole 9))),
 template_app
  (template_app
    (template_hole 4,
     template_app
      (template_hole 11, template_app (template_hole 1, template_hole 9))),
   template_hole 5))),
                                   template_app
                                    (template_app
(template_hole 6,
 template_app
  (template_app (template_hole 4, template_hole 3),
   template_app
    (template_app (template_hole 4, template_hole 2),
     template_app
      (template_app
        (template_hole 4,
         template_app
          (template_hole 11,
           template_app (template_hole 10, template_hole 9))),
       template_hole 5)))),
                                     template_app
(template_app
  (template_hole 6,
   template_app
    (template_app (template_hole 4, template_hole 3),
     template_app
      (template_app (template_hole 4, template_hole 2),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 11,
             template_app (template_hole 1, template_hole 9))),
         template_hole 5)))),
 template_app
  (template_app
    (template_hole 6,
     template_app
      (template_app (template_hole 4, template_hole 3),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 11,
             template_app (template_hole 10, template_hole 9))),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 11,
               template_app (template_hole 1, template_hole 9))),
           template_hole 5)))),
   template_app
    (template_app
      (template_hole 6,
       template_app
        (template_app (template_hole 4, template_hole 2),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 11,
               template_app (template_hole 10, template_hole 9))),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 11,
                 template_app (template_hole 1, template_hole 9))),
             template_hole 5)))),
     template_app
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_app (template_hole 4, template_hole 2),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 11,
                   template_app (template_hole 10, template_hole 9))),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 11,
                     template_app (template_hole 1, template_hole 9))),
                 template_hole 5))))),
       template_hole 0)))))))))))))))))
           ))),
    ("Simplicial_complex.dim_vec_3_cases",
     "dim_vec ?x = 3 ==>
      ((?x $ 0 = ?x $ 1) = ?x $ 2) = False |
      (?x $ 0 = ?x $ 1) = False & ?x $ 2 = True |
      (?x $ 0 = ?x $ 2) = False & ?x $ 1 = True |
      ?x $ 0 = False & (?x $ 1 = ?x $ 2) = True |
      ?x $ 0 = True & (?x $ 1 = ?x $ 2) = False |
      (?x $ 0 = ?x $ 2) = True & ?x $ 1 = False |
      (?x $ 0 = ?x $ 1) = True & ?x $ 2 = False |
      ((?x $ 0 = ?x $ 1) = ?x $ 2) = True",
     template_implication
      ([template_equation
         (template_app (template_hole 12, template_var 0),
          template_app
           (template_hole 11,
            template_app (template_hole 10, template_hole 9)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app
                          (template_hole 7,
                           template_app
                            (template_app (template_hole 6, template_var 0),
                             template_hole 5)),
                         template_app
                          (template_app (template_hole 6, template_var 0),
                           template_hole 4))),
                     template_app
                      (template_app (template_hole 6, template_var 0),
                       template_app
                        (template_hole 11,
                         template_app
                          (template_hole 3, template_hole 9))))),
                 template_hole 2)),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_hole 7,
                         template_app
                          (template_app
                            (template_hole 7,
                             template_app
                              (template_app
                                (template_hole 6, template_var 0),
                               template_hole 5)),
                           template_app
                            (template_app (template_hole 6, template_var 0),
                             template_hole 4))),
                       template_hole 2)),
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app (template_hole 6, template_var 0),
                         template_app
                          (template_hole 11,
                           template_app
                            (template_hole 3, template_hole 9)))),
                     template_hole 0))),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app
                          (template_hole 7,
                           template_app
                            (template_app
                              (template_hole 7,
                               template_app
                                (template_app
                                  (template_hole 6, template_var 0),
                                 template_hole 5)),
                             template_app
                              (template_app
                                (template_hole 6, template_var 0),
                               template_app
                                (template_hole 11,
                                 template_app
                                  (template_hole 3, template_hole 9))))),
                         template_hole 2)),
                     template_app
                      (template_app
                        (template_hole 7,
                         template_app
                          (template_app (template_hole 6, template_var 0),
                           template_hole 4)),
                       template_hole 0))),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app
                        (template_hole 1,
                         template_app
                          (template_app
                            (template_hole 7,
                             template_app
                              (template_app
                                (template_hole 6, template_var 0),
                               template_hole 5)),
                           template_hole 2)),
                       template_app
                        (template_app
                          (template_hole 7,
                           template_app
                            (template_app
                              (template_hole 7,
                               template_app
                                (template_app
                                  (template_hole 6, template_var 0),
                                 template_hole 4)),
                             template_app
                              (template_app
                                (template_hole 6, template_var 0),
                               template_app
                                (template_hole 11,
                                 template_app
                                  (template_hole 3, template_hole 9))))),
                         template_hole 0))),
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_app
                          (template_hole 1,
                           template_app
                            (template_app
                              (template_hole 7,
                               template_app
                                (template_app
                                  (template_hole 6, template_var 0),
                                 template_hole 5)),
                             template_hole 0)),
                         template_app
                          (template_app
                            (template_hole 7,
                             template_app
                              (template_app
                                (template_hole 7,
                                 template_app
                                  (template_app
                                    (template_hole 6, template_var 0),
                                   template_hole 4)),
                               template_app
                                (template_app
                                  (template_hole 6, template_var 0),
                                 template_app
                                  (template_hole 11,
                                   template_app
                                    (template_hole 3, template_hole 9))))),
                           template_hole 2))),
                     template_app
                      (template_app
                        (template_hole 8,
                         template_app
                          (template_app
                            (template_hole 1,
                             template_app
                              (template_app
                                (template_hole 7,
                                 template_app
                                  (template_app
                                    (template_hole 7,
                                     template_app
(template_app (template_hole 6, template_var 0), template_hole 5)),
                                   template_app
                                    (template_app
(template_hole 6, template_var 0),
                                     template_app
(template_hole 11, template_app (template_hole 3, template_hole 9))))),
                               template_hole 0)),
                           template_app
                            (template_app
                              (template_hole 7,
                               template_app
                                (template_app
                                  (template_hole 6, template_var 0),
                                 template_hole 4)),
                             template_hole 2))),
                       template_app
                        (template_app
                          (template_hole 8,
                           template_app
                            (template_app
                              (template_hole 1,
                               template_app
                                (template_app
                                  (template_hole 7,
                                   template_app
                                    (template_app
(template_hole 7,
 template_app
  (template_app (template_hole 6, template_var 0), template_hole 5)),
                                     template_app
(template_app (template_hole 6, template_var 0), template_hole 4))),
                                 template_hole 0)),
                             template_app
                              (template_app
                                (template_hole 7,
                                 template_app
                                  (template_app
                                    (template_hole 6, template_var 0),
                                   template_app
                                    (template_hole 11,
                                     template_app
(template_hole 3, template_hole 9)))),
                               template_hole 2))),
                         template_app
                          (template_app
                            (template_hole 7,
                             template_app
                              (template_app
                                (template_hole 7,
                                 template_app
                                  (template_app
                                    (template_hole 7,
                                     template_app
(template_app (template_hole 6, template_var 0), template_hole 5)),
                                   template_app
                                    (template_app
(template_hole 6, template_var 0),
                                     template_hole 4))),
                               template_app
                                (template_app
                                  (template_hole 6, template_var 0),
                                 template_app
                                  (template_hole 11,
                                   template_app
                                    (template_hole 3, template_hole 9))))),
                           template_hole 0))))))))
           ))),
    ("Simplicial_complex.dim_vec_4_cases",
     "dim_vec ?x = 4 ==>
      (((?x $ 0 = ?x $ 1) = ?x $ 2) = ?x $ 3) = False |
      ((?x $ 0 = ?x $ 1) = ?x $ 2) = False & ?x $ 3 = True |
      ((?x $ 0 = ?x $ 1) = ?x $ 3) = False & ?x $ 2 = True |
      (?x $ 0 = ?x $ 1) = False & (?x $ 2 = ?x $ 3) = True |
      ((?x $ 0 = ?x $ 2) = ?x $ 3) = False & ?x $ 1 = True |
      (?x $ 0 = ?x $ 2) = False & (?x $ 1 = ?x $ 3) = True |
      (?x $ 0 = ?x $ 3) = False & (?x $ 1 = ?x $ 2) = True |
      ?x $ 0 = False & ((?x $ 1 = ?x $ 2) = ?x $ 3) = True |
      ?x $ 0 = True & ((?x $ 1 = ?x $ 2) = ?x $ 3) = False |
      (?x $ 0 = ?x $ 3) = True & (?x $ 1 = ?x $ 2) = False |
      (?x $ 0 = ?x $ 2) = True & (?x $ 1 = ?x $ 3) = False |
      ((?x $ 0 = ?x $ 2) = ?x $ 3) = True & ?x $ 1 = False |
      (?x $ 0 = ?x $ 1) = True & (?x $ 2 = ?x $ 3) = False |
      ((?x $ 0 = ?x $ 1) = ?x $ 3) = True & ?x $ 2 = False |
      ((?x $ 0 = ?x $ 1) = ?x $ 2) = True & ?x $ 3 = False |
      (((?x $ 0 = ?x $ 1) = ?x $ 2) = ?x $ 3) = True",
     template_implication
      ([template_equation
         (template_app (template_hole 12, template_var 0),
          template_app
           (template_hole 11,
            template_app
             (template_hole 10,
              template_app (template_hole 10, template_hole 9))))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app
                          (template_hole 7,
                           template_app
                            (template_app
                              (template_hole 7,
                               template_app
                                (template_app
                                  (template_hole 6, template_var 0),
                                 template_hole 5)),
                             template_app
                              (template_app
                                (template_hole 6, template_var 0),
                               template_hole 4))),
                         template_app
                          (template_app (template_hole 6, template_var 0),
                           template_app
                            (template_hole 11,
                             template_app
                              (template_hole 10, template_hole 9))))),
                     template_app
                      (template_app (template_hole 6, template_var 0),
                       template_app
                        (template_hole 11,
                         template_app
                          (template_hole 3, template_hole 9))))),
                 template_hole 2)),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_hole 7,
                         template_app
                          (template_app
                            (template_hole 7,
                             template_app
                              (template_app
                                (template_hole 7,
                                 template_app
                                  (template_app
                                    (template_hole 6, template_var 0),
                                   template_hole 5)),
                               template_app
                                (template_app
                                  (template_hole 6, template_var 0),
                                 template_hole 4))),
                           template_app
                            (template_app (template_hole 6, template_var 0),
                             template_app
                              (template_hole 11,
                               template_app
                                (template_hole 10, template_hole 9))))),
                       template_hole 2)),
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app (template_hole 6, template_var 0),
                         template_app
                          (template_hole 11,
                           template_app
                            (template_hole 3, template_hole 9)))),
                     template_hole 0))),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app
                          (template_hole 7,
                           template_app
                            (template_app
                              (template_hole 7,
                               template_app
                                (template_app
                                  (template_hole 7,
                                   template_app
                                    (template_app
(template_hole 6, template_var 0),
                                     template_hole 5)),
                                 template_app
                                  (template_app
                                    (template_hole 6, template_var 0),
                                   template_hole 4))),
                             template_app
                              (template_app
                                (template_hole 6, template_var 0),
                               template_app
                                (template_hole 11,
                                 template_app
                                  (template_hole 3, template_hole 9))))),
                         template_hole 2)),
                     template_app
                      (template_app
                        (template_hole 7,
                         template_app
                          (template_app (template_hole 6, template_var 0),
                           template_app
                            (template_hole 11,
                             template_app
                              (template_hole 10, template_hole 9)))),
                       template_hole 0))),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app
                        (template_hole 1,
                         template_app
                          (template_app
                            (template_hole 7,
                             template_app
                              (template_app
                                (template_hole 7,
                                 template_app
                                  (template_app
                                    (template_hole 6, template_var 0),
                                   template_hole 5)),
                               template_app
                                (template_app
                                  (template_hole 6, template_var 0),
                                 template_hole 4))),
                           template_hole 2)),
                       template_app
                        (template_app
                          (template_hole 7,
                           template_app
                            (template_app
                              (template_hole 7,
                               template_app
                                (template_app
                                  (template_hole 6, template_var 0),
                                 template_app
                                  (template_hole 11,
                                   template_app
                                    (template_hole 10, template_hole 9)))),
                             template_app
                              (template_app
                                (template_hole 6, template_var 0),
                               template_app
                                (template_hole 11,
                                 template_app
                                  (template_hole 3, template_hole 9))))),
                         template_hole 0))),
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_app
                          (template_hole 1,
                           template_app
                            (template_app
                              (template_hole 7,
                               template_app
                                (template_app
                                  (template_hole 7,
                                   template_app
                                    (template_app
(template_hole 7,
 template_app
  (template_app (template_hole 6, template_var 0), template_hole 5)),
                                     template_app
(template_app (template_hole 6, template_var 0),
 template_app
  (template_hole 11, template_app (template_hole 10, template_hole 9))))),
                                 template_app
                                  (template_app
                                    (template_hole 6, template_var 0),
                                   template_app
                                    (template_hole 11,
                                     template_app
(template_hole 3, template_hole 9))))),
                             template_hole 2)),
                         template_app
                          (template_app
                            (template_hole 7,
                             template_app
                              (template_app
                                (template_hole 6, template_var 0),
                               template_hole 4)),
                           template_hole 0))),
                     template_app
                      (template_app
                        (template_hole 8,
                         template_app
                          (template_app
                            (template_hole 1,
                             template_app
                              (template_app
                                (template_hole 7,
                                 template_app
                                  (template_app
                                    (template_hole 7,
                                     template_app
(template_app (template_hole 6, template_var 0), template_hole 5)),
                                   template_app
                                    (template_app
(template_hole 6, template_var 0),
                                     template_app
(template_hole 11, template_app (template_hole 10, template_hole 9))))),
                               template_hole 2)),
                           template_app
                            (template_app
                              (template_hole 7,
                               template_app
                                (template_app
                                  (template_hole 7,
                                   template_app
                                    (template_app
(template_hole 6, template_var 0),
                                     template_hole 4)),
                                 template_app
                                  (template_app
                                    (template_hole 6, template_var 0),
                                   template_app
                                    (template_hole 11,
                                     template_app
(template_hole 3, template_hole 9))))),
                             template_hole 0))),
                       template_app
                        (template_app
                          (template_hole 8,
                           template_app
                            (template_app
                              (template_hole 1,
                               template_app
                                (template_app
                                  (template_hole 7,
                                   template_app
                                    (template_app
(template_hole 7,
 template_app
  (template_app (template_hole 6, template_var 0), template_hole 5)),
                                     template_app
(template_app (template_hole 6, template_var 0),
 template_app
  (template_hole 11, template_app (template_hole 3, template_hole 9))))),
                                 template_hole 2)),
                             template_app
                              (template_app
                                (template_hole 7,
                                 template_app
                                  (template_app
                                    (template_hole 7,
                                     template_app
(template_app (template_hole 6, template_var 0), template_hole 4)),
                                   template_app
                                    (template_app
(template_hole 6, template_var 0),
                                     template_app
(template_hole 11, template_app (template_hole 10, template_hole 9))))),
                               template_hole 0))),
                         template_app
                          (template_app
                            (template_hole 8,
                             template_app
                              (template_app
                                (template_hole 1,
                                 template_app
                                  (template_app
                                    (template_hole 7,
                                     template_app
(template_app (template_hole 6, template_var 0), template_hole 5)),
                                   template_hole 2)),
                               template_app
                                (template_app
                                  (template_hole 7,
                                   template_app
                                    (template_app
(template_hole 7,
 template_app
  (template_app
    (template_hole 7,
     template_app
      (template_app (template_hole 6, template_var 0), template_hole 4)),
   template_app
    (template_app (template_hole 6, template_var 0),
     template_app
      (template_hole 11,
       template_app (template_hole 10, template_hole 9))))),
                                     template_app
(template_app (template_hole 6, template_var 0),
 template_app
  (template_hole 11, template_app (template_hole 3, template_hole 9))))),
                                 template_hole 0))),
                           template_app
                            (template_app
                              (template_hole 8,
                               template_app
                                (template_app
                                  (template_hole 1,
                                   template_app
                                    (template_app
(template_hole 7,
 template_app
  (template_app (template_hole 6, template_var 0), template_hole 5)),
                                     template_hole 0)),
                                 template_app
                                  (template_app
                                    (template_hole 7,
                                     template_app
(template_app
  (template_hole 7,
   template_app
    (template_app
      (template_hole 7,
       template_app
        (template_app (template_hole 6, template_var 0), template_hole 4)),
     template_app
      (template_app (template_hole 6, template_var 0),
       template_app
        (template_hole 11,
         template_app (template_hole 10, template_hole 9))))),
 template_app
  (template_app (template_hole 6, template_var 0),
   template_app
    (template_hole 11, template_app (template_hole 3, template_hole 9))))),
                                   template_hole 2))),
                             template_app
                              (template_app
                                (template_hole 8,
                                 template_app
                                  (template_app
                                    (template_hole 1,
                                     template_app
(template_app
  (template_hole 7,
   template_app
    (template_app
      (template_hole 7,
       template_app
        (template_app (template_hole 6, template_var 0), template_hole 5)),
     template_app
      (template_app (template_hole 6, template_var 0),
       template_app
        (template_hole 11,
         template_app (template_hole 3, template_hole 9))))),
 template_hole 0)),
                                   template_app
                                    (template_app
(template_hole 7,
 template_app
  (template_app
    (template_hole 7,
     template_app
      (template_app (template_hole 6, template_var 0), template_hole 4)),
   template_app
    (template_app (template_hole 6, template_var 0),
     template_app
      (template_hole 11,
       template_app (template_hole 10, template_hole 9))))),
                                     template_hole 2))),
                               template_app
                                (template_app
                                  (template_hole 8,
                                   template_app
                                    (template_app
(template_hole 1,
 template_app
  (template_app
    (template_hole 7,
     template_app
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 0),
           template_hole 5)),
       template_app
        (template_app (template_hole 6, template_var 0),
         template_app
          (template_hole 11,
           template_app (template_hole 10, template_hole 9))))),
   template_hole 0)),
                                     template_app
(template_app
  (template_hole 7,
   template_app
    (template_app
      (template_hole 7,
       template_app
        (template_app (template_hole 6, template_var 0), template_hole 4)),
     template_app
      (template_app (template_hole 6, template_var 0),
       template_app
        (template_hole 11,
         template_app (template_hole 3, template_hole 9))))),
 template_hole 2))),
                                 template_app
                                  (template_app
                                    (template_hole 8,
                                     template_app
(template_app
  (template_hole 1,
   template_app
    (template_app
      (template_hole 7,
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_hole 5)),
             template_app
              (template_app (template_hole 6, template_var 0),
               template_app
                (template_hole 11,
                 template_app (template_hole 10, template_hole 9))))),
         template_app
          (template_app (template_hole 6, template_var 0),
           template_app
            (template_hole 11,
             template_app (template_hole 3, template_hole 9))))),
     template_hole 0)),
 template_app
  (template_app
    (template_hole 7,
     template_app
      (template_app (template_hole 6, template_var 0), template_hole 4)),
   template_hole 2))),
                                   template_app
                                    (template_app
(template_hole 8,
 template_app
  (template_app
    (template_hole 1,
     template_app
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 0),
               template_hole 5)),
           template_app
            (template_app (template_hole 6, template_var 0),
             template_hole 4))),
       template_hole 0)),
   template_app
    (template_app
      (template_hole 7,
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 0),
             template_app
              (template_hole 11,
               template_app (template_hole 10, template_hole 9)))),
         template_app
          (template_app (template_hole 6, template_var 0),
           template_app
            (template_hole 11,
             template_app (template_hole 3, template_hole 9))))),
     template_hole 2))),
                                     template_app
(template_app
  (template_hole 8,
   template_app
    (template_app
      (template_hole 1,
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_hole 5)),
                 template_app
                  (template_app (template_hole 6, template_var 0),
                   template_hole 4))),
             template_app
              (template_app (template_hole 6, template_var 0),
               template_app
                (template_hole 11,
                 template_app (template_hole 3, template_hole 9))))),
         template_hole 0)),
     template_app
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 0),
           template_app
            (template_hole 11,
             template_app (template_hole 10, template_hole 9)))),
       template_hole 2))),
 template_app
  (template_app
    (template_hole 8,
     template_app
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 6, template_var 0),
                       template_hole 5)),
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_hole 4))),
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_app
                  (template_hole 11,
                   template_app (template_hole 10, template_hole 9))))),
           template_hole 0)),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 0),
             template_app
              (template_hole 11,
               template_app (template_hole 3, template_hole 9)))),
         template_hole 2))),
   template_app
    (template_app
      (template_hole 7,
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_hole 5)),
                 template_app
                  (template_app (template_hole 6, template_var 0),
                   template_hole 4))),
             template_app
              (template_app (template_hole 6, template_var 0),
               template_app
                (template_hole 11,
                 template_app (template_hole 10, template_hole 9))))),
         template_app
          (template_app (template_hole 6, template_var 0),
           template_app
            (template_hole 11,
             template_app (template_hole 3, template_hole 9))))),
     template_hole 0))))))))))))))))
           )))]:
   (string * thm * template) list
### theory "Draft.Simplicial_complexMoreTemplates"
### 0.550s elapsed time, 0.752s cpu time, 0.088s GC time
val it = (): unit
