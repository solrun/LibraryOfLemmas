Loading theory "Draft.BinaryTree" (required by "Draft.BinaryTree_MapMoreTemplates" via "Draft.BinaryTree_Map")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.BinaryTree_MapMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.BinaryTree_MapMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.BinaryTree_MapMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.152s elapsed time, 0.620s cpu time, 0.053s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.BinaryTree_MapMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.198s elapsed time, 0.801s cpu time, 0.053s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.BinaryTree_MapMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.352s elapsed time, 1.408s cpu time, 0.154s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.BinaryTree_MapMoreTemplates" via "Draft.ExtrEqs")
consts
  setOf :: "'a Tree => 'a set"
consts
  sortedTree :: "('a => int) => 'a Tree => bool"
consts
  tlookup :: "('a => int) => int => 'a Tree => 'a option"
consts
  binsert :: "('a => int) => 'a => 'a Tree => 'a Tree"
### No equation for constructor "Tip"
consts
  rm :: "('a => int) => 'a Tree => 'a"
### No equation for constructor "Tip"
consts
  wrm :: "('a => int) => 'a Tree => 'a Tree"
### No equation for constructor "Tip"
consts
  wrmrm :: "('a => int) => 'a Tree => 'a Tree * 'a"
consts
  remove :: "('a => int) => 'a => 'a Tree => 'a Tree"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
### Legacy feature! export_code with file argument (line 796 of "$AFP/BinarySearchTree/BinaryTree.thy")
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "Draft.BinaryTree"
### 0.786s elapsed time, 3.099s cpu time, 0.403s GC time
Loading theory "Draft.BinaryTree_Map" (required by "Draft.BinaryTree_MapMoreTemplates")
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### theory "Draft.BinaryTree_Map"
### 0.273s elapsed time, 0.929s cpu time, 0.533s GC time
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 1.022s elapsed time, 3.735s cpu time, 0.920s GC time
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.953s elapsed time, 3.321s cpu time, 0.819s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.781s elapsed time, 4.847s cpu time, 1.049s GC time
Loading theory "Draft.Templates" (required by "Draft.BinaryTree_MapMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.047s elapsed time, 0.063s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.BinaryTree_MapMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.448s elapsed time, 0.507s cpu time, 0.071s GC time
Loading theory "Draft.BinaryTree_MapMoreTemplates"
val templateLemmas =
   [("BinaryTree_Map.mtip_spec_empty", "mapOf Tip ?k = None",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("BinaryTree_Map.mremove_valid",
     "valid_tmap ?t ==> valid_tmap (mremove ?i ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("BinaryTree_Map.mupdate_valid",
     "valid_tmap ?t ==> valid_tmap (mupdate ?i ?a ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("BinaryTree_Map.mremove_map",
     "valid_tmap ?t ==> mapOf (mremove ?i ?t) ?i = None",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_var 0),
         template_hole 0))),
    ("BinaryTree_Map.mapOf_lookup3",
     "mapOf ?t ?i = None ==> tlookup fst ?i ?t = None",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 1), template_var 0),
          template_hole 4)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0),
           template_var 1),
         template_hole 0))),
    ("BinaryTree_Map.mapOf_lookup1",
     "tlookup fst ?i ?t = None ==> mapOf ?t ?i = None",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 1),
            template_var 0),
          template_hole 3)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("BinaryTree_Map.mupdate_map",
     "valid_tmap ?t ==> mapOf (mupdate ?i ?a ?t) = mapOf ?t(?i |-> ?a)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 2))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 3, template_var 2)),
             template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("BinaryTree_Map.mapset_some",
     "valid_tmap ?t ==> (mapOf ?t ?i = Some ?a) = ((?i, ?a) : setOf ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1)),
           template_app (template_hole 3, template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app (template_hole 0, template_var 2))))),
    ("BinaryTree_Map.mapOf_lookup2",
     "tlookup fst ?i ?t = Some (?j, ?a) ==> mapOf ?t ?i = Some ?a",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 6, template_hole 5),
              template_var 3),
            template_var 2),
          template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 3),
         template_app (template_hole 0, template_var 0)))),
    ("BinaryTree_Map.mapset_none",
     "valid_tmap ?t ==>
      (mapOf ?t ?i = None) = (ALL a. (?i, a) ~: setOf ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 9, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 1),
               template_var 0)),
           template_hole 5),
         template_app (template_hole 4, t_empty)))),
    ("BinaryTree_Map.mapOf_lookup4",
     "[| valid_tmap ?t; mapOf ?t ?i = Some ?a |]
      ==> tlookup fst ?i ?t = Some (?i, ?a)",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 6, template_var 2), template_var 1),
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 1),
           template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)))))]:
   (string * thm * template) list
### theory "Draft.BinaryTree_MapMoreTemplates"
### 0.266s elapsed time, 0.358s cpu time, 0.000s GC time
val it = (): unit
