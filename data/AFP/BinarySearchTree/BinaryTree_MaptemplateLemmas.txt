   [("BinaryTree_Map.mtip_spec_empty", "mapOf Tip ?k = None",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("BinaryTree_Map.mremove_valid",
     "valid_tmap ?t ==> valid_tmap (mremove ?i ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("BinaryTree_Map.mupdate_valid",
     "valid_tmap ?t ==> valid_tmap (mupdate ?i ?a ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("BinaryTree_Map.mremove_map",
     "valid_tmap ?t ==> mapOf (mremove ?i ?t) ?i = None",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_var 0),
         template_hole 0))),
    ("BinaryTree_Map.mapOf_lookup3",
     "mapOf ?t ?i = None ==> tlookup fst ?i ?t = None",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 1), template_var 0),
          template_hole 4)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0),
           template_var 1),
         template_hole 0))),
    ("BinaryTree_Map.mapOf_lookup1",
     "tlookup fst ?i ?t = None ==> mapOf ?t ?i = None",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 1),
            template_var 0),
          template_hole 3)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("BinaryTree_Map.mupdate_map",
     "valid_tmap ?t ==> mapOf (mupdate ?i ?a ?t) = mapOf ?t(?i |-> ?a)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 2))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 3, template_var 2)),
             template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("BinaryTree_Map.mapset_some",
     "valid_tmap ?t ==> (mapOf ?t ?i = Some ?a) = ((?i, ?a) : setOf ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1)),
           template_app (template_hole 3, template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app (template_hole 0, template_var 2))))),
    ("BinaryTree_Map.mapOf_lookup2",
     "tlookup fst ?i ?t = Some (?j, ?a) ==> mapOf ?t ?i = Some ?a",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 6, template_hole 5),
              template_var 3),
            template_var 2),
          template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 3),
         template_app (template_hole 0, template_var 0)))),
    ("BinaryTree_Map.mapset_none",
     "valid_tmap ?t ==>
      (mapOf ?t ?i = None) = (ALL a. (?i, a) ~: setOf ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 9, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 1),
               template_var 0)),
           template_hole 5),
         template_app (template_hole 4, t_empty)))),
    ("BinaryTree_Map.mapOf_lookup4",
     "[| valid_tmap ?t; mapOf ?t ?i = Some ?a |]
      ==> tlookup fst ?i ?t = Some (?i, ?a)",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 6, template_var 2), template_var 1),
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 1),
           template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)))))]
