Loading theory "Draft.BinaryTree" (required by "Draft.BinaryTreeMoreTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.BinaryTreeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.BinaryTreeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.BinaryTreeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.151s elapsed time, 0.618s cpu time, 0.054s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.BinaryTreeMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.199s elapsed time, 0.811s cpu time, 0.054s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.BinaryTreeMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.375s elapsed time, 1.499s cpu time, 0.147s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.BinaryTreeMoreTemplates" via "Draft.ExtrEqs")
consts
  setOf :: "'a Tree => 'a set"
consts
  sortedTree :: "('a => int) => 'a Tree => bool"
consts
  tlookup :: "('a => int) => int => 'a Tree => 'a option"
consts
  binsert :: "('a => int) => 'a => 'a Tree => 'a Tree"
### No equation for constructor "Tip"
consts
  rm :: "('a => int) => 'a Tree => 'a"
### No equation for constructor "Tip"
consts
  wrm :: "('a => int) => 'a Tree => 'a Tree"
### No equation for constructor "Tip"
consts
  wrmrm :: "('a => int) => 'a Tree => 'a Tree * 'a"
consts
  remove :: "('a => int) => 'a => 'a Tree => 'a Tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### Legacy feature! export_code with file argument (line 796 of "$AFP/BinarySearchTree/BinaryTree.thy")
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.BinaryTree"
### 0.964s elapsed time, 3.813s cpu time, 0.409s GC time
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.BigO"
### 1.028s elapsed time, 3.815s cpu time, 0.914s GC time
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.075s elapsed time, 3.606s cpu time, 0.854s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.001s elapsed time, 5.269s cpu time, 1.034s GC time
Loading theory "Draft.Templates" (required by "Draft.BinaryTreeMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.049s elapsed time, 0.064s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.BinaryTreeMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.469s elapsed time, 0.517s cpu time, 0.056s GC time
Loading theory "Draft.BinaryTreeMoreTemplates"
val templateLemmas =
   [("BinaryTree.sorted_distinct", "sorted_distinct_pred ?h ?a ?b ?t",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)
         )),
    ("BinaryTree.binsert_sorted",
     "sortedTree ?h ?t --> sortedTree ?h (binsert ?h ?x ?t)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0),
               template_var 1)))
         )),
    ("BinaryTree.remove_sort",
     "sortedTree ?h ?t --> sortedTree ?h (remove ?h ?e ?t)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0),
               template_var 1)))
         )),
    ("BinaryTree.sortLemmaL",
     "sortedTree ?h (T ?t1.0 ?x ?t2.0) ==> sortedTree ?h ?t1.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 3), template_var 2)
           ))),
    ("BinaryTree.sortLemmaR",
     "sortedTree ?h (T ?t1.0 ?x ?t2.0) ==> sortedTree ?h ?t2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 3), template_var 0)
           ))),
    ("BinaryTree.wrm_sort",
     "?t ~= Tip & sortedTree ?h ?t --> sortedTree ?h (wrm ?h ?t)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_hole 2))),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1))),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))
         )),
    ("BinaryTree.memb_spec",
     "sortedTree ?h ?t ==> memb ?h ?x ?t = (?x : setOf ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 1))))),
    ("BinaryTree.rm_set",
     "?t ~= Tip & sortedTree ?h ?t --> rm ?h ?t : setOf ?t",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_hole 4))),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 1))),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)),
             template_app (template_hole 0, template_var 1)))
         )),
    ("BinaryTree.remove_set",
     "sortedTree ?h ?t --> setOf (remove ?h ?e ?t) = setOf ?t - eqs ?h ?e",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 1)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 0),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 3, template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0))))
         )),
    ("BinaryTree.wrmrm_decomp",
     "?t ~= Tip --> wrmrm ?h ?t = (wrm ?h ?t, rm ?h ?t)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_hole 5))),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1))))
         )),
    ("BinaryTree.wrm_set1",
     "?t ~= Tip & sortedTree ?h ?t --> setOf (wrm ?h ?t) <= setOf ?t",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_hole 4))),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 1))),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1))),
             template_app (template_hole 1, template_var 1)))
         )),
    ("BinaryTree.tlookup_finds",
     "sortedTree ?h ?t & ?y : setOf ?t --> tlookup ?h (?h ?y) ?t = Some ?y",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_var 1)),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app (template_hole 3, template_var 1)))),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_app (template_var 2, template_var 0)),
                 template_var 1)),
             template_app (template_hole 0, template_var 0)))
         )),
    ("BinaryTree.binsert_set",
     "sortedTree ?h ?t -->
      setOf (binsert ?h ?e ?t) = setOf ?t - eqs ?h ?e Un {?e}",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_var 2),
               template_var 1)),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_app (template_hole 5, template_var 2),
                     template_var 0),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 6, template_var 1)),
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 0))),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0))))
         )),
    ("BinaryTree.tlookup_none",
     "sortedTree ?h ?t & tlookup ?h ?k ?t = None -->
      (ALL x:setOf ?t. ?h x ~= ?k)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 2),
                   template_var 1)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_app (template_hole 5, template_var 2),
                       template_var 0),
                     template_var 1)),
                 template_hole 4))),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             t_empty))
         )),
    ("BinaryTree.disjCond",
     "(!!x. [| x : ?A; x : ?B |] ==> False) ==> ?A Int ?B = {}",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("BinaryTree.tlookup_some",
     "sortedTree ?h ?t & tlookup ?h ?k ?t = Some ?x -->
      ?x : setOf ?t & ?h ?x = ?k",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 3),
                   template_var 2)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_app (template_hole 4, template_var 3),
                       template_var 1),
                     template_var 2)),
                 template_app (template_hole 3, template_var 0)))),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app (template_hole 1, template_var 2))),
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_var 3, template_var 0)),
               template_var 1)))
         )),
    ("BinaryTree.wrm_set",
     "?t ~= Tip & sortedTree ?h ?t -->
      setOf (wrm ?h ?t) = setOf ?t - {rm ?h ?t}",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_hole 10,
                   template_app
                    (template_app (template_hole 9, template_var 1),
                     template_hole 8))),
               template_app
                (template_app (template_hole 7, template_var 0),
                 template_var 1))),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 5, template_var 1)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 1)),
                 template_hole 0))))
         )),
    ("BinaryTree.wrm_less_rm",
     "?t ~= Tip & sortedTree ?h ?t -->
      (ALL l:setOf (wrm ?h ?t). ?h l < ?h (rm ?h ?t))",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 1),
                     template_hole 6))),
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_var 1))),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 1))),
             t_empty))
         )),
    ("BinaryTree.remove_spec",
     "sortedTree ?h ?t -->
      sortedTree ?h (remove ?h ?e ?t) &
      setOf (remove ?h ?e ?t) = setOf ?t - eqs ?h ?e",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 2),
               template_var 1)),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 6, template_var 2),
                 template_app
                  (template_app
                    (template_app (template_hole 4, template_var 2),
                     template_var 0),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 4, template_var 2),
                       template_var 0),
                     template_var 1))),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 2, template_var 1)),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0)))))
         )),
    ("BinaryTree.cases3",
     "[| ?C1.0 ==> ?G; ?C2.0 ==> ?G; ?C3.0 ==> ?G; ?C1.0 | ?C2.0 | ?C3.0 |]
      ==> ?G",
     template_implication
      ([template_implication
         ([template_predicate (template_var 3)],
          template_predicate (template_var 2)),
        template_implication
         ([template_predicate (template_var 1)],
          template_predicate (template_var 2)),
        template_implication
         ([template_predicate (template_var 0)],
          template_predicate (template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 3),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate (template_var 2))),
    ("BinaryTree.binsert_spec",
     "sortedTree ?h ?t -->
      sortedTree ?h (binsert ?h ?x ?t) &
      setOf (binsert ?h ?e ?t) = setOf ?t - eqs ?h ?e Un {?e}",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_var 3),
               template_var 2)),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 9, template_var 3),
                 template_app
                  (template_app
                    (template_app (template_hole 7, template_var 3),
                     template_var 1),
                   template_var 2))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_app (template_hole 7, template_var 3),
                       template_var 0),
                     template_var 2))),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 5, template_var 2)),
                     template_app
                      (template_app (template_hole 2, template_var 3),
                       template_var 0))),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0)))))
         ))]:
   (string * thm * template) list
### theory "Draft.BinaryTreeMoreTemplates"
### 0.271s elapsed time, 0.351s cpu time, 0.000s GC time
val it = (): unit
