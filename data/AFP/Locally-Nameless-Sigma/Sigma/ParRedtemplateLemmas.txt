   [("ParRed.par_beta_refl", "lc ?t ==> ?t => ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 0)
           ))),
    ("ParRed.Fvar_pbeta", "(Fvar ?x => ?t) = (?t = Fvar ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_var 0, template_app (template_hole 1, template_var 1)))),
    ("ParRed.par_beta_lc", "?t => ?t' ==> lc ?t & lc ?t'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("ParRed.renaming_par_beta",
     "?t => ?t' ==>
      [?s \<rightarrow> Fvar ?sa] ?t => [?s \<rightarrow> Fvar ?sa] ?t'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 1),
                   template_app (template_hole 0, template_var 0)),
                 template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_app (template_hole 0, template_var 0)),
               template_var 2))
           ))),
    ("ParRed.par_beta_cases",
     "[| Fvar ?x => ?t; ?t = Fvar ?x ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app (template_hole 1, template_var 2))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("ParRed.par_beta_preserves_FV",
     "[| ?t => ?t'; ?x ~: FV ?t |] ==> ?x ~: FV ?t'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 0),
                  template_app (template_hole 0, template_var 2))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_var 1))
               )
           ))),
    ("ParRed.par_beta_ssubst",
     "[| ?t => ?t'; ?v => ?v' |]
      ==> [?x \<rightarrow> ?v] ?t => [?x \<rightarrow> ?v'] ?t'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2),
                 template_var 4)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1),
               template_var 3))
           ))),
    ("ParRed.Obj_par_red",
     "[| Obj ?f ?T => ?z;
         !!lz. [| dom lz = dom ?f; ?z = Obj lz ?T |] ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("ParRed.par_beta_body_refl",
     "body ?u ==>
      EX L. finite L &
            (ALL s p.
                s ~: L & p ~: L & s ~= p -->
                (EX t'.
                    ?u\<^bsup>[Fvar s,Fvar p]\<^esup> => t' &
                    ?u = \<sigma>[s,p] t'))",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 0))],
       template_predicate (template_app (template_hole 13, t_empty)))),
    ("ParRed.par_beta_body",
     "[| finite ?L;
         ALL s p.
            s ~: ?L & p ~: ?L & s ~= p -->
            (EX t''.
                ?t\<^bsup>[Fvar s,Fvar p]\<^esup> => t'' &
                ?t' = \<sigma>[s,p] t'') |]
      ==> body ?t & body ?t'",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 2)),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("ParRed.par_beta_beta",
     "[| ?l : dom ?f; Obj ?f ?T => Obj ?f' ?T; ?u => ?u'; lc (Obj ?f ?T);
         lc ?u |]
      ==> the (?f ?l)\<^bsup>[Obj ?f ?T,?u]\<^esup> =>
          (the (?f' ?l)\<^bsup>[Obj ?f' ?T,?u']\<^esup>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 5),
              template_app (template_hole 5, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_hole 0,
                       template_app (template_var 4, template_var 5))),
                   template_app
                    (template_app (template_hole 3, template_var 4),
                     template_var 3)),
                 template_var 1)),
             template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_hole 0,
                     template_app (template_var 2, template_var 5))),
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 3)),
               template_var 0))
           ))),
    ("ParRed.Upd_pbeta",
     "Upd ?t ?l ?u => Upd ?t' ?l ?u' ==>
      ?t => ?t' &
      (EX L. finite L &
             (ALL s p.
                 s ~: L & p ~: L & s ~= p -->
                 (EX t''.
                     ?u\<^bsup>[Fvar s,Fvar p]\<^esup> => t'' &
                     ?u' = \<sigma>[s,p] t''))) &
      lc ?t & body ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app
                   (template_app (template_hole 15, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_app
               (template_app
                 (template_app (template_hole 15, template_var 1),
                  template_var 3),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app (template_hole 16, template_var 4),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 14,
                 template_app (template_hole 13, t_empty)),
               template_app
                (template_app
                  (template_hole 14,
                   template_app (template_hole 1, template_var 4)),
                 template_app (template_hole 0, template_var 2))))
           ))),
    ("ParRed.Obj_pbeta",
     "Obj ?f ?T => Obj ?f' ?T ==>
      dom ?f' = dom ?f &
      (EX L. finite L &
             (ALL l:dom ?f.
                 ALL s p.
                    s ~: L & p ~: L & s ~= p -->
                    (EX t. the (?f l)\<^bsup>[Fvar s,Fvar p]\<^esup> => t &
                           the (?f' l) = \<sigma>[s,p] t))) &
      (ALL l:dom ?f. body (the (?f l)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 19,
                template_app
                 (template_app (template_hole 18, template_var 2),
                  template_var 1)),
              template_app
               (template_app (template_hole 18, template_var 0),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 17,
               template_app
                (template_app
                  (template_hole 16,
                   template_app (template_hole 15, template_var 0)),
                 template_app (template_hole 15, template_var 2))),
             template_app
              (template_app
                (template_hole 17,
                 template_app (template_hole 14, t_empty)),
               template_app
                (template_app
                  (template_hole 12,
                   template_app (template_hole 15, template_var 2)),
                 t_empty)))
           ))),
    ("ParRed.Obj_pbeta_subst",
     "[| finite ?L;
         ALL s p.
            s ~: ?L & p ~: ?L & s ~= p -->
            (EX t''.
                ?t\<^bsup>[Fvar s,Fvar p]\<^esup> => t'' &
                ?t' = \<sigma>[s,p] t'');
         Obj ?f ?T => Obj ?f' ?T; lc (Obj ?f ?T); body ?t |]
      ==> Obj (?f(?l |-> ?t)) ?T => Obj (?f'(?l |-> ?t')) ?T",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 6)),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 5))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 3),
                       template_var 0),
                     template_app (template_hole 0, template_var 5))),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0),
                   template_app (template_hole 0, template_var 4))),
               template_var 2))
           ))),
    ("ParRed.Call_par_red",
     "[| Call ?s ?l ?u => ?z;
         !!t u'. [| ?s => t; ?u => u'; ?z = Call t ?l u' |] ==> ?Q;
         !!f f' T u'.
            [| Obj f T = ?s; Obj f T => Obj f' T; ?l : dom f'; ?u => u';
               ?z = (the (f' ?l)\<^bsup>[Obj f' T,u']\<^esup>) |]
            ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_app (template_hole 9, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("ParRed.par_beta_cases",
     "[| Obj ?f ?T => ?t;
         !!f' L.
            [| ?t = Obj f' ?T; dom f' = dom ?f; finite L;
               ALL l:dom ?f.
                  ALL s p.
                     s ~: L & p ~: L & s ~= p -->
                     (EX t. the (?f l)\<^bsup>[Fvar s,Fvar p]\<^esup> => t &
                            the (f' l) = \<sigma>[s,p] t);
               ALL l:dom ?f. body (the (?f l)) |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 20,
                template_app
                 (template_app (template_hole 19, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 18, t_empty))],
       template_predicate (template_var 0))),
    ("ParRed.par_beta_cases",
     "[| Call ?f ?l ?p => ?t;
         !!t' u'.
            [| ?t = Call t' ?l u'; ?f => t'; ?p => u'; lc ?f; lc ?p |]
            ==> ?P;
         !!f T f' p'.
            [| ?f = Obj f T;
               ?t = (the (f' ?l)\<^bsup>[Obj f' T,p']\<^esup>);
               Obj f T => Obj f' T; ?l : dom f; ?p => p'; lc (Obj f T);
               lc ?p |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_app (template_hole 10, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("ParRed.Upd_par_red",
     "[| Upd ?t ?l ?u => ?z;
         !!t' u' L.
            [| ?t => t'; finite L;
               ALL s p.
                  s ~: L & p ~: L & s ~= p -->
                  (EX t''.
                      ?u\<^bsup>[Fvar s,Fvar p]\<^esup> => t'' &
                      u' = \<sigma>[s,p] t'');
               ?z = Upd t' ?l u' |]
            ==> ?Q;
         !!f f' T u' L.
            [| ?l : dom f; Obj f T = ?t; Obj f T => Obj f' T; finite L;
               ALL s p.
                  s ~: L & p ~: L & s ~= p -->
                  (EX t''.
                      ?u\<^bsup>[Fvar s,Fvar p]\<^esup> => t'' &
                      u' = \<sigma>[s,p] t'');
               ?z = Obj (f'(?l |-> u')) T |]
            ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 22,
                template_app
                 (template_app
                   (template_app (template_hole 21, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("ParRed.par_beta_cases",
     "[| Upd ?f ?l ?t => ?u;
         !!t' L u'.
            [| ?u = Upd t' ?l u'; ?f => t'; lc ?f; finite L;
               ALL s p.
                  s ~: L & p ~: L & s ~= p -->
                  (EX t''.
                      ?t\<^bsup>[Fvar s,Fvar p]\<^esup> => t'' &
                      u' = \<sigma>[s,p] t'');
               body ?t |]
            ==> ?P;
         !!f T f' L t'.
            [| ?f = Obj f T; ?u = Obj (f'(?l |-> t')) T;
               Obj f T => Obj f' T; finite L;
               ALL s p.
                  s ~: L & p ~: L & s ~= p -->
                  (EX t''.
                      ?t\<^bsup>[Fvar s,Fvar p]\<^esup> => t'' &
                      t' = \<sigma>[s,p] t'');
               ?l : dom f; lc (Obj f T); body ?t |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 24,
                template_app
                 (template_app
                   (template_app (template_hole 23, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 22, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("ParRed.diamond_binder",
     "[| finite ?L1.0;
         ALL s p.
            s ~: ?L1.0 & p ~: ?L1.0 & s ~= p -->
            (EX t'.
                (?t\<^bsup>[Fvar s,Fvar p]\<^esup> => t' &
                 (ALL z.
                     ?t\<^bsup>[Fvar s,Fvar p]\<^esup> => z -->
                     (EX u. t' => u & z => u))) &
                ?ta = \<sigma>[s,p] t');
         finite ?L2.0;
         ALL s p.
            s ~: ?L2.0 & p ~: ?L2.0 & s ~= p -->
            (EX t'.
                ?t\<^bsup>[Fvar s,Fvar p]\<^esup> => t' &
                ?tb = \<sigma>[s,p] t') |]
      ==> EX L'.
             finite L' &
             (EX t''.
                 (ALL s p.
                     s ~: L' & p ~: L' & s ~= p -->
                     (EX u. ?ta\<^bsup>[Fvar s,Fvar p]\<^esup> => u &
                            t'' = \<sigma>[s,p] u)) &
                 (ALL s p.
                     s ~: L' & p ~: L' & s ~= p -->
                     (EX u. ?tb\<^bsup>[Fvar s,Fvar p]\<^esup> => u &
                            t'' = \<sigma>[s,p] u)))",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 4)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate
         (template_app (template_hole 14, template_var 1)),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("ParRed.exL_exMap_lem",
     "[| dom ?f = dom ?lz; dom ?f' = dom ?f |]
      ==> ALL L1 L2.
             finite L1 -->
             (ALL l:dom ?f.
                 ALL s p.
                    s ~: L1 & p ~: L1 & s ~= p -->
                    (EX t. (the (?f l)\<^bsup>[Fvar s,Fvar p]\<^esup> => t &
                            (ALL z.
                                the (?f l)\<^bsup>[Fvar s,Fvar p]\<^esup> =>
                                z -->
                                (EX u. t => u & z => u))) &
                           the (?f' l) = \<sigma>[s,p] t)) -->
             finite L2 -->
             (ALL l:dom ?f.
                 ALL s p.
                    s ~: L2 & p ~: L2 & s ~= p -->
                    (EX t. the (?f l)\<^bsup>[Fvar s,Fvar p]\<^esup> => t &
                           the (?lz l) = \<sigma>[s,p] t)) -->
             (EX L'.
                 finite L' &
                 (EX lu.
                     dom lu = dom ?f &
                     (ALL l:dom ?f.
                         ALL s p.
                            s ~: L' & p ~: L' & s ~= p -->
                            (EX t. the (?f'
   l)\<^bsup>[Fvar s,Fvar p]\<^esup> =>
                                   t &
                                   the (lu l) = \<sigma>[s,p] t)) &
                     (ALL l:dom ?f. body (the (?f' l))) &
                     (ALL l:dom ?f.
                         ALL s p.
                            s ~: L' & p ~: L' & s ~= p -->
                            (EX t. the (?lz
   l)\<^bsup>[Fvar s,Fvar p]\<^esup> =>
                                   t &
                                   the (lu l) = \<sigma>[s,p] t)) &
                     (ALL l:dom ?f. body (the (?lz l)))))",
     template_implication
      ([template_equation
         (template_app (template_hole 20, template_var 2),
          template_app (template_hole 20, template_var 1)),
        template_equation
         (template_app (template_hole 20, template_var 0),
          template_app (template_hole 20, template_var 2))],
       template_predicate (template_app (template_hole 19, t_empty)))),
    ("ParRed.exL_exMap",
     "[| dom ?f = dom ?lz; dom ?f' = dom ?f; finite ?L1.0;
         ALL l:dom ?f.
            ALL s p.
               s ~: ?L1.0 & p ~: ?L1.0 & s ~= p -->
               (EX t. (the (?f l)\<^bsup>[Fvar s,Fvar p]\<^esup> => t &
                       (ALL z.
                           the (?f l)\<^bsup>[Fvar s,Fvar p]\<^esup> =>
                           z -->
                           (EX u. t => u & z => u))) &
                      the (?f' l) = \<sigma>[s,p] t);
         finite ?L2.0;
         ALL l:dom ?lz.
            ALL s p.
               s ~: ?L2.0 & p ~: ?L2.0 & s ~= p -->
               (EX t. the (?f l)\<^bsup>[Fvar s,Fvar p]\<^esup> => t &
                      the (?lz l) = \<sigma>[s,p] t) |]
      ==> EX L'.
             finite L' &
             (EX lu.
                 dom lu = dom ?f &
                 (ALL l:dom ?f.
                     ALL s p.
                        s ~: L' & p ~: L' & s ~= p -->
                        (EX t. the (?f' l)\<^bsup>[Fvar s,Fvar p]\<^esup> =>
                               t &
                               the (lu l) = \<sigma>[s,p] t)) &
                 (ALL l:dom ?f. body (the (?f' l))) &
                 (ALL l:dom ?f.
                     ALL s p.
                        s ~: L' & p ~: L' & s ~= p -->
                        (EX t. the (?lz l)\<^bsup>[Fvar s,Fvar p]\<^esup> =>
                               t &
                               the (lu l) = \<sigma>[s,p] t)) &
                 (ALL l:dom ?f. body (the (?lz l))))",
     template_implication
      ([template_equation
         (template_app (template_hole 19, template_var 4),
          template_app (template_hole 19, template_var 3)),
        template_equation
         (template_app (template_hole 19, template_var 2),
          template_app (template_hole 19, template_var 4)),
        template_predicate
         (template_app (template_hole 18, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app (template_hole 19, template_var 4)),
              t_empty)
            ),
        template_predicate
         (template_app (template_hole 18, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app (template_hole 19, template_var 3)),
              t_empty)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("ParRed.pbeta_induct",
     "[| ?t => ?t'; !!x. ?P1.0 (Fvar x) (Fvar x);
         !!t t' l u u'.
            [| t => t'; ?P1.0 t t'; lc t; u => u'; ?P1.0 u u'; lc u |]
            ==> ?P1.0 (Call t l u) (Call t' l u');
         !!t t' l u u'.
            [| t => t'; ?P1.0 t t'; lc t; ?P2.0 u u'; body u |]
            ==> ?P1.0 (Upd t l u) (Upd t' l u');
         !!f f' T t t' l.
            [| Obj f T => Obj f' T; ?P1.0 (Obj f T) (Obj f' T); ?P2.0 t t';
               l : dom f; lc (Obj f T); body t |]
            ==> ?P1.0 (Upd (Obj f T) l t) (Obj (f'(l |-> t')) T);
         !!f f' T.
            [| dom f' = dom f; ALL l:dom f. body (the (f l));
               ALL l:dom f. ?P2.0 (the (f l)) (the (f' l)) |]
            ==> ?P1.0 (Obj f T) (Obj f' T);
         !!f f' T l p p'.
            [| Obj f T => Obj f' T; ?P1.0 (Obj f T) (Obj f' T);
               lc (Obj f T); l : dom f; p => p'; ?P1.0 p p'; lc p |]
            ==> ?P1.0 (Call (Obj f T) l p)
                 (the (f' l)\<^bsup>[Obj f' T,p']\<^esup>);
         !!L t t'.
            [| finite L;
               ALL s p.
                  s ~: L & p ~: L & s ~= p -->
                  (EX t''.
                      t\<^bsup>[Fvar s,Fvar p]\<^esup> => t'' &
                      ?P1.0 (t\<^bsup>[Fvar s,Fvar p]\<^esup>) t'' &
                      t' = \<sigma>[s,p] t'') |]
            ==> ?P2.0 t t' |]
      ==> ?P1.0 ?t ?t'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 30, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 29, t_empty)),
        template_predicate (template_app (template_hole 27, t_empty)),
        template_predicate (template_app (template_hole 27, t_empty)),
        template_predicate (template_app (template_hole 21, t_empty)),
        template_predicate (template_app (template_hole 21, t_empty)),
        template_predicate (template_app (template_hole 21, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 1, template_var 3), template_var 2)
           )))]
