   [("Sigma.finite_FV", "finite (FV ?t)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Product_Type.Sigma_empty1", "Sigma {} ?B = {}",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Sigma.lc_bvar", "lc (Bvar ?b) = False",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Product_Type.Sigma_empty2", "?A \<times> {} = {}",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), t_empty),
       template_hole 0)),
    ("Sigma.SizeOfObjectPos", "0 < ssize (Obj ?f ?T)",
     template_inequation
      (less_than, template_hole 2,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Sigma.comp_fun_commute_axioms", "comp_fun_commute (%x y. y + ?f x)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Sigma.finite_FV_FVoption", "finite (FV ?t) & finite (FVoption ?s)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1))),
           template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 0)))
         )),
    ("Sigma.Fvar_beta", "Fvar ?x -> ?t ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_predicate (template_hole 0))),
    ("Sigma.comp_fun_commute_on_axioms",
     "comp_fun_commute_on UNIV (%x y. y + ?f x)",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1), t_empty)
         )),
    ("Sigma.comp_comp_fun_commute",
     "comp_fun_commute ((%x y. y + ?f x) o ?g)",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))
         )),
    ("Sigma.Param_not_in_closed",
     "?pa ~: FV ({?n \<leftarrow> [?sa,?pa]} ?t)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 2, template_var 3),
               template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 1),
                     template_var 3),
                   template_var 0)))
             )
         )),
    ("Sigma.Self_not_in_closed",
     "?sa ~: FV ({?n \<leftarrow> [?sa,?pa]} ?t)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 2, template_var 3),
               template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 3),
                     template_var 1),
                   template_var 0)))
             )
         )),
    ("Sigma.sclose_subset_FV", "FV ({?n \<leftarrow> [?s,?p]} ?t) <= FV ?t",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Sigma.comp_fun_commute_funpow",
     "comp_fun_commute (%x. (%y. y + ?f x) ^^ ?g x)",
     template_predicate (template_app (template_hole 2, t_empty))),
    ("Sigma.comp_comp_fun_commute_on",
     "comp_fun_commute_on ?R ((%x y. y + ?f x) o ?g)",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))
         )),
    ("Sigma.dom_ssubstoption_lem",
     "dom (%l. ssubst_option ?z ?u (?f l)) = dom ?f",
     template_equation
      (template_app (template_hole 1, t_empty),
       template_app (template_hole 1, template_var 0))),
    ("Sigma.beta_lc", "?t -> ?t' ==> lc ?t & lc ?t'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Sigma.comp_fun_commute_on_funpow",
     "comp_fun_commute_on UNIV (%x. (%y. y + ?f x) ^^ ?g x)",
     template_predicate
      (
         template_app
          (template_app (template_hole 3, template_hole 2), t_empty)
         )),
    ("Sigma.dom_scloseoption_lem",
     "dom (%l. sclose_option ?k ?s ?t (?f l)) = dom ?f",
     template_equation
      (template_app (template_hole 1, t_empty),
       template_app (template_hole 1, template_var 0))),
    ("Sigma.dom_sopenoption_lem",
     "dom (%l. sopen_option ?k ?s ?t (?f l)) = dom ?f",
     template_equation
      (template_app (template_hole 1, t_empty),
       template_app (template_hole 1, template_var 0))),
    ("Sigma.lc_call", "lc (Call ?t ?l ?s) = (lc ?t & lc ?s)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 2)),
         template_app (template_hole 2, template_var 0)))),
    ("Sigma.lc_upd", "lc (Upd ?t ?l ?s) = (lc ?t & body ?s)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 3, template_var 2)),
         template_app (template_hole 0, template_var 0)))),
    ("Sigma.body_lc_FV",
     "body ?t ==> lc (?t\<^bsup>[Fvar ?s,Fvar ?p]\<^esup>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_app (template_hole 0, template_var 1)),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Sigma.sopen_lc", "lc ?t ==> {?n \<rightarrow> [?s,?p]} ?t = ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0),
           template_var 3),
         template_var 3))),
    ("Product_Type.snd_image_Sigma",
     "snd ` Sigma ?A ?B = \<Union> (?B ` ?A)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Product_Type.Sigma_Union",
     "Sigma (\<Union> ?X) ?B = (UN A:?X. Sigma A ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Sigma.FV_option_lem",
     "ALL l:dom ?f. FV (the (?f l)) = FVoption (?f l)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0)),
           t_empty)
         )),
    ("Product_Type.SigmaD1", "(?a, ?b) : Sigma ?A ?B ==> ?a : ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 3), template_var 1)
           ))),
    ("Sigma.rtrancl_beta_lc2", "[| ?t ->> ?t'; lc ?t |] ==> lc ?t'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 0, template_var 1))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Product_Type.Sigma_Diff_distrib1",
     "Sigma (?I - ?J) ?C = Sigma ?I ?C - Sigma ?J ?C",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Product_Type.Sigma_Int_distrib1",
     "Sigma (?I Int ?J) ?C = Sigma ?I ?C Int Sigma ?J ?C",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Product_Type.Sigma_Un_distrib1",
     "Sigma (?I Un ?J) ?C = Sigma ?I ?C Un Sigma ?J ?C",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Sigma.lc_obj", "lc (Obj ?f ?T) = (ALL l:dom ?f. body (the (?f l)))",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         t_empty))),
    ("Sigma.sopen_lc_FV",
     "lc ?t ==> {?n \<rightarrow> [Fvar ?s,Fvar ?p]} ?t = ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0)),
           template_var 3),
         template_var 3))),
    ("Sigma.ssubst_fresh",
     "?sa ~: FV ?t ==> [?sa \<rightarrow> ?s] ?t = ?t",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_app (template_hole 2, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0),
           template_var 1),
         template_var 1))),
    ("Product_Type.SigmaD2", "(?a, ?b) : Sigma ?A ?B ==> ?b : ?B ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app (template_var 0, template_var 3))
           ))),
    ("Sigma.ssubst_preserves_body",
     "[| body ?t; lc ?t' |] ==> body ([?x \<rightarrow> ?t'] ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1),
               template_var 2))
           ))),
    ("Sigma.ssubst_preserves_lc",
     "[| lc ?t; lc ?t' |] ==> lc ([?x \<rightarrow> ?t'] ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 2)),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1),
               template_var 2))
           ))),
    ("Sigma.ssubst_preserves_lcE",
     "[| lc ([?x \<rightarrow> ?t'] ?t); lc ?t' |] ==> lc ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1),
                template_var 0))
            ),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("Product_Type.Pair_vimage_Sigma",
     "Pair ?x -` Sigma ?A ?f = (if ?x : ?A then ?f ?x else {})",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app (template_var 0, template_var 2)),
         template_hole 0))),
    ("Sigma.fold_graph_finite",
     "fold_graph (%x y. y + ?f x) ?z ?A ?y ==> finite ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, t_empty), template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Sigma.fun_left_comm", "?z + ?f ?x + ?f ?y = ?z + ?f ?y + ?f ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_app (template_var 2, template_var 1))),
         template_app (template_var 2, template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_app (template_var 2, template_var 0))),
         template_app (template_var 2, template_var 1)))),
    ("Product_Type.Sigma_empty_iff",
     "(Sigma ?I ?X = {}) = (ALL i:?I. ?X i = {})",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1), t_empty)),
         template_hole 3),
       template_app
        (template_app (template_hole 2, template_var 1), t_empty))),
    ("Sigma.ssubst_FV",
     "FV ([?x \<rightarrow> ?s] ?t) <= FV ?s Un (FV ?t - {?x})",
     template_inequation
      (less_equals,
       template_app
        (template_hole 5,
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 5, template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 5, template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_hole 0))))),
    ("Sigma.sopen_FV",
     "FV ({?n \<rightarrow> [?s,?p]} ?t) <= FV ?t Un FV ?s Un FV ?p",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 0)),
             template_app (template_hole 2, template_var 2))),
         template_app (template_hole 2, template_var 1)))),
    ("Transitive_Closure.trancl_subset_Sigma",
     "?r <= ?A \<times> ?A ==> ?r^+ <= ?A \<times> ?A",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 1, template_var 0), t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0), t_empty)))),
    ("Sigma.lc_body", "[| lc ?t; ?s ~= ?p |] ==> body \<sigma>[?s,?p] ?t",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("Relation.Sigma_Image",
     "Sigma ?A ?B `` ?X = \<Union> (?B ` (?X Int ?A))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2), t_empty)),
         template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("Product_Type.Sigma_Diff_distrib2",
     "(SIGMA i:?I. ?A i - ?B i) = Sigma ?I ?A - Sigma ?I ?B",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2), t_empty),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Product_Type.Sigma_Int_distrib2",
     "(SIGMA i:?I. ?A i Int ?B i) = Sigma ?I ?A Int Sigma ?I ?B",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2), t_empty),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Product_Type.Sigma_Un_distrib2",
     "(SIGMA i:?I. ?A i Un ?B i) = Sigma ?I ?A Un Sigma ?I ?B",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2), t_empty),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Transcendental.Sigma_interval_disjoint",
     "(SIGMA i:?A. {..?v i}) Int (SIGMA i:?A. {?v i<..?w}) = {}",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2), t_empty)),
         template_app
          (template_app (template_hole 3, template_var 2), t_empty)),
       template_hole 0)),
    ("Product_Type.mem_Sigma_iff",
     "((?a, ?b) : Sigma ?A ?B) = (?a : ?A & ?b : ?B ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app (template_var 0, template_var 3))))),
    ("Sigma.sopen_eq_Bvar",
     "{?n \<rightarrow> [Fvar ?s,Fvar ?p]} ?t = Bvar ?b ==> ?t = Bvar ?b",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_app (template_hole 1, template_var 3)),
              template_app (template_hole 1, template_var 2)),
            template_var 1),
          template_app (template_hole 0, template_var 0))],
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Product_Type.fst_image_Sigma",
     "fst ` Sigma ?A ?B = {x: ?A. ?B x ~= {}}",
     template_equation
      (template_app
        (template_app (template_hole 8, template_hole 7),
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("Sigma.sclose_FV",
     "FV ({?n \<leftarrow> [?s,?p]} ?t) = FV ?t - {?s} - {?p}",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 4, template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_hole 0))),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0)))),
    ("Sigma.ssubst_option_lem",
     "ALL l:dom ?f.
         [?z \<rightarrow> ?u] the (?f l) =
         the (ssubst_option ?z ?u (?f l))",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 2)),
           t_empty)
         )),
    ("Sigma.sopen_sclose_eq_t",
     "lc ?t ==>
      {?n \<rightarrow> [Fvar ?s,Fvar ?p]} {?n \<leftarrow> [?s,?p]} ?t =
      ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 1, template_var 0)),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0),
             template_var 3)),
         template_var 3))),
    ("Sigma.beta_preserves_FV",
     "[| ?t -> ?t'; ?x ~: FV ?t |] ==> ?x ~: FV ?t'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 0),
                  template_app (template_hole 0, template_var 2))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_var 1))
               )
           ))),
    ("Sigma.rtrancl_beta_lc",
     "[| ?t ->> ?t'; ?t ~= ?t' |] ==> lc ?t & lc ?t'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Sigma.Ltake_eq_all",
     "[| dom ?f = dom ?g; Ltake_eq (dom ?f) ?f ?g |] ==> ?f = ?g",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 1),
          template_app (template_hole 2, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 1,
                  template_app (template_hole 2, template_var 1)),
                template_var 1),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Sigma.body_lc",
     "[| body ?t; lc ?s; lc ?p |] ==> lc (?t\<^bsup>[?s,?p]\<^esup>)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Product_Type.Collect_case_prod_Sigma",
     "{(x, y). ?P x & ?Q x y} = (SIGMA x:Collect ?P. Collect (?Q x))",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, t_empty)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         t_empty))),
    ("Transcendental.pairs_le_eq_Sigma",
     "{(i, j). i + j <= ?m} = (SIGMA r:{..?m}. {..?m - r})",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, t_empty)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         t_empty))),
    ("Product_Type.SigmaI",
     "[| ?a : ?A; ?b : ?B ?a |] ==> (?a, ?b) : Sigma ?A ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_var 0, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Sigma.beta_ssubst",
     "[| ?t -> ?t'; lc ?v |]
      ==> [?x \<rightarrow> ?v] ?t -> [?x \<rightarrow> ?v] ?t'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1),
                 template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1),
               template_var 2))
           ))),
    ("Sigma.Ltake_eq_dom",
     "[| ?L <= dom ?f; card ?L = card (dom ?f) |] ==> ?L = dom ?f",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 3, template_var 0)),
        template_equation
         (template_app (template_hole 1, template_var 1),
          template_app
           (template_hole 1,
            template_app (template_hole 3, template_var 0)))],
       template_equation
        (template_var 1, template_app (template_hole 3, template_var 0)))),
    ("Sigma.obj_insert_lc",
     "[| lc (Obj ?f ?T); body ?t |] ==> lc (Obj (?f(?l |-> ?t)) ?T)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 0),
                   template_app (template_hole 0, template_var 1))),
               template_var 2))
           ))),
    ("Sigma.rtrancl_beta_preserves_FV",
     "[| ?t ->> ?t'; ?x ~: FV ?t |] ==> ?x ~: FV ?t'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_hole 3),
                template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 0),
                  template_app (template_hole 0, template_var 2))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_var 1))
               )
           ))),
    ("Sigma.sopen_preserves_body",
     "[| body ?t; lc ?s; lc ?p |] ==> body ({?n \<rightarrow> [?s,?p]} ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 3)),
        template_predicate (template_app (template_hole 1, template_var 2)),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2),
                 template_var 1),
               template_var 3))
           ))),
    ("Sigma.ssubst_preserves_lcE_lem",
     "[| lc ?t; ?t = [?x \<rightarrow> ?u] ?t'; lc ?u |] ==> lc ?t'",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 3)),
        template_equation
         (template_var 3,
          template_app
           (template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1),
            template_var 0)),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (template_app (template_hole 2, template_var 0)))),
    ("Product_Type.split_paired_Ball_Sigma",
     "(ALL z:Sigma ?A ?B. ?P z) = (ALL x:?A. ALL y:?B x. ?P (x, y))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         t_empty),
       template_app
        (template_app (template_hole 2, template_var 2), t_empty))),
    ("Product_Type.split_paired_Bex_Sigma",
     "(EX z:Sigma ?A ?B. ?P z) = (EX x:?A. EX y:?B x. ?P (x, y))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         t_empty),
       template_app
        (template_app (template_hole 2, template_var 2), t_empty))),
    ("Sigma.sclose_option_lem",
     "ALL l:dom ?f.
         {?n \<leftarrow> [?s,?p]} the (?f l) =
         the (sclose_option ?n ?s ?p (?f l))",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 3)),
           t_empty)
         )),
    ("Sigma.sopen_option_lem",
     "ALL l:dom ?f.
         {?n \<rightarrow> [?s,?p]} the (?f l) =
         the (sopen_option ?n ?s ?p (?f l))",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 3)),
           t_empty)
         )),
    ("Sigma.rtrancl_beta_UpdL",
     "[| ?t ->> ?t'; body ?u |] ==> Upd ?t ?l ?u ->> Upd ?t' ?l ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_hole 2),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0),
                 template_var 1)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0),
               template_var 1))
           ))),
    ("Sigma.rtrancl_beta_CallL",
     "[| ?t ->> ?t'; lc ?u |] ==> Call ?t ?l ?u ->> Call ?t' ?l ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_hole 2),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0),
                 template_var 1)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0),
               template_var 1))
           ))),
    ("Sigma.rtrancl_beta_CallR",
     "[| ?t ->> ?t'; lc ?u |] ==> Call ?u ?l ?t ->> Call ?u ?l ?t'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_hole 2),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("Sigma.fold_set_fold_remdups",
     "Finite_Set.fold (%x y. y + ?f x) ?y (set ?xs) =
      fold (%x y. y + ?f x) (remdups ?xs) ?y",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, t_empty), template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 1, t_empty),
           template_app (template_hole 0, template_var 0)),
         template_var 1))),
    ("Product_Type.disjnt_Sigma_iff",
     "disjnt (Sigma ?A ?C) (Sigma ?B ?C) =
      ((ALL i:?A Int ?B. ?C i = {}) | disjnt ?A ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 6, template_var 0), template_var 1)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 0)),
             t_empty)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Sigma.sclose_fresh",
     "[| ?s ~: FV ?t; ?p ~: FV ?t |] ==> {?n \<leftarrow> [?s,?p]} ?t = ?t",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_app (template_hole 2, template_var 2))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_app (template_hole 2, template_var 2))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3),
             template_var 1),
           template_var 2),
         template_var 2))),
    ("Sigma.fold_graph_fold",
     "finite ?A ==>
      fold_graph (%x y. y + ?f x) ?z ?A
       (Finite_Set.fold (%x y. y + ?f x) ?z ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, t_empty), template_var 0),
               template_var 2),
             template_app
              (template_app
                (template_app (template_hole 0, t_empty), template_var 0),
               template_var 2))
           ))),
    ("Sigma.exFresh_s_p_cof",
     "finite ?L ==> EX s p. s ~: ?L & p ~: ?L & s ~= p",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Finite_Set.finite_SigmaI",
     "[| finite ?A; !!a. a : ?A ==> finite (?B a) |]
      ==> finite (Sigma ?A ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1), t_empty))
           ))),
    ("Sigma.comp_fun_commute",
     "(%y. y + ?f ?y) o (%y. y + ?f ?x) =
      (%y. y + ?f ?x) o (%y. y + ?f ?y)",
     template_equation
      (template_app (template_app (template_hole 1, t_empty), t_empty),
       template_app (template_app (template_hole 1, t_empty), t_empty))),
    ("Product_Type.image_split_eq_Sigma",
     "(%x. (?f x, ?g x)) ` ?A = (SIGMA x:?f ` ?A. ?g ` (?f -` {x} Int ?A))",
     template_equation
      (template_app
        (template_app (template_hole 8, t_empty), template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 0)),
         t_empty))),
    ("Sigma.fold_equality",
     "fold_graph (%x y. y + ?f x) ?z ?A ?y ==>
      Finite_Set.fold (%x y. y + ?f x) ?z ?A = ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, t_empty), template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, t_empty), template_var 2),
           template_var 1),
         template_var 0))),
    ("Sigma.sopen_twice",
     "[| lc ?s; lc ?p |]
      ==> {?n \<rightarrow> [?s',?p']} {?n \<rightarrow> [?s,?p]} ?t =
          {?n \<rightarrow> [?s,?p]} ?t",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 5)),
        template_predicate
         (template_app (template_hole 2, template_var 4))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 5),
               template_var 4),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 5),
             template_var 4),
           template_var 0)))),
    ("Transitive_Closure.trancl_subset_Sigma_aux",
     "[| (?a, ?b) : ?r^*; ?r <= ?A \<times> ?A |] ==> ?a = ?b | ?a : ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2)),
              template_app (template_hole 5, template_var 1))
            ),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 3, template_var 0), t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0))
           ))),
    ("Relation.relcomp_subset_Sigma",
     "[| ?r <= ?A \<times> ?B; ?s <= ?B \<times> ?C |]
      ==> ?r O ?s <= ?A \<times> ?C",
     template_implication
      ([template_inequation
         (less_equals, template_var 4,
          template_app
           (template_app (template_hole 5, template_var 3), t_empty)),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 3, template_var 2), t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 4), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 3), t_empty)))),
    ("Product_Type.SigmaE2",
     "[| (?a, ?b) : Sigma ?A ?B; [| ?a : ?A; ?b : ?B ?a |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 2)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_app (template_var 1, template_var 4))
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Hilbert_Choice.Ex_inj_on_UNION_Sigma",
     "EX f. inj_on f (\<Union> (?A ` ?I)) &
            f ` \<Union> (?A ` ?I) <= Sigma ?I ?A",
     template_predicate (template_app (template_hole 7, t_empty))),
    ("Sigma.ssubst_openz_distrib",
     "lc ?t' ==>
      [?x \<rightarrow> ?t'] (?t\<^bsup>[?s,?p]\<^esup>) =
      ([?x \<rightarrow> ?t'] ?t\<^bsup>[[?x \<rightarrow> ?t'] ?s,[?x \<rightarrow> ?t'] ?p]\<^esup>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 4))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 4),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 4),
                 template_var 2)),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 4),
               template_var 1)),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 4),
             template_var 0))))),
    ("Groups_Big.card_SigmaI",
     "[| finite ?A; ALL a:?A. finite (?B a) |]
      ==> card (Sigma ?A ?B) = (SUM a:?A. card (?B a))",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1), t_empty)
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1), t_empty)),
         template_app
          (template_app (template_hole 1, t_empty), template_var 1)))),
    ("Sigma.obj_openz_lc",
     "[| lc (Obj ?f ?T); lc ?p; ?l : dom ?f |]
      ==> lc (the (?f ?l)\<^bsup>[Obj ?f ?T,?p]\<^esup>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2))
            ),
        template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 2, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_hole 0,
                     template_app (template_var 3, template_var 0))),
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_var 2)),
               template_var 1))
           ))),
    ("Product_Type.Sigma_mono",
     "[| ?A <= ?C; !!x. x : ?A ==> ?B x <= ?D x |]
      ==> Sigma ?A ?B <= Sigma ?C ?D",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Sigma.commute_left_comp",
     "(%y. y + ?f ?y) o ((%y. y + ?f ?x) o ?g) =
      (%y. y + ?f ?x) o ((%y. y + ?f ?y) o ?g)",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty),
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app
        (template_app (template_hole 1, t_empty),
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)))),
    ("Sigma.ssubst_sopen_distrib",
     "lc ?t' ==>
      [?x \<rightarrow> ?t'] {?n \<rightarrow> [?s,?p]} ?t =
      {?n \<rightarrow> [[?x \<rightarrow> ?t'] ?s,[?x \<rightarrow> ?t'] ?p]} [?x \<rightarrow> ?t'] ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 5))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 5),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 5),
                 template_var 2)),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 5),
               template_var 1)),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 5),
             template_var 0))))),
    ("Sigma.fold_graph_determ",
     "[| fold_graph (%x y. y + ?f x) ?z ?A ?x;
         fold_graph (%x y. y + ?f x) ?z ?A ?y |]
      ==> ?y = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, t_empty), template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, t_empty), template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_equation (template_var 0, template_var 1))),
    ("Sigma.pred_ssubstoption_lem",
     "(ALL l:dom (%l. ssubst_option ?x ?t (?f l)).
          ?P (the (ssubst_option ?x ?t (?f l)))) =
      (ALL l:dom ?f. ?P ([?x \<rightarrow> ?t] the (?f l)))",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         t_empty),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         t_empty))),
    ("Sigma.sopen_eq_Fvar'",
     "[| {?n \<rightarrow> [Fvar ?s,Fvar ?p]} ?t = Fvar ?x; ?x ~= ?s;
         ?x ~= ?p |]
      ==> ?t = Fvar ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_app (template_hole 2, template_var 3)),
              template_app (template_hole 2, template_var 2)),
            template_var 1),
          template_app (template_hole 2, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_var 3)),
        template_negation
         (template_equation (template_var 0, template_var 2))],
       template_equation
        (template_var 1, template_app (template_hole 2, template_var 0)))),
    ("Sigma.fold_fun_left_comm",
     "finite ?A ==>
      Finite_Set.fold (%x y. y + ?f x) ?z ?A + ?f ?x =
      Finite_Set.fold (%x y. y + ?f x) (?z + ?f ?x) ?A",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, t_empty), template_var 1),
               template_var 3)),
           template_app (template_var 2, template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, t_empty),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_var 2, template_var 0))),
           template_var 3)))),
    ("Product_Type.Sigma_cong",
     "[| ?A = ?B; !!x. x : ?B ==> ?C x = ?D x |]
      ==> Sigma ?A ?C = Sigma ?B ?D",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), t_empty),
         template_app
          (template_app (template_hole 0, template_var 2), t_empty)))),
    ("Finite_Set.finite_SigmaI2",
     "[| finite {x: ?A. ?B x ~= {}}; !!a. a : ?A ==> finite (?B a) |]
      ==> finite (Sigma ?A ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 10, template_app (template_hole 9, t_empty))
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Sigma.rtrancl_beta_Call",
     "[| ?t ->> ?t'; lc ?t; ?u ->> ?u'; lc ?u |]
      ==> Call ?t ?l ?u ->> Call ?t' ?l ?u'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_hole 2),
                template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 1, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_hole 2),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 0),
                 template_var 2)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0),
               template_var 1))
           ))),
    ("Sigma.pred_scloseoption_lem",
     "(ALL l:dom (%l. sclose_option ?n ?s ?p (?f l)).
          ?P (the (sclose_option ?n ?s ?p (?f l)))) =
      (ALL l:dom ?f. ?P ({?n \<leftarrow> [?s,?p]} the (?f l)))",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         t_empty),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         t_empty))),
    ("Sigma.pred_sopenoption_lem",
     "(ALL l:dom (%l. sopen_option ?n ?s ?p (?f l)).
          ?P (the (sopen_option ?n ?s ?p (?f l)))) =
      (ALL l:dom ?f. ?P ({?n \<rightarrow> [?s,?p]} the (?f l)))",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         t_empty),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         t_empty))),
    ("Sigma.fold_insert_remove",
     "finite ?A ==>
      Finite_Set.fold (%x y. y + ?f x) ?z (insert ?x ?A) =
      Finite_Set.fold (%x y. y + ?f x) ?z (?A - {?x}) + ?f ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, t_empty), template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 3)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 4, t_empty), template_var 1),
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 0)))),
           template_app (template_var 2, template_var 0))))),
    ("Sigma.ssubstoption_insert",
     "?l : dom ?f ==>
      (%la. ssubst_option ?x ?t' (if la = ?l then Some ?t else ?f la)) =
      (%la. ssubst_option ?x ?t' (?f la))(?l |->
      [?x \<rightarrow> ?t'] ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_app (template_hole 7, template_var 3))
            )],
       template_equation
        (t_empty,
         template_app
          (template_app
            (template_app (template_hole 1, t_empty), template_var 4),
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0)))))),
    ("Sigma.sopen_commute",
     "?n ~= ?k ==>
      {?n \<rightarrow> [Fvar
                          ?s',Fvar
                               ?p']} {?k \<rightarrow> [Fvar
                   ?s,Fvar ?p]} ?t =
      {?k \<rightarrow> [Fvar
                          ?s,Fvar
                              ?p]} {?n \<rightarrow> [Fvar
                 ?s',Fvar ?p']} ?t",
     template_implication
      ([template_negation
         (template_equation (template_var 6, template_var 5))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 6),
               template_app (template_hole 0, template_var 4)),
             template_app (template_hole 0, template_var 3)),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 5),
                 template_app (template_hole 0, template_var 2)),
               template_app (template_hole 0, template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 5),
               template_app (template_hole 0, template_var 2)),
             template_app (template_hole 0, template_var 1)),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 6),
                 template_app (template_hole 0, template_var 4)),
               template_app (template_hole 0, template_var 3)),
             template_var 0))))),
    ("Product_Type.SigmaE",
     "[| ?c : Sigma ?A ?B;
         !!x y. [| x : ?A; y : ?B x; ?c = (x, y) |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Sigma.sclose_sopen_eq_t",
     "[| ?s ~: FV ?t; ?p ~: FV ?t; ?s ~= ?p |]
      ==> {?n \<leftarrow> [?s,?p]} {?n \<rightarrow> [Fvar
                  ?s,Fvar ?p]} ?t =
          ?t",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_app (template_hole 5, template_var 2))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_app (template_hole 5, template_var 2))
                )
            ),
        template_negation
         (template_equation (template_var 3, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 0),
               template_var 3),
             template_var 1),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_var 3)),
               template_app (template_hole 0, template_var 1)),
             template_var 2)),
         template_var 2))),
    ("Sigma.sopen_eq_Obj",
     "{?n \<rightarrow> [Fvar ?s,Fvar ?p]} ?t = Obj ?f ?T ==>
      EX f'.
         {?n \<rightarrow> [Fvar ?s,Fvar ?p]} Obj f' ?T = Obj ?f ?T &
         ?t = Obj f' ?T",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 4, template_var 5),
                template_app (template_hole 3, template_var 4)),
              template_app (template_hole 3, template_var 3)),
            template_var 2),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Sigma.fold_insert2",
     "[| finite ?A; ?x ~: ?A |]
      ==> Finite_Set.fold (%x y. y + ?f x) ?z (insert ?x ?A) =
          Finite_Set.fold (%x y. y + ?f x) (?z + ?f ?x) ?A",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 3)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 3)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, t_empty), template_var 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 2, t_empty),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_var 1, template_var 2))),
           template_var 3)))),
    ("Sigma.fold_insert",
     "[| finite ?A; ?x ~: ?A |]
      ==> Finite_Set.fold (%x y. y + ?f x) ?z (insert ?x ?A) =
          Finite_Set.fold (%x y. y + ?f x) ?z ?A + ?f ?x",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 3)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 3)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, t_empty), template_var 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 3)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 2, t_empty), template_var 0),
               template_var 3)),
           template_app (template_var 1, template_var 2))))),
    ("Sigma.FV_and_cofinite",
     "[| ALL x. x ~: ?L --> ?P x; finite ?L |]
      ==> EX L'. finite L' & FV ?t <= L' & (ALL x. x ~: L' --> ?P x)",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Sigma.sopen_sclose_eq_ssubst",
     "[| ?sa ~= ?pa; ?sa ~: FV ?p; lc ?t |]
      ==> {?n \<rightarrow> [?s,?p]} {?n \<leftarrow> [?sa,?pa]} ?t =
          [?sa \<rightarrow> ?s] [?pa \<rightarrow> ?p] ?t",
     template_implication
      ([template_negation
         (template_equation (template_var 5, template_var 4)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 5),
                  template_app (template_hole 5, template_var 3))
                )
            ),
        template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0),
             template_var 3),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 5),
               template_var 4),
             template_var 2)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 5),
             template_var 0),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3),
             template_var 2))))),
    ("Sigma.fold_rec",
     "[| finite ?A; ?x : ?A |]
      ==> Finite_Set.fold (%x y. y + ?f x) ?z ?A =
          Finite_Set.fold (%x y. y + ?f x) ?z (?A - {?x}) + ?f ?x",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, t_empty), template_var 0),
           template_var 3),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 4, t_empty), template_var 0),
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_hole 0)))),
           template_app (template_var 1, template_var 2))))),
    ("Sigma.ssubst_sopen_commute",
     "[| lc ?t'; ?x ~: FV ?s; ?x ~: FV ?p |]
      ==> [?x \<rightarrow> ?t'] {?n \<rightarrow> [?s,?p]} ?t =
          {?n \<rightarrow> [?s,?p]} [?x \<rightarrow> ?t'] ?t",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 5)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_app (template_hole 3, template_var 3))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_app (template_hole 3, template_var 2))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 5),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 3),
             template_var 2),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 5),
             template_var 0))))),
    ("Sigma.ssubst_commute",
     "[| ?s ~= ?p; ?s ~: FV ?pa; ?p ~: FV ?sa |]
      ==> [?s \<rightarrow> ?sa] [?p \<rightarrow> ?pa] ?t =
          [?p \<rightarrow> ?pa] [?s \<rightarrow> ?sa] ?t",
     template_implication
      ([template_negation
         (template_equation (template_var 4, template_var 3)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_app (template_hole 2, template_var 2))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_app (template_hole 2, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 1),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1),
             template_var 0))))),
    ("Sigma.sopen_eq_Fvar",
     "{?n \<rightarrow> [Fvar ?s,Fvar ?p]} ?t = Fvar ?x ==>
      ?t = Fvar ?x |
      ?x = ?s & ?t = Bvar (Self ?n) | ?x = ?p & ?t = Bvar (Param ?n)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 7, template_var 4),
                template_app (template_hole 6, template_var 3)),
              template_app (template_hole 6, template_var 2)),
            template_var 1),
          template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 8, template_var 1),
                 template_app (template_hole 6, template_var 0))),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_var 3)),
                   template_app
                    (template_app (template_hole 8, template_var 1),
                     template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 4))))),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 8, template_var 1),
                   template_app
                    (template_hole 2,
                     template_app (template_hole 0, template_var 4))))))
           ))),
    ("Sigma.fold_graph_insertE_aux",
     "[| fold_graph (%x y. y + ?f x) ?z ?A ?y; ?a : ?A |]
      ==> EX y'.
             ?y = y' + ?f ?a &
             fold_graph (%x y. y + ?f x) ?z (?A - {?a}) y'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, t_empty), template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_var 2)
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Sigma.sopen_commute_gen",
     "[| lc ?s; lc ?p; lc ?s'; lc ?p'; ?n ~= ?k |]
      ==> {?n \<rightarrow> [?s,?p]} {?k \<rightarrow> [?s',?p']} ?t =
          {?k \<rightarrow> [?s',?p']} {?n \<rightarrow> [?s,?p]} ?t",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 6)),
        template_predicate (template_app (template_hole 4, template_var 5)),
        template_predicate (template_app (template_hole 4, template_var 4)),
        template_predicate (template_app (template_hole 4, template_var 3)),
        template_negation
         (template_equation (template_var 2, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 6),
             template_var 5),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 4),
               template_var 3),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 4),
             template_var 3),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 6),
               template_var 5),
             template_var 0))))),
    ("Sigma.ssubst_sclose_commute",
     "[| ?s ~: FV ?t'; ?p ~: FV ?t'; ?x ~= ?s; ?x ~= ?p |]
      ==> [?x \<rightarrow> ?t'] {?n \<leftarrow> [?s,?p]} ?t =
          {?n \<leftarrow> [?s,?p]} [?x \<rightarrow> ?t'] ?t",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 5),
                  template_app (template_hole 4, template_var 4))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_app (template_hole 4, template_var 4))
                )
            ),
        template_negation
         (template_equation (template_var 2, template_var 5)),
        template_negation
         (template_equation (template_var 2, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 4),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 5),
               template_var 3),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 5),
             template_var 3),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 4),
             template_var 0))))),
    ("Sigma.sopen_eq_Call",
     "{?n \<rightarrow> [Fvar ?s,Fvar ?p]} ?t = Call ?t1.0 ?l ?t2.0 ==>
      EX t1' t2'.
         {?n \<rightarrow> [Fvar ?s,Fvar ?p]} t1' = ?t1.0 &
         {?n \<rightarrow> [Fvar ?s,Fvar ?p]} t2' = ?t2.0 &
         ?t = Call t1' ?l t2'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 4, template_var 6),
                template_app (template_hole 3, template_var 5)),
              template_app (template_hole 3, template_var 4)),
            template_var 3),
          template_app
           (template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Sigma.fold_set_union_disj",
     "[| finite ?A; finite ?B; ?A Int ?B = {} |]
      ==> Finite_Set.fold (%x y. y + ?f x) ?z (?A Un ?B) =
          Finite_Set.fold (%x y. y + ?f x)
           (Finite_Set.fold (%x y. y + ?f x) ?z ?A) ?B",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 3)),
        template_predicate (template_app (template_hole 7, template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 3), template_var 2),
          template_hole 4)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, t_empty), template_var 0),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_app (template_hole 2, t_empty),
             template_app
              (template_app
                (template_app (template_hole 2, t_empty), template_var 0),
               template_var 3)),
           template_var 2)))),
    ("Sigma.sopen_eq_Upd",
     "{?n \<rightarrow> [Fvar ?s,Fvar ?p]} ?t = Upd ?t1.0 ?l ?t2.0 ==>
      EX t1' t2'.
         {?n \<rightarrow> [Fvar ?s,Fvar ?p]} t1' = ?t1.0 &
         {Suc ?n \<rightarrow> [Fvar ?s,Fvar ?p]} t2' = ?t2.0 &
         ?t = Upd t1' ?l t2'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 5, template_var 6),
                template_app (template_hole 4, template_var 5)),
              template_app (template_hole 4, template_var 4)),
            template_var 3),
          template_app
           (template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Sigma.fold_graph_insertE",
     "[| fold_graph (%x y. y + ?f x) ?z (insert ?x ?A) ?v; ?x ~: ?A;
         !!y. [| ?v = y + ?f ?x; fold_graph (%x y. y + ?f x) ?z ?A y |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, t_empty), template_var 4),
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)
                )
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Sigma.ssubst_intro",
     "[| ?sa ~: FV ?t; ?pa ~: FV ?t; ?sa ~= ?pa; ?sa ~: FV ?p |]
      ==> {?n \<rightarrow> [?s,?p]} ?t =
          [?sa \<rightarrow> ?s] [?pa \<rightarrow> ?p] {?n \<rightarrow> [Fvar
?sa,Fvar ?pa]} ?t",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 5),
                  template_app (template_hole 5, template_var 4))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_app (template_hole 5, template_var 4))
                )
            ),
        template_negation
         (template_equation (template_var 5, template_var 3)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 5),
                  template_app (template_hole 5, template_var 2))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0),
             template_var 2),
           template_var 4),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 5),
             template_var 0),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 1),
                   template_app (template_hole 0, template_var 5)),
                 template_app (template_hole 0, template_var 3)),
               template_var 4)))))),
    ("Sigma.rtrancl_beta_body",
     "[| finite ?L;
         ALL s p.
            s ~: ?L & p ~: ?L & s ~= p -->
            (EX t''.
                ?t\<^bsup>[Fvar s,Fvar p]\<^esup> ->> t'' &
                ?t' = \<sigma>[s,p] t'');
         body ?t |]
      ==> body ?t'",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 2)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate
         (template_app (template_hole 0, template_var 1))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Sigma.sopen_sclose_commute",
     "[| ?n ~= ?k; ?sa ~: FV ?s; ?sa ~: FV ?p; ?pa ~: FV ?s; ?pa ~: FV ?p |]
      ==> {?n \<rightarrow> [?s,?p]} {?k \<leftarrow> [?sa,?pa]} ?t =
          {?k \<leftarrow> [?sa,?pa]} {?n \<rightarrow> [?s,?p]} ?t",
     template_implication
      ([template_negation
         (template_equation (template_var 6, template_var 5)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_app (template_hole 3, template_var 3))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_app (template_hole 3, template_var 2))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_app (template_hole 3, template_var 3))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_app (template_hole 3, template_var 2))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 6),
               template_var 3),
             template_var 2),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 4),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 5),
               template_var 4),
             template_var 1),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 6),
                 template_var 3),
               template_var 2),
             template_var 0))))),
    ("Sigma.sopen_fresh_inj",
     "[| {?n \<rightarrow> [Fvar ?s,Fvar ?p]} ?t =
         {?n \<rightarrow> [Fvar ?s,Fvar ?p]} ?t';
         ?s ~: FV ?t; ?s ~: FV ?t'; ?p ~: FV ?t; ?p ~: FV ?t'; ?s ~= ?p |]
      ==> ?t = ?t'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_app (template_hole 4, template_var 3)),
              template_app (template_hole 4, template_var 2)),
            template_var 1),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_app (template_hole 4, template_var 3)),
              template_app (template_hole 4, template_var 2)),
            template_var 0)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_app (template_hole 1, template_var 1))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_app (template_hole 1, template_var 0))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_app (template_hole 1, template_var 1))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_app (template_hole 1, template_var 0))
                )
            ),
        template_negation
         (template_equation (template_var 3, template_var 2))],
       template_equation (template_var 1, template_var 0))),
    ("Sigma.rtrancl_beta_UpdR",
     "[| ALL s p.
            s ~: ?L & p ~: ?L & s ~= p -->
            (EX t''.
                ?t\<^bsup>[Fvar s,Fvar p]\<^esup> ->> t'' &
                ?t' = \<sigma>[s,p] t'');
         finite ?L; lc ?u |]
      ==> Upd ?u ?l ?t ->> Upd ?u ?l ?t'",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 2, template_var 4)),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 8, template_hole 7),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("Sigma.Call_beta",
     "Call ?t ?l ?u -> ?z ==>
      (EX t'. ?t -> t' & ?z = Call t' ?l ?u) |
      (EX u'. ?u -> u' & ?z = Call ?t ?l u') |
      (EX f T.
          Obj f T = ?t &
          ?l : dom f & ?z = (the (f ?l)\<^bsup>[Obj f T,?u]\<^esup>))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_app (template_hole 11, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10, template_app (template_hole 9, t_empty)),
             template_app
              (template_app
                (template_hole 10, template_app (template_hole 9, t_empty)),
               template_app (template_hole 6, t_empty)))
           ))),
    ("Sigma.rtrancl_beta_Upd",
     "[| ?u ->> ?u'; finite ?L;
         ALL s p.
            s ~: ?L & p ~: ?L & s ~= p -->
            (EX t''.
                ?t\<^bsup>[Fvar s,Fvar p]\<^esup> ->> t'' &
                ?t' = \<sigma>[s,p] t'');
         lc ?u; body ?t |]
      ==> Upd ?u ?l ?t ->> Upd ?u' ?l ?t'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 16, template_hole 15),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (template_app (template_hole 14, template_var 3)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 2, template_var 5)),
        template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 16, template_hole 15),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 0),
                 template_var 2)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 0),
               template_var 1))
           ))),
    ("Sigma.obj_lem",
     "[| ?l : dom ?f; finite ?L;
         ALL s p.
            s ~: ?L & p ~: ?L & s ~= p -->
            (EX t''.
                the (?f ?l)\<^bsup>[Fvar s,Fvar p]\<^esup> ->> t'' &
                ?t' = \<sigma>[s,p] t'');
         ALL l:dom ?f. body (the (?f l)) |]
      ==> Obj ?f ?T ->> Obj (?f(?l |-> ?t')) ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 21, template_var 4),
              template_app (template_hole 20, template_var 3))
            ),
        template_predicate
         (template_app (template_hole 19, template_var 2)),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 20, template_var 3)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 11, template_hole 10),
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 4),
                   template_app (template_hole 0, template_var 1))),
               template_var 0))
           ))),
    ("Sigma.beta_binder",
     "[| ?t -> ?t'; finite ?L; ?s ~: ?L; ?p ~: ?L; ?s ~= ?p |]
      ==> EX L'.
             finite L' &
             (ALL sa pa.
                 sa ~: L' & pa ~: L' & sa ~= pa -->
                 (EX t''.
                     \<sigma>[?s,?p] ?t\<^bsup>[Fvar sa,Fvar pa]\<^esup> ->
                     t'' &
                     \<sigma>[?s,?p] ?t' = \<sigma>[sa,pa] t''))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 4),
              template_var 3)
            ),
        template_predicate
         (template_app (template_hole 12, template_var 2)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 10, template_var 1),
                  template_var 2)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 10, template_var 0),
                  template_var 2)
                )
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("Sigma.rtrancl_beta_obj_n",
     "[| finite ?L;
         ALL l:dom ?f.
            ALL s p.
               s ~: ?L & p ~: ?L & s ~= p -->
               (EX t''.
                   the (?f l)\<^bsup>[Fvar s,Fvar p]\<^esup> ->> t'' &
                   the (?g l) = \<sigma>[s,p] t'');
         dom ?f = dom ?g; ALL l:dom ?f. body (the (?f l)) |]
      ==> Obj ?f ?T ->> Obj ?g ?T",
     template_implication
      ([template_predicate
         (template_app (template_hole 19, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app (template_hole 17, template_var 2)),
              t_empty)
            ),
        template_equation
         (template_app (template_hole 17, template_var 2),
          template_app (template_hole 17, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app (template_hole 17, template_var 2)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 9, template_hole 8),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Sigma.rtrancl_beta_obj",
     "[| ?l : dom ?f; finite ?L;
         ALL s p.
            s ~: ?L & p ~: ?L & s ~= p -->
            (EX t''.
                ?t\<^bsup>[Fvar s,Fvar p]\<^esup> ->> t'' &
                ?t' = \<sigma>[s,p] t'');
         ALL l:dom ?f. body (the (?f l)); body ?t |]
      ==> Obj (?f(?l |-> ?t)) ?T ->> Obj (?f(?l |-> ?t')) ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 21, template_var 5),
              template_app (template_hole 20, template_var 4))
            ),
        template_predicate
         (template_app (template_hole 19, template_var 3)),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 20, template_var 4)),
              t_empty)
            ),
        template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 11, template_hole 10),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 4),
                       template_var 5),
                     template_app (template_hole 0, template_var 2))),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 4),
                     template_var 5),
                   template_app (template_hole 0, template_var 1))),
               template_var 0))
           ))),
    ("Sigma.ball_tsp_P3",
     "[| !!t. [| ?P1.0 t;
                 ALL s p. s ~: ?L & p ~: ?L & s ~= p --> ?P2.0 t s p |]
              ==> ?P3.0 t;
         ALL l:dom ?f. ?P1.0 (the (?f l));
         ALL l:dom ?f.
            ALL s p.
               s ~: ?L & p ~: ?L & s ~= p --> ?P2.0 (the (?f l)) s p |]
      ==> ALL l:dom ?f. ?P3.0 (the (?f l))",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             t_empty)
           ))),
    ("Sigma.Obj_beta",
     "Obj ?f ?T -> ?z ==>
      EX l f' t t'.
         dom ?f = dom f' &
         ?f = f'(l |-> t) &
         l : dom f' &
         (EX L. finite L &
                (ALL s p.
                    s ~: L & p ~: L & s ~= p -->
                    (EX t''.
                        t\<^bsup>[Fvar s,Fvar p]\<^esup> -> t'' &
                        t' = \<sigma>[s,p] t''))) &
         ?z = Obj (f'(l |-> t')) ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 22,
                template_app
                 (template_app (template_hole 21, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 20, t_empty)))),
    ("Sigma.beta_cases",
     "[| Call ?s ?l ?t -> ?u;
         !!f T.
            [| ?s = Obj f T; ?u = (the (f ?l)\<^bsup>[Obj f T,?t]\<^esup>);
               ?l : dom f; lc (Obj f T); lc ?t |]
            ==> ?P;
         !!t'. [| ?u = Call t' ?l ?t; ?s -> t'; lc ?t |] ==> ?P;
         !!t'. [| ?u = Call ?s ?l t'; ?t -> t'; lc ?s |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_app (template_hole 10, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 0, t_empty)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Sigma.Upd_beta",
     "Upd ?t ?l ?u -> ?z ==>
      (EX t'. ?t -> t' & ?z = Upd t' ?l ?u) |
      (EX u' L.
          finite L &
          (ALL s p.
              s ~: L & p ~: L & s ~= p -->
              (EX t''.
                  ?u\<^bsup>[Fvar s,Fvar p]\<^esup> -> t'' &
                  u' = \<sigma>[s,p] t'')) &
          ?z = Upd ?t ?l u') |
      (EX f T. ?l : dom f & Obj f T = ?t & ?z = Obj (f(?l |-> ?u)) T)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 22,
                template_app
                 (template_app
                   (template_app (template_hole 21, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 20, template_app (template_hole 19, t_empty)),
             template_app
              (template_app
                (template_hole 20,
                 template_app (template_hole 19, t_empty)),
               template_app (template_hole 6, t_empty)))
           ))),
    ("Sigma.beta_cases",
     "[| Obj ?s ?T -> ?t;
         !!l f L t t'.
            [| ?s = f(l |-> t); ?t = Obj (f(l |-> t')) ?T; l : dom f;
               finite L;
               ALL s p.
                  s ~: L & p ~: L & s ~= p -->
                  (EX t''.
                      t\<^bsup>[Fvar s,Fvar p]\<^esup> -> t'' &
                      t' = \<sigma>[s,p] t'');
               ALL l:dom f. body (the (f l)) |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 25,
                template_app
                 (template_app (template_hole 24, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 23, t_empty))],
       template_predicate (template_var 0))),
    ("Sigma.ball_tt'sp_P3",
     "[| !!t t'.
            [| ?P1.0 t t';
               ALL s p. s ~: ?L & p ~: ?L & s ~= p --> ?P2.0 t t' s p |]
            ==> ?P3.0 t t';
         dom ?f = dom ?f'; ALL l:dom ?f. ?P1.0 (the (?f l)) (the (?f' l));
         ALL l:dom ?f.
            ALL s p.
               s ~: ?L & p ~: ?L & s ~= p -->
               ?P2.0 (the (?f l)) (the (?f' l)) s p |]
      ==> ALL l:dom ?f'. ?P3.0 (the (?f l)) (the (?f' l))",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_equation
         (template_app (template_hole 2, template_var 1),
          template_app (template_hole 2, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app (template_hole 2, template_var 1)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app (template_hole 2, template_var 1)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 2, template_var 0)),
             t_empty)
           ))),
    ("Sigma.sterm_induct",
     "[| !!b. ?P1.0 (Bvar b); !!x. ?P1.0 (Fvar x);
         !!f T. ?P3.0 f ==> ?P1.0 (Obj f T);
         !!t1 l t2. [| ?P1.0 t1; ?P1.0 t2 |] ==> ?P1.0 (Call t1 l t2);
         !!t1 l t2. [| ?P1.0 t1; ?P1.0 t2 |] ==> ?P1.0 (Upd t1 l t2);
         ?P3.0 Map.empty;
         !!t1 f l.
            [| l ~: dom f; ?P1.0 t1; ?P3.0 f |] ==> ?P3.0 (f(l |-> t1)) |]
      ==> ?P1.0 ?t & ?P3.0 ?f",
     template_implication
      ([template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_var 2, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_var 3, template_var 1)),
             template_app (template_var 2, template_var 0))
           ))),
    ("Sigma.beta_cases",
     "[| Upd ?s ?l ?t -> ?u;
         !!f T.
            [| ?s = Obj f T; ?u = Obj (f(?l |-> ?t)) T; ?l : dom f;
               lc (Obj f T); body ?t |]
            ==> ?P;
         !!t'. [| ?u = Upd t' ?l ?t; ?s -> t'; body ?t |] ==> ?P;
         !!L t'.
            [| ?u = Upd ?s ?l t'; finite L;
               ALL s p.
                  s ~: L & p ~: L & s ~= p -->
                  (EX t''.
                      ?t\<^bsup>[Fvar s,Fvar p]\<^esup> -> t'' &
                      t' = \<sigma>[s,p] t'');
               lc ?s |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 24,
                template_app
                 (template_app
                   (template_app (template_hole 23, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 22, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate (template_var 0))),
    ("Sigma.lc_induct",
     "[| lc ?t; !!x. ?P1.0 (Fvar x);
         !!t l a. [| lc t; ?P1.0 t; lc a; ?P1.0 a |] ==> ?P1.0 (Call t l a);
         !!t l u. [| lc t; ?P1.0 t; ?P2.0 u |] ==> ?P1.0 (Upd t l u);
         !!f T. ALL l:dom f. ?P2.0 (the (f l)) ==> ?P1.0 (Obj f T);
         !!L t.
            [| finite L;
               ALL s p.
                  s ~: L & p ~: L & s ~= p -->
                  lc (t\<^bsup>[Fvar s,Fvar p]\<^esup>) &
                  ?P1.0 (t\<^bsup>[Fvar s,Fvar p]\<^esup>) |]
            ==> ?P2.0 t |]
      ==> ?P1.0 ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 21, template_var 2)),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_app (template_var 1, template_var 2)))),
    ("Sigma.rtrancl_beta_obj_lem00",
     "[| finite ?L;
         ALL l:dom ?f.
            ALL s p.
               s ~: ?L & p ~: ?L & s ~= p -->
               (EX t''.
                   the (?f l)\<^bsup>[Fvar s,Fvar p]\<^esup> ->> t'' &
                   the (?g l) = \<sigma>[s,p] t'');
         dom ?f = dom ?g; ALL l:dom ?f. body (the (?f l)) |]
      ==> ALL k<=card (dom ?f).
             EX ob.
                length ob = k + 1 &
                (ALL obi.
                    obi : set ob -->
                    dom (fst obi) = dom ?f & snd obi <= dom ?f) &
                fst (ob ! 0) = ?f &
                card (snd (ob ! k)) = k &
                (ALL i<k. snd (ob ! i) < snd (ob ! k)) &
                Obj (fst (ob ! 0)) ?T ->> Obj (fst (ob ! k)) ?T &
                (card (snd (ob ! k)) = k -->
                 Ltake_eq (snd (ob ! k)) (fst (ob ! k)) ?g &
                 Ltake_eq (dom ?f - snd (ob ! k)) (fst (ob ! k)) ?f)",
     template_implication
      ([template_predicate
         (template_app (template_hole 40, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 39,
                template_app (template_hole 38, template_var 2)),
              t_empty)
            ),
        template_equation
         (template_app (template_hole 38, template_var 2),
          template_app (template_hole 38, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 39,
                template_app (template_hole 38, template_var 2)),
              t_empty)
            )],
       template_predicate (template_app (template_hole 21, t_empty)))),
    ("Sigma.beta_induct",
     "[| ?t -> ?t';
         !!t t' u l.
            [| t -> t'; ?P1.0 t t'; lc u |]
            ==> ?P1.0 (Call t l u) (Call t' l u);
         !!t t' u l.
            [| t -> t'; ?P1.0 t t'; lc u |]
            ==> ?P1.0 (Call u l t) (Call u l t');
         !!t t' u l.
            [| t -> t'; ?P1.0 t t'; body u |]
            ==> ?P1.0 (Upd t l u) (Upd t' l u);
         !!t t' u l.
            [| ?P2.0 t t'; lc u |] ==> ?P1.0 (Upd u l t) (Upd u l t');
         !!l f T t.
            [| l : dom f; lc (Obj f T); body t |]
            ==> ?P1.0 (Upd (Obj f T) l t) (Obj (f(l |-> t)) T);
         !!l f t t' T.
            [| l : dom f; ?P2.0 t t'; ALL l:dom f. body (the (f l)) |]
            ==> ?P1.0 (Obj (f(l |-> t)) T) (Obj (f(l |-> t')) T);
         !!l f T a.
            [| l : dom f; lc (Obj f T); lc a |]
            ==> ?P1.0 (Call (Obj f T) l a)
                 (the (f l)\<^bsup>[Obj f T,a]\<^esup>);
         !!L t t'.
            [| finite L;
               ALL s p.
                  s ~: L & p ~: L & s ~= p -->
                  (EX t''.
                      t\<^bsup>[Fvar s,Fvar p]\<^esup> -> t'' &
                      ?P1.0 (t\<^bsup>[Fvar s,Fvar p]\<^esup>) t'' &
                      t' = \<sigma>[s,p] t'') |]
            ==> ?P2.0 t t' |]
      ==> ?P1.0 ?t ?t'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 28, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 27, t_empty)),
        template_predicate (template_app (template_hole 27, t_empty)),
        template_predicate (template_app (template_hole 27, t_empty)),
        template_predicate (template_app (template_hole 27, t_empty)),
        template_predicate (template_app (template_hole 26, t_empty)),
        template_predicate (template_app (template_hole 26, t_empty)),
        template_predicate (template_app (template_hole 26, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 1, template_var 3), template_var 2)
           )))]
