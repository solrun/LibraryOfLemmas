Loading theory "Draft.ListPre" (required by "Draft.ParRedMoreTemplates" via "Draft.ParRed" via "Draft.Sigma" via "Draft.FMap")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ParRedMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ParRedMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ParRedMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
consts
  list_insert :: "'a list => nat => 'a => 'a list"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.123s elapsed time, 0.507s cpu time, 0.044s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ParRedMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "Draft.ListPre"
### 0.130s elapsed time, 0.536s cpu time, 0.044s GC time
Loading theory "Draft.FMap" (required by "Draft.ParRedMoreTemplates" via "Draft.ParRed" via "Draft.Sigma")
### Ignoring sort constraints in type variables(s): "'a"
### in type abbreviation "fmap"
### Additional type variable(s) in locale specification "inftype": 'a
class inftype = type +
  assumes "infinite": "infinite UNIV"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.208s elapsed time, 0.850s cpu time, 0.044s GC time
Loading theory "HOL-Proofs-Lambda.Commutation" (required by "Draft.ParRedMoreTemplates" via "Draft.ParRed")
### theory "HOL-Library.Nat_Bijection"
### 0.340s elapsed time, 1.363s cpu time, 0.148s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ParRedMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Proofs-Lambda.Commutation"
### 0.141s elapsed time, 0.550s cpu time, 0.104s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ParRedMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.FMap"
### 0.222s elapsed time, 0.871s cpu time, 0.104s GC time
Loading theory "Draft.Sigma" (required by "Draft.ParRedMoreTemplates" via "Draft.ParRed")
### Ambiguous input (line 49 of "$AFP/Locally-Nameless-Sigma/Sigma/Sigma.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" Llt) ("_cargs" ("_position" a) ("_position" b)))
###   ("\<^fixed>Llt" ("_applC" ("_position" Rep_Label) ("_position" a))
###     ("_applC" ("_position" Rep_Label) ("_position" b))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" Llt) ("_cargs" ("_position" a) ("_position" b)))
###   ("\<^const>Orderings.ord_class.less"
###     ("_applC" ("_position" Rep_Label) ("_position" a))
###     ("_applC" ("_position" Rep_Label) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 51 of "$AFP/Locally-Nameless-Sigma/Sigma/Sigma.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" Lle) ("_cargs" ("_position" a) ("_position" b)))
###   ("\<^fixed>Lle" ("_applC" ("_position" Rep_Label) ("_position" a))
###     ("_applC" ("_position" Rep_Label) ("_position" b))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" Lle) ("_cargs" ("_position" a) ("_position" b)))
###   ("\<^const>Orderings.ord_class.less_eq"
###     ("_applC" ("_position" Rep_Label) ("_position" a))
###     ("_applC" ("_position" Rep_Label) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### theory "HOL-Library.BigO"
### 1.072s elapsed time, 4.085s cpu time, 0.959s GC time
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.133s elapsed time, 4.279s cpu time, 0.959s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  applyPropOnOption :: "(sterm => bool) => sterm option => bool"
consts
  FV :: "sterm => char list set"
  FVoption :: "sterm option => char list set"
### theory "HOL-Library.Tree"
### 2.010s elapsed time, 6.571s cpu time, 1.273s GC time
Loading theory "Draft.Templates" (required by "Draft.ParRedMoreTemplates" via "Draft.ExtrEqs")
consts
  sopen :: "nat => sterm => sterm => sterm => sterm"
  sopen_option :: "nat => sterm => sterm => sterm option => sterm option"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.107s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ParRedMoreTemplates")
consts
  sclose :: "nat => char list => char list => sterm => sterm"
  sclose_option ::
    "nat => char list => char list => sterm option => sterm option"
consts
  ssubst :: "char list => sterm => sterm => sterm"
  ssubst_option :: "char list => sterm => sterm option => sterm option"
Proofs for inductive predicate(s) "lc"
  Proving monotonicity ...
Proofs for inductive predicate(s) "beta"
  Proving monotonicity ...
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.768s elapsed time, 1.875s cpu time, 0.845s GC time
consts
  ssize :: "sterm => nat"
  ssize_option :: "sterm option => nat"
### theory "Draft.Sigma"
### 2.633s elapsed time, 7.605s cpu time, 2.014s GC time
Loading theory "Draft.ParRed" (required by "Draft.ParRedMoreTemplates")
Proofs for inductive predicate(s) "par_beta"
  Proving monotonicity ...
### theory "Draft.ParRed"
### 0.523s elapsed time, 0.597s cpu time, 0.072s GC time
Loading theory "Draft.ParRedMoreTemplates"
val templateLemmas =
   [("ParRed.par_beta_refl", "lc ?t ==> ?t => ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 0)
           ))),
    ("ParRed.Fvar_pbeta", "(Fvar ?x => ?t) = (?t = Fvar ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_var 0, template_app (template_hole 1, template_var 1)))),
    ("ParRed.par_beta_lc", "?t => ?t' ==> lc ?t & lc ?t'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("ParRed.renaming_par_beta",
     "?t => ?t' ==>
      [?s \<rightarrow> Fvar ?sa] ?t => [?s \<rightarrow> Fvar ?sa] ?t'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 1),
                   template_app (template_hole 0, template_var 0)),
                 template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_app (template_hole 0, template_var 0)),
               template_var 2))
           ))),
    ("ParRed.par_beta_cases",
     "[| Fvar ?x => ?t; ?t = Fvar ?x ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app (template_hole 1, template_var 2))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("ParRed.par_beta_preserves_FV",
     "[| ?t => ?t'; ?x ~: FV ?t |] ==> ?x ~: FV ?t'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 0),
                  template_app (template_hole 0, template_var 2))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_var 1))
               )
           ))),
    ("ParRed.par_beta_ssubst",
     "[| ?t => ?t'; ?v => ?v' |]
      ==> [?x \<rightarrow> ?v] ?t => [?x \<rightarrow> ?v'] ?t'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2),
                 template_var 4)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1),
               template_var 3))
           ))),
    ("ParRed.Obj_par_red",
     "[| Obj ?f ?T => ?z;
         !!lz. [| dom lz = dom ?f; ?z = Obj lz ?T |] ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("ParRed.par_beta_body_refl",
     "body ?u ==>
      EX L. finite L &
            (ALL s p.
                s ~: L & p ~: L & s ~= p -->
                (EX t'.
                    ?u\<^bsup>[Fvar s,Fvar p]\<^esup> => t' &
                    ?u = \<sigma>[s,p] t'))",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 0))],
       template_predicate (template_app (template_hole 13, t_empty)))),
    ("ParRed.par_beta_body",
     "[| finite ?L;
         ALL s p.
            s ~: ?L & p ~: ?L & s ~= p -->
            (EX t''.
                ?t\<^bsup>[Fvar s,Fvar p]\<^esup> => t'' &
                ?t' = \<sigma>[s,p] t'') |]
      ==> body ?t & body ?t'",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 2)),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("ParRed.par_beta_beta",
     "[| ?l : dom ?f; Obj ?f ?T => Obj ?f' ?T; ?u => ?u'; lc (Obj ?f ?T);
         lc ?u |]
      ==> the (?f ?l)\<^bsup>[Obj ?f ?T,?u]\<^esup> =>
          (the (?f' ?l)\<^bsup>[Obj ?f' ?T,?u']\<^esup>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 5),
              template_app (template_hole 5, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_hole 0,
                       template_app (template_var 4, template_var 5))),
                   template_app
                    (template_app (template_hole 3, template_var 4),
                     template_var 3)),
                 template_var 1)),
             template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_hole 0,
                     template_app (template_var 2, template_var 5))),
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 3)),
               template_var 0))
           ))),
    ("ParRed.Upd_pbeta",
     "Upd ?t ?l ?u => Upd ?t' ?l ?u' ==>
      ?t => ?t' &
      (EX L. finite L &
             (ALL s p.
                 s ~: L & p ~: L & s ~= p -->
                 (EX t''.
                     ?u\<^bsup>[Fvar s,Fvar p]\<^esup> => t'' &
                     ?u' = \<sigma>[s,p] t''))) &
      lc ?t & body ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app
                   (template_app (template_hole 15, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_app
               (template_app
                 (template_app (template_hole 15, template_var 1),
                  template_var 3),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app (template_hole 16, template_var 4),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 14,
                 template_app (template_hole 13, t_empty)),
               template_app
                (template_app
                  (template_hole 14,
                   template_app (template_hole 1, template_var 4)),
                 template_app (template_hole 0, template_var 2))))
           ))),
    ("ParRed.Obj_pbeta",
     "Obj ?f ?T => Obj ?f' ?T ==>
      dom ?f' = dom ?f &
      (EX L. finite L &
             (ALL l:dom ?f.
                 ALL s p.
                    s ~: L & p ~: L & s ~= p -->
                    (EX t. the (?f l)\<^bsup>[Fvar s,Fvar p]\<^esup> => t &
                           the (?f' l) = \<sigma>[s,p] t))) &
      (ALL l:dom ?f. body (the (?f l)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 19,
                template_app
                 (template_app (template_hole 18, template_var 2),
                  template_var 1)),
              template_app
               (template_app (template_hole 18, template_var 0),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 17,
               template_app
                (template_app
                  (template_hole 16,
                   template_app (template_hole 15, template_var 0)),
                 template_app (template_hole 15, template_var 2))),
             template_app
              (template_app
                (template_hole 17,
                 template_app (template_hole 14, t_empty)),
               template_app
                (template_app
                  (template_hole 12,
                   template_app (template_hole 15, template_var 2)),
                 t_empty)))
           ))),
    ("ParRed.Obj_pbeta_subst",
     "[| finite ?L;
         ALL s p.
            s ~: ?L & p ~: ?L & s ~= p -->
            (EX t''.
                ?t\<^bsup>[Fvar s,Fvar p]\<^esup> => t'' &
                ?t' = \<sigma>[s,p] t'');
         Obj ?f ?T => Obj ?f' ?T; lc (Obj ?f ?T); body ?t |]
      ==> Obj (?f(?l |-> ?t)) ?T => Obj (?f'(?l |-> ?t')) ?T",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 6)),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 5))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 3),
                       template_var 0),
                     template_app (template_hole 0, template_var 5))),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0),
                   template_app (template_hole 0, template_var 4))),
               template_var 2))
           ))),
    ("ParRed.Call_par_red",
     "[| Call ?s ?l ?u => ?z;
         !!t u'. [| ?s => t; ?u => u'; ?z = Call t ?l u' |] ==> ?Q;
         !!f f' T u'.
            [| Obj f T = ?s; Obj f T => Obj f' T; ?l : dom f'; ?u => u';
               ?z = (the (f' ?l)\<^bsup>[Obj f' T,u']\<^esup>) |]
            ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_app (template_hole 9, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("ParRed.par_beta_cases",
     "[| Obj ?f ?T => ?t;
         !!f' L.
            [| ?t = Obj f' ?T; dom f' = dom ?f; finite L;
               ALL l:dom ?f.
                  ALL s p.
                     s ~: L & p ~: L & s ~= p -->
                     (EX t. the (?f l)\<^bsup>[Fvar s,Fvar p]\<^esup> => t &
                            the (f' l) = \<sigma>[s,p] t);
               ALL l:dom ?f. body (the (?f l)) |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 20,
                template_app
                 (template_app (template_hole 19, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 18, t_empty))],
       template_predicate (template_var 0))),
    ("ParRed.par_beta_cases",
     "[| Call ?f ?l ?p => ?t;
         !!t' u'.
            [| ?t = Call t' ?l u'; ?f => t'; ?p => u'; lc ?f; lc ?p |]
            ==> ?P;
         !!f T f' p'.
            [| ?f = Obj f T;
               ?t = (the (f' ?l)\<^bsup>[Obj f' T,p']\<^esup>);
               Obj f T => Obj f' T; ?l : dom f; ?p => p'; lc (Obj f T);
               lc ?p |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_app (template_hole 10, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("ParRed.Upd_par_red",
     "[| Upd ?t ?l ?u => ?z;
         !!t' u' L.
            [| ?t => t'; finite L;
               ALL s p.
                  s ~: L & p ~: L & s ~= p -->
                  (EX t''.
                      ?u\<^bsup>[Fvar s,Fvar p]\<^esup> => t'' &
                      u' = \<sigma>[s,p] t'');
               ?z = Upd t' ?l u' |]
            ==> ?Q;
         !!f f' T u' L.
            [| ?l : dom f; Obj f T = ?t; Obj f T => Obj f' T; finite L;
               ALL s p.
                  s ~: L & p ~: L & s ~= p -->
                  (EX t''.
                      ?u\<^bsup>[Fvar s,Fvar p]\<^esup> => t'' &
                      u' = \<sigma>[s,p] t'');
               ?z = Obj (f'(?l |-> u')) T |]
            ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 22,
                template_app
                 (template_app
                   (template_app (template_hole 21, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("ParRed.par_beta_cases",
     "[| Upd ?f ?l ?t => ?u;
         !!t' L u'.
            [| ?u = Upd t' ?l u'; ?f => t'; lc ?f; finite L;
               ALL s p.
                  s ~: L & p ~: L & s ~= p -->
                  (EX t''.
                      ?t\<^bsup>[Fvar s,Fvar p]\<^esup> => t'' &
                      u' = \<sigma>[s,p] t'');
               body ?t |]
            ==> ?P;
         !!f T f' L t'.
            [| ?f = Obj f T; ?u = Obj (f'(?l |-> t')) T;
               Obj f T => Obj f' T; finite L;
               ALL s p.
                  s ~: L & p ~: L & s ~= p -->
                  (EX t''.
                      ?t\<^bsup>[Fvar s,Fvar p]\<^esup> => t'' &
                      t' = \<sigma>[s,p] t'');
               ?l : dom f; lc (Obj f T); body ?t |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 24,
                template_app
                 (template_app
                   (template_app (template_hole 23, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 22, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("ParRed.diamond_binder",
     "[| finite ?L1.0;
         ALL s p.
            s ~: ?L1.0 & p ~: ?L1.0 & s ~= p -->
            (EX t'.
                (?t\<^bsup>[Fvar s,Fvar p]\<^esup> => t' &
                 (ALL z.
                     ?t\<^bsup>[Fvar s,Fvar p]\<^esup> => z -->
                     (EX u. t' => u & z => u))) &
                ?ta = \<sigma>[s,p] t');
         finite ?L2.0;
         ALL s p.
            s ~: ?L2.0 & p ~: ?L2.0 & s ~= p -->
            (EX t'.
                ?t\<^bsup>[Fvar s,Fvar p]\<^esup> => t' &
                ?tb = \<sigma>[s,p] t') |]
      ==> EX L'.
             finite L' &
             (EX t''.
                 (ALL s p.
                     s ~: L' & p ~: L' & s ~= p -->
                     (EX u. ?ta\<^bsup>[Fvar s,Fvar p]\<^esup> => u &
                            t'' = \<sigma>[s,p] u)) &
                 (ALL s p.
                     s ~: L' & p ~: L' & s ~= p -->
                     (EX u. ?tb\<^bsup>[Fvar s,Fvar p]\<^esup> => u &
                            t'' = \<sigma>[s,p] u)))",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 4)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate
         (template_app (template_hole 14, template_var 1)),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("ParRed.exL_exMap_lem",
     "[| dom ?f = dom ?lz; dom ?f' = dom ?f |]
      ==> ALL L1 L2.
             finite L1 -->
             (ALL l:dom ?f.
                 ALL s p.
                    s ~: L1 & p ~: L1 & s ~= p -->
                    (EX t. (the (?f l)\<^bsup>[Fvar s,Fvar p]\<^esup> => t &
                            (ALL z.
                                the (?f l)\<^bsup>[Fvar s,Fvar p]\<^esup> =>
                                z -->
                                (EX u. t => u & z => u))) &
                           the (?f' l) = \<sigma>[s,p] t)) -->
             finite L2 -->
             (ALL l:dom ?f.
                 ALL s p.
                    s ~: L2 & p ~: L2 & s ~= p -->
                    (EX t. the (?f l)\<^bsup>[Fvar s,Fvar p]\<^esup> => t &
                           the (?lz l) = \<sigma>[s,p] t)) -->
             (EX L'.
                 finite L' &
                 (EX lu.
                     dom lu = dom ?f &
                     (ALL l:dom ?f.
                         ALL s p.
                            s ~: L' & p ~: L' & s ~= p -->
                            (EX t. the (?f'
   l)\<^bsup>[Fvar s,Fvar p]\<^esup> =>
                                   t &
                                   the (lu l) = \<sigma>[s,p] t)) &
                     (ALL l:dom ?f. body (the (?f' l))) &
                     (ALL l:dom ?f.
                         ALL s p.
                            s ~: L' & p ~: L' & s ~= p -->
                            (EX t. the (?lz
   l)\<^bsup>[Fvar s,Fvar p]\<^esup> =>
                                   t &
                                   the (lu l) = \<sigma>[s,p] t)) &
                     (ALL l:dom ?f. body (the (?lz l)))))",
     template_implication
      ([template_equation
         (template_app (template_hole 20, template_var 2),
          template_app (template_hole 20, template_var 1)),
        template_equation
         (template_app (template_hole 20, template_var 0),
          template_app (template_hole 20, template_var 2))],
       template_predicate (template_app (template_hole 19, t_empty)))),
    ("ParRed.exL_exMap",
     "[| dom ?f = dom ?lz; dom ?f' = dom ?f; finite ?L1.0;
         ALL l:dom ?f.
            ALL s p.
               s ~: ?L1.0 & p ~: ?L1.0 & s ~= p -->
               (EX t. (the (?f l)\<^bsup>[Fvar s,Fvar p]\<^esup> => t &
                       (ALL z.
                           the (?f l)\<^bsup>[Fvar s,Fvar p]\<^esup> =>
                           z -->
                           (EX u. t => u & z => u))) &
                      the (?f' l) = \<sigma>[s,p] t);
         finite ?L2.0;
         ALL l:dom ?lz.
            ALL s p.
               s ~: ?L2.0 & p ~: ?L2.0 & s ~= p -->
               (EX t. the (?f l)\<^bsup>[Fvar s,Fvar p]\<^esup> => t &
                      the (?lz l) = \<sigma>[s,p] t) |]
      ==> EX L'.
             finite L' &
             (EX lu.
                 dom lu = dom ?f &
                 (ALL l:dom ?f.
                     ALL s p.
                        s ~: L' & p ~: L' & s ~= p -->
                        (EX t. the (?f' l)\<^bsup>[Fvar s,Fvar p]\<^esup> =>
                               t &
                               the (lu l) = \<sigma>[s,p] t)) &
                 (ALL l:dom ?f. body (the (?f' l))) &
                 (ALL l:dom ?f.
                     ALL s p.
                        s ~: L' & p ~: L' & s ~= p -->
                        (EX t. the (?lz l)\<^bsup>[Fvar s,Fvar p]\<^esup> =>
                               t &
                               the (lu l) = \<sigma>[s,p] t)) &
                 (ALL l:dom ?f. body (the (?lz l))))",
     template_implication
      ([template_equation
         (template_app (template_hole 19, template_var 4),
          template_app (template_hole 19, template_var 3)),
        template_equation
         (template_app (template_hole 19, template_var 2),
          template_app (template_hole 19, template_var 4)),
        template_predicate
         (template_app (template_hole 18, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app (template_hole 19, template_var 4)),
              t_empty)
            ),
        template_predicate
         (template_app (template_hole 18, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app (template_hole 19, template_var 3)),
              t_empty)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("ParRed.pbeta_induct",
     "[| ?t => ?t'; !!x. ?P1.0 (Fvar x) (Fvar x);
         !!t t' l u u'.
            [| t => t'; ?P1.0 t t'; lc t; u => u'; ?P1.0 u u'; lc u |]
            ==> ?P1.0 (Call t l u) (Call t' l u');
         !!t t' l u u'.
            [| t => t'; ?P1.0 t t'; lc t; ?P2.0 u u'; body u |]
            ==> ?P1.0 (Upd t l u) (Upd t' l u');
         !!f f' T t t' l.
            [| Obj f T => Obj f' T; ?P1.0 (Obj f T) (Obj f' T); ?P2.0 t t';
               l : dom f; lc (Obj f T); body t |]
            ==> ?P1.0 (Upd (Obj f T) l t) (Obj (f'(l |-> t')) T);
         !!f f' T.
            [| dom f' = dom f; ALL l:dom f. body (the (f l));
               ALL l:dom f. ?P2.0 (the (f l)) (the (f' l)) |]
            ==> ?P1.0 (Obj f T) (Obj f' T);
         !!f f' T l p p'.
            [| Obj f T => Obj f' T; ?P1.0 (Obj f T) (Obj f' T);
               lc (Obj f T); l : dom f; p => p'; ?P1.0 p p'; lc p |]
            ==> ?P1.0 (Call (Obj f T) l p)
                 (the (f' l)\<^bsup>[Obj f' T,p']\<^esup>);
         !!L t t'.
            [| finite L;
               ALL s p.
                  s ~: L & p ~: L & s ~= p -->
                  (EX t''.
                      t\<^bsup>[Fvar s,Fvar p]\<^esup> => t'' &
                      ?P1.0 (t\<^bsup>[Fvar s,Fvar p]\<^esup>) t'' &
                      t' = \<sigma>[s,p] t'') |]
            ==> ?P2.0 t t' |]
      ==> ?P1.0 ?t ?t'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 30, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 29, t_empty)),
        template_predicate (template_app (template_hole 27, t_empty)),
        template_predicate (template_app (template_hole 27, t_empty)),
        template_predicate (template_app (template_hole 21, t_empty)),
        template_predicate (template_app (template_hole 21, t_empty)),
        template_predicate (template_app (template_hole 21, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 1, template_var 3), template_var 2)
           )))]:
   (string * thm * template) list
### theory "Draft.ParRedMoreTemplates"
### 0.379s elapsed time, 0.540s cpu time, 0.071s GC time
val it = (): unit
