Loading theory "Draft.Environments" (required by "Draft.TypedSigmaMoreTemplates" via "Draft.TypedSigma")
Loading theory "Draft.ListPre" (required by "Draft.TypedSigmaMoreTemplates" via "Draft.TypedSigma" via "Draft.Sigma" via "Draft.FMap")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.TypedSigmaMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.TypedSigmaMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
consts
  list_insert :: "'a list => nat => 'a => 'a list"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.132s elapsed time, 0.546s cpu time, 0.040s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.TypedSigmaMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### theory "Draft.ListPre"
### 0.137s elapsed time, 0.566s cpu time, 0.040s GC time
Loading theory "Draft.FMap" (required by "Draft.TypedSigmaMoreTemplates" via "Draft.TypedSigma" via "Draft.Sigma")
### Ignoring sort constraints in type variables(s): "'a"
### in type abbreviation "fmap"
### Additional type variable(s) in locale specification "inftype": 'a
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
Found termination order: "size_list size <*mlex*> {}"
class inftype = type +
  assumes "infinite": "infinite UNIV"
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Nat_Bijection"
### 0.314s elapsed time, 1.260s cpu time, 0.124s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.TypedSigmaMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.FMap"
### 0.218s elapsed time, 0.853s cpu time, 0.084s GC time
Loading theory "Draft.Sigma" (required by "Draft.TypedSigmaMoreTemplates" via "Draft.TypedSigma")
### theory "HOL-Library.Set_Algebras"
### 0.230s elapsed time, 0.907s cpu time, 0.084s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.TypedSigmaMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### Ambiguous input (line 49 of "$AFP/Locally-Nameless-Sigma/Sigma/Sigma.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" Llt) ("_cargs" ("_position" a) ("_position" b)))
###   ("\<^fixed>Llt" ("_applC" ("_position" Rep_Label) ("_position" a))
###     ("_applC" ("_position" Rep_Label) ("_position" b))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" Llt) ("_cargs" ("_position" a) ("_position" b)))
###   ("\<^const>Orderings.ord_class.less"
###     ("_applC" ("_position" Rep_Label) ("_position" a))
###     ("_applC" ("_position" Rep_Label) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 51 of "$AFP/Locally-Nameless-Sigma/Sigma/Sigma.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" Lle) ("_cargs" ("_position" a) ("_position" b)))
###   ("\<^fixed>Lle" ("_applC" ("_position" Rep_Label) ("_position" a))
###     ("_applC" ("_position" Rep_Label) ("_position" b))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" Lle) ("_cargs" ("_position" a) ("_position" b)))
###   ("\<^const>Orderings.ord_class.less_eq"
###     ("_applC" ("_position" Rep_Label) ("_position" a))
###     ("_applC" ("_position" Rep_Label) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  add :: "'a environment => char list => 'a => 'a environment"
consts
  env_dom :: "'a environment => char list set"
consts
  env_get :: "'a environment => char list => 'a option"
consts
  ok :: "'a environment => bool"
### Ambiguous input (line 78 of "$AFP/Locally-Nameless-Sigma/preliminary/Environments.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Environments.env_get"
###       ("\<^const>HOL.Ex_binder" ("_position" T) ("_position" e))
###       ("_position" x))
###     ("_applC" ("_position" Some) ("_position" T))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" T)
###     ("\<^const>HOL.eq" ("\<^const>List.nth" ("_position" e) ("_position" x))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" T)
###     ("\<^const>HOL.eq"
###       ("\<^const>Environments.env_get" ("_position" e) ("_position" x))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Environments.env_get"
###     ("\<^const>HOL.Ex_binder" ("_position" T) ("_position" e))
###     ("\<^const>HOL.eq" ("_position" x)
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" T)
###     ("\<^const>Environments.env_get" ("_position" e)
###       ("\<^const>HOL.eq" ("_position" x)
###         ("_applC" ("_position" Some) ("_position" T))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" T)
###     ("_applC"
###       ("\<^const>Environments.env_get" ("_position" e)
###         ("\<^const>HOL.eq" ("_position" x) ("_position" Some)))
###       ("_position" T))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>Environments.env_get"
###       ("\<^const>HOL.Ex_binder" ("_position" T) ("_position" e))
###       ("\<^const>HOL.eq" ("_position" x) ("_position" Some)))
###     ("_position" T)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
### Ambiguous input (line 275 of "$AFP/Locally-Nameless-Sigma/preliminary/Environments.thy") produces 10 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Environments.env_get"
###     ("\<^const>HOL.eq" ("\<^const>List.nth" ("_position" e) ("_position" x))
###       ("\<^const>Environments.add" ("_position" e) ("_position" a)
###         ("_position" X)))
###     ("_position" x)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Environments.env_get"
###     ("\<^const>HOL.eq"
###       ("\<^const>Environments.env_get" ("_position" e) ("_position" x))
###       ("\<^const>Environments.add" ("_position" e) ("_position" a)
###         ("_position" X)))
###     ("_position" x)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>List.nth" ("_position" e)
###     ("\<^const>Environments.env_get"
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Environments.add" ("_position" e) ("_position" a)
###           ("_position" X)))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Environments.env_get" ("_position" e)
###     ("\<^const>Environments.env_get"
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Environments.add" ("_position" e) ("_position" a)
###           ("_position" X)))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>List.nth"
###     ("\<^const>Environments.env_get" ("_position" e)
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Environments.add" ("_position" e) ("_position" a)
###           ("_position" X))))
###     ("_position" x)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Environments.env_get"
###     ("\<^const>Environments.env_get" ("_position" e)
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Environments.add" ("_position" e) ("_position" a)
###           ("_position" X))))
###     ("_position" x)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^const>List.nth" ("_position" e) ("_position" x))
###     ("\<^const>Environments.env_get"
###       ("\<^const>Environments.add" ("_position" e) ("_position" a)
###         ("_position" X))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Environments.env_get" ("_position" e) ("_position" x))
###     ("\<^const>Environments.env_get"
###       ("\<^const>Environments.add" ("_position" e) ("_position" a)
###         ("_position" X))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Environments.env_get" ("_position" e)
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Environments.env_get"
###         ("\<^const>Environments.add" ("_position" e) ("_position" a)
###           ("_position" X))
###         ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Environments.env_get"
###     ("\<^const>Environments.add"
###       ("\<^const>Environments.env_get" ("_position" e)
###         ("\<^const>HOL.eq" ("_position" x) ("_position" e)))
###       ("_position" a) ("_position" X))
###     ("_position" x)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
  Proving monotonicity ...
### Ambiguous input (line 292 of "$AFP/Locally-Nameless-Sigma/preliminary/Environments.thy") produces 11 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Environments.env_get"
###     ("\<^const>Environments.add"
###       ("\<^const>Environments.add"
###         ("\<^const>Environments.env_get" ("_position" e)
###           ("\<^const>HOL.eq" ("_position" x) ("_position" e)))
###         ("_position" a) ("_position" X))
###       ("_position" b) ("_position" Y))
###     ("_position" x)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Environments.env_get"
###     ("\<^const>HOL.eq" ("\<^const>List.nth" ("_position" e) ("_position" x))
###       ("\<^const>Environments.add"
###         ("\<^const>Environments.add" ("_position" e) ("_position" a)
###           ("_position" X))
###         ("_position" b) ("_position" Y)))
###     ("_position" x)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Environments.env_get"
###     ("\<^const>HOL.eq"
###       ("\<^const>Environments.env_get" ("_position" e) ("_position" x))
###       ("\<^const>Environments.add"
###         ("\<^const>Environments.add" ("_position" e) ("_position" a)
###           ("_position" X))
###         ("_position" b) ("_position" Y)))
###     ("_position" x)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>List.nth" ("_position" e)
###     ("\<^const>Environments.env_get"
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Environments.add"
###           ("\<^const>Environments.add" ("_position" e) ("_position" a)
###             ("_position" X))
###           ("_position" b) ("_position" Y)))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Environments.env_get" ("_position" e)
###     ("\<^const>Environments.env_get"
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Environments.add"
###           ("\<^const>Environments.add" ("_position" e) ("_position" a)
###             ("_position" X))
###           ("_position" b) ("_position" Y)))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>List.nth"
###     ("\<^const>Environments.env_get" ("_position" e)
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Environments.add"
###           ("\<^const>Environments.add" ("_position" e) ("_position" a)
###             ("_position" X))
###           ("_position" b) ("_position" Y))))
###     ("_position" x)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Environments.env_get"
###     ("\<^const>Environments.env_get" ("_position" e)
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Environments.add"
###           ("\<^const>Environments.add" ("_position" e) ("_position" a)
###             ("_position" X))
###           ("_position" b) ("_position" Y))))
###     ("_position" x)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^const>List.nth" ("_position" e) ("_position" x))
###     ("\<^const>Environments.env_get"
###       ("\<^const>Environments.add"
###         ("\<^const>Environments.add" ("_position" e) ("_position" a)
###           ("_position" X))
###         ("_position" b) ("_position" Y))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Environments.env_get" ("_position" e) ("_position" x))
###     ("\<^const>Environments.env_get"
###       ("\<^const>Environments.add"
###         ("\<^const>Environments.add" ("_position" e) ("_position" a)
###           ("_position" X))
###         ("_position" b) ("_position" Y))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Environments.env_get" ("_position" e)
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Environments.env_get"
###         ("\<^const>Environments.add"
###           ("\<^const>Environments.add" ("_position" e) ("_position" a)
###             ("_position" X))
###           ("_position" b) ("_position" Y))
###         ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 296 of "$AFP/Locally-Nameless-Sigma/preliminary/Environments.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" x)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" a)
###           ("_applC" ("_position" env_dom) ("_position" e))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Environments.env_get"
###       ("\<^const>HOL.eq"
###         ("\<^const>Environments.env_get"
###           ("\<^const>Environments.add" ("_position" e) ("_position" a)
###             ("_position" X))
###           ("_position" x))
###         ("_position" e))
###       ("_position" x))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" x)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" a)
###           ("_applC" ("_position" env_dom) ("_position" e))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>List.nth"
###       ("\<^const>Environments.env_get"
###         ("\<^const>Environments.add" ("_position" e) ("_position" a)
###           ("_position" X))
###         ("\<^const>HOL.eq" ("_position" x) ("_position" e)))
###       ("_position" x))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" x)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" a)
###           ("_applC" ("_position" env_dom) ("_position" e))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Environments.env_get"
###       ("\<^const>Environments.env_get"
###         ("\<^const>Environments.add" ("_position" e) ("_position" a)
###           ("_position" X))
###         ("\<^const>HOL.eq" ("_position" x) ("_position" e)))
###       ("_position" x))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" x)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" a)
###           ("_applC" ("_position" env_dom) ("_position" e))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Environments.env_get"
###       ("\<^const>Environments.add" ("_position" e) ("_position" a)
###         ("_position" X))
###       ("\<^const>Environments.env_get"
###         ("\<^const>HOL.eq" ("_position" x) ("_position" e))
###         ("_position" x)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" x)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" a)
###           ("_applC" ("_position" env_dom) ("_position" e))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Environments.env_get"
###         ("\<^const>Environments.add" ("_position" e) ("_position" a)
###           ("_position" X))
###         ("_position" x))
###       ("\<^const>List.nth" ("_position" e) ("_position" x)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" x)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" a)
###           ("_applC" ("_position" env_dom) ("_position" e))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Environments.env_get"
###       ("\<^const>Environments.add" ("_position" e) ("_position" a)
###         ("_position" X))
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>List.nth" ("_position" e) ("_position" x))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" x)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" a)
###           ("_applC" ("_position" env_dom) ("_position" e))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Environments.env_get"
###         ("\<^const>Environments.add" ("_position" e) ("_position" a)
###           ("_position" X))
###         ("_position" x))
###       ("\<^const>Environments.env_get" ("_position" e) ("_position" x)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" x)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" a)
###           ("_applC" ("_position" env_dom) ("_position" e))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Environments.env_get"
###       ("\<^const>Environments.add" ("_position" e) ("_position" a)
###         ("_position" X))
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Environments.env_get" ("_position" e)
###           ("_position" x))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 300 of "$AFP/Locally-Nameless-Sigma/preliminary/Environments.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" x)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" a)
###           ("_applC" ("_position" env_dom) ("_position" e))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.not_member" ("_position" b)
###             ("_applC" ("_position" env_dom) ("_position" e))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Environments.env_get"
###       ("\<^const>HOL.eq"
###         ("\<^const>Environments.env_get"
###           ("\<^const>Environments.add"
###             ("\<^const>Environments.add" ("_position" e) ("_position" a)
###               ("_position" X))
###             ("_position" b) ("_position" Y))
###           ("_position" x))
###         ("_position" e))
###       ("_position" x))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" x)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" a)
###           ("_applC" ("_position" env_dom) ("_position" e))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.not_member" ("_position" b)
###             ("_applC" ("_position" env_dom) ("_position" e))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>List.nth"
###       ("\<^const>Environments.env_get"
###         ("\<^const>Environments.add"
###           ("\<^const>Environments.add" ("_position" e) ("_position" a)
###             ("_position" X))
###           ("_position" b) ("_position" Y))
###         ("\<^const>HOL.eq" ("_position" x) ("_position" e)))
###       ("_position" x))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" x)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" a)
###           ("_applC" ("_position" env_dom) ("_position" e))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.not_member" ("_position" b)
###             ("_applC" ("_position" env_dom) ("_position" e))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Environments.env_get"
###       ("\<^const>Environments.env_get"
###         ("\<^const>Environments.add"
###           ("\<^const>Environments.add" ("_position" e) ("_position" a)
###             ("_position" X))
###           ("_position" b) ("_position" Y))
###         ("\<^const>HOL.eq" ("_position" x) ("_position" e)))
###       ("_position" x))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" x)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" a)
###           ("_applC" ("_position" env_dom) ("_position" e))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.not_member" ("_position" b)
###             ("_applC" ("_position" env_dom) ("_position" e))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Environments.env_get"
###       ("\<^const>Environments.add"
###         ("\<^const>Environments.add" ("_position" e) ("_position" a)
###           ("_position" X))
###         ("_position" b) ("_position" Y))
###       ("\<^const>Environments.env_get"
###         ("\<^const>HOL.eq" ("_position" x) ("_position" e))
###         ("_position" x)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" x)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" a)
###           ("_applC" ("_position" env_dom) ("_position" e))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.not_member" ("_position" b)
###             ("_applC" ("_position" env_dom) ("_position" e))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Environments.env_get"
###         ("\<^const>Environments.add"
###           ("\<^const>Environments.add" ("_position" e) ("_position" a)
###             ("_position" X))
###           ("_position" b) ("_position" Y))
###         ("_position" x))
###       ("\<^const>List.nth" ("_position" e) ("_position" x)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" x)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" a)
###           ("_applC" ("_position" env_dom) ("_position" e))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.not_member" ("_position" b)
###             ("_applC" ("_position" env_dom) ("_position" e))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Environments.env_get"
###       ("\<^const>Environments.add"
###         ("\<^const>Environments.add" ("_position" e) ("_position" a)
###           ("_position" X))
###         ("_position" b) ("_position" Y))
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>List.nth" ("_position" e) ("_position" x))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" x)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" a)
###           ("_applC" ("_position" env_dom) ("_position" e))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.not_member" ("_position" b)
###             ("_applC" ("_position" env_dom) ("_position" e))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Environments.env_get"
###         ("\<^const>Environments.add"
###           ("\<^const>Environments.add" ("_position" e) ("_position" a)
###             ("_position" X))
###           ("_position" b) ("_position" Y))
###         ("_position" x))
###       ("\<^const>Environments.env_get" ("_position" e) ("_position" x)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" x)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" a)
###           ("_applC" ("_position" env_dom) ("_position" e))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.not_member" ("_position" b)
###             ("_applC" ("_position" env_dom) ("_position" e))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Environments.env_get"
###       ("\<^const>Environments.add"
###         ("\<^const>Environments.add" ("_position" e) ("_position" a)
###           ("_position" X))
###         ("_position" b) ("_position" Y))
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Environments.env_get" ("_position" e)
###           ("_position" x))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 304 of "$AFP/Locally-Nameless-Sigma/preliminary/Environments.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member" ("_position" xa)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" ok) ("_position" e)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Environments.env_get"
###             ("\<^const>Environments.add"
###               ("_applC" ("_position" the) ("_position" e)) ("_position" xa)
###               ("_position" U))
###             ("\<^const>HOL.eq" ("_position" xa) ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" U) ("_position" T))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member" ("_position" xa)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" ok) ("_position" e)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" the)
###             ("\<^const>Environments.env_get"
###               ("\<^const>Environments.add" ("_position" e) ("_position" xa)
###                 ("_position" U))
###               ("\<^const>HOL.eq" ("_position" xa) ("_position" T))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" U) ("_position" T))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member" ("_position" xa)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" ok) ("_position" e)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>Environments.env_get"
###               ("\<^const>Environments.add"
###                 ("_applC" ("_position" the) ("_position" e))
###                 ("_position" xa) ("_position" U))
###               ("_position" xa))
###             ("_position" T))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" U) ("_position" T))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member" ("_position" xa)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" ok) ("_position" e)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" the)
###               ("\<^const>Environments.env_get"
###                 ("\<^const>Environments.add" ("_position" e)
###                   ("_position" xa) ("_position" U))
###                 ("_position" xa)))
###             ("_position" T))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" U) ("_position" T))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 307 of "$AFP/Locally-Nameless-Sigma/preliminary/Environments.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member" ("_position" xa)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" ok) ("_position" e)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" the)
###         ("\<^const>Environments.env_get"
###           ("\<^const>Environments.add" ("_position" e) ("_position" xa)
###             ("_position" U))
###           ("_position" xa)))
###       ("_position" U))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member" ("_position" xa)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" ok) ("_position" e)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Environments.env_get"
###         ("\<^const>Environments.add"
###           ("_applC" ("_position" the) ("_position" e)) ("_position" xa)
###           ("_position" U))
###         ("_position" xa))
###       ("_position" U))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member" ("_position" xa)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" ok) ("_position" e)))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" the)
###       ("\<^const>Environments.env_get"
###         ("\<^const>Environments.add" ("_position" e) ("_position" xa)
###           ("_position" U))
###         ("\<^const>HOL.eq" ("_position" xa) ("_position" U))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member" ("_position" xa)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" ok) ("_position" e)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Environments.env_get"
###       ("\<^const>Environments.add"
###         ("_applC" ("_position" the) ("_position" e)) ("_position" xa)
###         ("_position" U))
###       ("\<^const>HOL.eq" ("_position" xa) ("_position" U)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 313 of "$AFP/Locally-Nameless-Sigma/preliminary/Environments.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Environments.env_get"
###       ("\<^const>Environments.add"
###         ("\<^const>Environments.add"
###           ("_applC" ("_position" the) ("_position" e)) ("_position" x)
###           ("_position" A))
###         ("_position" y) ("_position" B))
###       ("_position" x))
###     ("_position" A)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the)
###       ("\<^const>Environments.env_get"
###         ("\<^const>Environments.add"
###           ("\<^const>Environments.add" ("_position" e) ("_position" x)
###             ("_position" A))
###           ("_position" y) ("_position" B))
###         ("_position" x)))
###     ("_position" A)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Environments.env_get"
###     ("\<^const>Environments.add"
###       ("\<^const>Environments.add"
###         ("_applC" ("_position" the) ("_position" e)) ("_position" x)
###         ("_position" A))
###       ("_position" y) ("_position" B))
###     ("\<^const>HOL.eq" ("_position" x) ("_position" A))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" the)
###     ("\<^const>Environments.env_get"
###       ("\<^const>Environments.add"
###         ("\<^const>Environments.add" ("_position" e) ("_position" x)
###           ("_position" A))
###         ("_position" y) ("_position" B))
###       ("\<^const>HOL.eq" ("_position" x) ("_position" A)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 322 of "$AFP/Locally-Nameless-Sigma/preliminary/Environments.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Environments.env_get"
###       ("\<^const>Environments.add"
###         ("\<^const>Environments.add"
###           ("_applC" ("_position" the) ("_position" e)) ("_position" x)
###           ("_position" A))
###         ("_position" y) ("_position" B))
###       ("_position" y))
###     ("_position" B)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the)
###       ("\<^const>Environments.env_get"
###         ("\<^const>Environments.add"
###           ("\<^const>Environments.add" ("_position" e) ("_position" x)
###             ("_position" A))
###           ("_position" y) ("_position" B))
###         ("_position" y)))
###     ("_position" B)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Environments.env_get"
###     ("\<^const>Environments.add"
###       ("\<^const>Environments.add"
###         ("_applC" ("_position" the) ("_position" e)) ("_position" x)
###         ("_position" A))
###       ("_position" y) ("_position" B))
###     ("\<^const>HOL.eq" ("_position" y) ("_position" B))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" the)
###     ("\<^const>Environments.env_get"
###       ("\<^const>Environments.add"
###         ("\<^const>Environments.add" ("_position" e) ("_position" x)
###           ("_position" A))
###         ("_position" y) ("_position" B))
###       ("\<^const>HOL.eq" ("_position" y) ("_position" B)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Missing patterns in function definition:
### !!b. Malformed+b = undefined
### !!a. a+Malformed = undefined
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "{}"
### Ambiguous input (line 367 of "$AFP/Locally-Nameless-Sigma/preliminary/Environments.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" env_dom)
###       ("\<^const>Groups.plus_class.plus" ("_position" e1) ("_position" e2)))
###     ("\<^const>Set.union" ("_applC" ("_position" env_dom) ("_position" e1))
###       ("_applC" ("_position" env_dom) ("_position" e2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" env_dom)
###       ("\<^const>Environments.env_app" ("_position" e1) ("_position" e2)))
###     ("\<^const>Set.union" ("_applC" ("_position" env_dom) ("_position" e1))
###       ("_applC" ("_position" env_dom) ("_position" e2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### Ambiguous input (line 380 of "$AFP/Locally-Nameless-Sigma/preliminary/Environments.thy") produces 35 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the)
###       ("\<^const>Environments.env_get"
###         ("\<^const>Groups.plus_class.plus" ("_position" e1)
###           ("_position" e2))
###         ("_position" x)))
###     ("\<^const>List.nth" ("_applC" ("_position" the) ("_position" e1))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the)
###       ("\<^const>Environments.env_app" ("_position" e1)
###         ("\<^const>Environments.env_get" ("_position" e2) ("_position" x))))
###     ("\<^const>List.nth" ("_applC" ("_position" the) ("_position" e1))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the)
###       ("\<^const>Environments.env_app" ("_position" e1)
###         ("\<^const>List.nth" ("_position" e2) ("_position" x))))
###     ("\<^const>List.nth" ("_applC" ("_position" the) ("_position" e1))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the)
###       ("\<^const>Groups.plus_class.plus" ("_position" e1)
###         ("\<^const>Environments.env_get" ("_position" e2) ("_position" x))))
###     ("\<^const>List.nth" ("_applC" ("_position" the) ("_position" e1))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the)
###       ("\<^const>Groups.plus_class.plus" ("_position" e1)
###         ("\<^const>List.nth" ("_position" e2) ("_position" x))))
###     ("\<^const>List.nth" ("_applC" ("_position" the) ("_position" e1))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the)
###       ("\<^const>Environments.env_get"
###         ("\<^const>Environments.env_app" ("_position" e1) ("_position" e2))
###         ("_position" x)))
###     ("\<^const>List.nth" ("_applC" ("_position" the) ("_position" e1))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the)
###       ("\<^const>List.nth"
###         ("\<^const>Environments.env_app" ("_position" e1) ("_position" e2))
###         ("_position" x)))
###     ("\<^const>List.nth" ("_applC" ("_position" the) ("_position" e1))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the)
###       ("\<^const>Environments.env_get"
###         ("\<^const>Groups.plus_class.plus" ("_position" e1)
###           ("_position" e2))
###         ("_position" x)))
###     ("\<^const>Environments.env_get"
###       ("_applC" ("_position" the) ("_position" e1)) ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the)
###       ("\<^const>Environments.env_app" ("_position" e1)
###         ("\<^const>Environments.env_get" ("_position" e2) ("_position" x))))
###     ("\<^const>Environments.env_get"
###       ("_applC" ("_position" the) ("_position" e1)) ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the)
###       ("\<^const>Environments.env_app" ("_position" e1)
###         ("\<^const>List.nth" ("_position" e2) ("_position" x))))
###     ("\<^const>Environments.env_get"
###       ("_applC" ("_position" the) ("_position" e1)) ("_position" x))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 396 of "$AFP/Locally-Nameless-Sigma/preliminary/Environments.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" ok)
###     ("\<^const>Groups.plus_class.plus" ("_position" e1) ("_position" e2))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" ok)
###     ("\<^const>Environments.env_app" ("_position" e1) ("_position" e2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 408 of "$AFP/Locally-Nameless-Sigma/preliminary/Environments.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Environments.env_app"
###     ("\<^const>HOL.eq"
###       ("\<^const>Environments.add"
###         ("\<^const>Environments.env_app" ("_position" e1) ("_position" e2))
###         ("_position" x) ("_position" X))
###       ("\<^const>Environments.add" ("_position" e1) ("_position" x)
###         ("_position" X)))
###     ("_position" e2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Environments.env_app"
###     ("\<^const>HOL.eq"
###       ("\<^const>Environments.add"
###         ("\<^const>Groups.plus_class.plus" ("_position" e1)
###           ("_position" e2))
###         ("_position" x) ("_position" X))
###       ("\<^const>Environments.add" ("_position" e1) ("_position" x)
###         ("_position" X)))
###     ("_position" e2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Environments.add"
###       ("\<^const>Environments.env_app" ("_position" e1) ("_position" e2))
###       ("_position" x) ("_position" X))
###     ("\<^const>Environments.env_app"
###       ("\<^const>Environments.add" ("_position" e1) ("_position" x)
###         ("_position" X))
###       ("_position" e2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Environments.add"
###       ("\<^const>Groups.plus_class.plus" ("_position" e1) ("_position" e2))
###       ("_position" x) ("_position" X))
###     ("\<^const>Environments.env_app"
###       ("\<^const>Environments.add" ("_position" e1) ("_position" x)
###         ("_position" X))
###       ("_position" e2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Environments.add"
###       ("\<^const>Environments.env_app" ("_position" e1) ("_position" e2))
###       ("_position" x) ("_position" X))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^const>Environments.add" ("_position" e1) ("_position" x)
###         ("_position" X))
###       ("_position" e2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Environments.add"
###       ("\<^const>Groups.plus_class.plus" ("_position" e1) ("_position" e2))
###       ("_position" x) ("_position" X))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^const>Environments.add" ("_position" e1) ("_position" x)
###         ("_position" X))
###       ("_position" e2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  cycle :: "'a list => 'a stream"
### Ambiguous input (line 436 of "$AFP/Locally-Nameless-Sigma/preliminary/Environments.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Environments.env_app"
###     ("\<^const>HOL.eq"
###       ("\<^const>Environments.add"
###         ("\<^const>Environments.add"
###           ("\<^const>Groups.plus_class.plus" ("_position" e1)
###             ("_position" e2))
###           ("_position" x) ("_position" X))
###         ("_position" y) ("_position" Y))
###       ("\<^const>Environments.add"
###         ("\<^const>Environments.add" ("_position" e1) ("_position" x)
###           ("_position" X))
###         ("_position" y) ("_position" Y)))
###     ("_position" e2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Environments.env_app"
###     ("\<^const>HOL.eq"
###       ("\<^const>Environments.add"
###         ("\<^const>Environments.add"
###           ("\<^const>Environments.env_app" ("_position" e1)
###             ("_position" e2))
###           ("_position" x) ("_position" X))
###         ("_position" y) ("_position" Y))
###       ("\<^const>Environments.add"
###         ("\<^const>Environments.add" ("_position" e1) ("_position" x)
###           ("_position" X))
###         ("_position" y) ("_position" Y)))
###     ("_position" e2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Environments.add"
###       ("\<^const>Environments.add"
###         ("\<^const>Groups.plus_class.plus" ("_position" e1)
###           ("_position" e2))
###         ("_position" x) ("_position" X))
###       ("_position" y) ("_position" Y))
###     ("\<^const>Environments.env_app"
###       ("\<^const>Environments.add"
###         ("\<^const>Environments.add" ("_position" e1) ("_position" x)
###           ("_position" X))
###         ("_position" y) ("_position" Y))
###       ("_position" e2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Environments.add"
###       ("\<^const>Environments.add"
###         ("\<^const>Environments.env_app" ("_position" e1) ("_position" e2))
###         ("_position" x) ("_position" X))
###       ("_position" y) ("_position" Y))
###     ("\<^const>Environments.env_app"
###       ("\<^const>Environments.add"
###         ("\<^const>Environments.add" ("_position" e1) ("_position" x)
###           ("_position" X))
###         ("_position" y) ("_position" Y))
###       ("_position" e2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Environments.add"
###       ("\<^const>Environments.add"
###         ("\<^const>Groups.plus_class.plus" ("_position" e1)
###           ("_position" e2))
###         ("_position" x) ("_position" X))
###       ("_position" y) ("_position" Y))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^const>Environments.add"
###         ("\<^const>Environments.add" ("_position" e1) ("_position" x)
###           ("_position" X))
###         ("_position" y) ("_position" Y))
###       ("_position" e2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Environments.add"
###       ("\<^const>Environments.add"
###         ("\<^const>Environments.env_app" ("_position" e1) ("_position" e2))
###         ("_position" x) ("_position" X))
###       ("_position" y) ("_position" Y))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^const>Environments.add"
###         ("\<^const>Environments.add" ("_position" e1) ("_position" x)
###           ("_position" X))
###         ("_position" y) ("_position" Y))
###       ("_position" e2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Environments"
### 1.214s elapsed time, 4.666s cpu time, 0.989s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.TypedSigmaMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.151s elapsed time, 4.405s cpu time, 0.942s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.791s elapsed time, 2.653s cpu time, 0.274s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  applyPropOnOption :: "(sterm => bool) => sterm option => bool"
consts
  FV :: "sterm => char list set"
  FVoption :: "sterm option => char list set"
consts
  sopen :: "nat => sterm => sterm => sterm => sterm"
  sopen_option :: "nat => sterm => sterm => sterm option => sterm option"
Found termination order: "size <*mlex*> {}"
consts
  sclose :: "nat => char list => char list => sterm => sterm"
  sclose_option ::
    "nat => char list => char list => sterm option => sterm option"
consts
  ssubst :: "char list => sterm => sterm => sterm"
  ssubst_option :: "char list => sterm => sterm option => sterm option"
### theory "HOL-Library.Tree"
### 2.083s elapsed time, 6.808s cpu time, 1.245s GC time
Loading theory "Draft.Templates" (required by "Draft.TypedSigmaMoreTemplates" via "Draft.ExtrEqs")
Proofs for inductive predicate(s) "lc"
  Proving monotonicity ...
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.110s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.TypedSigmaMoreTemplates")
Proofs for inductive predicate(s) "beta"
  Proving monotonicity ...
consts
  ssize :: "sterm => nat"
  ssize_option :: "sterm option => nat"
### theory "Draft.Sigma"
### 2.532s elapsed time, 7.722s cpu time, 1.363s GC time
Loading theory "Draft.TypedSigma" (required by "Draft.TypedSigmaMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.536s elapsed time, 1.134s cpu time, 0.118s GC time
consts
  do :: "Sigma.type => Label set"
### Ambiguous input (line 28 of "$AFP/Locally-Nameless-Sigma/Sigma/TypedSigma.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Power.power_class.power"
###       ("_applC" ("_position" Object) ("_position" l)) ("_position" n))
###     ("_applC" ("_position" l) ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>type_get" ("_applC" ("_position" Object) ("_position" l))
###       ("_position" n))
###     ("_applC" ("_position" l) ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>type_get" ("_applC" ("_position" Object) ("_position" l))
###     ("\<^const>HOL.eq" ("_position" n)
###       ("_applC" ("_position" l) ("_position" n)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  type_get :: "Sigma.type => Label => (Sigma.type * Sigma.type) option"
### Ambiguous input (line 37 of "$AFP/Locally-Nameless-Sigma/Sigma/TypedSigma.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" ok) ("_position" env)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" x)
###           ("_applC" ("_position" env_dom) ("_position" env))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" the)
###               ("\<^const>Environments.env_get" ("_position" env)
###                 ("_position" x)))
###             ("_position" T))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>typing" ("_position" env)
###       ("_applC" ("_position" Fvar) ("_position" x)) ("_position" T))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" ok) ("_position" env)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" x)
###           ("_applC" ("_position" env_dom) ("_position" env))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" the)
###               ("\<^const>List.nth" ("_position" env) ("_position" x)))
###             ("_position" T))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>typing" ("_position" env)
###       ("_applC" ("_position" Fvar) ("_position" x)) ("_position" T))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 40 of "$AFP/Locally-Nameless-Sigma/Sigma/TypedSigma.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" ok) ("_position" env)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" dom) ("_position" b))
###           ("_applC" ("_position" do) ("_position" A))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" finite) ("_position" F)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" l)
###               ("_applC" ("_position" do) ("_position" A))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s) ("_position" p))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.not_member" ("_position" s)
###                       ("_position" F))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>Set.not_member" ("_position" p)
###                         ("_position" F))
###                       ("\<^const>HOL.not_equal" ("_position" s)
###                         ("_position" p))))
###                   ("\<^fixed>typing"
###                     ("\<^const>Environments.add"
###                       ("\<^const>Environments.add" ("_position" env)
###                         ("_position" s) ("_position" A))
###                       ("_position" p)
###                       ("_applC" ("_position" param)
###                         ("_applC" ("_position" the)
###                           ("\<^const>TypedSigma.type_get" ("_position" A)
###                             ("_position" l)))))
###                     ("\<^const>Sigma.openz"
###                       ("_applC" ("_position" the)
###                         ("_applC" ("_position" b) ("_position" l)))
###                       ("_applC" ("_position" Fvar) ("_position" s))
###                       ("_applC" ("_position" Fvar) ("_position" p)))
###                     ("_applC" ("_position" return)
###                       ("_applC" ("_position" the)
###                         ("\<^const>Power.power_class.power" ("_position" A)
###                           ("_position" l)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>typing" ("_position" env)
###       ("_applC" ("_position" Obj)
###         ("_cargs" ("_position" b) ("_position" A)))
###       ("_position" A))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" ok) ("_position" env)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" dom) ("_position" b))
###           ("_applC" ("_position" do) ("_position" A))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" finite) ("_position" F)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" l)
###               ("_applC" ("_position" do) ("_position" A))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s) ("_position" p))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.not_member" ("_position" s)
###                       ("_position" F))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>Set.not_member" ("_position" p)
###                         ("_position" F))
###                       ("\<^const>HOL.not_equal" ("_position" s)
###                         ("_position" p))))
###                   ("\<^fixed>typing"
###                     ("\<^const>Environments.add"
###                       ("\<^const>Environments.add" ("_position" env)
###                         ("_position" s) ("_position" A))
###                       ("_position" p)
###                       ("_applC" ("_position" param)
###                         ("_applC" ("_position" the)
###                           ("\<^const>Power.power_class.power"
###                             ("_position" A) ("_position" l)))))
###                     ("\<^const>Sigma.openz"
###                       ("_applC" ("_position" the)
###                         ("_applC" ("_position" b) ("_position" l)))
###                       ("_applC" ("_position" Fvar) ("_position" s))
###                       ("_applC" ("_position" Fvar) ("_position" p)))
###                     ("_applC" ("_position" return)
###                       ("_applC" ("_position" the)
###                         ("\<^const>Power.power_class.power" ("_position" A)
###                           ("_position" l)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>typing" ("_position" env)
###       ("_applC" ("_position" Obj)
###         ("_cargs" ("_position" b) ("_position" A)))
###       ("_position" A))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" ok) ("_position" env)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" dom) ("_position" b))
###           ("_applC" ("_position" do) ("_position" A))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" finite) ("_position" F)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" l)
###               ("_applC" ("_position" do) ("_position" A))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s) ("_position" p))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.not_member" ("_position" s)
###                       ("_position" F))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>Set.not_member" ("_position" p)
###                         ("_position" F))
###                       ("\<^const>HOL.not_equal" ("_position" s)
###                         ("_position" p))))
###                   ("\<^fixed>typing"
###                     ("\<^const>Environments.add"
###                       ("\<^const>Environments.add" ("_position" env)
###                         ("_position" s) ("_position" A))
###                       ("_position" p)
###                       ("_applC" ("_position" param)
###                         ("_applC" ("_position" the)
###                           ("\<^const>TypedSigma.type_get" ("_position" A)
###                             ("_position" l)))))
###                     ("\<^const>Sigma.openz"
###                       ("_applC" ("_position" the)
###                         ("_applC" ("_position" b) ("_position" l)))
###                       ("_applC" ("_position" Fvar) ("_position" s))
###                       ("_applC" ("_position" Fvar) ("_position" p)))
###                     ("_applC" ("_position" return)
###                       ("_applC" ("_position" the)
###                         ("\<^const>TypedSigma.type_get" ("_position" A)
###                           ("_position" l)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>typing" ("_position" env)
###       ("_applC" ("_position" Obj)
###         ("_cargs" ("_position" b) ("_position" A)))
###       ("_position" A))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" ok) ("_position" env)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" dom) ("_position" b))
###           ("_applC" ("_position" do) ("_position" A))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" finite) ("_position" F)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" l)
###               ("_applC" ("_position" do) ("_position" A))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s) ("_position" p))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.not_member" ("_position" s)
###                       ("_position" F))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>Set.not_member" ("_position" p)
###                         ("_position" F))
###                       ("\<^const>HOL.not_equal" ("_position" s)
###                         ("_position" p))))
###                   ("\<^fixed>typing"
###                     ("\<^const>Environments.add"
###                       ("\<^const>Environments.add" ("_position" env)
###                         ("_position" s) ("_position" A))
###                       ("_position" p)
###                       ("_applC" ("_position" param)
###                         ("_applC" ("_position" the)
###                           ("\<^const>Power.power_class.power"
###                             ("_position" A) ("_position" l)))))
###                     ("\<^const>Sigma.openz"
###                       ("_applC" ("_position" the)
###                         ("_applC" ("_position" b) ("_position" l)))
###                       ("_applC" ("_position" Fvar) ("_position" s))
###                       ("_applC" ("_position" Fvar) ("_position" p)))
###                     ("_applC" ("_position" return)
###                       ("_applC" ("_position" the)
###                         ("\<^const>TypedSigma.type_get" ("_position" A)
###                           ("_position" l)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>typing" ("_position" env)
###       ("_applC" ("_position" Obj)
###         ("_cargs" ("_position" b) ("_position" A)))
###       ("_position" A))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 46 of "$AFP/Locally-Nameless-Sigma/Sigma/TypedSigma.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" finite) ("_position" F)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.All_binder" ("_idts" ("_position" s) ("_position" p))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.not_member" ("_position" s) ("_position" F))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.not_member" ("_position" p) ("_position" F))
###                 ("\<^const>HOL.not_equal" ("_position" s) ("_position" p))))
###             ("\<^fixed>typing"
###               ("\<^const>Environments.add"
###                 ("\<^const>Environments.add" ("_position" env)
###                   ("_position" s) ("_position" A))
###                 ("_position" p)
###                 ("_applC" ("_position" param)
###                   ("_applC" ("_position" the)
###                     ("\<^const>TypedSigma.type_get" ("_position" A)
###                       ("_position" l)))))
###               ("\<^const>Sigma.openz" ("_position" n)
###                 ("_applC" ("_position" Fvar) ("_position" s))
###                 ("_applC" ("_position" Fvar) ("_position" p)))
###               ("_applC" ("_position" return)
###                 ("_applC" ("_position" the)
###                   ("\<^const>Power.power_class.power" ("_position" A)
###                     ("_position" l))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>typing" ("_position" env) ("_position" a)
###             ("_position" A)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member" ("_position" l)
###               ("_applC" ("_position" do) ("_position" A))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>typing" ("_position" env)
###       ("_applC" ("_position" Upd)
###         ("_cargs" ("_position" a)
###           ("_cargs" ("_position" l) ("_position" n))))
###       ("_position" A))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" finite) ("_position" F)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.All_binder" ("_idts" ("_position" s) ("_position" p))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.not_member" ("_position" s) ("_position" F))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.not_member" ("_position" p) ("_position" F))
###                 ("\<^const>HOL.not_equal" ("_position" s) ("_position" p))))
###             ("\<^fixed>typing"
###               ("\<^const>Environments.add"
###                 ("\<^const>Environments.add" ("_position" env)
###                   ("_position" s) ("_position" A))
###                 ("_position" p)
###                 ("_applC" ("_position" param)
###                   ("_applC" ("_position" the)
###                     ("\<^const>Power.power_class.power" ("_position" A)
###                       ("_position" l)))))
###               ("\<^const>Sigma.openz" ("_position" n)
###                 ("_applC" ("_position" Fvar) ("_position" s))
###                 ("_applC" ("_position" Fvar) ("_position" p)))
###               ("_applC" ("_position" return)
###                 ("_applC" ("_position" the)
###                   ("\<^const>Power.power_class.power" ("_position" A)
###                     ("_position" l))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>typing" ("_position" env) ("_position" a)
###             ("_position" A)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member" ("_position" l)
###               ("_applC" ("_position" do) ("_position" A))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>typing" ("_position" env)
###       ("_applC" ("_position" Upd)
###         ("_cargs" ("_position" a)
###           ("_cargs" ("_position" l) ("_position" n))))
###       ("_position" A))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" finite) ("_position" F)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.All_binder" ("_idts" ("_position" s) ("_position" p))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.not_member" ("_position" s) ("_position" F))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.not_member" ("_position" p) ("_position" F))
###                 ("\<^const>HOL.not_equal" ("_position" s) ("_position" p))))
###             ("\<^fixed>typing"
###               ("\<^const>Environments.add"
###                 ("\<^const>Environments.add" ("_position" env)
###                   ("_position" s) ("_position" A))
###                 ("_position" p)
###                 ("_applC" ("_position" param)
###                   ("_applC" ("_position" the)
###                     ("\<^const>TypedSigma.type_get" ("_position" A)
###                       ("_position" l)))))
###               ("\<^const>Sigma.openz" ("_position" n)
###                 ("_applC" ("_position" Fvar) ("_position" s))
###                 ("_applC" ("_position" Fvar) ("_position" p)))
###               ("_applC" ("_position" return)
###                 ("_applC" ("_position" the)
###                   ("\<^const>TypedSigma.type_get" ("_position" A)
###                     ("_position" l))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>typing" ("_position" env) ("_position" a)
###             ("_position" A)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member" ("_position" l)
###               ("_applC" ("_position" do) ("_position" A))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>typing" ("_position" env)
###       ("_applC" ("_position" Upd)
###         ("_cargs" ("_position" a)
###           ("_cargs" ("_position" l) ("_position" n))))
###       ("_position" A))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" finite) ("_position" F)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.All_binder" ("_idts" ("_position" s) ("_position" p))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.not_member" ("_position" s) ("_position" F))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.not_member" ("_position" p) ("_position" F))
###                 ("\<^const>HOL.not_equal" ("_position" s) ("_position" p))))
###             ("\<^fixed>typing"
###               ("\<^const>Environments.add"
###                 ("\<^const>Environments.add" ("_position" env)
###                   ("_position" s) ("_position" A))
###                 ("_position" p)
###                 ("_applC" ("_position" param)
###                   ("_applC" ("_position" the)
###                     ("\<^const>Power.power_class.power" ("_position" A)
###                       ("_position" l)))))
###               ("\<^const>Sigma.openz" ("_position" n)
###                 ("_applC" ("_position" Fvar) ("_position" s))
###                 ("_applC" ("_position" Fvar) ("_position" p)))
###               ("_applC" ("_position" return)
###                 ("_applC" ("_position" the)
###                   ("\<^const>TypedSigma.type_get" ("_position" A)
###                     ("_position" l))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>typing" ("_position" env) ("_position" a)
###             ("_position" A)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member" ("_position" l)
###               ("_applC" ("_position" do) ("_position" A))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>typing" ("_position" env)
###       ("_applC" ("_position" Upd)
###         ("_cargs" ("_position" a)
###           ("_cargs" ("_position" l) ("_position" n))))
###       ("_position" A))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 52 of "$AFP/Locally-Nameless-Sigma/Sigma/TypedSigma.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>typing" ("_position" env) ("_position" a) ("_position" A)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>typing" ("_position" env) ("_position" b)
###           ("_applC" ("_position" param)
###             ("_applC" ("_position" the)
###               ("\<^const>Power.power_class.power" ("_position" A)
###                 ("_position" l))))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" l)
###             ("_applC" ("_position" do) ("_position" A)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>typing" ("_position" env)
###       ("_applC" ("_position" Call)
###         ("_cargs" ("_position" a)
###           ("_cargs" ("_position" l) ("_position" b))))
###       ("_applC" ("_position" return)
###         ("_applC" ("_position" the)
###           ("\<^const>TypedSigma.type_get" ("_position" A)
###             ("_position" l)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>typing" ("_position" env) ("_position" a) ("_position" A)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>typing" ("_position" env) ("_position" b)
###           ("_applC" ("_position" param)
###             ("_applC" ("_position" the)
###               ("\<^const>TypedSigma.type_get" ("_position" A)
###                 ("_position" l))))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" l)
###             ("_applC" ("_position" do) ("_position" A)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>typing" ("_position" env)
###       ("_applC" ("_position" Call)
###         ("_cargs" ("_position" a)
###           ("_cargs" ("_position" l) ("_position" b))))
###       ("_applC" ("_position" return)
###         ("_applC" ("_position" the)
###           ("\<^const>TypedSigma.type_get" ("_position" A)
###             ("_position" l)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>typing" ("_position" env) ("_position" a) ("_position" A)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>typing" ("_position" env) ("_position" b)
###           ("_applC" ("_position" param)
###             ("_applC" ("_position" the)
###               ("\<^const>Power.power_class.power" ("_position" A)
###                 ("_position" l))))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" l)
###             ("_applC" ("_position" do) ("_position" A)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>typing" ("_position" env)
###       ("_applC" ("_position" Call)
###         ("_cargs" ("_position" a)
###           ("_cargs" ("_position" l) ("_position" b))))
###       ("_applC" ("_position" return)
###         ("_applC" ("_position" the)
###           ("\<^const>Power.power_class.power" ("_position" A)
###             ("_position" l)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>typing" ("_position" env) ("_position" a) ("_position" A)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>typing" ("_position" env) ("_position" b)
###           ("_applC" ("_position" param)
###             ("_applC" ("_position" the)
###               ("\<^const>TypedSigma.type_get" ("_position" A)
###                 ("_position" l))))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" l)
###             ("_applC" ("_position" do) ("_position" A)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>typing" ("_position" env)
###       ("_applC" ("_position" Call)
###         ("_cargs" ("_position" a)
###           ("_cargs" ("_position" l) ("_position" b))))
###       ("_applC" ("_position" return)
###         ("_applC" ("_position" the)
###           ("\<^const>Power.power_class.power" ("_position" A)
###             ("_position" l)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "typing"
  Proving monotonicity ...
### Ambiguous input (line 79 of "$AFP/Locally-Nameless-Sigma/Sigma/TypedSigma.thy") produces 6 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>TypedSigma.typing" ("_position" e)
###       ("_applC" ("_position" Obj)
###         ("_cargs" ("_position" f) ("_position" U)))
###       ("_position" U)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_applC" ("_position" dom) ("_position" f))
###         ("_applC" ("_position" do) ("_position" U)))
###       ("\<^const>HOL.Ex_binder" ("_position" F)
###         ("\<^const>HOL.conj" ("_applC" ("_position" finite) ("_position" F))
###           ("_Ball" ("_position" l)
###             ("_applC" ("_position" do) ("_position" U))
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" s) ("_position" p))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.not_member" ("_position" s)
###                     ("_position" F))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.not_member" ("_position" p)
###                       ("_position" F))
###                     ("\<^const>HOL.not_equal" ("_position" s)
###                       ("_position" p))))
###                 ("\<^const>TypedSigma.typing"
###                   ("\<^const>Environments.add"
###                     ("\<^const>Environments.add" ("_position" e)
###                       ("_position" s) ("_position" U))
###                     ("_position" p)
###                     ("_applC" ("_position" param)
###                       ("\<^const>Power.power_class.power"
###                         ("_applC" ("_position" the) ("_position" U))
###                         ("_position" l))))
###                   ("\<^const>Sigma.openz"
###                     ("_applC" ("_position" the)
###                       ("_applC" ("_position" f) ("_position" l)))
###                     ("_applC" ("_position" Fvar) ("_position" s))
###                     ("_applC" ("_position" Fvar) ("_position" p)))
###                   ("_applC" ("_position" return)
###                     ("_applC" ("_position" the)
###                       ("\<^const>TypedSigma.type_get" ("_position" U)
###                         ("_position" l)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>TypedSigma.typing" ("_position" e)
###       ("_applC" ("_position" Obj)
###         ("_cargs" ("_position" f) ("_position" U)))
###       ("_position" U)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_applC" ("_position" dom) ("_position" f))
###         ("_applC" ("_position" do) ("_position" U)))
###       ("\<^const>HOL.Ex_binder" ("_position" F)
###         ("\<^const>HOL.conj" ("_applC" ("_position" finite) ("_position" F))
###           ("_Ball" ("_position" l)
###             ("_applC" ("_position" do) ("_position" U))
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" s) ("_position" p))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.not_member" ("_position" s)
###                     ("_position" F))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.not_member" ("_position" p)
###                       ("_position" F))
###                     ("\<^const>HOL.not_equal" ("_position" s)
###                       ("_position" p))))
###                 ("\<^const>TypedSigma.typing"
###                   ("\<^const>Environments.add"
###                     ("\<^const>Environments.add" ("_position" e)
###                       ("_position" s) ("_position" U))
###                     ("_position" p)
###                     ("_applC" ("_position" param)
###                       ("\<^const>TypedSigma.type_get"
###                         ("_applC" ("_position" the) ("_position" U))
###                         ("_position" l))))
###                   ("\<^const>Sigma.openz"
###                     ("_applC" ("_position" the)
###                       ("_applC" ("_position" f) ("_position" l)))
###                     ("_applC" ("_position" Fvar) ("_position" s))
###                     ("_applC" ("_position" Fvar) ("_position" p)))
###                   ("_applC" ("_position" return)
###                     ("_applC" ("_position" the)
###                       ("\<^const>TypedSigma.type_get" ("_position" U)
###                         ("_position" l)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>TypedSigma.typing" ("_position" e)
###       ("_applC" ("_position" Obj)
###         ("_cargs" ("_position" f) ("_position" U)))
###       ("_position" U)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_applC" ("_position" dom) ("_position" f))
###         ("_applC" ("_position" do) ("_position" U)))
###       ("\<^const>HOL.Ex_binder" ("_position" F)
###         ("\<^const>HOL.conj" ("_applC" ("_position" finite) ("_position" F))
###           ("_Ball" ("_position" l)
###             ("_applC" ("_position" do) ("_position" U))
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" s) ("_position" p))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.not_member" ("_position" s)
###                     ("_position" F))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.not_member" ("_position" p)
###                       ("_position" F))
###                     ("\<^const>HOL.not_equal" ("_position" s)
###                       ("_position" p))))
###                 ("\<^const>TypedSigma.typing"
###                   ("\<^const>Environments.add"
###                     ("\<^const>Environments.add" ("_position" e)
###                       ("_position" s) ("_position" U))
###                     ("_position" p)
###                     ("_applC" ("_position" param)
###                       ("_applC" ("_position" the)
###                         ("\<^const>TypedSigma.type_get" ("_position" U)
###                           ("_position" l)))))
###                   ("\<^const>Sigma.openz"
###                     ("_applC" ("_position" the)
###                       ("_applC" ("_position" f) ("_position" l)))
###                     ("_applC" ("_position" Fvar) ("_position" s))
###                     ("_applC" ("_position" Fvar) ("_position" p)))
###                   ("_applC" ("_position" return)
###                     ("_applC" ("_position" the)
###                       ("\<^const>TypedSigma.type_get" ("_position" U)
###                         ("_position" l)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>TypedSigma.typing" ("_position" e)
###       ("_applC" ("_position" Obj)
###         ("_cargs" ("_position" f) ("_position" U)))
###       ("_position" U)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_applC" ("_position" dom) ("_position" f))
###         ("_applC" ("_position" do) ("_position" U)))
###       ("\<^const>HOL.Ex_binder" ("_position" F)
###         ("\<^const>HOL.conj" ("_applC" ("_position" finite) ("_position" F))
###           ("_Ball" ("_position" l)
###             ("_applC" ("_position" do) ("_position" U))
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" s) ("_position" p))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.not_member" ("_position" s)
###                     ("_position" F))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.not_member" ("_position" p)
###                       ("_position" F))
###                     ("\<^const>HOL.not_equal" ("_position" s)
###                       ("_position" p))))
###                 ("\<^const>TypedSigma.typing"
###                   ("\<^const>Environments.add"
###                     ("\<^const>Environments.add" ("_position" e)
###                       ("_position" s) ("_position" U))
###                     ("_position" p)
###                     ("_applC" ("_position" param)
###                       ("\<^const>Power.power_class.power"
###                         ("_applC" ("_position" the) ("_position" U))
###                         ("_position" l))))
###                   ("\<^const>Sigma.openz"
###                     ("_applC" ("_position" the)
###                       ("_applC" ("_position" f) ("_position" l)))
###                     ("_applC" ("_position" Fvar) ("_position" s))
###                     ("_applC" ("_position" Fvar) ("_position" p)))
###                   ("_applC" ("_position" return)
###                     ("_applC" ("_position" the)
###                       ("\<^const>Power.power_class.power" ("_position" U)
###                         ("_position" l)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>TypedSigma.typing" ("_position" e)
###       ("_applC" ("_position" Obj)
###         ("_cargs" ("_position" f) ("_position" U)))
###       ("_position" U)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_applC" ("_position" dom) ("_position" f))
###         ("_applC" ("_position" do) ("_position" U)))
###       ("\<^const>HOL.Ex_binder" ("_position" F)
###         ("\<^const>HOL.conj" ("_applC" ("_position" finite) ("_position" F))
###           ("_Ball" ("_position" l)
###             ("_applC" ("_position" do) ("_position" U))
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" s) ("_position" p))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.not_member" ("_position" s)
###                     ("_position" F))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.not_member" ("_position" p)
###                       ("_position" F))
###                     ("\<^const>HOL.not_equal" ("_position" s)
###                       ("_position" p))))
###                 ("\<^const>TypedSigma.typing"
###                   ("\<^const>Environments.add"
###                     ("\<^const>Environments.add" ("_position" e)
###                       ("_position" s) ("_position" U))
###                     ("_position" p)
###                     ("_applC" ("_position" param)
###                       ("\<^const>TypedSigma.type_get"
###                         ("_applC" ("_position" the) ("_position" U))
###                         ("_position" l))))
###                   ("\<^const>Sigma.openz"
###                     ("_applC" ("_position" the)
###                       ("_applC" ("_position" f) ("_position" l)))
###                     ("_applC" ("_position" Fvar) ("_position" s))
###                     ("_applC" ("_position" Fvar) ("_position" p)))
###                   ("_applC" ("_position" return)
###                     ("_applC" ("_position" the)
###                       ("\<^const>Power.power_class.power" ("_position" U)
###                         ("_position" l)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>TypedSigma.typing" ("_position" e)
###       ("_applC" ("_position" Obj)
###         ("_cargs" ("_position" f) ("_position" U)))
###       ("_position" U)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_applC" ("_position" dom) ("_position" f))
###         ("_applC" ("_position" do) ("_position" U)))
###       ("\<^const>HOL.Ex_binder" ("_position" F)
###         ("\<^const>HOL.conj" ("_applC" ("_position" finite) ("_position" F))
###           ("_Ball" ("_position" l)
###             ("_applC" ("_position" do) ("_position" U))
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" s) ("_position" p))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.not_member" ("_position" s)
###                     ("_position" F))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.not_member" ("_position" p)
###                       ("_position" F))
###                     ("\<^const>HOL.not_equal" ("_position" s)
###                       ("_position" p))))
###                 ("\<^const>TypedSigma.typing"
###                   ("\<^const>Environments.add"
###                     ("\<^const>Environments.add" ("_position" e)
###                       ("_position" s) ("_position" U))
###                     ("_position" p)
###                     ("_applC" ("_position" param)
###                       ("_applC" ("_position" the)
###                         ("\<^const>TypedSigma.type_get" ("_position" U)
###                           ("_position" l)))))
###                   ("\<^const>Sigma.openz"
###                     ("_applC" ("_position" the)
###                       ("_applC" ("_position" f) ("_position" l)))
###                     ("_applC" ("_position" Fvar) ("_position" s))
###                     ("_applC" ("_position" Fvar) ("_position" p)))
###                   ("_applC" ("_position" return)
###                     ("_applC" ("_position" the)
###                       ("\<^const>Power.power_class.power" ("_position" U)
###                         ("_position" l)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 93 of "$AFP/Locally-Nameless-Sigma/Sigma/TypedSigma.thy") produces 5 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" env) ("_idts" ("_position" T) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" ok) ("_position" env)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" x)
###             ("_applC" ("_position" env_dom) ("_position" env))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" the)
###               ("\<^const>Environments.env_get" ("_position" env)
###                 ("\<^const>HOL.eq" ("_position" x) ("_position" T))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P1)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_applC" ("_position" Fvar) ("_position" x))
###             ("_position" T)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" env) ("_idts" ("_position" T) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" ok) ("_position" env)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" x)
###             ("_applC" ("_position" env_dom) ("_position" env))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Environments.env_get"
###               ("_applC" ("_position" the) ("_position" env))
###               ("\<^const>HOL.eq" ("_position" x) ("_position" T)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P1)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_applC" ("_position" Fvar) ("_position" x))
###             ("_position" T)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" env) ("_idts" ("_position" T) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" ok) ("_position" env)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" x)
###             ("_applC" ("_position" env_dom) ("_position" env))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" the)
###                 ("\<^const>Environments.env_get" ("_position" env)
###                   ("_position" x)))
###               ("_position" T))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P1)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_applC" ("_position" Fvar) ("_position" x))
###             ("_position" T)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" env) ("_idts" ("_position" T) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" ok) ("_position" env)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" x)
###             ("_applC" ("_position" env_dom) ("_position" env))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>Environments.env_get"
###                 ("_applC" ("_position" the) ("_position" env))
###                 ("_position" x))
###               ("_position" T))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P1)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_applC" ("_position" Fvar) ("_position" x))
###             ("_position" T)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" env) ("_idts" ("_position" T) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" ok) ("_position" env)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" x)
###             ("_applC" ("_position" env_dom) ("_position" env))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>List.nth"
###                 ("_applC" ("_position" the) ("_position" env))
###                 ("_position" x))
###               ("_position" T))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P1)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_applC" ("_position" Fvar) ("_position" x))
###             ("_position" T)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 95 of "$AFP/Locally-Nameless-Sigma/Sigma/TypedSigma.thy") produces 8 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" env)
###     ("_idts" ("_position" T)
###       ("_idts" ("_position" t) ("_idts" ("_position" l) ("_position" p)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypedSigma.typing" ("_position" env) ("_position" t)
###           ("_position" T)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" P1)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" t) ("_position" T)))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypedSigma.typing" ("_position" env) ("_position" p)
###               ("_applC" ("_position" param)
###                 ("_applC" ("_position" the)
###                   ("\<^const>Power.power_class.power" ("_position" T)
###                     ("_position" l))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P1)
###                 ("_cargs" ("_position" env)
###                   ("_cargs" ("_position" p)
###                     ("_applC" ("_position" param)
###                       ("_applC" ("_position" the)
###                         ("\<^const>TypedSigma.type_get" ("_position" T)
###                           ("_position" l))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Set.member" ("_position" l)
###                   ("_applC" ("_position" do) ("_position" T)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P1)
###         ("_cargs" ("_position" env)
###           ("_cargs"
###             ("_applC" ("_position" Call)
###               ("_cargs" ("_position" t)
###                 ("_cargs" ("_position" l) ("_position" p))))
###             ("_applC" ("_position" return)
###               ("_applC" ("_position" the)
###                 ("\<^const>Power.power_class.power" ("_position" T)
###                   ("_position" l))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" env)
###     ("_idts" ("_position" T)
###       ("_idts" ("_position" t) ("_idts" ("_position" l) ("_position" p)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypedSigma.typing" ("_position" env) ("_position" t)
###           ("_position" T)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" P1)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" t) ("_position" T)))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypedSigma.typing" ("_position" env) ("_position" p)
###               ("_applC" ("_position" param)
###                 ("_applC" ("_position" the)
###                   ("\<^const>TypedSigma.type_get" ("_position" T)
###                     ("_position" l))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P1)
###                 ("_cargs" ("_position" env)
###                   ("_cargs" ("_position" p)
###                     ("_applC" ("_position" param)
###                       ("_applC" ("_position" the)
###                         ("\<^const>TypedSigma.type_get" ("_position" T)
###                           ("_position" l))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Set.member" ("_position" l)
###                   ("_applC" ("_position" do) ("_position" T)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P1)
###         ("_cargs" ("_position" env)
###           ("_cargs"
###             ("_applC" ("_position" Call)
###               ("_cargs" ("_position" t)
###                 ("_cargs" ("_position" l) ("_position" p))))
###             ("_applC" ("_position" return)
###               ("_applC" ("_position" the)
###                 ("\<^const>Power.power_class.power" ("_position" T)
###                   ("_position" l))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" env)
###     ("_idts" ("_position" T)
###       ("_idts" ("_position" t) ("_idts" ("_position" l) ("_position" p)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypedSigma.typing" ("_position" env) ("_position" t)
###           ("_position" T)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" P1)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" t) ("_position" T)))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypedSigma.typing" ("_position" env) ("_position" p)
###               ("_applC" ("_position" param)
###                 ("_applC" ("_position" the)
###                   ("\<^const>Power.power_class.power" ("_position" T)
###                     ("_position" l))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P1)
###                 ("_cargs" ("_position" env)
###                   ("_cargs" ("_position" p)
###                     ("_applC" ("_position" param)
###                       ("_applC" ("_position" the)
###                         ("\<^const>Power.power_class.power" ("_position" T)
###                           ("_position" l))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Set.member" ("_position" l)
###                   ("_applC" ("_position" do) ("_position" T)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P1)
###         ("_cargs" ("_position" env)
###           ("_cargs"
###             ("_applC" ("_position" Call)
###               ("_cargs" ("_position" t)
###                 ("_cargs" ("_position" l) ("_position" p))))
###             ("_applC" ("_position" return)
###               ("_applC" ("_position" the)
###                 ("\<^const>Power.power_class.power" ("_position" T)
###                   ("_position" l))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" env)
###     ("_idts" ("_position" T)
###       ("_idts" ("_position" t) ("_idts" ("_position" l) ("_position" p)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypedSigma.typing" ("_position" env) ("_position" t)
###           ("_position" T)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" P1)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" t) ("_position" T)))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypedSigma.typing" ("_position" env) ("_position" p)
###               ("_applC" ("_position" param)
###                 ("_applC" ("_position" the)
###                   ("\<^const>TypedSigma.type_get" ("_position" T)
###                     ("_position" l))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P1)
###                 ("_cargs" ("_position" env)
###                   ("_cargs" ("_position" p)
###                     ("_applC" ("_position" param)
###                       ("_applC" ("_position" the)
###                         ("\<^const>Power.power_class.power" ("_position" T)
###                           ("_position" l))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Set.member" ("_position" l)
###                   ("_applC" ("_position" do) ("_position" T)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P1)
###         ("_cargs" ("_position" env)
###           ("_cargs"
###             ("_applC" ("_position" Call)
###               ("_cargs" ("_position" t)
###                 ("_cargs" ("_position" l) ("_position" p))))
###             ("_applC" ("_position" return)
###               ("_applC" ("_position" the)
###                 ("\<^const>Power.power_class.power" ("_position" T)
###                   ("_position" l))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" env)
###     ("_idts" ("_position" T)
###       ("_idts" ("_position" t) ("_idts" ("_position" l) ("_position" p)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypedSigma.typing" ("_position" env) ("_position" t)
###           ("_position" T)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" P1)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" t) ("_position" T)))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypedSigma.typing" ("_position" env) ("_position" p)
###               ("_applC" ("_position" param)
###                 ("_applC" ("_position" the)
###                   ("\<^const>Power.power_class.power" ("_position" T)
###                     ("_position" l))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P1)
###                 ("_cargs" ("_position" env)
###                   ("_cargs" ("_position" p)
###                     ("_applC" ("_position" param)
###                       ("_applC" ("_position" the)
###                         ("\<^const>TypedSigma.type_get" ("_position" T)
###                           ("_position" l))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Set.member" ("_position" l)
###                   ("_applC" ("_position" do) ("_position" T)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P1)
###         ("_cargs" ("_position" env)
###           ("_cargs"
###             ("_applC" ("_position" Call)
###               ("_cargs" ("_position" t)
###                 ("_cargs" ("_position" l) ("_position" p))))
###             ("_applC" ("_position" return)
###               ("_applC" ("_position" the)
###                 ("\<^const>TypedSigma.type_get" ("_position" T)
###                   ("_position" l))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" env)
###     ("_idts" ("_position" T)
###       ("_idts" ("_position" t) ("_idts" ("_position" l) ("_position" p)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypedSigma.typing" ("_position" env) ("_position" t)
###           ("_position" T)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" P1)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" t) ("_position" T)))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypedSigma.typing" ("_position" env) ("_position" p)
###               ("_applC" ("_position" param)
###                 ("_applC" ("_position" the)
###                   ("\<^const>TypedSigma.type_get" ("_position" T)
###                     ("_position" l))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P1)
###                 ("_cargs" ("_position" env)
###                   ("_cargs" ("_position" p)
###                     ("_applC" ("_position" param)
###                       ("_applC" ("_position" the)
###                         ("\<^const>TypedSigma.type_get" ("_position" T)
###                           ("_position" l))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Set.member" ("_position" l)
###                   ("_applC" ("_position" do) ("_position" T)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P1)
###         ("_cargs" ("_position" env)
###           ("_cargs"
###             ("_applC" ("_position" Call)
###               ("_cargs" ("_position" t)
###                 ("_cargs" ("_position" l) ("_position" p))))
###             ("_applC" ("_position" return)
###               ("_applC" ("_position" the)
###                 ("\<^const>TypedSigma.type_get" ("_position" T)
###                   ("_position" l))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" env)
###     ("_idts" ("_position" T)
###       ("_idts" ("_position" t) ("_idts" ("_position" l) ("_position" p)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypedSigma.typing" ("_position" env) ("_position" t)
###           ("_position" T)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" P1)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" t) ("_position" T)))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypedSigma.typing" ("_position" env) ("_position" p)
###               ("_applC" ("_position" param)
###                 ("_applC" ("_position" the)
###                   ("\<^const>Power.power_class.power" ("_position" T)
###                     ("_position" l))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P1)
###                 ("_cargs" ("_position" env)
###                   ("_cargs" ("_position" p)
###                     ("_applC" ("_position" param)
###                       ("_applC" ("_position" the)
###                         ("\<^const>Power.power_class.power" ("_position" T)
###                           ("_position" l))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Set.member" ("_position" l)
###                   ("_applC" ("_position" do) ("_position" T)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P1)
###         ("_cargs" ("_position" env)
###           ("_cargs"
###             ("_applC" ("_position" Call)
###               ("_cargs" ("_position" t)
###                 ("_cargs" ("_position" l) ("_position" p))))
###             ("_applC" ("_position" return)
###               ("_applC" ("_position" the)
###                 ("\<^const>TypedSigma.type_get" ("_position" T)
###                   ("_position" l))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" env)
###     ("_idts" ("_position" T)
###       ("_idts" ("_position" t) ("_idts" ("_position" l) ("_position" p)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypedSigma.typing" ("_position" env) ("_position" t)
###           ("_position" T)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" P1)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" t) ("_position" T)))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypedSigma.typing" ("_position" env) ("_position" p)
###               ("_applC" ("_position" param)
###                 ("_applC" ("_position" the)
###                   ("\<^const>TypedSigma.type_get" ("_position" T)
###                     ("_position" l))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P1)
###                 ("_cargs" ("_position" env)
###                   ("_cargs" ("_position" p)
###                     ("_applC" ("_position" param)
###                       ("_applC" ("_position" the)
###                         ("\<^const>Power.power_class.power" ("_position" T)
###                           ("_position" l))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Set.member" ("_position" l)
###                   ("_applC" ("_position" do) ("_position" T)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P1)
###         ("_cargs" ("_position" env)
###           ("_cargs"
###             ("_applC" ("_position" Call)
###               ("_cargs" ("_position" t)
###                 ("_cargs" ("_position" l) ("_position" p))))
###             ("_applC" ("_position" return)
###               ("_applC" ("_position" the)
###                 ("\<^const>TypedSigma.type_get" ("_position" T)
###                   ("_position" l))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 102 of "$AFP/Locally-Nameless-Sigma/Sigma/TypedSigma.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" env)
###     ("_idts" ("_position" T)
###       ("_idts" ("_position" l) ("_idts" ("_position" t) ("_position" L)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" ok) ("_position" env)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" finite) ("_position" L)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" s) ("_position" p))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.not_member" ("_position" s)
###                     ("_position" L))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.not_member" ("_position" p)
###                       ("_position" L))
###                     ("\<^const>HOL.not_equal" ("_position" s)
###                       ("_position" p))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>TypedSigma.typing"
###                     ("\<^const>Environments.add"
###                       ("\<^const>Environments.add" ("_position" env)
###                         ("_position" s) ("_position" T))
###                       ("_position" p)
###                       ("_applC" ("_position" param)
###                         ("_applC" ("_position" the)
###                           ("\<^const>TypedSigma.type_get" ("_position" T)
###                             ("_position" l)))))
###                     ("\<^const>Sigma.openz" ("_position" t)
###                       ("_applC" ("_position" Fvar) ("_position" s))
###                       ("_applC" ("_position" Fvar) ("_position" p)))
###                     ("_applC" ("_position" return)
###                       ("_applC" ("_position" the)
###                         ("\<^const>Power.power_class.power" ("_position" T)
###                           ("_position" l)))))
###                   ("_applC" ("_position" P1)
###                     ("_cargs"
###                       ("\<^const>Environments.add"
###                         ("\<^const>Environments.add" ("_position" env)
###                           ("_position" s) ("_position" T))
###                         ("_position" p)
###                         ("_applC" ("_position" param)
###                           ("_applC" ("_position" the)
###                             ("\<^const>TypedSigma.type_get" ("_position" T)
###                               ("_position" l)))))
###                       ("_cargs"
###                         ("\<^const>Sigma.openz" ("_position" t)
###                           ("_applC" ("_position" Fvar) ("_position" s))
###                           ("_applC" ("_position" Fvar) ("_position" p)))
###                         ("_applC" ("_position" return)
###                           ("_applC" ("_position" the)
###                             ("\<^const>TypedSigma.type_get" ("_position" T)
###                               ("_position" l))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P2)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" T) ("_position" l))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" env)
###     ("_idts" ("_position" T)
###       ("_idts" ("_position" l) ("_idts" ("_position" t) ("_position" L)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" ok) ("_position" env)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" finite) ("_position" L)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" s) ("_position" p))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.not_member" ("_position" s)
###                     ("_position" L))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.not_member" ("_position" p)
###                       ("_position" L))
###                     ("\<^const>HOL.not_equal" ("_position" s)
###                       ("_position" p))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>TypedSigma.typing"
###                     ("\<^const>Environments.add"
###                       ("\<^const>Environments.add" ("_position" env)
###                         ("_position" s) ("_position" T))
###                       ("_position" p)
###                       ("_applC" ("_position" param)
###                         ("_applC" ("_position" the)
###                           ("\<^const>Power.power_class.power"
###                             ("_position" T) ("_position" l)))))
###                     ("\<^const>Sigma.openz" ("_position" t)
###                       ("_applC" ("_position" Fvar) ("_position" s))
###                       ("_applC" ("_position" Fvar) ("_position" p)))
###                     ("_applC" ("_position" return)
###                       ("_applC" ("_position" the)
###                         ("\<^const>Power.power_class.power" ("_position" T)
###                           ("_position" l)))))
###                   ("_applC" ("_position" P1)
###                     ("_cargs"
###                       ("\<^const>Environments.add"
###                         ("\<^const>Environments.add" ("_position" env)
###                           ("_position" s) ("_position" T))
###                         ("_position" p)
###                         ("_applC" ("_position" param)
###                           ("_applC" ("_position" the)
###                             ("\<^const>TypedSigma.type_get" ("_position" T)
###                               ("_position" l)))))
###                       ("_cargs"
###                         ("\<^const>Sigma.openz" ("_position" t)
###                           ("_applC" ("_position" Fvar) ("_position" s))
###                           ("_applC" ("_position" Fvar) ("_position" p)))
###                         ("_applC" ("_position" return)
###                           ("_applC" ("_position" the)
###                             ("\<^const>TypedSigma.type_get" ("_position" T)
###                               ("_position" l))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P2)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" T) ("_position" l))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" env)
###     ("_idts" ("_position" T)
###       ("_idts" ("_position" l) ("_idts" ("_position" t) ("_position" L)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" ok) ("_position" env)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" finite) ("_position" L)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" s) ("_position" p))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.not_member" ("_position" s)
###                     ("_position" L))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.not_member" ("_position" p)
###                       ("_position" L))
###                     ("\<^const>HOL.not_equal" ("_position" s)
###                       ("_position" p))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>TypedSigma.typing"
###                     ("\<^const>Environments.add"
###                       ("\<^const>Environments.add" ("_position" env)
###                         ("_position" s) ("_position" T))
###                       ("_position" p)
###                       ("_applC" ("_position" param)
###                         ("_applC" ("_position" the)
###                           ("\<^const>TypedSigma.type_get" ("_position" T)
###                             ("_position" l)))))
###                     ("\<^const>Sigma.openz" ("_position" t)
###                       ("_applC" ("_position" Fvar) ("_position" s))
###                       ("_applC" ("_position" Fvar) ("_position" p)))
###                     ("_applC" ("_position" return)
###                       ("_applC" ("_position" the)
###                         ("\<^const>TypedSigma.type_get" ("_position" T)
###                           ("_position" l)))))
###                   ("_applC" ("_position" P1)
###                     ("_cargs"
###                       ("\<^const>Environments.add"
###                         ("\<^const>Environments.add" ("_position" env)
###                           ("_position" s) ("_position" T))
###                         ("_position" p)
###                         ("_applC" ("_position" param)
###                           ("_applC" ("_position" the)
###                             ("\<^const>TypedSigma.type_get" ("_position" T)
###                               ("_position" l)))))
###                       ("_cargs"
###                         ("\<^const>Sigma.openz" ("_position" t)
###                           ("_applC" ("_position" Fvar) ("_position" s))
###                           ("_applC" ("_position" Fvar) ("_position" p)))
###                         ("_applC" ("_position" return)
###                           ("_applC" ("_position" the)
###                             ("\<^const>TypedSigma.type_get" ("_position" T)
###                               ("_position" l))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P2)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" T) ("_position" l))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" env)
###     ("_idts" ("_position" T)
###       ("_idts" ("_position" l) ("_idts" ("_position" t) ("_position" L)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" ok) ("_position" env)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" finite) ("_position" L)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" s) ("_position" p))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.not_member" ("_position" s)
###                     ("_position" L))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.not_member" ("_position" p)
###                       ("_position" L))
###                     ("\<^const>HOL.not_equal" ("_position" s)
###                       ("_position" p))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>TypedSigma.typing"
###                     ("\<^const>Environments.add"
###                       ("\<^const>Environments.add" ("_position" env)
###                         ("_position" s) ("_position" T))
###                       ("_position" p)
###                       ("_applC" ("_position" param)
###                         ("_applC" ("_position" the)
###                           ("\<^const>Power.power_class.power"
###                             ("_position" T) ("_position" l)))))
###                     ("\<^const>Sigma.openz" ("_position" t)
###                       ("_applC" ("_position" Fvar) ("_position" s))
###                       ("_applC" ("_position" Fvar) ("_position" p)))
###                     ("_applC" ("_position" return)
###                       ("_applC" ("_position" the)
###                         ("\<^const>TypedSigma.type_get" ("_position" T)
###                           ("_position" l)))))
###                   ("_applC" ("_position" P1)
###                     ("_cargs"
###                       ("\<^const>Environments.add"
###                         ("\<^const>Environments.add" ("_position" env)
###                           ("_position" s) ("_position" T))
###                         ("_position" p)
###                         ("_applC" ("_position" param)
###                           ("_applC" ("_position" the)
###                             ("\<^const>TypedSigma.type_get" ("_position" T)
###                               ("_position" l)))))
###                       ("_cargs"
###                         ("\<^const>Sigma.openz" ("_position" t)
###                           ("_applC" ("_position" Fvar) ("_position" s))
###                           ("_applC" ("_position" Fvar) ("_position" p)))
###                         ("_applC" ("_position" return)
###                           ("_applC" ("_position" the)
###                             ("\<^const>TypedSigma.type_get" ("_position" T)
###                               ("_position" l))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P2)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" T) ("_position" l))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" env)
###     ("_idts" ("_position" T)
###       ("_idts" ("_position" l) ("_idts" ("_position" t) ("_position" L)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" ok) ("_position" env)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" finite) ("_position" L)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" s) ("_position" p))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.not_member" ("_position" s)
###                     ("_position" L))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.not_member" ("_position" p)
###                       ("_position" L))
###                     ("\<^const>HOL.not_equal" ("_position" s)
###                       ("_position" p))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>TypedSigma.typing"
###                     ("\<^const>Environments.add"
###                       ("\<^const>Environments.add" ("_position" env)
###                         ("_position" s) ("_position" T))
###                       ("_position" p)
###                       ("_applC" ("_position" param)
###                         ("_applC" ("_position" the)
###                           ("\<^const>TypedSigma.type_get" ("_position" T)
###                             ("_position" l)))))
###                     ("\<^const>Sigma.openz" ("_position" t)
###                       ("_applC" ("_position" Fvar) ("_position" s))
###                       ("_applC" ("_position" Fvar) ("_position" p)))
###                     ("_applC" ("_position" return)
###                       ("_applC" ("_position" the)
###                         ("\<^const>Power.power_class.power" ("_position" T)
###                           ("_position" l)))))
###                   ("_applC" ("_position" P1)
###                     ("_cargs"
###                       ("\<^const>Environments.add"
###                         ("\<^const>Environments.add" ("_position" env)
###                           ("_position" s) ("_position" T))
###                         ("_position" p)
###                         ("_applC" ("_position" param)
###                           ("_applC" ("_position" the)
###                             ("\<^const>Power.power_class.power"
###                               ("_position" T) ("_position" l)))))
###                       ("_cargs"
###                         ("\<^const>Sigma.openz" ("_position" t)
###                           ("_applC" ("_position" Fvar) ("_position" s))
###                           ("_applC" ("_position" Fvar) ("_position" p)))
###                         ("_applC" ("_position" return)
###                           ("_applC" ("_position" the)
###                             ("\<^const>TypedSigma.type_get" ("_position" T)
###                               ("_position" l))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P2)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" T) ("_position" l))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" env)
###     ("_idts" ("_position" T)
###       ("_idts" ("_position" l) ("_idts" ("_position" t) ("_position" L)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" ok) ("_position" env)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" finite) ("_position" L)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" s) ("_position" p))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.not_member" ("_position" s)
###                     ("_position" L))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.not_member" ("_position" p)
###                       ("_position" L))
###                     ("\<^const>HOL.not_equal" ("_position" s)
###                       ("_position" p))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>TypedSigma.typing"
###                     ("\<^const>Environments.add"
###                       ("\<^const>Environments.add" ("_position" env)
###                         ("_position" s) ("_position" T))
###                       ("_position" p)
###                       ("_applC" ("_position" param)
###                         ("_applC" ("_position" the)
###                           ("\<^const>Power.power_class.power"
###                             ("_position" T) ("_position" l)))))
###                     ("\<^const>Sigma.openz" ("_position" t)
###                       ("_applC" ("_position" Fvar) ("_position" s))
###                       ("_applC" ("_position" Fvar) ("_position" p)))
###                     ("_applC" ("_position" return)
###                       ("_applC" ("_position" the)
###                         ("\<^const>Power.power_class.power" ("_position" T)
###                           ("_position" l)))))
###                   ("_applC" ("_position" P1)
###                     ("_cargs"
###                       ("\<^const>Environments.add"
###                         ("\<^const>Environments.add" ("_position" env)
###                           ("_position" s) ("_position" T))
###                         ("_position" p)
###                         ("_applC" ("_position" param)
###                           ("_applC" ("_position" the)
###                             ("\<^const>Power.power_class.power"
###                               ("_position" T) ("_position" l)))))
###                       ("_cargs"
###                         ("\<^const>Sigma.openz" ("_position" t)
###                           ("_applC" ("_position" Fvar) ("_position" s))
###                           ("_applC" ("_position" Fvar) ("_position" p)))
###                         ("_applC" ("_position" return)
###                           ("_applC" ("_position" the)
###                             ("\<^const>TypedSigma.type_get" ("_position" T)
###                               ("_position" l))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P2)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" T) ("_position" l))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" env)
###     ("_idts" ("_position" T)
###       ("_idts" ("_position" l) ("_idts" ("_position" t) ("_position" L)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" ok) ("_position" env)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" finite) ("_position" L)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" s) ("_position" p))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.not_member" ("_position" s)
###                     ("_position" L))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.not_member" ("_position" p)
###                       ("_position" L))
###                     ("\<^const>HOL.not_equal" ("_position" s)
###                       ("_position" p))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>TypedSigma.typing"
###                     ("\<^const>Environments.add"
###                       ("\<^const>Environments.add" ("_position" env)
###                         ("_position" s) ("_position" T))
###                       ("_position" p)
###                       ("_applC" ("_position" param)
###                         ("_applC" ("_position" the)
###                           ("\<^const>TypedSigma.type_get" ("_position" T)
###                             ("_position" l)))))
###                     ("\<^const>Sigma.openz" ("_position" t)
###                       ("_applC" ("_position" Fvar) ("_position" s))
###                       ("_applC" ("_position" Fvar) ("_position" p)))
###                     ("_applC" ("_position" return)
###                       ("_applC" ("_position" the)
###                         ("\<^const>TypedSigma.type_get" ("_position" T)
###                           ("_position" l)))))
###                   ("_applC" ("_position" P1)
###                     ("_cargs"
###                       ("\<^const>Environments.add"
###                         ("\<^const>Environments.add" ("_position" env)
###                           ("_position" s) ("_position" T))
###                         ("_position" p)
###                         ("_applC" ("_position" param)
###                           ("_applC" ("_position" the)
###                             ("\<^const>Power.power_class.power"
###                               ("_position" T) ("_position" l)))))
###                       ("_cargs"
###                         ("\<^const>Sigma.openz" ("_position" t)
###                           ("_applC" ("_position" Fvar) ("_position" s))
###                           ("_applC" ("_position" Fvar) ("_position" p)))
###                         ("_applC" ("_position" return)
###                           ("_applC" ("_position" the)
###                             ("\<^const>TypedSigma.type_get" ("_position" T)
###                               ("_position" l))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P2)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" T) ("_position" l))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" env)
###     ("_idts" ("_position" T)
###       ("_idts" ("_position" l) ("_idts" ("_position" t) ("_position" L)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" ok) ("_position" env)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" finite) ("_position" L)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" s) ("_position" p))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.not_member" ("_position" s)
###                     ("_position" L))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.not_member" ("_position" p)
###                       ("_position" L))
###                     ("\<^const>HOL.not_equal" ("_position" s)
###                       ("_position" p))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>TypedSigma.typing"
###                     ("\<^const>Environments.add"
###                       ("\<^const>Environments.add" ("_position" env)
###                         ("_position" s) ("_position" T))
###                       ("_position" p)
###                       ("_applC" ("_position" param)
###                         ("_applC" ("_position" the)
###                           ("\<^const>Power.power_class.power"
###                             ("_position" T) ("_position" l)))))
###                     ("\<^const>Sigma.openz" ("_position" t)
###                       ("_applC" ("_position" Fvar) ("_position" s))
###                       ("_applC" ("_position" Fvar) ("_position" p)))
###                     ("_applC" ("_position" return)
###                       ("_applC" ("_position" the)
###                         ("\<^const>TypedSigma.type_get" ("_position" T)
###                           ("_position" l)))))
###                   ("_applC" ("_position" P1)
###                     ("_cargs"
###                       ("\<^const>Environments.add"
###                         ("\<^const>Environments.add" ("_position" env)
###                           ("_position" s) ("_position" T))
###                         ("_position" p)
###                         ("_applC" ("_position" param)
###                           ("_applC" ("_position" the)
###                             ("\<^const>Power.power_class.power"
###                               ("_position" T) ("_position" l)))))
###                       ("_cargs"
###                         ("\<^const>Sigma.openz" ("_position" t)
###                           ("_applC" ("_position" Fvar) ("_position" s))
###                           ("_applC" ("_position" Fvar) ("_position" p)))
###                         ("_applC" ("_position" return)
###                           ("_applC" ("_position" the)
###                             ("\<^const>TypedSigma.type_get" ("_position" T)
###                               ("_position" l))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P2)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" T) ("_position" l))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" env)
###     ("_idts" ("_position" T)
###       ("_idts" ("_position" l) ("_idts" ("_position" t) ("_position" L)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" ok) ("_position" env)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" finite) ("_position" L)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" s) ("_position" p))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.not_member" ("_position" s)
###                     ("_position" L))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.not_member" ("_position" p)
###                       ("_position" L))
###                     ("\<^const>HOL.not_equal" ("_position" s)
###                       ("_position" p))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>TypedSigma.typing"
###                     ("\<^const>Environments.add"
###                       ("\<^const>Environments.add" ("_position" env)
###                         ("_position" s) ("_position" T))
###                       ("_position" p)
###                       ("_applC" ("_position" param)
###                         ("_applC" ("_position" the)
###                           ("\<^const>TypedSigma.type_get" ("_position" T)
###                             ("_position" l)))))
###                     ("\<^const>Sigma.openz" ("_position" t)
###                       ("_applC" ("_position" Fvar) ("_position" s))
###                       ("_applC" ("_position" Fvar) ("_position" p)))
###                     ("_applC" ("_position" return)
###                       ("_applC" ("_position" the)
###                         ("\<^const>Power.power_class.power" ("_position" T)
###                           ("_position" l)))))
###                   ("_applC" ("_position" P1)
###                     ("_cargs"
###                       ("\<^const>Environments.add"
###                         ("\<^const>Environments.add" ("_position" env)
###                           ("_position" s) ("_position" T))
###                         ("_position" p)
###                         ("_applC" ("_position" param)
###                           ("_applC" ("_position" the)
###                             ("\<^const>TypedSigma.type_get" ("_position" T)
###                               ("_position" l)))))
###                       ("_cargs"
###                         ("\<^const>Sigma.openz" ("_position" t)
###                           ("_applC" ("_position" Fvar) ("_position" s))
###                           ("_applC" ("_position" Fvar) ("_position" p)))
###                         ("_applC" ("_position" return)
###                           ("_applC" ("_position" the)
###                             ("\<^const>Power.power_class.power"
###                               ("_position" T) ("_position" l))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P2)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" T) ("_position" l))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" env)
###     ("_idts" ("_position" T)
###       ("_idts" ("_position" l) ("_idts" ("_position" t) ("_position" L)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" ok) ("_position" env)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" finite) ("_position" L)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" s) ("_position" p))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.not_member" ("_position" s)
###                     ("_position" L))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.not_member" ("_position" p)
###                       ("_position" L))
###                     ("\<^const>HOL.not_equal" ("_position" s)
###                       ("_position" p))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>TypedSigma.typing"
###                     ("\<^const>Environments.add"
###                       ("\<^const>Environments.add" ("_position" env)
###                         ("_position" s) ("_position" T))
###                       ("_position" p)
###                       ("_applC" ("_position" param)
###                         ("_applC" ("_position" the)
###                           ("\<^const>Power.power_class.power"
###                             ("_position" T) ("_position" l)))))
###                     ("\<^const>Sigma.openz" ("_position" t)
###                       ("_applC" ("_position" Fvar) ("_position" s))
###                       ("_applC" ("_position" Fvar) ("_position" p)))
###                     ("_applC" ("_position" return)
###                       ("_applC" ("_position" the)
###                         ("\<^const>Power.power_class.power" ("_position" T)
###                           ("_position" l)))))
###                   ("_applC" ("_position" P1)
###                     ("_cargs"
###                       ("\<^const>Environments.add"
###                         ("\<^const>Environments.add" ("_position" env)
###                           ("_position" s) ("_position" T))
###                         ("_position" p)
###                         ("_applC" ("_position" param)
###                           ("_applC" ("_position" the)
###                             ("\<^const>TypedSigma.type_get" ("_position" T)
###                               ("_position" l)))))
###                       ("_cargs"
###                         ("\<^const>Sigma.openz" ("_position" t)
###                           ("_applC" ("_position" Fvar) ("_position" s))
###                           ("_applC" ("_position" Fvar) ("_position" p)))
###                         ("_applC" ("_position" return)
###                           ("_applC" ("_position" the)
###                             ("\<^const>Power.power_class.power"
###                               ("_position" T) ("_position" l))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P2)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" T) ("_position" l))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 188 of "$AFP/Locally-Nameless-Sigma/Sigma/TypedSigma.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" sa) ("_position" pa))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" sa) ("_position" F))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" pa) ("_position" F))
###           ("\<^const>HOL.not_equal" ("_position" sa) ("_position" pa))))
###       ("\<^const>HOL.conj"
###         ("\<^const>TypedSigma.typing"
###           ("\<^const>Environments.add"
###             ("\<^const>Environments.add" ("_position" env) ("_position" sa)
###               ("_position" T))
###             ("_position" pa)
###             ("_applC" ("_position" param)
###               ("_applC" ("_position" the)
###                 ("\<^const>Power.power_class.power" ("_position" T)
###                   ("_position" l)))))
###           ("\<^const>Sigma.openz" ("_position" t)
###             ("_applC" ("_position" Fvar) ("_position" sa))
###             ("_applC" ("_position" Fvar) ("_position" pa)))
###           ("_applC" ("_position" return)
###             ("_applC" ("_position" the)
###               ("\<^const>TypedSigma.type_get" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" env'')
###             ("_idts" ("_position" t'')
###               ("_idts" ("_position" s')
###                 ("_idts" ("_position" p')
###                   ("_idts" ("_position" x')
###                     ("_idts" ("_position" y')
###                       ("_idts" ("_position" A')
###                         ("_idts" ("_position" B') ("_position" n')))))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.not_member" ("_position" s')
###               ("_applC" ("_position" FV) ("_position" t'')))
###             ("\<^const>HOL.implies"
###               ("\<^const>Set.not_member" ("_position" p')
###                 ("_applC" ("_position" FV) ("_position" t'')))
###               ("\<^const>HOL.implies"
###                 ("\<^const>Set.not_member" ("_position" x')
###                   ("_applC" ("_position" FV) ("_position" t'')))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>Set.not_member" ("_position" y')
###                     ("_applC" ("_position" FV) ("_position" t'')))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>Set.not_member" ("_position" x')
###                       ("_applC" ("_position" env_dom) ("_position" env'')))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>Set.not_member" ("_position" y')
###                         ("_applC" ("_position" env_dom)
###                           ("_position" env'')))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.not_equal" ("_position" x')
###                           ("_position" y'))
###                         ("\<^const>HOL.implies"
###                           ("\<^const>HOL.not_equal" ("_position" s')
###                             ("_position" p'))
###                           ("\<^const>HOL.implies"
###                             ("\<^const>HOL.eq"
###                               ("\<^const>Sigma.openz" ("_position" t)
###                                 ("_applC" ("_position" Fvar)
###                                   ("_position" sa))
###                                 ("_applC" ("_position" Fvar)
###                                   ("_position" pa)))
###                               ("\<^const>Sigma.sopen" ("_position" n')
###                                 ("_applC" ("_position" Fvar)
###                                   ("_position" s'))
###                                 ("_applC" ("_position" Fvar)
###                                   ("_position" p'))
###                                 ("_position" t'')))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq"
###                                 ("\<^const>Environments.add"
###                                   ("\<^const>Environments.add"
###                                     ("_position" env) ("_position" sa)
###                                     ("_position" T))
###                                   ("_position" pa)
###                                   ("_applC" ("_position" param)
###                                     ("_applC" ("_position" the)
### ("\<^const>TypedSigma.type_get" ("_position" T) ("_position" l)))))
###                                 ("\<^const>Environments.add"
###                                   ("\<^const>Environments.add"
###                                     ("_position" env'') ("_position" s')
###                                     ("_position" A'))
###                                   ("_position" p') ("_position" B')))
###                               ("\<^const>TypedSigma.typing"
###                                 ("\<^const>Environments.add"
###                                   ("\<^const>Environments.add"
###                                     ("_position" env'') ("_position" x')
###                                     ("_position" A'))
###                                   ("_position" y') ("_position" B'))
###                                 ("\<^const>Sigma.sopen" ("_position" n')
###                                   ("_applC" ("_position" Fvar)
###                                     ("_position" x'))
###                                   ("_applC" ("_position" Fvar)
###                                     ("_position" y'))
###                                   ("_position" t''))
###                                 ("_applC" ("_position" return)
###                                   ("_applC" ("_position" the)
###                                     ("\<^const>Power.power_class.power"
### ("_position" T) ("_position" l))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" sa) ("_position" pa))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" sa) ("_position" F))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" pa) ("_position" F))
###           ("\<^const>HOL.not_equal" ("_position" sa) ("_position" pa))))
###       ("\<^const>HOL.conj"
###         ("\<^const>TypedSigma.typing"
###           ("\<^const>Environments.add"
###             ("\<^const>Environments.add" ("_position" env) ("_position" sa)
###               ("_position" T))
###             ("_position" pa)
###             ("_applC" ("_position" param)
###               ("_applC" ("_position" the)
###                 ("\<^const>TypedSigma.type_get" ("_position" T)
###                   ("_position" l)))))
###           ("\<^const>Sigma.openz" ("_position" t)
###             ("_applC" ("_position" Fvar) ("_position" sa))
###             ("_applC" ("_position" Fvar) ("_position" pa)))
###           ("_applC" ("_position" return)
###             ("_applC" ("_position" the)
###               ("\<^const>TypedSigma.type_get" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" env'')
###             ("_idts" ("_position" t'')
###               ("_idts" ("_position" s')
###                 ("_idts" ("_position" p')
###                   ("_idts" ("_position" x')
###                     ("_idts" ("_position" y')
###                       ("_idts" ("_position" A')
###                         ("_idts" ("_position" B') ("_position" n')))))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.not_member" ("_position" s')
###               ("_applC" ("_position" FV) ("_position" t'')))
###             ("\<^const>HOL.implies"
###               ("\<^const>Set.not_member" ("_position" p')
###                 ("_applC" ("_position" FV) ("_position" t'')))
###               ("\<^const>HOL.implies"
###                 ("\<^const>Set.not_member" ("_position" x')
###                   ("_applC" ("_position" FV) ("_position" t'')))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>Set.not_member" ("_position" y')
###                     ("_applC" ("_position" FV) ("_position" t'')))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>Set.not_member" ("_position" x')
###                       ("_applC" ("_position" env_dom) ("_position" env'')))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>Set.not_member" ("_position" y')
###                         ("_applC" ("_position" env_dom)
###                           ("_position" env'')))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.not_equal" ("_position" x')
###                           ("_position" y'))
###                         ("\<^const>HOL.implies"
###                           ("\<^const>HOL.not_equal" ("_position" s')
###                             ("_position" p'))
###                           ("\<^const>HOL.implies"
###                             ("\<^const>HOL.eq"
###                               ("\<^const>Sigma.openz" ("_position" t)
###                                 ("_applC" ("_position" Fvar)
###                                   ("_position" sa))
###                                 ("_applC" ("_position" Fvar)
###                                   ("_position" pa)))
###                               ("\<^const>Sigma.sopen" ("_position" n')
###                                 ("_applC" ("_position" Fvar)
###                                   ("_position" s'))
###                                 ("_applC" ("_position" Fvar)
###                                   ("_position" p'))
###                                 ("_position" t'')))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq"
###                                 ("\<^const>Environments.add"
###                                   ("\<^const>Environments.add"
###                                     ("_position" env) ("_position" sa)
###                                     ("_position" T))
###                                   ("_position" pa)
###                                   ("_applC" ("_position" param)
###                                     ("_applC" ("_position" the)
### ("\<^const>TypedSigma.type_get" ("_position" T) ("_position" l)))))
###                                 ("\<^const>Environments.add"
###                                   ("\<^const>Environments.add"
###                                     ("_position" env'') ("_position" s')
###                                     ("_position" A'))
###                                   ("_position" p') ("_position" B')))
###                               ("\<^const>TypedSigma.typing"
###                                 ("\<^const>Environments.add"
###                                   ("\<^const>Environments.add"
###                                     ("_position" env'') ("_position" x')
###                                     ("_position" A'))
###                                   ("_position" y') ("_position" B'))
###                                 ("\<^const>Sigma.sopen" ("_position" n')
###                                   ("_applC" ("_position" Fvar)
###                                     ("_position" x'))
###                                   ("_applC" ("_position" Fvar)
###                                     ("_position" y'))
###                                   ("_position" t''))
###                                 ("_applC" ("_position" return)
###                                   ("_applC" ("_position" the)
###                                     ("\<^const>Power.power_class.power"
### ("_position" T) ("_position" l))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" sa) ("_position" pa))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" sa) ("_position" F))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" pa) ("_position" F))
###           ("\<^const>HOL.not_equal" ("_position" sa) ("_position" pa))))
###       ("\<^const>HOL.conj"
###         ("\<^const>TypedSigma.typing"
###           ("\<^const>Environments.add"
###             ("\<^const>Environments.add" ("_position" env) ("_position" sa)
###               ("_position" T))
###             ("_position" pa)
###             ("_applC" ("_position" param)
###               ("_applC" ("_position" the)
###                 ("\<^const>Power.power_class.power" ("_position" T)
###                   ("_position" l)))))
###           ("\<^const>Sigma.openz" ("_position" t)
###             ("_applC" ("_position" Fvar) ("_position" sa))
###             ("_applC" ("_position" Fvar) ("_position" pa)))
###           ("_applC" ("_position" return)
###             ("_applC" ("_position" the)
###               ("\<^const>Power.power_class.power" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" env'')
###             ("_idts" ("_position" t'')
###               ("_idts" ("_position" s')
###                 ("_idts" ("_position" p')
###                   ("_idts" ("_position" x')
###                     ("_idts" ("_position" y')
###                       ("_idts" ("_position" A')
###                         ("_idts" ("_position" B') ("_position" n')))))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.not_member" ("_position" s')
###               ("_applC" ("_position" FV) ("_position" t'')))
###             ("\<^const>HOL.implies"
###               ("\<^const>Set.not_member" ("_position" p')
###                 ("_applC" ("_position" FV) ("_position" t'')))
###               ("\<^const>HOL.implies"
###                 ("\<^const>Set.not_member" ("_position" x')
###                   ("_applC" ("_position" FV) ("_position" t'')))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>Set.not_member" ("_position" y')
###                     ("_applC" ("_position" FV) ("_position" t'')))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>Set.not_member" ("_position" x')
###                       ("_applC" ("_position" env_dom) ("_position" env'')))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>Set.not_member" ("_position" y')
###                         ("_applC" ("_position" env_dom)
###                           ("_position" env'')))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.not_equal" ("_position" x')
###                           ("_position" y'))
###                         ("\<^const>HOL.implies"
###                           ("\<^const>HOL.not_equal" ("_position" s')
###                             ("_position" p'))
###                           ("\<^const>HOL.implies"
###                             ("\<^const>HOL.eq"
###                               ("\<^const>Sigma.openz" ("_position" t)
###                                 ("_applC" ("_position" Fvar)
###                                   ("_position" sa))
###                                 ("_applC" ("_position" Fvar)
###                                   ("_position" pa)))
###                               ("\<^const>Sigma.sopen" ("_position" n')
###                                 ("_applC" ("_position" Fvar)
###                                   ("_position" s'))
###                                 ("_applC" ("_position" Fvar)
###                                   ("_position" p'))
###                                 ("_position" t'')))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq"
###                                 ("\<^const>Environments.add"
###                                   ("\<^const>Environments.add"
###                                     ("_position" env) ("_position" sa)
###                                     ("_position" T))
###                                   ("_position" pa)
###                                   ("_applC" ("_position" param)
###                                     ("_applC" ("_position" the)
### ("\<^const>TypedSigma.type_get" ("_position" T) ("_position" l)))))
###                                 ("\<^const>Environments.add"
###                                   ("\<^const>Environments.add"
###                                     ("_position" env'') ("_position" s')
###                                     ("_position" A'))
###                                   ("_position" p') ("_position" B')))
###                               ("\<^const>TypedSigma.typing"
###                                 ("\<^const>Environments.add"
###                                   ("\<^const>Environments.add"
###                                     ("_position" env'') ("_position" x')
###                                     ("_position" A'))
###                                   ("_position" y') ("_position" B'))
###                                 ("\<^const>Sigma.sopen" ("_position" n')
###                                   ("_applC" ("_position" Fvar)
###                                     ("_position" x'))
###                                   ("_applC" ("_position" Fvar)
###                                     ("_position" y'))
###                                   ("_position" t''))
###                                 ("_applC" ("_position" return)
###                                   ("_applC" ("_position" the)
###                                     ("\<^const>Power.power_class.power"
### ("_position" T) ("_position" l))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" sa) ("_position" pa))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" sa) ("_position" F))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" pa) ("_position" F))
###           ("\<^const>HOL.not_equal" ("_position" sa) ("_position" pa))))
###       ("\<^const>HOL.conj"
###         ("\<^const>TypedSigma.typing"
###           ("\<^const>Environments.add"
###             ("\<^const>Environments.add" ("_position" env) ("_position" sa)
###               ("_position" T))
###             ("_position" pa)
###             ("_applC" ("_position" param)
###               ("_applC" ("_position" the)
###                 ("\<^const>TypedSigma.type_get" ("_position" T)
###                   ("_position" l)))))
###           ("\<^const>Sigma.openz" ("_position" t)
###             ("_applC" ("_position" Fvar) ("_position" sa))
###             ("_applC" ("_position" Fvar) ("_position" pa)))
###           ("_applC" ("_position" return)
###             ("_applC" ("_position" the)
###               ("\<^const>Power.power_class.power" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" env'')
###             ("_idts" ("_position" t'')
###               ("_idts" ("_position" s')
###                 ("_idts" ("_position" p')
###                   ("_idts" ("_position" x')
###                     ("_idts" ("_position" y')
###                       ("_idts" ("_position" A')
###                         ("_idts" ("_position" B') ("_position" n')))))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.not_member" ("_position" s')
###               ("_applC" ("_position" FV) ("_position" t'')))
###             ("\<^const>HOL.implies"
###               ("\<^const>Set.not_member" ("_position" p')
###                 ("_applC" ("_position" FV) ("_position" t'')))
###               ("\<^const>HOL.implies"
###                 ("\<^const>Set.not_member" ("_position" x')
###                   ("_applC" ("_position" FV) ("_position" t'')))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>Set.not_member" ("_position" y')
###                     ("_applC" ("_position" FV) ("_position" t'')))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>Set.not_member" ("_position" x')
###                       ("_applC" ("_position" env_dom) ("_position" env'')))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>Set.not_member" ("_position" y')
###                         ("_applC" ("_position" env_dom)
###                           ("_position" env'')))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.not_equal" ("_position" x')
###                           ("_position" y'))
###                         ("\<^const>HOL.implies"
###                           ("\<^const>HOL.not_equal" ("_position" s')
###                             ("_position" p'))
###                           ("\<^const>HOL.implies"
###                             ("\<^const>HOL.eq"
###                               ("\<^const>Sigma.openz" ("_position" t)
###                                 ("_applC" ("_position" Fvar)
###                                   ("_position" sa))
###                                 ("_applC" ("_position" Fvar)
###                                   ("_position" pa)))
###                               ("\<^const>Sigma.sopen" ("_position" n')
###                                 ("_applC" ("_position" Fvar)
###                                   ("_position" s'))
###                                 ("_applC" ("_position" Fvar)
###                                   ("_position" p'))
###                                 ("_position" t'')))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq"
###                                 ("\<^const>Environments.add"
###                                   ("\<^const>Environments.add"
###                                     ("_position" env) ("_position" sa)
###                                     ("_position" T))
###                                   ("_position" pa)
###                                   ("_applC" ("_position" param)
###                                     ("_applC" ("_position" the)
### ("\<^const>TypedSigma.type_get" ("_position" T) ("_position" l)))))
###                                 ("\<^const>Environments.add"
###                                   ("\<^const>Environments.add"
###                                     ("_position" env'') ("_position" s')
###                                     ("_position" A'))
###                                   ("_position" p') ("_position" B')))
###                               ("\<^const>TypedSigma.typing"
###                                 ("\<^const>Environments.add"
###                                   ("\<^const>Environments.add"
###                                     ("_position" env'') ("_position" x')
###                                     ("_position" A'))
###                                   ("_position" y') ("_position" B'))
###                                 ("\<^const>Sigma.sopen" ("_position" n')
###                                   ("_applC" ("_position" Fvar)
###                                     ("_position" x'))
###                                   ("_applC" ("_position" Fvar)
###                                     ("_position" y'))
###                                   ("_position" t''))
###                                 ("_applC" ("_position" return)
###                                   ("_applC" ("_position" the)
###                                     ("\<^const>Power.power_class.power"
### ("_position" T) ("_position" l))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" sa) ("_position" pa))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" sa) ("_position" F))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" pa) ("_position" F))
###           ("\<^const>HOL.not_equal" ("_position" sa) ("_position" pa))))
###       ("\<^const>HOL.conj"
###         ("\<^const>TypedSigma.typing"
###           ("\<^const>Environments.add"
###             ("\<^const>Environments.add" ("_position" env) ("_position" sa)
###               ("_position" T))
###             ("_position" pa)
###             ("_applC" ("_position" param)
###               ("_applC" ("_position" the)
###                 ("\<^const>Power.power_class.power" ("_position" T)
###                   ("_position" l)))))
###           ("\<^const>Sigma.openz" ("_position" t)
###             ("_applC" ("_position" Fvar) ("_position" sa))
###             ("_applC" ("_position" Fvar) ("_position" pa)))
###           ("_applC" ("_position" return)
###             ("_applC" ("_position" the)
###               ("\<^const>TypedSigma.type_get" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" env'')
###             ("_idts" ("_position" t'')
###               ("_idts" ("_position" s')
###                 ("_idts" ("_position" p')
###                   ("_idts" ("_position" x')
###                     ("_idts" ("_position" y')
###                       ("_idts" ("_position" A')
###                         ("_idts" ("_position" B') ("_position" n')))))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.not_member" ("_position" s')
###               ("_applC" ("_position" FV) ("_position" t'')))
###             ("\<^const>HOL.implies"
###               ("\<^const>Set.not_member" ("_position" p')
###                 ("_applC" ("_position" FV) ("_position" t'')))
###               ("\<^const>HOL.implies"
###                 ("\<^const>Set.not_member" ("_position" x')
###                   ("_applC" ("_position" FV) ("_position" t'')))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>Set.not_member" ("_position" y')
###                     ("_applC" ("_position" FV) ("_position" t'')))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>Set.not_member" ("_position" x')
###                       ("_applC" ("_position" env_dom) ("_position" env'')))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>Set.not_member" ("_position" y')
###                         ("_applC" ("_position" env_dom)
###                           ("_position" env'')))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.not_equal" ("_position" x')
###                           ("_position" y'))
###                         ("\<^const>HOL.implies"
###                           ("\<^const>HOL.not_equal" ("_position" s')
###                             ("_position" p'))
###                           ("\<^const>HOL.implies"
###                             ("\<^const>HOL.eq"
###                               ("\<^const>Sigma.openz" ("_position" t)
###                                 ("_applC" ("_position" Fvar)
###                                   ("_position" sa))
###                                 ("_applC" ("_position" Fvar)
###                                   ("_position" pa)))
###                               ("\<^const>Sigma.sopen" ("_position" n')
###                                 ("_applC" ("_position" Fvar)
###                                   ("_position" s'))
###                                 ("_applC" ("_position" Fvar)
###                                   ("_position" p'))
###                                 ("_position" t'')))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq"
###                                 ("\<^const>Environments.add"
###                                   ("\<^const>Environments.add"
###                                     ("_position" env) ("_position" sa)
###                                     ("_position" T))
###                                   ("_position" pa)
###                                   ("_applC" ("_position" param)
###                                     ("_applC" ("_position" the)
### ("\<^const>Power.power_class.power" ("_position" T) ("_position" l)))))
###                                 ("\<^const>Environments.add"
###                                   ("\<^const>Environments.add"
###                                     ("_position" env'') ("_position" s')
###                                     ("_position" A'))
###                                   ("_position" p') ("_position" B')))
###                               ("\<^const>TypedSigma.typing"
###                                 ("\<^const>Environments.add"
###                                   ("\<^const>Environments.add"
###                                     ("_position" env'') ("_position" x')
###                                     ("_position" A'))
###                                   ("_position" y') ("_position" B'))
###                                 ("\<^const>Sigma.sopen" ("_position" n')
###                                   ("_applC" ("_position" Fvar)
###                                     ("_position" x'))
###                                   ("_applC" ("_position" Fvar)
###                                     ("_position" y'))
###                                   ("_position" t''))
###                                 ("_applC" ("_position" return)
###                                   ("_applC" ("_position" the)
###                                     ("\<^const>Power.power_class.power"
### ("_position" T) ("_position" l))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" sa) ("_position" pa))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" sa) ("_position" F))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" pa) ("_position" F))
###           ("\<^const>HOL.not_equal" ("_position" sa) ("_position" pa))))
###       ("\<^const>HOL.conj"
###         ("\<^const>TypedSigma.typing"
###           ("\<^const>Environments.add"
###             ("\<^const>Environments.add" ("_position" env) ("_position" sa)
###               ("_position" T))
###             ("_position" pa)
###             ("_applC" ("_position" param)
###               ("_applC" ("_position" the)
###                 ("\<^const>TypedSigma.type_get" ("_position" T)
###                   ("_position" l)))))
###           ("\<^const>Sigma.openz" ("_position" t)
###             ("_applC" ("_position" Fvar) ("_position" sa))
###             ("_applC" ("_position" Fvar) ("_position" pa)))
###           ("_applC" ("_position" return)
###             ("_applC" ("_position" the)
###               ("\<^const>TypedSigma.type_get" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" env'')
###             ("_idts" ("_position" t'')
###               ("_idts" ("_position" s')
###                 ("_idts" ("_position" p')
###                   ("_idts" ("_position" x')
###                     ("_idts" ("_position" y')
###                       ("_idts" ("_position" A')
###                         ("_idts" ("_position" B') ("_position" n')))))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.not_member" ("_position" s')
###               ("_applC" ("_position" FV) ("_position" t'')))
###             ("\<^const>HOL.implies"
###               ("\<^const>Set.not_member" ("_position" p')
###                 ("_applC" ("_position" FV) ("_position" t'')))
###               ("\<^const>HOL.implies"
###                 ("\<^const>Set.not_member" ("_position" x')
###                   ("_applC" ("_position" FV) ("_position" t'')))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>Set.not_member" ("_position" y')
###                     ("_applC" ("_position" FV) ("_position" t'')))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>Set.not_member" ("_position" x')
###                       ("_applC" ("_position" env_dom) ("_position" env'')))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>Set.not_member" ("_position" y')
###                         ("_applC" ("_position" env_dom)
###                           ("_position" env'')))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.not_equal" ("_position" x')
###                           ("_position" y'))
###                         ("\<^const>HOL.implies"
###                           ("\<^const>HOL.not_equal" ("_position" s')
###                             ("_position" p'))
###                           ("\<^const>HOL.implies"
###                             ("\<^const>HOL.eq"
###                               ("\<^const>Sigma.openz" ("_position" t)
###                                 ("_applC" ("_position" Fvar)
###                                   ("_position" sa))
###                                 ("_applC" ("_position" Fvar)
###                                   ("_position" pa)))
###                               ("\<^const>Sigma.sopen" ("_position" n')
###                                 ("_applC" ("_position" Fvar)
###                                   ("_position" s'))
###                                 ("_applC" ("_position" Fvar)
###                                   ("_position" p'))
###                                 ("_position" t'')))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq"
###                                 ("\<^const>Environments.add"
###                                   ("\<^const>Environments.add"
###                                     ("_position" env) ("_position" sa)
###                                     ("_position" T))
###                                   ("_position" pa)
###                                   ("_applC" ("_position" param)
###                                     ("_applC" ("_position" the)
### ("\<^const>Power.power_class.power" ("_position" T) ("_position" l)))))
###                                 ("\<^const>Environments.add"
###                                   ("\<^const>Environments.add"
###                                     ("_position" env'') ("_position" s')
###                                     ("_position" A'))
###                                   ("_position" p') ("_position" B')))
###                               ("\<^const>TypedSigma.typing"
###                                 ("\<^const>Environments.add"
###                                   ("\<^const>Environments.add"
###                                     ("_position" env'') ("_position" x')
###                                     ("_position" A'))
###                                   ("_position" y') ("_position" B'))
###                                 ("\<^const>Sigma.sopen" ("_position" n')
###                                   ("_applC" ("_position" Fvar)
###                                     ("_position" x'))
###                                   ("_applC" ("_position" Fvar)
###                                     ("_position" y'))
###                                   ("_position" t''))
###                                 ("_applC" ("_position" return)
###                                   ("_applC" ("_position" the)
###                                     ("\<^const>Power.power_class.power"
### ("_position" T) ("_position" l))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" sa) ("_position" pa))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" sa) ("_position" F))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" pa) ("_position" F))
###           ("\<^const>HOL.not_equal" ("_position" sa) ("_position" pa))))
###       ("\<^const>HOL.conj"
###         ("\<^const>TypedSigma.typing"
###           ("\<^const>Environments.add"
###             ("\<^const>Environments.add" ("_position" env) ("_position" sa)
###               ("_position" T))
###             ("_position" pa)
###             ("_applC" ("_position" param)
###               ("_applC" ("_position" the)
###                 ("\<^const>Power.power_class.power" ("_position" T)
###                   ("_position" l)))))
###           ("\<^const>Sigma.openz" ("_position" t)
###             ("_applC" ("_position" Fvar) ("_position" sa))
###             ("_applC" ("_position" Fvar) ("_position" pa)))
###           ("_applC" ("_position" return)
###             ("_applC" ("_position" the)
###               ("\<^const>Power.power_class.power" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" env'')
###             ("_idts" ("_position" t'')
###               ("_idts" ("_position" s')
###                 ("_idts" ("_position" p')
###                   ("_idts" ("_position" x')
###                     ("_idts" ("_position" y')
###                       ("_idts" ("_position" A')
###                         ("_idts" ("_position" B') ("_position" n')))))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.not_member" ("_position" s')
###               ("_applC" ("_position" FV) ("_position" t'')))
###             ("\<^const>HOL.implies"
###               ("\<^const>Set.not_member" ("_position" p')
###                 ("_applC" ("_position" FV) ("_position" t'')))
###               ("\<^const>HOL.implies"
###                 ("\<^const>Set.not_member" ("_position" x')
###                   ("_applC" ("_position" FV) ("_position" t'')))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>Set.not_member" ("_position" y')
###                     ("_applC" ("_position" FV) ("_position" t'')))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>Set.not_member" ("_position" x')
###                       ("_applC" ("_position" env_dom) ("_position" env'')))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>Set.not_member" ("_position" y')
###                         ("_applC" ("_position" env_dom)
###                           ("_position" env'')))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.not_equal" ("_position" x')
###                           ("_position" y'))
###                         ("\<^const>HOL.implies"
###                           ("\<^const>HOL.not_equal" ("_position" s')
###                             ("_position" p'))
###                           ("\<^const>HOL.implies"
###                             ("\<^const>HOL.eq"
###                               ("\<^const>Sigma.openz" ("_position" t)
###                                 ("_applC" ("_position" Fvar)
###                                   ("_position" sa))
###                                 ("_applC" ("_position" Fvar)
###                                   ("_position" pa)))
###                               ("\<^const>Sigma.sopen" ("_position" n')
###                                 ("_applC" ("_position" Fvar)
###                                   ("_position" s'))
###                                 ("_applC" ("_position" Fvar)
###                                   ("_position" p'))
###                                 ("_position" t'')))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq"
###                                 ("\<^const>Environments.add"
###                                   ("\<^const>Environments.add"
###                                     ("_position" env) ("_position" sa)
###                                     ("_position" T))
###                                   ("_position" pa)
###                                   ("_applC" ("_position" param)
###                                     ("_applC" ("_position" the)
### ("\<^const>Power.power_class.power" ("_position" T) ("_position" l)))))
###                                 ("\<^const>Environments.add"
###                                   ("\<^const>Environments.add"
###                                     ("_position" env'') ("_position" s')
###                                     ("_position" A'))
###                                   ("_position" p') ("_position" B')))
###                               ("\<^const>TypedSigma.typing"
###                                 ("\<^const>Environments.add"
###                                   ("\<^const>Environments.add"
###                                     ("_position" env'') ("_position" x')
###                                     ("_position" A'))
###                                   ("_position" y') ("_position" B'))
###                                 ("\<^const>Sigma.sopen" ("_position" n')
###                                   ("_applC" ("_position" Fvar)
###                                     ("_position" x'))
###                                   ("_applC" ("_position" Fvar)
###                                     ("_position" y'))
###                                   ("_position" t''))
###                                 ("_applC" ("_position" return)
###                                   ("_applC" ("_position" the)
###                                     ("\<^const>Power.power_class.power"
### ("_position" T) ("_position" l))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" sa) ("_position" pa))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" sa) ("_position" F))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" pa) ("_position" F))
###           ("\<^const>HOL.not_equal" ("_position" sa) ("_position" pa))))
###       ("\<^const>HOL.conj"
###         ("\<^const>TypedSigma.typing"
###           ("\<^const>Environments.add"
###             ("\<^const>Environments.add" ("_position" env) ("_position" sa)
###               ("_position" T))
###             ("_position" pa)
###             ("_applC" ("_position" param)
###               ("_applC" ("_position" the)
###                 ("\<^const>TypedSigma.type_get" ("_position" T)
###                   ("_position" l)))))
###           ("\<^const>Sigma.openz" ("_position" t)
###             ("_applC" ("_position" Fvar) ("_position" sa))
###             ("_applC" ("_position" Fvar) ("_position" pa)))
###           ("_applC" ("_position" return)
###             ("_applC" ("_position" the)
###               ("\<^const>Power.power_class.power" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" env'')
###             ("_idts" ("_position" t'')
###               ("_idts" ("_position" s')
###                 ("_idts" ("_position" p')
###                   ("_idts" ("_position" x')
###                     ("_idts" ("_position" y')
###                       ("_idts" ("_position" A')
###                         ("_idts" ("_position" B') ("_position" n')))))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.not_member" ("_position" s')
###               ("_applC" ("_position" FV) ("_position" t'')))
###             ("\<^const>HOL.implies"
###               ("\<^const>Set.not_member" ("_position" p')
###                 ("_applC" ("_position" FV) ("_position" t'')))
###               ("\<^const>HOL.implies"
###                 ("\<^const>Set.not_member" ("_position" x')
###                   ("_applC" ("_position" FV) ("_position" t'')))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>Set.not_member" ("_position" y')
###                     ("_applC" ("_position" FV) ("_position" t'')))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>Set.not_member" ("_position" x')
###                       ("_applC" ("_position" env_dom) ("_position" env'')))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>Set.not_member" ("_position" y')
###                         ("_applC" ("_position" env_dom)
###                           ("_position" env'')))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.not_equal" ("_position" x')
###                           ("_position" y'))
###                         ("\<^const>HOL.implies"
###                           ("\<^const>HOL.not_equal" ("_position" s')
###                             ("_position" p'))
###                           ("\<^const>HOL.implies"
###                             ("\<^const>HOL.eq"
###                               ("\<^const>Sigma.openz" ("_position" t)
###                                 ("_applC" ("_position" Fvar)
###                                   ("_position" sa))
###                                 ("_applC" ("_position" Fvar)
###                                   ("_position" pa)))
###                               ("\<^const>Sigma.sopen" ("_position" n')
###                                 ("_applC" ("_position" Fvar)
###                                   ("_position" s'))
###                                 ("_applC" ("_position" Fvar)
###                                   ("_position" p'))
###                                 ("_position" t'')))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq"
###                                 ("\<^const>Environments.add"
###                                   ("\<^const>Environments.add"
###                                     ("_position" env) ("_position" sa)
###                                     ("_position" T))
###                                   ("_position" pa)
###                                   ("_applC" ("_position" param)
###                                     ("_applC" ("_position" the)
### ("\<^const>Power.power_class.power" ("_position" T) ("_position" l)))))
###                                 ("\<^const>Environments.add"
###                                   ("\<^const>Environments.add"
###                                     ("_position" env'') ("_position" s')
###                                     ("_position" A'))
###                                   ("_position" p') ("_position" B')))
###                               ("\<^const>TypedSigma.typing"
###                                 ("\<^const>Environments.add"
###                                   ("\<^const>Environments.add"
###                                     ("_position" env'') ("_position" x')
###                                     ("_position" A'))
###                                   ("_position" y') ("_position" B'))
###                                 ("\<^const>Sigma.sopen" ("_position" n')
###                                   ("_applC" ("_position" Fvar)
###                                     ("_position" x'))
###                                   ("_applC" ("_position" Fvar)
###                                     ("_position" y'))
###                                   ("_position" t''))
###                                 ("_applC" ("_position" return)
###                                   ("_applC" ("_position" the)
###                                     ("\<^const>Power.power_class.power"
### ("_position" T) ("_position" l))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" sa) ("_position" pa))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" sa) ("_position" F))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" pa) ("_position" F))
###           ("\<^const>HOL.not_equal" ("_position" sa) ("_position" pa))))
###       ("\<^const>HOL.conj"
###         ("\<^const>TypedSigma.typing"
###           ("\<^const>Environments.add"
###             ("\<^const>Environments.add" ("_position" env) ("_position" sa)
###               ("_position" T))
###             ("_position" pa)
###             ("_applC" ("_position" param)
###               ("_applC" ("_position" the)
###                 ("\<^const>Power.power_class.power" ("_position" T)
###                   ("_position" l)))))
###           ("\<^const>Sigma.openz" ("_position" t)
###             ("_applC" ("_position" Fvar) ("_position" sa))
###             ("_applC" ("_position" Fvar) ("_position" pa)))
###           ("_applC" ("_position" return)
###             ("_applC" ("_position" the)
###               ("\<^const>TypedSigma.type_get" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" env'')
###             ("_idts" ("_position" t'')
###               ("_idts" ("_position" s')
###                 ("_idts" ("_position" p')
###                   ("_idts" ("_position" x')
###                     ("_idts" ("_position" y')
###                       ("_idts" ("_position" A')
###                         ("_idts" ("_position" B') ("_position" n')))))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.not_member" ("_position" s')
###               ("_applC" ("_position" FV) ("_position" t'')))
###             ("\<^const>HOL.implies"
###               ("\<^const>Set.not_member" ("_position" p')
###                 ("_applC" ("_position" FV) ("_position" t'')))
###               ("\<^const>HOL.implies"
###                 ("\<^const>Set.not_member" ("_position" x')
###                   ("_applC" ("_position" FV) ("_position" t'')))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>Set.not_member" ("_position" y')
###                     ("_applC" ("_position" FV) ("_position" t'')))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>Set.not_member" ("_position" x')
###                       ("_applC" ("_position" env_dom) ("_position" env'')))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>Set.not_member" ("_position" y')
###                         ("_applC" ("_position" env_dom)
###                           ("_position" env'')))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.not_equal" ("_position" x')
###                           ("_position" y'))
###                         ("\<^const>HOL.implies"
###                           ("\<^const>HOL.not_equal" ("_position" s')
###                             ("_position" p'))
###                           ("\<^const>HOL.implies"
###                             ("\<^const>HOL.eq"
###                               ("\<^const>Sigma.openz" ("_position" t)
###                                 ("_applC" ("_position" Fvar)
###                                   ("_position" sa))
###                                 ("_applC" ("_position" Fvar)
###                                   ("_position" pa)))
###                               ("\<^const>Sigma.sopen" ("_position" n')
###                                 ("_applC" ("_position" Fvar)
###                                   ("_position" s'))
###                                 ("_applC" ("_position" Fvar)
###                                   ("_position" p'))
###                                 ("_position" t'')))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq"
###                                 ("\<^const>Environments.add"
###                                   ("\<^const>Environments.add"
###                                     ("_position" env) ("_position" sa)
###                                     ("_position" T))
###                                   ("_position" pa)
###                                   ("_applC" ("_position" param)
###                                     ("_applC" ("_position" the)
### ("\<^const>TypedSigma.type_get" ("_position" T) ("_position" l)))))
###                                 ("\<^const>Environments.add"
###                                   ("\<^const>Environments.add"
###                                     ("_position" env'') ("_position" s')
###                                     ("_position" A'))
###                                   ("_position" p') ("_position" B')))
###                               ("\<^const>TypedSigma.typing"
###                                 ("\<^const>Environments.add"
###                                   ("\<^const>Environments.add"
###                                     ("_position" env'') ("_position" x')
###                                     ("_position" A'))
###                                   ("_position" y') ("_position" B'))
###                                 ("\<^const>Sigma.sopen" ("_position" n')
###                                   ("_applC" ("_position" Fvar)
###                                     ("_position" x'))
###                                   ("_applC" ("_position" Fvar)
###                                     ("_position" y'))
###                                   ("_position" t''))
###                                 ("_applC" ("_position" return)
###                                   ("_applC" ("_position" the)
###                                     ("\<^const>TypedSigma.type_get"
### ("_position" T) ("_position" l))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" sa) ("_position" pa))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" sa) ("_position" F))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" pa) ("_position" F))
###           ("\<^const>HOL.not_equal" ("_position" sa) ("_position" pa))))
###       ("\<^const>HOL.conj"
###         ("\<^const>TypedSigma.typing"
###           ("\<^const>Environments.add"
###             ("\<^const>Environments.add" ("_position" env) ("_position" sa)
###               ("_position" T))
###             ("_position" pa)
###             ("_applC" ("_position" param)
###               ("_applC" ("_position" the)
###                 ("\<^const>TypedSigma.type_get" ("_position" T)
###                   ("_position" l)))))
###           ("\<^const>Sigma.openz" ("_position" t)
###             ("_applC" ("_position" Fvar) ("_position" sa))
###             ("_applC" ("_position" Fvar) ("_position" pa)))
###           ("_applC" ("_position" return)
###             ("_applC" ("_position" the)
###               ("\<^const>TypedSigma.type_get" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" env'')
###             ("_idts" ("_position" t'')
###               ("_idts" ("_position" s')
###                 ("_idts" ("_position" p')
###                   ("_idts" ("_position" x')
###                     ("_idts" ("_position" y')
###                       ("_idts" ("_position" A')
###                         ("_idts" ("_position" B') ("_position" n')))))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.not_member" ("_position" s')
###               ("_applC" ("_position" FV) ("_position" t'')))
###             ("\<^const>HOL.implies"
###               ("\<^const>Set.not_member" ("_position" p')
###                 ("_applC" ("_position" FV) ("_position" t'')))
###               ("\<^const>HOL.implies"
###                 ("\<^const>Set.not_member" ("_position" x')
###                   ("_applC" ("_position" FV) ("_position" t'')))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>Set.not_member" ("_position" y')
###                     ("_applC" ("_position" FV) ("_position" t'')))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>Set.not_member" ("_position" x')
###                       ("_applC" ("_position" env_dom) ("_position" env'')))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>Set.not_member" ("_position" y')
###                         ("_applC" ("_position" env_dom)
###                           ("_position" env'')))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.not_equal" ("_position" x')
###                           ("_position" y'))
###                         ("\<^const>HOL.implies"
###                           ("\<^const>HOL.not_equal" ("_position" s')
###                             ("_position" p'))
###                           ("\<^const>HOL.implies"
###                             ("\<^const>HOL.eq"
###                               ("\<^const>Sigma.openz" ("_position" t)
###                                 ("_applC" ("_position" Fvar)
###                                   ("_position" sa))
###                                 ("_applC" ("_position" Fvar)
###                                   ("_position" pa)))
###                               ("\<^const>Sigma.sopen" ("_position" n')
###                                 ("_applC" ("_position" Fvar)
###                                   ("_position" s'))
###                                 ("_applC" ("_position" Fvar)
###                                   ("_position" p'))
###                                 ("_position" t'')))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq"
###                                 ("\<^const>Environments.add"
###                                   ("\<^const>Environments.add"
###                                     ("_position" env) ("_position" sa)
###                                     ("_position" T))
###                                   ("_position" pa)
###                                   ("_applC" ("_position" param)
###                                     ("_applC" ("_position" the)
### ("\<^const>TypedSigma.type_get" ("_position" T) ("_position" l)))))
###                                 ("\<^const>Environments.add"
###                                   ("\<^const>Environments.add"
###                                     ("_position" env'') ("_position" s')
###                                     ("_position" A'))
###                                   ("_position" p') ("_position" B')))
###                               ("\<^const>TypedSigma.typing"
###                                 ("\<^const>Environments.add"
###                                   ("\<^const>Environments.add"
###                                     ("_position" env'') ("_position" x')
###                                     ("_position" A'))
###                                   ("_position" y') ("_position" B'))
###                                 ("\<^const>Sigma.sopen" ("_position" n')
###                                   ("_applC" ("_position" Fvar)
###                                     ("_position" x'))
###                                   ("_applC" ("_position" Fvar)
###                                     ("_position" y'))
###                                   ("_position" t''))
###                                 ("_applC" ("_position" return)
###                                   ("_applC" ("_position" the)
###                                     ("\<^const>TypedSigma.type_get"
### ("_position" T) ("_position" l))))))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 199 of "$AFP/Locally-Nameless-Sigma/Sigma/TypedSigma.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" sa) ("_position" pa))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" sa)
###           ("\<^const>Set.union"
###             ("\<^const>Set.union"
###               ("\<^const>Set.union" ("_position" F)
###                 ("_Finset"
###                   ("_args" ("_position" s)
###                     ("_args" ("_position" p)
###                       ("_args" ("_position" x) ("_position" y))))))
###               ("_position" F'))
###             ("_applC" ("_position" env_dom) ("_position" env'))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" pa)
###             ("\<^const>Set.union"
###               ("\<^const>Set.union"
###                 ("\<^const>Set.union" ("_position" F)
###                   ("_Finset"
###                     ("_args" ("_position" s)
###                       ("_args" ("_position" p)
###                         ("_args" ("_position" x) ("_position" y))))))
###                 ("_position" F'))
###               ("_applC" ("_position" env_dom) ("_position" env'))))
###           ("\<^const>HOL.not_equal" ("_position" sa) ("_position" pa))))
###       ("\<^const>TypedSigma.typing"
###         ("\<^const>Environments.add"
###           ("\<^const>Environments.add"
###             ("\<^const>Environments.add"
###               ("\<^const>Environments.add" ("_position" env')
###                 ("_position" x) ("_position" A))
###               ("_position" y) ("_position" B))
###             ("_position" sa) ("_position" T))
###           ("_position" pa)
###           ("_applC" ("_position" param)
###             ("_applC" ("_position" the)
###               ("\<^const>Power.power_class.power" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>Sigma.openz"
###           ("\<^const>Sigma.sopen"
###             ("_applC" ("_position" Suc) ("_position" n))
###             ("_applC" ("_position" Fvar) ("_position" x))
###             ("_applC" ("_position" Fvar) ("_position" y)) ("_position" t'))
###           ("_applC" ("_position" Fvar) ("_position" sa))
###           ("_applC" ("_position" Fvar) ("_position" pa)))
###         ("_applC" ("_position" return)
###           ("_applC" ("_position" the)
###             ("\<^const>TypedSigma.type_get" ("_position" T)
###               ("_position" l))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" sa) ("_position" pa))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" sa)
###           ("\<^const>Set.union"
###             ("\<^const>Set.union"
###               ("\<^const>Set.union" ("_position" F)
###                 ("_Finset"
###                   ("_args" ("_position" s)
###                     ("_args" ("_position" p)
###                       ("_args" ("_position" x) ("_position" y))))))
###               ("_position" F'))
###             ("_applC" ("_position" env_dom) ("_position" env'))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" pa)
###             ("\<^const>Set.union"
###               ("\<^const>Set.union"
###                 ("\<^const>Set.union" ("_position" F)
###                   ("_Finset"
###                     ("_args" ("_position" s)
###                       ("_args" ("_position" p)
###                         ("_args" ("_position" x) ("_position" y))))))
###                 ("_position" F'))
###               ("_applC" ("_position" env_dom) ("_position" env'))))
###           ("\<^const>HOL.not_equal" ("_position" sa) ("_position" pa))))
###       ("\<^const>TypedSigma.typing"
###         ("\<^const>Environments.add"
###           ("\<^const>Environments.add"
###             ("\<^const>Environments.add"
###               ("\<^const>Environments.add" ("_position" env')
###                 ("_position" x) ("_position" A))
###               ("_position" y) ("_position" B))
###             ("_position" sa) ("_position" T))
###           ("_position" pa)
###           ("_applC" ("_position" param)
###             ("_applC" ("_position" the)
###               ("\<^const>TypedSigma.type_get" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>Sigma.openz"
###           ("\<^const>Sigma.sopen"
###             ("_applC" ("_position" Suc) ("_position" n))
###             ("_applC" ("_position" Fvar) ("_position" x))
###             ("_applC" ("_position" Fvar) ("_position" y)) ("_position" t'))
###           ("_applC" ("_position" Fvar) ("_position" sa))
###           ("_applC" ("_position" Fvar) ("_position" pa)))
###         ("_applC" ("_position" return)
###           ("_applC" ("_position" the)
###             ("\<^const>TypedSigma.type_get" ("_position" T)
###               ("_position" l))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" sa) ("_position" pa))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" sa)
###           ("\<^const>Set.union"
###             ("\<^const>Set.union"
###               ("\<^const>Set.union" ("_position" F)
###                 ("_Finset"
###                   ("_args" ("_position" s)
###                     ("_args" ("_position" p)
###                       ("_args" ("_position" x) ("_position" y))))))
###               ("_position" F'))
###             ("_applC" ("_position" env_dom) ("_position" env'))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" pa)
###             ("\<^const>Set.union"
###               ("\<^const>Set.union"
###                 ("\<^const>Set.union" ("_position" F)
###                   ("_Finset"
###                     ("_args" ("_position" s)
###                       ("_args" ("_position" p)
###                         ("_args" ("_position" x) ("_position" y))))))
###                 ("_position" F'))
###               ("_applC" ("_position" env_dom) ("_position" env'))))
###           ("\<^const>HOL.not_equal" ("_position" sa) ("_position" pa))))
###       ("\<^const>TypedSigma.typing"
###         ("\<^const>Environments.add"
###           ("\<^const>Environments.add"
###             ("\<^const>Environments.add"
###               ("\<^const>Environments.add" ("_position" env')
###                 ("_position" x) ("_position" A))
###               ("_position" y) ("_position" B))
###             ("_position" sa) ("_position" T))
###           ("_position" pa)
###           ("_applC" ("_position" param)
###             ("_applC" ("_position" the)
###               ("\<^const>Power.power_class.power" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>Sigma.openz"
###           ("\<^const>Sigma.sopen"
###             ("_applC" ("_position" Suc) ("_position" n))
###             ("_applC" ("_position" Fvar) ("_position" x))
###             ("_applC" ("_position" Fvar) ("_position" y)) ("_position" t'))
###           ("_applC" ("_position" Fvar) ("_position" sa))
###           ("_applC" ("_position" Fvar) ("_position" pa)))
###         ("_applC" ("_position" return)
###           ("_applC" ("_position" the)
###             ("\<^const>Power.power_class.power" ("_position" T)
###               ("_position" l))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" sa) ("_position" pa))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" sa)
###           ("\<^const>Set.union"
###             ("\<^const>Set.union"
###               ("\<^const>Set.union" ("_position" F)
###                 ("_Finset"
###                   ("_args" ("_position" s)
###                     ("_args" ("_position" p)
###                       ("_args" ("_position" x) ("_position" y))))))
###               ("_position" F'))
###             ("_applC" ("_position" env_dom) ("_position" env'))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" pa)
###             ("\<^const>Set.union"
###               ("\<^const>Set.union"
###                 ("\<^const>Set.union" ("_position" F)
###                   ("_Finset"
###                     ("_args" ("_position" s)
###                       ("_args" ("_position" p)
###                         ("_args" ("_position" x) ("_position" y))))))
###                 ("_position" F'))
###               ("_applC" ("_position" env_dom) ("_position" env'))))
###           ("\<^const>HOL.not_equal" ("_position" sa) ("_position" pa))))
###       ("\<^const>TypedSigma.typing"
###         ("\<^const>Environments.add"
###           ("\<^const>Environments.add"
###             ("\<^const>Environments.add"
###               ("\<^const>Environments.add" ("_position" env')
###                 ("_position" x) ("_position" A))
###               ("_position" y) ("_position" B))
###             ("_position" sa) ("_position" T))
###           ("_position" pa)
###           ("_applC" ("_position" param)
###             ("_applC" ("_position" the)
###               ("\<^const>TypedSigma.type_get" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>Sigma.openz"
###           ("\<^const>Sigma.sopen"
###             ("_applC" ("_position" Suc) ("_position" n))
###             ("_applC" ("_position" Fvar) ("_position" x))
###             ("_applC" ("_position" Fvar) ("_position" y)) ("_position" t'))
###           ("_applC" ("_position" Fvar) ("_position" sa))
###           ("_applC" ("_position" Fvar) ("_position" pa)))
###         ("_applC" ("_position" return)
###           ("_applC" ("_position" the)
###             ("\<^const>Power.power_class.power" ("_position" T)
###               ("_position" l))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 455 of "$AFP/Locally-Nameless-Sigma/Sigma/TypedSigma.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_applC" ("_position" dom) ("_position" f))
###       ("_applC" ("_position" do) ("_position" U)))
###     ("_Ball" ("_position" l) ("_applC" ("_position" do) ("_position" U))
###       ("\<^const>TypedSigma.typing"
###         ("\<^const>Environments.add"
###           ("\<^const>Environments.add" ("_position" e) ("_position" s)
###             ("_position" U))
###           ("_position" p)
###           ("_applC" ("_position" param)
###             ("_applC" ("_position" the)
###               ("\<^const>TypedSigma.type_get" ("_position" U)
###                 ("_position" l)))))
###         ("\<^const>Sigma.openz"
###           ("_applC" ("_position" the)
###             ("_applC" ("_position" f) ("_position" l)))
###           ("_applC" ("_position" Fvar) ("_position" s))
###           ("_applC" ("_position" Fvar) ("_position" p)))
###         ("_applC" ("_position" return)
###           ("_applC" ("_position" the)
###             ("\<^const>Power.power_class.power" ("_position" U)
###               ("_position" l))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_applC" ("_position" dom) ("_position" f))
###       ("_applC" ("_position" do) ("_position" U)))
###     ("_Ball" ("_position" l) ("_applC" ("_position" do) ("_position" U))
###       ("\<^const>TypedSigma.typing"
###         ("\<^const>Environments.add"
###           ("\<^const>Environments.add" ("_position" e) ("_position" s)
###             ("_position" U))
###           ("_position" p)
###           ("_applC" ("_position" param)
###             ("_applC" ("_position" the)
###               ("\<^const>Power.power_class.power" ("_position" U)
###                 ("_position" l)))))
###         ("\<^const>Sigma.openz"
###           ("_applC" ("_position" the)
###             ("_applC" ("_position" f) ("_position" l)))
###           ("_applC" ("_position" Fvar) ("_position" s))
###           ("_applC" ("_position" Fvar) ("_position" p)))
###         ("_applC" ("_position" return)
###           ("_applC" ("_position" the)
###             ("\<^const>Power.power_class.power" ("_position" U)
###               ("_position" l))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_applC" ("_position" dom) ("_position" f))
###       ("_applC" ("_position" do) ("_position" U)))
###     ("_Ball" ("_position" l) ("_applC" ("_position" do) ("_position" U))
###       ("\<^const>TypedSigma.typing"
###         ("\<^const>Environments.add"
###           ("\<^const>Environments.add" ("_position" e) ("_position" s)
###             ("_position" U))
###           ("_position" p)
###           ("_applC" ("_position" param)
###             ("_applC" ("_position" the)
###               ("\<^const>TypedSigma.type_get" ("_position" U)
###                 ("_position" l)))))
###         ("\<^const>Sigma.openz"
###           ("_applC" ("_position" the)
###             ("_applC" ("_position" f) ("_position" l)))
###           ("_applC" ("_position" Fvar) ("_position" s))
###           ("_applC" ("_position" Fvar) ("_position" p)))
###         ("_applC" ("_position" return)
###           ("_applC" ("_position" the)
###             ("\<^const>TypedSigma.type_get" ("_position" U)
###               ("_position" l))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_applC" ("_position" dom) ("_position" f))
###       ("_applC" ("_position" do) ("_position" U)))
###     ("_Ball" ("_position" l) ("_applC" ("_position" do) ("_position" U))
###       ("\<^const>TypedSigma.typing"
###         ("\<^const>Environments.add"
###           ("\<^const>Environments.add" ("_position" e) ("_position" s)
###             ("_position" U))
###           ("_position" p)
###           ("_applC" ("_position" param)
###             ("_applC" ("_position" the)
###               ("\<^const>Power.power_class.power" ("_position" U)
###                 ("_position" l)))))
###         ("\<^const>Sigma.openz"
###           ("_applC" ("_position" the)
###             ("_applC" ("_position" f) ("_position" l)))
###           ("_applC" ("_position" Fvar) ("_position" s))
###           ("_applC" ("_position" Fvar) ("_position" p)))
###         ("_applC" ("_position" return)
###           ("_applC" ("_position" the)
###             ("\<^const>TypedSigma.type_get" ("_position" U)
###               ("_position" l))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 500 of "$AFP/Locally-Nameless-Sigma/Sigma/TypedSigma.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" F)
###         ("\<^const>HOL.conj" ("_applC" ("_position" finite) ("_position" F))
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" s) ("_position" p))
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.not_member" ("_position" s) ("_position" F))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.not_member" ("_position" p)
###                     ("_position" F))
###                   ("\<^const>HOL.not_equal" ("_position" s)
###                     ("_position" p))))
###               ("\<^const>TypedSigma.typing"
###                 ("\<^const>Environments.add"
###                   ("\<^const>Environments.add" ("_position" e)
###                     ("_position" s) ("_position" U))
###                   ("_position" p)
###                   ("_applC" ("_position" param)
###                     ("_applC" ("_position" the)
###                       ("\<^const>Power.power_class.power" ("_position" U)
###                         ("_position" l)))))
###                 ("\<^const>Sigma.openz"
###                   ("_applC" ("_position" the)
###                     ("_applC" ("_position" f) ("_position" l)))
###                   ("_applC" ("_position" Fvar) ("_position" s))
###                   ("_applC" ("_position" Fvar) ("_position" p)))
###                 ("_position" T)))))))
###     ("\<^const>HOL.Trueprop" ("_position" P)))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### ("\<^const>Pure.imp"
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" F)
###         ("\<^const>HOL.conj" ("_applC" ("_position" finite) ("_position" F))
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" s) ("_position" p))
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.not_member" ("_position" s) ("_position" F))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.not_member" ("_position" p)
###                     ("_position" F))
###                   ("\<^const>HOL.not_equal" ("_position" s)
###                     ("_position" p))))
###               ("\<^const>TypedSigma.typing"
###                 ("\<^const>Environments.add"
###                   ("\<^const>Environments.add" ("_position" e)
###                     ("_position" s) ("_position" U))
###                   ("_position" p)
###                   ("_applC" ("_position" param)
###                     ("_applC" ("_position" the)
###                       ("\<^const>TypedSigma.type_get" ("_position" U)
###                         ("_position" l)))))
###                 ("\<^const>Sigma.openz"
###                   ("_applC" ("_position" the)
###                     ("_applC" ("_position" f) ("_position" l)))
###                   ("_applC" ("_position" Fvar) ("_position" s))
###                   ("_applC" ("_position" Fvar) ("_position" p)))
###                 ("_position" T)))))))
###     ("\<^const>HOL.Trueprop" ("_position" P)))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 621 of "$AFP/Locally-Nameless-Sigma/Sigma/TypedSigma.thy") produces 800 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" s) ("_position" p))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" s) ("_position" F))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" p) ("_position" F))
###           ("\<^const>HOL.not_equal" ("_position" s) ("_position" p))))
###       ("\<^const>HOL.conj"
###         ("\<^const>TypedSigma.typing"
###           ("\<^const>Environments.add"
###             ("\<^const>Environments.add" ("_position" e1) ("_position" s)
###               ("_position" T))
###             ("_position" p)
###             ("_applC" ("_position" param)
###               ("_applC" ("_position" the)
###                 ("\<^const>Power.power_class.power" ("_position" T)
###                   ("_position" l)))))
###           ("\<^const>Sigma.openz" ("_position" t2)
###             ("_applC" ("_position" Fvar) ("_position" s))
###             ("_applC" ("_position" Fvar) ("_position" p)))
###           ("_applC" ("_position" return)
###             ("_applC" ("_position" the)
###               ("\<^const>TypedSigma.type_get" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("\<^const>Set.inter"
###               ("_applC" ("_position" env_dom)
###                 ("\<^const>Environments.add"
###                   ("\<^const>Environments.add" ("_position" e1)
###                     ("_position" s) ("_position" T))
###                   ("_position" p)
###                   ("_applC" ("_position" param)
###                     ("_applC" ("_position" the)
###                       ("\<^const>Power.power_class.power" ("_position" T)
###                         ("_position" l))))))
###               ("_applC" ("_position" env_dom) ("_position" e2)))
###             ("\<^const>Set.empty"))
###           ("\<^const>TypedSigma.typing"
###             ("_applC" ("_position" ok)
###               ("\<^const>Environments.env_app"
###                 ("\<^const>HOL.implies" ("_position" e2)
###                   ("\<^const>Environments.add"
###                     ("\<^const>Environments.add" ("_position" e1)
###                       ("_position" s) ("_position" T))
###                     ("_position" p)
###                     ("_applC" ("_position" param)
###                       ("_applC" ("_position" the)
###                         ("\<^const>TypedSigma.type_get" ("_position" T)
###                           ("_position" l))))))
###                 ("_position" e2)))
###             ("\<^const>Sigma.openz" ("_position" t2)
###               ("_applC" ("_position" Fvar) ("_position" s))
###               ("_applC" ("_position" Fvar) ("_position" p)))
###             ("_applC" ("_position" return)
###               ("_applC" ("_position" the)
###                 ("\<^const>Power.power_class.power" ("_position" T)
###                   ("_position" l))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" s) ("_position" p))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" s) ("_position" F))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" p) ("_position" F))
###           ("\<^const>HOL.not_equal" ("_position" s) ("_position" p))))
###       ("\<^const>HOL.conj"
###         ("\<^const>TypedSigma.typing"
###           ("\<^const>Environments.add"
###             ("\<^const>Environments.add" ("_position" e1) ("_position" s)
###               ("_position" T))
###             ("_position" p)
###             ("_applC" ("_position" param)
###               ("_applC" ("_position" the)
###                 ("\<^const>TypedSigma.type_get" ("_position" T)
###                   ("_position" l)))))
###           ("\<^const>Sigma.openz" ("_position" t2)
###             ("_applC" ("_position" Fvar) ("_position" s))
###             ("_applC" ("_position" Fvar) ("_position" p)))
###           ("_applC" ("_position" return)
###             ("_applC" ("_position" the)
###               ("\<^const>TypedSigma.type_get" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("\<^const>Set.inter"
###               ("_applC" ("_position" env_dom)
###                 ("\<^const>Environments.add"
###                   ("\<^const>Environments.add" ("_position" e1)
###                     ("_position" s) ("_position" T))
###                   ("_position" p)
###                   ("_applC" ("_position" param)
###                     ("_applC" ("_position" the)
###                       ("\<^const>Power.power_class.power" ("_position" T)
###                         ("_position" l))))))
###               ("_applC" ("_position" env_dom) ("_position" e2)))
###             ("\<^const>Set.empty"))
###           ("\<^const>TypedSigma.typing"
###             ("_applC" ("_position" ok)
###               ("\<^const>Environments.env_app"
###                 ("\<^const>HOL.implies" ("_position" e2)
###                   ("\<^const>Environments.add"
###                     ("\<^const>Environments.add" ("_position" e1)
###                       ("_position" s) ("_position" T))
###                     ("_position" p)
###                     ("_applC" ("_position" param)
###                       ("_applC" ("_position" the)
###                         ("\<^const>TypedSigma.type_get" ("_position" T)
###                           ("_position" l))))))
###                 ("_position" e2)))
###             ("\<^const>Sigma.openz" ("_position" t2)
###               ("_applC" ("_position" Fvar) ("_position" s))
###               ("_applC" ("_position" Fvar) ("_position" p)))
###             ("_applC" ("_position" return)
###               ("_applC" ("_position" the)
###                 ("\<^const>Power.power_class.power" ("_position" T)
###                   ("_position" l))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" s) ("_position" p))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" s) ("_position" F))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" p) ("_position" F))
###           ("\<^const>HOL.not_equal" ("_position" s) ("_position" p))))
###       ("\<^const>HOL.conj"
###         ("\<^const>TypedSigma.typing"
###           ("\<^const>Environments.add"
###             ("\<^const>Environments.add" ("_position" e1) ("_position" s)
###               ("_position" T))
###             ("_position" p)
###             ("_applC" ("_position" param)
###               ("_applC" ("_position" the)
###                 ("\<^const>Power.power_class.power" ("_position" T)
###                   ("_position" l)))))
###           ("\<^const>Sigma.openz" ("_position" t2)
###             ("_applC" ("_position" Fvar) ("_position" s))
###             ("_applC" ("_position" Fvar) ("_position" p)))
###           ("_applC" ("_position" return)
###             ("_applC" ("_position" the)
###               ("\<^const>Power.power_class.power" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("\<^const>Set.inter"
###               ("_applC" ("_position" env_dom)
###                 ("\<^const>Environments.add"
###                   ("\<^const>Environments.add" ("_position" e1)
###                     ("_position" s) ("_position" T))
###                   ("_position" p)
###                   ("_applC" ("_position" param)
###                     ("_applC" ("_position" the)
###                       ("\<^const>Power.power_class.power" ("_position" T)
###                         ("_position" l))))))
###               ("_applC" ("_position" env_dom) ("_position" e2)))
###             ("\<^const>Set.empty"))
###           ("\<^const>TypedSigma.typing"
###             ("_applC" ("_position" ok)
###               ("\<^const>Environments.env_app"
###                 ("\<^const>HOL.implies" ("_position" e2)
###                   ("\<^const>Environments.add"
###                     ("\<^const>Environments.add" ("_position" e1)
###                       ("_position" s) ("_position" T))
###                     ("_position" p)
###                     ("_applC" ("_position" param)
###                       ("_applC" ("_position" the)
###                         ("\<^const>TypedSigma.type_get" ("_position" T)
###                           ("_position" l))))))
###                 ("_position" e2)))
###             ("\<^const>Sigma.openz" ("_position" t2)
###               ("_applC" ("_position" Fvar) ("_position" s))
###               ("_applC" ("_position" Fvar) ("_position" p)))
###             ("_applC" ("_position" return)
###               ("_applC" ("_position" the)
###                 ("\<^const>Power.power_class.power" ("_position" T)
###                   ("_position" l))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" s) ("_position" p))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" s) ("_position" F))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" p) ("_position" F))
###           ("\<^const>HOL.not_equal" ("_position" s) ("_position" p))))
###       ("\<^const>HOL.conj"
###         ("\<^const>TypedSigma.typing"
###           ("\<^const>Environments.add"
###             ("\<^const>Environments.add" ("_position" e1) ("_position" s)
###               ("_position" T))
###             ("_position" p)
###             ("_applC" ("_position" param)
###               ("_applC" ("_position" the)
###                 ("\<^const>TypedSigma.type_get" ("_position" T)
###                   ("_position" l)))))
###           ("\<^const>Sigma.openz" ("_position" t2)
###             ("_applC" ("_position" Fvar) ("_position" s))
###             ("_applC" ("_position" Fvar) ("_position" p)))
###           ("_applC" ("_position" return)
###             ("_applC" ("_position" the)
###               ("\<^const>Power.power_class.power" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("\<^const>Set.inter"
###               ("_applC" ("_position" env_dom)
###                 ("\<^const>Environments.add"
###                   ("\<^const>Environments.add" ("_position" e1)
###                     ("_position" s) ("_position" T))
###                   ("_position" p)
###                   ("_applC" ("_position" param)
###                     ("_applC" ("_position" the)
###                       ("\<^const>Power.power_class.power" ("_position" T)
###                         ("_position" l))))))
###               ("_applC" ("_position" env_dom) ("_position" e2)))
###             ("\<^const>Set.empty"))
###           ("\<^const>TypedSigma.typing"
###             ("_applC" ("_position" ok)
###               ("\<^const>Environments.env_app"
###                 ("\<^const>HOL.implies" ("_position" e2)
###                   ("\<^const>Environments.add"
###                     ("\<^const>Environments.add" ("_position" e1)
###                       ("_position" s) ("_position" T))
###                     ("_position" p)
###                     ("_applC" ("_position" param)
###                       ("_applC" ("_position" the)
###                         ("\<^const>TypedSigma.type_get" ("_position" T)
###                           ("_position" l))))))
###                 ("_position" e2)))
###             ("\<^const>Sigma.openz" ("_position" t2)
###               ("_applC" ("_position" Fvar) ("_position" s))
###               ("_applC" ("_position" Fvar) ("_position" p)))
###             ("_applC" ("_position" return)
###               ("_applC" ("_position" the)
###                 ("\<^const>Power.power_class.power" ("_position" T)
###                   ("_position" l))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" s) ("_position" p))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" s) ("_position" F))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" p) ("_position" F))
###           ("\<^const>HOL.not_equal" ("_position" s) ("_position" p))))
###       ("\<^const>HOL.conj"
###         ("\<^const>TypedSigma.typing"
###           ("\<^const>Environments.add"
###             ("\<^const>Environments.add" ("_position" e1) ("_position" s)
###               ("_position" T))
###             ("_position" p)
###             ("_applC" ("_position" param)
###               ("_applC" ("_position" the)
###                 ("\<^const>Power.power_class.power" ("_position" T)
###                   ("_position" l)))))
###           ("\<^const>Sigma.openz" ("_position" t2)
###             ("_applC" ("_position" Fvar) ("_position" s))
###             ("_applC" ("_position" Fvar) ("_position" p)))
###           ("_applC" ("_position" return)
###             ("_applC" ("_position" the)
###               ("\<^const>TypedSigma.type_get" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("\<^const>Set.inter"
###               ("_applC" ("_position" env_dom)
###                 ("\<^const>Environments.add"
###                   ("\<^const>Environments.add" ("_position" e1)
###                     ("_position" s) ("_position" T))
###                   ("_position" p)
###                   ("_applC" ("_position" param)
###                     ("_applC" ("_position" the)
###                       ("\<^const>TypedSigma.type_get" ("_position" T)
###                         ("_position" l))))))
###               ("_applC" ("_position" env_dom) ("_position" e2)))
###             ("\<^const>Set.empty"))
###           ("\<^const>TypedSigma.typing"
###             ("_applC" ("_position" ok)
###               ("\<^const>Environments.env_app"
###                 ("\<^const>HOL.implies" ("_position" e2)
###                   ("\<^const>Environments.add"
###                     ("\<^const>Environments.add" ("_position" e1)
###                       ("_position" s) ("_position" T))
###                     ("_position" p)
###                     ("_applC" ("_position" param)
###                       ("_applC" ("_position" the)
###                         ("\<^const>TypedSigma.type_get" ("_position" T)
###                           ("_position" l))))))
###                 ("_position" e2)))
###             ("\<^const>Sigma.openz" ("_position" t2)
###               ("_applC" ("_position" Fvar) ("_position" s))
###               ("_applC" ("_position" Fvar) ("_position" p)))
###             ("_applC" ("_position" return)
###               ("_applC" ("_position" the)
###                 ("\<^const>Power.power_class.power" ("_position" T)
###                   ("_position" l))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" s) ("_position" p))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" s) ("_position" F))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" p) ("_position" F))
###           ("\<^const>HOL.not_equal" ("_position" s) ("_position" p))))
###       ("\<^const>HOL.conj"
###         ("\<^const>TypedSigma.typing"
###           ("\<^const>Environments.add"
###             ("\<^const>Environments.add" ("_position" e1) ("_position" s)
###               ("_position" T))
###             ("_position" p)
###             ("_applC" ("_position" param)
###               ("_applC" ("_position" the)
###                 ("\<^const>TypedSigma.type_get" ("_position" T)
###                   ("_position" l)))))
###           ("\<^const>Sigma.openz" ("_position" t2)
###             ("_applC" ("_position" Fvar) ("_position" s))
###             ("_applC" ("_position" Fvar) ("_position" p)))
###           ("_applC" ("_position" return)
###             ("_applC" ("_position" the)
###               ("\<^const>TypedSigma.type_get" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("\<^const>Set.inter"
###               ("_applC" ("_position" env_dom)
###                 ("\<^const>Environments.add"
###                   ("\<^const>Environments.add" ("_position" e1)
###                     ("_position" s) ("_position" T))
###                   ("_position" p)
###                   ("_applC" ("_position" param)
###                     ("_applC" ("_position" the)
###                       ("\<^const>TypedSigma.type_get" ("_position" T)
###                         ("_position" l))))))
###               ("_applC" ("_position" env_dom) ("_position" e2)))
###             ("\<^const>Set.empty"))
###           ("\<^const>TypedSigma.typing"
###             ("_applC" ("_position" ok)
###               ("\<^const>Environments.env_app"
###                 ("\<^const>HOL.implies" ("_position" e2)
###                   ("\<^const>Environments.add"
###                     ("\<^const>Environments.add" ("_position" e1)
###                       ("_position" s) ("_position" T))
###                     ("_position" p)
###                     ("_applC" ("_position" param)
###                       ("_applC" ("_position" the)
###                         ("\<^const>TypedSigma.type_get" ("_position" T)
###                           ("_position" l))))))
###                 ("_position" e2)))
###             ("\<^const>Sigma.openz" ("_position" t2)
###               ("_applC" ("_position" Fvar) ("_position" s))
###               ("_applC" ("_position" Fvar) ("_position" p)))
###             ("_applC" ("_position" return)
###               ("_applC" ("_position" the)
###                 ("\<^const>Power.power_class.power" ("_position" T)
###                   ("_position" l))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" s) ("_position" p))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" s) ("_position" F))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" p) ("_position" F))
###           ("\<^const>HOL.not_equal" ("_position" s) ("_position" p))))
###       ("\<^const>HOL.conj"
###         ("\<^const>TypedSigma.typing"
###           ("\<^const>Environments.add"
###             ("\<^const>Environments.add" ("_position" e1) ("_position" s)
###               ("_position" T))
###             ("_position" p)
###             ("_applC" ("_position" param)
###               ("_applC" ("_position" the)
###                 ("\<^const>Power.power_class.power" ("_position" T)
###                   ("_position" l)))))
###           ("\<^const>Sigma.openz" ("_position" t2)
###             ("_applC" ("_position" Fvar) ("_position" s))
###             ("_applC" ("_position" Fvar) ("_position" p)))
###           ("_applC" ("_position" return)
###             ("_applC" ("_position" the)
###               ("\<^const>Power.power_class.power" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("\<^const>Set.inter"
###               ("_applC" ("_position" env_dom)
###                 ("\<^const>Environments.add"
###                   ("\<^const>Environments.add" ("_position" e1)
###                     ("_position" s) ("_position" T))
###                   ("_position" p)
###                   ("_applC" ("_position" param)
###                     ("_applC" ("_position" the)
###                       ("\<^const>TypedSigma.type_get" ("_position" T)
###                         ("_position" l))))))
###               ("_applC" ("_position" env_dom) ("_position" e2)))
###             ("\<^const>Set.empty"))
###           ("\<^const>TypedSigma.typing"
###             ("_applC" ("_position" ok)
###               ("\<^const>Environments.env_app"
###                 ("\<^const>HOL.implies" ("_position" e2)
###                   ("\<^const>Environments.add"
###                     ("\<^const>Environments.add" ("_position" e1)
###                       ("_position" s) ("_position" T))
###                     ("_position" p)
###                     ("_applC" ("_position" param)
###                       ("_applC" ("_position" the)
###                         ("\<^const>TypedSigma.type_get" ("_position" T)
###                           ("_position" l))))))
###                 ("_position" e2)))
###             ("\<^const>Sigma.openz" ("_position" t2)
###               ("_applC" ("_position" Fvar) ("_position" s))
###               ("_applC" ("_position" Fvar) ("_position" p)))
###             ("_applC" ("_position" return)
###               ("_applC" ("_position" the)
###                 ("\<^const>Power.power_class.power" ("_position" T)
###                   ("_position" l))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" s) ("_position" p))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" s) ("_position" F))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" p) ("_position" F))
###           ("\<^const>HOL.not_equal" ("_position" s) ("_position" p))))
###       ("\<^const>HOL.conj"
###         ("\<^const>TypedSigma.typing"
###           ("\<^const>Environments.add"
###             ("\<^const>Environments.add" ("_position" e1) ("_position" s)
###               ("_position" T))
###             ("_position" p)
###             ("_applC" ("_position" param)
###               ("_applC" ("_position" the)
###                 ("\<^const>TypedSigma.type_get" ("_position" T)
###                   ("_position" l)))))
###           ("\<^const>Sigma.openz" ("_position" t2)
###             ("_applC" ("_position" Fvar) ("_position" s))
###             ("_applC" ("_position" Fvar) ("_position" p)))
###           ("_applC" ("_position" return)
###             ("_applC" ("_position" the)
###               ("\<^const>Power.power_class.power" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("\<^const>Set.inter"
###               ("_applC" ("_position" env_dom)
###                 ("\<^const>Environments.add"
###                   ("\<^const>Environments.add" ("_position" e1)
###                     ("_position" s) ("_position" T))
###                   ("_position" p)
###                   ("_applC" ("_position" param)
###                     ("_applC" ("_position" the)
###                       ("\<^const>TypedSigma.type_get" ("_position" T)
###                         ("_position" l))))))
###               ("_applC" ("_position" env_dom) ("_position" e2)))
###             ("\<^const>Set.empty"))
###           ("\<^const>TypedSigma.typing"
###             ("_applC" ("_position" ok)
###               ("\<^const>Environments.env_app"
###                 ("\<^const>HOL.implies" ("_position" e2)
###                   ("\<^const>Environments.add"
###                     ("\<^const>Environments.add" ("_position" e1)
###                       ("_position" s) ("_position" T))
###                     ("_position" p)
###                     ("_applC" ("_position" param)
###                       ("_applC" ("_position" the)
###                         ("\<^const>TypedSigma.type_get" ("_position" T)
###                           ("_position" l))))))
###                 ("_position" e2)))
###             ("\<^const>Sigma.openz" ("_position" t2)
###               ("_applC" ("_position" Fvar) ("_position" s))
###               ("_applC" ("_position" Fvar) ("_position" p)))
###             ("_applC" ("_position" return)
###               ("_applC" ("_position" the)
###                 ("\<^const>Power.power_class.power" ("_position" T)
###                   ("_position" l))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" s) ("_position" p))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" s) ("_position" F))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" p) ("_position" F))
###           ("\<^const>HOL.not_equal" ("_position" s) ("_position" p))))
###       ("\<^const>HOL.conj"
###         ("\<^const>TypedSigma.typing"
###           ("\<^const>Environments.add"
###             ("\<^const>Environments.add" ("_position" e1) ("_position" s)
###               ("_position" T))
###             ("_position" p)
###             ("_applC" ("_position" param)
###               ("_applC" ("_position" the)
###                 ("\<^const>Power.power_class.power" ("_position" T)
###                   ("_position" l)))))
###           ("\<^const>Sigma.openz" ("_position" t2)
###             ("_applC" ("_position" Fvar) ("_position" s))
###             ("_applC" ("_position" Fvar) ("_position" p)))
###           ("_applC" ("_position" return)
###             ("_applC" ("_position" the)
###               ("\<^const>TypedSigma.type_get" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("\<^const>Set.inter"
###               ("_applC" ("_position" env_dom)
###                 ("\<^const>Environments.add"
###                   ("\<^const>Environments.add" ("_position" e1)
###                     ("_position" s) ("_position" T))
###                   ("_position" p)
###                   ("_applC" ("_position" param)
###                     ("_applC" ("_position" the)
###                       ("\<^const>Power.power_class.power" ("_position" T)
###                         ("_position" l))))))
###               ("_applC" ("_position" env_dom) ("_position" e2)))
###             ("\<^const>Set.empty"))
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" ok) ("_position" e2))
###             ("\<^const>TypedSigma.typing"
###               ("\<^const>Environments.env_app"
###                 ("\<^const>Environments.add"
###                   ("\<^const>Environments.add" ("_position" e1)
###                     ("_position" s) ("_position" T))
###                   ("_position" p)
###                   ("_applC" ("_position" param)
###                     ("_applC" ("_position" the)
###                       ("\<^const>TypedSigma.type_get" ("_position" T)
###                         ("_position" l)))))
###                 ("_position" e2))
###               ("\<^const>Sigma.openz" ("_position" t2)
###                 ("_applC" ("_position" Fvar) ("_position" s))
###                 ("_applC" ("_position" Fvar) ("_position" p)))
###               ("_applC" ("_position" return)
###                 ("_applC" ("_position" the)
###                   ("\<^const>Power.power_class.power" ("_position" T)
###                     ("_position" l)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" s) ("_position" p))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" s) ("_position" F))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" p) ("_position" F))
###           ("\<^const>HOL.not_equal" ("_position" s) ("_position" p))))
###       ("\<^const>HOL.conj"
###         ("\<^const>TypedSigma.typing"
###           ("\<^const>Environments.add"
###             ("\<^const>Environments.add" ("_position" e1) ("_position" s)
###               ("_position" T))
###             ("_position" p)
###             ("_applC" ("_position" param)
###               ("_applC" ("_position" the)
###                 ("\<^const>TypedSigma.type_get" ("_position" T)
###                   ("_position" l)))))
###           ("\<^const>Sigma.openz" ("_position" t2)
###             ("_applC" ("_position" Fvar) ("_position" s))
###             ("_applC" ("_position" Fvar) ("_position" p)))
###           ("_applC" ("_position" return)
###             ("_applC" ("_position" the)
###               ("\<^const>TypedSigma.type_get" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("\<^const>Set.inter"
###               ("_applC" ("_position" env_dom)
###                 ("\<^const>Environments.add"
###                   ("\<^const>Environments.add" ("_position" e1)
###                     ("_position" s) ("_position" T))
###                   ("_position" p)
###                   ("_applC" ("_position" param)
###                     ("_applC" ("_position" the)
###                       ("\<^const>Power.power_class.power" ("_position" T)
###                         ("_position" l))))))
###               ("_applC" ("_position" env_dom) ("_position" e2)))
###             ("\<^const>Set.empty"))
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" ok) ("_position" e2))
###             ("\<^const>TypedSigma.typing"
###               ("\<^const>Environments.env_app"
###                 ("\<^const>Environments.add"
###                   ("\<^const>Environments.add" ("_position" e1)
###                     ("_position" s) ("_position" T))
###                   ("_position" p)
###                   ("_applC" ("_position" param)
###                     ("_applC" ("_position" the)
###                       ("\<^const>TypedSigma.type_get" ("_position" T)
###                         ("_position" l)))))
###                 ("_position" e2))
###               ("\<^const>Sigma.openz" ("_position" t2)
###                 ("_applC" ("_position" Fvar) ("_position" s))
###                 ("_applC" ("_position" Fvar) ("_position" p)))
###               ("_applC" ("_position" return)
###                 ("_applC" ("_position" the)
###                   ("\<^const>Power.power_class.power" ("_position" T)
###                     ("_position" l)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 629 of "$AFP/Locally-Nameless-Sigma/Sigma/TypedSigma.thy") produces 32 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" s) ("_position" p))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" s)
###           ("\<^const>Set.union" ("_position" F)
###             ("_applC" ("_position" env_dom)
###               ("\<^const>Groups.plus_class.plus" ("_position" e1)
###                 ("_position" e2)))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" p)
###             ("\<^const>Set.union" ("_position" F)
###               ("_applC" ("_position" env_dom)
###                 ("\<^const>Groups.plus_class.plus" ("_position" e1)
###                   ("_position" e2)))))
###           ("\<^const>HOL.not_equal" ("_position" s) ("_position" p))))
###       ("\<^const>TypedSigma.typing"
###         ("\<^const>Environments.add"
###           ("\<^const>Environments.add"
###             ("\<^const>Groups.plus_class.plus" ("_position" e1)
###               ("_position" e2))
###             ("_position" s) ("_position" T))
###           ("_position" p)
###           ("_applC" ("_position" param)
###             ("_applC" ("_position" the)
###               ("\<^const>Power.power_class.power" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>Sigma.openz" ("_position" t2)
###           ("_applC" ("_position" Fvar) ("_position" s))
###           ("_applC" ("_position" Fvar) ("_position" p)))
###         ("_applC" ("_position" return)
###           ("_applC" ("_position" the)
###             ("\<^const>TypedSigma.type_get" ("_position" T)
###               ("_position" l))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" s) ("_position" p))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" s)
###           ("\<^const>Set.union" ("_position" F)
###             ("_applC" ("_position" env_dom)
###               ("\<^const>Environments.env_app" ("_position" e1)
###                 ("_position" e2)))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" p)
###             ("\<^const>Set.union" ("_position" F)
###               ("_applC" ("_position" env_dom)
###                 ("\<^const>Groups.plus_class.plus" ("_position" e1)
###                   ("_position" e2)))))
###           ("\<^const>HOL.not_equal" ("_position" s) ("_position" p))))
###       ("\<^const>TypedSigma.typing"
###         ("\<^const>Environments.add"
###           ("\<^const>Environments.add"
###             ("\<^const>Groups.plus_class.plus" ("_position" e1)
###               ("_position" e2))
###             ("_position" s) ("_position" T))
###           ("_position" p)
###           ("_applC" ("_position" param)
###             ("_applC" ("_position" the)
###               ("\<^const>Power.power_class.power" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>Sigma.openz" ("_position" t2)
###           ("_applC" ("_position" Fvar) ("_position" s))
###           ("_applC" ("_position" Fvar) ("_position" p)))
###         ("_applC" ("_position" return)
###           ("_applC" ("_position" the)
###             ("\<^const>TypedSigma.type_get" ("_position" T)
###               ("_position" l))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" s) ("_position" p))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" s)
###           ("\<^const>Set.union" ("_position" F)
###             ("_applC" ("_position" env_dom)
###               ("\<^const>Groups.plus_class.plus" ("_position" e1)
###                 ("_position" e2)))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" p)
###             ("\<^const>Set.union" ("_position" F)
###               ("_applC" ("_position" env_dom)
###                 ("\<^const>Environments.env_app" ("_position" e1)
###                   ("_position" e2)))))
###           ("\<^const>HOL.not_equal" ("_position" s) ("_position" p))))
###       ("\<^const>TypedSigma.typing"
###         ("\<^const>Environments.add"
###           ("\<^const>Environments.add"
###             ("\<^const>Groups.plus_class.plus" ("_position" e1)
###               ("_position" e2))
###             ("_position" s) ("_position" T))
###           ("_position" p)
###           ("_applC" ("_position" param)
###             ("_applC" ("_position" the)
###               ("\<^const>Power.power_class.power" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>Sigma.openz" ("_position" t2)
###           ("_applC" ("_position" Fvar) ("_position" s))
###           ("_applC" ("_position" Fvar) ("_position" p)))
###         ("_applC" ("_position" return)
###           ("_applC" ("_position" the)
###             ("\<^const>TypedSigma.type_get" ("_position" T)
###               ("_position" l))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" s) ("_position" p))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" s)
###           ("\<^const>Set.union" ("_position" F)
###             ("_applC" ("_position" env_dom)
###               ("\<^const>Environments.env_app" ("_position" e1)
###                 ("_position" e2)))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" p)
###             ("\<^const>Set.union" ("_position" F)
###               ("_applC" ("_position" env_dom)
###                 ("\<^const>Environments.env_app" ("_position" e1)
###                   ("_position" e2)))))
###           ("\<^const>HOL.not_equal" ("_position" s) ("_position" p))))
###       ("\<^const>TypedSigma.typing"
###         ("\<^const>Environments.add"
###           ("\<^const>Environments.add"
###             ("\<^const>Groups.plus_class.plus" ("_position" e1)
###               ("_position" e2))
###             ("_position" s) ("_position" T))
###           ("_position" p)
###           ("_applC" ("_position" param)
###             ("_applC" ("_position" the)
###               ("\<^const>Power.power_class.power" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>Sigma.openz" ("_position" t2)
###           ("_applC" ("_position" Fvar) ("_position" s))
###           ("_applC" ("_position" Fvar) ("_position" p)))
###         ("_applC" ("_position" return)
###           ("_applC" ("_position" the)
###             ("\<^const>TypedSigma.type_get" ("_position" T)
###               ("_position" l))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" s) ("_position" p))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" s)
###           ("\<^const>Set.union" ("_position" F)
###             ("_applC" ("_position" env_dom)
###               ("\<^const>Groups.plus_class.plus" ("_position" e1)
###                 ("_position" e2)))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" p)
###             ("\<^const>Set.union" ("_position" F)
###               ("_applC" ("_position" env_dom)
###                 ("\<^const>Groups.plus_class.plus" ("_position" e1)
###                   ("_position" e2)))))
###           ("\<^const>HOL.not_equal" ("_position" s) ("_position" p))))
###       ("\<^const>TypedSigma.typing"
###         ("\<^const>Environments.add"
###           ("\<^const>Environments.add"
###             ("\<^const>Environments.env_app" ("_position" e1)
###               ("_position" e2))
###             ("_position" s) ("_position" T))
###           ("_position" p)
###           ("_applC" ("_position" param)
###             ("_applC" ("_position" the)
###               ("\<^const>Power.power_class.power" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>Sigma.openz" ("_position" t2)
###           ("_applC" ("_position" Fvar) ("_position" s))
###           ("_applC" ("_position" Fvar) ("_position" p)))
###         ("_applC" ("_position" return)
###           ("_applC" ("_position" the)
###             ("\<^const>TypedSigma.type_get" ("_position" T)
###               ("_position" l))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" s) ("_position" p))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" s)
###           ("\<^const>Set.union" ("_position" F)
###             ("_applC" ("_position" env_dom)
###               ("\<^const>Environments.env_app" ("_position" e1)
###                 ("_position" e2)))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" p)
###             ("\<^const>Set.union" ("_position" F)
###               ("_applC" ("_position" env_dom)
###                 ("\<^const>Groups.plus_class.plus" ("_position" e1)
###                   ("_position" e2)))))
###           ("\<^const>HOL.not_equal" ("_position" s) ("_position" p))))
###       ("\<^const>TypedSigma.typing"
###         ("\<^const>Environments.add"
###           ("\<^const>Environments.add"
###             ("\<^const>Environments.env_app" ("_position" e1)
###               ("_position" e2))
###             ("_position" s) ("_position" T))
###           ("_position" p)
###           ("_applC" ("_position" param)
###             ("_applC" ("_position" the)
###               ("\<^const>Power.power_class.power" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>Sigma.openz" ("_position" t2)
###           ("_applC" ("_position" Fvar) ("_position" s))
###           ("_applC" ("_position" Fvar) ("_position" p)))
###         ("_applC" ("_position" return)
###           ("_applC" ("_position" the)
###             ("\<^const>TypedSigma.type_get" ("_position" T)
###               ("_position" l))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" s) ("_position" p))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" s)
###           ("\<^const>Set.union" ("_position" F)
###             ("_applC" ("_position" env_dom)
###               ("\<^const>Groups.plus_class.plus" ("_position" e1)
###                 ("_position" e2)))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" p)
###             ("\<^const>Set.union" ("_position" F)
###               ("_applC" ("_position" env_dom)
###                 ("\<^const>Environments.env_app" ("_position" e1)
###                   ("_position" e2)))))
###           ("\<^const>HOL.not_equal" ("_position" s) ("_position" p))))
###       ("\<^const>TypedSigma.typing"
###         ("\<^const>Environments.add"
###           ("\<^const>Environments.add"
###             ("\<^const>Environments.env_app" ("_position" e1)
###               ("_position" e2))
###             ("_position" s) ("_position" T))
###           ("_position" p)
###           ("_applC" ("_position" param)
###             ("_applC" ("_position" the)
###               ("\<^const>Power.power_class.power" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>Sigma.openz" ("_position" t2)
###           ("_applC" ("_position" Fvar) ("_position" s))
###           ("_applC" ("_position" Fvar) ("_position" p)))
###         ("_applC" ("_position" return)
###           ("_applC" ("_position" the)
###             ("\<^const>TypedSigma.type_get" ("_position" T)
###               ("_position" l))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" s) ("_position" p))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" s)
###           ("\<^const>Set.union" ("_position" F)
###             ("_applC" ("_position" env_dom)
###               ("\<^const>Environments.env_app" ("_position" e1)
###                 ("_position" e2)))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" p)
###             ("\<^const>Set.union" ("_position" F)
###               ("_applC" ("_position" env_dom)
###                 ("\<^const>Environments.env_app" ("_position" e1)
###                   ("_position" e2)))))
###           ("\<^const>HOL.not_equal" ("_position" s) ("_position" p))))
###       ("\<^const>TypedSigma.typing"
###         ("\<^const>Environments.add"
###           ("\<^const>Environments.add"
###             ("\<^const>Environments.env_app" ("_position" e1)
###               ("_position" e2))
###             ("_position" s) ("_position" T))
###           ("_position" p)
###           ("_applC" ("_position" param)
###             ("_applC" ("_position" the)
###               ("\<^const>Power.power_class.power" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>Sigma.openz" ("_position" t2)
###           ("_applC" ("_position" Fvar) ("_position" s))
###           ("_applC" ("_position" Fvar) ("_position" p)))
###         ("_applC" ("_position" return)
###           ("_applC" ("_position" the)
###             ("\<^const>TypedSigma.type_get" ("_position" T)
###               ("_position" l))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" s) ("_position" p))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" s)
###           ("\<^const>Set.union" ("_position" F)
###             ("_applC" ("_position" env_dom)
###               ("\<^const>Groups.plus_class.plus" ("_position" e1)
###                 ("_position" e2)))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" p)
###             ("\<^const>Set.union" ("_position" F)
###               ("_applC" ("_position" env_dom)
###                 ("\<^const>Groups.plus_class.plus" ("_position" e1)
###                   ("_position" e2)))))
###           ("\<^const>HOL.not_equal" ("_position" s) ("_position" p))))
###       ("\<^const>TypedSigma.typing"
###         ("\<^const>Environments.add"
###           ("\<^const>Environments.add"
###             ("\<^const>Groups.plus_class.plus" ("_position" e1)
###               ("_position" e2))
###             ("_position" s) ("_position" T))
###           ("_position" p)
###           ("_applC" ("_position" param)
###             ("_applC" ("_position" the)
###               ("\<^const>TypedSigma.type_get" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>Sigma.openz" ("_position" t2)
###           ("_applC" ("_position" Fvar) ("_position" s))
###           ("_applC" ("_position" Fvar) ("_position" p)))
###         ("_applC" ("_position" return)
###           ("_applC" ("_position" the)
###             ("\<^const>TypedSigma.type_get" ("_position" T)
###               ("_position" l))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" s) ("_position" p))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" s)
###           ("\<^const>Set.union" ("_position" F)
###             ("_applC" ("_position" env_dom)
###               ("\<^const>Environments.env_app" ("_position" e1)
###                 ("_position" e2)))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" p)
###             ("\<^const>Set.union" ("_position" F)
###               ("_applC" ("_position" env_dom)
###                 ("\<^const>Groups.plus_class.plus" ("_position" e1)
###                   ("_position" e2)))))
###           ("\<^const>HOL.not_equal" ("_position" s) ("_position" p))))
###       ("\<^const>TypedSigma.typing"
###         ("\<^const>Environments.add"
###           ("\<^const>Environments.add"
###             ("\<^const>Groups.plus_class.plus" ("_position" e1)
###               ("_position" e2))
###             ("_position" s) ("_position" T))
###           ("_position" p)
###           ("_applC" ("_position" param)
###             ("_applC" ("_position" the)
###               ("\<^const>TypedSigma.type_get" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>Sigma.openz" ("_position" t2)
###           ("_applC" ("_position" Fvar) ("_position" s))
###           ("_applC" ("_position" Fvar) ("_position" p)))
###         ("_applC" ("_position" return)
###           ("_applC" ("_position" the)
###             ("\<^const>TypedSigma.type_get" ("_position" T)
###               ("_position" l))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 649 of "$AFP/Locally-Nameless-Sigma/Sigma/TypedSigma.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter" ("_applC" ("_position" env_dom) ("_position" e))
###         ("_applC" ("_position" env_dom) ("_position" e')))
###       ("\<^const>Set.empty")))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" ok) ("_position" e')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypedSigma.typing"
###         ("\<^const>Environments.env_app" ("_position" e) ("_position" e'))
###         ("_position" t) ("_position" A)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter" ("_applC" ("_position" env_dom) ("_position" e))
###         ("_applC" ("_position" env_dom) ("_position" e')))
###       ("\<^const>Set.empty")))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" ok) ("_position" e')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Groups.plus_class.plus" ("_position" e)
###         ("\<^const>TypedSigma.typing" ("_position" e') ("_position" t)
###           ("_position" A))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter" ("_applC" ("_position" env_dom) ("_position" e))
###         ("_applC" ("_position" env_dom) ("_position" e')))
###       ("\<^const>Set.empty")))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" ok) ("_position" e')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Environments.env_app" ("_position" e)
###         ("\<^const>TypedSigma.typing" ("_position" e') ("_position" t)
###           ("_position" A))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 716 of "$AFP/Locally-Nameless-Sigma/Sigma/TypedSigma.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" sa) ("_position" pa))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" sa) ("_position" F))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" pa) ("_position" F))
###           ("\<^const>HOL.not_equal" ("_position" sa) ("_position" pa))))
###       ("\<^const>HOL.conj"
###         ("\<^const>TypedSigma.typing"
###           ("\<^const>Environments.add"
###             ("\<^const>Environments.add" ("_position" env) ("_position" sa)
###               ("_position" T))
###             ("_position" pa)
###             ("_applC" ("_position" param)
###               ("_applC" ("_position" the)
###                 ("\<^const>Power.power_class.power" ("_position" T)
###                   ("_position" l)))))
###           ("\<^const>Sigma.openz" ("_position" t)
###             ("_applC" ("_position" Fvar) ("_position" sa))
###             ("_applC" ("_position" Fvar) ("_position" pa)))
###           ("_applC" ("_position" return)
###             ("_applC" ("_position" the)
###               ("\<^const>TypedSigma.type_get" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" env'')
###             ("_idts" ("_position" t'')
###               ("_idts" ("_position" s')
###                 ("_idts" ("_position" p')
###                   ("_idts" ("_position" x')
###                     ("_idts" ("_position" y')
###                       ("_idts" ("_position" A')
###                         ("_idts" ("_position" B') ("_position" n')))))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.not_member" ("_position" s')
###               ("\<^const>Set.union"
###                 ("\<^const>Set.union"
###                   ("_applC" ("_position" FV) ("_position" t''))
###                   ("_applC" ("_position" FV) ("_position" x')))
###                 ("_applC" ("_position" FV) ("_position" y'))))
###             ("\<^const>HOL.implies"
###               ("\<^const>Set.not_member" ("_position" p')
###                 ("\<^const>Set.union"
###                   ("\<^const>Set.union"
###                     ("_applC" ("_position" FV) ("_position" t''))
###                     ("_applC" ("_position" FV) ("_position" x')))
###                   ("_applC" ("_position" FV) ("_position" y'))))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.not_equal" ("_position" s') ("_position" p'))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>TypedSigma.typing" ("_position" env'')
###                     ("_position" x') ("_position" A'))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>TypedSigma.typing" ("_position" env'')
###                       ("_position" y') ("_position" B'))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.eq"
###                         ("\<^const>Sigma.openz" ("_position" t)
###                           ("_applC" ("_position" Fvar) ("_position" sa))
###                           ("_applC" ("_position" Fvar) ("_position" pa)))
###                         ("\<^const>Sigma.sopen" ("_position" n')
###                           ("_applC" ("_position" Fvar) ("_position" s'))
###                           ("_applC" ("_position" Fvar) ("_position" p'))
###                           ("_position" t'')))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.eq"
###                           ("\<^const>Environments.add"
###                             ("\<^const>Environments.add" ("_position" env)
###                               ("_position" sa) ("_position" T))
###                             ("_position" pa)
###                             ("_applC" ("_position" param)
###                               ("_applC" ("_position" the)
###                                 ("\<^const>TypedSigma.type_get"
###                                   ("_position" T) ("_position" l)))))
###                           ("\<^const>Environments.add"
###                             ("\<^const>Environments.add" ("_position" env'')
###                               ("_position" s') ("_position" A'))
###                             ("_position" p') ("_position" B')))
###                         ("\<^const>TypedSigma.typing" ("_position" env'')
###                           ("\<^const>Sigma.sopen" ("_position" n')
###                             ("_position" x') ("_position" y')
###                             ("_position" t''))
###                           ("_applC" ("_position" return)
###                             ("_applC" ("_position" the)
###                               ("\<^const>Power.power_class.power"
###                                 ("_position" T)
###                                 ("_position" l)))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" sa) ("_position" pa))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" sa) ("_position" F))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" pa) ("_position" F))
###           ("\<^const>HOL.not_equal" ("_position" sa) ("_position" pa))))
###       ("\<^const>HOL.conj"
###         ("\<^const>TypedSigma.typing"
###           ("\<^const>Environments.add"
###             ("\<^const>Environments.add" ("_position" env) ("_position" sa)
###               ("_position" T))
###             ("_position" pa)
###             ("_applC" ("_position" param)
###               ("_applC" ("_position" the)
###                 ("\<^const>TypedSigma.type_get" ("_position" T)
###                   ("_position" l)))))
###           ("\<^const>Sigma.openz" ("_position" t)
###             ("_applC" ("_position" Fvar) ("_position" sa))
###             ("_applC" ("_position" Fvar) ("_position" pa)))
###           ("_applC" ("_position" return)
###             ("_applC" ("_position" the)
###               ("\<^const>TypedSigma.type_get" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" env'')
###             ("_idts" ("_position" t'')
###               ("_idts" ("_position" s')
###                 ("_idts" ("_position" p')
###                   ("_idts" ("_position" x')
###                     ("_idts" ("_position" y')
###                       ("_idts" ("_position" A')
###                         ("_idts" ("_position" B') ("_position" n')))))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.not_member" ("_position" s')
###               ("\<^const>Set.union"
###                 ("\<^const>Set.union"
###                   ("_applC" ("_position" FV) ("_position" t''))
###                   ("_applC" ("_position" FV) ("_position" x')))
###                 ("_applC" ("_position" FV) ("_position" y'))))
###             ("\<^const>HOL.implies"
###               ("\<^const>Set.not_member" ("_position" p')
###                 ("\<^const>Set.union"
###                   ("\<^const>Set.union"
###                     ("_applC" ("_position" FV) ("_position" t''))
###                     ("_applC" ("_position" FV) ("_position" x')))
###                   ("_applC" ("_position" FV) ("_position" y'))))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.not_equal" ("_position" s') ("_position" p'))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>TypedSigma.typing" ("_position" env'')
###                     ("_position" x') ("_position" A'))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>TypedSigma.typing" ("_position" env'')
###                       ("_position" y') ("_position" B'))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.eq"
###                         ("\<^const>Sigma.openz" ("_position" t)
###                           ("_applC" ("_position" Fvar) ("_position" sa))
###                           ("_applC" ("_position" Fvar) ("_position" pa)))
###                         ("\<^const>Sigma.sopen" ("_position" n')
###                           ("_applC" ("_position" Fvar) ("_position" s'))
###                           ("_applC" ("_position" Fvar) ("_position" p'))
###                           ("_position" t'')))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.eq"
###                           ("\<^const>Environments.add"
###                             ("\<^const>Environments.add" ("_position" env)
###                               ("_position" sa) ("_position" T))
###                             ("_position" pa)
###                             ("_applC" ("_position" param)
###                               ("_applC" ("_position" the)
###                                 ("\<^const>TypedSigma.type_get"
###                                   ("_position" T) ("_position" l)))))
###                           ("\<^const>Environments.add"
###                             ("\<^const>Environments.add" ("_position" env'')
###                               ("_position" s') ("_position" A'))
###                             ("_position" p') ("_position" B')))
###                         ("\<^const>TypedSigma.typing" ("_position" env'')
###                           ("\<^const>Sigma.sopen" ("_position" n')
###                             ("_position" x') ("_position" y')
###                             ("_position" t''))
###                           ("_applC" ("_position" return)
###                             ("_applC" ("_position" the)
###                               ("\<^const>Power.power_class.power"
###                                 ("_position" T)
###                                 ("_position" l)))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" sa) ("_position" pa))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" sa) ("_position" F))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" pa) ("_position" F))
###           ("\<^const>HOL.not_equal" ("_position" sa) ("_position" pa))))
###       ("\<^const>HOL.conj"
###         ("\<^const>TypedSigma.typing"
###           ("\<^const>Environments.add"
###             ("\<^const>Environments.add" ("_position" env) ("_position" sa)
###               ("_position" T))
###             ("_position" pa)
###             ("_applC" ("_position" param)
###               ("_applC" ("_position" the)
###                 ("\<^const>Power.power_class.power" ("_position" T)
###                   ("_position" l)))))
###           ("\<^const>Sigma.openz" ("_position" t)
###             ("_applC" ("_position" Fvar) ("_position" sa))
###             ("_applC" ("_position" Fvar) ("_position" pa)))
###           ("_applC" ("_position" return)
###             ("_applC" ("_position" the)
###               ("\<^const>Power.power_class.power" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" env'')
###             ("_idts" ("_position" t'')
###               ("_idts" ("_position" s')
###                 ("_idts" ("_position" p')
###                   ("_idts" ("_position" x')
###                     ("_idts" ("_position" y')
###                       ("_idts" ("_position" A')
###                         ("_idts" ("_position" B') ("_position" n')))))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.not_member" ("_position" s')
###               ("\<^const>Set.union"
###                 ("\<^const>Set.union"
###                   ("_applC" ("_position" FV) ("_position" t''))
###                   ("_applC" ("_position" FV) ("_position" x')))
###                 ("_applC" ("_position" FV) ("_position" y'))))
###             ("\<^const>HOL.implies"
###               ("\<^const>Set.not_member" ("_position" p')
###                 ("\<^const>Set.union"
###                   ("\<^const>Set.union"
###                     ("_applC" ("_position" FV) ("_position" t''))
###                     ("_applC" ("_position" FV) ("_position" x')))
###                   ("_applC" ("_position" FV) ("_position" y'))))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.not_equal" ("_position" s') ("_position" p'))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>TypedSigma.typing" ("_position" env'')
###                     ("_position" x') ("_position" A'))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>TypedSigma.typing" ("_position" env'')
###                       ("_position" y') ("_position" B'))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.eq"
###                         ("\<^const>Sigma.openz" ("_position" t)
###                           ("_applC" ("_position" Fvar) ("_position" sa))
###                           ("_applC" ("_position" Fvar) ("_position" pa)))
###                         ("\<^const>Sigma.sopen" ("_position" n')
###                           ("_applC" ("_position" Fvar) ("_position" s'))
###                           ("_applC" ("_position" Fvar) ("_position" p'))
###                           ("_position" t'')))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.eq"
###                           ("\<^const>Environments.add"
###                             ("\<^const>Environments.add" ("_position" env)
###                               ("_position" sa) ("_position" T))
###                             ("_position" pa)
###                             ("_applC" ("_position" param)
###                               ("_applC" ("_position" the)
###                                 ("\<^const>TypedSigma.type_get"
###                                   ("_position" T) ("_position" l)))))
###                           ("\<^const>Environments.add"
###                             ("\<^const>Environments.add" ("_position" env'')
###                               ("_position" s') ("_position" A'))
###                             ("_position" p') ("_position" B')))
###                         ("\<^const>TypedSigma.typing" ("_position" env'')
###                           ("\<^const>Sigma.sopen" ("_position" n')
###                             ("_position" x') ("_position" y')
###                             ("_position" t''))
###                           ("_applC" ("_position" return)
###                             ("_applC" ("_position" the)
###                               ("\<^const>Power.power_class.power"
###                                 ("_position" T)
###                                 ("_position" l)))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" sa) ("_position" pa))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" sa) ("_position" F))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" pa) ("_position" F))
###           ("\<^const>HOL.not_equal" ("_position" sa) ("_position" pa))))
###       ("\<^const>HOL.conj"
###         ("\<^const>TypedSigma.typing"
###           ("\<^const>Environments.add"
###             ("\<^const>Environments.add" ("_position" env) ("_position" sa)
###               ("_position" T))
###             ("_position" pa)
###             ("_applC" ("_position" param)
###               ("_applC" ("_position" the)
###                 ("\<^const>TypedSigma.type_get" ("_position" T)
###                   ("_position" l)))))
###           ("\<^const>Sigma.openz" ("_position" t)
###             ("_applC" ("_position" Fvar) ("_position" sa))
###             ("_applC" ("_position" Fvar) ("_position" pa)))
###           ("_applC" ("_position" return)
###             ("_applC" ("_position" the)
###               ("\<^const>Power.power_class.power" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" env'')
###             ("_idts" ("_position" t'')
###               ("_idts" ("_position" s')
###                 ("_idts" ("_position" p')
###                   ("_idts" ("_position" x')
###                     ("_idts" ("_position" y')
###                       ("_idts" ("_position" A')
###                         ("_idts" ("_position" B') ("_position" n')))))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.not_member" ("_position" s')
###               ("\<^const>Set.union"
###                 ("\<^const>Set.union"
###                   ("_applC" ("_position" FV) ("_position" t''))
###                   ("_applC" ("_position" FV) ("_position" x')))
###                 ("_applC" ("_position" FV) ("_position" y'))))
###             ("\<^const>HOL.implies"
###               ("\<^const>Set.not_member" ("_position" p')
###                 ("\<^const>Set.union"
###                   ("\<^const>Set.union"
###                     ("_applC" ("_position" FV) ("_position" t''))
###                     ("_applC" ("_position" FV) ("_position" x')))
###                   ("_applC" ("_position" FV) ("_position" y'))))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.not_equal" ("_position" s') ("_position" p'))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>TypedSigma.typing" ("_position" env'')
###                     ("_position" x') ("_position" A'))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>TypedSigma.typing" ("_position" env'')
###                       ("_position" y') ("_position" B'))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.eq"
###                         ("\<^const>Sigma.openz" ("_position" t)
###                           ("_applC" ("_position" Fvar) ("_position" sa))
###                           ("_applC" ("_position" Fvar) ("_position" pa)))
###                         ("\<^const>Sigma.sopen" ("_position" n')
###                           ("_applC" ("_position" Fvar) ("_position" s'))
###                           ("_applC" ("_position" Fvar) ("_position" p'))
###                           ("_position" t'')))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.eq"
###                           ("\<^const>Environments.add"
###                             ("\<^const>Environments.add" ("_position" env)
###                               ("_position" sa) ("_position" T))
###                             ("_position" pa)
###                             ("_applC" ("_position" param)
###                               ("_applC" ("_position" the)
###                                 ("\<^const>TypedSigma.type_get"
###                                   ("_position" T) ("_position" l)))))
###                           ("\<^const>Environments.add"
###                             ("\<^const>Environments.add" ("_position" env'')
###                               ("_position" s') ("_position" A'))
###                             ("_position" p') ("_position" B')))
###                         ("\<^const>TypedSigma.typing" ("_position" env'')
###                           ("\<^const>Sigma.sopen" ("_position" n')
###                             ("_position" x') ("_position" y')
###                             ("_position" t''))
###                           ("_applC" ("_position" return)
###                             ("_applC" ("_position" the)
###                               ("\<^const>Power.power_class.power"
###                                 ("_position" T)
###                                 ("_position" l)))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" sa) ("_position" pa))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" sa) ("_position" F))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" pa) ("_position" F))
###           ("\<^const>HOL.not_equal" ("_position" sa) ("_position" pa))))
###       ("\<^const>HOL.conj"
###         ("\<^const>TypedSigma.typing"
###           ("\<^const>Environments.add"
###             ("\<^const>Environments.add" ("_position" env) ("_position" sa)
###               ("_position" T))
###             ("_position" pa)
###             ("_applC" ("_position" param)
###               ("_applC" ("_position" the)
###                 ("\<^const>Power.power_class.power" ("_position" T)
###                   ("_position" l)))))
###           ("\<^const>Sigma.openz" ("_position" t)
###             ("_applC" ("_position" Fvar) ("_position" sa))
###             ("_applC" ("_position" Fvar) ("_position" pa)))
###           ("_applC" ("_position" return)
###             ("_applC" ("_position" the)
###               ("\<^const>TypedSigma.type_get" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" env'')
###             ("_idts" ("_position" t'')
###               ("_idts" ("_position" s')
###                 ("_idts" ("_position" p')
###                   ("_idts" ("_position" x')
###                     ("_idts" ("_position" y')
###                       ("_idts" ("_position" A')
###                         ("_idts" ("_position" B') ("_position" n')))))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.not_member" ("_position" s')
###               ("\<^const>Set.union"
###                 ("\<^const>Set.union"
###                   ("_applC" ("_position" FV) ("_position" t''))
###                   ("_applC" ("_position" FV) ("_position" x')))
###                 ("_applC" ("_position" FV) ("_position" y'))))
###             ("\<^const>HOL.implies"
###               ("\<^const>Set.not_member" ("_position" p')
###                 ("\<^const>Set.union"
###                   ("\<^const>Set.union"
###                     ("_applC" ("_position" FV) ("_position" t''))
###                     ("_applC" ("_position" FV) ("_position" x')))
###                   ("_applC" ("_position" FV) ("_position" y'))))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.not_equal" ("_position" s') ("_position" p'))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>TypedSigma.typing" ("_position" env'')
###                     ("_position" x') ("_position" A'))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>TypedSigma.typing" ("_position" env'')
###                       ("_position" y') ("_position" B'))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.eq"
###                         ("\<^const>Sigma.openz" ("_position" t)
###                           ("_applC" ("_position" Fvar) ("_position" sa))
###                           ("_applC" ("_position" Fvar) ("_position" pa)))
###                         ("\<^const>Sigma.sopen" ("_position" n')
###                           ("_applC" ("_position" Fvar) ("_position" s'))
###                           ("_applC" ("_position" Fvar) ("_position" p'))
###                           ("_position" t'')))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.eq"
###                           ("\<^const>Environments.add"
###                             ("\<^const>Environments.add" ("_position" env)
###                               ("_position" sa) ("_position" T))
###                             ("_position" pa)
###                             ("_applC" ("_position" param)
###                               ("_applC" ("_position" the)
###                                 ("\<^const>Power.power_class.power"
###                                   ("_position" T) ("_position" l)))))
###                           ("\<^const>Environments.add"
###                             ("\<^const>Environments.add" ("_position" env'')
###                               ("_position" s') ("_position" A'))
###                             ("_position" p') ("_position" B')))
###                         ("\<^const>TypedSigma.typing" ("_position" env'')
###                           ("\<^const>Sigma.sopen" ("_position" n')
###                             ("_position" x') ("_position" y')
###                             ("_position" t''))
###                           ("_applC" ("_position" return)
###                             ("_applC" ("_position" the)
###                               ("\<^const>Power.power_class.power"
###                                 ("_position" T)
###                                 ("_position" l)))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" sa) ("_position" pa))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" sa) ("_position" F))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" pa) ("_position" F))
###           ("\<^const>HOL.not_equal" ("_position" sa) ("_position" pa))))
###       ("\<^const>HOL.conj"
###         ("\<^const>TypedSigma.typing"
###           ("\<^const>Environments.add"
###             ("\<^const>Environments.add" ("_position" env) ("_position" sa)
###               ("_position" T))
###             ("_position" pa)
###             ("_applC" ("_position" param)
###               ("_applC" ("_position" the)
###                 ("\<^const>TypedSigma.type_get" ("_position" T)
###                   ("_position" l)))))
###           ("\<^const>Sigma.openz" ("_position" t)
###             ("_applC" ("_position" Fvar) ("_position" sa))
###             ("_applC" ("_position" Fvar) ("_position" pa)))
###           ("_applC" ("_position" return)
###             ("_applC" ("_position" the)
###               ("\<^const>TypedSigma.type_get" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" env'')
###             ("_idts" ("_position" t'')
###               ("_idts" ("_position" s')
###                 ("_idts" ("_position" p')
###                   ("_idts" ("_position" x')
###                     ("_idts" ("_position" y')
###                       ("_idts" ("_position" A')
###                         ("_idts" ("_position" B') ("_position" n')))))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.not_member" ("_position" s')
###               ("\<^const>Set.union"
###                 ("\<^const>Set.union"
###                   ("_applC" ("_position" FV) ("_position" t''))
###                   ("_applC" ("_position" FV) ("_position" x')))
###                 ("_applC" ("_position" FV) ("_position" y'))))
###             ("\<^const>HOL.implies"
###               ("\<^const>Set.not_member" ("_position" p')
###                 ("\<^const>Set.union"
###                   ("\<^const>Set.union"
###                     ("_applC" ("_position" FV) ("_position" t''))
###                     ("_applC" ("_position" FV) ("_position" x')))
###                   ("_applC" ("_position" FV) ("_position" y'))))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.not_equal" ("_position" s') ("_position" p'))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>TypedSigma.typing" ("_position" env'')
###                     ("_position" x') ("_position" A'))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>TypedSigma.typing" ("_position" env'')
###                       ("_position" y') ("_position" B'))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.eq"
###                         ("\<^const>Sigma.openz" ("_position" t)
###                           ("_applC" ("_position" Fvar) ("_position" sa))
###                           ("_applC" ("_position" Fvar) ("_position" pa)))
###                         ("\<^const>Sigma.sopen" ("_position" n')
###                           ("_applC" ("_position" Fvar) ("_position" s'))
###                           ("_applC" ("_position" Fvar) ("_position" p'))
###                           ("_position" t'')))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.eq"
###                           ("\<^const>Environments.add"
###                             ("\<^const>Environments.add" ("_position" env)
###                               ("_position" sa) ("_position" T))
###                             ("_position" pa)
###                             ("_applC" ("_position" param)
###                               ("_applC" ("_position" the)
###                                 ("\<^const>Power.power_class.power"
###                                   ("_position" T) ("_position" l)))))
###                           ("\<^const>Environments.add"
###                             ("\<^const>Environments.add" ("_position" env'')
###                               ("_position" s') ("_position" A'))
###                             ("_position" p') ("_position" B')))
###                         ("\<^const>TypedSigma.typing" ("_position" env'')
###                           ("\<^const>Sigma.sopen" ("_position" n')
###                             ("_position" x') ("_position" y')
###                             ("_position" t''))
###                           ("_applC" ("_position" return)
###                             ("_applC" ("_position" the)
###                               ("\<^const>Power.power_class.power"
###                                 ("_position" T)
###                                 ("_position" l)))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" sa) ("_position" pa))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" sa) ("_position" F))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" pa) ("_position" F))
###           ("\<^const>HOL.not_equal" ("_position" sa) ("_position" pa))))
###       ("\<^const>HOL.conj"
###         ("\<^const>TypedSigma.typing"
###           ("\<^const>Environments.add"
###             ("\<^const>Environments.add" ("_position" env) ("_position" sa)
###               ("_position" T))
###             ("_position" pa)
###             ("_applC" ("_position" param)
###               ("_applC" ("_position" the)
###                 ("\<^const>Power.power_class.power" ("_position" T)
###                   ("_position" l)))))
###           ("\<^const>Sigma.openz" ("_position" t)
###             ("_applC" ("_position" Fvar) ("_position" sa))
###             ("_applC" ("_position" Fvar) ("_position" pa)))
###           ("_applC" ("_position" return)
###             ("_applC" ("_position" the)
###               ("\<^const>Power.power_class.power" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" env'')
###             ("_idts" ("_position" t'')
###               ("_idts" ("_position" s')
###                 ("_idts" ("_position" p')
###                   ("_idts" ("_position" x')
###                     ("_idts" ("_position" y')
###                       ("_idts" ("_position" A')
###                         ("_idts" ("_position" B') ("_position" n')))))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.not_member" ("_position" s')
###               ("\<^const>Set.union"
###                 ("\<^const>Set.union"
###                   ("_applC" ("_position" FV) ("_position" t''))
###                   ("_applC" ("_position" FV) ("_position" x')))
###                 ("_applC" ("_position" FV) ("_position" y'))))
###             ("\<^const>HOL.implies"
###               ("\<^const>Set.not_member" ("_position" p')
###                 ("\<^const>Set.union"
###                   ("\<^const>Set.union"
###                     ("_applC" ("_position" FV) ("_position" t''))
###                     ("_applC" ("_position" FV) ("_position" x')))
###                   ("_applC" ("_position" FV) ("_position" y'))))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.not_equal" ("_position" s') ("_position" p'))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>TypedSigma.typing" ("_position" env'')
###                     ("_position" x') ("_position" A'))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>TypedSigma.typing" ("_position" env'')
###                       ("_position" y') ("_position" B'))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.eq"
###                         ("\<^const>Sigma.openz" ("_position" t)
###                           ("_applC" ("_position" Fvar) ("_position" sa))
###                           ("_applC" ("_position" Fvar) ("_position" pa)))
###                         ("\<^const>Sigma.sopen" ("_position" n')
###                           ("_applC" ("_position" Fvar) ("_position" s'))
###                           ("_applC" ("_position" Fvar) ("_position" p'))
###                           ("_position" t'')))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.eq"
###                           ("\<^const>Environments.add"
###                             ("\<^const>Environments.add" ("_position" env)
###                               ("_position" sa) ("_position" T))
###                             ("_position" pa)
###                             ("_applC" ("_position" param)
###                               ("_applC" ("_position" the)
###                                 ("\<^const>Power.power_class.power"
###                                   ("_position" T) ("_position" l)))))
###                           ("\<^const>Environments.add"
###                             ("\<^const>Environments.add" ("_position" env'')
###                               ("_position" s') ("_position" A'))
###                             ("_position" p') ("_position" B')))
###                         ("\<^const>TypedSigma.typing" ("_position" env'')
###                           ("\<^const>Sigma.sopen" ("_position" n')
###                             ("_position" x') ("_position" y')
###                             ("_position" t''))
###                           ("_applC" ("_position" return)
###                             ("_applC" ("_position" the)
###                               ("\<^const>Power.power_class.power"
###                                 ("_position" T)
###                                 ("_position" l)))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" sa) ("_position" pa))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" sa) ("_position" F))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" pa) ("_position" F))
###           ("\<^const>HOL.not_equal" ("_position" sa) ("_position" pa))))
###       ("\<^const>HOL.conj"
###         ("\<^const>TypedSigma.typing"
###           ("\<^const>Environments.add"
###             ("\<^const>Environments.add" ("_position" env) ("_position" sa)
###               ("_position" T))
###             ("_position" pa)
###             ("_applC" ("_position" param)
###               ("_applC" ("_position" the)
###                 ("\<^const>TypedSigma.type_get" ("_position" T)
###                   ("_position" l)))))
###           ("\<^const>Sigma.openz" ("_position" t)
###             ("_applC" ("_position" Fvar) ("_position" sa))
###             ("_applC" ("_position" Fvar) ("_position" pa)))
###           ("_applC" ("_position" return)
###             ("_applC" ("_position" the)
###               ("\<^const>Power.power_class.power" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" env'')
###             ("_idts" ("_position" t'')
###               ("_idts" ("_position" s')
###                 ("_idts" ("_position" p')
###                   ("_idts" ("_position" x')
###                     ("_idts" ("_position" y')
###                       ("_idts" ("_position" A')
###                         ("_idts" ("_position" B') ("_position" n')))))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.not_member" ("_position" s')
###               ("\<^const>Set.union"
###                 ("\<^const>Set.union"
###                   ("_applC" ("_position" FV) ("_position" t''))
###                   ("_applC" ("_position" FV) ("_position" x')))
###                 ("_applC" ("_position" FV) ("_position" y'))))
###             ("\<^const>HOL.implies"
###               ("\<^const>Set.not_member" ("_position" p')
###                 ("\<^const>Set.union"
###                   ("\<^const>Set.union"
###                     ("_applC" ("_position" FV) ("_position" t''))
###                     ("_applC" ("_position" FV) ("_position" x')))
###                   ("_applC" ("_position" FV) ("_position" y'))))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.not_equal" ("_position" s') ("_position" p'))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>TypedSigma.typing" ("_position" env'')
###                     ("_position" x') ("_position" A'))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>TypedSigma.typing" ("_position" env'')
###                       ("_position" y') ("_position" B'))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.eq"
###                         ("\<^const>Sigma.openz" ("_position" t)
###                           ("_applC" ("_position" Fvar) ("_position" sa))
###                           ("_applC" ("_position" Fvar) ("_position" pa)))
###                         ("\<^const>Sigma.sopen" ("_position" n')
###                           ("_applC" ("_position" Fvar) ("_position" s'))
###                           ("_applC" ("_position" Fvar) ("_position" p'))
###                           ("_position" t'')))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.eq"
###                           ("\<^const>Environments.add"
###                             ("\<^const>Environments.add" ("_position" env)
###                               ("_position" sa) ("_position" T))
###                             ("_position" pa)
###                             ("_applC" ("_position" param)
###                               ("_applC" ("_position" the)
###                                 ("\<^const>Power.power_class.power"
###                                   ("_position" T) ("_position" l)))))
###                           ("\<^const>Environments.add"
###                             ("\<^const>Environments.add" ("_position" env'')
###                               ("_position" s') ("_position" A'))
###                             ("_position" p') ("_position" B')))
###                         ("\<^const>TypedSigma.typing" ("_position" env'')
###                           ("\<^const>Sigma.sopen" ("_position" n')
###                             ("_position" x') ("_position" y')
###                             ("_position" t''))
###                           ("_applC" ("_position" return)
###                             ("_applC" ("_position" the)
###                               ("\<^const>Power.power_class.power"
###                                 ("_position" T)
###                                 ("_position" l)))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" sa) ("_position" pa))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" sa) ("_position" F))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" pa) ("_position" F))
###           ("\<^const>HOL.not_equal" ("_position" sa) ("_position" pa))))
###       ("\<^const>HOL.conj"
###         ("\<^const>TypedSigma.typing"
###           ("\<^const>Environments.add"
###             ("\<^const>Environments.add" ("_position" env) ("_position" sa)
###               ("_position" T))
###             ("_position" pa)
###             ("_applC" ("_position" param)
###               ("_applC" ("_position" the)
###                 ("\<^const>Power.power_class.power" ("_position" T)
###                   ("_position" l)))))
###           ("\<^const>Sigma.openz" ("_position" t)
###             ("_applC" ("_position" Fvar) ("_position" sa))
###             ("_applC" ("_position" Fvar) ("_position" pa)))
###           ("_applC" ("_position" return)
###             ("_applC" ("_position" the)
###               ("\<^const>TypedSigma.type_get" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" env'')
###             ("_idts" ("_position" t'')
###               ("_idts" ("_position" s')
###                 ("_idts" ("_position" p')
###                   ("_idts" ("_position" x')
###                     ("_idts" ("_position" y')
###                       ("_idts" ("_position" A')
###                         ("_idts" ("_position" B') ("_position" n')))))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.not_member" ("_position" s')
###               ("\<^const>Set.union"
###                 ("\<^const>Set.union"
###                   ("_applC" ("_position" FV) ("_position" t''))
###                   ("_applC" ("_position" FV) ("_position" x')))
###                 ("_applC" ("_position" FV) ("_position" y'))))
###             ("\<^const>HOL.implies"
###               ("\<^const>Set.not_member" ("_position" p')
###                 ("\<^const>Set.union"
###                   ("\<^const>Set.union"
###                     ("_applC" ("_position" FV) ("_position" t''))
###                     ("_applC" ("_position" FV) ("_position" x')))
###                   ("_applC" ("_position" FV) ("_position" y'))))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.not_equal" ("_position" s') ("_position" p'))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>TypedSigma.typing" ("_position" env'')
###                     ("_position" x') ("_position" A'))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>TypedSigma.typing" ("_position" env'')
###                       ("_position" y') ("_position" B'))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.eq"
###                         ("\<^const>Sigma.openz" ("_position" t)
###                           ("_applC" ("_position" Fvar) ("_position" sa))
###                           ("_applC" ("_position" Fvar) ("_position" pa)))
###                         ("\<^const>Sigma.sopen" ("_position" n')
###                           ("_applC" ("_position" Fvar) ("_position" s'))
###                           ("_applC" ("_position" Fvar) ("_position" p'))
###                           ("_position" t'')))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.eq"
###                           ("\<^const>Environments.add"
###                             ("\<^const>Environments.add" ("_position" env)
###                               ("_position" sa) ("_position" T))
###                             ("_position" pa)
###                             ("_applC" ("_position" param)
###                               ("_applC" ("_position" the)
###                                 ("\<^const>TypedSigma.type_get"
###                                   ("_position" T) ("_position" l)))))
###                           ("\<^const>Environments.add"
###                             ("\<^const>Environments.add" ("_position" env'')
###                               ("_position" s') ("_position" A'))
###                             ("_position" p') ("_position" B')))
###                         ("\<^const>TypedSigma.typing" ("_position" env'')
###                           ("\<^const>Sigma.sopen" ("_position" n')
###                             ("_position" x') ("_position" y')
###                             ("_position" t''))
###                           ("_applC" ("_position" return)
###                             ("_applC" ("_position" the)
###                               ("\<^const>TypedSigma.type_get"
###                                 ("_position" T)
###                                 ("_position" l)))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" sa) ("_position" pa))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" sa) ("_position" F))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" pa) ("_position" F))
###           ("\<^const>HOL.not_equal" ("_position" sa) ("_position" pa))))
###       ("\<^const>HOL.conj"
###         ("\<^const>TypedSigma.typing"
###           ("\<^const>Environments.add"
###             ("\<^const>Environments.add" ("_position" env) ("_position" sa)
###               ("_position" T))
###             ("_position" pa)
###             ("_applC" ("_position" param)
###               ("_applC" ("_position" the)
###                 ("\<^const>TypedSigma.type_get" ("_position" T)
###                   ("_position" l)))))
###           ("\<^const>Sigma.openz" ("_position" t)
###             ("_applC" ("_position" Fvar) ("_position" sa))
###             ("_applC" ("_position" Fvar) ("_position" pa)))
###           ("_applC" ("_position" return)
###             ("_applC" ("_position" the)
###               ("\<^const>TypedSigma.type_get" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" env'')
###             ("_idts" ("_position" t'')
###               ("_idts" ("_position" s')
###                 ("_idts" ("_position" p')
###                   ("_idts" ("_position" x')
###                     ("_idts" ("_position" y')
###                       ("_idts" ("_position" A')
###                         ("_idts" ("_position" B') ("_position" n')))))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.not_member" ("_position" s')
###               ("\<^const>Set.union"
###                 ("\<^const>Set.union"
###                   ("_applC" ("_position" FV) ("_position" t''))
###                   ("_applC" ("_position" FV) ("_position" x')))
###                 ("_applC" ("_position" FV) ("_position" y'))))
###             ("\<^const>HOL.implies"
###               ("\<^const>Set.not_member" ("_position" p')
###                 ("\<^const>Set.union"
###                   ("\<^const>Set.union"
###                     ("_applC" ("_position" FV) ("_position" t''))
###                     ("_applC" ("_position" FV) ("_position" x')))
###                   ("_applC" ("_position" FV) ("_position" y'))))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.not_equal" ("_position" s') ("_position" p'))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>TypedSigma.typing" ("_position" env'')
###                     ("_position" x') ("_position" A'))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>TypedSigma.typing" ("_position" env'')
###                       ("_position" y') ("_position" B'))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.eq"
###                         ("\<^const>Sigma.openz" ("_position" t)
###                           ("_applC" ("_position" Fvar) ("_position" sa))
###                           ("_applC" ("_position" Fvar) ("_position" pa)))
###                         ("\<^const>Sigma.sopen" ("_position" n')
###                           ("_applC" ("_position" Fvar) ("_position" s'))
###                           ("_applC" ("_position" Fvar) ("_position" p'))
###                           ("_position" t'')))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.eq"
###                           ("\<^const>Environments.add"
###                             ("\<^const>Environments.add" ("_position" env)
###                               ("_position" sa) ("_position" T))
###                             ("_position" pa)
###                             ("_applC" ("_position" param)
###                               ("_applC" ("_position" the)
###                                 ("\<^const>TypedSigma.type_get"
###                                   ("_position" T) ("_position" l)))))
###                           ("\<^const>Environments.add"
###                             ("\<^const>Environments.add" ("_position" env'')
###                               ("_position" s') ("_position" A'))
###                             ("_position" p') ("_position" B')))
###                         ("\<^const>TypedSigma.typing" ("_position" env'')
###                           ("\<^const>Sigma.sopen" ("_position" n')
###                             ("_position" x') ("_position" y')
###                             ("_position" t''))
###                           ("_applC" ("_position" return)
###                             ("_applC" ("_position" the)
###                               ("\<^const>TypedSigma.type_get"
###                                 ("_position" T)
###                                 ("_position" l)))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 730 of "$AFP/Locally-Nameless-Sigma/Sigma/TypedSigma.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" sa) ("_position" pa))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" sa)
###           ("\<^const>Set.union"
###             ("\<^const>Set.union" ("_position" F)
###               ("_Finset" ("_args" ("_position" s) ("_position" p))))
###             ("_applC" ("_position" env_dom) ("_position" env'))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" pa)
###             ("\<^const>Set.union"
###               ("\<^const>Set.union" ("_position" F)
###                 ("_Finset" ("_args" ("_position" s) ("_position" p))))
###               ("_applC" ("_position" env_dom) ("_position" env'))))
###           ("\<^const>HOL.not_equal" ("_position" sa) ("_position" pa))))
###       ("\<^const>TypedSigma.typing"
###         ("\<^const>Environments.add"
###           ("\<^const>Environments.add" ("_position" env') ("_position" sa)
###             ("_position" T))
###           ("_position" pa)
###           ("_applC" ("_position" param)
###             ("_applC" ("_position" the)
###               ("\<^const>Power.power_class.power" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>Sigma.openz"
###           ("\<^const>Sigma.sopen"
###             ("_applC" ("_position" Suc) ("_position" n)) ("_position" x)
###             ("_position" y) ("_position" t'))
###           ("_applC" ("_position" Fvar) ("_position" sa))
###           ("_applC" ("_position" Fvar) ("_position" pa)))
###         ("_applC" ("_position" return)
###           ("_applC" ("_position" the)
###             ("\<^const>TypedSigma.type_get" ("_position" T)
###               ("_position" l))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" sa) ("_position" pa))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" sa)
###           ("\<^const>Set.union"
###             ("\<^const>Set.union" ("_position" F)
###               ("_Finset" ("_args" ("_position" s) ("_position" p))))
###             ("_applC" ("_position" env_dom) ("_position" env'))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" pa)
###             ("\<^const>Set.union"
###               ("\<^const>Set.union" ("_position" F)
###                 ("_Finset" ("_args" ("_position" s) ("_position" p))))
###               ("_applC" ("_position" env_dom) ("_position" env'))))
###           ("\<^const>HOL.not_equal" ("_position" sa) ("_position" pa))))
###       ("\<^const>TypedSigma.typing"
###         ("\<^const>Environments.add"
###           ("\<^const>Environments.add" ("_position" env') ("_position" sa)
###             ("_position" T))
###           ("_position" pa)
###           ("_applC" ("_position" param)
###             ("_applC" ("_position" the)
###               ("\<^const>TypedSigma.type_get" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>Sigma.openz"
###           ("\<^const>Sigma.sopen"
###             ("_applC" ("_position" Suc) ("_position" n)) ("_position" x)
###             ("_position" y) ("_position" t'))
###           ("_applC" ("_position" Fvar) ("_position" sa))
###           ("_applC" ("_position" Fvar) ("_position" pa)))
###         ("_applC" ("_position" return)
###           ("_applC" ("_position" the)
###             ("\<^const>TypedSigma.type_get" ("_position" T)
###               ("_position" l))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" sa) ("_position" pa))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" sa)
###           ("\<^const>Set.union"
###             ("\<^const>Set.union" ("_position" F)
###               ("_Finset" ("_args" ("_position" s) ("_position" p))))
###             ("_applC" ("_position" env_dom) ("_position" env'))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" pa)
###             ("\<^const>Set.union"
###               ("\<^const>Set.union" ("_position" F)
###                 ("_Finset" ("_args" ("_position" s) ("_position" p))))
###               ("_applC" ("_position" env_dom) ("_position" env'))))
###           ("\<^const>HOL.not_equal" ("_position" sa) ("_position" pa))))
###       ("\<^const>TypedSigma.typing"
###         ("\<^const>Environments.add"
###           ("\<^const>Environments.add" ("_position" env') ("_position" sa)
###             ("_position" T))
###           ("_position" pa)
###           ("_applC" ("_position" param)
###             ("_applC" ("_position" the)
###               ("\<^const>Power.power_class.power" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>Sigma.openz"
###           ("\<^const>Sigma.sopen"
###             ("_applC" ("_position" Suc) ("_position" n)) ("_position" x)
###             ("_position" y) ("_position" t'))
###           ("_applC" ("_position" Fvar) ("_position" sa))
###           ("_applC" ("_position" Fvar) ("_position" pa)))
###         ("_applC" ("_position" return)
###           ("_applC" ("_position" the)
###             ("\<^const>Power.power_class.power" ("_position" T)
###               ("_position" l))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" sa) ("_position" pa))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" sa)
###           ("\<^const>Set.union"
###             ("\<^const>Set.union" ("_position" F)
###               ("_Finset" ("_args" ("_position" s) ("_position" p))))
###             ("_applC" ("_position" env_dom) ("_position" env'))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" pa)
###             ("\<^const>Set.union"
###               ("\<^const>Set.union" ("_position" F)
###                 ("_Finset" ("_args" ("_position" s) ("_position" p))))
###               ("_applC" ("_position" env_dom) ("_position" env'))))
###           ("\<^const>HOL.not_equal" ("_position" sa) ("_position" pa))))
###       ("\<^const>TypedSigma.typing"
###         ("\<^const>Environments.add"
###           ("\<^const>Environments.add" ("_position" env') ("_position" sa)
###             ("_position" T))
###           ("_position" pa)
###           ("_applC" ("_position" param)
###             ("_applC" ("_position" the)
###               ("\<^const>TypedSigma.type_get" ("_position" T)
###                 ("_position" l)))))
###         ("\<^const>Sigma.openz"
###           ("\<^const>Sigma.sopen"
###             ("_applC" ("_position" Suc) ("_position" n)) ("_position" x)
###             ("_position" y) ("_position" t'))
###           ("_applC" ("_position" Fvar) ("_position" sa))
###           ("_applC" ("_position" Fvar) ("_position" pa)))
###         ("_applC" ("_position" return)
###           ("_applC" ("_position" the)
###             ("\<^const>Power.power_class.power" ("_position" T)
###               ("_position" l))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1255 of "$AFP/Locally-Nameless-Sigma/Sigma/TypedSigma.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" i)
###     ("\<^const>HOL.eq"
###       ("\<^const>Power.power_class.power" ("_position" A) ("_position" i))
###       ("\<^const>Power.power_class.power" ("_position" B)
###         ("_position" i)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" i)
###     ("\<^const>HOL.eq"
###       ("\<^const>TypedSigma.type_get" ("_position" A) ("_position" i))
###       ("\<^const>Power.power_class.power" ("_position" B)
###         ("_position" i)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" i)
###     ("\<^const>HOL.eq"
###       ("\<^const>Power.power_class.power" ("_position" A) ("_position" i))
###       ("\<^const>TypedSigma.type_get" ("_position" B) ("_position" i)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" i)
###     ("\<^const>HOL.eq"
###       ("\<^const>TypedSigma.type_get" ("_position" A) ("_position" i))
###       ("\<^const>TypedSigma.type_get" ("_position" B) ("_position" i)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.TypedSigma"
### 1.854s elapsed time, 3.403s cpu time, 1.166s GC time
Loading theory "Draft.TypedSigmaMoreTemplates"
val templateLemmas =
   [("TypedSigma.typing_regular'", "?e \<turnstile> ?t : ?T ==> ok ?e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 2)))),
    ("TypedSigma.typing_regular''", "?e \<turnstile> ?t : ?T ==> lc ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("TypedSigma.no_bvar", "?e \<turnstile> Bvar ?x : ?T ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_predicate (template_hole 0))),
    ("TypedSigma.typing_regular",
     "?e \<turnstile> ?t : ?T ==> ok ?e & lc ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("TypedSigma.obj_inv", "?e \<turnstile> Obj ?f ?U : ?A ==> ?A = ?U",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_equation (template_var 0, template_var 1))),
    ("TypedSigma.no_var",
     "EX T. Env Map.empty \<turnstile> Fvar ?x : T ==> False",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_hole 0))),
    ("TypedSigma.not_bvar",
     "?e \<turnstile> ?t : ?T ==> ALL i. ?t ~= Bvar i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("TypedSigma.type_dom",
     "?env \<turnstile> Obj ?a ?A : ?A ==> dom ?a = do ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("TypedSigma.not_var",
     "Env Map.empty \<turnstile> ?a : ?A ==> ALL x. ?a ~= Fvar x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6, template_app (template_hole 5, t_empty)),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("TypedSigma.dom_lem",
     "?e \<turnstile> Obj ?f (Object ?fun) : Object ?fun ==>
      dom ?f = dom ?fun",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_app (template_hole 3, template_var 0))),
              template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("TypedSigma.subject_reduction",
     "[| ?e \<turnstile> ?t : ?T; ?t -> ?t' |]
      ==> ?e \<turnstile> ?t' : ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0),
             template_var 1)
           ))),
    ("TypedSigma.type_unique",
     "[| ?env \<turnstile> ?a : ?T; ?env \<turnstile> ?a : ?T' |]
      ==> ?T = ?T'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("TypedSigma.subject_reduction'",
     "[| ?t ->> ?t'; ?e \<turnstile> ?t : ?T |]
      ==> ?e \<turnstile> ?t' : ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 1),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_var 0)
           ))),
    ("TypedSigma.empty_env",
     "[| Env Map.empty \<turnstile> ?t : ?A; ok ?env |]
      ==> ?env \<turnstile> ?t : ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3, template_app (template_hole 2, t_empty)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("TypedSigma.Call_label_range",
     "Env Map.empty \<turnstile> Call (Obj ?c ?T) ?l ?b : ?A ==>
      ?l : dom ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6, template_app (template_hole 5, t_empty)),
                template_app
                 (template_app
                   (template_app
                     (template_hole 3,
                      template_app
                       (template_app (template_hole 2, template_var 4),
                        template_var 3)),
                    template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 4))
           ))),
    ("TypedSigma.Upd_label_range",
     "Env Map.empty \<turnstile> Upd (Obj ?c ?T) ?l ?x : ?A ==>
      ?l : dom ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6, template_app (template_hole 5, t_empty)),
                template_app
                 (template_app
                   (template_app
                     (template_hole 3,
                      template_app
                       (template_app (template_hole 2, template_var 4),
                        template_var 3)),
                    template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 4))
           ))),
    ("TypedSigma.Upd_subterm_type",
     "Env Map.empty \<turnstile> Upd ?t ?l ?x : ?T ==>
      EX T'. Env Map.empty \<turnstile> ?t : T'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4, template_app (template_hole 3, t_empty)),
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("TypedSigma.bigger_env_lemma",
     "[| ?e \<turnstile> ?t : ?T; ?x ~: env_dom ?e |]
      ==> ?e\<lparr>?x:?X\<rparr> \<turnstile> ?t : ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_app (template_hole 1, template_var 4))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 1),
                   template_var 0)),
               template_var 3),
             template_var 2)
           ))),
    ("TypedSigma.type_members_equal",
     "[| do ?A = do ?B; ALL i. ?A^i = ?B^i |] ==> ?A = ?B",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 1),
          template_app (template_hole 4, template_var 0)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("TypedSigma.progress",
     "[| Env Map.empty \<turnstile> ?t : ?A; \<nexists>c A. ?t = Obj c A |]
      ==> EX b. ?t -> b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9, template_app (template_hole 8, t_empty)),
                template_var 1),
              template_var 0)
            ),
        template_negation
         (template_predicate (template_app (template_hole 5, t_empty)))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("TypedSigma.disjunct_env",
     "[| ?e \<turnstile> ?t : ?A; env_dom ?e Int env_dom ?e' = {}; ok ?e' |]
      ==> ?e+?e' \<turnstile> ?t : ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 3)),
            template_app (template_hole 3, template_var 0)),
          template_hole 2),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0)),
               template_var 2),
             template_var 1)
           ))),
    ("TypedSigma.Call_subterm_type",
     "Env Map.empty \<turnstile> Call ?t ?l ?b : ?T ==>
      (EX T'. Env Map.empty \<turnstile> ?t : T') &
      (EX T'. Env Map.empty \<turnstile> ?b : T')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 5, template_app (template_hole 4, t_empty)),
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1, template_app (template_hole 0, t_empty)),
             template_app (template_hole 0, t_empty))
           ))),
    ("TypedSigma.typing_elims",
     "[| ?e \<turnstile> Fvar ?x : ?T;
         [| ok ?e; ?x : env_dom ?e; the ?e!?x = ?T |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 3),
                template_app (template_hole 6, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (template_app (template_hole 5, template_var 3))],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_app (template_hole 3, template_var 3))
                 )],
            template_implication
             ([template_equation
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 2)),
                 template_var 1)],
              template_predicate (template_var 0))))],
       template_predicate (template_var 0))),
    ("TypedSigma.typing_elims",
     "[| ?e \<turnstile> Call ?a ?l ?b : ?T;
         !!A. [| ?T = return (the A^?l); ?e \<turnstile> ?a : A;
                 ?e \<turnstile> ?b : param (the A^?l); ?l : do A |]
              ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 5),
                template_app
                 (template_app
                   (template_app (template_hole 8, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("TypedSigma.abs_typeE",
     "[| ?e \<turnstile> Call (Obj ?f ?U) ?l ?b : ?T;
         EX F. finite F &
               (ALL s p.
                   s ~: F & p ~: F & s ~= p -->
                   ?e\<lparr>s:?U\<rparr>\<lparr>p:param
              (the ?U^?l)\<rparr> \<turnstile> the
          (?f ?l)\<^bsup>[Fvar s,Fvar p]\<^esup> : ?T) ==>
         ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 17, template_var 6),
                template_app
                 (template_app
                   (template_app
                     (template_hole 16,
                      template_app
                       (template_app (template_hole 15, template_var 5),
                        template_var 4)),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate (template_app (template_hole 14, t_empty))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("TypedSigma.obj_inv_elim",
     "?e \<turnstile> Obj ?f ?U : ?U ==>
      dom ?f = do ?U &
      (EX F. finite F &
             (ALL l:do ?U.
                 ALL s p.
                    s ~: F & p ~: F & s ~= p -->
                    ?e\<lparr>s:?U\<rparr>\<lparr>p:param
               (the ?U^l)\<rparr> \<turnstile> the
          (?f l)\<^bsup>[Fvar s,Fvar p]\<^esup> : return (the ?U^l)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 21, template_var 2),
                template_app
                 (template_app (template_hole 20, template_var 1),
                  template_var 0)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 19,
               template_app
                (template_app
                  (template_hole 18,
                   template_app (template_hole 17, template_var 1)),
                 template_app (template_hole 16, template_var 0))),
             template_app (template_hole 15, t_empty))
           ))),
    ("TypedSigma.open_lemma",
     "[| ?env\<lparr>?s:?A\<rparr>\<lparr>?p:?B\<rparr> \<turnstile> {?n \<rightarrow> [Fvar
             ?s,Fvar ?p]} ?t : ?T;
         ?s ~: FV ?t Un FV ?x Un FV ?y; ?p ~: FV ?t Un FV ?x Un FV ?y;
         ?s ~= ?p; ?env \<turnstile> ?x : ?A; ?env \<turnstile> ?y : ?B |]
      ==> ?env \<turnstile> {?n \<rightarrow> [?x,?y]} ?t : ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app
                     (template_app
                       (template_hole 7,
                        template_app
                         (template_app
                           (template_app (template_hole 7, template_var 9),
                            template_var 8),
                          template_var 7)),
                      template_var 6),
                    template_var 5)),
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 6, template_var 4),
                      template_app (template_hole 5, template_var 8)),
                    template_app (template_hole 5, template_var 6)),
                  template_var 3)),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 8),
                  template_app
                   (template_app
                     (template_hole 2,
                      template_app
                       (template_app
                         (template_hole 2,
                          template_app (template_hole 1, template_var 3)),
                        template_app (template_hole 1, template_var 1))),
                    template_app (template_hole 1, template_var 0)))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 6),
                  template_app
                   (template_app
                     (template_hole 2,
                      template_app
                       (template_app
                         (template_hole 2,
                          template_app (template_hole 1, template_var 3)),
                        template_app (template_hole 1, template_var 1))),
                    template_app (template_hole 1, template_var 0)))
                )
            ),
        template_negation
         (template_equation (template_var 8, template_var 6)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 9),
                template_var 1),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 9),
                template_var 0),
              template_var 5)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 8, template_var 9),
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 6, template_var 4),
                     template_var 1),
                   template_var 0),
                 template_var 3)),
             template_var 2)
           ))),
    ("TypedSigma.obj_inv_elim'",
     "[| ?e \<turnstile> Obj ?f ?U : ?U; ?s ~: FV (Obj ?f ?U) Un env_dom ?e;
         ?p ~: FV (Obj ?f ?U) Un env_dom ?e; ?s ~= ?p |]
      ==> dom ?f = do ?U &
          (ALL l:do ?U.
              ?e\<lparr>?s:?U\<rparr>\<lparr>?p:param
           (the ?U^l)\<rparr> \<turnstile> the
      (?f l)\<^bsup>[Fvar ?s,Fvar ?p]\<^esup> : return (the ?U^l))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 20, template_var 4),
                template_app
                 (template_app (template_hole 19, template_var 3),
                  template_var 2)),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 17, template_var 1),
                  template_app
                   (template_app
                     (template_hole 16,
                      template_app
                       (template_hole 15,
                        template_app
                         (template_app (template_hole 19, template_var 3),
                          template_var 2))),
                    template_app (template_hole 14, template_var 4)))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 17, template_var 0),
                  template_app
                   (template_app
                     (template_hole 16,
                      template_app
                       (template_hole 15,
                        template_app
                         (template_app (template_hole 19, template_var 3),
                          template_var 2))),
                    template_app (template_hole 14, template_var 4)))
                )
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_hole 11,
                   template_app (template_hole 10, template_var 3)),
                 template_app (template_hole 9, template_var 2))),
             template_app
              (template_app
                (template_hole 8,
                 template_app (template_hole 9, template_var 2)),
               t_empty))
           ))),
    ("TypedSigma.typing_elims",
     "[| ?e \<turnstile> Upd ?a ?l ?n : ?T;
         !!F. [| finite F;
                 ALL s p.
                    s ~: F & p ~: F & s ~= p -->
                    ?e\<lparr>s:?T\<rparr>\<lparr>p:param
               (the ?T^?l)\<rparr> \<turnstile> ?n\<^bsup>[Fvar
                      s,Fvar p]\<^esup> : return (the ?T^?l);
                 ?e \<turnstile> ?a : ?T; ?l : do ?T |]
              ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 18, template_var 5),
                template_app
                 (template_app
                   (template_app (template_hole 17, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 16, t_empty))],
       template_predicate (template_var 0))),
    ("TypedSigma.typing_elims",
     "[| ?e \<turnstile> Obj ?b ?T : ?T;
         !!F. [| ok ?e; dom ?b = do ?T; finite F;
                 ALL l:do ?T.
                    ALL s p.
                       s ~: F & p ~: F & s ~= p -->
                       ?e\<lparr>s:?T\<rparr>\<lparr>p:param
                  (the ?T^l)\<rparr> \<turnstile> the
             (?b l)\<^bsup>[Fvar s,Fvar p]\<^esup> : return (the ?T^l) |]
              ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 22, template_var 3),
                template_app
                 (template_app (template_hole 21, template_var 2),
                  template_var 1)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 20, t_empty))],
       template_predicate (template_var 0))),
    ("TypedSigma.ball_ex_finite",
     "[| finite ?S; finite ?F;
         ALL x:?S.
            EX F'.
               finite F' &
               (ALL s p.
                   s ~: F' Un ?F & p ~: F' Un ?F & s ~= p --> ?P x s p) |]
      ==> EX F'.
             finite F' &
             (ALL x:?S.
                 ALL s p.
                    s ~: F' Un ?F & p ~: F' Un ?F & s ~= p --> ?P x s p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2), t_empty)
            )],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("TypedSigma.open_lemma'",
     "[| ?e \<turnstile> ?t : ?C; ?s ~: FV ?t' Un FV ?x Un FV ?y;
         ?p ~: FV ?t' Un FV ?x Un FV ?y; ?s ~= ?p;
         ?env \<turnstile> ?x : ?A; ?env \<turnstile> ?y : ?B;
         ?t = {?n \<rightarrow> [Fvar ?s,Fvar ?p]} ?t';
         ?e = ?env\<lparr>?s:?A\<rparr>\<lparr>?p:?B\<rparr> |]
      ==> ?env \<turnstile> {?n \<rightarrow> [?x,?y]} ?t' : ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 11),
                template_var 10),
              template_var 9)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 8),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app
                         (template_hole 7,
                          template_app (template_hole 6, template_var 7)),
                        template_app (template_hole 6, template_var 6))),
                    template_app (template_hole 6, template_var 5)))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 4),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app
                         (template_hole 7,
                          template_app (template_hole 6, template_var 7)),
                        template_app (template_hole 6, template_var 6))),
                    template_app (template_hole 6, template_var 5)))
                )
            ),
        template_negation
         (template_equation (template_var 8, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 3),
                template_var 6),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 3),
                template_var 5),
              template_var 1)
            ),
        template_equation
         (template_var 10,
          template_app
           (template_app
             (template_app
               (template_app (template_hole 3, template_var 0),
                template_app (template_hole 2, template_var 8)),
              template_app (template_hole 2, template_var 4)),
            template_var 7)),
        template_equation
         (template_var 11,
          template_app
           (template_app
             (template_app
               (template_hole 0,
                template_app
                 (template_app
                   (template_app (template_hole 0, template_var 3),
                    template_var 8),
                  template_var 2)),
              template_var 4),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 10, template_var 3),
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 3, template_var 0),
                     template_var 6),
                   template_var 5),
                 template_var 7)),
             template_var 9)
           ))),
    ("TypedSigma.type_renaming",
     "[| ?e\<lparr>?s:?A\<rparr>\<lparr>?p:?B\<rparr> \<turnstile> {?n \<rightarrow> [Fvar
           ?s,Fvar ?p]} ?t : ?T;
         ?s ~: FV ?t; ?p ~: FV ?t; ?x ~: FV ?t; ?y ~: FV ?t;
         ?x ~: env_dom ?e; ?y ~: env_dom ?e; ?x ~= ?y; ?s ~= ?p |]
      ==> ?e\<lparr>?x:?A\<rparr>\<lparr>?y:?B\<rparr> \<turnstile> {?n \<rightarrow> [Fvar
            ?x,Fvar ?y]} ?t : ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app
                     (template_app
                       (template_hole 7,
                        template_app
                         (template_app
                           (template_app (template_hole 7, template_var 9),
                            template_var 8),
                          template_var 7)),
                      template_var 6),
                    template_var 5)),
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 6, template_var 4),
                      template_app (template_hole 5, template_var 8)),
                    template_app (template_hole 5, template_var 6)),
                  template_var 3)),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 8),
                  template_app (template_hole 2, template_var 3))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 6),
                  template_app (template_hole 2, template_var 3))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_app (template_hole 2, template_var 3))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_app (template_hole 2, template_var 3))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_app (template_hole 1, template_var 9))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_app (template_hole 1, template_var 9))
                )
            ),
        template_negation
         (template_equation (template_var 1, template_var 0)),
        template_negation
         (template_equation (template_var 8, template_var 6))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app
                          (template_app (template_hole 7, template_var 9),
                           template_var 1),
                         template_var 7)),
                     template_var 0),
                   template_var 5)),
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 6, template_var 4),
                     template_app (template_hole 5, template_var 1)),
                   template_app (template_hole 5, template_var 0)),
                 template_var 3)),
             template_var 2)
           ))),
    ("TypedSigma.type_renaming'",
     "[| ?e \<turnstile> ?t : ?C; ?s ~: FV ?t'; ?p ~: FV ?t'; ?x ~: FV ?t';
         ?y ~: FV ?t'; ?x ~: env_dom ?env; ?y ~: env_dom ?env; ?s ~= ?p;
         ?x ~= ?y; ?t = {?n \<rightarrow> [Fvar ?s,Fvar ?p]} ?t';
         ?e = ?env\<lparr>?s:?A\<rparr>\<lparr>?p:?B\<rparr> |]
      ==> ?env\<lparr>?x:?A\<rparr>\<lparr>?y:?B\<rparr> \<turnstile> {?n \<rightarrow> [Fvar
              ?x,Fvar ?y]} ?t' : ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 11),
                template_var 10),
              template_var 9)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 8),
                  template_app (template_hole 7, template_var 7))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 6),
                  template_app (template_hole 7, template_var 7))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 5),
                  template_app (template_hole 7, template_var 7))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 4),
                  template_app (template_hole 7, template_var 7))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 5),
                  template_app (template_hole 6, template_var 3))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 4),
                  template_app (template_hole 6, template_var 3))
                )
            ),
        template_negation
         (template_equation (template_var 8, template_var 6)),
        template_negation
         (template_equation (template_var 5, template_var 4)),
        template_equation
         (template_var 10,
          template_app
           (template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_app (template_hole 2, template_var 8)),
              template_app (template_hole 2, template_var 6)),
            template_var 7)),
        template_equation
         (template_var 11,
          template_app
           (template_app
             (template_app
               (template_hole 0,
                template_app
                 (template_app
                   (template_app (template_hole 0, template_var 3),
                    template_var 8),
                  template_var 1)),
              template_var 6),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_app
                      (template_hole 0,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 3),
                           template_var 5),
                         template_var 1)),
                     template_var 4),
                   template_var 0)),
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 3, template_var 2),
                     template_app (template_hole 2, template_var 5)),
                   template_app (template_hole 2, template_var 4)),
                 template_var 7)),
             template_var 9)
           ))),
    ("TypedSigma.select_preserve_type",
     "[| ?env \<turnstile> Obj ?f (Object ?t) : Object ?t; ?s ~: FV ?a;
         ?p ~: FV ?a;
         ?env\<lparr>?s:Object
                         ?t\<rparr>\<lparr>?p:param
         (the (?t ?l2.0))\<rparr> \<turnstile> ?a\<^bsup>[Fvar
                     ?s,Fvar ?p]\<^esup> : return (the (?t ?l2.0));
         ?l1.0 : dom ?t; ?l2.0 : dom ?t |]
      ==> EX F. finite F &
                (ALL s p.
                    s ~: F & p ~: F & s ~= p -->
                    ?env\<lparr>s:Object
                                   ?t\<rparr>\<lparr>p:param
                  (the (?t ?l1.0))\<rparr> \<turnstile> the
                   ((?f(?l2.0 |-> ?a))
                     ?l1.0)\<^bsup>[Fvar
                                     s,Fvar
  p]\<^esup> : return (the (?t ?l1.0)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 22, template_var 7),
                template_app
                 (template_app (template_hole 21, template_var 6),
                  template_app (template_hole 20, template_var 5))),
              template_app (template_hole 20, template_var 5))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 18, template_var 4),
                  template_app (template_hole 17, template_var 3))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 18, template_var 2),
                  template_app (template_hole 17, template_var 3))
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 22,
                  template_app
                   (template_app
                     (template_app
                       (template_hole 16,
                        template_app
                         (template_app
                           (template_app (template_hole 16, template_var 7),
                            template_var 4),
                          template_app (template_hole 20, template_var 5))),
                      template_var 2),
                    template_app
                     (template_hole 15,
                      template_app
                       (template_hole 14,
                        template_app (template_var 5, template_var 1))))),
                template_app
                 (template_app
                   (template_app (template_hole 13, template_var 3),
                    template_app (template_hole 12, template_var 4)),
                  template_app (template_hole 12, template_var 2))),
              template_app
               (template_hole 11,
                template_app
                 (template_hole 14,
                  template_app (template_var 5, template_var 1))))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_app (template_hole 9, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_app (template_hole 9, template_var 5))
            )],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("TypedSigma.ball_Tltsp",
     "[| !!l t t'.
            ALL s p. s ~: ?F & p ~: ?F & s ~= p --> ?P1.0 ?T l t s p ==>
            ALL s p. s ~: ?F' & p ~: ?F' & s ~= p --> ?P2.0 ?T l t s p;
         ALL l:do ?T.
            ALL s p.
               s ~: ?F & p ~: ?F & s ~= p --> ?P1.0 ?T l (the (?f l)) s p |]
      ==> ALL l:do ?T.
             ALL s p.
                s ~: ?F' & p ~: ?F' & s ~= p -->
                ?P2.0 ?T l (the (?f l)) s p",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 3)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)),
             t_empty)
           ))),
    ("TypedSigma.bnd_disj_env_lem",
     "[| ok ?e1.0; env_dom ?e1.0 Int env_dom ?e2.0 = {}; ok ?e2.0;
         ALL s p.
            s ~: ?F & p ~: ?F & s ~= p -->
            ?e1.0\<lparr>s:?T\<rparr>\<lparr>p:param
          (the ?T^?l)\<rparr> \<turnstile> ?t2.0\<^bsup>[Fvar
                    s,Fvar p]\<^esup> : return (the ?T^?l) &
            (env_dom
              (?e1.0\<lparr>s:?T\<rparr>\<lparr>p:param
             (the ?T^?l)\<rparr>) Int
             env_dom ?e2.0 =
             {} -->
             ok ?e2.0 -->
             ?e1.0\<lparr>s:?T\<rparr>\<lparr>p:param
           (the ?T^?l)\<rparr>+?e2.0 \<turnstile> ?t2.0\<^bsup>[Fvar
                           s,Fvar p]\<^esup> : return (the ?T^?l)) |]
      ==> ALL s p.
             s ~: ?F Un env_dom ?e1.0+?e2.0 &
             p ~: ?F Un env_dom ?e1.0+?e2.0 & s ~= p -->
             ?e1.0+?e2.0\<lparr>s:?T\<rparr>\<lparr>p:param
                 (the ?T^?l)\<rparr> \<turnstile> ?t2.0\<^bsup>[Fvar
                           s,Fvar p]\<^esup> : return (the ?T^?l)",
     template_implication
      ([template_predicate
         (template_app (template_hole 20, template_var 5)),
        template_equation
         (template_app
           (template_app
             (template_hole 18,
              template_app (template_hole 17, template_var 5)),
            template_app (template_hole 17, template_var 4)),
          template_hole 16),
        template_predicate
         (template_app (template_hole 20, template_var 4)),
        template_predicate (template_app (template_hole 15, t_empty))],
       template_predicate (template_app (template_hole 15, t_empty)))),
    ("TypedSigma.typing_induct",
     "[| ?env \<turnstile> ?t : ?T;
         !!env T x.
            [| ok env; x : env_dom env; the env!x = T |]
            ==> ?P1.0 env (Fvar x) T;
         !!env T t l p.
            [| env \<turnstile> t : T; ?P1.0 env t T;
               env \<turnstile> p : param (the T^l);
               ?P1.0 env p (param (the T^l)); l : do T |]
            ==> ?P1.0 env (Call t l p) (return (the T^l));
         !!env T t l u.
            [| env \<turnstile> t : T; ?P1.0 env t T; l : do T;
               ?P2.0 env u T l |]
            ==> ?P1.0 env (Upd t l u) T;
         !!env T f.
            [| ok env; dom f = do T;
               ALL l:dom f. ?P2.0 env (the (f l)) T l |]
            ==> ?P1.0 env (Obj f T) T;
         !!env T l t L.
            [| ok env; finite L;
               ALL s p.
                  s ~: L & p ~: L & s ~= p -->
                  env\<lparr>s:T\<rparr>\<lparr>p:param
             (the T^l)\<rparr> \<turnstile> t\<^bsup>[Fvar
                 s,Fvar p]\<^esup> : return (the T^l) &
                  ?P1.0
                   (env\<lparr>s:T\<rparr>\<lparr>p:param (the T^l)\<rparr>)
                   (t\<^bsup>[Fvar s,Fvar p]\<^esup>) (return (the T^l)) |]
            ==> ?P2.0 env t T l |]
      ==> ?P1.0 ?env ?t ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 35, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 34, t_empty)),
        template_predicate (template_app (template_hole 34, t_empty)),
        template_predicate (template_app (template_hole 34, t_empty)),
        template_predicate (template_app (template_hole 34, t_empty)),
        template_predicate (template_app (template_hole 34, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 1, template_var 4),
               template_var 3),
             template_var 2)
           ))),
    ("TypedSigma.bnd_open_lem",
     "[| ALL sa pa.
            sa ~: ?F & pa ~: ?F & sa ~= pa -->
            ?env\<lparr>sa:?T\<rparr>\<lparr>pa:param
           (the ?T^?l)\<rparr> \<turnstile> ?t\<^bsup>[Fvar
                  sa,Fvar pa]\<^esup> : return (the ?T^?l) &
            (ALL env'' t'' s' p' x' y' A' B' n'.
                s' ~: FV t'' Un FV x' Un FV y' -->
                p' ~: FV t'' Un FV x' Un FV y' -->
                s' ~= p' -->
                env'' \<turnstile> x' : A' -->
                env'' \<turnstile> y' : B' -->
                (?t\<^bsup>[Fvar sa,Fvar pa]\<^esup>) =
                {n' \<rightarrow> [Fvar s',Fvar p']} t'' -->
                ?env\<lparr>sa:?T\<rparr>\<lparr>pa:param
               (the ?T^?l)\<rparr> =
                env''\<lparr>s':A'\<rparr>\<lparr>p':B'\<rparr> -->
                env'' \<turnstile> {n' \<rightarrow> [x',y']} t'' : return
                               (the ?T^?l));
         ok ?env; ?env = ?env'\<lparr>?s:?A\<rparr>\<lparr>?p:?B\<rparr>;
         ?s ~: FV ?t'' Un FV ?x Un FV ?y; ?p ~: FV ?t'' Un FV ?x Un FV ?y;
         ?s ~= ?p; ?env' \<turnstile> ?x : ?A; ?env' \<turnstile> ?y : ?B;
         ?t = {Suc ?n \<rightarrow> [Fvar ?s,Fvar ?p]} ?t';
         FV ?t' <= FV ?t'' |]
      ==> ALL sa pa.
             sa ~: ?F Un {?s, ?p} Un env_dom ?env' &
             pa ~: ?F Un {?s, ?p} Un env_dom ?env' & sa ~= pa -->
             ?env'\<lparr>sa:?T\<rparr>\<lparr>pa:param
             (the ?T^?l)\<rparr> \<turnstile> {Suc
          ?n \<rightarrow> [?x,?y]} ?t'\<^bsup>[Fvar
           sa,Fvar pa]\<^esup> : return (the ?T^?l)",
     template_implication
      ([template_predicate (template_app (template_hole 28, t_empty)),
        template_predicate
         (template_app (template_hole 5, template_var 13)),
        template_equation
         (template_var 13,
          template_app
           (template_app
             (template_app
               (template_hole 21,
                template_app
                 (template_app
                   (template_app (template_hole 21, template_var 9),
                    template_var 8),
                  template_var 7)),
              template_var 6),
            template_var 5)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 24, template_var 8),
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app
                         (template_hole 10,
                          template_app (template_hole 9, template_var 4)),
                        template_app (template_hole 9, template_var 3))),
                    template_app (template_hole 9, template_var 2)))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 24, template_var 6),
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app
                         (template_hole 10,
                          template_app (template_hole 9, template_var 4)),
                        template_app (template_hole 9, template_var 3))),
                    template_app (template_hole 9, template_var 2)))
                )
            ),
        template_negation
         (template_equation (template_var 8, template_var 6)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 22, template_var 9),
                template_var 3),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 22, template_var 9),
                template_var 2),
              template_var 5)
            ),
        template_equation
         (template_var 10,
          template_app
           (template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 4, template_var 1)),
                template_app (template_hole 16, template_var 8)),
              template_app (template_hole 16, template_var 6)),
            template_var 0)),
        template_inequation
         (less_equals, template_app (template_hole 9, template_var 0),
          template_app (template_hole 9, template_var 4))],
       template_predicate (template_app (template_hole 28, t_empty)))),
    ("TypedSigma.bnd_renaming_lem",
     "[| ?s ~: FV ?t'; ?p ~: FV ?t'; ?x ~: FV ?t'; ?y ~: FV ?t';
         ?x ~: env_dom ?env'; ?y ~: env_dom ?env'; ?s ~= ?p; ?x ~= ?y;
         ?t = {Suc ?n \<rightarrow> [Fvar ?s,Fvar ?p]} ?t';
         ?env = ?env'\<lparr>?s:?A\<rparr>\<lparr>?p:?B\<rparr>;
         ALL sa pa.
            sa ~: ?F & pa ~: ?F & sa ~= pa -->
            ?env\<lparr>sa:?T\<rparr>\<lparr>pa:param
           (the ?T^?l)\<rparr> \<turnstile> ?t\<^bsup>[Fvar
                  sa,Fvar pa]\<^esup> : return (the ?T^?l) &
            (ALL env'' t'' s' p' x' y' A' B' n'.
                s' ~: FV t'' -->
                p' ~: FV t'' -->
                x' ~: FV t'' -->
                y' ~: FV t'' -->
                x' ~: env_dom env'' -->
                y' ~: env_dom env'' -->
                x' ~= y' -->
                s' ~= p' -->
                (?t\<^bsup>[Fvar sa,Fvar pa]\<^esup>) =
                {n' \<rightarrow> [Fvar s',Fvar p']} t'' -->
                ?env\<lparr>sa:?T\<rparr>\<lparr>pa:param
               (the ?T^?l)\<rparr> =
                env''\<lparr>s':A'\<rparr>\<lparr>p':B'\<rparr> -->
                env''\<lparr>x':A'\<rparr>\<lparr>y':B'\<rparr> \<turnstile> {n' \<rightarrow> [Fvar
                     x',Fvar y']} t'' : return (the ?T^?l));
         FV ?t' <= ?F' |]
      ==> ALL sa pa.
             sa ~: ?F Un {?s, ?p, ?x, ?y} Un ?F' Un env_dom ?env' &
             pa ~: ?F Un {?s, ?p, ?x, ?y} Un ?F' Un env_dom ?env' &
             sa ~= pa -->
             ?env'\<lparr>?x:?A\<rparr>\<lparr>?y:?B\<rparr>\<lparr>sa:?T\<rparr>\<lparr>pa:param
                 (the ?T^?l)\<rparr> \<turnstile> {Suc
              ?n \<rightarrow> [Fvar
                                 ?x,Fvar
                                     ?y]} ?t'\<^bsup>[Fvar
                 sa,Fvar pa]\<^esup> : return (the ?T^?l)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 26, template_var 14),
                  template_app (template_hole 25, template_var 13))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 26, template_var 12),
                  template_app (template_hole 25, template_var 13))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 26, template_var 11),
                  template_app (template_hole 25, template_var 13))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 26, template_var 10),
                  template_app (template_hole 25, template_var 13))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 26, template_var 11),
                  template_app (template_hole 24, template_var 9))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 26, template_var 10),
                  template_app (template_hole 24, template_var 9))
                )
            ),
        template_negation
         (template_equation (template_var 14, template_var 12)),
        template_negation
         (template_equation (template_var 11, template_var 10)),
        template_equation
         (template_var 8,
          template_app
           (template_app
             (template_app
               (template_app
                 (template_hole 21,
                  template_app (template_hole 20, template_var 7)),
                template_app (template_hole 19, template_var 14)),
              template_app (template_hole 19, template_var 12)),
            template_var 13)),
        template_equation
         (template_var 6,
          template_app
           (template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app
                   (template_app (template_hole 17, template_var 9),
                    template_var 14),
                  template_var 5)),
              template_var 12),
            template_var 4)),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_inequation
         (less_equals, template_app (template_hole 25, template_var 13),
          template_var 0)],
       template_predicate (template_app (template_hole 16, t_empty))))]:
   (string * thm * template) list
### theory "Draft.TypedSigmaMoreTemplates"
### 0.404s elapsed time, 0.561s cpu time, 0.031s GC time
val it = (): unit
