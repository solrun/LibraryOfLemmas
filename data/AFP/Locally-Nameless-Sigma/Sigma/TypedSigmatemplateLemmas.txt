   [("TypedSigma.typing_regular'", "?e \<turnstile> ?t : ?T ==> ok ?e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 2)))),
    ("TypedSigma.typing_regular''", "?e \<turnstile> ?t : ?T ==> lc ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("TypedSigma.no_bvar", "?e \<turnstile> Bvar ?x : ?T ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_predicate (template_hole 0))),
    ("TypedSigma.typing_regular",
     "?e \<turnstile> ?t : ?T ==> ok ?e & lc ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("TypedSigma.obj_inv", "?e \<turnstile> Obj ?f ?U : ?A ==> ?A = ?U",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_equation (template_var 0, template_var 1))),
    ("TypedSigma.no_var",
     "EX T. Env Map.empty \<turnstile> Fvar ?x : T ==> False",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_hole 0))),
    ("TypedSigma.not_bvar",
     "?e \<turnstile> ?t : ?T ==> ALL i. ?t ~= Bvar i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("TypedSigma.type_dom",
     "?env \<turnstile> Obj ?a ?A : ?A ==> dom ?a = do ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("TypedSigma.not_var",
     "Env Map.empty \<turnstile> ?a : ?A ==> ALL x. ?a ~= Fvar x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6, template_app (template_hole 5, t_empty)),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("TypedSigma.dom_lem",
     "?e \<turnstile> Obj ?f (Object ?fun) : Object ?fun ==>
      dom ?f = dom ?fun",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_app (template_hole 3, template_var 0))),
              template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("TypedSigma.subject_reduction",
     "[| ?e \<turnstile> ?t : ?T; ?t -> ?t' |]
      ==> ?e \<turnstile> ?t' : ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0),
             template_var 1)
           ))),
    ("TypedSigma.type_unique",
     "[| ?env \<turnstile> ?a : ?T; ?env \<turnstile> ?a : ?T' |]
      ==> ?T = ?T'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("TypedSigma.subject_reduction'",
     "[| ?t ->> ?t'; ?e \<turnstile> ?t : ?T |]
      ==> ?e \<turnstile> ?t' : ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 1),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_var 0)
           ))),
    ("TypedSigma.empty_env",
     "[| Env Map.empty \<turnstile> ?t : ?A; ok ?env |]
      ==> ?env \<turnstile> ?t : ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3, template_app (template_hole 2, t_empty)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("TypedSigma.Call_label_range",
     "Env Map.empty \<turnstile> Call (Obj ?c ?T) ?l ?b : ?A ==>
      ?l : dom ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6, template_app (template_hole 5, t_empty)),
                template_app
                 (template_app
                   (template_app
                     (template_hole 3,
                      template_app
                       (template_app (template_hole 2, template_var 4),
                        template_var 3)),
                    template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 4))
           ))),
    ("TypedSigma.Upd_label_range",
     "Env Map.empty \<turnstile> Upd (Obj ?c ?T) ?l ?x : ?A ==>
      ?l : dom ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6, template_app (template_hole 5, t_empty)),
                template_app
                 (template_app
                   (template_app
                     (template_hole 3,
                      template_app
                       (template_app (template_hole 2, template_var 4),
                        template_var 3)),
                    template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 4))
           ))),
    ("TypedSigma.Upd_subterm_type",
     "Env Map.empty \<turnstile> Upd ?t ?l ?x : ?T ==>
      EX T'. Env Map.empty \<turnstile> ?t : T'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4, template_app (template_hole 3, t_empty)),
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("TypedSigma.bigger_env_lemma",
     "[| ?e \<turnstile> ?t : ?T; ?x ~: env_dom ?e |]
      ==> ?e\<lparr>?x:?X\<rparr> \<turnstile> ?t : ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_app (template_hole 1, template_var 4))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 1),
                   template_var 0)),
               template_var 3),
             template_var 2)
           ))),
    ("TypedSigma.type_members_equal",
     "[| do ?A = do ?B; ALL i. ?A^i = ?B^i |] ==> ?A = ?B",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 1),
          template_app (template_hole 4, template_var 0)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("TypedSigma.progress",
     "[| Env Map.empty \<turnstile> ?t : ?A; \<nexists>c A. ?t = Obj c A |]
      ==> EX b. ?t -> b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9, template_app (template_hole 8, t_empty)),
                template_var 1),
              template_var 0)
            ),
        template_negation
         (template_predicate (template_app (template_hole 5, t_empty)))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("TypedSigma.disjunct_env",
     "[| ?e \<turnstile> ?t : ?A; env_dom ?e Int env_dom ?e' = {}; ok ?e' |]
      ==> ?e+?e' \<turnstile> ?t : ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 3)),
            template_app (template_hole 3, template_var 0)),
          template_hole 2),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0)),
               template_var 2),
             template_var 1)
           ))),
    ("TypedSigma.Call_subterm_type",
     "Env Map.empty \<turnstile> Call ?t ?l ?b : ?T ==>
      (EX T'. Env Map.empty \<turnstile> ?t : T') &
      (EX T'. Env Map.empty \<turnstile> ?b : T')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 5, template_app (template_hole 4, t_empty)),
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1, template_app (template_hole 0, t_empty)),
             template_app (template_hole 0, t_empty))
           ))),
    ("TypedSigma.typing_elims",
     "[| ?e \<turnstile> Fvar ?x : ?T;
         [| ok ?e; ?x : env_dom ?e; the ?e!?x = ?T |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 3),
                template_app (template_hole 6, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (template_app (template_hole 5, template_var 3))],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_app (template_hole 3, template_var 3))
                 )],
            template_implication
             ([template_equation
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 2)),
                 template_var 1)],
              template_predicate (template_var 0))))],
       template_predicate (template_var 0))),
    ("TypedSigma.typing_elims",
     "[| ?e \<turnstile> Call ?a ?l ?b : ?T;
         !!A. [| ?T = return (the A^?l); ?e \<turnstile> ?a : A;
                 ?e \<turnstile> ?b : param (the A^?l); ?l : do A |]
              ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 5),
                template_app
                 (template_app
                   (template_app (template_hole 8, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("TypedSigma.abs_typeE",
     "[| ?e \<turnstile> Call (Obj ?f ?U) ?l ?b : ?T;
         EX F. finite F &
               (ALL s p.
                   s ~: F & p ~: F & s ~= p -->
                   ?e\<lparr>s:?U\<rparr>\<lparr>p:param
              (the ?U^?l)\<rparr> \<turnstile> the
          (?f ?l)\<^bsup>[Fvar s,Fvar p]\<^esup> : ?T) ==>
         ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 17, template_var 6),
                template_app
                 (template_app
                   (template_app
                     (template_hole 16,
                      template_app
                       (template_app (template_hole 15, template_var 5),
                        template_var 4)),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate (template_app (template_hole 14, t_empty))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("TypedSigma.obj_inv_elim",
     "?e \<turnstile> Obj ?f ?U : ?U ==>
      dom ?f = do ?U &
      (EX F. finite F &
             (ALL l:do ?U.
                 ALL s p.
                    s ~: F & p ~: F & s ~= p -->
                    ?e\<lparr>s:?U\<rparr>\<lparr>p:param
               (the ?U^l)\<rparr> \<turnstile> the
          (?f l)\<^bsup>[Fvar s,Fvar p]\<^esup> : return (the ?U^l)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 21, template_var 2),
                template_app
                 (template_app (template_hole 20, template_var 1),
                  template_var 0)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 19,
               template_app
                (template_app
                  (template_hole 18,
                   template_app (template_hole 17, template_var 1)),
                 template_app (template_hole 16, template_var 0))),
             template_app (template_hole 15, t_empty))
           ))),
    ("TypedSigma.open_lemma",
     "[| ?env\<lparr>?s:?A\<rparr>\<lparr>?p:?B\<rparr> \<turnstile> {?n \<rightarrow> [Fvar
             ?s,Fvar ?p]} ?t : ?T;
         ?s ~: FV ?t Un FV ?x Un FV ?y; ?p ~: FV ?t Un FV ?x Un FV ?y;
         ?s ~= ?p; ?env \<turnstile> ?x : ?A; ?env \<turnstile> ?y : ?B |]
      ==> ?env \<turnstile> {?n \<rightarrow> [?x,?y]} ?t : ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app
                     (template_app
                       (template_hole 7,
                        template_app
                         (template_app
                           (template_app (template_hole 7, template_var 9),
                            template_var 8),
                          template_var 7)),
                      template_var 6),
                    template_var 5)),
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 6, template_var 4),
                      template_app (template_hole 5, template_var 8)),
                    template_app (template_hole 5, template_var 6)),
                  template_var 3)),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 8),
                  template_app
                   (template_app
                     (template_hole 2,
                      template_app
                       (template_app
                         (template_hole 2,
                          template_app (template_hole 1, template_var 3)),
                        template_app (template_hole 1, template_var 1))),
                    template_app (template_hole 1, template_var 0)))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 6),
                  template_app
                   (template_app
                     (template_hole 2,
                      template_app
                       (template_app
                         (template_hole 2,
                          template_app (template_hole 1, template_var 3)),
                        template_app (template_hole 1, template_var 1))),
                    template_app (template_hole 1, template_var 0)))
                )
            ),
        template_negation
         (template_equation (template_var 8, template_var 6)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 9),
                template_var 1),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 9),
                template_var 0),
              template_var 5)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 8, template_var 9),
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 6, template_var 4),
                     template_var 1),
                   template_var 0),
                 template_var 3)),
             template_var 2)
           ))),
    ("TypedSigma.obj_inv_elim'",
     "[| ?e \<turnstile> Obj ?f ?U : ?U; ?s ~: FV (Obj ?f ?U) Un env_dom ?e;
         ?p ~: FV (Obj ?f ?U) Un env_dom ?e; ?s ~= ?p |]
      ==> dom ?f = do ?U &
          (ALL l:do ?U.
              ?e\<lparr>?s:?U\<rparr>\<lparr>?p:param
           (the ?U^l)\<rparr> \<turnstile> the
      (?f l)\<^bsup>[Fvar ?s,Fvar ?p]\<^esup> : return (the ?U^l))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 20, template_var 4),
                template_app
                 (template_app (template_hole 19, template_var 3),
                  template_var 2)),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 17, template_var 1),
                  template_app
                   (template_app
                     (template_hole 16,
                      template_app
                       (template_hole 15,
                        template_app
                         (template_app (template_hole 19, template_var 3),
                          template_var 2))),
                    template_app (template_hole 14, template_var 4)))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 17, template_var 0),
                  template_app
                   (template_app
                     (template_hole 16,
                      template_app
                       (template_hole 15,
                        template_app
                         (template_app (template_hole 19, template_var 3),
                          template_var 2))),
                    template_app (template_hole 14, template_var 4)))
                )
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_hole 11,
                   template_app (template_hole 10, template_var 3)),
                 template_app (template_hole 9, template_var 2))),
             template_app
              (template_app
                (template_hole 8,
                 template_app (template_hole 9, template_var 2)),
               t_empty))
           ))),
    ("TypedSigma.typing_elims",
     "[| ?e \<turnstile> Upd ?a ?l ?n : ?T;
         !!F. [| finite F;
                 ALL s p.
                    s ~: F & p ~: F & s ~= p -->
                    ?e\<lparr>s:?T\<rparr>\<lparr>p:param
               (the ?T^?l)\<rparr> \<turnstile> ?n\<^bsup>[Fvar
                      s,Fvar p]\<^esup> : return (the ?T^?l);
                 ?e \<turnstile> ?a : ?T; ?l : do ?T |]
              ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 18, template_var 5),
                template_app
                 (template_app
                   (template_app (template_hole 17, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 16, t_empty))],
       template_predicate (template_var 0))),
    ("TypedSigma.typing_elims",
     "[| ?e \<turnstile> Obj ?b ?T : ?T;
         !!F. [| ok ?e; dom ?b = do ?T; finite F;
                 ALL l:do ?T.
                    ALL s p.
                       s ~: F & p ~: F & s ~= p -->
                       ?e\<lparr>s:?T\<rparr>\<lparr>p:param
                  (the ?T^l)\<rparr> \<turnstile> the
             (?b l)\<^bsup>[Fvar s,Fvar p]\<^esup> : return (the ?T^l) |]
              ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 22, template_var 3),
                template_app
                 (template_app (template_hole 21, template_var 2),
                  template_var 1)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 20, t_empty))],
       template_predicate (template_var 0))),
    ("TypedSigma.ball_ex_finite",
     "[| finite ?S; finite ?F;
         ALL x:?S.
            EX F'.
               finite F' &
               (ALL s p.
                   s ~: F' Un ?F & p ~: F' Un ?F & s ~= p --> ?P x s p) |]
      ==> EX F'.
             finite F' &
             (ALL x:?S.
                 ALL s p.
                    s ~: F' Un ?F & p ~: F' Un ?F & s ~= p --> ?P x s p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2), t_empty)
            )],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("TypedSigma.open_lemma'",
     "[| ?e \<turnstile> ?t : ?C; ?s ~: FV ?t' Un FV ?x Un FV ?y;
         ?p ~: FV ?t' Un FV ?x Un FV ?y; ?s ~= ?p;
         ?env \<turnstile> ?x : ?A; ?env \<turnstile> ?y : ?B;
         ?t = {?n \<rightarrow> [Fvar ?s,Fvar ?p]} ?t';
         ?e = ?env\<lparr>?s:?A\<rparr>\<lparr>?p:?B\<rparr> |]
      ==> ?env \<turnstile> {?n \<rightarrow> [?x,?y]} ?t' : ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 11),
                template_var 10),
              template_var 9)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 8),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app
                         (template_hole 7,
                          template_app (template_hole 6, template_var 7)),
                        template_app (template_hole 6, template_var 6))),
                    template_app (template_hole 6, template_var 5)))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 4),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app
                         (template_hole 7,
                          template_app (template_hole 6, template_var 7)),
                        template_app (template_hole 6, template_var 6))),
                    template_app (template_hole 6, template_var 5)))
                )
            ),
        template_negation
         (template_equation (template_var 8, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 3),
                template_var 6),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 3),
                template_var 5),
              template_var 1)
            ),
        template_equation
         (template_var 10,
          template_app
           (template_app
             (template_app
               (template_app (template_hole 3, template_var 0),
                template_app (template_hole 2, template_var 8)),
              template_app (template_hole 2, template_var 4)),
            template_var 7)),
        template_equation
         (template_var 11,
          template_app
           (template_app
             (template_app
               (template_hole 0,
                template_app
                 (template_app
                   (template_app (template_hole 0, template_var 3),
                    template_var 8),
                  template_var 2)),
              template_var 4),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 10, template_var 3),
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 3, template_var 0),
                     template_var 6),
                   template_var 5),
                 template_var 7)),
             template_var 9)
           ))),
    ("TypedSigma.type_renaming",
     "[| ?e\<lparr>?s:?A\<rparr>\<lparr>?p:?B\<rparr> \<turnstile> {?n \<rightarrow> [Fvar
           ?s,Fvar ?p]} ?t : ?T;
         ?s ~: FV ?t; ?p ~: FV ?t; ?x ~: FV ?t; ?y ~: FV ?t;
         ?x ~: env_dom ?e; ?y ~: env_dom ?e; ?x ~= ?y; ?s ~= ?p |]
      ==> ?e\<lparr>?x:?A\<rparr>\<lparr>?y:?B\<rparr> \<turnstile> {?n \<rightarrow> [Fvar
            ?x,Fvar ?y]} ?t : ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app
                     (template_app
                       (template_hole 7,
                        template_app
                         (template_app
                           (template_app (template_hole 7, template_var 9),
                            template_var 8),
                          template_var 7)),
                      template_var 6),
                    template_var 5)),
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 6, template_var 4),
                      template_app (template_hole 5, template_var 8)),
                    template_app (template_hole 5, template_var 6)),
                  template_var 3)),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 8),
                  template_app (template_hole 2, template_var 3))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 6),
                  template_app (template_hole 2, template_var 3))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_app (template_hole 2, template_var 3))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_app (template_hole 2, template_var 3))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_app (template_hole 1, template_var 9))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_app (template_hole 1, template_var 9))
                )
            ),
        template_negation
         (template_equation (template_var 1, template_var 0)),
        template_negation
         (template_equation (template_var 8, template_var 6))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app
                          (template_app (template_hole 7, template_var 9),
                           template_var 1),
                         template_var 7)),
                     template_var 0),
                   template_var 5)),
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 6, template_var 4),
                     template_app (template_hole 5, template_var 1)),
                   template_app (template_hole 5, template_var 0)),
                 template_var 3)),
             template_var 2)
           ))),
    ("TypedSigma.type_renaming'",
     "[| ?e \<turnstile> ?t : ?C; ?s ~: FV ?t'; ?p ~: FV ?t'; ?x ~: FV ?t';
         ?y ~: FV ?t'; ?x ~: env_dom ?env; ?y ~: env_dom ?env; ?s ~= ?p;
         ?x ~= ?y; ?t = {?n \<rightarrow> [Fvar ?s,Fvar ?p]} ?t';
         ?e = ?env\<lparr>?s:?A\<rparr>\<lparr>?p:?B\<rparr> |]
      ==> ?env\<lparr>?x:?A\<rparr>\<lparr>?y:?B\<rparr> \<turnstile> {?n \<rightarrow> [Fvar
              ?x,Fvar ?y]} ?t' : ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 11),
                template_var 10),
              template_var 9)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 8),
                  template_app (template_hole 7, template_var 7))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 6),
                  template_app (template_hole 7, template_var 7))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 5),
                  template_app (template_hole 7, template_var 7))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 4),
                  template_app (template_hole 7, template_var 7))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 5),
                  template_app (template_hole 6, template_var 3))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 4),
                  template_app (template_hole 6, template_var 3))
                )
            ),
        template_negation
         (template_equation (template_var 8, template_var 6)),
        template_negation
         (template_equation (template_var 5, template_var 4)),
        template_equation
         (template_var 10,
          template_app
           (template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_app (template_hole 2, template_var 8)),
              template_app (template_hole 2, template_var 6)),
            template_var 7)),
        template_equation
         (template_var 11,
          template_app
           (template_app
             (template_app
               (template_hole 0,
                template_app
                 (template_app
                   (template_app (template_hole 0, template_var 3),
                    template_var 8),
                  template_var 1)),
              template_var 6),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_app
                      (template_hole 0,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 3),
                           template_var 5),
                         template_var 1)),
                     template_var 4),
                   template_var 0)),
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 3, template_var 2),
                     template_app (template_hole 2, template_var 5)),
                   template_app (template_hole 2, template_var 4)),
                 template_var 7)),
             template_var 9)
           ))),
    ("TypedSigma.select_preserve_type",
     "[| ?env \<turnstile> Obj ?f (Object ?t) : Object ?t; ?s ~: FV ?a;
         ?p ~: FV ?a;
         ?env\<lparr>?s:Object
                         ?t\<rparr>\<lparr>?p:param
         (the (?t ?l2.0))\<rparr> \<turnstile> ?a\<^bsup>[Fvar
                     ?s,Fvar ?p]\<^esup> : return (the (?t ?l2.0));
         ?l1.0 : dom ?t; ?l2.0 : dom ?t |]
      ==> EX F. finite F &
                (ALL s p.
                    s ~: F & p ~: F & s ~= p -->
                    ?env\<lparr>s:Object
                                   ?t\<rparr>\<lparr>p:param
                  (the (?t ?l1.0))\<rparr> \<turnstile> the
                   ((?f(?l2.0 |-> ?a))
                     ?l1.0)\<^bsup>[Fvar
                                     s,Fvar
  p]\<^esup> : return (the (?t ?l1.0)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 22, template_var 7),
                template_app
                 (template_app (template_hole 21, template_var 6),
                  template_app (template_hole 20, template_var 5))),
              template_app (template_hole 20, template_var 5))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 18, template_var 4),
                  template_app (template_hole 17, template_var 3))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 18, template_var 2),
                  template_app (template_hole 17, template_var 3))
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 22,
                  template_app
                   (template_app
                     (template_app
                       (template_hole 16,
                        template_app
                         (template_app
                           (template_app (template_hole 16, template_var 7),
                            template_var 4),
                          template_app (template_hole 20, template_var 5))),
                      template_var 2),
                    template_app
                     (template_hole 15,
                      template_app
                       (template_hole 14,
                        template_app (template_var 5, template_var 1))))),
                template_app
                 (template_app
                   (template_app (template_hole 13, template_var 3),
                    template_app (template_hole 12, template_var 4)),
                  template_app (template_hole 12, template_var 2))),
              template_app
               (template_hole 11,
                template_app
                 (template_hole 14,
                  template_app (template_var 5, template_var 1))))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_app (template_hole 9, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_app (template_hole 9, template_var 5))
            )],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("TypedSigma.ball_Tltsp",
     "[| !!l t t'.
            ALL s p. s ~: ?F & p ~: ?F & s ~= p --> ?P1.0 ?T l t s p ==>
            ALL s p. s ~: ?F' & p ~: ?F' & s ~= p --> ?P2.0 ?T l t s p;
         ALL l:do ?T.
            ALL s p.
               s ~: ?F & p ~: ?F & s ~= p --> ?P1.0 ?T l (the (?f l)) s p |]
      ==> ALL l:do ?T.
             ALL s p.
                s ~: ?F' & p ~: ?F' & s ~= p -->
                ?P2.0 ?T l (the (?f l)) s p",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 3)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)),
             t_empty)
           ))),
    ("TypedSigma.bnd_disj_env_lem",
     "[| ok ?e1.0; env_dom ?e1.0 Int env_dom ?e2.0 = {}; ok ?e2.0;
         ALL s p.
            s ~: ?F & p ~: ?F & s ~= p -->
            ?e1.0\<lparr>s:?T\<rparr>\<lparr>p:param
          (the ?T^?l)\<rparr> \<turnstile> ?t2.0\<^bsup>[Fvar
                    s,Fvar p]\<^esup> : return (the ?T^?l) &
            (env_dom
              (?e1.0\<lparr>s:?T\<rparr>\<lparr>p:param
             (the ?T^?l)\<rparr>) Int
             env_dom ?e2.0 =
             {} -->
             ok ?e2.0 -->
             ?e1.0\<lparr>s:?T\<rparr>\<lparr>p:param
           (the ?T^?l)\<rparr>+?e2.0 \<turnstile> ?t2.0\<^bsup>[Fvar
                           s,Fvar p]\<^esup> : return (the ?T^?l)) |]
      ==> ALL s p.
             s ~: ?F Un env_dom ?e1.0+?e2.0 &
             p ~: ?F Un env_dom ?e1.0+?e2.0 & s ~= p -->
             ?e1.0+?e2.0\<lparr>s:?T\<rparr>\<lparr>p:param
                 (the ?T^?l)\<rparr> \<turnstile> ?t2.0\<^bsup>[Fvar
                           s,Fvar p]\<^esup> : return (the ?T^?l)",
     template_implication
      ([template_predicate
         (template_app (template_hole 20, template_var 5)),
        template_equation
         (template_app
           (template_app
             (template_hole 18,
              template_app (template_hole 17, template_var 5)),
            template_app (template_hole 17, template_var 4)),
          template_hole 16),
        template_predicate
         (template_app (template_hole 20, template_var 4)),
        template_predicate (template_app (template_hole 15, t_empty))],
       template_predicate (template_app (template_hole 15, t_empty)))),
    ("TypedSigma.typing_induct",
     "[| ?env \<turnstile> ?t : ?T;
         !!env T x.
            [| ok env; x : env_dom env; the env!x = T |]
            ==> ?P1.0 env (Fvar x) T;
         !!env T t l p.
            [| env \<turnstile> t : T; ?P1.0 env t T;
               env \<turnstile> p : param (the T^l);
               ?P1.0 env p (param (the T^l)); l : do T |]
            ==> ?P1.0 env (Call t l p) (return (the T^l));
         !!env T t l u.
            [| env \<turnstile> t : T; ?P1.0 env t T; l : do T;
               ?P2.0 env u T l |]
            ==> ?P1.0 env (Upd t l u) T;
         !!env T f.
            [| ok env; dom f = do T;
               ALL l:dom f. ?P2.0 env (the (f l)) T l |]
            ==> ?P1.0 env (Obj f T) T;
         !!env T l t L.
            [| ok env; finite L;
               ALL s p.
                  s ~: L & p ~: L & s ~= p -->
                  env\<lparr>s:T\<rparr>\<lparr>p:param
             (the T^l)\<rparr> \<turnstile> t\<^bsup>[Fvar
                 s,Fvar p]\<^esup> : return (the T^l) &
                  ?P1.0
                   (env\<lparr>s:T\<rparr>\<lparr>p:param (the T^l)\<rparr>)
                   (t\<^bsup>[Fvar s,Fvar p]\<^esup>) (return (the T^l)) |]
            ==> ?P2.0 env t T l |]
      ==> ?P1.0 ?env ?t ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 35, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 34, t_empty)),
        template_predicate (template_app (template_hole 34, t_empty)),
        template_predicate (template_app (template_hole 34, t_empty)),
        template_predicate (template_app (template_hole 34, t_empty)),
        template_predicate (template_app (template_hole 34, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 1, template_var 4),
               template_var 3),
             template_var 2)
           ))),
    ("TypedSigma.bnd_open_lem",
     "[| ALL sa pa.
            sa ~: ?F & pa ~: ?F & sa ~= pa -->
            ?env\<lparr>sa:?T\<rparr>\<lparr>pa:param
           (the ?T^?l)\<rparr> \<turnstile> ?t\<^bsup>[Fvar
                  sa,Fvar pa]\<^esup> : return (the ?T^?l) &
            (ALL env'' t'' s' p' x' y' A' B' n'.
                s' ~: FV t'' Un FV x' Un FV y' -->
                p' ~: FV t'' Un FV x' Un FV y' -->
                s' ~= p' -->
                env'' \<turnstile> x' : A' -->
                env'' \<turnstile> y' : B' -->
                (?t\<^bsup>[Fvar sa,Fvar pa]\<^esup>) =
                {n' \<rightarrow> [Fvar s',Fvar p']} t'' -->
                ?env\<lparr>sa:?T\<rparr>\<lparr>pa:param
               (the ?T^?l)\<rparr> =
                env''\<lparr>s':A'\<rparr>\<lparr>p':B'\<rparr> -->
                env'' \<turnstile> {n' \<rightarrow> [x',y']} t'' : return
                               (the ?T^?l));
         ok ?env; ?env = ?env'\<lparr>?s:?A\<rparr>\<lparr>?p:?B\<rparr>;
         ?s ~: FV ?t'' Un FV ?x Un FV ?y; ?p ~: FV ?t'' Un FV ?x Un FV ?y;
         ?s ~= ?p; ?env' \<turnstile> ?x : ?A; ?env' \<turnstile> ?y : ?B;
         ?t = {Suc ?n \<rightarrow> [Fvar ?s,Fvar ?p]} ?t';
         FV ?t' <= FV ?t'' |]
      ==> ALL sa pa.
             sa ~: ?F Un {?s, ?p} Un env_dom ?env' &
             pa ~: ?F Un {?s, ?p} Un env_dom ?env' & sa ~= pa -->
             ?env'\<lparr>sa:?T\<rparr>\<lparr>pa:param
             (the ?T^?l)\<rparr> \<turnstile> {Suc
          ?n \<rightarrow> [?x,?y]} ?t'\<^bsup>[Fvar
           sa,Fvar pa]\<^esup> : return (the ?T^?l)",
     template_implication
      ([template_predicate (template_app (template_hole 28, t_empty)),
        template_predicate
         (template_app (template_hole 5, template_var 13)),
        template_equation
         (template_var 13,
          template_app
           (template_app
             (template_app
               (template_hole 21,
                template_app
                 (template_app
                   (template_app (template_hole 21, template_var 9),
                    template_var 8),
                  template_var 7)),
              template_var 6),
            template_var 5)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 24, template_var 8),
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app
                         (template_hole 10,
                          template_app (template_hole 9, template_var 4)),
                        template_app (template_hole 9, template_var 3))),
                    template_app (template_hole 9, template_var 2)))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 24, template_var 6),
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app
                         (template_hole 10,
                          template_app (template_hole 9, template_var 4)),
                        template_app (template_hole 9, template_var 3))),
                    template_app (template_hole 9, template_var 2)))
                )
            ),
        template_negation
         (template_equation (template_var 8, template_var 6)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 22, template_var 9),
                template_var 3),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 22, template_var 9),
                template_var 2),
              template_var 5)
            ),
        template_equation
         (template_var 10,
          template_app
           (template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 4, template_var 1)),
                template_app (template_hole 16, template_var 8)),
              template_app (template_hole 16, template_var 6)),
            template_var 0)),
        template_inequation
         (less_equals, template_app (template_hole 9, template_var 0),
          template_app (template_hole 9, template_var 4))],
       template_predicate (template_app (template_hole 28, t_empty)))),
    ("TypedSigma.bnd_renaming_lem",
     "[| ?s ~: FV ?t'; ?p ~: FV ?t'; ?x ~: FV ?t'; ?y ~: FV ?t';
         ?x ~: env_dom ?env'; ?y ~: env_dom ?env'; ?s ~= ?p; ?x ~= ?y;
         ?t = {Suc ?n \<rightarrow> [Fvar ?s,Fvar ?p]} ?t';
         ?env = ?env'\<lparr>?s:?A\<rparr>\<lparr>?p:?B\<rparr>;
         ALL sa pa.
            sa ~: ?F & pa ~: ?F & sa ~= pa -->
            ?env\<lparr>sa:?T\<rparr>\<lparr>pa:param
           (the ?T^?l)\<rparr> \<turnstile> ?t\<^bsup>[Fvar
                  sa,Fvar pa]\<^esup> : return (the ?T^?l) &
            (ALL env'' t'' s' p' x' y' A' B' n'.
                s' ~: FV t'' -->
                p' ~: FV t'' -->
                x' ~: FV t'' -->
                y' ~: FV t'' -->
                x' ~: env_dom env'' -->
                y' ~: env_dom env'' -->
                x' ~= y' -->
                s' ~= p' -->
                (?t\<^bsup>[Fvar sa,Fvar pa]\<^esup>) =
                {n' \<rightarrow> [Fvar s',Fvar p']} t'' -->
                ?env\<lparr>sa:?T\<rparr>\<lparr>pa:param
               (the ?T^?l)\<rparr> =
                env''\<lparr>s':A'\<rparr>\<lparr>p':B'\<rparr> -->
                env''\<lparr>x':A'\<rparr>\<lparr>y':B'\<rparr> \<turnstile> {n' \<rightarrow> [Fvar
                     x',Fvar y']} t'' : return (the ?T^?l));
         FV ?t' <= ?F' |]
      ==> ALL sa pa.
             sa ~: ?F Un {?s, ?p, ?x, ?y} Un ?F' Un env_dom ?env' &
             pa ~: ?F Un {?s, ?p, ?x, ?y} Un ?F' Un env_dom ?env' &
             sa ~= pa -->
             ?env'\<lparr>?x:?A\<rparr>\<lparr>?y:?B\<rparr>\<lparr>sa:?T\<rparr>\<lparr>pa:param
                 (the ?T^?l)\<rparr> \<turnstile> {Suc
              ?n \<rightarrow> [Fvar
                                 ?x,Fvar
                                     ?y]} ?t'\<^bsup>[Fvar
                 sa,Fvar pa]\<^esup> : return (the ?T^?l)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 26, template_var 14),
                  template_app (template_hole 25, template_var 13))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 26, template_var 12),
                  template_app (template_hole 25, template_var 13))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 26, template_var 11),
                  template_app (template_hole 25, template_var 13))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 26, template_var 10),
                  template_app (template_hole 25, template_var 13))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 26, template_var 11),
                  template_app (template_hole 24, template_var 9))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 26, template_var 10),
                  template_app (template_hole 24, template_var 9))
                )
            ),
        template_negation
         (template_equation (template_var 14, template_var 12)),
        template_negation
         (template_equation (template_var 11, template_var 10)),
        template_equation
         (template_var 8,
          template_app
           (template_app
             (template_app
               (template_app
                 (template_hole 21,
                  template_app (template_hole 20, template_var 7)),
                template_app (template_hole 19, template_var 14)),
              template_app (template_hole 19, template_var 12)),
            template_var 13)),
        template_equation
         (template_var 6,
          template_app
           (template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app
                   (template_app (template_hole 17, template_var 9),
                    template_var 14),
                  template_var 5)),
              template_var 12),
            template_var 4)),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_inequation
         (less_equals, template_app (template_hole 25, template_var 13),
          template_var 0)],
       template_predicate (template_app (template_hole 16, t_empty))))]
