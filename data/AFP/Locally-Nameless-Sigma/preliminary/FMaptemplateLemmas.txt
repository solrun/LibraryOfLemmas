   [("FMap.finite_fsets", "finite ?F",
     template_predicate (template_app (template_hole 0, template_var 0))),
    ("FMap.finite_dom_fmap", "finite (dom ?F)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("FMap.finite_fmap_ran", "finite (ran ?F)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("FMap.finite_fset_map", "finite (set_fmap ?F)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("FMap.notin_fmap_minus", "?x ~: set_fmap (?F -- ?x)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1)))
             )
         )),
    ("FMap.rep_fmap_base", "?P ?F = pred_set_fmap ?P (set_fmap ?F)",
     template_equation
      (template_app (template_var 1, template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("FMap.rep_fmap", "EX Fp P'. ?P ?F = P' Fp",
     template_predicate (template_app (template_hole 2, t_empty))),
    ("FMap.fmap_unique", "?x = ?y ==> ?f ?x = ?f ?y",
     template_implication
      ([template_equation (template_var 2, template_var 1)],
       template_equation
        (template_app (template_var 0, template_var 2),
         template_app (template_var 0, template_var 1)))),
    ("FMap.empty_dom", "{} = dom ?g ==> ?g = Map.empty",
     template_implication
      ([template_equation
         (template_hole 3, template_app (template_hole 2, template_var 0))],
       template_equation (template_var 0, t_empty))),
    ("FMap.insert_lem", "insert ?x ?A = ?B ==> ?x : ?B",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("FMap.set_fmap_minus_iff", "set_fmap (?F -- ?x) = set_fmap ?F - {?x}",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 4, template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("FMap.fmap_minus_fmap", "(?F -- ?x) ?a = Some ?b ==> ?F ?a = Some ?b",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 0, template_var 0))],
       template_equation
        (template_app (template_var 3, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("FMap.fst_notin_fmap_minus_dom",
     "insert ?x ?F = set_fmap ?F' ==> fst ?x ~: dom (?F' -- ?x)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 2), template_var 1),
          template_app (template_hole 5, template_var 0))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 2)),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 2)))
               )
           ))),
    ("FMap.fmap_case", "?F = Map.empty | (EX x y F'. ?F = F'(x |-> y))",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 0), t_empty)),
           template_app (template_hole 4, t_empty))
         )),
    ("FMap.set_fmap_pair",
     "?x : set_fmap ?F ==> fst ?x : dom ?F & snd ?x = the (?F (fst ?x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app (template_hole 7, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 1)),
                 template_app (template_hole 3, template_var 0))),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_app
                (template_hole 0,
                 template_app
                  (template_var 0,
                   template_app (template_hole 4, template_var 1)))))
           ))),
    ("FMap.set_fmap_minus_insert",
     "[| ?x ~: ?F; insert ?x ?F = set_fmap ?F' |]
      ==> ?F = set_fmap (?F' -- ?x)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)
                )
            ),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation
        (template_var 1,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("FMap.set_fmap_inv2",
     "fst ?x ~: dom ?F ==>
      insert ?x (set_fmap ?F) = set_fmap (?F(fst ?x |-> snd ?x))",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 8,
                    template_app (template_hole 7, template_var 1)),
                  template_app (template_hole 6, template_var 0))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1),
           template_app (template_hole 3, template_var 0)),
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 0),
               template_app (template_hole 7, template_var 1)),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1))))))),
    ("FMap.fset_induct",
     "[| ?P {}; !!x F. [| x ~: F; ?P F |] ==> ?P (insert x F) |] ==> ?P ?F",
     template_implication
      ([template_predicate (template_app (template_var 1, template_hole 5)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("FMap.set_fmap_inv1",
     "[| fst ?x : dom ?F; snd ?x = the (?F (fst ?x)) |]
      ==> (?F -- ?x)(fst ?x |-> snd ?x) = ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)),
              template_app (template_hole 7, template_var 0))
            ),
        template_equation
         (template_app (template_hole 5, template_var 1),
          template_app
           (template_hole 4,
            template_app
             (template_var 0,
              template_app (template_hole 8, template_var 1))))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)),
             template_app (template_hole 8, template_var 1)),
           template_app
            (template_hole 0,
             template_app (template_hole 5, template_var 1))),
         template_var 0))),
    ("FMap.fmap_induct",
     "[| ?P Map.empty;
         !!F x z. [| x ~: dom F; ?P F |] ==> ?P (F(x |-> z)) |]
      ==> ?P ?F'",
     template_implication
      ([template_predicate (template_app (template_var 1, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("FMap.fmap_ball_all2",
     "ALL l:dom ?f. ALL x y. ?Px x y --> ?P x y (?f l) ==>
      ALL x y. ?Px x y --> (ALL l:dom ?f. ?P x y (?f l))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 2)),
              t_empty)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("FMap.fmap_ball_all2'",
     "ALL l:dom ?f. ALL x y. ?Px x y --> ?P x y (?f l) l ==>
      ALL x y. ?Px x y --> (ALL l:dom ?f. ?P x y (?f l) l)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 2)),
              t_empty)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("FMap.rep_fmap_imp",
     "ALL F x z. x ~: dom F --> ?P F --> ?P (F(x |-> z)) ==>
      ALL F x z.
         x ~: fst ` set_fmap F -->
         pred_set_fmap ?P (set_fmap F) -->
         pred_set_fmap ?P (insert (x, z) (set_fmap F))",
     template_implication
      ([template_predicate (template_app (template_hole 14, t_empty))],
       template_predicate (template_app (template_hole 14, t_empty)))),
    ("FMap.fmap_ball_all4'",
     "ALL l:dom ?f. ALL x y z a. ?Px x y z a --> ?P x y z a (?f l) l ==>
      ALL x y z a. ?Px x y z a --> (ALL l:dom ?f. ?P x y z a (?f l) l)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 2)),
              t_empty)
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("FMap.fmap_ball_all3",
     "[| dom ?f' = dom ?f;
         ALL l:dom ?f. ALL x y z. ?Px x y z --> ?P x y z (?f l) (?f' l) |]
      ==> ALL x y z. ?Px x y z --> (ALL l:dom ?f. ?P x y z (?f l) (?f' l))",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 3),
          template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 5, template_var 2)),
              t_empty)
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("FMap.fmap_ex_cof",
     "ALL l:dom ?f.
         EX L. finite L &
               (ALL s p. s ~: L & p ~: L & s ~= p --> ?P s p (?f l) l) ==>
      EX L. finite L &
            (ALL l:dom ?f.
                ALL s p. s ~: L & p ~: L & s ~= p --> ?P s p (?f l) l)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)),
              t_empty)
            )],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("FMap.fmap_ex_cof2",
     "[| dom ?f' = dom ?f;
         ALL l:dom ?f.
            EX L. finite L &
                  (ALL s p.
                      s ~: L & p ~: L & s ~= p -->
                      ?P s p (?f l) (?f' l) l) |]
      ==> EX L. finite L &
                (ALL l:dom ?f.
                    ALL s p.
                       s ~: L & p ~: L & s ~= p -->
                       ?P s p (?f l) (?f' l) l)",
     template_implication
      ([template_equation
         (template_app (template_hole 9, template_var 2),
          template_app (template_hole 9, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 9, template_var 1)),
              t_empty)
            )],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("FMap.fmap_induct3",
     "[| dom ?F1.0 = dom ?F2.0; dom ?F3.0 = dom ?F1.0;
         ?P Map.empty Map.empty Map.empty;
         !!x a b c F1 F2 F3.
            [| ?P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1; x ~: dom F1 |]
            ==> ?P (F1(x |-> a)) (F2(x |-> b)) (F3(x |-> c)) |]
      ==> ?P ?F1.0 ?F2.0 ?F3.0",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 3),
          template_app (template_hole 8, template_var 2)),
        template_equation
         (template_app (template_hole 8, template_var 1),
          template_app (template_hole 8, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_var 0, t_empty), t_empty),
              t_empty)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 0, template_var 3),
               template_var 2),
             template_var 1)
           )))]
