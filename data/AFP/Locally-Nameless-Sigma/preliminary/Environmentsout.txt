Loading theory "Draft.Environments" (required by "Draft.EnvironmentsMoreTemplates")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.EnvironmentsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.EnvironmentsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.EnvironmentsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.138s elapsed time, 0.571s cpu time, 0.051s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.EnvironmentsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.248s elapsed time, 1.005s cpu time, 0.051s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.EnvironmentsMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.327s elapsed time, 1.302s cpu time, 0.151s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.EnvironmentsMoreTemplates" via "Draft.ExtrEqs")
consts
  add :: "'a environment => char list => 'a => 'a environment"
consts
  env_dom :: "'a environment => char list set"
consts
  env_get :: "'a environment => char list => 'a option"
consts
  ok :: "'a environment => bool"
consts
  left :: "'a tree => 'a tree"
### Ambiguous input (line 78 of "$AFP/Locally-Nameless-Sigma/preliminary/Environments.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Environments.env_get"
###       ("\<^const>HOL.Ex_binder" ("_position" T) ("_position" e))
###       ("_position" x))
###     ("_applC" ("_position" Some) ("_position" T))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" T)
###     ("\<^const>HOL.eq" ("\<^const>List.nth" ("_position" e) ("_position" x))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" T)
###     ("\<^const>HOL.eq"
###       ("\<^const>Environments.env_get" ("_position" e) ("_position" x))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Environments.env_get"
###     ("\<^const>HOL.Ex_binder" ("_position" T) ("_position" e))
###     ("\<^const>HOL.eq" ("_position" x)
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" T)
###     ("\<^const>Environments.env_get" ("_position" e)
###       ("\<^const>HOL.eq" ("_position" x)
###         ("_applC" ("_position" Some) ("_position" T))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" T)
###     ("_applC"
###       ("\<^const>Environments.env_get" ("_position" e)
###         ("\<^const>HOL.eq" ("_position" x) ("_position" Some)))
###       ("_position" T))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>Environments.env_get"
###       ("\<^const>HOL.Ex_binder" ("_position" T) ("_position" e))
###       ("\<^const>HOL.eq" ("_position" x) ("_position" Some)))
###     ("_position" T)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
### Ambiguous input (line 275 of "$AFP/Locally-Nameless-Sigma/preliminary/Environments.thy") produces 10 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Environments.env_get"
###     ("\<^const>HOL.eq" ("\<^const>List.nth" ("_position" e) ("_position" x))
###       ("\<^const>Environments.add" ("_position" e) ("_position" a)
###         ("_position" X)))
###     ("_position" x)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Environments.env_get"
###     ("\<^const>HOL.eq"
###       ("\<^const>Environments.env_get" ("_position" e) ("_position" x))
###       ("\<^const>Environments.add" ("_position" e) ("_position" a)
###         ("_position" X)))
###     ("_position" x)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>List.nth" ("_position" e)
###     ("\<^const>Environments.env_get"
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Environments.add" ("_position" e) ("_position" a)
###           ("_position" X)))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Environments.env_get" ("_position" e)
###     ("\<^const>Environments.env_get"
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Environments.add" ("_position" e) ("_position" a)
###           ("_position" X)))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>List.nth"
###     ("\<^const>Environments.env_get" ("_position" e)
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Environments.add" ("_position" e) ("_position" a)
###           ("_position" X))))
###     ("_position" x)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Environments.env_get"
###     ("\<^const>Environments.env_get" ("_position" e)
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Environments.add" ("_position" e) ("_position" a)
###           ("_position" X))))
###     ("_position" x)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^const>List.nth" ("_position" e) ("_position" x))
###     ("\<^const>Environments.env_get"
###       ("\<^const>Environments.add" ("_position" e) ("_position" a)
###         ("_position" X))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Environments.env_get" ("_position" e) ("_position" x))
###     ("\<^const>Environments.env_get"
###       ("\<^const>Environments.add" ("_position" e) ("_position" a)
###         ("_position" X))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Environments.env_get" ("_position" e)
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Environments.env_get"
###         ("\<^const>Environments.add" ("_position" e) ("_position" a)
###           ("_position" X))
###         ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Environments.env_get"
###     ("\<^const>Environments.add"
###       ("\<^const>Environments.env_get" ("_position" e)
###         ("\<^const>HOL.eq" ("_position" x) ("_position" e)))
###       ("_position" a) ("_position" X))
###     ("_position" x)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for coinductive predicate(s) "streamsp"
### Ambiguous input (line 292 of "$AFP/Locally-Nameless-Sigma/preliminary/Environments.thy") produces 11 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Environments.env_get"
###     ("\<^const>Environments.add"
###       ("\<^const>Environments.add"
###         ("\<^const>Environments.env_get" ("_position" e)
###           ("\<^const>HOL.eq" ("_position" x) ("_position" e)))
###         ("_position" a) ("_position" X))
###       ("_position" b) ("_position" Y))
###     ("_position" x)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Environments.env_get"
###     ("\<^const>HOL.eq" ("\<^const>List.nth" ("_position" e) ("_position" x))
###       ("\<^const>Environments.add"
###         ("\<^const>Environments.add" ("_position" e) ("_position" a)
###           ("_position" X))
###         ("_position" b) ("_position" Y)))
###     ("_position" x)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Environments.env_get"
###     ("\<^const>HOL.eq"
###       ("\<^const>Environments.env_get" ("_position" e) ("_position" x))
###       ("\<^const>Environments.add"
###         ("\<^const>Environments.add" ("_position" e) ("_position" a)
###           ("_position" X))
###         ("_position" b) ("_position" Y)))
###     ("_position" x)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>List.nth" ("_position" e)
###     ("\<^const>Environments.env_get"
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Environments.add"
###           ("\<^const>Environments.add" ("_position" e) ("_position" a)
###             ("_position" X))
###           ("_position" b) ("_position" Y)))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Environments.env_get" ("_position" e)
###     ("\<^const>Environments.env_get"
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Environments.add"
###           ("\<^const>Environments.add" ("_position" e) ("_position" a)
###             ("_position" X))
###           ("_position" b) ("_position" Y)))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>List.nth"
###     ("\<^const>Environments.env_get" ("_position" e)
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Environments.add"
###           ("\<^const>Environments.add" ("_position" e) ("_position" a)
###             ("_position" X))
###           ("_position" b) ("_position" Y))))
###     ("_position" x)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Environments.env_get"
###     ("\<^const>Environments.env_get" ("_position" e)
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Environments.add"
###           ("\<^const>Environments.add" ("_position" e) ("_position" a)
###             ("_position" X))
###           ("_position" b) ("_position" Y))))
###     ("_position" x)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^const>List.nth" ("_position" e) ("_position" x))
###     ("\<^const>Environments.env_get"
###       ("\<^const>Environments.add"
###         ("\<^const>Environments.add" ("_position" e) ("_position" a)
###           ("_position" X))
###         ("_position" b) ("_position" Y))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Environments.env_get" ("_position" e) ("_position" x))
###     ("\<^const>Environments.env_get"
###       ("\<^const>Environments.add"
###         ("\<^const>Environments.add" ("_position" e) ("_position" a)
###           ("_position" X))
###         ("_position" b) ("_position" Y))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Environments.env_get" ("_position" e)
###     ("\<^const>HOL.eq" ("_position" x)
###       ("\<^const>Environments.env_get"
###         ("\<^const>Environments.add"
###           ("\<^const>Environments.add" ("_position" e) ("_position" a)
###             ("_position" X))
###           ("_position" b) ("_position" Y))
###         ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
  Proving monotonicity ...
### Ambiguous input (line 296 of "$AFP/Locally-Nameless-Sigma/preliminary/Environments.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" x)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" a)
###           ("_applC" ("_position" env_dom) ("_position" e))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Environments.env_get"
###       ("\<^const>HOL.eq"
###         ("\<^const>Environments.env_get"
###           ("\<^const>Environments.add" ("_position" e) ("_position" a)
###             ("_position" X))
###           ("_position" x))
###         ("_position" e))
###       ("_position" x))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" x)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" a)
###           ("_applC" ("_position" env_dom) ("_position" e))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>List.nth"
###       ("\<^const>Environments.env_get"
###         ("\<^const>Environments.add" ("_position" e) ("_position" a)
###           ("_position" X))
###         ("\<^const>HOL.eq" ("_position" x) ("_position" e)))
###       ("_position" x))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" x)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" a)
###           ("_applC" ("_position" env_dom) ("_position" e))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Environments.env_get"
###       ("\<^const>Environments.env_get"
###         ("\<^const>Environments.add" ("_position" e) ("_position" a)
###           ("_position" X))
###         ("\<^const>HOL.eq" ("_position" x) ("_position" e)))
###       ("_position" x))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" x)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" a)
###           ("_applC" ("_position" env_dom) ("_position" e))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Environments.env_get"
###       ("\<^const>Environments.add" ("_position" e) ("_position" a)
###         ("_position" X))
###       ("\<^const>Environments.env_get"
###         ("\<^const>HOL.eq" ("_position" x) ("_position" e))
###         ("_position" x)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" x)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" a)
###           ("_applC" ("_position" env_dom) ("_position" e))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Environments.env_get"
###         ("\<^const>Environments.add" ("_position" e) ("_position" a)
###           ("_position" X))
###         ("_position" x))
###       ("\<^const>List.nth" ("_position" e) ("_position" x)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" x)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" a)
###           ("_applC" ("_position" env_dom) ("_position" e))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Environments.env_get"
###       ("\<^const>Environments.add" ("_position" e) ("_position" a)
###         ("_position" X))
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>List.nth" ("_position" e) ("_position" x))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" x)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" a)
###           ("_applC" ("_position" env_dom) ("_position" e))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Environments.env_get"
###         ("\<^const>Environments.add" ("_position" e) ("_position" a)
###           ("_position" X))
###         ("_position" x))
###       ("\<^const>Environments.env_get" ("_position" e) ("_position" x)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" x)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" a)
###           ("_applC" ("_position" env_dom) ("_position" e))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Environments.env_get"
###       ("\<^const>Environments.add" ("_position" e) ("_position" a)
###         ("_position" X))
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Environments.env_get" ("_position" e)
###           ("_position" x))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 300 of "$AFP/Locally-Nameless-Sigma/preliminary/Environments.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" x)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" a)
###           ("_applC" ("_position" env_dom) ("_position" e))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.not_member" ("_position" b)
###             ("_applC" ("_position" env_dom) ("_position" e))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Environments.env_get"
###       ("\<^const>HOL.eq"
###         ("\<^const>Environments.env_get"
###           ("\<^const>Environments.add"
###             ("\<^const>Environments.add" ("_position" e) ("_position" a)
###               ("_position" X))
###             ("_position" b) ("_position" Y))
###           ("_position" x))
###         ("_position" e))
###       ("_position" x))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" x)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" a)
###           ("_applC" ("_position" env_dom) ("_position" e))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.not_member" ("_position" b)
###             ("_applC" ("_position" env_dom) ("_position" e))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>List.nth"
###       ("\<^const>Environments.env_get"
###         ("\<^const>Environments.add"
###           ("\<^const>Environments.add" ("_position" e) ("_position" a)
###             ("_position" X))
###           ("_position" b) ("_position" Y))
###         ("\<^const>HOL.eq" ("_position" x) ("_position" e)))
###       ("_position" x))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" x)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" a)
###           ("_applC" ("_position" env_dom) ("_position" e))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.not_member" ("_position" b)
###             ("_applC" ("_position" env_dom) ("_position" e))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Environments.env_get"
###       ("\<^const>Environments.env_get"
###         ("\<^const>Environments.add"
###           ("\<^const>Environments.add" ("_position" e) ("_position" a)
###             ("_position" X))
###           ("_position" b) ("_position" Y))
###         ("\<^const>HOL.eq" ("_position" x) ("_position" e)))
###       ("_position" x))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" x)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" a)
###           ("_applC" ("_position" env_dom) ("_position" e))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.not_member" ("_position" b)
###             ("_applC" ("_position" env_dom) ("_position" e))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Environments.env_get"
###       ("\<^const>Environments.add"
###         ("\<^const>Environments.add" ("_position" e) ("_position" a)
###           ("_position" X))
###         ("_position" b) ("_position" Y))
###       ("\<^const>Environments.env_get"
###         ("\<^const>HOL.eq" ("_position" x) ("_position" e))
###         ("_position" x)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" x)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" a)
###           ("_applC" ("_position" env_dom) ("_position" e))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.not_member" ("_position" b)
###             ("_applC" ("_position" env_dom) ("_position" e))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Environments.env_get"
###         ("\<^const>Environments.add"
###           ("\<^const>Environments.add" ("_position" e) ("_position" a)
###             ("_position" X))
###           ("_position" b) ("_position" Y))
###         ("_position" x))
###       ("\<^const>List.nth" ("_position" e) ("_position" x)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" x)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" a)
###           ("_applC" ("_position" env_dom) ("_position" e))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.not_member" ("_position" b)
###             ("_applC" ("_position" env_dom) ("_position" e))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Environments.env_get"
###       ("\<^const>Environments.add"
###         ("\<^const>Environments.add" ("_position" e) ("_position" a)
###           ("_position" X))
###         ("_position" b) ("_position" Y))
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>List.nth" ("_position" e) ("_position" x))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" x)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" a)
###           ("_applC" ("_position" env_dom) ("_position" e))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.not_member" ("_position" b)
###             ("_applC" ("_position" env_dom) ("_position" e))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Environments.env_get"
###         ("\<^const>Environments.add"
###           ("\<^const>Environments.add" ("_position" e) ("_position" a)
###             ("_position" X))
###           ("_position" b) ("_position" Y))
###         ("_position" x))
###       ("\<^const>Environments.env_get" ("_position" e) ("_position" x)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" x)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" a)
###           ("_applC" ("_position" env_dom) ("_position" e))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.not_member" ("_position" b)
###             ("_applC" ("_position" env_dom) ("_position" e))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Environments.env_get"
###       ("\<^const>Environments.add"
###         ("\<^const>Environments.add" ("_position" e) ("_position" a)
###           ("_position" X))
###         ("_position" b) ("_position" Y))
###       ("\<^const>HOL.eq" ("_position" x)
###         ("\<^const>Environments.env_get" ("_position" e)
###           ("_position" x))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 304 of "$AFP/Locally-Nameless-Sigma/preliminary/Environments.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member" ("_position" xa)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" ok) ("_position" e)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Environments.env_get"
###             ("\<^const>Environments.add"
###               ("_applC" ("_position" the) ("_position" e)) ("_position" xa)
###               ("_position" U))
###             ("\<^const>HOL.eq" ("_position" xa) ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" U) ("_position" T))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member" ("_position" xa)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" ok) ("_position" e)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" the)
###             ("\<^const>Environments.env_get"
###               ("\<^const>Environments.add" ("_position" e) ("_position" xa)
###                 ("_position" U))
###               ("\<^const>HOL.eq" ("_position" xa) ("_position" T))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" U) ("_position" T))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member" ("_position" xa)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" ok) ("_position" e)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>Environments.env_get"
###               ("\<^const>Environments.add"
###                 ("_applC" ("_position" the) ("_position" e))
###                 ("_position" xa) ("_position" U))
###               ("_position" xa))
###             ("_position" T))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" U) ("_position" T))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member" ("_position" xa)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" ok) ("_position" e)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" the)
###               ("\<^const>Environments.env_get"
###                 ("\<^const>Environments.add" ("_position" e)
###                   ("_position" xa) ("_position" U))
###                 ("_position" xa)))
###             ("_position" T))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" U) ("_position" T))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 307 of "$AFP/Locally-Nameless-Sigma/preliminary/Environments.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member" ("_position" xa)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" ok) ("_position" e)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" the)
###         ("\<^const>Environments.env_get"
###           ("\<^const>Environments.add" ("_position" e) ("_position" xa)
###             ("_position" U))
###           ("_position" xa)))
###       ("_position" U))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member" ("_position" xa)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" ok) ("_position" e)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Environments.env_get"
###         ("\<^const>Environments.add"
###           ("_applC" ("_position" the) ("_position" e)) ("_position" xa)
###           ("_position" U))
###         ("_position" xa))
###       ("_position" U))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member" ("_position" xa)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" ok) ("_position" e)))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" the)
###       ("\<^const>Environments.env_get"
###         ("\<^const>Environments.add" ("_position" e) ("_position" xa)
###           ("_position" U))
###         ("\<^const>HOL.eq" ("_position" xa) ("_position" U))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member" ("_position" xa)
###         ("_applC" ("_position" env_dom) ("_position" e))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" ok) ("_position" e)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Environments.env_get"
###       ("\<^const>Environments.add"
###         ("_applC" ("_position" the) ("_position" e)) ("_position" xa)
###         ("_position" U))
###       ("\<^const>HOL.eq" ("_position" xa) ("_position" U)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 313 of "$AFP/Locally-Nameless-Sigma/preliminary/Environments.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Environments.env_get"
###       ("\<^const>Environments.add"
###         ("\<^const>Environments.add"
###           ("_applC" ("_position" the) ("_position" e)) ("_position" x)
###           ("_position" A))
###         ("_position" y) ("_position" B))
###       ("_position" x))
###     ("_position" A)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the)
###       ("\<^const>Environments.env_get"
###         ("\<^const>Environments.add"
###           ("\<^const>Environments.add" ("_position" e) ("_position" x)
###             ("_position" A))
###           ("_position" y) ("_position" B))
###         ("_position" x)))
###     ("_position" A)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Environments.env_get"
###     ("\<^const>Environments.add"
###       ("\<^const>Environments.add"
###         ("_applC" ("_position" the) ("_position" e)) ("_position" x)
###         ("_position" A))
###       ("_position" y) ("_position" B))
###     ("\<^const>HOL.eq" ("_position" x) ("_position" A))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" the)
###     ("\<^const>Environments.env_get"
###       ("\<^const>Environments.add"
###         ("\<^const>Environments.add" ("_position" e) ("_position" x)
###           ("_position" A))
###         ("_position" y) ("_position" B))
###       ("\<^const>HOL.eq" ("_position" x) ("_position" A)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 322 of "$AFP/Locally-Nameless-Sigma/preliminary/Environments.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Environments.env_get"
###       ("\<^const>Environments.add"
###         ("\<^const>Environments.add"
###           ("_applC" ("_position" the) ("_position" e)) ("_position" x)
###           ("_position" A))
###         ("_position" y) ("_position" B))
###       ("_position" y))
###     ("_position" B)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the)
###       ("\<^const>Environments.env_get"
###         ("\<^const>Environments.add"
###           ("\<^const>Environments.add" ("_position" e) ("_position" x)
###             ("_position" A))
###           ("_position" y) ("_position" B))
###         ("_position" y)))
###     ("_position" B)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Environments.env_get"
###     ("\<^const>Environments.add"
###       ("\<^const>Environments.add"
###         ("_applC" ("_position" the) ("_position" e)) ("_position" x)
###         ("_position" A))
###       ("_position" y) ("_position" B))
###     ("\<^const>HOL.eq" ("_position" y) ("_position" B))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" the)
###     ("\<^const>Environments.env_get"
###       ("\<^const>Environments.add"
###         ("\<^const>Environments.add" ("_position" e) ("_position" x)
###           ("_position" A))
###         ("_position" y) ("_position" B))
###       ("\<^const>HOL.eq" ("_position" y) ("_position" B)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Missing patterns in function definition:
### !!b. Malformed+b = undefined
### !!a. a+Malformed = undefined
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "{}"
### Ambiguous input (line 367 of "$AFP/Locally-Nameless-Sigma/preliminary/Environments.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" env_dom)
###       ("\<^const>Groups.plus_class.plus" ("_position" e1) ("_position" e2)))
###     ("\<^const>Set.union" ("_applC" ("_position" env_dom) ("_position" e1))
###       ("_applC" ("_position" env_dom) ("_position" e2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" env_dom)
###       ("\<^const>Environments.env_app" ("_position" e1) ("_position" e2)))
###     ("\<^const>Set.union" ("_applC" ("_position" env_dom) ("_position" e1))
###       ("_applC" ("_position" env_dom) ("_position" e2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### Ambiguous input (line 380 of "$AFP/Locally-Nameless-Sigma/preliminary/Environments.thy") produces 35 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the)
###       ("\<^const>Environments.env_get"
###         ("\<^const>Groups.plus_class.plus" ("_position" e1)
###           ("_position" e2))
###         ("_position" x)))
###     ("\<^const>List.nth" ("_applC" ("_position" the) ("_position" e1))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the)
###       ("\<^const>Environments.env_app" ("_position" e1)
###         ("\<^const>Environments.env_get" ("_position" e2) ("_position" x))))
###     ("\<^const>List.nth" ("_applC" ("_position" the) ("_position" e1))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the)
###       ("\<^const>Environments.env_app" ("_position" e1)
###         ("\<^const>List.nth" ("_position" e2) ("_position" x))))
###     ("\<^const>List.nth" ("_applC" ("_position" the) ("_position" e1))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the)
###       ("\<^const>Groups.plus_class.plus" ("_position" e1)
###         ("\<^const>Environments.env_get" ("_position" e2) ("_position" x))))
###     ("\<^const>List.nth" ("_applC" ("_position" the) ("_position" e1))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the)
###       ("\<^const>Groups.plus_class.plus" ("_position" e1)
###         ("\<^const>List.nth" ("_position" e2) ("_position" x))))
###     ("\<^const>List.nth" ("_applC" ("_position" the) ("_position" e1))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the)
###       ("\<^const>Environments.env_get"
###         ("\<^const>Environments.env_app" ("_position" e1) ("_position" e2))
###         ("_position" x)))
###     ("\<^const>List.nth" ("_applC" ("_position" the) ("_position" e1))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the)
###       ("\<^const>List.nth"
###         ("\<^const>Environments.env_app" ("_position" e1) ("_position" e2))
###         ("_position" x)))
###     ("\<^const>List.nth" ("_applC" ("_position" the) ("_position" e1))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the)
###       ("\<^const>Environments.env_get"
###         ("\<^const>Groups.plus_class.plus" ("_position" e1)
###           ("_position" e2))
###         ("_position" x)))
###     ("\<^const>Environments.env_get"
###       ("_applC" ("_position" the) ("_position" e1)) ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the)
###       ("\<^const>Environments.env_app" ("_position" e1)
###         ("\<^const>Environments.env_get" ("_position" e2) ("_position" x))))
###     ("\<^const>Environments.env_get"
###       ("_applC" ("_position" the) ("_position" e1)) ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the)
###       ("\<^const>Environments.env_app" ("_position" e1)
###         ("\<^const>List.nth" ("_position" e2) ("_position" x))))
###     ("\<^const>Environments.env_get"
###       ("_applC" ("_position" the) ("_position" e1)) ("_position" x))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 396 of "$AFP/Locally-Nameless-Sigma/preliminary/Environments.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" ok)
###     ("\<^const>Groups.plus_class.plus" ("_position" e1) ("_position" e2))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" ok)
###     ("\<^const>Environments.env_app" ("_position" e1) ("_position" e2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 408 of "$AFP/Locally-Nameless-Sigma/preliminary/Environments.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Environments.env_app"
###     ("\<^const>HOL.eq"
###       ("\<^const>Environments.add"
###         ("\<^const>Environments.env_app" ("_position" e1) ("_position" e2))
###         ("_position" x) ("_position" X))
###       ("\<^const>Environments.add" ("_position" e1) ("_position" x)
###         ("_position" X)))
###     ("_position" e2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Environments.env_app"
###     ("\<^const>HOL.eq"
###       ("\<^const>Environments.add"
###         ("\<^const>Groups.plus_class.plus" ("_position" e1)
###           ("_position" e2))
###         ("_position" x) ("_position" X))
###       ("\<^const>Environments.add" ("_position" e1) ("_position" x)
###         ("_position" X)))
###     ("_position" e2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Environments.add"
###       ("\<^const>Environments.env_app" ("_position" e1) ("_position" e2))
###       ("_position" x) ("_position" X))
###     ("\<^const>Environments.env_app"
###       ("\<^const>Environments.add" ("_position" e1) ("_position" x)
###         ("_position" X))
###       ("_position" e2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Environments.add"
###       ("\<^const>Groups.plus_class.plus" ("_position" e1) ("_position" e2))
###       ("_position" x) ("_position" X))
###     ("\<^const>Environments.env_app"
###       ("\<^const>Environments.add" ("_position" e1) ("_position" x)
###         ("_position" X))
###       ("_position" e2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Environments.add"
###       ("\<^const>Environments.env_app" ("_position" e1) ("_position" e2))
###       ("_position" x) ("_position" X))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^const>Environments.add" ("_position" e1) ("_position" x)
###         ("_position" X))
###       ("_position" e2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Environments.add"
###       ("\<^const>Groups.plus_class.plus" ("_position" e1) ("_position" e2))
###       ("_position" x) ("_position" X))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^const>Environments.add" ("_position" e1) ("_position" x)
###         ("_position" X))
###       ("_position" e2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 436 of "$AFP/Locally-Nameless-Sigma/preliminary/Environments.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Environments.env_app"
###     ("\<^const>HOL.eq"
###       ("\<^const>Environments.add"
###         ("\<^const>Environments.add"
###           ("\<^const>Groups.plus_class.plus" ("_position" e1)
###             ("_position" e2))
###           ("_position" x) ("_position" X))
###         ("_position" y) ("_position" Y))
###       ("\<^const>Environments.add"
###         ("\<^const>Environments.add" ("_position" e1) ("_position" x)
###           ("_position" X))
###         ("_position" y) ("_position" Y)))
###     ("_position" e2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Environments.env_app"
###     ("\<^const>HOL.eq"
###       ("\<^const>Environments.add"
###         ("\<^const>Environments.add"
###           ("\<^const>Environments.env_app" ("_position" e1)
###             ("_position" e2))
###           ("_position" x) ("_position" X))
###         ("_position" y) ("_position" Y))
###       ("\<^const>Environments.add"
###         ("\<^const>Environments.add" ("_position" e1) ("_position" x)
###           ("_position" X))
###         ("_position" y) ("_position" Y)))
###     ("_position" e2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Environments.add"
###       ("\<^const>Environments.add"
###         ("\<^const>Groups.plus_class.plus" ("_position" e1)
###           ("_position" e2))
###         ("_position" x) ("_position" X))
###       ("_position" y) ("_position" Y))
###     ("\<^const>Environments.env_app"
###       ("\<^const>Environments.add"
###         ("\<^const>Environments.add" ("_position" e1) ("_position" x)
###           ("_position" X))
###         ("_position" y) ("_position" Y))
###       ("_position" e2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Environments.add"
###       ("\<^const>Environments.add"
###         ("\<^const>Environments.env_app" ("_position" e1) ("_position" e2))
###         ("_position" x) ("_position" X))
###       ("_position" y) ("_position" Y))
###     ("\<^const>Environments.env_app"
###       ("\<^const>Environments.add"
###         ("\<^const>Environments.add" ("_position" e1) ("_position" x)
###           ("_position" X))
###         ("_position" y) ("_position" Y))
###       ("_position" e2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Environments.add"
###       ("\<^const>Environments.add"
###         ("\<^const>Groups.plus_class.plus" ("_position" e1)
###           ("_position" e2))
###         ("_position" x) ("_position" X))
###       ("_position" y) ("_position" Y))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^const>Environments.add"
###         ("\<^const>Environments.add" ("_position" e1) ("_position" x)
###           ("_position" X))
###         ("_position" y) ("_position" Y))
###       ("_position" e2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Environments.add"
###       ("\<^const>Environments.add"
###         ("\<^const>Environments.env_app" ("_position" e1) ("_position" e2))
###         ("_position" x) ("_position" X))
###       ("_position" y) ("_position" Y))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^const>Environments.add"
###         ("\<^const>Environments.add" ("_position" e1) ("_position" x)
###           ("_position" X))
###         ("_position" y) ("_position" Y))
###       ("_position" e2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### theory "Draft.Environments"
### 1.148s elapsed time, 4.409s cpu time, 0.923s GC time
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 1.025s elapsed time, 3.784s cpu time, 0.911s GC time
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.074s elapsed time, 3.748s cpu time, 0.810s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.902s elapsed time, 5.229s cpu time, 1.013s GC time
Loading theory "Draft.Templates" (required by "Draft.EnvironmentsMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.047s elapsed time, 0.062s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.EnvironmentsMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.464s elapsed time, 0.512s cpu time, 0.059s GC time
Loading theory "Draft.EnvironmentsMoreTemplates"
val templateLemmas =
   [("Environments.ok_finite", "ok ?e ==> finite (env_dom ?e)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Environments.not_malformed_smaller",
     "ok (?e\<lparr>?a:?X\<rparr>) ==> ok ?e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 2)))),
    ("Environments.ok_ok", "ok ?e ==> EX x. ?e = Env x",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Environments.not_malformed",
     "?x : env_dom ?e ==> EX fun. ?e = Env fun",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Environments.not_in_smaller",
     "ok (?e\<lparr>?a:?X\<rparr>) ==> ?a ~: env_dom ?e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app (template_hole 0, template_var 2))
               )
           ))),
    ("Environments.in_add",
     "ok (?e\<lparr>?a:?X\<rparr>) ==>
      ?a : env_dom (?e\<lparr>?a:?X\<rparr>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1),
                 template_var 0)))
           ))),
    ("Environments.ok_add_ok",
     "[| ok ?e; ?x ~: env_dom ?e |] ==> ok (?e\<lparr>?x:?X\<rparr>)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_app (template_hole 1, template_var 2))
                )
            )],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Environments.in_env_smaller",
     "[| ?x : env_dom (?e\<lparr>?a:?X\<rparr>); ?x ~= ?a |]
      ==> ?x : env_dom ?e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 2),
                    template_var 1),
                  template_var 0)))
            ),
        template_negation
         (template_equation (template_var 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 3),
             template_app (template_hole 3, template_var 2))
           ))),
    ("Environments.env_bigger",
     "[| ?a ~: env_dom ?e; ?x : env_dom ?e |]
      ==> ?x : env_dom (?e\<lparr>?a:?X\<rparr>)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_app (template_hole 1, template_var 2))
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 3),
                 template_var 0)))
           ))),
    ("Environments.add_get",
     "[| ?xa ~: env_dom ?e; ok ?e |]
      ==> the ?e\<lparr>?xa:?U\<rparr>!?xa = ?U",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_app (template_hole 5, template_var 1))
                )
            ),
        template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 2),
                 template_var 0)),
             template_var 2)),
         template_var 0))),
    ("Environments.subst_add",
     "?x ~= ?y ==>
      ?e\<lparr>?x:?a\<rparr>\<lparr>?y:?b\<rparr> =
      ?e\<lparr>?y:?b\<rparr>\<lparr>?x:?a\<rparr>",
     template_implication
      ([template_negation
         (template_equation (template_var 4, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 4),
                 template_var 1)),
             template_var 3),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 3),
                 template_var 0)),
             template_var 4),
           template_var 1)))),
    ("Environments.not_in_env_bigger",
     "[| ?x ~: env_dom ?e; ?x ~= ?a |]
      ==> ?x ~: env_dom (?e\<lparr>?a:?X\<rparr>)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_app (template_hole 2, template_var 2))
                )
            ),
        template_negation
         (template_equation (template_var 3, template_var 1))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 1),
                     template_var 0)))
               )
           ))),
    ("Environments.env_app_ok",
     "[| ok ?e1.0; env_dom ?e1.0 Int env_dom ?e2.0 = {}; ok ?e2.0 |]
      ==> ok ?e1.0+?e2.0",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 1)),
            template_app (template_hole 2, template_var 0)),
          template_hole 1),
        template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Environments.add_get2_1",
     "ok (?e\<lparr>?x:?A\<rparr>\<lparr>?y:?B\<rparr>) ==>
      the ?e\<lparr>?x:?A\<rparr>\<lparr>?y:?B\<rparr>!?x = ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app
                       (template_app (template_hole 3, template_var 4),
                        template_var 3),
                      template_var 2)),
                  template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_app (template_hole 3, template_var 4),
                         template_var 3),
                       template_var 2)),
                   template_var 1),
                 template_var 0)),
             template_var 3)),
         template_var 2))),
    ("Environments.add_get2_2",
     "ok (?e\<lparr>?x:?A\<rparr>\<lparr>?y:?B\<rparr>) ==>
      the ?e\<lparr>?x:?A\<rparr>\<lparr>?y:?B\<rparr>!?y = ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app
                       (template_app (template_hole 3, template_var 4),
                        template_var 3),
                      template_var 2)),
                  template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_app (template_hole 3, template_var 4),
                         template_var 3),
                       template_var 2)),
                   template_var 1),
                 template_var 0)),
             template_var 1)),
         template_var 0))),
    ("Environments.env_add_dom",
     "[| ok ?e; ?x ~: env_dom ?e |]
      ==> env_dom (?e\<lparr>?x:?X\<rparr>) = env_dom ?e Un {?x}",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_app (template_hole 5, template_var 2))
                )
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 5, template_var 2)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0))))),
    ("Environments.get_env_smaller",
     "[| ?x : env_dom ?e; ?a ~: env_dom ?e |]
      ==> ?e\<lparr>?a:?X\<rparr>!?x = ?e!?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app (template_hole 4, template_var 2))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_app (template_hole 4, template_var 2))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0)),
           template_var 3),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 3)))),
    ("Environments.ok_add_reverse",
     "ok (?e\<lparr>?a:?X\<rparr>\<lparr>?b:?Y\<rparr>) ==>
      ?e\<lparr>?b:?Y\<rparr>\<lparr>?a:?X\<rparr> =
      ?e\<lparr>?a:?X\<rparr>\<lparr>?b:?Y\<rparr>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app
                 (template_app
                   (template_hole 1,
                    template_app
                     (template_app
                       (template_app (template_hole 1, template_var 4),
                        template_var 3),
                      template_var 2)),
                  template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 1),
                 template_var 0)),
             template_var 3),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 3),
                 template_var 2)),
             template_var 1),
           template_var 0)))),
    ("Environments.get_env_bigger",
     "[| ?x : env_dom (?e\<lparr>?a:?X\<rparr>); ?x ~= ?a |]
      ==> ?e!?x = ?e\<lparr>?a:?X\<rparr>!?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 1),
                  template_var 0)))
            ),
        template_negation
         (template_equation (template_var 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 3),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1),
               template_var 0)),
           template_var 3)))),
    ("Environments.add_get_eq",
     "[| ?xa ~: env_dom ?e; ok ?e; the ?e\<lparr>?xa:?U\<rparr>!?xa = ?T |]
      ==> ?U = ?T",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_app (template_hole 5, template_var 2))
                )
            ),
        template_predicate (template_app (template_hole 4, template_var 2)),
        template_equation
         (template_app
           (template_hole 2,
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app
                   (template_app (template_hole 0, template_var 2),
                    template_var 3),
                  template_var 1)),
              template_var 3)),
          template_var 0)],
       template_equation (template_var 1, template_var 0))),
    ("Environments.env_app_dom",
     "[| ok ?e1.0; env_dom ?e1.0 Int env_dom ?e2.0 = {}; ok ?e2.0 |]
      ==> env_dom ?e1.0+?e2.0 = env_dom ?e1.0 Un env_dom ?e2.0",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_equation
         (template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 1)),
            template_app (template_hole 3, template_var 0)),
          template_hole 2),
        template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 1)),
           template_app (template_hole 3, template_var 0))))),
    ("Environments.not_in_env_smaller",
     "[| ?x ~: env_dom (?e\<lparr>?a:?X\<rparr>); ?x ~= ?a;
         ok (?e\<lparr>?a:?X\<rparr>) |]
      ==> ?x ~: env_dom ?e",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_app
                   (template_hole 3,
                    template_app
                     (template_app
                       (template_app (template_hole 2, template_var 2),
                        template_var 1),
                      template_var 0)))
                )
            ),
        template_negation
         (template_equation (template_var 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_hole 0,
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_app (template_hole 3, template_var 2))
               )
           ))),
    ("Environments.in_env_smaller2",
     "[| ?x : env_dom (?e\<lparr>?a:?X\<rparr>\<lparr>?b:?Y\<rparr>);
         ?x ~= ?a; ?x ~= ?b |]
      ==> ?x : env_dom ?e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 5),
              template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_app
                     (template_hole 2,
                      template_app
                       (template_app
                         (template_app (template_hole 2, template_var 4),
                          template_var 3),
                        template_var 2)),
                    template_var 1),
                  template_var 0)))
            ),
        template_negation
         (template_equation (template_var 5, template_var 3)),
        template_negation
         (template_equation (template_var 5, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 5),
             template_app (template_hole 3, template_var 4))
           ))),
    ("Environments.ok_add_2",
     "ok (?e\<lparr>?a:?X\<rparr>\<lparr>?b:?Y\<rparr>) ==>
      ok ?e & ?a ~: env_dom ?e & ?b ~: env_dom ?e & ?a ~= ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app
                       (template_app (template_hole 5, template_var 4),
                        template_var 3),
                      template_var 2)),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 6, template_var 4)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_app (template_hole 1, template_var 4)))),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_app (template_hole 1, template_var 4)))),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 1)))))
           ))),
    ("Environments.not_in_env_bigger_2",
     "[| ?x ~: env_dom ?e; ?x ~= ?a; ?x ~= ?b |]
      ==> ?x ~: env_dom (?e\<lparr>?a:?X\<rparr>\<lparr>?b:?Y\<rparr>)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 5),
                  template_app (template_hole 2, template_var 4))
                )
            ),
        template_negation
         (template_equation (template_var 5, template_var 3)),
        template_negation
         (template_equation (template_var 5, template_var 2))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 5),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app
                        (template_hole 0,
                         template_app
                          (template_app
                            (template_app (template_hole 0, template_var 4),
                             template_var 3),
                           template_var 1)),
                       template_var 2),
                     template_var 0)))
               )
           ))),
    ("Environments.in_add_2",
     "ok (?e\<lparr>?a:?X\<rparr>\<lparr>?b:?Y\<rparr>) ==>
      ?a : env_dom (?e\<lparr>?a:?X\<rparr>\<lparr>?b:?Y\<rparr>) &
      ?b : env_dom (?e\<lparr>?a:?X\<rparr>\<lparr>?b:?Y\<rparr>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app
                       (template_app (template_hole 3, template_var 4),
                        template_var 3),
                      template_var 2)),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_app
                  (template_hole 0,
                   template_app
                    (template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_app
                            (template_app (template_hole 3, template_var 4),
                             template_var 3),
                           template_var 2)),
                       template_var 1),
                     template_var 0)))),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_app (template_hole 3, template_var 4),
                           template_var 3),
                         template_var 2)),
                     template_var 1),
                   template_var 0))))
           ))),
    ("Environments.env_app_same",
     "[| ok ?e1.0; ?x : env_dom ?e1.0; env_dom ?e1.0 Int env_dom ?e2.0 = {};
         ok ?e2.0 |]
      ==> the ?e1.0+?e2.0!?x = the ?e1.0!?x",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app (template_hole 7, template_var 2))
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 7, template_var 2)),
            template_app (template_hole 7, template_var 0)),
          template_hole 4),
        template_predicate
         (template_app (template_hole 9, template_var 0))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1))))),
    ("Environments.env_bigger2",
     "[| ?a ~: env_dom ?e; ?b ~: env_dom ?e; ?x : env_dom ?e; ?a ~= ?b |]
      ==> ?x : env_dom (?e\<lparr>?a:?X\<rparr>\<lparr>?b:?Y\<rparr>)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 5),
                  template_app (template_hole 2, template_var 4))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_app (template_hole 2, template_var 4))
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 4))
            ),
        template_negation
         (template_equation (template_var 5, template_var 3))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 4),
                         template_var 5),
                       template_var 1)),
                   template_var 3),
                 template_var 0)))
           ))),
    ("Environments.get_env_bigger2",
     "[| ?x : env_dom (?e\<lparr>?a:?X\<rparr>\<lparr>?b:?Y\<rparr>);
         ?x ~= ?a; ?x ~= ?b |]
      ==> ?e!?x = ?e\<lparr>?a:?X\<rparr>\<lparr>?b:?Y\<rparr>!?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 5),
              template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_app
                     (template_hole 4,
                      template_app
                       (template_app
                         (template_app (template_hole 4, template_var 4),
                          template_var 3),
                        template_var 2)),
                    template_var 1),
                  template_var 0)))
            ),
        template_negation
         (template_equation (template_var 5, template_var 3)),
        template_negation
         (template_equation (template_var 5, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 4), template_var 5),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_app (template_hole 4, template_var 4),
                       template_var 3),
                     template_var 2)),
                 template_var 1),
               template_var 0)),
           template_var 5)))),
    ("Environments.get_env_smaller2",
     "[| ?x : env_dom ?e; ?a ~: env_dom ?e; ?b ~: env_dom ?e; ?a ~= ?b |]
      ==> ?e\<lparr>?a:?X\<rparr>\<lparr>?b:?Y\<rparr>!?x = ?e!?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 5),
              template_app (template_hole 5, template_var 4))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_app (template_hole 5, template_var 4))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_app (template_hole 5, template_var 4))
                )
            ),
        template_negation
         (template_equation (template_var 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 4),
                       template_var 3),
                     template_var 1)),
                 template_var 2),
               template_var 0)),
           template_var 5),
         template_app
          (template_app (template_hole 1, template_var 4),
           template_var 5)))),
    ("Environments.env_add_dom_2",
     "[| ok ?e; ?x ~: env_dom ?e; ?y ~: env_dom ?e; ?x ~= ?y |]
      ==> env_dom (?e\<lparr>?x:?X\<rparr>\<lparr>?y:?Y\<rparr>) =
          env_dom ?e Un {?x, ?y}",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 4)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 3),
                  template_app (template_hole 6, template_var 4))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_app (template_hole 6, template_var 4))
                )
            ),
        template_negation
         (template_equation (template_var 3, template_var 2))],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_app (template_hole 3, template_var 4),
                     template_var 3),
                   template_var 1)),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 6, template_var 4)),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_hole 0)))))),
    ("Environments.env_app_add",
     "[| ok ?e1.0; env_dom ?e1.0 Int env_dom ?e2.0 = {}; ok ?e2.0;
         ?x ~: env_dom ?e1.0; ?x ~: env_dom ?e2.0 |]
      ==> ?e1.0+?e2.0\<lparr>?x:?X\<rparr> =
          ?e1.0\<lparr>?x:?X\<rparr>+?e2.0",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 3)),
        template_equation
         (template_app
           (template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 3)),
            template_app (template_hole 6, template_var 2)),
          template_hole 5),
        template_predicate (template_app (template_hole 9, template_var 2)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_app (template_hole 6, template_var 3))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_app (template_hole 6, template_var 2))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1),
               template_var 0)),
           template_var 2)))),
    ("Environments.ok_add_3",
     "ok (?e\<lparr>?a:?X\<rparr>\<lparr>?b:?Y\<rparr>\<lparr>?c:?Z\<rparr>) ==>
      ?a ~: env_dom ?e &
      ?b ~: env_dom ?e & ?c ~: env_dom ?e & ?a ~= ?b & ?b ~= ?c & ?a ~= ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app
                       (template_app
                         (template_hole 5,
                          template_app
                           (template_app
                             (template_app
                               (template_hole 5, template_var 6),
                              template_var 5),
                            template_var 4)),
                        template_var 3),
                      template_var 2)),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 5),
                   template_app (template_hole 1, template_var 6)))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_app (template_hole 1, template_var 6)))),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_app (template_hole 1, template_var 6)))),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 0, template_var 5),
                         template_var 3))),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_app (template_hole 0, template_var 3),
                           template_var 1))),
                     template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 0, template_var 5),
                         template_var 1)))))))
           ))),
    ("Environments.env_app_add2",
     "[| ok ?e1.0; env_dom ?e1.0 Int env_dom ?e2.0 = {}; ok ?e2.0;
         ?x ~: env_dom ?e1.0; ?x ~: env_dom ?e2.0; ?y ~: env_dom ?e1.0;
         ?y ~: env_dom ?e2.0; ?x ~= ?y |]
      ==> ?e1.0+?e2.0\<lparr>?x:?X\<rparr>\<lparr>?y:?Y\<rparr> =
          ?e1.0\<lparr>?x:?X\<rparr>\<lparr>?y:?Y\<rparr>+?e2.0",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 5)),
        template_equation
         (template_app
           (template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 5)),
            template_app (template_hole 7, template_var 4)),
          template_hole 6),
        template_predicate
         (template_app (template_hole 10, template_var 4)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_app (template_hole 7, template_var 5))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_app (template_hole 7, template_var 4))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_app (template_hole 7, template_var 5))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_app (template_hole 7, template_var 4))
                )
            ),
        template_negation
         (template_equation (template_var 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 4)),
                   template_var 3),
                 template_var 1)),
             template_var 2),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 5),
                       template_var 3),
                     template_var 1)),
                 template_var 2),
               template_var 0)),
           template_var 4))))]:
   (string * thm * template) list
### theory "Draft.EnvironmentsMoreTemplates"
### 0.307s elapsed time, 0.401s cpu time, 0.000s GC time
val it = (): unit
