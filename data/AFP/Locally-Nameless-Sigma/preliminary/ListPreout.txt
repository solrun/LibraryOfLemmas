Loading theory "Draft.ListPre" (required by "Draft.ListPreMoreTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ListPreMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ListPreMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ListPreMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
consts
  list_insert :: "'a list => nat => 'a => 'a list"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.125s elapsed time, 0.519s cpu time, 0.039s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ListPreMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "Draft.ListPre"
### 0.137s elapsed time, 0.564s cpu time, 0.039s GC time
### theory "HOL-Library.Set_Algebras"
### 0.200s elapsed time, 0.755s cpu time, 0.039s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ListPreMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.327s elapsed time, 1.147s cpu time, 0.120s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ListPreMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.745s elapsed time, 2.287s cpu time, 0.305s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.778s elapsed time, 2.219s cpu time, 0.224s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.814s elapsed time, 4.058s cpu time, 0.832s GC time
Loading theory "Draft.Templates" (required by "Draft.ListPreMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.064s elapsed time, 0.119s cpu time, 0.050s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ListPreMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.441s elapsed time, 0.447s cpu time, 0.000s GC time
Loading theory "Draft.ListPreMoreTemplates"
val templateLemmas =
   [("ListPre.insert_first", "list_insert ?l 0 ?b = ?b # ?l",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_hole 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("ListPre.insert_select", "the ((?f(?l |-> ?t)) ?l) = ?t",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_app (template_hole 0, template_var 0)),
           template_var 1)),
       template_var 0)),
    ("ListPre.insert_length'",
     "length (list_insert ?l ?i ?x) = length (?x # ?l)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("ListPre.insert_length",
     "length (list_insert ?l ?i ?b) = length (list_insert ?l ?j ?c)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 3),
           template_var 2)),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 1),
           template_var 0)))),
    ("ListPre.insert_eq", "ALL i<=length ?l. list_insert ?l i ?a ! i = ?a",
     template_predicate (template_app (template_hole 6, t_empty))),
    ("ListPre.insert_select2",
     "?l1.0 ~= ?l2.0 ==> (?f(?l1.0 |-> ?t)) ?l2.0 = ?f ?l2.0",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 3),
             template_app (template_hole 0, template_var 0)),
           template_var 2),
         template_app (template_var 1, template_var 2)))),
    ("ListPre.nth_last", "length ?l = ?n ==> (?l @ [?x]) ! ?n = ?x",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 2), template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0))),
           template_var 1),
         template_var 0))),
    ("ListPre.dom_insert", "?l : dom ?f ==> dom (?f(?l |-> ?t)) = dom ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2),
             template_app (template_hole 0, template_var 0))),
         template_app (template_hole 3, template_var 1)))),
    ("ListPre.mem_append_lem'",
     "?x : set (?l @ [?y]) ==> ?x : set ?l | ?x = ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_app
                   (template_app (template_hole 3, template_var 0),
                    template_hole 2))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 6, template_var 2),
                 template_app (template_hole 5, template_var 1))),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("ListPre.insert_lt2",
     "ALL j i. i <= j --> list_insert ?l i ?a ! Suc j = ?l ! j",
     template_predicate (template_app (template_hole 6, t_empty))),
    ("ListPre.insert_prepend",
     "?i = Suc ?j ==>
      list_insert (?a # ?l) ?i ?b = ?a # list_insert ?l ?j ?b",
     template_implication
      ([template_equation
         (template_var 4, template_app (template_hole 3, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 4),
           template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 3),
             template_var 0))))),
    ("ListPre.drop_n_lem",
     "Suc ?n <= length ?l ==>
      drop (Suc ?n) (?l[?n := ?x]) = drop (Suc ?n) ?l",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_var 2),
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 4, template_var 2)),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 4, template_var 2)),
           template_var 1)))),
    ("ListPre.nth_fst", "length ?l = ?n + 1 ==> (?l @ [?x]) ! 0 = ?l ! 0",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 2),
          template_app
           (template_app (template_hole 7, template_var 1),
            template_hole 6))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1))),
           template_hole 0),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_hole 0)))),
    ("ListPre.insert_dom_eq",
     "dom ?f = dom ?f' ==> dom (?f(?l |-> ?x)) = dom (?f'(?l |-> ?x'))",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 4),
          template_app (template_hole 4, template_var 3))],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 4),
               template_var 2),
             template_app (template_hole 2, template_var 1))),
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_app (template_hole 0, template_var 0)))))),
    ("ListPre.nth_zero_app",
     "[| ?l ~= []; ?l ! 0 = ?x |] ==> (?l @ [?y]) ! 0 = ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 5)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 2),
            template_hole 2),
          template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_hole 5))),
           template_hole 2),
         template_var 1))),
    ("ListPre.insert_gt",
     "ALL i<=length ?l. ALL j<i. list_insert ?l i ?a ! j = ?l ! j",
     template_predicate (template_app (template_hole 7, t_empty))),
    ("ListPre.insert_commute",
     "ALL i<=length ?l.
         list_insert (list_insert ?l i ?b) 0 ?a =
         list_insert (list_insert ?l 0 ?a) (Suc i) ?b",
     template_predicate (template_app (template_hole 7, t_empty))),
    ("ListPre.one_more_dom",
     "?l : dom ?f ==> EX f'. ?f = f'(?l |-> the (?f ?l)) & ?l ~: dom f'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app (template_hole 7, template_var 0))
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("ListPre.the_insert_select",
     "[| ?l2.0 : dom ?f; ?l1.0 ~= ?l2.0 |]
      ==> the ((?f(?l1.0 |-> ?t)) ?l2.0) = the (?f ?l2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app (template_hole 6, template_var 2))
            ),
        template_negation
         (template_equation (template_var 1, template_var 3))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_app (template_hole 0, template_var 0)),
             template_var 3)),
         template_app
          (template_hole 2,
           template_app (template_var 2, template_var 3))))),
    ("ListPre.insert_lt",
     "ALL j<=length ?l. ALL i<=j. list_insert ?l i ?a ! Suc j = ?l ! j",
     template_predicate (template_app (template_hole 7, t_empty))),
    ("ListPre.drop_lem",
     "[| drop ?n ?l = drop ?n ?g; length ?l = length ?g; ?n < length ?g |]
      ==> ?l ! ?n = ?g ! ?n",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 5, template_var 2),
            template_var 0)),
        template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 3, template_var 0)),
        template_inequation
         (less_than, template_var 2,
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("ListPre.insert_dom_less_eq",
     "[| ?x ~: dom ?f; ?x ~: dom ?f';
         dom (?f(?x |-> ?y)) = dom (?f'(?x |-> ?y')) |]
      ==> dom ?f = dom ?f'",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 4),
                  template_app (template_hole 6, template_var 3))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 4),
                  template_app (template_hole 5, template_var 2))
                )
            ),
        template_equation
         (template_app
           (template_hole 6,
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 4),
              template_app (template_hole 2, template_var 1))),
          template_app
           (template_hole 5,
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 4),
              template_app (template_hole 0, template_var 0))))],
       template_equation
        (template_app (template_hole 6, template_var 3),
         template_app (template_hole 5, template_var 2)))),
    ("ListPre.drop_n",
     "[| drop ?n ?l = drop ?n ?g; Suc ?n <= length ?g;
         length ?l = length ?g |]
      ==> drop (Suc ?n) (?l[?n := ?g ! ?n]) = drop (Suc ?n) ?g",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 6, template_var 2),
            template_var 0)),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 2),
          template_app (template_hole 3, template_var 0)),
        template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 4, template_var 2)),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))),
         template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 4, template_var 2)),
           template_var 0)))),
    ("ListPre.take_n",
     "[| take ?n ?l = take ?n ?g; Suc ?n <= length ?g;
         length ?l = length ?g |]
      ==> take (Suc ?n) (?l[?n := ?g ! ?n]) = take (Suc ?n) ?g",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 6, template_var 2),
            template_var 0)),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 2),
          template_app (template_hole 3, template_var 0)),
        template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 4, template_var 2)),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))),
         template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 4, template_var 2)),
           template_var 0)))),
    ("ListPre.rev_induct2",
     "[| length ?xs = length ?ys; ?P [] [];
         !!x xs y ys.
            [| length xs = length ys; ?P xs ys |]
            ==> ?P (xs @ [x]) (ys @ [y]) |]
      ==> ?P ?xs ?ys",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 2),
          template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_var 0, template_hole 4),
              template_hole 4)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 2), template_var 1)
           ))),
    ("ListPre.list_induct3",
     "[| length ?xs = length ?ys; length ?zs = length ?xs; ?P [] [] [];
         !!x xs y ys z zs.
            [| length xs = length ys; length zs = length xs; ?P xs ys zs |]
            ==> ?P (x # xs) (y # ys) (z # zs) |]
      ==> ?P ?xs ?ys ?zs",
     template_implication
      ([template_equation
         (template_app (template_hole 14, template_var 3),
          template_app (template_hole 13, template_var 2)),
        template_equation
         (template_app (template_hole 12, template_var 1),
          template_app (template_hole 14, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_var 0, template_hole 11),
                template_hole 10),
              template_hole 9)
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 0, template_var 3),
               template_var 2),
             template_var 1)
           )))]:
   (string * thm * template) list
### theory "Draft.ListPreMoreTemplates"
### 0.293s elapsed time, 0.436s cpu time, 0.066s GC time
val it = (): unit
