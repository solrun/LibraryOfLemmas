   [("Utility.infinite_imp_elem", "infinite ?A ==> EX x. x : ?A",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 2, template_var 0))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Utility.max_list", "?x : set ?xs ==> ?x <= max_list ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_inequation
        (less_equals, template_var 1,
         template_app (template_hole 0, template_var 0)))),
    ("Utility.foldr_foldr_concat",
     "foldr (foldr ?f) ?m ?a = foldr ?f (concat ?m) ?a",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Utility.max_list_mem", "?xs ~= [] ==> max_list ?xs : set ?xs",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Utility.max_list_eq_set",
     "set ?xs = set ?ys ==> max_list ?xs = max_list ?ys",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Utility.all_less_two",
     "(ALL i<Suc (Suc 0). ?P i) = (?P 0 & ?P (Suc 0))",
     template_equation
      (template_app (template_hole 5, t_empty),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 0, template_hole 1)),
         template_app
          (template_var 0,
           template_app (template_hole 2, template_hole 1))))),
    ("Utility.sum_list_0",
     "(!!x. x : set ?xs ==> x = (0::?'a)) ==> sum_list ?xs = (0::?'a)",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_hole 1))),
    ("Utility.map_upt_Suc",
     "map ?f [0..<Suc ?n] = ?f 0 # map (%i. ?f (Suc i)) [0..<?n]",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 1, template_hole 2)),
         template_app
          (template_app (template_hole 4, t_empty),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0))))),
    ("Utility.infinite_imp_many_elems",
     "infinite ?A ==> EX xs. set xs <= ?A & length xs = ?n & distinct xs",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 7, template_var 1))
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Utility.sorted_list_subset",
     "[| sorted ?as; sorted ?bs |]
      ==> (sorted_list_subset ?as ?bs = None) = (set ?as <= set ?bs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_hole 2),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Utility.all_Suc_conv",
     "(ALL i<Suc ?n. ?P i) = (?P 0 & (ALL i<?n. ?P (Suc i)))",
     template_equation
      (template_app (template_hole 5, t_empty),
       template_app
        (template_app
          (template_hole 1, template_app (template_var 0, template_hole 0)),
         template_app (template_hole 5, t_empty)))),
    ("Utility.ex_Suc_conv",
     "(EX i<Suc ?n. ?P i) = (?P 0 | (EX i<?n. ?P (Suc i)))",
     template_equation
      (template_app (template_hole 5, t_empty),
       template_app
        (template_app
          (template_hole 1, template_app (template_var 0, template_hole 0)),
         template_app (template_hole 5, t_empty)))),
    ("Utility.max_list_set",
     "max_list ?xs =
      (if set ?xs = {} then 0
       else THE x. x : set ?xs & (ALL y:set ?xs. y <= x))",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app (template_hole 7, template_var 0)),
                   template_hole 6)),
               template_hole 5),
             template_app (template_hole 4, t_empty))
           ))),
    ("Utility.map_upt_add",
     "map ?f [0..<?n + ?m] =
      map ?f [0..<?n] @ map (%i. ?f (i + ?n)) [0..<?m]",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 1))),
         template_app
          (template_app (template_hole 4, t_empty),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0))))),
    ("Utility.zip_nth_conv",
     "length ?xs = length ?ys ==>
      zip ?xs ?ys = map (%i. (?xs ! i, ?ys ! i)) [0..<length ?ys]",
     template_implication
      ([template_equation
         (template_app (template_hole 9, template_var 1),
          template_app (template_hole 8, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 5, t_empty),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_app (template_hole 8, template_var 0)))))),
    ("Utility.ballI2",
     "(!!x y. (x, y) : ?A ==> ?P x y) ==> ALL (x, y):?A. ?P x y",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, t_empty))
           ))),
    ("Utility.inf_pigeonhole_principle",
     "ALL k. EX i<?n. ?f k i ==> EX i<?n. ALL k. EX k'>=k. ?f k' i",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Utility.bound_nat_induct",
     "[| ?n : {?l..?u}; ?P ?l;
         !!n. [| ?P n; n : {?l..<?u} |] ==> ?P (Suc n) |]
      ==> ?P ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_var 0, template_var 2)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_var 0, template_var 3)))),
    ("Utility.nth_map_conv",
     "[| length ?xs = length ?ys;
         ALL i<length ?xs. ?f (?xs ! i) = ?g (?ys ! i) |]
      ==> map ?f ?xs = map ?g ?ys",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 3),
          template_app (template_hole 9, template_var 2)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 3),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Utility.map_upt_split",
     "?i < ?n ==>
      map ?f [0..<?n] =
      map ?f [0..<?i] @
      ?f ?i # map (%j. ?f (j + Suc ?i)) [0..<?n - Suc ?i]",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 7, template_var 0),
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_var 1)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 7, template_var 0),
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_var 2))),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_var 0, template_var 2)),
             template_app
              (template_app (template_hole 7, t_empty),
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_app (template_hole 1, template_var 2))))))))),
    ("Utility.sum_list_double_concat",
     "sum_list (concat (map (%i. map (%j. ?f i j + ?g i j) ?as) ?bs)) =
      sum_list (concat (map (%i. map (?f i) ?as) ?bs)) +
      sum_list (concat (map (%i. map (?g i) ?as) ?bs))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, t_empty),
                 template_var 0)))),
         template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty),
               template_var 0))))))]
