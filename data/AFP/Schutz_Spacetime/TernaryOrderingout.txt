Loading theory "Draft.Util" (required by "Draft.TernaryOrderingMoreTemplates" via "Draft.TernaryOrdering")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.TernaryOrderingMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.TernaryOrderingMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.TernaryOrderingMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
### theory "Draft.Util"
### 0.045s elapsed time, 0.215s cpu time, 0.000s GC time
Loading theory "Draft.TernaryOrdering" (required by "Draft.TernaryOrderingMoreTemplates")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.147s elapsed time, 0.611s cpu time, 0.037s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.TernaryOrderingMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.TernaryOrdering"
### 0.161s elapsed time, 0.632s cpu time, 0.037s GC time
### theory "HOL-Library.Set_Algebras"
### 0.250s elapsed time, 0.977s cpu time, 0.037s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.TernaryOrderingMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.324s elapsed time, 1.207s cpu time, 0.118s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.TernaryOrderingMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.684s elapsed time, 2.095s cpu time, 0.259s GC time
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.703s elapsed time, 2.054s cpu time, 0.178s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.744s elapsed time, 3.876s cpu time, 0.764s GC time
Loading theory "Draft.Templates" (required by "Draft.TernaryOrderingMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.049s elapsed time, 0.065s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.TernaryOrderingMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.462s elapsed time, 0.469s cpu time, 0.000s GC time
Loading theory "Draft.TernaryOrderingMoreTemplates"
val templateLemmas =
   [("TernaryOrdering.empty_ordering",
     "EX f. TernaryOrdering.ordering f ?ord {}",
     template_predicate (template_app (template_hole 2, t_empty))),
    ("TernaryOrdering.singleton_ordering",
     "EX f. TernaryOrdering.ordering f ?ord {?a}",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("TernaryOrdering.two_ordering",
     "EX f. TernaryOrdering.ordering f ?ord {?a, ?b}",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("TernaryOrdering.zero_into_ordering",
     "[| TernaryOrdering.ordering ?f ?betw ?X; ?X ~= {} |] ==> ?f 0 : ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_var 2, template_hole 0)),
             template_var 0)
           ))),
    ("TernaryOrdering.inf_ordering_img",
     "[| infinite ?X; TernaryOrdering.ordering ?f ?ord ?X |]
      ==> ?f ` {0..} = ?X",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_hole 0)),
         template_var 2))),
    ("TernaryOrdering.inf_ordering_inv_img",
     "[| infinite ?X; TernaryOrdering.ordering ?f ?ord ?X |]
      ==> ?f -` ?X = {0..}",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 2),
         template_app (template_hole 1, template_hole 0)))),
    ("TernaryOrdering.finite_ordering_inj_on",
     "[| finite ?X; TernaryOrdering.ordering ?f ?ord ?X |]
      ==> inj_on ?f {0..card ?X - 1}",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 2)),
                 template_hole 0)))
           ))),
    ("TernaryOrdering.card_le2_ordering",
     "[| finite ?X; card ?X <= 2 |]
      ==> EX f. TernaryOrdering.ordering f ?ord ?X",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 5, template_var 1),
          template_app
           (template_hole 4,
            template_app (template_hole 3, template_hole 2)))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("TernaryOrdering.inf_ordering_img_inv_img",
     "[| infinite ?X; TernaryOrdering.ordering ?f ?ord ?X |]
      ==> ?f ` ?f -` ?X = ?X",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_var 2))),
    ("TernaryOrdering.finite_ordering_bij",
     "[| TernaryOrdering.ordering ?f ?ord ?X; finite ?X; ?X ~= {} |]
      ==> bij_betw ?f {0..card ?X - 1} ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 9, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 6))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 2),
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 0)),
                   template_hole 0))),
             template_var 0)
           ))),
    ("TernaryOrdering.finite_ordering_img",
     "[| ?X ~= {}; finite ?X; TernaryOrdering.ordering ?f ?ord ?X |]
      ==> ?f ` {0..card ?X - 1} = ?X",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 8)),
        template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 2)),
               template_hole 0))),
         template_var 2))),
    ("TernaryOrdering.ordering_ord_ijk",
     "[| TernaryOrdering.ordering ?f ?ord ?X;
         ?i < ?j & ?j < ?k & (finite ?X --> ?k < card ?X) |]
      ==> ?ord (?f ?i) (?f ?j) (?f ?k)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 1),
                    template_var 0)),
                template_app
                 (template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 3)),
                  template_app
                   (template_app (template_hole 3, template_var 0),
                    template_app (template_hole 0, template_var 3)))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_var 4,
                 template_app (template_var 5, template_var 2)),
               template_app (template_var 5, template_var 1)),
             template_app (template_var 5, template_var 0))
           ))),
    ("TernaryOrdering.ordering2_ord_ijk",
     "[| ordering2 ?f ?ord ?X;
         Suc ?i = ?j & Suc ?j = ?k & (finite ?X --> ?k < card ?X) |]
      ==> ?ord (?f ?i) (?f ?j) (?f ?k)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 2)),
                  template_var 1)),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 1)),
                    template_var 0)),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_var 3)),
                  template_app
                   (template_app (template_hole 1, template_var 0),
                    template_app (template_hole 0, template_var 3)))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_var 4,
                 template_app (template_var 5, template_var 2)),
               template_app (template_var 5, template_var 1)),
             template_app (template_var 5, template_var 0))
           ))),
    ("TernaryOrdering.ord_ordered",
     "[| ?ord ?a ?b ?c; ?a ~= ?b & ?a ~= ?c & ?b ~= ?c |]
      ==> EX f. TernaryOrdering.ordering f ?ord {?a, ?b, ?c}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_var 3, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 1))),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 2),
                      template_var 0))),
                template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    template_var 0))))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("TernaryOrdering.ordering_sym",
     "[| !!a b c. ?ord a b c ==> ?ord c b a; finite ?X;
         TernaryOrdering.ordering ?f ?ord ?X |]
      ==> TernaryOrdering.ordering (%n. ?f (card ?X - 1 - n)) ?ord ?X",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 0),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty), template_var 2),
             template_var 1)
           ))),
    ("TernaryOrdering.inf_ordering_inj",
     "[| infinite ?X; TernaryOrdering.ordering ?f ?ord ?X;
         ALL a b c. ?ord a b c --> a ~= b & a ~= c & b ~= c |]
      ==> inj ?f",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 7, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)
           ))),
    ("TernaryOrdering.inf_ordering_inj'",
     "[| infinite ?X; TernaryOrdering.ordering ?f ?ord ?X;
         ALL a b c. ?ord a b c --> a ~= b & a ~= c & b ~= c;
         ?f ?m = ?f ?n |]
      ==> ?m = ?n",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 6, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_var 4)
            ),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_equation
         (template_app (template_var 3, template_var 1),
          template_app (template_var 3, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("TernaryOrdering.finite_ordering_inj",
     "[| finite ?X; TernaryOrdering.ordering ?f ?ord ?X;
         ALL a b c. ?ord a b c --> a ~= b & a ~= c & b ~= c; ?m < card ?X;
         ?n < card ?X; ?f ?m = ?f ?n |]
      ==> ?m = ?n",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 3),
                template_var 2),
              template_var 4)
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 1, template_var 4)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 1, template_var 4)),
        template_equation
         (template_app (template_var 3, template_var 1),
          template_app (template_var 3, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("TernaryOrdering.ordering_inj",
     "[| TernaryOrdering.ordering ?f ?ord ?X;
         ALL a b c. ?ord a b c --> a ~= b & a ~= c & b ~= c;
         finite ?X --> ?m < card ?X; finite ?X --> ?n < card ?X;
         ?f ?m = ?f ?n |]
      ==> ?m = ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 3, template_var 2)),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_app (template_hole 1, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 3, template_var 2)),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_app (template_hole 1, template_var 2)))
            ),
        template_equation
         (template_app (template_var 4, template_var 1),
          template_app (template_var 4, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("TernaryOrdering.overlap_ordering_alt2",
     "[| ?ord ?a ?b ?c; ?ord ?b ?c ?d; ?ord ?a ?b ?d; ?ord ?a ?c ?d;
         ALL a b c. ?ord a b c --> a ~= b & a ~= c & b ~= c |]
      ==> EX f. TernaryOrdering.ordering f ?ord {?a, ?b, ?c, ?d}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_var 4, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_var 4, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_var 4, template_var 3),
                template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_var 4, template_var 3),
                template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("TernaryOrdering.overlap_ordering",
     "[| ?ord ?a ?b ?c; ?ord ?b ?c ?d; ?ord ?a ?b ?d; ?ord ?a ?c ?d;
         ?a ~= ?b & ?a ~= ?c & ?a ~= ?d & ?b ~= ?c & ?b ~= ?d & ?c ~= ?d |]
      ==> EX f. TernaryOrdering.ordering f ?ord {?a, ?b, ?c, ?d}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_var 4, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_var 4, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_var 4, template_var 3),
                template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_var 4, template_var 3),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 2))),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 3),
                      template_var 1))),
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_hole 5,
                      template_app
                       (template_app (template_hole 4, template_var 3),
                        template_var 0))),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_hole 5,
                        template_app
                         (template_app (template_hole 4, template_var 2),
                          template_var 1))),
                    template_app
                     (template_app
                       (template_hole 6,
                        template_app
                         (template_hole 5,
                          template_app
                           (template_app (template_hole 4, template_var 2),
                            template_var 0))),
                      template_app
                       (template_hole 5,
                        template_app
                         (template_app (template_hole 4, template_var 1),
                          template_var 0)))))))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("TernaryOrdering.overlap_ordering_alt1",
     "[| ?ord ?a ?b ?c; ?ord ?b ?c ?d;
         ALL a b c d. ?ord a b c & ?ord b c d --> ?ord a b d;
         ALL a b c d. ?ord a b c & ?ord b c d --> ?ord a c d;
         ALL a b c. ?ord a b c --> a ~= b & a ~= c & b ~= c |]
      ==> EX f. TernaryOrdering.ordering f ?ord {?a, ?b, ?c, ?d}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_var 4, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_var 4, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("TernaryOrdering.overlap_ordering_alt",
     "[| ?ord ?a ?b ?c; ?ord ?b ?c ?d;
         ALL a b c d. ?ord a b c & ?ord b c d --> ?ord a b d;
         ALL a b c d. ?ord a b c & ?ord b c d --> ?ord a c d;
         ?a ~= ?b & ?a ~= ?c & ?a ~= ?d & ?b ~= ?c & ?b ~= ?d & ?c ~= ?d |]
      ==> EX f. TernaryOrdering.ordering f ?ord {?a, ?b, ?c, ?d}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_var 4, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_var 4, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 2))),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 3),
                      template_var 1))),
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_hole 5,
                      template_app
                       (template_app (template_hole 4, template_var 3),
                        template_var 0))),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_hole 5,
                        template_app
                         (template_app (template_hole 4, template_var 2),
                          template_var 1))),
                    template_app
                     (template_app
                       (template_hole 6,
                        template_app
                         (template_hole 5,
                          template_app
                           (template_app (template_hole 4, template_var 2),
                            template_var 0))),
                      template_app
                       (template_hole 5,
                        template_app
                         (template_app (template_hole 4, template_var 1),
                          template_var 0)))))))
            )],
       template_predicate (template_app (template_hole 3, t_empty))))]:
   (string * thm * template) list
### theory "Draft.TernaryOrderingMoreTemplates"
### 0.289s elapsed time, 0.411s cpu time, 0.048s GC time
val it = (): unit
