   [("TernaryOrdering.empty_ordering",
     "EX f. TernaryOrdering.ordering f ?ord {}",
     template_predicate (template_app (template_hole 2, t_empty))),
    ("TernaryOrdering.singleton_ordering",
     "EX f. TernaryOrdering.ordering f ?ord {?a}",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("TernaryOrdering.two_ordering",
     "EX f. TernaryOrdering.ordering f ?ord {?a, ?b}",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("TernaryOrdering.zero_into_ordering",
     "[| TernaryOrdering.ordering ?f ?betw ?X; ?X ~= {} |] ==> ?f 0 : ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_var 2, template_hole 0)),
             template_var 0)
           ))),
    ("TernaryOrdering.inf_ordering_img",
     "[| infinite ?X; TernaryOrdering.ordering ?f ?ord ?X |]
      ==> ?f ` {0..} = ?X",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_hole 0)),
         template_var 2))),
    ("TernaryOrdering.inf_ordering_inv_img",
     "[| infinite ?X; TernaryOrdering.ordering ?f ?ord ?X |]
      ==> ?f -` ?X = {0..}",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 2),
         template_app (template_hole 1, template_hole 0)))),
    ("TernaryOrdering.finite_ordering_inj_on",
     "[| finite ?X; TernaryOrdering.ordering ?f ?ord ?X |]
      ==> inj_on ?f {0..card ?X - 1}",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 2)),
                 template_hole 0)))
           ))),
    ("TernaryOrdering.card_le2_ordering",
     "[| finite ?X; card ?X <= 2 |]
      ==> EX f. TernaryOrdering.ordering f ?ord ?X",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 5, template_var 1),
          template_app
           (template_hole 4,
            template_app (template_hole 3, template_hole 2)))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("TernaryOrdering.inf_ordering_img_inv_img",
     "[| infinite ?X; TernaryOrdering.ordering ?f ?ord ?X |]
      ==> ?f ` ?f -` ?X = ?X",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_var 2))),
    ("TernaryOrdering.finite_ordering_bij",
     "[| TernaryOrdering.ordering ?f ?ord ?X; finite ?X; ?X ~= {} |]
      ==> bij_betw ?f {0..card ?X - 1} ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 9, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 6))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 2),
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 0)),
                   template_hole 0))),
             template_var 0)
           ))),
    ("TernaryOrdering.finite_ordering_img",
     "[| ?X ~= {}; finite ?X; TernaryOrdering.ordering ?f ?ord ?X |]
      ==> ?f ` {0..card ?X - 1} = ?X",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 8)),
        template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 2)),
               template_hole 0))),
         template_var 2))),
    ("TernaryOrdering.ordering_ord_ijk",
     "[| TernaryOrdering.ordering ?f ?ord ?X;
         ?i < ?j & ?j < ?k & (finite ?X --> ?k < card ?X) |]
      ==> ?ord (?f ?i) (?f ?j) (?f ?k)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 1),
                    template_var 0)),
                template_app
                 (template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 3)),
                  template_app
                   (template_app (template_hole 3, template_var 0),
                    template_app (template_hole 0, template_var 3)))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_var 4,
                 template_app (template_var 5, template_var 2)),
               template_app (template_var 5, template_var 1)),
             template_app (template_var 5, template_var 0))
           ))),
    ("TernaryOrdering.ordering2_ord_ijk",
     "[| ordering2 ?f ?ord ?X;
         Suc ?i = ?j & Suc ?j = ?k & (finite ?X --> ?k < card ?X) |]
      ==> ?ord (?f ?i) (?f ?j) (?f ?k)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 2)),
                  template_var 1)),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 1)),
                    template_var 0)),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_var 3)),
                  template_app
                   (template_app (template_hole 1, template_var 0),
                    template_app (template_hole 0, template_var 3)))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_var 4,
                 template_app (template_var 5, template_var 2)),
               template_app (template_var 5, template_var 1)),
             template_app (template_var 5, template_var 0))
           ))),
    ("TernaryOrdering.ord_ordered",
     "[| ?ord ?a ?b ?c; ?a ~= ?b & ?a ~= ?c & ?b ~= ?c |]
      ==> EX f. TernaryOrdering.ordering f ?ord {?a, ?b, ?c}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_var 3, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 1))),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 2),
                      template_var 0))),
                template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    template_var 0))))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("TernaryOrdering.ordering_sym",
     "[| !!a b c. ?ord a b c ==> ?ord c b a; finite ?X;
         TernaryOrdering.ordering ?f ?ord ?X |]
      ==> TernaryOrdering.ordering (%n. ?f (card ?X - 1 - n)) ?ord ?X",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 0),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty), template_var 2),
             template_var 1)
           ))),
    ("TernaryOrdering.inf_ordering_inj",
     "[| infinite ?X; TernaryOrdering.ordering ?f ?ord ?X;
         ALL a b c. ?ord a b c --> a ~= b & a ~= c & b ~= c |]
      ==> inj ?f",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 7, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)
           ))),
    ("TernaryOrdering.inf_ordering_inj'",
     "[| infinite ?X; TernaryOrdering.ordering ?f ?ord ?X;
         ALL a b c. ?ord a b c --> a ~= b & a ~= c & b ~= c;
         ?f ?m = ?f ?n |]
      ==> ?m = ?n",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 6, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_var 4)
            ),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_equation
         (template_app (template_var 3, template_var 1),
          template_app (template_var 3, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("TernaryOrdering.finite_ordering_inj",
     "[| finite ?X; TernaryOrdering.ordering ?f ?ord ?X;
         ALL a b c. ?ord a b c --> a ~= b & a ~= c & b ~= c; ?m < card ?X;
         ?n < card ?X; ?f ?m = ?f ?n |]
      ==> ?m = ?n",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 3),
                template_var 2),
              template_var 4)
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 1, template_var 4)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 1, template_var 4)),
        template_equation
         (template_app (template_var 3, template_var 1),
          template_app (template_var 3, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("TernaryOrdering.ordering_inj",
     "[| TernaryOrdering.ordering ?f ?ord ?X;
         ALL a b c. ?ord a b c --> a ~= b & a ~= c & b ~= c;
         finite ?X --> ?m < card ?X; finite ?X --> ?n < card ?X;
         ?f ?m = ?f ?n |]
      ==> ?m = ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 3, template_var 2)),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_app (template_hole 1, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 3, template_var 2)),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_app (template_hole 1, template_var 2)))
            ),
        template_equation
         (template_app (template_var 4, template_var 1),
          template_app (template_var 4, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("TernaryOrdering.overlap_ordering_alt2",
     "[| ?ord ?a ?b ?c; ?ord ?b ?c ?d; ?ord ?a ?b ?d; ?ord ?a ?c ?d;
         ALL a b c. ?ord a b c --> a ~= b & a ~= c & b ~= c |]
      ==> EX f. TernaryOrdering.ordering f ?ord {?a, ?b, ?c, ?d}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_var 4, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_var 4, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_var 4, template_var 3),
                template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_var 4, template_var 3),
                template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("TernaryOrdering.overlap_ordering",
     "[| ?ord ?a ?b ?c; ?ord ?b ?c ?d; ?ord ?a ?b ?d; ?ord ?a ?c ?d;
         ?a ~= ?b & ?a ~= ?c & ?a ~= ?d & ?b ~= ?c & ?b ~= ?d & ?c ~= ?d |]
      ==> EX f. TernaryOrdering.ordering f ?ord {?a, ?b, ?c, ?d}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_var 4, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_var 4, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_var 4, template_var 3),
                template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_var 4, template_var 3),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 2))),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 3),
                      template_var 1))),
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_hole 5,
                      template_app
                       (template_app (template_hole 4, template_var 3),
                        template_var 0))),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_hole 5,
                        template_app
                         (template_app (template_hole 4, template_var 2),
                          template_var 1))),
                    template_app
                     (template_app
                       (template_hole 6,
                        template_app
                         (template_hole 5,
                          template_app
                           (template_app (template_hole 4, template_var 2),
                            template_var 0))),
                      template_app
                       (template_hole 5,
                        template_app
                         (template_app (template_hole 4, template_var 1),
                          template_var 0)))))))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("TernaryOrdering.overlap_ordering_alt1",
     "[| ?ord ?a ?b ?c; ?ord ?b ?c ?d;
         ALL a b c d. ?ord a b c & ?ord b c d --> ?ord a b d;
         ALL a b c d. ?ord a b c & ?ord b c d --> ?ord a c d;
         ALL a b c. ?ord a b c --> a ~= b & a ~= c & b ~= c |]
      ==> EX f. TernaryOrdering.ordering f ?ord {?a, ?b, ?c, ?d}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_var 4, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_var 4, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("TernaryOrdering.overlap_ordering_alt",
     "[| ?ord ?a ?b ?c; ?ord ?b ?c ?d;
         ALL a b c d. ?ord a b c & ?ord b c d --> ?ord a b d;
         ALL a b c d. ?ord a b c & ?ord b c d --> ?ord a c d;
         ?a ~= ?b & ?a ~= ?c & ?a ~= ?d & ?b ~= ?c & ?b ~= ?d & ?c ~= ?d |]
      ==> EX f. TernaryOrdering.ordering f ?ord {?a, ?b, ?c, ?d}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_var 4, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_var 4, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 2))),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 3),
                      template_var 1))),
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_hole 5,
                      template_app
                       (template_app (template_hole 4, template_var 3),
                        template_var 0))),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_hole 5,
                        template_app
                         (template_app (template_hole 4, template_var 2),
                          template_var 1))),
                    template_app
                     (template_app
                       (template_hole 6,
                        template_app
                         (template_hole 5,
                          template_app
                           (template_app (template_hole 4, template_var 2),
                            template_var 0))),
                      template_app
                       (template_hole 5,
                        template_app
                         (template_app (template_hole 4, template_var 1),
                          template_var 0)))))))
            )],
       template_predicate (template_app (template_hole 3, t_empty))))]
