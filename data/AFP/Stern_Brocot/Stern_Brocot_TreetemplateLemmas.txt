   [("Stern_Brocot_Tree.times_matrix_I",
     "times_matrix ??.Stern_Brocot_Tree.I ?x = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Stern_Brocot_Tree.times_matrix_I",
     "times_matrix ?x ??.Stern_Brocot_Tree.I = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Stern_Brocot_Tree.stream_sel", "shd (stream ?t) = tree.root ?t",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Stern_Brocot_Tree.tree_chop_sel",
     "tree.left (tree_chop ?t) = tree.right ?t",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Stern_Brocot_Tree.tree_chop_pure_tree",
     "tree_chop (pure ?x) = pure ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Stern_Brocot_Tree.stream_numeral", "stream (numeral ?n) = numeral ?n",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Stern_Brocot_Tree.tree_chop_sel",
     "tree.root (tree_chop ?t) = tree.root (tree.left ?t)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 2, template_app (template_hole 0, template_var 0)))),
    ("Stern_Brocot_Tree.tree_chop_sel",
     "tree.right (tree_chop ?t) = tree_chop (tree.left ?t)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Stern_Brocot_Tree.stream_pure", "stream (pure ?x) = pure ?x",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Stern_Brocot_Tree.stream_sel",
     "stl (stream ?t) = stream (tree_chop ?t)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Stern_Brocot_Tree.mod_tree_lemma2", "(?x + ?y) mod ?y = ?x mod ?y",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Stern_Brocot_Tree.tree_chop_ap_tree",
     "tree_chop (?f \<diamondop> ?x) =
      tree_chop ?f \<diamondop> tree_chop ?x",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Stern_Brocot_Tree.tree_chop_plus",
     "tree_chop (?t + ?t') = tree_chop ?t + tree_chop ?t'",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Stern_Brocot_Tree.stream_ap",
     "stream (?f \<diamondop> ?x) = stream ?f \<diamondop> stream ?x",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Stern_Brocot_Tree.stream_plus",
     "stream (?t + ?t') = stream ?t + stream ?t'",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Stern_Brocot_Tree.stream_minus",
     "stream (?t - ?t') = stream ?t - stream ?t'",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Stern_Brocot_Tree.stream_times",
     "stream (?t * ?t') = stream ?t * stream ?t'",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Stern_Brocot_Tree.stream_mod",
     "stream (?t mod ?t') = stream ?t mod stream ?t'",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Stern_Brocot_Tree.stern_brocot_coprime",
     "case tree.root (traverse_tree ?path stern_brocot_recurse) of
      (m, n) => coprime m n",
     template_predicate
      (
         template_app
          (template_app (template_hole 4, t_empty),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)))
         )),
    ("Stern_Brocot_Tree.den_gt_0",
     "?x : Cotree.tree.set_tree den ==> 0 < ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2)))
            )],
       template_inequation (less_than, template_hole 0, template_var 0))),
    ("Stern_Brocot_Tree.times_matrix_assoc",
     "times_matrix (times_matrix ?x ?y) ?z =
      times_matrix ?x (times_matrix ?y ?z)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Stern_Brocot_Tree.LL_UR_Det",
     "Det ?m = 1 ==> Det (times_matrix ??.Stern_Brocot_Tree.LL ?m) = 1",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 0), template_hole 2)],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)),
         template_hole 2))),
    ("Stern_Brocot_Tree.LL_UR_Det",
     "Det ?m = 1 ==> Det (times_matrix ??.Stern_Brocot_Tree.UR ?m) = 1",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 0), template_hole 2)],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)),
         template_hole 2))),
    ("Stern_Brocot_Tree.LL_UR_Det",
     "Det ?m = 1 ==> Det (times_matrix ?m ??.Stern_Brocot_Tree.LL) = 1",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 0), template_hole 2)],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)),
         template_hole 2))),
    ("Stern_Brocot_Tree.LL_UR_Det",
     "Det ?m = 1 ==> Det (times_matrix ?m ??.Stern_Brocot_Tree.UR) = 1",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 0), template_hole 2)],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)),
         template_hole 2))),
    ("Stern_Brocot_Tree.stern_brocot_denominator_non_zero",
     "case tree.root (traverse_tree ?path stern_brocot_recurse) of
      (m, n) => 0 < m & 0 < n",
     template_predicate
      (
         template_app
          (template_app (template_hole 6, t_empty),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)))
         )),
    ("Stern_Brocot_Tree.set_tree_pathD",
     "?x : Cotree.tree.set_tree ?t ==>
      EX p. ?x = tree.root (traverse_tree p ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Stern_Brocot_Tree.LL_UR_pos",
     "0 < snd (mediant ?m) ==>
      0 < snd (mediant (times_matrix ?m ??.Stern_Brocot_Tree.LL))",
     template_implication
      ([template_inequation
         (less_than, template_hole 4,
          template_app
           (template_hole 3,
            template_app (template_hole 2, template_var 0)))],
       template_inequation
        (less_than, template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)))))),
    ("Stern_Brocot_Tree.LL_UR_pos",
     "0 < snd (mediant ?m) ==>
      0 < snd (mediant (times_matrix ?m ??.Stern_Brocot_Tree.UR))",
     template_implication
      ([template_inequation
         (less_than, template_hole 4,
          template_app
           (template_hole 3,
            template_app (template_hole 2, template_var 0)))],
       template_inequation
        (less_than, template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)))))),
    ("Stern_Brocot_Tree.stern_brocot_fractions_not_repeated",
     "tree.root (traverse_tree ?path stern_brocot_iterate) =
      tree.root (traverse_tree ?path' stern_brocot_iterate) ==>
      ?path = ?path'",
     template_implication
      ([template_equation
         (template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)),
          template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)))],
       template_equation (template_var 1, template_var 0))),
    ("Stern_Brocot_Tree.stern_brocot_iterate_aux_decompose",
     "EX m''.
         times_matrix ?m m'' =
         tree.root (traverse_tree ?path (stern_brocot_iterate_aux ?m)) &
         Det m'' = 1",
     template_predicate (template_app (template_hole 9, t_empty))),
    ("Stern_Brocot_Tree.mod_tree_lemma1",
     "ALL i:Cotree.tree.set_tree ?y. 0 < i ==> ?x mod (?x + ?y) = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 0))),
    ("Stern_Brocot_Tree.stern_brocot_fractions_not_repeated_strict_prefix",
     "[| tree.root (traverse_tree ?path stern_brocot_iterate) =
         tree.root (traverse_tree ?path' stern_brocot_iterate);
         strict_prefix ?path ?path' |]
      ==> False",
     template_implication
      ([template_equation
         (template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 1),
              template_hole 2)),
          template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2))),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate (template_hole 0))),
    ("Stern_Brocot_Tree.stern_brocot_iterate_aux_Det",
     "[| Det ?m = 1; 0 < snd (mediant ?m) |]
      ==> Det (tree.root
                (traverse_tree ?path (stern_brocot_iterate_aux ?m))) =
          1",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 1), template_hole 7),
        template_inequation
         (less_than, template_hole 5,
          template_app
           (template_hole 4,
            template_app (template_hole 3, template_var 1)))],
       template_equation
        (template_app
          (template_hole 8,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 1)))),
         template_hole 7))),
    ("Stern_Brocot_Tree.stern_brocot_iterate_aux_Det",
     "[| Det ?m = 1; 0 < snd (mediant ?m) |]
      ==> 0 < snd (mediant
                    (tree.root
                      (traverse_tree ?path
                        (stern_brocot_iterate_aux ?m))))",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 1), template_hole 7),
        template_inequation
         (less_than, template_hole 5,
          template_app
           (template_hole 4,
            template_app (template_hole 3, template_var 1)))],
       template_inequation
        (less_than, template_hole 5,
         template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_var 1)))))))),
    ("Stern_Brocot_Tree.stern_brocot_rationals",
     "[| 0 < ?m; 0 < ?n |]
      ==> tree.root
           (traverse_tree (mk_path ?m ?n)
             (pure rat_of \<diamondop> stern_brocot_recurse)) =
          Fract (int ?m) (int ?n)",
     template_implication
      ([template_inequation (less_than, template_hole 10, template_var 1),
        template_inequation (less_than, template_hole 10, template_var 0)],
       template_equation
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, t_empty))),
               template_hole 0))),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0))))),
    ("Stern_Brocot_Tree.stern_brocot_rationals_not_repeated",
     "tree.root
       (traverse_tree ?path
         (pure rat_of \<diamondop> stern_brocot_recurse)) =
      tree.root
       (traverse_tree ?path'
         (pure rat_of \<diamondop> stern_brocot_recurse)) ==>
      ?path = ?path'",
     template_implication
      ([template_equation
         (template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_hole 5,
                    template_app (template_hole 4, t_empty))),
                template_hole 1))),
          template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_hole 5,
                    template_app (template_hole 4, t_empty))),
                template_hole 1))))],
       template_equation (template_var 1, template_var 0))),
    ("Stern_Brocot_Tree.stern_brocot_fractions_not_repeated_parallel",
     "[| tree.root (traverse_tree ?path stern_brocot_iterate) =
         tree.root (traverse_tree ?path' stern_brocot_iterate);
         ?path = ?pref @ ?d # ?ds; ?path' = ?pref @ ?d' # ?ds'; ?d ~= ?d' |]
      ==> False",
     template_implication
      ([template_equation
         (template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 7, template_var 6),
              template_hole 6)),
          template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 7, template_var 5),
              template_hole 6))),
        template_equation
         (template_var 6,
          template_app
           (template_app (template_hole 4, template_var 4),
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2))),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 4, template_var 4),
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0))),
        template_negation
         (template_equation (template_var 3, template_var 1))],
       template_predicate (template_hole 0))),
    ("Stern_Brocot_Tree.rat_inv_eq",
     "[| Fract ?a ?b = Fract ?c ?d; 0 < ?b; 0 < ?d; coprime ?a ?b;
         coprime ?c ?d |]
      ==> ?a = ?c & ?b = ?d",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 5, template_var 1),
            template_var 0)),
        template_inequation (less_than, template_hole 3, template_var 2),
        template_inequation (less_than, template_hole 3, template_var 0),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Stern_Brocot_Tree.tree_ordering_right",
     "[| Det ?X = 1; Det ?Y = 1; 0 < snd (mediant ?X) |]
      ==> rat_of (mediant ?X)
          < rat_of
             (mediant
               (times_matrix (times_matrix ?X ??.Stern_Brocot_Tree.UR)
                 ?Y))",
     template_implication
      ([template_equation
         (template_app (template_hole 11, template_var 1),
          template_hole 10),
        template_equation
         (template_app (template_hole 11, template_var 0),
          template_hole 10),
        template_inequation
         (less_than, template_hole 8,
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_var 1)))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 4, t_empty),
           template_app (template_hole 6, template_var 1)),
         template_app
          (template_app (template_hole 4, t_empty),
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 0)),
               template_var 0)))))),
    ("Stern_Brocot_Tree.tree_ordering_left",
     "[| Det ?X = 1; Det ?Y = 1; 0 < snd (mediant ?X) |]
      ==> rat_of
           (mediant
             (times_matrix (times_matrix ?X ??.Stern_Brocot_Tree.LL) ?Y))
          < rat_of (mediant ?X)",
     template_implication
      ([template_equation
         (template_app (template_hole 11, template_var 1),
          template_hole 10),
        template_equation
         (template_app (template_hole 11, template_var 0),
          template_hole 10),
        template_inequation
         (less_than, template_hole 8,
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_var 1)))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 4, t_empty),
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 0)),
               template_var 0))),
         template_app
          (template_app (template_hole 4, t_empty),
           template_app (template_hole 6, template_var 1))))),
    ("Stern_Brocot_Tree.lists_not_eq",
     "[| ?xs ~= ?ys; strict_prefix ?xs ?ys ==> ?thesis;
         strict_prefix ?ys ?xs ==> ?thesis;
         !!ps x y xs' ys'.
            [| ?xs = ps @ x # xs'; ?ys = ps @ y # ys'; x ~= y |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 2)
               )],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Stern_Brocot_Tree.mk_path_induct",
     "[| !!m n. m = n ==> ?P (Suc m) (Suc n);
         !!m n. [| m < n; ?P (Suc m) (n - m) |] ==> ?P (Suc m) (Suc n);
         !!m n. [| n < m; ?P (m - n) (Suc n) |] ==> ?P (Suc m) (Suc n);
         !!uu_. ?P 0 uu_; !!uv_. ?P uv_ 0 |]
      ==> ?P ?a0.0 ?a1.0",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 2, template_var 1), template_var 0)
           )))]
