Loading theory "Applicative_Lifting.Applicative" (required by "Draft.Bird_TreeMoreTemplates" via "Draft.Bird_Tree" via "Draft.Stern_Brocot_Tree" via "Draft.Cotree_Algebra" via "Draft.Cotree")
Loading theory "HOL-Library.Adhoc_Overloading" (required by "Draft.Bird_TreeMoreTemplates" via "Draft.Bird_Tree" via "Draft.Stern_Brocot_Tree" via "Draft.Cotree_Algebra" via "Draft.Cotree")
Loading theory "HOL-Library.BNF_Corec" (required by "Draft.Bird_TreeMoreTemplates" via "Draft.Bird_Tree" via "Draft.Stern_Brocot_Tree" via "Draft.Cotree_Algebra" via "Draft.Cotree")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Bird_TreeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
locale cong
  fixes rel :: "('a => 'a => bool) => 'b => 'b => bool"
    and eval :: "'b => 'a"
    and retr :: "('a => 'a => bool) => 'a => 'a => bool"
  assumes "cong rel eval retr"
signature ADHOC_OVERLOADING =
  sig
    val generic_add_overloaded: string -> Context.generic -> Context.generic
    val generic_add_variant:
       string -> term -> Context.generic -> Context.generic
    val generic_remove_overloaded:
       string -> Context.generic -> Context.generic
    val generic_remove_variant:
       string -> term -> Context.generic -> Context.generic
    val is_overloaded: Proof.context -> string -> bool
    val show_variants: bool Config.T
  end
structure Adhoc_Overloading: ADHOC_OVERLOADING
### theory "HOL-Library.Adhoc_Overloading"
### 0.119s elapsed time, 0.493s cpu time, 0.034s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Bird_TreeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Library.Function_Algebras"
### 0.136s elapsed time, 0.563s cpu time, 0.034s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Bird_TreeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.219s elapsed time, 0.863s cpu time, 0.101s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.Bird_TreeMoreTemplates" via "Draft.Bird_Tree" via "Draft.Stern_Brocot_Tree")
### theory "HOL-Library.Nat_Bijection"
### 0.336s elapsed time, 1.316s cpu time, 0.191s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Bird_TreeMoreTemplates" via "Draft.ExtrEqs")
signature BNF_GFP_GREC_TACTICS =
  sig
    val mk_Lam_Inl_Inr_tac: Proof.context -> thm -> thm -> tactic
    val mk_Retr_coinduct_tac: Proof.context -> thm -> thm -> tactic
    val mk_algLam_algLam_tac:
       Proof.context ->
         thm -> thm -> thm -> thm -> thm -> thm -> thm -> thm -> tactic
    val mk_algLam_algrho_tac: Proof.context -> thm -> thm -> tactic
    val mk_algLam_base_tac:
       Proof.context ->
         term ->
           thm ->
             thm ->
               thm ->
                 thm ->
                   thm ->
                     thm ->
                       thm ->
                         thm list ->
                           thm ->
                             thm list -> thm list -> thm -> thm -> tactic
    val mk_algLam_step_tac: Proof.context -> thm -> thm -> thm -> tactic
    val mk_cong_locale_tac:
       Proof.context ->
         thm -> thm list -> thm -> thm -> thm list -> thm -> thm -> tactic
    val mk_corecUU_Inl_tac:
       Proof.context ->
         term ->
           thm ->
             thm ->
               thm ->
                 thm ->
                   thm list ->
                     thm -> thm list -> thm -> thm -> thm -> thm -> tactic
    val mk_corecUU_pointfree_tac:
       Proof.context ->
         thm ->
           thm ->
             thm ->
               thm ->
                 thm ->
                   thm ->
                     thm -> thm -> thm -> thm -> thm -> thm -> thm -> tactic
    val mk_corecUU_unique_tac:
       Proof.context ->
         thm ->
           thm ->
             thm ->
               thm ->
                 thm ->
                   thm ->
                     thm -> thm -> thm -> thm -> thm -> thm -> thm -> tactic
    val mk_corecU_pointfree_tac:
       Proof.context ->
         thm ->
           thm ->
             thm list ->
               thm ->
                 thm list -> thm -> thm list -> thm -> thm -> thm -> tactic
    val mk_dtor_algLam_tac:
       Proof.context ->
         thm ->
           thm ->
             thm ->
               thm ->
                 thm ->
                   thm ->
                     thm list ->
                       thm ->
                         thm ->
                           thm list -> thm -> thm -> thm -> thm -> tactic
    val mk_dtor_algrho_tac:
       Proof.context -> thm -> thm -> thm -> thm -> tactic
    val mk_dtor_transfer_tac: Proof.context -> thm -> tactic
    val mk_equivp_Retr_tac:
       Proof.context -> thm -> thm -> thm -> thm -> tactic
    val mk_eval_Oper_tac:
       Proof.context ->
         int ->
           thm ->
             thm -> thm -> thm -> thm -> thm list -> thm -> thm -> tactic
    val mk_eval_V_or_CLeaf_tac:
       Proof.context ->
         thm -> thm -> thm -> thm -> thm -> thm list -> thm -> tactic
    val mk_eval_core_embL_tac:
       Proof.context ->
         thm ->
           thm ->
             thm ->
               thm ->
                 thm ->
                   thm ->
                     thm ->
                       thm ->
                         thm ->
                           thm ->
                             thm list ->
                               thm list -> thm list -> thm -> tactic
    val mk_eval_core_flat_tac:
       Proof.context ->
         thm ->
           thm ->
             thm ->
               thm ->
                 thm ->
                   thm ->
                     thm ->
                       thm list ->
                         thm ->
                           thm list ->
                             thm -> thm -> thm -> thm list -> tactic
    val mk_eval_core_k_as_ssig_tac:
       Proof.context ->
         thm ->
           thm -> thm -> thm list -> thm -> thm -> thm -> thm list -> tactic
    val mk_eval_embL_tac:
       Proof.context -> thm -> thm -> thm -> thm -> thm -> thm -> tactic
    val mk_eval_flat_tac:
       Proof.context ->
         thm -> thm -> thm -> thm -> thm -> thm -> thm -> thm -> tactic
    val mk_eval_sctr_tac:
       Proof.context -> thm -> thm -> thm -> thm -> tactic
    val mk_extdd_mor_tac:
       Proof.context ->
         thm ->
           thm ->
             thm ->
               thm ->
                 thm -> thm -> thm -> thm -> thm -> thm -> thm -> tactic
    val mk_extdd_o_VLeaf_tac:
       Proof.context ->
         thm ->
           thm -> thm -> thm list -> thm list -> thm -> thm -> thm -> tactic
    val mk_flat_VLeaf_or_flat_tac:
       Proof.context -> thm -> thm -> thm list -> tactic
    val mk_flat_embL_tac:
       Proof.context ->
         thm ->
           thm ->
             thm ->
               thm ->
                 thm ->
                   thm list -> thm list -> thm list -> thm list -> tactic
    val mk_mor_cutSsig_flat_tac:
       Proof.context ->
         term ->
           thm ->
             thm ->
               thm ->
                 thm ->
                   thm ->
                     thm ->
                       thm list ->
                         thm ->
                           thm ->
                             thm ->
                               thm ->
                                 thm -> thm -> thm -> thm -> thm -> tactic
    val mk_natural_by_unfolding_tac: Proof.context -> thm list -> tactic
    val mk_natural_from_transfer_tac:
       Proof.context ->
         int ->
           bool list -> thm -> thm list -> thm list -> thm list -> tactic
    val mk_sig_transfer_tac:
       Proof.context -> thm -> thm list -> thm -> tactic
    val mk_transfer_by_transfer_prover_tac:
       Proof.context -> thm list -> thm list -> thm list -> tactic
    val transfer_prover_add_tac:
       Proof.context -> thm list -> thm list -> int -> tactic
    val transfer_prover_eq_tac: Proof.context -> int -> tactic
  end
structure BNF_GFP_Grec_Tactics: BNF_GFP_GREC_TACTICS
consts
  prefixes :: "'a list => 'a list list"
### ML warning (line 241 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
### ML warning (line 369 of "$AFP/Applicative_Lifting/applicative.ML"):
### Matches are not exhaustive.
### ML warning (line 483 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
### ML warning (line 495 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
### ML warning (line 677 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
### ML warning (line 687 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
### ML warning (line 789 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
### ML warning (line 900 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
### ML warning (line 999 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
### ML warning (line 1061 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
### ML warning (line 1084 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
### ML warning (line 1137 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
### ML warning (line 1148 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
### ML warning (line 1164 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
### ML warning (line 1225 of "$AFP/Applicative_Lifting/applicative.ML"):
### Matches are not exhaustive.
### ML warning (line 1313 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
### ML warning (line 1317 of "$AFP/Applicative_Lifting/applicative.ML"):
### Matches are not exhaustive.
### ML warning (line 1336 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
### ML warning (line 1337 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
signature APPLICATIVE =
  sig
    val add_unfold_attrib: xstring option -> attribute
    type afun
    val afun_fold_tac: Proof.context -> afun -> int -> tactic
    type afun_inst
    val afun_of: Proof.context -> string -> afun
    val afun_of_generic: Context.generic -> string -> afun
    val afun_unfold_tac: Proof.context -> afun -> int -> tactic
    val afuns_of_term: Proof.context -> term -> afun list
    val afuns_of_term_generic: Context.generic -> term -> afun list
    val afuns_of_typ: Proof.context -> typ -> afun list
    val afuns_of_typ_generic: Context.generic -> typ -> afun list
    val applicative_cmd:
       ((((binding * string list) * string) * string) * string option) *
       string option
         -> local_theory -> Proof.state
    val combinator_rule_attrib: string list option -> attribute
    val dest_comb: Proof.context -> afun_inst -> term -> term * term
    val dest_pure: Proof.context -> afun_inst -> term -> term
    val dest_type: Proof.context -> afun_inst -> typ -> typ option
    val dest_type': Proof.context -> afun_inst -> typ -> typ
    val extern: Context.generic -> string -> xstring
    val fold_wrapper_tac: Proof.context -> afun option -> int -> tactic
    val forward_lift_attrib: xstring -> attribute
    val forward_lift_rule: Proof.context -> afun -> thm -> thm
    val general_normalform_conv:
       Proof.context -> afun -> cterm * cterm -> thm * thm
    val general_normalize_rel_tac: Proof.context -> afun -> int -> tactic
    val generalize_lift_terms:
       afun_inst -> term list -> Proof.context -> term list * Proof.context
    val import_afun_inst: afun -> Proof.context -> afun_inst * Proof.context
    val infer_comb: Proof.context -> afun_inst -> term * term -> term
    val inner_sort_of: afun_inst -> sort
    val intern: Context.generic -> xstring -> string
    val lift_term: afun_inst -> term -> term
    val lifting_wrapper_tac: Proof.context -> afun option -> int -> tactic
    val match_afun_inst: Proof.context -> afun -> term * int -> afun_inst
    val mk_ap: afun_inst -> typ * typ -> term
    val mk_comb: afun_inst -> typ -> term * term -> term
    val mk_pure: afun_inst -> typ -> term
    val mk_set: afun_inst -> typ -> term
    val mk_type: afun_inst -> typ -> typ
    val name_of_afun: afun -> binding
    val normalform_conv: Proof.context -> afun -> conv
    val normalize_rel_tac: Proof.context -> afun -> int -> tactic
    val normalize_wrapper_tac: Proof.context -> afun option -> int -> tactic
    val parse_opt_afun: afun option context_parser
    val print_afuns: Proof.context -> unit
    val setup_combinators:
       (string * thm) list -> local_theory -> local_theory
    val subst_lift_term: afun_inst -> (term * term) list -> term -> term
    val unfold_all_tac: Proof.context -> int -> tactic
    val unfold_wrapper_tac: Proof.context -> afun option -> int -> tactic
    val unfolds_of_afun: afun -> thm list
  end
structure Applicative: APPLICATIVE
val it = (): unit
val it = (): unit
bundle applicative_syntax
### theory "Applicative_Lifting.Applicative"
### 0.857s elapsed time, 3.361s cpu time, 0.397s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Bird_TreeMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  suffixes :: "'a list => 'a list list"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Proofs for inductive predicate(s) "list_emb"
  Proving monotonicity ...
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.118s elapsed time, 4.237s cpu time, 0.905s GC time
Loading theory "Applicative_Lifting.Applicative_Stream" (required by "Draft.Bird_TreeMoreTemplates" via "Draft.Bird_Tree" via "Draft.Stern_Brocot_Tree" via "Applicative_Lifting.Stream_Algebra")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  ap_stream :: "('a => 'b) stream => 'a stream => 'b stream"
Found termination order: "size <*mlex*> {}"
### theory "Applicative_Lifting.Applicative_Stream"
### 0.368s elapsed time, 1.451s cpu time, 0.159s GC time
Loading theory "Applicative_Lifting.Stream_Algebra" (required by "Draft.Bird_TreeMoreTemplates" via "Draft.Bird_Tree" via "Draft.Stern_Brocot_Tree")
consts
  sublists :: "'a list => 'a list list"
instantiation
  stream :: (zero) zero
  zero_stream == zero_class.zero :: 'a stream
instantiation
  stream :: (one) one
  one_stream == one_class.one :: 'a stream
instantiation
  stream :: (plus) plus
  plus_stream == plus :: 'a stream => 'a stream => 'a stream
instantiation
  stream :: (minus) minus
  minus_stream == minus :: 'a stream => 'a stream => 'a stream
Found termination order: "size <*mlex*> {}"
instantiation
  stream :: (uminus) uminus
  uminus_stream == uminus :: 'a stream => 'a stream
instantiation
  stream :: (times) times
  times_stream == times :: 'a stream => 'a stream => 'a stream
instantiation
  stream :: (modulo) modulo
  modulo_stream == modulo :: 'a stream => 'a stream => 'a stream
  divide_stream == divide :: 'a stream => 'a stream => 'a stream
### theory "HOL-Library.Sublist"
### 1.679s elapsed time, 6.446s cpu time, 1.207s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Bird_TreeMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
### theory "Applicative_Lifting.Stream_Algebra"
### 0.153s elapsed time, 0.600s cpu time, 0.053s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.761s elapsed time, 2.372s cpu time, 0.230s GC time
### theory "HOL-Library.Tree"
### 2.112s elapsed time, 7.287s cpu time, 1.222s GC time
Loading theory "Draft.Templates" (required by "Draft.Bird_TreeMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.056s elapsed time, 0.112s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Bird_TreeMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.544s elapsed time, 1.118s cpu time, 0.094s GC time
### ML warning (line 261 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 290 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 456 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 512 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Matches are not exhaustive.
### ML warning (line 563 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 603 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 900 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 1233 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Matches are not exhaustive.
### ML warning (line 1268 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Matches are not exhaustive.
### ML warning (line 1294 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Matches are not exhaustive.
### ML warning (line 1621 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Matches are not exhaustive.
### ML warning (line 1670 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 1808 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 1809 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2059 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2064 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2133 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2149 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2150 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2151 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2152 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2154 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2155 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2157 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2158 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2183 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2370 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2371 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2400 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2401 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2402 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2404 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2408 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2412 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2436 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2477 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2267 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Matches are not exhaustive.
### ML warning (line 2594 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2599 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2711 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2712 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2713 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2752 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2753 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2754 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2756 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2758 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2765 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2792 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 2569 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Matches are not exhaustive.
### ML warning (line 2914 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Matches are not exhaustive.
### ML warning (line 3014 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Matches are not exhaustive.
### ML warning (line 3064 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 3072 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 3078 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 3085 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Value identifier (fp_alives) has not been referenced.
### ML warning (line 3093 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 3149 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Pattern is not exhaustive.
### ML warning (line 3212 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec.ML"):
### Matches are not exhaustive.
signature BNF_GFP_GREC =
  sig
    val Tsubst: typ -> typ -> typ -> typ
    val bnf_kill_all_but:
       int -> BNF_Def.bnf -> local_theory -> BNF_Def.bnf * local_theory
    type buffer =
       {CLeaf: term,
        Oper: term,
        VLeaf: term, ctr_wrapper: term, friends: (typ * term) Symtab.table}
    type corec_info =
       {Lam: term,
        Lam_pointful_natural: thm,
        Lam_transfer: thm,
        Retr: term,
        Retr_coinduct: thm,
        Y: typ,
        Z: typ,
        algLam: term,
        algLam_thm: thm,
        all_algLam_algs: thm list,
        all_dead_k_bnfs: BNF_Def.bnf list,
        buffer: buffer,
        corecUU: term,
        corecUU_thm: thm,
        corecUU_transfer: thm,
        corecUU_unique: thm,
        dtor_algLam: thm, dtor_coinduct_info: dtor_coinduct_info, ...}
    val corec_info_of: typ -> local_theory -> corec_info * local_theory
    val corec_infos_of: Proof.context -> string -> corec_info list
    val corec_infos_of_generic:
       Context.generic -> Symtab.key -> corec_info list
    val define_const:
       bool ->
         binding ->
           int ->
             string -> term -> local_theory -> (term * thm) * local_theory
    type dtor_coinduct_info =
       {cong_alg_intros: thm list,
        cong_base: thm,
        cong_def: thm,
        cong_locale: thm,
        cong_refl: thm, cong_sym: thm, cong_trans: thm, dtor_coinduct: thm}
    val dummify_atomic_types: term -> term
    val freeze_types:
       Proof.context -> (indexname * sort) list -> typ list -> typ list
    type friend_info = {algLam_algrho: thm, algrho: term, dtor_algrho: thm}
    val has_no_corec_info: Proof.context -> string -> bool
    val map_buffer: (term -> term) -> buffer -> buffer
    val maybe_corec_info_of: Proof.context -> typ -> corec_info option
    val mk_fp_binding: binding -> string -> binding
    val not_codatatype: Proof.context -> typ -> 'a
    val prepare_friend_corec:
       string ->
         typ ->
           local_theory ->
             (corec_info * binding * int * typ * typ * typ * typ * typ *
              BNF_Def.bnf * BNF_Def.bnf * BNF_FP_Def_Sugar.fp_sugar *
              BNF_FP_Def_Sugar.fp_sugar * buffer)
             *
             local_theory
    val print_corec_infos: Proof.context -> unit
    val register_friend_corec:
       string ->
         binding ->
           int ->
             typ ->
               typ ->
                 typ ->
                   BNF_Def.bnf ->
                     BNF_FP_Def_Sugar.fp_sugar ->
                       BNF_FP_Def_Sugar.fp_sugar ->
                         term ->
                           term ->
                             thm ->
                               corec_info ->
                                 local_theory -> friend_info * local_theory
    val specialize_buffer_types: buffer -> buffer
    val substT: typ -> typ -> term -> term
  end
structure BNF_GFP_Grec: BNF_GFP_GREC
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar_util.ML"):
### Pattern is not exhaustive.
### ML warning (line 163 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar_util.ML"):
### Pattern is not exhaustive.
### ML warning (line 187 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar_util.ML"):
### Pattern is not exhaustive.
### ML warning (line 188 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar_util.ML"):
### Pattern is not exhaustive.
### ML warning (line 329 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar_util.ML"):
### Matches are not exhaustive.
signature BNF_GFP_GREC_SUGAR_UTIL =
  sig
    exception UNNATURAL of unit
    val corec_parse_info_of:
       Proof.context ->
         typ list -> typ -> BNF_GFP_Grec.buffer -> s_parse_info
    val friend_parse_info_of:
       Proof.context ->
         typ list ->
           typ -> BNF_GFP_Grec.buffer -> s_parse_info * rho_parse_info
    val generalize_types: int -> typ -> typ -> typ
    val mk_abs_transfer: Proof.context -> string -> thm
    val mk_const_transfer_goal: Proof.context -> string * typ -> term
    val mk_curry_uncurryN_balanced: Proof.context -> int -> thm
    val mk_pointful_natural_from_transfer: Proof.context -> thm -> thm
    val mk_rep_transfer: Proof.context -> string -> thm
    type rho_parse_info =
       {discs: term Symtab.table,
        it: term,
        mk_case: typ -> term,
        pattern_ctrs: (term * term list) Symtab.table,
        sels: term Symtab.table}
    type s_parse_info =
       {ctr_guards: term Symtab.table,
        inner_buffer: BNF_GFP_Grec.buffer,
        outer_buffer: BNF_GFP_Grec.buffer}
  end
structure BNF_GFP_Grec_Sugar_Util: BNF_GFP_GREC_SUGAR_UTIL
signature BNF_GFP_GREC_SUGAR_TACTICS =
  sig
    val mk_case_dtor_tac:
       Proof.context ->
         term -> thm -> thm -> thm list -> thm -> thm list -> tactic
    val mk_code_tac:
       Proof.context ->
         int ->
           term list ->
             term ->
               term ->
                 thm ->
                   thm ->
                     thm list ->
                       thm list ->
                         thm list ->
                           thm list ->
                             thm ->
                               thm ->
                                 thm list ->
                                   thm list ->
                                     thm ->
                                       thm list ->
   thm list -> thm list -> thm list -> ...
    val mk_cong_intro_ctr_or_friend_tac:
       Proof.context -> thm -> thm list -> thm -> tactic
    val mk_eq_algrho_tac:
       Proof.context ->
         term list ->
           term ->
             term ->
               term ->
                 term ->
                   term ->
                     thm ->
                       thm ->
                         thm list ->
                           thm list ->
                             thm list ->
                               thm list ->
                                 thm ->
                                   thm ->
                                     thm ->
                                       thm list ->
   thm list -> thm list -> thm -> ...
    val mk_eq_corecUU_tac:
       Proof.context ->
         int ->
           term list ->
             term ->
               term ->
                 thm ->
                   thm ->
                     thm list ->
                       thm list ->
                         thm list ->
                           thm list ->
                             thm ->
                               thm ->
                                 thm list ->
                                   thm list ->
                                     thm list ->
                                       thm list ->
   thm list -> thm list -> thm list -> ...
    val mk_last_disc_tac: Proof.context -> term -> thm -> thm list -> tactic
    val mk_rho_transfer_tac:
       Proof.context -> bool -> thm -> thm list -> tactic
    val mk_unique_tac:
       Proof.context ->
         int ->
           term list ->
             term ->
               term ->
                 thm ->
                   thm ->
                     thm list ->
                       thm list ->
                         thm list ->
                           thm list ->
                             thm ->
                               thm ->
                                 thm list ->
                                   thm list ->
                                     thm list ->
                                       thm list ->
   thm list -> thm list -> thm list -> ...
    val rho_transfer_simps: thm list
  end
structure BNF_GFP_Grec_Sugar_Tactics: BNF_GFP_GREC_SUGAR_TACTICS
### ML warning (line 62 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Value identifier (ctrN) has not been referenced.
### ML warning (line 63 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Value identifier (discN) has not been referenced.
### ML warning (line 64 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Value identifier (disc_iffN) has not been referenced.
### ML warning (line 72 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Value identifier (selN) has not been referenced.
### ML warning (line 78 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Value identifier (simp_attrs) has not been referenced.
### ML warning (line 218 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 223 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 254 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 256 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 316 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 319 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 321 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 360 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 362 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (file "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 417 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 439 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 442 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 445 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (file "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Matches are not exhaustive.
### ML warning (line 541 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 542 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 561 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 562 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (file "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 595 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 597 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (file "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 621 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 623 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Matches are not exhaustive.
### ML warning (line 626 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (file "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 643 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (file "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 660 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 652 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Matches are not exhaustive.
### ML warning (line 713 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Matches are not exhaustive.
### ML warning (line 785 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 786 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 799 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Matches are not exhaustive.
### ML warning (line 1091 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 1092 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 1150 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 1151 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 1187 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 1219 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 1214 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Matches are not exhaustive.
### ML warning (line 1243 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 1316 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Matches are not exhaustive.
### ML warning (line 1368 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Matches are not exhaustive.
### ML warning (line 1399 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 1658 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Matches are not exhaustive.
### ML warning (line 1692 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Matches are not exhaustive.
### ML warning (line 1737 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Matches are not exhaustive.
### ML warning (line 1806 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Matches are not exhaustive.
### ML warning (line 1807 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Matches are not exhaustive.
### ML warning (line 1817 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 1853 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Matches are not exhaustive.
### ML warning (line 1862 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Matches are not exhaustive.
### ML warning (line 1825 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Matches are not exhaustive.
### ML warning (line 1875 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 1878 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 1880 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 1938 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 1918 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Matches are not exhaustive.
### ML warning (line 1955 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Matches are not exhaustive.
### ML warning (line 1970 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Value identifier (transfer) has not been referenced.
### ML warning (line 1971 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 2029 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 2031 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 2032 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 2033 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 2037 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Matches are not exhaustive.
### ML warning (line 2050 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Matches are not exhaustive.
### ML warning (line 2120 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 2204 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 2214 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Matches are not exhaustive.
### ML warning (line 2229 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 2248 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 2288 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 2320 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Matches are not exhaustive.
### ML warning (line 2330 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
### ML warning (line 2338 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_sugar.ML"):
### Pattern is not exhaustive.
signature BNF_GFP_GREC_SUGAR =
  sig
    val build_corecUU_arg_and_goals:
       bool ->
         term ->
           term list * term ->
             local_theory ->
               (((thm list * thm list * thm list) * term list) * term) *
               local_theory
    val coinduction_upto_cmd:
       string * string -> local_theory -> local_theory
    val corec_cmd:
       bool ->
         corec_option list ->
           (binding * string option * mixfix) list * string ->
             local_theory -> local_theory
    datatype corec_option
    =
         Friend_Option
       | Plugins_Option of Proof.context -> Plugin_Name.filter
       | Transfer_Option
    val corecursive_cmd:
       bool ->
         corec_option list ->
           (binding * string option * mixfix) list * string ->
             local_theory -> Proof.state
    val derive_eq_corecUU:
       Proof.context ->
         BNF_GFP_Grec.corec_info -> term -> term -> thm -> thm
    val derive_unique:
       Proof.context ->
         morphism -> term -> BNF_GFP_Grec.corec_info -> string -> thm -> thm
    val explore_corec_equation:
       Proof.context ->
         bool ->
           bool ->
             string ->
               term ->
                 BNF_GFP_Grec_Sugar_Util.s_parse_info ->
                   typ -> term list * term -> term list * term
    val friend_of_corec_cmd:
       (string * string option) * string -> local_theory -> Proof.state
    val parse_corec_equation:
       Proof.context -> term list -> term -> term list * term
  end
structure BNF_GFP_Grec_Sugar: BNF_GFP_GREC_SUGAR
### ML warning (line 58 of "~~/src/HOL/Tools/BNF/bnf_gfp_grec_unique_sugar.ML"):
### Pattern is not exhaustive.
signature BNF_GFP_GREC_UNIQUE_SUGAR =
  sig val corec_unique_tac: Proof.context -> int -> tactic end
structure BNF_GFP_Grec_Unique_Sugar: BNF_GFP_GREC_UNIQUE_SUGAR
### theory "HOL-Library.BNF_Corec"
### 4.875s elapsed time, 13.867s cpu time, 2.661s GC time
Loading theory "Draft.Cotree" (required by "Draft.Bird_TreeMoreTemplates" via "Draft.Bird_Tree" via "Draft.Stern_Brocot_Tree" via "Draft.Cotree_Algebra")
consts
  unfold_tree :: "'a => 'b tree"
consts
  pure_tree :: "'a tree"
consts
  ap_tree :: "('a => 'b) tree => 'a tree => 'b tree"
consts
  tree_recurse :: "'a tree"
consts
  tree_iterate :: "'a => 'a tree"
consts
  traverse_dir :: "dir => 'a => 'a"
consts
  mirror :: "'a tree => 'a tree"
### theory "Draft.Cotree"
### 3.677s elapsed time, 4.518s cpu time, 1.192s GC time
Loading theory "Draft.Cotree_Algebra" (required by "Draft.Bird_TreeMoreTemplates" via "Draft.Bird_Tree" via "Draft.Stern_Brocot_Tree")
instantiation
  tree :: (zero) zero
  zero_tree == zero_class.zero :: 'a tree
instantiation
  tree :: (one) one
  one_tree == one_class.one :: 'a tree
instantiation
  tree :: (plus) plus
  plus_tree == plus :: 'a tree => 'a tree => 'a tree
instantiation
  tree :: (minus) minus
  minus_tree == minus :: 'a tree => 'a tree => 'a tree
instantiation
  tree :: (uminus) uminus
  uminus_tree == uminus :: 'a tree => 'a tree
instantiation
  tree :: (times) times
  times_tree == times :: 'a tree => 'a tree => 'a tree
instantiation
  tree :: (modulo) modulo
  modulo_tree == modulo :: 'a tree => 'a tree => 'a tree
  divide_tree == divide :: 'a tree => 'a tree => 'a tree
### theory "Draft.Cotree_Algebra"
### 1.027s elapsed time, 1.145s cpu time, 0.142s GC time
Loading theory "Draft.Stern_Brocot_Tree" (required by "Draft.Bird_TreeMoreTemplates" via "Draft.Bird_Tree")
consts
  stern_brocot_recurse :: "(nat * nat) tree"
consts
  tree_chop :: "'a tree => 'a tree"
consts
  stream :: "'a tree => 'a stream"
consts
  num_den :: "bool => nat tree"
consts
  num_mod_den :: "nat tree"
consts
  stern_brocot_loopless :: "(nat * nat) stream"
consts
  fusc' :: "nat stream"
### theory "Draft.Stern_Brocot_Tree"
### 10.032s elapsed time, 10.986s cpu time, 1.217s GC time
Loading theory "Draft.Bird_Tree" (required by "Draft.Bird_TreeMoreTemplates")
consts
  bird :: "(nat * nat) tree"
consts
  even_odd_mirror :: "bool => 'a tree => 'a tree"
Found termination order:
  "case_sum (size_list size) (size_list size) <*mlex*> {}"
### theory "Draft.Bird_Tree"
### 0.190s elapsed time, 0.251s cpu time, 0.037s GC time
Loading theory "Draft.Bird_TreeMoreTemplates"
val templateLemmas =
   [("Bird_Tree.even_odd_mirror_path_involution",
     "even_mirror_path (even_mirror_path ?path) = ?path",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Bird_Tree.even_odd_mirror_path_involution",
     "odd_mirror_path (odd_mirror_path ?path) = ?path",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Bird_Tree.even_mirror_simps",
     "tree.root (even_mirror ?t) = tree.root ?t",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Bird_Tree.odd_mirror_simps",
     "tree.root (odd_mirror ?t) = tree.root ?t",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Bird_Tree.even_mirror_pure", "even_mirror (pure ?x) = pure ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Bird_Tree.odd_mirror_pure", "odd_mirror (pure ?x) = pure ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Bird_Tree.even_mirror_simps",
     "tree.left (even_mirror ?t) = odd_mirror (tree.right ?t)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Bird_Tree.odd_mirror_simps",
     "tree.left (odd_mirror ?t) = even_mirror (tree.left ?t)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Bird_Tree.even_mirror_simps",
     "tree.right (even_mirror ?t) = odd_mirror (tree.left ?t)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Bird_Tree.odd_mirror_simps",
     "tree.right (odd_mirror ?t) = even_mirror (tree.right ?t)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Bird_Tree.even_odd_mirror_pure",
     "even_odd_mirror ?even (pure ?x) = pure ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Bird_Tree.even_odd_mirror_path_injective",
     "(even_mirror_path ?path = even_mirror_path ?path') =
      (?path = ?path')",
     template_bimplication
      (template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Bird_Tree.even_odd_mirror_path_injective",
     "(odd_mirror_path ?path = odd_mirror_path ?path') = (?path = ?path')",
     template_bimplication
      (template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Bird_Tree.even_mirror_ap_tree",
     "even_mirror (?f \<diamondop> ?x) =
      even_mirror ?f \<diamondop> even_mirror ?x",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Bird_Tree.odd_mirror_ap_tree",
     "odd_mirror (?f \<diamondop> ?x) =
      odd_mirror ?f \<diamondop> odd_mirror ?x",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Bird_Tree.even_mirror_traverse_tree",
     "tree.root (traverse_tree ?path (even_mirror ?t)) =
      tree.root (traverse_tree (even_mirror_path ?path) ?t)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Bird_Tree.odd_mirror_traverse_tree",
     "tree.root (traverse_tree ?path (odd_mirror ?t)) =
      tree.root (traverse_tree (odd_mirror_path ?path) ?t)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Bird_Tree.even_odd_mirror_ap_tree",
     "even_odd_mirror ?even (?f \<diamondop> ?x) =
      even_odd_mirror ?even ?f \<diamondop> even_odd_mirror ?even ?x",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Bird_Tree.bird_rationals",
     "[| 0 < ?m; 0 < ?n |]
      ==> tree.root
           (traverse_tree (odd_mirror_path (mk_path ?m ?n))
             (pure rat_of \<diamondop> bird)) =
          Fract (int ?m) (int ?n)",
     template_implication
      ([template_inequation (less_than, template_hole 11, template_var 1),
        template_inequation (less_than, template_hole 11, template_var 0)],
       template_equation
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, t_empty))),
               template_hole 0))),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0))))),
    ("Bird_Tree.bird_rationals_not_repeated",
     "tree.root (traverse_tree ?path (pure rat_of \<diamondop> bird)) =
      tree.root (traverse_tree ?path' (pure rat_of \<diamondop> bird)) ==>
      ?path = ?path'",
     template_implication
      ([template_equation
         (template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_hole 5,
                    template_app (template_hole 4, t_empty))),
                template_hole 1))),
          template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_hole 5,
                    template_app (template_hole 4, t_empty))),
                template_hole 1))))],
       template_equation (template_var 1, template_var 0)))]:
   (string * thm * template) list
### theory "Draft.Bird_TreeMoreTemplates"
### 0.516s elapsed time, 0.708s cpu time, 0.056s GC time
val it = (): unit
