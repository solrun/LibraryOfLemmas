Loading theory "Draft.ListExtras" (required by "Draft.ListExtrasMoreTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ListExtrasMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ListExtrasMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ListExtrasMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
consts
  mem :: "'a => 'a list => bool"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.ListExtras"
### 0.129s elapsed time, 0.533s cpu time, 0.046s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ListExtrasMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Function_Algebras"
### 0.149s elapsed time, 0.610s cpu time, 0.046s GC time
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.223s elapsed time, 0.831s cpu time, 0.046s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ListExtrasMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.336s elapsed time, 1.187s cpu time, 0.151s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ListExtrasMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.755s elapsed time, 2.327s cpu time, 0.342s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.789s elapsed time, 2.269s cpu time, 0.237s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.828s elapsed time, 4.153s cpu time, 0.888s GC time
Loading theory "Draft.Templates" (required by "Draft.ListExtrasMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.070s elapsed time, 0.122s cpu time, 0.046s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ListExtrasMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.433s elapsed time, 0.438s cpu time, 0.000s GC time
Loading theory "Draft.ListExtrasMoreTemplates"
val templateLemmas =
   [("ListExtras.mem_set_1", "?a mem ?l ==> ?a : set ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("ListExtras.mem_set_2", "?a : set ?l ==> ?a mem ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("ListExtras.list_length_hint1", "?l ~= [] ==> 0 < length ?l",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_inequation
        (less_than, template_hole 1,
         template_app (template_hole 0, template_var 0)))),
    ("ListExtras.length_nonempty", "?x ~= [] ==> Suc 0 <= length ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_inequation
        (less_equals, template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("ListExtras.list_length_hint3", "length ?l = Suc 0 ==> ?l ~= []",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 0),
          template_app (template_hole 4, template_hole 3))],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("ListExtras.list_length_hint2a", "length ?l = Suc 0 ==> tl ?l = []",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 0),
          template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("ListExtras.list_length_hint2", "length ?x = Suc 0 ==> [hd ?x] = ?x",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 0),
          template_app (template_hole 5, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0),
         template_var 0))),
    ("ListExtras.Add_Less", "0 < ?b ==> (Suc ?a - ?b < Suc ?a) = True",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_var 1)),
           template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("ListExtras.mem_notdisjoint",
     "[| ?x mem ?l1.0; ?x mem ?l2.0 |] ==> ~ disjoint ?l1.0 ?l2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 0)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)
               )
           ))),
    ("ListExtras.list_nth_append0",
     "?i < length ?x ==> ?x ! ?i = (?x @ ?z) ! ?i",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2)))),
    ("ListExtras.last_nth_length",
     "?x ~= [] ==> ?x ! (length ?x - Suc 0) = last ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 7))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 0),
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0)),
             template_app (template_hole 2, template_hole 1))),
         template_app (template_hole 0, template_var 0)))),
    ("ListExtras.set_inter_mem",
     "[| ?x mem ?l1.0; ?x mem ?l2.0 |] ==> set ?l1.0 Int set ?l2.0 ~= {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 0)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_app (template_hole 1, template_var 0)),
             template_hole 0)
           ))),
    ("ListExtras.mem_notdisjoint2",
     "[| disjoint (?schedule ?A) (?schedule ?B); ?x mem ?schedule ?A |]
      ==> ~ ?x mem ?schedule ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_var 3, template_var 2)),
              template_app (template_var 3, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_app (template_var 3, template_var 2))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_var 3, template_var 1))
               )
           ))),
    ("ListExtras.list_length_hint4",
     "[| length ?x <= Suc 0; ?x ~= [] |] ==> length ?x = Suc 0",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 6, template_var 0),
          template_app (template_hole 5, template_hole 4)),
        template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_equation
        (template_app (template_hole 6, template_var 0),
         template_app (template_hole 5, template_hole 4)))),
    ("ListExtras.list_nth_append1",
     "?i < length ?x ==> (?b # ?x) ! ?i = (?b # ?x @ ?y) ! ?i",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_var 3),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0))),
           template_var 3)))),
    ("ListExtras.list_nth_append9",
     "?i - Suc (length ?x) < Suc (length ?y) ==>
      ?i < Suc (Suc (length ?x + length ?y))",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 4, template_var 2),
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 1))),
          template_app
           (template_hole 3,
            template_app (template_hole 1, template_var 0)))],
       template_inequation
        (less_than, template_var 2,
         template_app
          (template_hole 3,
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 2, template_var 1)),
               template_app (template_hole 1, template_var 0))))))),
    ("ListExtras.list_nth_append2",
     "?i < Suc (length ?x) ==> (?b # ?x) ! ?i = (?b # ?x @ ?a # ?y) ! ?i",
     template_implication
      ([template_inequation
         (less_than, template_var 4,
          template_app
           (template_hole 5,
            template_app (template_hole 4, template_var 3)))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 3)),
           template_var 4),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0)))),
           template_var 4)))),
    ("ListExtras.list_nth_append6a",
     "[| ?i < Suc (length ?x + length ?y);
         ~ ?i - length ?x < Suc (length ?y) |]
      ==> False",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_hole 6,
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              template_app (template_hole 3, template_var 0)))),
        template_negation
         (
            template_inequation
             (less_than,
              template_app
               (template_app (template_hole 1, template_var 2),
                template_app (template_hole 4, template_var 1)),
              template_app
               (template_hole 6,
                template_app (template_hole 3, template_var 0)))
            )],
       template_predicate (template_hole 0))),
    ("ListExtras.list_nth_append4",
     "[| ?i < Suc (length ?x + length ?y);
         ~ ?i - Suc (length ?x) < Suc (length ?y) |]
      ==> False",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_hole 6,
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              template_app (template_hole 3, template_var 0)))),
        template_negation
         (
            template_inequation
             (less_than,
              template_app
               (template_app (template_hole 1, template_var 2),
                template_app
                 (template_hole 6,
                  template_app (template_hole 4, template_var 1))),
              template_app
               (template_hole 6,
                template_app (template_hole 3, template_var 0)))
            )],
       template_predicate (template_hole 0))),
    ("ListExtras.list_nth_append10",
     "[| ~ ?i < Suc (length ?x); ~ ?i - Suc (length ?x) < Suc (length ?y) |]
      ==> ~ ?i < Suc (Suc (length ?x + length ?y))",
     template_implication
      ([template_negation
         (
            template_inequation
             (less_than, template_var 2,
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)))
            ),
        template_negation
         (
            template_inequation
             (less_than,
              template_app
               (template_app (template_hole 2, template_var 2),
                template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 1))),
              template_app
               (template_hole 4,
                template_app (template_hole 1, template_var 0)))
            )],
       template_negation
        (
           template_inequation
            (less_than, template_var 2,
             template_app
              (template_hole 4,
               template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 3, template_var 1)),
                   template_app (template_hole 1, template_var 0)))))
           ))),
    ("ListExtras.list_nth_append7",
     "[| ?i - length ?x < Suc (length ?y);
         ?i - Suc (length ?x) < Suc (length ?y) |]
      ==> ?i < Suc (Suc (length ?x + length ?y))",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 4, template_var 2),
            template_app (template_hole 3, template_var 1)),
          template_app
           (template_hole 2,
            template_app (template_hole 1, template_var 0))),
        template_inequation
         (less_than,
          template_app
           (template_app (template_hole 4, template_var 2),
            template_app
             (template_hole 2,
              template_app (template_hole 3, template_var 1))),
          template_app
           (template_hole 2,
            template_app (template_hole 1, template_var 0)))],
       template_inequation
        (less_than, template_var 2,
         template_app
          (template_hole 2,
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 3, template_var 1)),
               template_app (template_hole 1, template_var 0))))))),
    ("ListExtras.list_nth_append8",
     "[| ~ ?i < Suc (length ?x + length ?y);
         ?i < Suc (Suc (length ?x + length ?y)) |]
      ==> ?i = Suc (length ?x + length ?y)",
     template_implication
      ([template_negation
         (
            template_inequation
             (less_than, template_var 2,
              template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_var 1)),
                  template_app (template_hole 1, template_var 0))))
            ),
        template_inequation
         (less_than, template_var 2,
          template_app
           (template_hole 4,
            template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 1)),
                template_app (template_hole 1, template_var 0)))))],
       template_equation
        (template_var 2,
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_app (template_hole 1, template_var 0)))))),
    ("ListExtras.list_nth_append5",
     "[| ?i - length ?x < Suc (length ?y);
         ~ ?i - Suc (length ?x) < Suc (length ?y) |]
      ==> ~ ?i < Suc (length ?x + length ?y)",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 5, template_var 2),
            template_app (template_hole 4, template_var 1)),
          template_app
           (template_hole 3,
            template_app (template_hole 2, template_var 0))),
        template_negation
         (
            template_inequation
             (less_than,
              template_app
               (template_app (template_hole 5, template_var 2),
                template_app
                 (template_hole 3,
                  template_app (template_hole 4, template_var 1))),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)))
            )],
       template_negation
        (
           template_inequation
            (less_than, template_var 2,
             template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 4, template_var 1)),
                 template_app (template_hole 2, template_var 0))))
           ))),
    ("ListExtras.list_nth_append6",
     "[| ~ ?i - length ?x < Suc (length ?y);
         ~ ?i - Suc (length ?x) < Suc (length ?y) |]
      ==> ~ ?i < Suc (length ?x + length ?y)",
     template_implication
      ([template_negation
         (
            template_inequation
             (less_than,
              template_app
               (template_app (template_hole 4, template_var 2),
                template_app (template_hole 3, template_var 1)),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)))
            ),
        template_negation
         (
            template_inequation
             (less_than,
              template_app
               (template_app (template_hole 4, template_var 2),
                template_app
                 (template_hole 2,
                  template_app (template_hole 3, template_var 1))),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)))
            )],
       template_negation
        (
           template_inequation
            (less_than, template_var 2,
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 3, template_var 1)),
                 template_app (template_hole 1, template_var 0))))
           ))),
    ("ListExtras.list_nth_append3",
     "[| ~ ?i < Suc (length ?x); ?i - Suc (length ?x) < Suc (length ?y) |]
      ==> (?a # ?y) ! (?i - Suc (length ?x)) = (?b # ?x @ ?a # ?y) ! ?i",
     template_implication
      ([template_negation
         (
            template_inequation
             (less_than, template_var 4,
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 3)))
            ),
        template_inequation
         (less_than,
          template_app
           (template_app (template_hole 4, template_var 4),
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 3))),
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_var 2)))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 4, template_var 4),
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 3)))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 2)))),
           template_var 4))))]:
   (string * thm * template) list
### theory "Draft.ListExtrasMoreTemplates"
### 0.313s elapsed time, 0.449s cpu time, 0.058s GC time
val it = (): unit
