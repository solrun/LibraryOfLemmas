   [("Field.mod_ring_finite", "finite (carrier (mod_ring ?n))",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))
         )),
    ("Archimedean_Field.frac_lt_1", "frac ?x < (1::?'a)",
     template_inequation
      (less_than, template_app (template_hole 1, template_var 0),
       template_hole 0)),
    ("Archimedean_Field.frac_ge_0", "(0::?'a) <= frac ?x",
     template_inequation
      (less_equals, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("Archimedean_Field.frac_of_int", "frac (of_int ?z) = (0::?'a)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Archimedean_Field.ceiling_of_int", "\<lceil>of_int ?z\<rceil> = ?z",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Archimedean_Field.floor_of_int", "\<lfloor>of_int ?z\<rfloor> = ?z",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Archimedean_Field.round_of_int", "round (of_int ?n) = ?n",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Archimedean_Field.le_of_int_ceiling",
     "?x <= of_int \<lceil>?x\<rceil>",
     template_inequation
      (less_equals, template_var 0,
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Archimedean_Field.of_int_floor_le",
     "of_int \<lfloor>?x\<rfloor> <= ?x",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Archimedean_Field.floor_le_ceiling",
     "\<lfloor>?x\<rfloor> <= \<lceil>?x\<rceil>",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Archimedean_Field.floor_le_round", "\<lfloor>?x\<rfloor> <= round ?x",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Archimedean_Field.ceiling_ge_round", "round ?x <= \<lceil>?x\<rceil>",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Archimedean_Field.ex_less_of_int", "EX z. ?x < of_int z",
     template_predicate (template_app (template_hole 2, t_empty))),
    ("Archimedean_Field.ex_of_int_less", "EX z. of_int z < ?x",
     template_predicate (template_app (template_hole 2, t_empty))),
    ("Archimedean_Field.reals_Archimedean2", "EX n. ?x < of_nat n",
     template_predicate (template_app (template_hole 2, t_empty))),
    ("Archimedean_Field.real_arch_simple", "EX n. ?x <= of_nat n",
     template_predicate (template_app (template_hole 2, t_empty))),
    ("Fields.divide_simps", "inverse ?a = (1::?'a) / ?a",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Archimedean_Field.frac_frac", "frac (frac ?x) = frac ?x",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Archimedean_Field.ceiling_of_nat",
     "\<lceil>of_nat ?n\<rceil> = int ?n",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Archimedean_Field.ceiling_numeral",
     "\<lceil>numeral ?v\<rceil> = numeral ?v",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Archimedean_Field.floor_of_nat",
     "\<lfloor>of_nat ?n\<rfloor> = int ?n",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Archimedean_Field.floor_numeral",
     "\<lfloor>numeral ?v\<rfloor> = numeral ?v",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Archimedean_Field.round_of_nat", "round (of_nat ?n) = int ?n",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Archimedean_Field.round_numeral", "round (numeral ?n) = numeral ?n",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Relation.Field_converse", "Field (?r^-1) = Field ?r",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Archimedean_Field.of_nat_ceiling",
     "?r <= of_nat (nat \<lceil>?r\<rceil>)",
     template_inequation
      (less_equals, template_var 0,
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Order_Relation.AboveS_Field", "AboveS ?r ?A <= Field ?r",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("Order_Relation.under_Field", "under ?r ?a <= Field ?r",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("Order_Relation.underS_Field", "underS ?r ?a <= Field ?r",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("Archimedean_Field.frac_1_eq", "frac (?x + (1::?'a)) = frac ?x",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_app (template_hole 2, template_var 0))),
    ("Archimedean_Field.ceiling_minus",
     "\<lceil>- ?x\<rceil> = - \<lfloor>?x\<rfloor>",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Archimedean_Field.floor_minus",
     "\<lfloor>- ?x\<rfloor> = - \<lceil>?x\<rceil>",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Archimedean_Field.floor_uminus_of_int",
     "\<lfloor>- of_int ?z\<rfloor> = - ?z",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app (template_hole 0, template_var 0))),
    ("Relation.Field_square", "Field (?x \<times> ?x) = ?x",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0), t_empty)),
       template_var 0)),
    ("Archimedean_Field.ceiling_diff_floor_le_1",
     "\<lceil>?x\<rceil> - \<lfloor>?x\<rfloor> <= 1",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Field.mod_ring_is_field",
     "normalization_semidom_class.prime ?p ==> field (mod_ring ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Relation.finite_Field", "finite ?r ==> finite (Field ?r)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Archimedean_Field.ceiling_neg_numeral",
     "\<lceil>- numeral ?v\<rceil> = - numeral ?v",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Archimedean_Field.floor_neg_numeral",
     "\<lfloor>- numeral ?v\<rfloor> = - numeral ?v",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Archimedean_Field.round_neg_numeral",
     "round (- numeral ?n) = - numeral ?n",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Relation.Field_Union", "Field (\<Union> ?R) = \<Union> (Field ` ?R)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_hole 3),
           template_var 0)))),
    ("Archimedean_Field.frac_eq_0_iff",
     "(frac ?x = (0::?'a)) = (?x : \<int>)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Archimedean_Field.one_less_ceiling",
     "(1 < \<lceil>?x\<rceil>) = ((1::?'a) < ?x)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Archimedean_Field.zero_less_ceiling",
     "(0 < \<lceil>?x\<rceil>) = ((0::?'a) < ?x)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Archimedean_Field.zero_less_floor",
     "(0 < \<lfloor>?x\<rfloor>) = ((1::?'a) <= ?x)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Archimedean_Field.ceiling_less_one",
     "(\<lceil>?x\<rceil> < 1) = (?x <= (0::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Archimedean_Field.floor_less_one",
     "(\<lfloor>?x\<rfloor> < 1) = (?x < (1::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Archimedean_Field.floor_less_zero",
     "(\<lfloor>?x\<rfloor> < 0) = (?x < (0::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Archimedean_Field.one_le_ceiling",
     "(1 <= \<lceil>?x\<rceil>) = ((0::?'a) < ?x)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Archimedean_Field.one_le_floor",
     "(1 <= \<lfloor>?x\<rfloor>) = ((1::?'a) <= ?x)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Archimedean_Field.zero_le_floor",
     "(0 <= \<lfloor>?x\<rfloor>) = ((0::?'a) <= ?x)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Archimedean_Field.ceiling_le_one",
     "(\<lceil>?x\<rceil> <= 1) = (?x <= (1::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Archimedean_Field.ceiling_le_zero",
     "(\<lceil>?x\<rceil> <= 0) = (?x <= (0::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Archimedean_Field.floor_le_zero",
     "(\<lfloor>?x\<rfloor> <= 0) = (?x < (1::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Archimedean_Field.frac_in_Ints_iff",
     "(frac ?x : \<int>) = (?x : \<int>)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_app
        (template_app (template_hole 2, template_var 0), template_hole 0))),
    ("Field.zfact_prime_is_field",
     "normalization_semidom_class.prime ?p ==> field (ZFact (int ?p))",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Field.mod_ring_is_cring", "1 < ?n ==> cring (mod_ring ?n)",
     template_implication
      ([template_inequation (less_than, template_hole 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Fields.divide_simps", "inverse ?x powi ?n = inverse (?x powi ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Fields.divide_simps", "inverse ?a ^ ?n = inverse (?a ^ ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Archimedean_Field.ceiling_diff_one",
     "\<lceil>?x - (1::?'a)\<rceil> = \<lceil>?x\<rceil> - 1",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 4, template_var 0)),
         template_hole 0))),
    ("Archimedean_Field.ceiling_add_one",
     "\<lceil>?x + (1::?'a)\<rceil> = \<lceil>?x\<rceil> + 1",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 4, template_var 0)),
         template_hole 0))),
    ("Archimedean_Field.floor_diff_one",
     "\<lfloor>?x - (1::?'a)\<rfloor> = \<lfloor>?x\<rfloor> - 1",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 4, template_var 0)),
         template_hole 0))),
    ("Archimedean_Field.one_add_floor",
     "\<lfloor>?x\<rfloor> + 1 = \<lfloor>?x + (1::?'a)\<rfloor>",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Archimedean_Field.frac_gt_0_iff",
     "((0::?'a) < frac ?x) = (?x ~: \<int>)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Archimedean_Field.less_ceiling_iff",
     "(?z < \<lceil>?x\<rceil>) = (of_int ?z < ?x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Archimedean_Field.ceiling_less_zero",
     "(\<lceil>?x\<rceil> < 0) = (?x <= - (1::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_hole 3),
       template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)))),
    ("Archimedean_Field.floor_less_iff",
     "(\<lfloor>?x\<rfloor> < ?z) = (?x < of_int ?z)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Archimedean_Field.zero_le_ceiling",
     "(0 <= \<lceil>?x\<rceil>) = (- (1::?'a) < ?x)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0)),
         template_var 0))),
    ("Archimedean_Field.le_floor_iff",
     "(?z <= \<lfloor>?x\<rfloor>) = (of_int ?z <= ?x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Archimedean_Field.ceiling_le_iff",
     "(\<lceil>?x\<rceil> <= ?z) = (?x <= of_int ?z)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Field.mod_ring_carr", "(?x : carrier (mod_ring ?n)) = (?x < ?n)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Transitive_Closure.trancl_subset_Field2",
     "?r^+ <= Field ?r \<times> Field ?r",
     template_inequation
      (less_equals, template_app (template_hole 2, template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("Order_Relation.well_order_on_Field",
     "well_order_on ?A ?r ==> ?A = Field ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Archimedean_Field.int_add_floor",
     "?z + \<lfloor>?x\<rfloor> = \<lfloor>of_int ?z + ?x\<rfloor>",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Archimedean_Field.floor_add_int",
     "\<lfloor>?x\<rfloor> + ?z = \<lfloor>?x + of_int ?z\<rfloor>",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Archimedean_Field.ceiling_diff_of_int",
     "\<lceil>?x - of_int ?z\<rceil> = \<lceil>?x\<rceil> - ?z",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 3, template_var 1)),
         template_var 0))),
    ("Archimedean_Field.ceiling_add_of_int",
     "\<lceil>?x + of_int ?z\<rceil> = \<lceil>?x\<rceil> + ?z",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 3, template_var 1)),
         template_var 0))),
    ("Archimedean_Field.floor_diff_of_int",
     "\<lfloor>?x - of_int ?z\<rfloor> = \<lfloor>?x\<rfloor> - ?z",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 3, template_var 1)),
         template_var 0))),
    ("Archimedean_Field.floor_divide_of_int_eq",
     "\<lfloor>of_int ?k / of_int ?l\<rfloor> = ?k div ?l",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Relation.Field_Un", "Field (?r Un ?s) = Field ?r Un Field ?s",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Archimedean_Field.one_less_floor",
     "(1 < \<lfloor>?x\<rfloor>) = ((2::?'a) <= ?x)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_hole 5),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0))),
         template_var 0))),
    ("Archimedean_Field.floor_le_one",
     "(\<lfloor>?x\<rfloor> <= 1) = (?x < (2::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 0)),
         template_hole 4),
       template_app
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Archimedean_Field.floor_less_numeral",
     "(\<lfloor>?x\<rfloor> < numeral ?v) = (?x < numeral ?v)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Archimedean_Field.numeral_less_ceiling",
     "(numeral ?v < \<lceil>?x\<rceil>) = (numeral ?v < ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Archimedean_Field.ceiling_le_numeral",
     "(\<lceil>?x\<rceil> <= numeral ?v) = (?x <= numeral ?v)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Archimedean_Field.numeral_le_floor",
     "(numeral ?v <= \<lfloor>?x\<rfloor>) = (numeral ?v <= ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Archimedean_Field.ceiling_add_le",
     "\<lceil>?x + ?y\<rceil> <= \<lceil>?x\<rceil> + \<lceil>?y\<rceil>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Archimedean_Field.le_floor_add",
     "\<lfloor>?x\<rfloor> + \<lfloor>?y\<rfloor>
      <= \<lfloor>?x + ?y\<rfloor>",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Field.zfact_finite", "0 < ?n ==> finite (carrier (ZFact (int ?n)))",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 0)],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("Field.zfact_iso_inj", "0 < ?n ==> inj_on (zfact_iso ?n) {..<?n}",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Archimedean_Field.floor_mono",
     "?x <= ?y ==> \<lfloor>?x\<rfloor> <= \<lfloor>?y\<rfloor>",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Archimedean_Field.round_mono", "?x <= ?y ==> round ?x <= round ?y",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Archimedean_Field.ceiling_mono",
     "?y <= ?x ==> \<lceil>?y\<rceil> <= \<lceil>?x\<rceil>",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Relation.mono_Field", "?r <= ?s ==> Field ?r <= Field ?s",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Archimedean_Field.ceiling_less_cancel",
     "\<lceil>?x\<rceil> < \<lceil>?y\<rceil> ==> ?x < ?y",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_inequation (less_than, template_var 1, template_var 0))),
    ("Archimedean_Field.floor_less_cancel",
     "\<lfloor>?x\<rfloor> < \<lfloor>?y\<rfloor> ==> ?x < ?y",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_inequation (less_than, template_var 1, template_var 0))),
    ("Archimedean_Field.finite_abs_int_segment",
     "finite {k: \<int>. \<bar>k\<bar> <= ?a}",
     template_predicate
      (
         template_app
          (template_hole 6, template_app (template_hole 5, t_empty))
         )),
    ("Fields.divide_simps",
     "((1::?'a) / ?x) powi ?n = (1::?'a) / ?x powi ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_hole 0),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Fields.divide_simps", "((1::?'a) / ?a) ^ ?n = (1::?'a) / ?a ^ ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_hole 0),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Archimedean_Field.ceiling_diff_numeral",
     "\<lceil>?x - numeral ?v\<rceil> = \<lceil>?x\<rceil> - numeral ?v",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 4, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Archimedean_Field.ceiling_add_numeral",
     "\<lceil>?x + numeral ?v\<rceil> = \<lceil>?x\<rceil> + numeral ?v",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 4, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Archimedean_Field.floor_diff_numeral",
     "\<lfloor>?x - numeral ?v\<rfloor> =
      \<lfloor>?x\<rfloor> - numeral ?v",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 4, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Archimedean_Field.floor_divide_of_nat_eq",
     "\<lfloor>of_nat ?m / of_nat ?n\<rfloor> = int (?m div ?n)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Archimedean_Field.less_floor_iff",
     "(?z < \<lfloor>?x\<rfloor>) = (of_int ?z + (1::?'a) <= ?x)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_hole 0)),
         template_var 0))),
    ("Archimedean_Field.ceiling_less_iff",
     "(\<lceil>?x\<rceil> < ?z) = (?x <= of_int ?z - (1::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)))),
    ("Archimedean_Field.le_ceiling_iff",
     "(?z <= \<lceil>?x\<rceil>) = (of_int ?z - (1::?'a) < ?x)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_hole 0)),
         template_var 0))),
    ("Archimedean_Field.floor_le_iff",
     "(\<lfloor>?x\<rfloor> <= ?z) = (?x < of_int ?z + (1::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)))),
    ("Archimedean_Field.of_int_round_gt",
     "?x - (1::?'a) / (2::?'a) < of_int (round ?x)",
     template_inequation
      (less_than,
       template_app
        (template_app (template_hole 7, template_var 0),
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2)))),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Archimedean_Field.of_int_round_le",
     "of_int (round ?x) <= ?x + (1::?'a) / (2::?'a)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 7, template_app (template_hole 6, template_var 0)),
       template_app
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Archimedean_Field.of_int_round_ge",
     "?x - (1::?'a) / (2::?'a) <= of_int (round ?x)",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 7, template_var 0),
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2)))),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Archimedean_Field.of_nat_floor",
     "(0::?'a) <= ?r ==> of_nat (nat \<lfloor>?r\<rfloor>) <= ?r",
     template_implication
      ([template_inequation (less_equals, template_hole 3, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))),
         template_var 0))),
    ("Relation.FieldI1", "(?i, ?j) : ?R ==> ?i : Field ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Relation.FieldI2", "(?i, ?j) : ?R ==> ?j : Field ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Field.finite_domains_are_fields",
     "[| domain ?R; finite (carrier ?R) |] ==> field ?R",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Archimedean_Field.frac_eq",
     "(frac ?x = ?x) = ((0::?'a) <= ?x & ?x < (1::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 0)),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Archimedean_Field.ceiling_less_numeral",
     "(\<lceil>?x\<rceil> < numeral ?v) = (?x <= numeral ?v - (1::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)))),
    ("Archimedean_Field.numeral_less_floor",
     "(numeral ?v < \<lfloor>?x\<rfloor>) = (numeral ?v + (1::?'a) <= ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_hole 0)),
         template_var 0))),
    ("Archimedean_Field.floor_le_numeral",
     "(\<lfloor>?x\<rfloor> <= numeral ?v) = (?x < numeral ?v + (1::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)))),
    ("Archimedean_Field.numeral_le_ceiling",
     "(numeral ?v <= \<lceil>?x\<rceil>) = (numeral ?v - (1::?'a) < ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_hole 0)),
         template_var 0))),
    ("Archimedean_Field.floor_less_neg_numeral",
     "(\<lfloor>?x\<rfloor> < - numeral ?v) = (?x < - numeral ?v)",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_var 0))),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Archimedean_Field.neg_numeral_less_ceiling",
     "(- numeral ?v < \<lceil>?x\<rceil>) = (- numeral ?v < ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1))),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))),
         template_var 0))),
    ("Archimedean_Field.ceiling_le_neg_numeral",
     "(\<lceil>?x\<rceil> <= - numeral ?v) = (?x <= - numeral ?v)",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_var 0))),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Archimedean_Field.neg_numeral_le_floor",
     "(- numeral ?v <= \<lfloor>?x\<rfloor>) = (- numeral ?v <= ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1))),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))),
         template_var 0))),
    ("Archimedean_Field.round_diff_minimal",
     "\<bar>?z - of_int (round ?z)\<bar> <= \<bar>?z - of_int ?m\<bar>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)))),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 0))))),
    ("Archimedean_Field.of_int_round_abs_le",
     "\<bar>of_int (round ?x) - ?x\<bar> <= (1::?'a) / (2::?'a)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 8,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 0))),
           template_var 0)),
       template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Field.zfact_card", "0 < ?n ==> card (carrier (ZFact (int ?n))) = ?n",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 0)],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))),
         template_var 0))),
    ("Order_Relation.underS_Field2",
     "?a : Field ?r ==> underS ?r ?a < Field ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Archimedean_Field.floor_exists",
     "EX z. of_int z <= ?x & ?x < of_int (z + 1)",
     template_predicate (template_app (template_hole 6, t_empty))),
    ("Archimedean_Field.floor_exists1",
     "EX! z. of_int z <= ?x & ?x < of_int (z + 1)",
     template_predicate (template_app (template_hole 6, t_empty))),
    ("Archimedean_Field.ceiling_correct",
     "of_int \<lceil>?x\<rceil> - (1::?'a) < ?x &
      ?x <= of_int \<lceil>?x\<rceil>",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0))),
                   template_hole 1)),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0))))
         )),
    ("Fields.divide_simps", "(?a / ?b) ^ ?n = ?a ^ ?n / ?b ^ ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Fields.divide_simps", "(?a * ?b) ^ ?n = ?a ^ ?n * ?b ^ ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Archimedean_Field.frac_neg",
     "frac (- ?x) = (if ?x : \<int> then 0::?'a else (1::?'a) - frac ?x)",
     template_equation
      (template_app
        (template_hole 7, template_app (template_hole 6, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_hole 3)),
           template_hole 2),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_app (template_hole 7, template_var 0))))),
    ("Archimedean_Field.ex_less_of_nat_mult",
     "(0::?'a) < ?x ==> EX n. ?y < of_nat n * ?x",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1)],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Archimedean_Field.reals_Archimedean",
     "(0::?'a) < ?x ==> EX n. inverse (of_nat (Suc n)) < ?x",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 0)],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Field.zfact_iso_inv_0",
     "0 < ?n ==>
      zfact_iso_inv ?n \<zero>\<^bsub>ZFact (int ?n)\<^esub> = 0",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))),
         template_hole 5))),
    ("Field.zfact_iso_0",
     "0 < ?n ==> zfact_iso ?n 0 = \<zero>\<^bsub>ZFact (int ?n)\<^esub>",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0), template_hole 5),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("Order_Relation.underS_Field3",
     "Field ?r ~= {} ==> underS ?r ?a < Field ?r",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 3, template_var 1),
              template_hole 2)
            )],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_app (template_hole 3, template_var 1)))),
    ("Order_Relation.Field_relation_of",
     "refl_on ?A (relation_of ?P ?A) ==> Field (relation_of ?P ?A) = ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1)),
         template_var 1))),
    ("Archimedean_Field.finite_int_segment",
     "finite {x: \<int>. ?a <= x & x <= ?b}",
     template_predicate
      (
         template_app
          (template_hole 5, template_app (template_hole 4, t_empty))
         )),
    ("Archimedean_Field.ceiling_less_neg_numeral",
     "(\<lceil>?x\<rceil> < - numeral ?v) =
      (?x <= - numeral ?v - (1::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 1)),
         template_app
          (template_hole 6,
           template_app (template_hole 5, template_var 0))),
       template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0))),
           template_hole 0)))),
    ("Archimedean_Field.neg_numeral_less_floor",
     "(- numeral ?v < \<lfloor>?x\<rfloor>) =
      (- numeral ?v + (1::?'a) <= ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 1))),
         template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1))),
             template_hole 0)),
         template_var 0))),
    ("Archimedean_Field.floor_le_neg_numeral",
     "(\<lfloor>?x\<rfloor> <= - numeral ?v) =
      (?x < - numeral ?v + (1::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 1)),
         template_app
          (template_hole 6,
           template_app (template_hole 5, template_var 0))),
       template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0))),
           template_hole 0)))),
    ("Archimedean_Field.neg_numeral_le_ceiling",
     "(- numeral ?v <= \<lceil>?x\<rceil>) =
      (- numeral ?v - (1::?'a) < ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 1))),
         template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1))),
             template_hole 0)),
         template_var 0))),
    ("Archimedean_Field.ceiling_divide_upper",
     "(0::?'a) < ?q ==> ?p <= of_int \<lceil>?p / ?q\<rceil> * ?q",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 1)],
       template_inequation
        (less_equals, template_var 0,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1)))),
           template_var 1)))),
    ("Archimedean_Field.floor_divide_lower",
     "(0::?'a) < ?q ==> of_int \<lfloor>?p / ?q\<rfloor> * ?q <= ?p",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1)))),
           template_var 1),
         template_var 0))),
    ("Field.zfact_iso_is_ring_iso",
     "1 < ?n ==> zfact_iso ?n : ring_iso (mod_ring ?n) (ZFact (int ?n))",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0)),
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0)),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("Field.zfact_iso_inv_is_ring_iso",
     "1 < ?n ==>
      zfact_iso_inv ?n : ring_iso (ZFact (int ?n)) (mod_ring ?n)",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0))),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Field.zfact_iso_bij",
     "0 < ?n ==>
      bij_betw (zfact_iso ?n) {..<?n} (carrier (ZFact (int ?n)))",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 0)),
               template_app (template_hole 3, template_var 0)),
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("Archimedean_Field.ceiling_altdef",
     "\<lceil>?x\<rceil> =
      (if ?x = of_int \<lfloor>?x\<rfloor> then \<lfloor>?x\<rfloor>
       else \<lfloor>?x\<rfloor> + 1)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)))),
               template_app (template_hole 2, template_var 0)),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 2, template_var 0)),
               template_hole 0))
           ))),
    ("Relation.Field_insert",
     "Field (insert (?a, ?b) ?r) = {?a, ?b} Un Field ?r",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))),
         template_app (template_hole 5, template_var 0)))),
    ("Field.zfact_iso_ran",
     "0 < ?n ==> zfact_iso ?n ` {..<?n} = carrier (ZFact (int ?n))",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0)),
           template_app (template_hole 3, template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("Archimedean_Field.round_altdef",
     "round ?x =
      (if (1::?'a) / (2::?'a) <= frac ?x then \<lceil>?x\<rceil>
       else \<lfloor>?x\<rfloor>)",
     template_equation
      (template_app (template_hole 10, template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_hole 3)))),
               template_app (template_hole 2, template_var 0))),
           template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Archimedean_Field.ceiling_eq_iff",
     "(\<lceil>?x\<rceil> = ?a) =
      (of_int ?a - (1::?'a) < ?x & ?x <= of_int ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_hole 1)),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_hole 2, template_var 0))))),
    ("Archimedean_Field.floor_eq_iff",
     "(\<lfloor>?x\<rfloor> = ?a) =
      (of_int ?a <= ?x & ?x < of_int ?a + (1::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0)),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 3, template_var 0)),
             template_hole 0))))),
    ("Archimedean_Field.floor_divide_upper",
     "(0::?'a) < ?q ==>
      ?p < (of_int \<lfloor>?p / ?q\<rfloor> + (1::?'a)) * ?q",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 1)],
       template_inequation
        (less_than, template_var 0,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_var 1)))),
               template_hole 0)),
           template_var 1)))),
    ("Archimedean_Field.ceiling_divide_lower",
     "(0::?'a) < ?q ==>
      (of_int \<lceil>?p / ?q\<rceil> - (1::?'a)) * ?q < ?p",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 1)],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_var 1)))),
               template_hole 0)),
           template_var 1),
         template_var 0))),
    ("Archimedean_Field.ex_inverse_of_nat_less",
     "(0::?'a) < ?x ==> EX n>0. inverse (of_nat n) < ?x",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 0)],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Archimedean_Field.round_unique'",
     "\<bar>?x - of_int ?n\<bar> < (1::?'a) / (2::?'a) ==> round ?x = ?n",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 9,
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app (template_hole 7, template_var 0))),
          template_app
           (template_app (template_hole 6, template_hole 5),
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_hole 2))))],
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Fields.divide_simps",
     "?a - ?b / ?z = (if ?z = (0::?'a) then ?a else (?a * ?z - ?b) / ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_hole 1)),
               template_var 2),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 0)),
                   template_var 1)),
               template_var 0))
           ))),
    ("Fields.divide_simps",
     "?a + ?b / ?z = (if ?z = (0::?'a) then ?a else (?a * ?z + ?b) / ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_hole 1)),
               template_var 2),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 0)),
                   template_var 1)),
               template_var 0))
           ))),
    ("Fields.divide_simps",
     "?a / ?z + ?b = (if ?z = (0::?'a) then ?b else (?a + ?b * ?z) / ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_hole 1)),
               template_var 0),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 1))),
               template_var 1))
           ))),
    ("Archimedean_Field.frac_unique_iff",
     "(frac ?x = ?a) = (?x - ?a : \<int> & (0::?'a) <= ?a & ?a < (1::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 9, template_app (template_hole 8, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 0)),
             template_hole 4)),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("Archimedean_Field.floor_unique",
     "[| of_int ?z <= ?x; ?x < of_int ?z + (1::?'a) |]
      ==> \<lfloor>?x\<rfloor> = ?z",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 5, template_var 1),
          template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 5, template_var 1)),
            template_hole 2))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Archimedean_Field.ceiling_unique",
     "[| of_int ?z - (1::?'a) < ?x; ?x <= of_int ?z |]
      ==> \<lceil>?x\<rceil> = ?z",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 1)),
            template_hole 3),
          template_var 0),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Fields.divide_simps",
     "?a / ?z - ?b = (if ?z = (0::?'a) then - ?b else (?a - ?b * ?z) / ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_hole 2)),
               template_app (template_hole 1, template_var 0)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 1))),
               template_var 1))
           ))),
    ("Fields.divide_simps",
     "(?a = ?b / ?c) =
      (if ?c ~= (0::?'a) then ?a * ?c = ?b else ?a = (0::?'a))",
     template_bimplication
      (template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_hole 1))),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0)),
                 template_var 1)),
             template_app
              (template_app (template_hole 5, template_var 2),
               template_hole 1))
           ))),
    ("Fields.divide_simps",
     "(?b / ?c = ?a) =
      (if ?c ~= (0::?'a) then ?b = ?a * ?c else ?a = (0::?'a))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_var 0),
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_hole 1))),
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1))),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_hole 1))
           ))),
    ("Archimedean_Field.floor_add2",
     "?x : \<int> | ?y : \<int> ==>
      \<lfloor>?x + ?y\<rfloor> =
      \<lfloor>?x\<rfloor> + \<lfloor>?y\<rfloor>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_hole 4)),
              template_app
               (template_app (template_hole 5, template_var 0),
                template_hole 4))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("Order_Relation.Total_Id_Field",
     "[| Total ?r; ~ ?r <= Id |] ==> Field ?r = Field (?r - Id)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 0)),
              template_var 0)
            ),
        template_negation
         (
            template_inequation
             (less_equals, template_var 0, template_hole 2)
            )],
       template_equation
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_hole 2))))),
    ("Fields.divide_simps",
     "- (?a / ?z) + ?b =
      (if ?z = (0::?'a) then ?b else (- ?a + ?b * ?z) / ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 1))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_hole 1)),
               template_var 0),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 2)),
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 1))),
               template_var 1))
           ))),
    ("Archimedean_Field.ceiling_split",
     "?P \<lceil>?t\<rceil> =
      (ALL i. of_int i - (1::?'a) < ?t & ?t <= of_int i --> ?P i)",
     template_equation
      (template_app
        (template_var 1, template_app (template_hole 8, template_var 0)),
       template_app (template_hole 7, t_empty))),
    ("Archimedean_Field.floor_split",
     "?P \<lfloor>?t\<rfloor> =
      (ALL i. of_int i <= ?t & ?t < of_int i + (1::?'a) --> ?P i)",
     template_equation
      (template_app
        (template_var 1, template_app (template_hole 8, template_var 0)),
       template_app (template_hole 7, t_empty))),
    ("Archimedean_Field.exists_least_lemma",
     "[| ~ ?P 0; EX n. ?P n |] ==> EX n. ~ ?P n & ?P (Suc n)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_var 0, template_hole 3))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Archimedean_Field.nat_approx_posE",
     "[| (0::?'a) < ?e; !!n. (1::?'a) / of_nat (Suc n) < ?e ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 1),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Archimedean_Field.mult_ceiling_le",
     "[| (0::?'a) <= ?a; (0::?'a) <= ?b |]
      ==> \<lceil>?a * ?b\<rceil>
          <= \<lceil>?a\<rceil> * \<lceil>?b\<rceil>",
     template_implication
      ([template_inequation (less_equals, template_hole 4, template_var 1),
        template_inequation (less_equals, template_hole 4, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("Archimedean_Field.le_mult_floor",
     "[| (0::?'a) <= ?a; (0::?'a) <= ?b |]
      ==> \<lfloor>?a\<rfloor> * \<lfloor>?b\<rfloor>
          <= \<lfloor>?a * ?b\<rfloor>",
     template_implication
      ([template_inequation (less_equals, template_hole 4, template_var 1),
        template_inequation (less_equals, template_hole 4, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Fields.divide_simps",
     "- (?a / ?z) - ?b =
      (if ?z = (0::?'a) then - ?b else (- ?a - ?b * ?z) / ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 1))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_hole 1)),
               template_app (template_hole 4, template_var 0)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 2)),
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 1))),
               template_var 1))
           ))),
    ("Fields.divide_simps",
     "(?a = - (?b / ?c)) =
      (if ?c ~= (0::?'a) then ?a * ?c = - ?b else ?a = (0::?'a))",
     template_bimplication
      (template_equation
        (template_var 2,
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0))),
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_hole 1))),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0)),
                 template_app (template_hole 5, template_var 1))),
             template_app
              (template_app (template_hole 6, template_var 2),
               template_hole 1))
           ))),
    ("Fields.divide_simps",
     "(- (?b / ?c) = ?a) =
      (if ?c ~= (0::?'a) then - ?b = ?a * ?c else ?a = (0::?'a))",
     template_bimplication
      (template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_var 0),
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 6, template_var 1),
                     template_hole 1))),
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 2)),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1))),
             template_app
              (template_app (template_hole 6, template_var 0),
               template_hole 1))
           ))),
    ("Archimedean_Field.mult_ceiling_le_Ints",
     "[| (0::?'b) <= ?a; ?a : \<int> |]
      ==> of_int \<lceil>?a * ?b\<rceil>
          <= of_int (\<lceil>?a\<rceil> * \<lceil>?b\<rceil>)",
     template_implication
      ([template_inequation (less_equals, template_hole 7, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_hole 5)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 1)),
             template_app (template_hole 2, template_var 0)))))),
    ("Archimedean_Field.le_mult_floor_Ints",
     "[| (0::?'b) <= ?a; ?a : \<int> |]
      ==> of_int (\<lfloor>?a\<rfloor> * \<lfloor>?b\<rfloor>)
          <= of_int \<lfloor>?a * ?b\<rfloor>",
     template_implication
      ([template_inequation (less_equals, template_hole 7, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_hole 5)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_hole 3,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("Fields.max_mult_distrib_left",
     "?p * max ?x ?y =
      (if (0::?'a) <= ?p then max (?p * ?x) (?p * ?y)
       else min (?p * ?x) (?p * ?y))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 2)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 0))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 0))))),
    ("Fields.min_mult_distrib_left",
     "?p * min ?x ?y =
      (if (0::?'a) <= ?p then min (?p * ?x) (?p * ?y)
       else max (?p * ?x) (?p * ?y))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 2)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 0))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 0))))),
    ("Fields.max_mult_distrib_right",
     "max ?x ?y * ?p =
      (if (0::?'a) <= ?p then max (?x * ?p) (?y * ?p)
       else min (?x * ?p) (?y * ?p))",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 0)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0))))),
    ("Fields.min_mult_distrib_right",
     "min ?x ?y * ?p =
      (if (0::?'a) <= ?p then min (?x * ?p) (?y * ?p)
       else max (?x * ?p) (?y * ?p))",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 0)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0))))),
    ("Fields.max_divide_distrib_right",
     "max ?x ?y / ?p =
      (if (0::?'a) <= ?p then max (?x / ?p) (?y / ?p)
       else min (?x / ?p) (?y / ?p))",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 0)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0))))),
    ("Fields.min_divide_distrib_right",
     "min ?x ?y / ?p =
      (if (0::?'a) <= ?p then min (?x / ?p) (?y / ?p)
       else max (?x / ?p) (?y / ?p))",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 0)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0))))),
    ("Archimedean_Field.cInf_asclose",
     "[| ?S ~= {}; ALL x:?S. \<bar>x - ?l\<bar> <= ?e |]
      ==> \<bar>Inf ?S - ?l\<bar> <= ?e",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 5)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2), t_empty)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 1)),
         template_var 0))),
    ("Archimedean_Field.cSup_asclose",
     "[| ?S ~= {}; ALL x:?S. \<bar>x - ?l\<bar> <= ?e |]
      ==> \<bar>Sup ?S - ?l\<bar> <= ?e",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 5)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2), t_empty)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 1)),
         template_var 0))),
    ("Archimedean_Field.cInf_abs_ge",
     "[| ?S ~= {}; !!x. x : ?S ==> \<bar>x\<bar> <= ?a |]
      ==> \<bar>Inf ?S\<bar> <= ?a",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Archimedean_Field.frac_add",
     "frac (?x + ?y) =
      (if frac ?x + frac ?y < (1::?'a) then frac ?x + frac ?y
       else frac ?x + frac ?y - (1::?'a))",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 5, template_var 1)),
                   template_app (template_hole 5, template_var 0))),
               template_hole 1)),
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 5, template_var 1)),
             template_app (template_hole 5, template_var 0))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 5, template_var 1)),
               template_app (template_hole 5, template_var 0))),
           template_hole 1)))),
    ("Archimedean_Field.floor_add",
     "\<lfloor>?x + ?y\<rfloor> =
      (if frac ?x + frac ?y < (1::?'a)
       then \<lfloor>?x\<rfloor> + \<lfloor>?y\<rfloor>
       else \<lfloor>?x\<rfloor> + \<lfloor>?y\<rfloor> + 1)",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app (template_hole 3, template_var 1)),
                   template_app (template_hole 3, template_var 0))),
               template_hole 2)),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 7, template_var 1)),
             template_app (template_hole 7, template_var 0))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 7, template_var 1)),
               template_app (template_hole 7, template_var 0))),
           template_hole 0)))),
    ("Fields.divide_simps",
     "(?a < ?b / ?c) =
      (if (0::?'a) < ?c then ?a * ?c < ?b
       else if ?c < (0::?'a) then ?b < ?a * ?c else ?a < (0::?'a))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 4, template_hole 1),
               template_var 0)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_hole 1)),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0))),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_hole 1))))),
    ("Fields.divide_simps",
     "(?b / ?c < ?a) =
      (if (0::?'a) < ?c then ?b < ?a * ?c
       else if ?c < (0::?'a) then ?a * ?c < ?b else (0::?'a) < ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 4, template_hole 1),
               template_var 1)),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_hole 1)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1)),
               template_var 2)),
           template_app
            (template_app (template_hole 4, template_hole 1),
             template_var 0))))),
    ("Fields.divide_simps",
     "(?a <= ?b / ?c) =
      (if (0::?'a) < ?c then ?a * ?c <= ?b
       else if ?c < (0::?'a) then ?b <= ?a * ?c else ?a <= (0::?'a))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 0)),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0))),
           template_app
            (template_app (template_hole 5, template_var 2),
             template_hole 1))))),
    ("Fields.divide_simps",
     "(?b / ?c <= ?a) =
      (if (0::?'a) < ?c then ?b <= ?a * ?c
       else if ?c < (0::?'a) then ?a * ?c <= ?b else (0::?'a) <= ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1)),
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1)),
               template_var 2)),
           template_app
            (template_app (template_hole 5, template_hole 1),
             template_var 0))))),
    ("Archimedean_Field.round_unique",
     "[| ?x - (1::?'a) / (2::?'a) < of_int ?y;
         of_int ?y <= ?x + (1::?'a) / (2::?'a) |]
      ==> round ?x = ?y",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 10, template_var 1),
            template_app
             (template_app (template_hole 9, template_hole 8),
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5)))),
          template_app (template_hole 4, template_var 0)),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 0),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_app
             (template_app (template_hole 9, template_hole 8),
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5)))))],
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Field.ideal_I",
     "0 < ?n ==> ideal (Idl\<^bsub>\<Z>\<^esub> {int ?n}) \<Z>",
     template_implication
      ([template_inequation (less_than, template_hole 14, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app (template_hole 11, template_hole 10),
                     template_app
                      (template_app
                        (template_app (template_hole 9, template_hole 8),
                         template_hole 7),
                       template_app
                        (template_app
                          (template_app (template_hole 6, template_hole 5),
                           template_hole 4),
                         template_hole 3)))),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 0)),
                   template_hole 0))),
             template_app
              (template_app (template_hole 11, template_hole 10),
               template_app
                (template_app
                  (template_app (template_hole 9, template_hole 8),
                   template_hole 7),
                 template_app
                  (template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_hole 4),
                   template_hole 3))))
           ))),
    ("Fields.divide_simps",
     "(?a < - (?b / ?c)) =
      (if (0::?'a) < ?c then ?a * ?c < - ?b
       else if ?c < (0::?'a) then - ?b < ?a * ?c else ?a < (0::?'a))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 5, template_hole 1),
               template_var 0)),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app (template_hole 4, template_var 1))),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_hole 1)),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0))),
           template_app
            (template_app (template_hole 5, template_var 2),
             template_hole 1))))),
    ("Fields.divide_simps",
     "(- (?b / ?c) < ?a) =
      (if (0::?'a) < ?c then - ?b < ?a * ?c
       else if ?c < (0::?'a) then ?a * ?c < - ?b else (0::?'a) < ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 5, template_hole 1),
               template_var 1)),
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_hole 1)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1)),
               template_app (template_hole 4, template_var 2))),
           template_app
            (template_app (template_hole 5, template_hole 1),
             template_var 0))))),
    ("Fields.divide_simps",
     "(?a <= - (?b / ?c)) =
      (if (0::?'a) < ?c then ?a * ?c <= - ?b
       else if ?c < (0::?'a) then - ?b <= ?a * ?c else ?a <= (0::?'a))",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 2),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 0)),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app (template_hole 5, template_var 1))),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 5, template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0))),
           template_app
            (template_app (template_hole 6, template_var 2),
             template_hole 1))))),
    ("Fields.divide_simps",
     "(- (?b / ?c) <= ?a) =
      (if (0::?'a) < ?c then - ?b <= ?a * ?c
       else if ?c < (0::?'a) then ?a * ?c <= - ?b else (0::?'a) <= ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1)),
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1)),
               template_app (template_hole 5, template_var 2))),
           template_app
            (template_app (template_hole 6, template_hole 1),
             template_var 0))))),
    ("Field.zfact_coset",
     "[| 0 < ?n; ?x : carrier (ZFact (int ?n)) |]
      ==> ?x =
          Idl\<^bsub>\<Z>\<^esub> {int ?n} +>\<^bsub>\<Z>\<^esub>
          int (zfact_iso_inv ?n ?x)",
     template_implication
      ([template_inequation (less_than, template_hole 19, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 0),
              template_app
               (template_hole 17,
                template_app
                 (template_hole 16,
                  template_app (template_hole 15, template_var 1))))
            )],
       template_equation
        (template_var 0,
         template_app
          (template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app (template_hole 12, template_hole 11),
                 template_app
                  (template_app
                    (template_app (template_hole 10, template_hole 9),
                     template_hole 8),
                   template_app
                    (template_app
                      (template_app (template_hole 7, template_hole 6),
                       template_hole 5),
                     template_hole 4)))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 12, template_hole 11),
                   template_app
                    (template_app
                      (template_app (template_hole 10, template_hole 9),
                       template_hole 8),
                     template_app
                      (template_app
                        (template_app (template_hole 7, template_hole 6),
                         template_hole 5),
                       template_hole 4)))),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 15, template_var 1)),
                 template_hole 1))),
           template_app
            (template_hole 15,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("Field.I_shift",
     "[| 0 < ?n; ?u mod int ?n = ?v mod int ?n |]
      ==> Idl\<^bsub>\<Z>\<^esub> {int ?n} +>\<^bsub>\<Z>\<^esub> ?u =
          Idl\<^bsub>\<Z>\<^esub> {int ?n} +>\<^bsub>\<Z>\<^esub> ?v",
     template_implication
      ([template_inequation (less_than, template_hole 17, template_var 2),
        template_equation
         (template_app
           (template_app (template_hole 15, template_var 1),
            template_app (template_hole 14, template_var 2)),
          template_app
           (template_app (template_hole 15, template_var 0),
            template_app (template_hole 14, template_var 2)))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app (template_hole 11, template_hole 10),
                 template_app
                  (template_app
                    (template_app (template_hole 9, template_hole 8),
                     template_hole 7),
                   template_app
                    (template_app
                      (template_app (template_hole 6, template_hole 5),
                       template_hole 4),
                     template_hole 3)))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 11, template_hole 10),
                   template_app
                    (template_app
                      (template_app (template_hole 9, template_hole 8),
                       template_hole 7),
                     template_app
                      (template_app
                        (template_app (template_hole 6, template_hole 5),
                         template_hole 4),
                       template_hole 3)))),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 14, template_var 2)),
                 template_hole 0))),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app (template_hole 11, template_hole 10),
                 template_app
                  (template_app
                    (template_app (template_hole 9, template_hole 8),
                     template_hole 7),
                   template_app
                    (template_app
                      (template_app (template_hole 6, template_hole 5),
                       template_hole 4),
                     template_hole 3)))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 11, template_hole 10),
                   template_app
                    (template_app
                      (template_app (template_hole 9, template_hole 8),
                       template_hole 7),
                     template_app
                      (template_app
                        (template_app (template_hole 6, template_hole 5),
                         template_hole 4),
                       template_hole 3)))),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 14, template_var 2)),
                 template_hole 0))),
           template_var 0))))]
