   [("PLTL.seq_sim_refl", "?\<sigma> \<simeq>?A\<simeq> ?\<sigma>",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 1)
         )),
    ("PLTL.state_sim_refl", "?s ~?A~ ?s",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 1)
         )),
    ("PLTL.next_free_always",
     "next_free (G\<^sub>p ?\<phi>) = next_free ?\<phi>",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("PLTL.next_free_eventually",
     "next_free (F\<^sub>p ?\<phi>) = next_free ?\<phi>",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("PLTL.next_free_not",
     "next_free (not\<^sub>p ?\<phi>) = next_free ?\<phi>",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("PLTL.ltlc_next_free_iff",
     "next_free (ltlc_to_pltl ?\<phi>) = ltlc_next_free ?\<phi>",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("PLTL.canonize_state_sim", "canonize ?A ?s ~?A~ ?s",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 1),
           template_var 0)
         )),
    ("PLTL.next_free_stutter_invariant",
     "next_free ?\<phi> ==> stutter_invariant ?\<phi>",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("PLTL.canonize_idempotent",
     "canonize ?A (canonize ?A ?s) = canonize ?A ?s",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("PLTL.canonical_reduced",
     "canonical_sequence ?A ?\<sigma> ==>
      canonical_sequence ?A (\<natural>?\<sigma>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("PLTL.next_free_and",
     "next_free (?\<phi> and\<^sub>p ?\<psi>) =
      (next_free ?\<phi> & next_free ?\<psi>)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("PLTL.next_free_or",
     "next_free (?\<phi> or\<^sub>p ?\<psi>) =
      (next_free ?\<phi> & next_free ?\<psi>)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("PLTL.next_free_release",
     "next_free (?\<phi> R\<^sub>p ?\<psi>) =
      (next_free ?\<phi> & next_free ?\<psi>)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("PLTL.next_free_strong_release",
     "next_free (?\<phi> M\<^sub>p ?\<psi>) =
      (next_free ?\<phi> & next_free ?\<psi>)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("PLTL.next_free_weak_until",
     "next_free (?\<phi> W\<^sub>p ?\<psi>) =
      (next_free ?\<phi> & next_free ?\<psi>)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("PLTL.characteristic_holds",
     "finite ?A ==>
      ?\<sigma> \<Turnstile>\<^sub>p characteristic_formula ?A
(?\<sigma> 0)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_var 0, template_hole 0)))
           ))),
    ("PLTL.fold_graph_AND",
     "finite ?\<Phi> ==>
      fold_graph And_ltlp true\<^sub>p ?\<Phi> (AND ?\<Phi>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_hole 2),
                 template_hole 1),
               template_var 0),
             template_app (template_hole 0, template_var 0))
           ))),
    ("PLTL.fold_graph_OR",
     "finite ?\<Phi> ==>
      fold_graph Or_ltlp false\<^sub>p ?\<Phi> (OR ?\<Phi>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_hole 2),
                 template_hole 1),
               template_var 0),
             template_app (template_hole 0, template_var 0))
           ))),
    ("PLTL.canonical_sampled",
     "canonical_sequence ?A ?\<sigma> ==>
      canonical_sequence ?A (?\<sigma> o ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("PLTL.canonical_suffix",
     "canonical_sequence ?A ?\<sigma> ==>
      canonical_sequence ?A ?\<sigma> [?k..]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("PLTL.seq_sim_sym",
     "?\<sigma> \<simeq>?A\<simeq> ?\<tau> ==>
      ?\<tau> \<simeq>?A\<simeq> ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1),
             template_var 2)
           ))),
    ("PLTL.state_sim_sym", "?s ~?A~ ?t ==> ?t ~?A~ ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1),
             template_var 2)
           ))),
    ("PLTL.next_free_AND",
     "finite ?\<Phi> ==>
      next_free (AND ?\<Phi>) = (ALL \<phi>:?\<Phi>. next_free \<phi>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 0), t_empty)))),
    ("PLTL.next_free_OR",
     "finite ?\<Phi> ==>
      next_free (OR ?\<Phi>) = (ALL \<phi>:?\<Phi>. next_free \<phi>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 0), t_empty)))),
    ("PLTL.canonize_canonical",
     "?s ~?A~ ?t ==> canonize ?A ?s = canonize ?A ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("PLTL.atoms_pltl_AND",
     "finite ?\<Phi> ==>
      atoms_pltl (AND ?\<Phi>) = \<Union> (atoms_pltl ` ?\<Phi>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))))),
    ("PLTL.atoms_pltl_OR",
     "finite ?\<Phi> ==>
      atoms_pltl (OR ?\<Phi>) = \<Union> (atoms_pltl ` ?\<Phi>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))))),
    ("PLTL.pltl_seq_sim",
     "?\<sigma> \<simeq>atoms_pltl ?\<phi>\<simeq> ?\<tau> ==>
      ?\<sigma> \<Turnstile>\<^sub>p ?\<phi> =
      ?\<tau> \<Turnstile>\<^sub>p ?\<phi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_app (template_hole 2, template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("PLTL.holds_of_AND",
     "finite ?\<Phi> ==>
      ?\<sigma> \<Turnstile>\<^sub>p AND ?\<Phi> =
      (ALL \<phi>:?\<Phi>. ?\<sigma> \<Turnstile>\<^sub>p \<phi>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 1), t_empty)))),
    ("PLTL.holds_of_OR",
     "finite ?\<Phi> ==>
      ?\<sigma> \<Turnstile>\<^sub>p OR ?\<Phi> =
      (EX \<phi>:?\<Phi>. ?\<sigma> \<Turnstile>\<^sub>p \<phi>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 1), t_empty)))),
    ("PLTL.seq_sim_mono",
     "[| ?\<sigma> \<simeq>?A\<simeq> ?\<tau>; ?B <= ?A |]
      ==> ?\<sigma> \<simeq>?B\<simeq> ?\<tau>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0),
             template_var 1)
           ))),
    ("PLTL.state_sim_mono", "[| ?s ~?A~ ?t; ?B <= ?A |] ==> ?s ~?B~ ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0),
             template_var 1)
           ))),
    ("PLTL.ltlc_next_free_stutter_invariant",
     "[| ltlc_next_free ?\<phi>; ?r \<approx> ?r' |]
      ==> ?r \<Turnstile>\<^sub>c ?\<phi> =
          ?r' \<Turnstile>\<^sub>c ?\<phi>",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("PLTL.stutter_invariantD",
     "[| stutter_invariant ?\<phi>; ?\<sigma> \<approx> ?\<tau> |]
      ==> ?\<sigma> \<Turnstile>\<^sub>p ?\<phi> =
          ?\<tau> \<Turnstile>\<^sub>p ?\<phi>",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("PLTL.seq_sim_trans",
     "[| ?\<rho> \<simeq>?A\<simeq> ?\<sigma>;
         ?\<sigma> \<simeq>?A\<simeq> ?\<tau> |]
      ==> ?\<rho> \<simeq>?A\<simeq> ?\<tau>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 1),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("PLTL.state_sim_trans", "[| ?s ~?A~ ?t; ?t ~?A~ ?u |] ==> ?s ~?A~ ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 1),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("PLTL.characteristic_state_sim",
     "finite ?A ==>
      (?\<sigma> 0 ~?A~ ?\<tau> 0) =
      ?\<tau> \<Turnstile>\<^sub>p characteristic_formula ?A (?\<sigma> 0)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app (template_var 1, template_hole 2)),
             template_var 2),
           template_app (template_var 0, template_hole 2)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app (template_var 1, template_hole 2)))))),
    ("PLTL.canonical_exists",
     "(!!\<tau>.
          [| \<tau> \<simeq>?A\<simeq> ?\<sigma>;
             canonical_sequence ?A \<tau> |]
          ==> ?thesis) ==>
      ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("PLTL.stutter_invariantI",
     "(!!\<sigma> \<tau>.
          [| \<sigma> \<approx> \<tau>;
             \<sigma> \<Turnstile>\<^sub>p ?\<phi> |]
          ==> \<tau> \<Turnstile>\<^sub>p ?\<phi>) ==>
      stutter_invariant ?\<phi>",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("PLTL.pltl_stutter_invariant",
     "stutter_invariant ?\<phi> =
      (EX \<psi>.
          next_free \<psi> &
          atoms_pltl \<psi> <= atoms_pltl ?\<phi> &
          (ALL \<sigma>.
              \<sigma> \<Turnstile>\<^sub>p \<psi> =
              \<sigma> \<Turnstile>\<^sub>p ?\<phi>))",
     template_equation
      (template_app (template_hole 7, template_var 0),
       template_app (template_hole 6, t_empty))),
    ("PLTL.stutter_invariant_next_free",
     "[| stutter_invariant ?\<phi>;
         !!\<psi>.
            [| next_free \<psi>; atoms_pltl \<psi> <= atoms_pltl ?\<phi>;
               ALL \<sigma>.
                  \<sigma> \<Turnstile>\<^sub>p \<psi> =
                  \<sigma> \<Turnstile>\<^sub>p ?\<phi> |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("PLTL.ex_next_free_stutter_free_canonical",
     "[| atoms_pltl ?\<phi> <= ?A; finite ?A |]
      ==> EX \<psi>.
             next_free \<psi> &
             atoms_pltl \<psi> <= ?A &
             (ALL \<sigma>.
                 stutter_free \<sigma> & canonical_sequence ?A \<sigma> -->
                 \<sigma> \<Turnstile>\<^sub>p \<psi> =
                 \<sigma> \<Turnstile>\<^sub>p ?\<phi>)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 10, template_var 1),
          template_var 0),
        template_predicate
         (template_app (template_hole 9, template_var 0))],
       template_predicate (template_app (template_hole 8, t_empty))))]
