Loading theory "Draft.Auxiliary" (required by "Draft.AuxiliaryTemplates")
Loading theory "Draft.Templates" (required by "Draft.AuxiliaryTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.068s elapsed time, 0.161s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.AuxiliaryTemplates")
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### theory "Draft.Auxiliary"
### 0.279s elapsed time, 0.597s cpu time, 0.027s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.491s elapsed time, 0.714s cpu time, 0.027s GC time
Loading theory "Draft.AuxiliaryTemplates"
val templateLemmas =
   [("Auxiliary.pick_is_element", "?x : ?A ==> pick ?A : ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 0)
           ))),
    ("Auxiliary.butlast_noteq", "?Cs ~= [] ==> butlast ?Cs ~= ?Cs",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_negation
        (
           template_equation
            (template_app (template_hole 0, template_var 0), template_var 0)
           ))),
    ("Auxiliary.butlast_tail", "butlast (?Xs @ [?X, ?Y]) = ?Xs @ [?X]",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)))),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0)))),
    ("Auxiliary.rel_list_all2_refl",
     "(!!x. (x, x) : ?S) ==> list_all2 (fun_of ?S) ?xs ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1)),
               template_var 0),
             template_var 0)
           ))),
    ("Auxiliary.map_of_SomeI",
     "[| distinct_fst ?kxs; (?k, ?x) : set ?kxs |]
      ==> map_of ?kxs ?k = \<lfloor>?x\<rfloor>",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)),
              template_app (template_hole 3, template_var 2))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Auxiliary.distinct_fst_Cons",
     "distinct_fst ((?k, ?x) # ?kxs) =
      (distinct_fst ?kxs & (ALL y. (?k, y) ~: set ?kxs))",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 7, template_var 0)),
         template_app (template_hole 3, t_empty)))),
    ("Auxiliary.nat_add_max_le",
     "(?n + max ?i ?j <= ?m) = (?n + ?i <= ?m & ?n + ?j <= ?m)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 1)),
           template_var 0)))),
    ("Auxiliary.app_hd_tl",
     "[| ?Cs ~= []; ?Cs = ?Cs' @ tl ?Cs |] ==> ?Cs' = [hd ?Cs]",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 3, template_var 0),
            template_app (template_hole 2, template_var 1)))],
       template_equation
        (template_var 0,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_hole 4)))),
    ("Auxiliary.set2list_correct",
     "[| finite ?A; ?A ~= {}; set2list ?A = ?xs |] ==> set ?xs = ?A",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 3)),
        template_equation
         (template_app (template_hole 1, template_var 1), template_var 0)],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Auxiliary.rel_list_all2_Cons",
     "list_all2 (fun_of ?S) (?x # ?xs) (?y # ?ys) =
      ((?x, ?y) : ?S & list_all2 (fun_of ?S) ?xs ?ys)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 4)),
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_var 4)),
         template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 4)),
             template_var 2),
           template_var 0)))),
    ("Auxiliary.card_pick",
     "[| finite ?A; ?A ~= {} |] ==> Suc (card (?A - {pick ?A})) = card ?A",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 6))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)),
                 template_hole 6)))),
         template_app (template_hole 3, template_var 0)))),
    ("Auxiliary.Suc_add_max_le",
     "(Suc (?n + max ?i ?j) <= ?m) =
      (Suc (?n + ?i) <= ?m & Suc (?n + ?j) <= ?m)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)))),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 2))),
             template_var 0)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 1))),
           template_var 0)))),
    ("Auxiliary.rel_list_all2_nthD",
     "[| list_all2 (fun_of ?S) ?xs ?ys; ?p < length ?xs |]
      ==> (?xs ! ?p, ?ys ! ?p) : ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 4, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))),
             template_var 3)
           ))),
    ("Auxiliary.rel_list_all2_Cons2",
     "list_all2 (fun_of ?S) ?xs (?y # ?ys) =
      (EX z zs.
          ?xs = z # zs & (z, ?y) : ?S & list_all2 (fun_of ?S) zs ?ys)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 9,
             template_app (template_hole 8, template_var 3)),
           template_var 2),
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       template_app (template_hole 6, t_empty))),
    ("Auxiliary.rel_list_all2_Cons1",
     "list_all2 (fun_of ?S) (?x # ?xs) ?ys =
      (EX z zs.
          ?ys = z # zs & (?x, z) : ?S & list_all2 (fun_of ?S) ?xs zs)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 9,
             template_app (template_hole 8, template_var 3)),
           template_app
            (template_app (template_hole 7, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 6, t_empty))),
    ("Auxiliary.rel_list_all2I",
     "[| length ?a = length ?b;
         !!n. n < length ?a ==> (?a ! n, ?b ! n) : ?S |]
      ==> list_all2 (fun_of ?S) ?a ?b",
     template_implication
      ([template_equation
         (template_app (template_hole 9, template_var 2),
          template_app (template_hole 8, template_var 1)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_var 2),
             template_var 1)
           ))),
    ("Auxiliary.rel_list_all2_update_cong",
     "[| ?i < length ?xs; list_all2 (fun_of ?S) ?xs ?ys; (?x, ?y) : ?S |]
      ==> list_all2 (fun_of ?S) (?xs[?i := ?x]) (?ys[?i := ?y])",
     template_implication
      ([template_inequation
         (less_than, template_var 5,
          template_app (template_hole 6, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 3)),
                template_var 4),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 3)),
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 5),
                 template_var 1)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 5),
               template_var 0))
           ))),
    ("Auxiliary.only_one_append",
     "[| ?C' ~: set ?Cs; ?C' ~: set ?Cs';
         ?Ds @ ?C' # ?Ds' = ?Cs @ ?C' # ?Cs' |]
      ==> ?Cs = ?Ds & ?Cs' = ?Ds'",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 4),
                  template_app (template_hole 4, template_var 3))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 4),
                  template_app (template_hole 4, template_var 2))
                )
            ),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 1),
            template_app
             (template_app (template_hole 1, template_var 4),
              template_var 0)),
          template_app
           (template_app (template_hole 2, template_var 3),
            template_app
             (template_app (template_hole 1, template_var 4),
              template_var 2)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0))
           ))),
    ("Auxiliary.rel_list_all2_antisym",
     "[| !!x y. [| (x, y) : ?S; (y, x) : ?T |] ==> x = y;
         list_all2 (fun_of ?S) ?xs ?ys; list_all2 (fun_of ?T) ?ys ?xs |]
      ==> ?xs = ?ys",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 3)),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 2)),
                template_var 0),
              template_var 1)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Auxiliary.rel_list_all2_trans",
     "[| !!a b c. [| (a, b) : ?R; (b, c) : ?S |] ==> (a, c) : ?T;
         list_all2 (fun_of ?R) ?as ?bs; list_all2 (fun_of ?S) ?bs ?cs |]
      ==> list_all2 (fun_of ?T) ?as ?cs",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 5)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 4)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 3)),
               template_var 2),
             template_var 0)
           ))),
    ("Auxiliary.set2list_prop",
     "[| finite ?A; ?A ~= {} |]
      ==> EX xs.
             while (%(Es, S). S ~= {})
              (%(Es, S). let x = pick S in (x # Es, S - {x})) ([], ?A) =
             (xs, {}) &
             set xs Un {} = ?A",
     template_implication
      ([template_predicate
         (template_app (template_hole 18, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 15))],
       template_predicate (template_app (template_hole 14, t_empty))))]:
   (string * thm * template) list
### theory "Draft.AuxiliaryTemplates"
### 0.360s elapsed time, 0.501s cpu time, 0.061s GC time
val it = (): unit
