Loading theory "Draft.Auxiliary" (required by "Draft.ProgressTemplates" via "Draft.Progress" via "Draft.Equivalence" via "Draft.BigStep" via "Draft.Syntax" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj" via "Draft.ClassRel" via "Draft.Decl" via "Draft.Expr" via "Draft.Value" via "Draft.Type")
Loading theory "Draft.Templates" (required by "Draft.ProgressTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.066s elapsed time, 0.160s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ProgressTemplates")
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### theory "Draft.Auxiliary"
### 0.268s elapsed time, 0.575s cpu time, 0.027s GC time
Loading theory "Draft.Type" (required by "Draft.ProgressTemplates" via "Draft.Progress" via "Draft.Equivalence" via "Draft.BigStep" via "Draft.Syntax" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj" via "Draft.ClassRel" via "Draft.Decl" via "Draft.Expr" via "Draft.Value")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.528s elapsed time, 1.090s cpu time, 0.087s GC time
consts
  getbase :: "base => char list"
consts
  isRepBase :: "base => bool"
consts
  isShBase :: "base => bool"
### theory "Draft.Type"
### 0.629s elapsed time, 0.981s cpu time, 0.061s GC time
Loading theory "Draft.Value" (required by "Draft.ProgressTemplates" via "Draft.Progress" via "Draft.Equivalence" via "Draft.BigStep" via "Draft.Syntax" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj" via "Draft.ClassRel" via "Draft.Decl" via "Draft.Expr")
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Ref"
consts
  the_Intg :: "val => int"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_addr :: "val => nat"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_path :: "val => char list list"
consts
  default_val :: "ty => val"
consts
  typeof :: "val => ty option"
### theory "Draft.Value"
### 0.401s elapsed time, 0.434s cpu time, 0.044s GC time
Loading theory "Draft.Expr" (required by "Draft.ProgressTemplates" via "Draft.Progress" via "Draft.Equivalence" via "Draft.BigStep" via "Draft.Syntax" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj" via "Draft.ClassRel" via "Draft.Decl")
Found termination order: "{}"
### Ambiguous input (line 80 of "$AFP/CoreC++/Expr.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" fv)
###       ("_updbind" ("_position" V) ("_position" e)))
###     ("\<^const>Set.union" ("_Finset" ("_position" V))
###       ("_applC" ("_position" fv) ("_position" e)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.expr.LAss" ("_position" V) ("_position" e)))
###     ("\<^const>Set.union" ("_Finset" ("_position" V))
###       ("_applC" ("_position" fv) ("_position" e)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 82 of "$AFP/CoreC++/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" fv)
###       ("_updbind"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  fv :: "expr => char list set"
  fvs :: "expr list => char list set"
### theory "Draft.Expr"
### 2.285s elapsed time, 2.709s cpu time, 0.590s GC time
Loading theory "Draft.Decl" (required by "Draft.ProgressTemplates" via "Draft.Progress" via "Draft.Equivalence" via "Draft.BigStep" via "Draft.Syntax" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj" via "Draft.ClassRel")
### theory "Draft.Decl"
### 0.096s elapsed time, 0.143s cpu time, 0.053s GC time
Loading theory "Draft.ClassRel" (required by "Draft.ProgressTemplates" via "Draft.Progress" via "Draft.Equivalence" via "Draft.BigStep" via "Draft.Syntax" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj")
Proofs for inductive predicate(s) "subclsRp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "subclsSp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "subcls1p"
  Proving monotonicity ...
### theory "Draft.ClassRel"
### 0.173s elapsed time, 0.173s cpu time, 0.000s GC time
Loading theory "Draft.SubObj" (required by "Draft.ProgressTemplates" via "Draft.Progress" via "Draft.Equivalence" via "Draft.BigStep" via "Draft.Syntax" via "Draft.Exceptions" via "Draft.Objects")
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Proofs for inductive predicate(s) "Subobjs\<^sub>R"
  Proving monotonicity ...
Proofs for inductive predicate(s) "Subobjs"
  Proving monotonicity ...
Proofs for inductive predicate(s) "casts_to"
  Proving monotonicity ...
Proofs for inductive predicate(s) "Casts_to"
  Proving monotonicity ...
Proofs for inductive predicate(s) "leq_path1p"
  Proving monotonicity ...
### Ambiguous input (line 720 of "$AFP/CoreC++/SubObj.thy") produces 3 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" MinimalMethodDefs)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" C) ("_position" M))))
###   ("_Coll" ("_pattern" ("_position" Cs) ("_position" mthd))
###     ("\<^const>HOL.conj"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" Cs) ("_tuple_arg" ("_position" mthd)))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M)))))
###       ("_Ball" ("_pattern" ("_position" Cs') ("_position" mthd'))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M))))
###         ("\<^const>HOL.eq"
###           ("\<^const>SubObj.leq_path" ("_position" P) ("_position" C)
###             ("_position" Cs')
###             ("\<^const>HOL.implies" ("_position" Cs) ("_position" Cs')))
###           ("_position" Cs))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" MinimalMethodDefs)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" C) ("_position" M))))
###   ("_Coll" ("_pattern" ("_position" Cs) ("_position" mthd))
###     ("\<^const>HOL.conj"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" Cs) ("_tuple_arg" ("_position" mthd)))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M)))))
###       ("_Ball" ("_pattern" ("_position" Cs') ("_position" mthd'))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M))))
###         ("\<^const>SubObj.leq_path" ("_position" P) ("_position" C)
###           ("_position" Cs')
###           ("\<^const>HOL.implies" ("_position" Cs)
###             ("\<^const>HOL.eq" ("_position" Cs') ("_position" Cs))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" MinimalMethodDefs)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" C) ("_position" M))))
###   ("_Coll" ("_pattern" ("_position" Cs) ("_position" mthd))
###     ("\<^const>HOL.conj"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" Cs) ("_tuple_arg" ("_position" mthd)))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M)))))
###       ("_Ball" ("_pattern" ("_position" Cs') ("_position" mthd'))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M))))
###         ("\<^const>HOL.implies"
###           ("\<^const>SubObj.leq_path" ("_position" P) ("_position" C)
###             ("_position" Cs') ("_position" Cs))
###           ("\<^const>HOL.eq" ("_position" Cs') ("_position" Cs)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 725 of "$AFP/CoreC++/SubObj.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" OverriderMethodDefs)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" R) ("_position" M))))
###   ("_Coll" ("_pattern" ("_position" Cs) ("_position" mthd))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" Cs') ("_position" mthd'))
###       ("\<^const>HOL.conj"
###         ("\<^const>SubObj.LeastMethodDef" ("_position" P)
###           ("_applC" ("_position" ldc) ("_position" R)) ("_position" M)
###           ("_position" mthd') ("_position" Cs'))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" Cs) ("_tuple_arg" ("_position" mthd)))
###             ("_applC" ("_position" MinimalMethodDefs)
###               ("_cargs" ("_position" P)
###                 ("_cargs" ("_applC" ("_position" mdc) ("_position" R))
###                   ("_position" M)))))
###           ("\<^const>SubObj.appendPath"
###             ("\<^const>SubObj.leq_path" ("_position" P)
###               ("_applC" ("_position" mdc) ("_position" R)) ("_position" Cs)
###               ("_applC" ("_position" snd) ("_position" R)))
###             ("_position" Cs')))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" OverriderMethodDefs)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" R) ("_position" M))))
###   ("_Coll" ("_pattern" ("_position" Cs) ("_position" mthd))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" Cs') ("_position" mthd'))
###       ("\<^const>HOL.conj"
###         ("\<^const>SubObj.LeastMethodDef" ("_position" P)
###           ("_applC" ("_position" ldc) ("_position" R)) ("_position" M)
###           ("_position" mthd') ("_position" Cs'))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" Cs) ("_tuple_arg" ("_position" mthd)))
###             ("_applC" ("_position" MinimalMethodDefs)
###               ("_cargs" ("_position" P)
###                 ("_cargs" ("_applC" ("_position" mdc) ("_position" R))
###                   ("_position" M)))))
###           ("\<^const>SubObj.leq_path" ("_position" P)
###             ("_applC" ("_position" mdc) ("_position" R)) ("_position" Cs)
###             ("\<^const>SubObj.appendPath"
###               ("_applC" ("_position" snd) ("_position" R))
###               ("_position" Cs'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "SelectMethodDef"
  Proving monotonicity ...
### theory "Draft.SubObj"
### 0.858s elapsed time, 0.922s cpu time, 0.084s GC time
Loading theory "Draft.Objects" (required by "Draft.ProgressTemplates" via "Draft.Progress" via "Draft.Equivalence" via "Draft.BigStep" via "Draft.Syntax" via "Draft.Exceptions")
Loading theory "Draft.TypeRel" (required by "Draft.ProgressTemplates" via "Draft.Progress" via "Draft.Equivalence" via "Draft.WWellForm" via "Draft.WellForm")
Proofs for inductive predicate(s) "widen"
  Proving monotonicity ...
Proofs for inductive predicate(s) "init_obj"
  Proving monotonicity ...
### theory "Draft.TypeRel"
### 0.095s elapsed time, 0.205s cpu time, 0.041s GC time
### theory "Draft.Objects"
### 0.109s elapsed time, 0.219s cpu time, 0.041s GC time
Loading theory "Draft.Exceptions" (required by "Draft.ProgressTemplates" via "Draft.Progress" via "Draft.Equivalence" via "Draft.BigStep" via "Draft.Syntax")
### theory "Draft.Exceptions"
### 0.085s elapsed time, 0.085s cpu time, 0.000s GC time
Loading theory "Draft.State" (required by "Draft.ProgressTemplates" via "Draft.Progress" via "Draft.Equivalence" via "Draft.BigStep")
Loading theory "Draft.Syntax" (required by "Draft.ProgressTemplates" via "Draft.Progress" via "Draft.Equivalence" via "Draft.BigStep")
Loading theory "Draft.SystemClasses" (required by "Draft.ProgressTemplates" via "Draft.Progress" via "Draft.Equivalence" via "Draft.WWellForm" via "Draft.WellForm")
### theory "Draft.Syntax"
### 0.035s elapsed time, 0.103s cpu time, 0.000s GC time
Loading theory "Draft.WellType" (required by "Draft.ProgressTemplates" via "Draft.Progress" via "Draft.Equivalence" via "Draft.WWellForm" via "Draft.WellForm")
### theory "Draft.State"
### 0.049s elapsed time, 0.144s cpu time, 0.000s GC time
Loading theory "Draft.BigStep" (required by "Draft.ProgressTemplates" via "Draft.Progress" via "Draft.Equivalence")
Loading theory "Draft.SmallStep" (required by "Draft.ProgressTemplates" via "Draft.Progress" via "Draft.Equivalence")
### theory "Draft.SystemClasses"
### 0.065s elapsed time, 0.203s cpu time, 0.000s GC time
### Ambiguous input (line 17 of "$AFP/CoreC++/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" blocks)
###       ("_tuple" ("\<^const>List.list.Cons" ("_position" V) ("_position" Vs))
###         ("_tuple_args"
###           ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts))
###           ("_tuple_args"
###             ("\<^const>List.list.Cons" ("_position" v) ("_position" vs))
###             ("_tuple_arg" ("_position" e))))))
###     ("\<^const>Expr.expr.Block" ("_position" V)
###       ("\<^const>Expr.expr.LAss" ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_applC" ("_position" blocks)
###         ("_tuple" ("_position" Vs)
###           ("_tuple_args" ("_position" Ts)
###             ("_tuple_args" ("_position" vs)
###               ("_tuple_arg" ("_position" e)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" blocks)
###       ("_tuple" ("\<^const>List.list.Cons" ("_position" V) ("_position" Vs))
###         ("_tuple_args"
###           ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts))
###           ("_tuple_args"
###             ("\<^const>List.list.Cons" ("_position" v) ("_position" vs))
###             ("_tuple_arg" ("_position" e))))))
###     ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###       ("_applC" ("_position" Val) ("_position" v))
###       ("_applC" ("_position" blocks)
###         ("_tuple" ("_position" Vs)
###           ("_tuple_args" ("_position" Ts)
###             ("_tuple_args" ("_position" vs)
###               ("_tuple_arg" ("_position" e)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Missing patterns in function definition:
### !!vc vd vb. blocks ([], vc # vd, vb) = undefined
### !!v ve vf vd. blocks ([], v, ve # vf, vd) = undefined
### !!va vb vc. blocks (va # vb, [], vc) = undefined
### (3 more)
### Ambiguous input (line 172 of "$AFP/CoreC++/BigStep.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e\<^sub>0)
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg"
###             ("_applC" ("_position" l\<^sub>0)
###               ("\<^const>Expr.expr.LAss" ("_position" V)
###                 ("_position" None)))))
###         ("_position" e\<^sub>1)
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_arg" ("_position" l\<^sub>1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg" ("_position" l\<^sub>0)))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg"
###           ("_applC" ("_position" l\<^sub>1)
###             ("\<^const>Expr.expr.LAss" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e\<^sub>0)
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg"
###             ("_Update" ("_position" l\<^sub>0)
###               ("_updbind" ("_position" V) ("_position" None)))))
###         ("_position" e\<^sub>1)
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_arg" ("_position" l\<^sub>1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg" ("_position" l\<^sub>0)))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg"
###           ("_applC" ("_position" l\<^sub>1)
###             ("\<^const>Expr.expr.LAss" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e\<^sub>0)
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg"
###             ("_applC" ("_position" l\<^sub>0)
###               ("\<^const>Expr.expr.LAss" ("_position" V)
###                 ("_position" None)))))
###         ("_position" e\<^sub>1)
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_arg" ("_position" l\<^sub>1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg" ("_position" l\<^sub>0)))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg"
###           ("_Update" ("_position" l\<^sub>1)
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e\<^sub>0)
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg"
###             ("_Update" ("_position" l\<^sub>0)
###               ("_updbind" ("_position" V) ("_position" None)))))
###         ("_position" e\<^sub>1)
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_arg" ("_position" l\<^sub>1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg" ("_position" l\<^sub>0)))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg"
###           ("_Update" ("_position" l\<^sub>1)
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 123 of "$AFP/CoreC++/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###         ("_applC" ("_position" ref)
###           ("_tuple" ("_position" a) ("_tuple_arg" ("_position" Cs'))))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_arg" ("_position" l\<^sub>2)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" D) ("_tuple_arg" ("_position" S))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>SubObj.LeastFieldDecl" ("_position" P)
###               ("_applC" ("_position" last) ("_position" Cs'))
###               ("_position" F) ("_position" T) ("_position" Cs)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###                 ("_position" v) ("_position" v')))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" Ds)
###                   ("\<^const>SubObj.appendPath" ("_position" Cs')
###                     ("_position" Cs))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" Ds)
###                       ("_tuple_arg" ("_position" fs)))
###                     ("_position" S)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq" ("_position" fs')
###                       ("_MapUpd" ("_position" fs)
###                         ("_maplet" ("_position" F) ("_position" v')))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq" ("_position" S')
###                         ("\<^const>Set.union"
###                           ("\<^const>Groups.minus_class.minus"
###                             ("_position" S)
###                             ("_Finset"
###                               ("_tuple" ("_position" Ds)
###                                 ("_tuple_arg" ("_position" fs)))))
###                           ("_Finset"
###                             ("_tuple" ("_position" Ds)
###                               ("_tuple_arg" ("_position" fs')))))))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" h\<^sub>2')
###                           ("_MapUpd" ("_position" h\<^sub>2)
###                             ("_maplet" ("_position" a)
###                               ("_tuple" ("_position" D)
###                                 ("_tuple_arg"
###                                   ("_position" S')))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v'))
###       ("_tuple" ("_position" h\<^sub>2')
###         ("_tuple_arg" ("_position" l\<^sub>2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###         ("_applC" ("_position" ref)
###           ("_tuple" ("_position" a) ("_tuple_arg" ("_position" Cs'))))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_arg" ("_position" l\<^sub>2)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" D) ("_tuple_arg" ("_position" S))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>SubObj.LeastFieldDecl" ("_position" P)
###               ("_applC" ("_position" last) ("_position" Cs'))
###               ("_position" F) ("_position" T) ("_position" Cs)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###                 ("_position" v) ("_position" v')))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" Ds)
###                   ("\<^const>SubObj.appendPath" ("_position" Cs')
###                     ("_position" Cs))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" Ds)
###                       ("_tuple_arg" ("_position" fs)))
###                     ("_position" S)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq" ("_position" fs')
###                       ("_MapUpd" ("_position" fs)
###                         ("_maplet" ("_position" F) ("_position" v')))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq" ("_position" S')
###                         ("\<^const>Set.union"
###                           ("\<^const>Groups.minus_class.minus"
###                             ("_position" S)
###                             ("_Finset"
###                               ("_tuple" ("_position" Ds)
###                                 ("_tuple_arg" ("_position" fs)))))
###                           ("_Finset"
###                             ("_tuple" ("_position" Ds)
###                               ("_tuple_arg" ("_position" fs')))))))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" h\<^sub>2')
###                           ("_MapUpd" ("_position" h\<^sub>2)
###                             ("_maplet" ("_position" a)
###                               ("_tuple" ("_position" D)
###                                 ("_tuple_arg"
###                                   ("_position" S')))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v'))
###       ("_tuple" ("_position" h\<^sub>2')
###         ("_tuple_arg" ("_position" l\<^sub>2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 130 of "$AFP/CoreC++/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1) ("_position" s\<^sub>0) ("_position" null)
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1) ("_position" s\<^sub>0) ("_position" null)
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 134 of "$AFP/CoreC++/BigStep.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E) ("_position" e\<^sub>1)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E) ("_position" e\<^sub>1)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 62 of "$AFP/CoreC++/WellType.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WT" ("_position" P) ("_position" E) ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SubObj.LeastFieldDecl" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" T) ("_position" Cs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" T))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WT" ("_position" P) ("_position" E) ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SubObj.LeastFieldDecl" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" T) ("_position" Cs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" T))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 138 of "$AFP/CoreC++/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###         ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###           ("_applC" ("_position" throw) ("_position" e'))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###         ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###           ("_applC" ("_position" throw) ("_position" e'))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "WT", "WTs"
  Proving monotonicity ...
Found termination order:
  "(%p. size_list size (fst (snd (snd p)))) <*mlex*> {}"
### Ambiguous input (line 144 of "$AFP/CoreC++/SmallStep.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e') ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss" ("_position" e) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e') ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s)
###       ("\<^const>Expr.expr.FAss" ("_position" e') ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss" ("_position" e) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s)
###       ("\<^const>Expr.expr.FAss" ("_position" e') ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 148 of "$AFP/CoreC++/SmallStep.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" Cs))
###         ("_position" e))
###       ("_position" s)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" Cs))
###         ("_position" e'))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss"
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###         ("_position" Cs) ("_position" e))
###       ("_position" s)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" Cs))
###         ("_position" e'))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" Cs))
###         ("_position" e))
###       ("_position" s)
###       ("\<^const>Expr.expr.FAss"
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###         ("_position" Cs) ("_position" e'))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss"
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###         ("_position" Cs) ("_position" e))
###       ("_position" s)
###       ("\<^const>Expr.expr.FAss"
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###         ("_position" Cs) ("_position" e'))
###       ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 186 of "$AFP/CoreC++/SmallStep.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.expr.LAss" ("_position" V)
###                 ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_position" None)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.expr.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_position" None)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.expr.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.expr.LAss" ("_position" V)
###                 ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_position" None)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_position" None)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 152 of "$AFP/CoreC++/SmallStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" D) ("_tuple_arg" ("_position" S))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SubObj.LeastFieldDecl" ("_position" P)
###           ("_applC" ("_position" last) ("_position" Cs')) ("_position" F)
###           ("_position" T) ("_position" Cs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###             ("_position" v) ("_position" v')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" Ds)
###               ("\<^const>SubObj.appendPath" ("_position" Cs')
###                 ("_position" Cs))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" Ds) ("_tuple_arg" ("_position" fs)))
###                 ("_position" S))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc"
###           ("_applC" ("_position" ref)
###             ("_tuple" ("_position" a) ("_tuple_arg" ("_position" Cs'))))
###           ("_position" F) ("_position" Cs))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("_applC" ("_position" Val) ("_position" v'))
###       ("_tuple"
###         ("_MapUpd" ("_position" h)
###           ("_maplet" ("_position" a)
###             ("_tuple" ("_position" D)
###               ("_tuple_arg"
###                 ("_applC" ("_position" insert)
###                   ("_cargs"
###                     ("_tuple" ("_position" Ds)
###                       ("_tuple_arg"
###                         ("_MapUpd" ("_position" fs)
###                           ("_maplet" ("_position" F) ("_position" v')))))
###                     ("\<^const>Groups.minus_class.minus" ("_position" S)
###                       ("_Finset"
###                         ("_tuple" ("_position" Ds)
###                           ("_tuple_arg" ("_position" fs)))))))))))
###         ("_tuple_arg" ("_position" l))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" D) ("_tuple_arg" ("_position" S))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SubObj.LeastFieldDecl" ("_position" P)
###           ("_applC" ("_position" last) ("_position" Cs')) ("_position" F)
###           ("_position" T) ("_position" Cs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###             ("_position" v) ("_position" v')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" Ds)
###               ("\<^const>SubObj.appendPath" ("_position" Cs')
###                 ("_position" Cs))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" Ds) ("_tuple_arg" ("_position" fs)))
###                 ("_position" S))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss"
###         ("_applC" ("_position" ref)
###           ("_tuple" ("_position" a) ("_tuple_arg" ("_position" Cs'))))
###         ("_position" F) ("_position" Cs)
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("_applC" ("_position" Val) ("_position" v'))
###       ("_tuple"
###         ("_MapUpd" ("_position" h)
###           ("_maplet" ("_position" a)
###             ("_tuple" ("_position" D)
###               ("_tuple_arg"
###                 ("_applC" ("_position" insert)
###                   ("_cargs"
###                     ("_tuple" ("_position" Ds)
###                       ("_tuple_arg"
###                         ("_MapUpd" ("_position" fs)
###                           ("_maplet" ("_position" F) ("_position" v')))))
###                     ("\<^const>Groups.minus_class.minus" ("_position" S)
###                       ("_Finset"
###                         ("_tuple" ("_position" Ds)
###                           ("_tuple_arg" ("_position" fs)))))))))))
###         ("_tuple_arg" ("_position" l))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 157 of "$AFP/CoreC++/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.LAss"
###       ("\<^const>Expr.expr.FAcc" ("_position" null) ("_position" F)
###         ("_position" Cs))
###       ("_applC" ("_position" Val) ("_position" v)))
###     ("_position" s) ("_applC" ("_position" THROW) ("_position" NullPointer))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.FAss" ("_position" null) ("_position" F)
###       ("_position" Cs) ("_applC" ("_position" Val) ("_position" v)))
###     ("_position" s) ("_applC" ("_position" THROW) ("_position" NullPointer))
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 190 of "$AFP/CoreC++/SmallStep.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.expr.LAss" ("_position" V)
###                 ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.expr.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.expr.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.expr.LAss" ("_position" V)
###                 ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.expr.Block" ("_position" V)
###         ("\<^const>Expr.expr.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.expr.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.expr.Block" ("_position" V)
###         ("\<^const>Expr.expr.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.expr.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.expr.LAss" ("_position" V)
###                 ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.expr.LAss" ("_position" V)
###                 ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.expr.Block" ("_position" V)
###         ("\<^const>Expr.expr.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.expr.Block" ("_position" V)
###         ("\<^const>Expr.expr.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 248 of "$AFP/CoreC++/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.LAss"
###       ("\<^const>Expr.expr.FAcc"
###         ("_applC" ("_position" Throw) ("_position" r)) ("_position" F)
###         ("_position" Cs))
###       ("_position" e\<^sub>2))
###     ("_position" s) ("_applC" ("_position" Throw) ("_position" r))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.FAss"
###       ("_applC" ("_position" Throw) ("_position" r)) ("_position" F)
###       ("_position" Cs) ("_position" e\<^sub>2))
###     ("_position" s) ("_applC" ("_position" Throw) ("_position" r))
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 249 of "$AFP/CoreC++/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.LAss"
###       ("\<^const>Expr.expr.FAcc"
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###         ("_position" Cs))
###       ("_applC" ("_position" Throw) ("_position" r)))
###     ("_position" s) ("_applC" ("_position" Throw) ("_position" r))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.FAss" ("_applC" ("_position" Val) ("_position" v))
###       ("_position" F) ("_position" Cs)
###       ("_applC" ("_position" Throw) ("_position" r)))
###     ("_position" s) ("_applC" ("_position" Throw) ("_position" r))
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 195 of "$AFP/CoreC++/SmallStep.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v')))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v''))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###             ("_position" v) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v'')) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.expr.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v')))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v''))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###             ("_position" v) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V)
###         ("\<^const>Expr.expr.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v'')) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.expr.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v')))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v''))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###             ("_position" v) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.expr.Block" ("_position" V)
###         ("\<^const>Expr.expr.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v'')))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.expr.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v')))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v''))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###             ("_position" v) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V)
###         ("\<^const>Expr.expr.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.expr.Block" ("_position" V)
###         ("\<^const>Expr.expr.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v'')))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.expr.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v')))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v''))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###             ("_position" v) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v'')) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v')))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v''))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###             ("_position" v) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V)
###         ("\<^const>Expr.expr.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v'')) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v')))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v''))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###             ("_position" v) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.expr.Block" ("_position" V)
###         ("\<^const>Expr.expr.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v'')))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v')))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v''))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###             ("_position" v) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V)
###         ("\<^const>Expr.expr.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.expr.Block" ("_position" V)
###         ("\<^const>Expr.expr.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v'')))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### ?P,?E \<turnstile> [] [::] []
### Ambiguous input (line 254 of "$AFP/CoreC++/SmallStep.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###       ("_position" v) ("_position" v')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v))
###         ("_applC" ("_position" Throw) ("_position" r)))
###       ("_position" s) ("_applC" ("_position" Throw) ("_position" r))
###       ("_position" s))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###       ("_position" v) ("_position" v')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V)
###         ("\<^const>Expr.expr.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_applC" ("_position" Throw) ("_position" r)))
###       ("_position" s) ("_applC" ("_position" Throw) ("_position" r))
###       ("_position" s))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### ?P,?E \<turnstile> [] [::] []
### Ambiguous input (line 203 of "$AFP/CoreC++/SmallStep.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###       ("_position" v) ("_position" v')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v))
###         ("_applC" ("_position" Val) ("_position" u)))
###       ("_position" s) ("_applC" ("_position" Val) ("_position" u))
###       ("_position" s))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###       ("_position" v) ("_position" v')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V)
###         ("\<^const>Expr.expr.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_applC" ("_position" Val) ("_position" u)))
###       ("_position" s) ("_applC" ("_position" Val) ("_position" u))
###       ("_position" s))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "eval", "evals"
### Ambiguous input (line 122 of "$AFP/CoreC++/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts)))
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E) ("_position" e)
###       ("\<^const>HOL.conj" ("_position" T)
###         ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###           ("_position" es) ("_position" Ts))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts)))
###     ("\<^const>HOL.conj"
###       ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###         ("_position" e) ("_position" T))
###       ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###         ("_position" es) ("_position" Ts)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 129 of "$AFP/CoreC++/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" Ts))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" U) ("_position" Us))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts)
###           ("\<^const>List.list.Cons" ("_position" U) ("_position" Us)))
###         ("\<^const>HOL.conj"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e) ("_position" U))
###           ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###             ("_position" es) ("_position" Us)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" Ts))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" U) ("_position" Us))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts)
###           ("\<^const>List.list.Cons" ("_position" U) ("_position" Us)))
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e)
###           ("\<^const>HOL.conj" ("_position" U)
###             ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###               ("_position" es) ("_position" Us))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 137 of "$AFP/CoreC++/WellType.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" Ts)
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###         ("\<^const>List.append" ("_position" es\<^sub>1)
###           ("_position" es\<^sub>2))
###         ("_position" Ts))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Ts\<^sub>1) ("_position" Ts\<^sub>2))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" Ts)
###             ("\<^const>List.append" ("_position" Ts\<^sub>1)
###               ("_position" Ts\<^sub>2)))
###           ("\<^const>HOL.conj"
###             ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###               ("_position" es\<^sub>1) ("_position" Ts\<^sub>1))
###             ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###               ("_position" es\<^sub>2) ("_position" Ts\<^sub>2))))))))
### ("\<^const>Pure.all_binder" ("_position" Ts)
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###         ("\<^const>List.append" ("_position" es\<^sub>1)
###           ("_position" es\<^sub>2))
###         ("_position" Ts))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Ts\<^sub>1) ("_position" Ts\<^sub>2))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" Ts)
###             ("\<^const>List.append" ("_position" Ts\<^sub>1)
###               ("_position" Ts\<^sub>2)))
###           ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###             ("_position" es\<^sub>1)
###             ("\<^const>HOL.conj" ("_position" Ts\<^sub>1)
###               ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###                 ("_position" es\<^sub>2) ("_position" Ts\<^sub>2)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 154 of "$AFP/CoreC++/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("_applC" ("_position" Val) ("_position" v)) ("_position" T))
###     ("\<^const>HOL.eq" ("_applC" ("_position" typeof) ("_position" v))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("_applC" ("_position" Val) ("_position" v))
###     ("\<^const>HOL.eq" ("_position" T)
###       ("\<^const>HOL.eq" ("_applC" ("_position" typeof) ("_position" v))
###         ("_applC" ("_position" Some) ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### typeof ?v = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Val ?v :: ?T
### Ignoring duplicate safe introduction (intro!)
### typeof ?v = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Val ?v :: ?T
### Ambiguous input (line 161 of "$AFP/CoreC++/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("_applC" ("_position" Var) ("_position" V)) ("_position" T))
###     ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("_applC" ("_position" Var) ("_position" V))
###     ("\<^const>HOL.eq" ("_position" T)
###       ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###         ("_applC" ("_position" Some) ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### ?E ?V = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Var ?V :: ?T
### Ignoring duplicate safe introduction (intro!)
### ?E ?V = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Var ?V :: ?T
### Ambiguous input (line 168 of "$AFP/CoreC++/WellType.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Seq" ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))
###     ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###       ("\<^const>HOL.conj"
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>1) ("_position" T\<^sub>1))
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" T\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.Seq" ("_position" e\<^sub>1)
###       ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" T\<^sub>2)
###       ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###         ("\<^const>HOL.conj"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>1) ("_position" T\<^sub>1))
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Seq" ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))
###     ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###       ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1)
###         ("\<^const>HOL.conj" ("_position" T\<^sub>1)
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.Seq" ("_position" e\<^sub>1)
###       ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" T\<^sub>2)
###       ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>1)
###           ("\<^const>HOL.conj" ("_position" T\<^sub>1)
###             ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###               ("_position" e\<^sub>2) ("_position" T\<^sub>2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
  Proving monotonicity ...
### Ambiguous input (line 190 of "$AFP/CoreC++/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.LAss"
###       ("\<^const>Expr.expr.FAcc" ("_position" e) ("_position" F)
###         ("_position" Cs))
###       ("_position" v))
###     ("_position" T)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.FAss" ("_position" e) ("_position" F)
###       ("_position" Cs) ("_position" v))
###     ("_position" T)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.WellType"
### 0.742s elapsed time, 2.391s cpu time, 0.174s GC time
Loading theory "Draft.WellForm" (required by "Draft.ProgressTemplates" via "Draft.Progress" via "Draft.Equivalence" via "Draft.WWellForm")
Loading theory "Draft.WellTypeRT" (required by "Draft.ProgressTemplates" via "Draft.Progress" via "Draft.Conform")
consts
  typeof_h ::
    "(char list *
      base list *
      (char list * ty) list *
      (char list * ty list * ty * char list list * expr) list) list
     => (nat
         => (char list *
             (char list list * (char list => val option)) set) option)
        => val => ty option"
### Ambiguous input (line 94 of "$AFP/CoreC++/WellTypeRT.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt" ("_position" P) ("_position" E) ("_position" h)
###         ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" Cs)
###           ("\<^const>List.list.Nil")))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>SubObj.LeastFieldDecl" ("_position" P) ("_position" C)
###             ("_position" F) ("_position" T) ("_position" Cs)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>WTrt" ("_position" P) ("_position" E) ("_position" h)
###               ("_position" e\<^sub>2) ("_position" T')))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                 ("_position" T))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt" ("_position" P) ("_position" E) ("_position" h)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" T))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt" ("_position" P) ("_position" E) ("_position" h)
###         ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" Cs)
###           ("\<^const>List.list.Nil")))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>SubObj.LeastFieldDecl" ("_position" P) ("_position" C)
###             ("_position" F) ("_position" T) ("_position" Cs)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>WTrt" ("_position" P) ("_position" E) ("_position" h)
###               ("_position" e\<^sub>2) ("_position" T')))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                 ("_position" T))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt" ("_position" P) ("_position" E) ("_position" h)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" T))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 99 of "$AFP/CoreC++/WellTypeRT.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt" ("_position" P) ("_position" E) ("_position" h)
###         ("_position" e\<^sub>1) ("_position" NT)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WTrt" ("_position" P) ("_position" E) ("_position" h)
###           ("_position" e\<^sub>2) ("_position" T')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt" ("_position" P) ("_position" E) ("_position" h)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" T))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt" ("_position" P) ("_position" E) ("_position" h)
###         ("_position" e\<^sub>1) ("_position" NT)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WTrt" ("_position" P) ("_position" E) ("_position" h)
###           ("_position" e\<^sub>2) ("_position" T')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt" ("_position" P) ("_position" E) ("_position" h)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" T))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "WTrt", "WTrts"
  Proving monotonicity ...
Proofs for inductive predicate(s) "redp", "redsp"
### Ambiguous input (line 553 of "$AFP/CoreC++/WellForm.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" Cs)
###     ("\<^const>SubObj.leq_path" ("_position" P) ("_position" C)
###       ("_list" ("_position" C))
###       ("\<^const>List.append" ("_position" Cs) ("_list" ("_position" D))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" Cs)
###     ("\<^const>List.append"
###       ("\<^const>SubObj.leq_path" ("_position" P) ("_position" C)
###         ("_list" ("_position" C)) ("_position" Cs))
###       ("_list" ("_position" D)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
  Proving monotonicity ...
### Ignoring duplicate safe introduction (intro!)
### ?P,?E,?h \<turnstile> [] [:] []
### Ignoring duplicate safe introduction (intro!)
### ?P,?E,?h \<turnstile> [] [:] []
### Ambiguous input (line 923 of "$AFP/CoreC++/WellForm.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SubObj.appendPath"
###     ("\<^const>SubObj.leq_path" ("_position" P) ("_position" C)
###       ("_position" Cs) ("_position" Cs'))
###     ("_position" Cs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SubObj.leq_path" ("_position" P) ("_position" C)
###     ("_position" Cs)
###     ("\<^const>SubObj.appendPath" ("_position" Cs') ("_position" Cs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### ?P \<turnstile> typeof\<^bsub>?h\<^esub> ?v = \<lfloor>?T\<rfloor> ==>
### ?P,?E,?h \<turnstile> Val ?v : ?T
### Ignoring duplicate safe introduction (intro!)
### ?E ?V = \<lfloor>?T\<rfloor> ==> ?P,?E,?h \<turnstile> Var ?V : ?T
### Ignoring duplicate safe introduction (intro!)
### ?P \<turnstile> typeof\<^bsub>?h\<^esub> ?v = \<lfloor>?T\<rfloor> ==>
### ?P,?E,?h \<turnstile> Val ?v : ?T
### Ignoring duplicate safe introduction (intro!)
### ?E ?V = \<lfloor>?T\<rfloor> ==> ?P,?E,?h \<turnstile> Var ?V : ?T
### Ambiguous input (line 169 of "$AFP/CoreC++/WellTypeRT.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" Ts)
###     ("\<^const>HOL.eq"
###       ("\<^const>WellTypeRT.WTrts" ("_position" P) ("_position" E)
###         ("_position" h)
###         ("\<^const>List.append" ("_position" es\<^sub>1)
###           ("_position" es\<^sub>2))
###         ("_position" Ts))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Ts\<^sub>1) ("_position" Ts\<^sub>2))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" Ts)
###             ("\<^const>List.append" ("_position" Ts\<^sub>1)
###               ("_position" Ts\<^sub>2)))
###           ("\<^const>HOL.conj"
###             ("\<^const>WellTypeRT.WTrts" ("_position" P) ("_position" E)
###               ("_position" h) ("_position" es\<^sub>1)
###               ("_position" Ts\<^sub>1))
###             ("\<^const>WellTypeRT.WTrts" ("_position" P) ("_position" E)
###               ("_position" h) ("_position" es\<^sub>2)
###               ("_position" Ts\<^sub>2))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" Ts)
###     ("\<^const>HOL.eq"
###       ("\<^const>WellTypeRT.WTrts" ("_position" P) ("_position" E)
###         ("_position" h)
###         ("\<^const>List.append" ("_position" es\<^sub>1)
###           ("_position" es\<^sub>2))
###         ("_position" Ts))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Ts\<^sub>1) ("_position" Ts\<^sub>2))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" Ts)
###             ("\<^const>List.append" ("_position" Ts\<^sub>1)
###               ("_position" Ts\<^sub>2)))
###           ("\<^const>WellTypeRT.WTrts" ("_position" P) ("_position" E)
###             ("_position" h) ("_position" es\<^sub>1)
###             ("\<^const>HOL.conj" ("_position" Ts\<^sub>1)
###               ("\<^const>WellTypeRT.WTrts" ("_position" P) ("_position" E)
###                 ("_position" h) ("_position" es\<^sub>2)
###                 ("_position" Ts\<^sub>2)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1647 of "$AFP/CoreC++/WellForm.thy") produces 9 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" Ts)
###       ("_idts" ("_position" T)
###         ("_idts" ("_position" m)
###           ("_idts" ("_position" Cs) ("_position" Cs')))))
###     ("\<^const>HOL.conj"
###       ("\<^const>SubObj.path_via" ("_position" P) ("_position" D)
###         ("_position" C) ("_position" Cs'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>SubObj.leq_path" ("_position" P) ("_position" D)
###             ("_position" Ds)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj"
###                 ("\<^const>SubObj.appendPath" ("_position" Cs')
###                   ("_position" Cs))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.not_equal" ("_position" Cs)
###                     ("\<^const>List.list.Nil"))
###                   ("\<^const>SubObj.HasMethodDef" ("_position" P)
###                     ("_position" C) ("_position" M)
###                     ("_tuple" ("_position" Ts)
###                       ("_tuple_args" ("_position" T)
###                         ("_tuple_arg" ("_position" m))))
###                     ("_position" Cs))))
###               ("_position" Ts)))
###           ("_position" Ts'))
###         ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###           ("_position" T))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" Ts)
###       ("_idts" ("_position" T)
###         ("_idts" ("_position" m)
###           ("_idts" ("_position" Cs) ("_position" Cs')))))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>SubObj.path_via" ("_position" P) ("_position" D)
###           ("_position" C) ("_position" Cs'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.not_equal"
###             ("\<^const>SubObj.leq_path" ("_position" P) ("_position" D)
###               ("_position" Ds)
###               ("\<^const>HOL.conj"
###                 ("\<^const>SubObj.appendPath" ("_position" Cs')
###                   ("_position" Cs))
###                 ("_position" Cs)))
###             ("\<^const>List.list.Nil"))
###           ("\<^const>SubObj.HasMethodDef" ("_position" P) ("_position" C)
###             ("_position" M)
###             ("_tuple" ("_position" Ts)
###               ("_tuple_args" ("_position" T)
###                 ("_tuple_arg" ("_position" m))))
###             ("_position" Cs))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts) ("_position" Ts'))
###         ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###           ("_position" T))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" Ts)
###       ("_idts" ("_position" T)
###         ("_idts" ("_position" m)
###           ("_idts" ("_position" Cs) ("_position" Cs')))))
###     ("\<^const>HOL.conj"
###       ("\<^const>SubObj.path_via" ("_position" P) ("_position" D)
###         ("_position" C) ("_position" Cs'))
###       ("\<^const>SubObj.leq_path" ("_position" P) ("_position" D)
###         ("_position" Ds)
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj"
###             ("\<^const>SubObj.appendPath" ("_position" Cs')
###               ("_position" Cs))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.not_equal" ("_position" Cs)
###                 ("\<^const>List.list.Nil"))
###               ("\<^const>SubObj.HasMethodDef" ("_position" P)
###                 ("_position" C) ("_position" M)
###                 ("_tuple" ("_position" Ts)
###                   ("_tuple_args" ("_position" T)
###                     ("_tuple_arg" ("_position" m))))
###                 ("_position" Cs))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" Ts) ("_position" Ts'))
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" Ts)
###       ("_idts" ("_position" T)
###         ("_idts" ("_position" m)
###           ("_idts" ("_position" Cs) ("_position" Cs')))))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>SubObj.path_via" ("_position" P) ("_position" D)
###           ("_position" C) ("_position" Cs'))
###         ("\<^const>SubObj.leq_path" ("_position" P) ("_position" D)
###           ("_position" Ds)
###           ("\<^const>HOL.conj"
###             ("\<^const>SubObj.appendPath" ("_position" Cs')
###               ("_position" Cs))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.not_equal" ("_position" Cs)
###                 ("\<^const>List.list.Nil"))
###               ("\<^const>SubObj.HasMethodDef" ("_position" P)
###                 ("_position" C) ("_position" M)
###                 ("_tuple" ("_position" Ts)
###                   ("_tuple_args" ("_position" T)
###                     ("_tuple_arg" ("_position" m))))
###                 ("_position" Cs))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts) ("_position" Ts'))
###         ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###           ("_position" T))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" Ts)
###       ("_idts" ("_position" T)
###         ("_idts" ("_position" m)
###           ("_idts" ("_position" Cs) ("_position" Cs')))))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>SubObj.path_via" ("_position" P) ("_position" D)
###           ("_position" C) ("_position" Cs'))
###         ("\<^const>HOL.conj"
###           ("\<^const>SubObj.leq_path" ("_position" P) ("_position" D)
###             ("_position" Ds)
###             ("\<^const>SubObj.appendPath" ("_position" Cs')
###               ("_position" Cs)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" Cs)
###               ("\<^const>List.list.Nil"))
###             ("\<^const>SubObj.HasMethodDef" ("_position" P) ("_position" C)
###               ("_position" M)
###               ("_tuple" ("_position" Ts)
###                 ("_tuple_args" ("_position" T)
###                   ("_tuple_arg" ("_position" m))))
###               ("_position" Cs)))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts) ("_position" Ts'))
###         ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###           ("_position" T))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" Ts)
###       ("_idts" ("_position" T)
###         ("_idts" ("_position" m)
###           ("_idts" ("_position" Cs) ("_position" Cs')))))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>SubObj.path_via" ("_position" P) ("_position" D)
###           ("_position" C) ("_position" Cs'))
###         ("\<^const>HOL.conj"
###           ("\<^const>SubObj.appendPath"
###             ("\<^const>SubObj.leq_path" ("_position" P) ("_position" D)
###               ("_position" Ds) ("_position" Cs'))
###             ("_position" Cs))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" Cs)
###               ("\<^const>List.list.Nil"))
###             ("\<^const>SubObj.HasMethodDef" ("_position" P) ("_position" C)
###               ("_position" M)
###               ("_tuple" ("_position" Ts)
###                 ("_tuple_args" ("_position" T)
###                   ("_tuple_arg" ("_position" m))))
###               ("_position" Cs)))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts) ("_position" Ts'))
###         ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###           ("_position" T))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" Ts)
###       ("_idts" ("_position" T)
###         ("_idts" ("_position" m)
###           ("_idts" ("_position" Cs) ("_position" Cs')))))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>SubObj.path_via" ("_position" P) ("_position" D)
###           ("_position" C) ("_position" Cs'))
###         ("\<^const>HOL.conj"
###           ("\<^const>SubObj.leq_path" ("_position" P) ("_position" D)
###             ("_position" Ds)
###             ("\<^const>HOL.conj"
###               ("\<^const>SubObj.appendPath" ("_position" Cs')
###                 ("_position" Cs))
###               ("\<^const>HOL.not_equal" ("_position" Cs)
###                 ("\<^const>List.list.Nil"))))
###           ("\<^const>SubObj.HasMethodDef" ("_position" P) ("_position" C)
###             ("_position" M)
###             ("_tuple" ("_position" Ts)
###               ("_tuple_args" ("_position" T)
###                 ("_tuple_arg" ("_position" m))))
###             ("_position" Cs))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts) ("_position" Ts'))
###         ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###           ("_position" T))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" Ts)
###       ("_idts" ("_position" T)
###         ("_idts" ("_position" m)
###           ("_idts" ("_position" Cs) ("_position" Cs')))))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>SubObj.path_via" ("_position" P) ("_position" D)
###           ("_position" C) ("_position" Cs'))
###         ("\<^const>SubObj.HasMethodDef"
###           ("\<^const>SubObj.leq_path" ("_position" P) ("_position" D)
###             ("_position" Ds)
###             ("\<^const>HOL.conj"
###               ("\<^const>SubObj.appendPath" ("_position" Cs')
###                 ("_position" Cs))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.not_equal" ("_position" Cs)
###                   ("\<^const>List.list.Nil"))
###                 ("_position" P))))
###           ("_position" C) ("_position" M)
###           ("_tuple" ("_position" Ts)
###             ("_tuple_args" ("_position" T) ("_tuple_arg" ("_position" m))))
###           ("_position" Cs)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts) ("_position" Ts'))
###         ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###           ("_position" T))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" Ts)
###       ("_idts" ("_position" T)
###         ("_idts" ("_position" m)
###           ("_idts" ("_position" Cs) ("_position" Cs')))))
###     ("\<^const>HOL.conj"
###       ("\<^const>SubObj.path_via" ("_position" P) ("_position" D)
###         ("_position" C) ("_position" Cs'))
###       ("\<^const>HOL.conj"
###         ("\<^const>SubObj.leq_path" ("_position" P) ("_position" D)
###           ("_position" Ds)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.conj"
###               ("\<^const>SubObj.appendPath" ("_position" Cs')
###                 ("_position" Cs))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.not_equal" ("_position" Cs)
###                   ("\<^const>List.list.Nil"))
###                 ("\<^const>SubObj.HasMethodDef" ("_position" P)
###                   ("_position" C) ("_position" M)
###                   ("_tuple" ("_position" Ts)
###                     ("_tuple_args" ("_position" T)
###                       ("_tuple_arg" ("_position" m))))
###                   ("_position" Cs))))
###             ("\<^const>HOL.eq" ("_position" Ts) ("_position" Ts'))))
###         ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###           ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.WellForm"
### 1.194s elapsed time, 4.473s cpu time, 1.249s GC time
Loading theory "Draft.WWellForm" (required by "Draft.ProgressTemplates" via "Draft.Progress" via "Draft.Equivalence")
### theory "Draft.WWellForm"
### 0.055s elapsed time, 0.223s cpu time, 0.000s GC time
### Ambiguous input (line 194 of "$AFP/CoreC++/WellTypeRT.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellTypeRT.WTrt" ("_position" P) ("_position" E)
###     ("_position" h)
###     ("\<^const>Expr.expr.LAss"
###       ("\<^const>Expr.expr.FAcc" ("_position" e) ("_position" F)
###         ("_position" Cs))
###       ("_position" v))
###     ("_position" T)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellTypeRT.WTrt" ("_position" P) ("_position" E)
###     ("_position" h)
###     ("\<^const>Expr.expr.FAss" ("_position" e) ("_position" F)
###       ("_position" Cs) ("_position" v))
###     ("_position" T)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.WellTypeRT"
### 1.583s elapsed time, 5.898s cpu time, 1.402s GC time
Loading theory "Draft.Conform" (required by "Draft.ProgressTemplates" via "Draft.Progress")
### Ambiguous input (line 19 of "$AFP/CoreC++/Conform.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>conf" ("_position" P) ("_position" h) ("_position" v)
###       ("_applC" ("_position" Class) ("_position" C)))
###     ("\<^const>HOL.eq"
###       ("\<^const>HOL.eq"
###         ("_applC"
###           ("\<^const>WellTypeRT.typeof_h" ("_position" P) ("_position" h))
###           ("_position" v))
###         ("_applC"
###           ("\<^const>WellTypeRT.typeof_h"
###             ("\<^const>HOL.disj"
###               ("_applC" ("_position" Some)
###                 ("_applC" ("_position" Class) ("_position" C)))
###               ("_position" P))
###             ("_position" h))
###           ("_position" v)))
###       ("_applC" ("_position" Some) ("_position" NT)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>conf" ("_position" P) ("_position" h) ("_position" v)
###       ("_applC" ("_position" Class) ("_position" C)))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.eq"
###         ("_applC"
###           ("\<^const>WellTypeRT.typeof_h" ("_position" P) ("_position" h))
###           ("_position" v))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" Class) ("_position" C))))
###       ("\<^const>HOL.eq"
###         ("_applC"
###           ("\<^const>WellTypeRT.typeof_h" ("_position" P) ("_position" h))
###           ("_position" v))
###         ("_applC" ("_position" Some) ("_position" NT))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>conf" ("_position" P) ("_position" h) ("_position" v)
###       ("_applC" ("_position" Class) ("_position" C)))
###     ("\<^const>HOL.eq"
###       ("_applC"
###         ("\<^const>WellTypeRT.typeof_h"
###           ("\<^const>HOL.disj"
###             ("\<^const>HOL.eq"
###               ("_applC"
###                 ("\<^const>WellTypeRT.typeof_h" ("_position" P)
###                   ("_position" h))
###                 ("_position" v))
###               ("_applC" ("_position" Some)
###                 ("_applC" ("_position" Class) ("_position" C))))
###             ("_position" P))
###           ("_position" h))
###         ("_position" v))
###       ("_applC" ("_position" Some) ("_position" NT)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>conf" ("_position" P) ("_position" h) ("_position" v)
###       ("_applC" ("_position" Class) ("_position" C)))
###     ("\<^const>HOL.eq"
###       ("_applC"
###         ("\<^const>WellTypeRT.typeof_h" ("_position" P) ("_position" h))
###         ("_cargs"
###           ("\<^const>WellTypeRT.typeof_h"
###             ("\<^const>HOL.disj"
###               ("\<^const>HOL.eq" ("_position" v)
###                 ("_applC" ("_position" Some)
###                   ("_applC" ("_position" Class) ("_position" C))))
###               ("_position" P))
###             ("_position" h))
###           ("_position" v)))
###       ("_applC" ("_position" Some) ("_position" NT)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>conf" ("_position" P) ("_position" h) ("_position" v)
###       ("_applC" ("_position" Class) ("_position" C)))
###     ("\<^const>HOL.eq"
###       ("\<^const>HOL.eq"
###         ("_applC"
###           ("\<^const>WellTypeRT.typeof_h" ("_position" P) ("_position" h))
###           ("_position" v))
###         ("_applC" ("_position" Some)
###           ("_cargs"
###             ("\<^const>WellTypeRT.typeof_h"
###               ("\<^const>HOL.disj"
###                 ("_applC" ("_position" Class) ("_position" C))
###                 ("_position" P))
###               ("_position" h))
###             ("_position" v))))
###       ("_applC" ("_position" Some) ("_position" NT)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  conf ::
    "(char list *
      base list *
      (char list * ty) list *
      (char list * ty list * ty * char list list * expr) list) list
     => (nat
         => (char list *
             (char list list * (char list => val option)) set) option)
        => val => ty => bool"
### Ambiguous input (line 33 of "$AFP/CoreC++/Conform.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>hconf" ("_position" P) ("_position" h))
###   ("\<^const>HOL.conj"
###     ("_tuple"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" obj))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###             ("_applC" ("_position" Some) ("_position" obj)))
###           ("_position" P)))
###       ("_tuple_arg" ("\<^fixed>hconf" ("_position" h) ("_position" obj))))
###     ("_applC" ("_position" preallocated) ("_position" h))))
### ("\<^const>Pure.eq" ("\<^fixed>hconf" ("_position" P) ("_position" h))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" obj))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some) ("_position" obj)))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" h)
###           ("_position" obj))))
###     ("_applC" ("_position" preallocated) ("_position" h))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 203 of "$AFP/CoreC++/Conform.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>envconf" ("_position" P) ("_position" E))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" V) ("_position" T))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###         ("_applC" ("_position" Some) ("_position" T)))
###       ("_applC" ("_position" is_type)
###         ("_cargs" ("_position" P) ("_position" T))))))
### ("\<^const>Pure.eq"
###   ("\<^const>Conform.hconf" ("_position" P) ("_position" E))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" V) ("_position" T))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###         ("_applC" ("_position" Some) ("_position" T)))
###       ("_applC" ("_position" is_type)
###         ("_cargs" ("_position" P) ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 211 of "$AFP/CoreC++/Conform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^fixed>type_conf" ("_position" P) ("_position" E) ("_position" h)
###       ("_position" e) ("_position" Void))
###     ("\<^const>WellTypeRT.WTrt" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" e) ("_position" Void))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>type_conf" ("_position" P) ("_position" E) ("_position" h)
###     ("_position" e)
###     ("\<^const>HOL.iff" ("_position" Void)
###       ("\<^const>WellTypeRT.WTrt" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" e) ("_position" Void)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 212 of "$AFP/CoreC++/Conform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^fixed>type_conf" ("_position" P) ("_position" E) ("_position" h)
###       ("_position" e) ("_position" Boolean))
###     ("\<^const>WellTypeRT.WTrt" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" e) ("_position" Boolean))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>type_conf" ("_position" P) ("_position" E) ("_position" h)
###     ("_position" e)
###     ("\<^const>HOL.iff" ("_position" Boolean)
###       ("\<^const>WellTypeRT.WTrt" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" e) ("_position" Boolean)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 213 of "$AFP/CoreC++/Conform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^fixed>type_conf" ("_position" P) ("_position" E) ("_position" h)
###       ("_position" e) ("_position" Integer))
###     ("\<^const>WellTypeRT.WTrt" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" e) ("_position" Integer))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>type_conf" ("_position" P) ("_position" E) ("_position" h)
###     ("_position" e)
###     ("\<^const>HOL.iff" ("_position" Integer)
###       ("\<^const>WellTypeRT.WTrt" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" e) ("_position" Integer)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 214 of "$AFP/CoreC++/Conform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^fixed>type_conf" ("_position" P) ("_position" E) ("_position" h)
###       ("_position" e) ("_position" NT))
###     ("\<^const>WellTypeRT.WTrt" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" e) ("_position" NT))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>type_conf" ("_position" P) ("_position" E) ("_position" h)
###     ("_position" e)
###     ("\<^const>HOL.iff" ("_position" NT)
###       ("\<^const>WellTypeRT.WTrt" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" e) ("_position" NT)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 215 of "$AFP/CoreC++/Conform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^fixed>type_conf" ("_position" P) ("_position" E) ("_position" h)
###       ("_position" e) ("_applC" ("_position" Class) ("_position" C)))
###     ("\<^const>WellTypeRT.WTrt" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" e)
###       ("\<^const>HOL.disj" ("_applC" ("_position" Class) ("_position" C))
###         ("\<^const>WellTypeRT.WTrt" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" e) ("_position" NT))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>type_conf" ("_position" P) ("_position" E) ("_position" h)
###     ("_position" e)
###     ("\<^const>HOL.iff" ("_applC" ("_position" Class) ("_position" C))
###       ("\<^const>WellTypeRT.WTrt" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" e)
###         ("\<^const>HOL.disj" ("_applC" ("_position" Class) ("_position" C))
###           ("\<^const>WellTypeRT.WTrt" ("_position" P) ("_position" E)
###             ("_position" h) ("_position" e) ("_position" NT)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^fixed>type_conf" ("_position" P) ("_position" E) ("_position" h)
###       ("_position" e) ("_applC" ("_position" Class) ("_position" C)))
###     ("\<^const>HOL.disj"
###       ("\<^const>WellTypeRT.WTrt" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" e)
###         ("_applC" ("_position" Class) ("_position" C)))
###       ("\<^const>WellTypeRT.WTrt" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" e) ("_position" NT)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>type_conf" ("_position" P) ("_position" E) ("_position" h)
###     ("_position" e)
###     ("\<^const>HOL.iff" ("_applC" ("_position" Class) ("_position" C))
###       ("\<^const>HOL.disj"
###         ("\<^const>WellTypeRT.WTrt" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" e)
###           ("_applC" ("_position" Class) ("_position" C)))
###         ("\<^const>WellTypeRT.WTrt" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" e) ("_position" NT))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  type_conf ::
    "(char list *
      base list *
      (char list * ty) list *
      (char list * ty list * ty * char list list * expr) list) list
     => (char list => ty option)
        => (nat
            => (char list *
                (char list list * (char list => val option)) set) option)
           => expr => ty => bool"
### Ambiguous input (line 222 of "$AFP/CoreC++/Conform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^fixed>types_conf" ("_position" P) ("_position" E) ("_position" h)
###       ("\<^const>List.list.Nil") ("\<^const>List.list.Nil"))
###     ("_position" True)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>types_conf" ("_position" P) ("_position" E) ("_position" h)
###     ("\<^const>List.list.Nil")
###     ("\<^const>HOL.iff" ("\<^const>List.list.Nil") ("_position" True))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 223 of "$AFP/CoreC++/Conform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^fixed>types_conf" ("_position" P) ("_position" E) ("_position" h)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts)))
###     ("\<^const>Conform.type_conf" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" e)
###       ("\<^const>HOL.conj" ("_position" T)
###         ("\<^fixed>types_conf" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" es) ("_position" Ts))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>types_conf" ("_position" P) ("_position" E) ("_position" h)
###     ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###     ("\<^const>HOL.iff"
###       ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts))
###       ("\<^const>Conform.type_conf" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" e)
###         ("\<^const>HOL.conj" ("_position" T)
###           ("\<^fixed>types_conf" ("_position" P) ("_position" E)
###             ("_position" h) ("_position" es) ("_position" Ts)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^fixed>types_conf" ("_position" P) ("_position" E) ("_position" h)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts)))
###     ("\<^const>HOL.conj"
###       ("\<^const>Conform.type_conf" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" e) ("_position" T))
###       ("\<^fixed>types_conf" ("_position" P) ("_position" E) ("_position" h)
###         ("_position" es) ("_position" Ts)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>types_conf" ("_position" P) ("_position" E) ("_position" h)
###     ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###     ("\<^const>HOL.iff"
###       ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts))
###       ("\<^const>HOL.conj"
###         ("\<^const>Conform.type_conf" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" e) ("_position" T))
###         ("\<^fixed>types_conf" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" es) ("_position" Ts))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 225 of "$AFP/CoreC++/Conform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^fixed>types_conf" ("_position" P) ("_position" E) ("_position" h)
###       ("_position" es) ("_position" Ts))
###     ("_position" False)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>types_conf" ("_position" P) ("_position" E) ("_position" h)
###     ("_position" es)
###     ("\<^const>HOL.iff" ("_position" Ts) ("_position" False))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order:
  "(%p. size_list size (snd (snd (snd (snd p))))) <*mlex*> {}"
### Ambiguous input (line 248 of "$AFP/CoreC++/Conform.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_idts" ("_position" es) ("_position" Ts))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" es))
###           ("_applC" ("_position" length) ("_position" Ts'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" types_conf)
###             ("_cargs" ("_position" P)
###               ("_cargs" ("_position" E)
###                 ("_cargs" ("_position" h)
###                   ("_cargs" ("_position" es) ("_position" Ts')))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widens" ("_position" P) ("_position" Ts')
###               ("_position" Ts))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" Ts'')
###         ("\<^const>WellTypeRT.WTrts" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" es)
###           ("\<^const>HOL.conj" ("_position" Ts'')
###             ("\<^const>TypeRel.widens" ("_position" P) ("_position" Ts'')
###               ("_position" Ts))))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" es) ("_position" Ts))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" es))
###           ("_applC" ("_position" length) ("_position" Ts'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" types_conf)
###             ("_cargs" ("_position" P)
###               ("_cargs" ("_position" E)
###                 ("_cargs" ("_position" h)
###                   ("_cargs" ("_position" es) ("_position" Ts')))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widens" ("_position" P) ("_position" Ts')
###               ("_position" Ts))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" Ts'')
###         ("\<^const>HOL.conj"
###           ("\<^const>WellTypeRT.WTrts" ("_position" P) ("_position" E)
###             ("_position" h) ("_position" es) ("_position" Ts''))
###           ("\<^const>TypeRel.widens" ("_position" P) ("_position" Ts'')
###             ("_position" Ts)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Conform"
### 0.679s elapsed time, 2.595s cpu time, 0.179s GC time
### Ambiguous input (line 247 of "$AFP/CoreC++/BigStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BigStep.eval" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.LAss"
###       ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs))
###       ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BigStep.eval" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###       ("_position" Cs) ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.BigStep"
### 3.645s elapsed time, 12.263s cpu time, 1.822s GC time
Loading theory "Draft.DefAss" (required by "Draft.ProgressTemplates" via "Draft.Progress")
### Ambiguous input (line 18 of "$AFP/CoreC++/DefAss.thy") produces 8 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>hyperUn" ("_position" A) ("_position" B))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" None))
###       ("_case1"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("_case_syntax" ("_position" B)
###           ("_case2" ("_case1" ("_position" None) ("_position" None))
###             ("_case1" ("\<^const>Option.option.Some" ("_position" B))
###               ("\<^const>Option.option.Some"
###                 ("\<^const>Set.union" ("_position" A)
###                   ("_position" B))))))))))
### ("\<^const>Pure.eq" ("\<^fixed>hyperUn" ("_position" A) ("_position" B))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" None))
###       ("_case1" ("\<^const>Option.option.Some" ("_position" A))
###         ("_case_syntax" ("_position" B)
###           ("_case2" ("_case1" ("_position" None) ("_position" None))
###             ("_case1" ("\<^const>Option.option.Some" ("_position" B))
###               ("\<^const>Option.option.Some"
###                 ("\<^const>Set.union" ("_position" A)
###                   ("_position" B))))))))))
### ("\<^const>Pure.eq" ("\<^fixed>hyperUn" ("_position" A) ("_position" B))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" None))
###       ("_case1"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("_case_syntax" ("_position" B)
###           ("_case2" ("_case1" ("_position" None) ("_position" None))
###             ("_case1"
###               ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                 ("_position" B))
###               ("\<^const>Option.option.Some"
###                 ("\<^const>Set.union" ("_position" A)
###                   ("_position" B))))))))))
### ("\<^const>Pure.eq" ("\<^fixed>hyperUn" ("_position" A) ("_position" B))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" None))
###       ("_case1" ("\<^const>Option.option.Some" ("_position" A))
###         ("_case_syntax" ("_position" B)
###           ("_case2" ("_case1" ("_position" None) ("_position" None))
###             ("_case1"
###               ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                 ("_position" B))
###               ("\<^const>Option.option.Some"
###                 ("\<^const>Set.union" ("_position" A)
###                   ("_position" B))))))))))
### ("\<^const>Pure.eq" ("\<^fixed>hyperUn" ("_position" A) ("_position" B))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" None))
###       ("_case1"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("_case_syntax" ("_position" B)
###           ("_case2" ("_case1" ("_position" None) ("_position" None))
###             ("_case1" ("\<^const>Option.option.Some" ("_position" B))
###               ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                 ("\<^const>Set.union" ("_position" A)
###                   ("_position" B))))))))))
### ("\<^const>Pure.eq" ("\<^fixed>hyperUn" ("_position" A) ("_position" B))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" None))
###       ("_case1" ("\<^const>Option.option.Some" ("_position" A))
###         ("_case_syntax" ("_position" B)
###           ("_case2" ("_case1" ("_position" None) ("_position" None))
###             ("_case1" ("\<^const>Option.option.Some" ("_position" B))
###               ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                 ("\<^const>Set.union" ("_position" A)
###                   ("_position" B))))))))))
### ("\<^const>Pure.eq" ("\<^fixed>hyperUn" ("_position" A) ("_position" B))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" None))
###       ("_case1"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("_case_syntax" ("_position" B)
###           ("_case2" ("_case1" ("_position" None) ("_position" None))
###             ("_case1"
###               ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                 ("_position" B))
###               ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                 ("\<^const>Set.union" ("_position" A)
###                   ("_position" B))))))))))
### ("\<^const>Pure.eq" ("\<^fixed>hyperUn" ("_position" A) ("_position" B))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" None))
###       ("_case1" ("\<^const>Option.option.Some" ("_position" A))
###         ("_case_syntax" ("_position" B)
###           ("_case2" ("_case1" ("_position" None) ("_position" None))
###             ("_case1"
###               ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                 ("_position" B))
###               ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                 ("\<^const>Set.union" ("_position" A)
###                   ("_position" B))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 22 of "$AFP/CoreC++/DefAss.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.eq" ("\<^fixed>hyperInt" ("_position" A) ("_position" B))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" B))
###       ("_case1"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("_case_syntax" ("_position" B)
###           ("_case2"
###             ("_case1" ("_position" None)
###               ("\<^const>Option.option.Some" ("_position" A)))
###             ("_case1" ("\<^const>Option.option.Some" ("_position" B))
###               ("\<^const>Option.option.Some"
###                 ("\<^const>Set.inter" ("_position" A)
###                   ("_position" B))))))))))
### ("\<^const>Pure.eq" ("\<^fixed>hyperInt" ("_position" A) ("_position" B))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" B))
###       ("_case1" ("\<^const>Option.option.Some" ("_position" A))
###         ("_case_syntax" ("_position" B)
###           ("_case2"
###             ("_case1" ("_position" None)
###               ("\<^const>Option.option.Some" ("_position" A)))
###             ("_case1" ("\<^const>Option.option.Some" ("_position" B))
###               ("\<^const>Option.option.Some"
###                 ("\<^const>Set.inter" ("_position" A)
###                   ("_position" B))))))))))
### ("\<^const>Pure.eq" ("\<^fixed>hyperInt" ("_position" A) ("_position" B))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" B))
###       ("_case1"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("_case_syntax" ("_position" B)
###           ("_case2"
###             ("_case1" ("_position" None)
###               ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                 ("_position" A)))
###             ("_case1" ("\<^const>Option.option.Some" ("_position" B))
###               ("\<^const>Option.option.Some"
###                 ("\<^const>Set.inter" ("_position" A)
###                   ("_position" B))))))))))
### ("\<^const>Pure.eq" ("\<^fixed>hyperInt" ("_position" A) ("_position" B))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" B))
###       ("_case1" ("\<^const>Option.option.Some" ("_position" A))
###         ("_case_syntax" ("_position" B)
###           ("_case2"
###             ("_case1" ("_position" None)
###               ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                 ("_position" A)))
###             ("_case1" ("\<^const>Option.option.Some" ("_position" B))
###               ("\<^const>Option.option.Some"
###                 ("\<^const>Set.inter" ("_position" A)
###                   ("_position" B))))))))))
### ("\<^const>Pure.eq" ("\<^fixed>hyperInt" ("_position" A) ("_position" B))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" B))
###       ("_case1"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("_case_syntax" ("_position" B)
###           ("_case2"
###             ("_case1" ("_position" None)
###               ("\<^const>Option.option.Some" ("_position" A)))
###             ("_case1"
###               ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                 ("_position" B))
###               ("\<^const>Option.option.Some"
###                 ("\<^const>Set.inter" ("_position" A)
###                   ("_position" B))))))))))
### ("\<^const>Pure.eq" ("\<^fixed>hyperInt" ("_position" A) ("_position" B))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" B))
###       ("_case1" ("\<^const>Option.option.Some" ("_position" A))
###         ("_case_syntax" ("_position" B)
###           ("_case2"
###             ("_case1" ("_position" None)
###               ("\<^const>Option.option.Some" ("_position" A)))
###             ("_case1"
###               ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                 ("_position" B))
###               ("\<^const>Option.option.Some"
###                 ("\<^const>Set.inter" ("_position" A)
###                   ("_position" B))))))))))
### ("\<^const>Pure.eq" ("\<^fixed>hyperInt" ("_position" A) ("_position" B))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" B))
###       ("_case1"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("_case_syntax" ("_position" B)
###           ("_case2"
###             ("_case1" ("_position" None)
###               ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                 ("_position" A)))
###             ("_case1"
###               ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                 ("_position" B))
###               ("\<^const>Option.option.Some"
###                 ("\<^const>Set.inter" ("_position" A)
###                   ("_position" B))))))))))
### ("\<^const>Pure.eq" ("\<^fixed>hyperInt" ("_position" A) ("_position" B))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" B))
###       ("_case1" ("\<^const>Option.option.Some" ("_position" A))
###         ("_case_syntax" ("_position" B)
###           ("_case2"
###             ("_case1" ("_position" None)
###               ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                 ("_position" A)))
###             ("_case1"
###               ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                 ("_position" B))
###               ("\<^const>Option.option.Some"
###                 ("\<^const>Set.inter" ("_position" A)
###                   ("_position" B))))))))))
### ("\<^const>Pure.eq" ("\<^fixed>hyperInt" ("_position" A) ("_position" B))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" B))
###       ("_case1"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("_case_syntax" ("_position" B)
###           ("_case2"
###             ("_case1" ("_position" None)
###               ("\<^const>Option.option.Some" ("_position" A)))
###             ("_case1" ("\<^const>Option.option.Some" ("_position" B))
###               ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                 ("\<^const>Set.inter" ("_position" A)
###                   ("_position" B))))))))))
### ("\<^const>Pure.eq" ("\<^fixed>hyperInt" ("_position" A) ("_position" B))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" B))
###       ("_case1" ("\<^const>Option.option.Some" ("_position" A))
###         ("_case_syntax" ("_position" B)
###           ("_case2"
###             ("_case1" ("_position" None)
###               ("\<^const>Option.option.Some" ("_position" A)))
###             ("_case1" ("\<^const>Option.option.Some" ("_position" B))
###               ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                 ("\<^const>Set.inter" ("_position" A)
###                   ("_position" B))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 26 of "$AFP/CoreC++/DefAss.thy") produces 4 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>hyperDiff1" ("_position" A) ("_position" a))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" None))
###       ("_case1"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("\<^const>Groups.minus_class.minus" ("_position" A)
###             ("_Finset" ("_position" a))))))))
### ("\<^const>Pure.eq" ("\<^fixed>hyperDiff1" ("_position" A) ("_position" a))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" None))
###       ("_case1" ("\<^const>Option.option.Some" ("_position" A))
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("\<^const>Groups.minus_class.minus" ("_position" A)
###             ("_Finset" ("_position" a))))))))
### ("\<^const>Pure.eq" ("\<^fixed>hyperDiff1" ("_position" A) ("_position" a))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" None))
###       ("_case1"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("\<^const>Option.option.Some"
###           ("\<^const>Groups.minus_class.minus" ("_position" A)
###             ("_Finset" ("_position" a))))))))
### ("\<^const>Pure.eq" ("\<^fixed>hyperDiff1" ("_position" A) ("_position" a))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" None))
###       ("_case1" ("\<^const>Option.option.Some" ("_position" A))
###         ("\<^const>Option.option.Some"
###           ("\<^const>Groups.minus_class.minus" ("_position" A)
###             ("_Finset" ("_position" a))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 29 of "$AFP/CoreC++/DefAss.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>hyper_isin" ("_position" a) ("_position" A))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" True))
###       ("_case1"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("\<^const>Set.member" ("_position" a) ("_position" A))))))
### ("\<^const>Pure.eq" ("\<^fixed>hyper_isin" ("_position" a) ("_position" A))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" True))
###       ("_case1" ("\<^const>Option.option.Some" ("_position" A))
###         ("\<^const>Set.member" ("_position" a) ("_position" A))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 32 of "$AFP/CoreC++/DefAss.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>hyper_subset" ("_position" A) ("_position" B))
###   ("_case_syntax" ("_position" B)
###     ("_case2" ("_case1" ("_position" None) ("_position" True))
###       ("_case1"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" B))
###         ("_case_syntax" ("_position" A)
###           ("_case2" ("_case1" ("_position" None) ("_position" False))
###             ("_case1" ("\<^const>Option.option.Some" ("_position" A))
###               ("\<^const>Set.subset_eq" ("_position" A)
###                 ("_position" B)))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>hyper_subset" ("_position" A) ("_position" B))
###   ("_case_syntax" ("_position" B)
###     ("_case2" ("_case1" ("_position" None) ("_position" True))
###       ("_case1" ("\<^const>Option.option.Some" ("_position" B))
###         ("_case_syntax" ("_position" A)
###           ("_case2" ("_case1" ("_position" None) ("_position" False))
###             ("_case1" ("\<^const>Option.option.Some" ("_position" A))
###               ("\<^const>Set.subset_eq" ("_position" A)
###                 ("_position" B)))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>hyper_subset" ("_position" A) ("_position" B))
###   ("_case_syntax" ("_position" B)
###     ("_case2" ("_case1" ("_position" None) ("_position" True))
###       ("_case1"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" B))
###         ("_case_syntax" ("_position" A)
###           ("_case2" ("_case1" ("_position" None) ("_position" False))
###             ("_case1"
###               ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                 ("_position" A))
###               ("\<^const>Set.subset_eq" ("_position" A)
###                 ("_position" B)))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>hyper_subset" ("_position" A) ("_position" B))
###   ("_case_syntax" ("_position" B)
###     ("_case2" ("_case1" ("_position" None) ("_position" True))
###       ("_case1" ("\<^const>Option.option.Some" ("_position" B))
###         ("_case_syntax" ("_position" A)
###           ("_case2" ("_case1" ("_position" None) ("_position" False))
###             ("_case1"
###               ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                 ("_position" A))
###               ("\<^const>Set.subset_eq" ("_position" A)
###                 ("_position" B)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 38 of "$AFP/CoreC++/DefAss.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("\<^const>Set.empty"))
###         ("_position" A))
###       ("_position" A))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("\<^const>Set.empty")))
###       ("_position" A))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Option.option.Some" ("\<^const>Set.empty"))
###         ("_position" A))
###       ("_position" A))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("\<^const>Set.empty")))
###       ("_position" A))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("\<^const>Set.empty"))
###         ("_position" A))
###       ("_position" A))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>Option.option.Some" ("\<^const>Set.empty")))
###       ("_position" A))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Option.option.Some" ("\<^const>Set.empty"))
###         ("_position" A))
###       ("_position" A))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>Option.option.Some" ("\<^const>Set.empty")))
###       ("_position" A))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 41 of "$AFP/CoreC++/DefAss.thy") produces 32 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" B)))
###       ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###         ("\<^const>Set.union" ("_position" A) ("_position" B))))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperDiff1"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("_position" a))
###       ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###         ("\<^const>Groups.minus_class.minus" ("_position" A)
###           ("_Finset" ("_position" a)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Option.option.Some" ("_position" A))
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" B)))
###       ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###         ("\<^const>Set.union" ("_position" A) ("_position" B))))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperDiff1"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("_position" a))
###       ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###         ("\<^const>Groups.minus_class.minus" ("_position" A)
###           ("_Finset" ("_position" a)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("\<^const>Option.option.Some" ("_position" B)))
###       ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###         ("\<^const>Set.union" ("_position" A) ("_position" B))))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperDiff1"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("_position" a))
###       ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###         ("\<^const>Groups.minus_class.minus" ("_position" A)
###           ("_Finset" ("_position" a)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Option.option.Some" ("_position" A))
###         ("\<^const>Option.option.Some" ("_position" B)))
###       ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###         ("\<^const>Set.union" ("_position" A) ("_position" B))))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperDiff1"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("_position" a))
###       ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###         ("\<^const>Groups.minus_class.minus" ("_position" A)
###           ("_Finset" ("_position" a)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" B)))
###       ("\<^const>Option.option.Some"
###         ("\<^const>Set.union" ("_position" A) ("_position" B))))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperDiff1"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("_position" a))
###       ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###         ("\<^const>Groups.minus_class.minus" ("_position" A)
###           ("_Finset" ("_position" a)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Option.option.Some" ("_position" A))
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" B)))
###       ("\<^const>Option.option.Some"
###         ("\<^const>Set.union" ("_position" A) ("_position" B))))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperDiff1"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("_position" a))
###       ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###         ("\<^const>Groups.minus_class.minus" ("_position" A)
###           ("_Finset" ("_position" a)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("\<^const>Option.option.Some" ("_position" B)))
###       ("\<^const>Option.option.Some"
###         ("\<^const>Set.union" ("_position" A) ("_position" B))))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperDiff1"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("_position" a))
###       ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###         ("\<^const>Groups.minus_class.minus" ("_position" A)
###           ("_Finset" ("_position" a)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Option.option.Some" ("_position" A))
###         ("\<^const>Option.option.Some" ("_position" B)))
###       ("\<^const>Option.option.Some"
###         ("\<^const>Set.union" ("_position" A) ("_position" B))))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperDiff1"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("_position" a))
###       ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###         ("\<^const>Groups.minus_class.minus" ("_position" A)
###           ("_Finset" ("_position" a)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" B)))
###       ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###         ("\<^const>Set.union" ("_position" A) ("_position" B))))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperDiff1"
###         ("\<^const>Option.option.Some" ("_position" A)) ("_position" a))
###       ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###         ("\<^const>Groups.minus_class.minus" ("_position" A)
###           ("_Finset" ("_position" a)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Option.option.Some" ("_position" A))
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" B)))
###       ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###         ("\<^const>Set.union" ("_position" A) ("_position" B))))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperDiff1"
###         ("\<^const>Option.option.Some" ("_position" A)) ("_position" a))
###       ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###         ("\<^const>Groups.minus_class.minus" ("_position" A)
###           ("_Finset" ("_position" a)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 53 of "$AFP/CoreC++/DefAss.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_Finset" ("_position" a))))
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_Finset" ("_position" a)))
###         ("_position" A)))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>DefAss.hyperUn"
###           ("\<^const>Option.option.Some" ("_Finset" ("_position" a)))
###           ("_position" B)))
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_Finset" ("_position" a)))
###         ("\<^const>DefAss.hyperUn" ("_position" A) ("_position" B))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>Option.option.Some" ("_Finset" ("_position" a))))
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_Finset" ("_position" a)))
###         ("_position" A)))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>DefAss.hyperUn"
###           ("\<^const>Option.option.Some" ("_Finset" ("_position" a)))
###           ("_position" B)))
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_Finset" ("_position" a)))
###         ("\<^const>DefAss.hyperUn" ("_position" A) ("_position" B))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_Finset" ("_position" a))))
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Option.option.Some" ("_Finset" ("_position" a)))
###         ("_position" A)))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>DefAss.hyperUn"
###           ("\<^const>Option.option.Some" ("_Finset" ("_position" a)))
###           ("_position" B)))
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_Finset" ("_position" a)))
###         ("\<^const>DefAss.hyperUn" ("_position" A) ("_position" B))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>Option.option.Some" ("_Finset" ("_position" a))))
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Option.option.Some" ("_Finset" ("_position" a)))
###         ("_position" A)))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>DefAss.hyperUn"
###           ("\<^const>Option.option.Some" ("_Finset" ("_position" a)))
###           ("_position" B)))
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_Finset" ("_position" a)))
###         ("\<^const>DefAss.hyperUn" ("_position" A) ("_position" B))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_Finset" ("_position" a))))
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_Finset" ("_position" a)))
###         ("_position" A)))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>DefAss.hyperUn"
###           ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###             ("_Finset" ("_position" a)))
###           ("_position" B)))
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_Finset" ("_position" a)))
###         ("\<^const>DefAss.hyperUn" ("_position" A) ("_position" B))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>Option.option.Some" ("_Finset" ("_position" a))))
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_Finset" ("_position" a)))
###         ("_position" A)))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>DefAss.hyperUn"
###           ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###             ("_Finset" ("_position" a)))
###           ("_position" B)))
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_Finset" ("_position" a)))
###         ("\<^const>DefAss.hyperUn" ("_position" A) ("_position" B))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_Finset" ("_position" a))))
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Option.option.Some" ("_Finset" ("_position" a)))
###         ("_position" A)))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>DefAss.hyperUn"
###           ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###             ("_Finset" ("_position" a)))
###           ("_position" B)))
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_Finset" ("_position" a)))
###         ("\<^const>DefAss.hyperUn" ("_position" A) ("_position" B))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>Option.option.Some" ("_Finset" ("_position" a))))
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Option.option.Some" ("_Finset" ("_position" a)))
###         ("_position" A)))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>DefAss.hyperUn"
###           ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###             ("_Finset" ("_position" a)))
###           ("_position" B)))
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_Finset" ("_position" a)))
###         ("\<^const>DefAss.hyperUn" ("_position" A) ("_position" B))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_Finset" ("_position" a))))
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_Finset" ("_position" a)))
###         ("_position" A)))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>DefAss.hyperUn"
###           ("\<^const>Option.option.Some" ("_Finset" ("_position" a)))
###           ("_position" B)))
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Option.option.Some" ("_Finset" ("_position" a)))
###         ("\<^const>DefAss.hyperUn" ("_position" A) ("_position" B))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>Option.option.Some" ("_Finset" ("_position" a))))
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_Finset" ("_position" a)))
###         ("_position" A)))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>DefAss.hyperUn"
###           ("\<^const>Option.option.Some" ("_Finset" ("_position" a)))
###           ("_position" B)))
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Option.option.Some" ("_Finset" ("_position" a)))
###         ("\<^const>DefAss.hyperUn" ("_position" A) ("_position" B))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 60 of "$AFP/CoreC++/DefAss.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>)
###       ("_applC" ("_position" new) ("_position" C)))
###     ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###       ("\<^const>Set.empty"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>)
###       ("_applC" ("_position" new) ("_position" C)))
###     ("\<^const>Option.option.Some" ("\<^const>Set.empty"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 63 of "$AFP/CoreC++/DefAss.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>)
###       ("_applC" ("_position" Val) ("_position" v)))
###     ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###       ("\<^const>Set.empty"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>)
###       ("_applC" ("_position" Val) ("_position" v)))
###     ("\<^const>Option.option.Some" ("\<^const>Set.empty"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 76 of "$AFP/CoreC++/DefAss.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>s) ("\<^const>List.list.Nil"))
###     ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###       ("\<^const>Set.empty"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>s) ("\<^const>List.list.Nil"))
###     ("\<^const>Option.option.Some" ("\<^const>Set.empty"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 65 of "$AFP/CoreC++/DefAss.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>)
###       ("_applC" ("_position" Var) ("_position" V)))
###     ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###       ("\<^const>Set.empty"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>)
###       ("_applC" ("_position" Var) ("_position" V)))
###     ("\<^const>Option.option.Some" ("\<^const>Set.empty"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 66 of "$AFP/CoreC++/DefAss.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>)
###       ("_applC" ("_position" LAss)
###         ("_cargs" ("_position" V) ("_position" e))))
###     ("\<^const>DefAss.hyperUn"
###       ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###         ("_Finset" ("_position" V)))
###       ("_applC" ("_position" \<A>) ("_position" e)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>)
###       ("_applC" ("_position" LAss)
###         ("_cargs" ("_position" V) ("_position" e))))
###     ("\<^const>DefAss.hyperUn"
###       ("\<^const>Option.option.Some" ("_Finset" ("_position" V)))
###       ("_applC" ("_position" \<A>) ("_position" e)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 68 of "$AFP/CoreC++/DefAss.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" \<A>)
###       ("_updbind"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2)))
###     ("\<^const>DefAss.hyperUn"
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>1))
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2)))
###     ("\<^const>DefAss.hyperUn"
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>1))
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2)))
###     ("\<^const>DefAss.hyperUn"
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>1))
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  \<A> :: "expr => char list set option"
  \<A>s :: "expr list => char list set option"
### Ambiguous input (line 88 of "$AFP/CoreC++/DefAss.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<D>)
###       ("_cargs"
###         ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs) ("_position" e\<^sub>2))
###         ("_position" A)))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" \<D>)
###         ("_cargs" ("_position" e\<^sub>1) ("_position" A)))
###       ("_applC" ("_position" \<D>)
###         ("_cargs" ("_position" e\<^sub>2)
###           ("\<^const>DefAss.hyperUn" ("_position" A)
###             ("_applC" ("_position" \<A>) ("_position" e\<^sub>1))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<D>)
###       ("_cargs"
###         ("\<^const>Expr.expr.LAss"
###           ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" Cs))
###           ("_position" e\<^sub>2))
###         ("_position" A)))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" \<D>)
###         ("_cargs" ("_position" e\<^sub>1) ("_position" A)))
###       ("_applC" ("_position" \<D>)
###         ("_cargs" ("_position" e\<^sub>2)
###           ("\<^const>DefAss.hyperUn" ("_position" A)
###             ("_applC" ("_position" \<A>) ("_position" e\<^sub>1))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  \<D> :: "expr => char list set option => bool"
  \<D>s :: "expr list => char list set option => bool"
### Ambiguous input (line 100 of "$AFP/CoreC++/DefAss.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>s)
###       ("_applC" ("_position" map)
###         ("_cargs" ("_position" Val) ("_position" vs))))
###     ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###       ("\<^const>Set.empty"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>s)
###       ("_applC" ("_position" map)
###         ("_cargs" ("_position" Val) ("_position" vs))))
###     ("\<^const>Option.option.Some" ("\<^const>Set.empty"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 107 of "$AFP/CoreC++/DefAss.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" A)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" \<A>) ("_position" e))
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.subset_eq" ("_position" A)
###         ("_applC" ("_position" fv) ("_position" e))))))
### ("\<^const>Pure.all_binder" ("_position" A)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" \<A>) ("_position" e))
###         ("\<^const>Option.option.Some" ("_position" A))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.subset_eq" ("_position" A)
###         ("_applC" ("_position" fv) ("_position" e))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 108 of "$AFP/CoreC++/DefAss.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" A)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" \<A>s) ("_position" es))
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.subset_eq" ("_position" A)
###         ("_applC" ("_position" fvs) ("_position" es))))))
### ("\<^const>Pure.all_binder" ("_position" A)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" \<A>s) ("_position" es))
###         ("\<^const>Option.option.Some" ("_position" A))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.subset_eq" ("_position" A)
###         ("_applC" ("_position" fvs) ("_position" es))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.DefAss"
### 0.246s elapsed time, 0.519s cpu time, 0.043s GC time
### Ignoring duplicate safe introduction (intro!)
### EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==>
### ?x # ?xs = map ?f ?ys
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe introduction (intro!)
### EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==>
### ?x # ?xs = map ?f ?ys
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate rewrite rule:
### ?x1 # ?xs1 = map ?f1 ?ys1 ==
### EX z zs. ?ys1 = z # zs & ?x1 = ?f1 z & ?xs1 = map ?f1 zs
### theory "Draft.SmallStep"
### 4.875s elapsed time, 13.871s cpu time, 2.009s GC time
Loading theory "Draft.Equivalence" (required by "Draft.ProgressTemplates" via "Draft.Progress")
### Ambiguous input (line 526 of "$AFP/CoreC++/Equivalence.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("_position" e) ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e') ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("_position" e) ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss" ("_position" e) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e') ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("_position" e) ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s)
###       ("\<^const>Expr.expr.FAss" ("_position" e') ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("_position" e) ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss" ("_position" e) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s)
###       ("\<^const>Expr.expr.FAss" ("_position" e') ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 536 of "$AFP/CoreC++/Equivalence.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("_position" e) ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" Cs))
###         ("_position" e))
###       ("_position" s)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" Cs))
###         ("_position" e'))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("_position" e) ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss"
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###         ("_position" Cs) ("_position" e))
###       ("_position" s)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" Cs))
###         ("_position" e'))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("_position" e) ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" Cs))
###         ("_position" e))
###       ("_position" s)
###       ("\<^const>Expr.expr.FAss"
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###         ("_position" Cs) ("_position" e'))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("_position" e) ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss"
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###         ("_position" Cs) ("_position" e))
###       ("_position" s)
###       ("\<^const>Expr.expr.FAss"
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###         ("_position" Cs) ("_position" e'))
###       ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 546 of "$AFP/CoreC++/Equivalence.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###         ("_applC" ("_position" ref)
###           ("_tuple" ("_position" a) ("_tuple_arg" ("_position" Cs'))))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_arg" ("_position" l\<^sub>2)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" D) ("_tuple_arg" ("_position" S))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>SubObj.LeastFieldDecl" ("_position" P)
###               ("_applC" ("_position" last) ("_position" Cs'))
###               ("_position" F) ("_position" T) ("_position" Cs)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###                 ("_position" v) ("_position" v')))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" Ds)
###                   ("\<^const>SubObj.appendPath" ("_position" Cs')
###                     ("_position" Cs))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" Ds)
###                       ("_tuple_arg" ("_position" fs)))
###                     ("_position" S))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v'))
###       ("_tuple"
###         ("_MapUpd" ("_position" h\<^sub>2)
###           ("_maplet" ("_position" a)
###             ("_tuple" ("_position" D)
###               ("_tuple_arg"
###                 ("_applC" ("_position" insert)
###                   ("_cargs"
###                     ("_tuple" ("_position" Ds)
###                       ("_tuple_arg"
###                         ("_MapUpd" ("_position" fs)
###                           ("_maplet" ("_position" F) ("_position" v')))))
###                     ("\<^const>Groups.minus_class.minus" ("_position" S)
###                       ("_Finset"
###                         ("_tuple" ("_position" Ds)
###                           ("_tuple_arg" ("_position" fs)))))))))))
###         ("_tuple_arg" ("_position" l\<^sub>2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###         ("_applC" ("_position" ref)
###           ("_tuple" ("_position" a) ("_tuple_arg" ("_position" Cs'))))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_arg" ("_position" l\<^sub>2)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" D) ("_tuple_arg" ("_position" S))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>SubObj.LeastFieldDecl" ("_position" P)
###               ("_applC" ("_position" last) ("_position" Cs'))
###               ("_position" F) ("_position" T) ("_position" Cs)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###                 ("_position" v) ("_position" v')))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" Ds)
###                   ("\<^const>SubObj.appendPath" ("_position" Cs')
###                     ("_position" Cs))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" Ds)
###                       ("_tuple_arg" ("_position" fs)))
###                     ("_position" S))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v'))
###       ("_tuple"
###         ("_MapUpd" ("_position" h\<^sub>2)
###           ("_maplet" ("_position" a)
###             ("_tuple" ("_position" D)
###               ("_tuple_arg"
###                 ("_applC" ("_position" insert)
###                   ("_cargs"
###                     ("_tuple" ("_position" Ds)
###                       ("_tuple_arg"
###                         ("_MapUpd" ("_position" fs)
###                           ("_maplet" ("_position" F) ("_position" v')))))
###                     ("\<^const>Groups.minus_class.minus" ("_position" S)
###                       ("_Finset"
###                         ("_tuple" ("_position" Ds)
###                           ("_tuple_arg" ("_position" fs)))))))))))
###         ("_tuple_arg" ("_position" l\<^sub>2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 561 of "$AFP/CoreC++/Equivalence.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1) ("_position" s\<^sub>0) ("_position" null)
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1) ("_position" s\<^sub>0) ("_position" null)
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 573 of "$AFP/CoreC++/Equivalence.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("_position" e) ("_position" s)
###       ("_applC" ("_position" Throw) ("_position" r)) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s) ("_applC" ("_position" Throw) ("_position" r))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("_position" e) ("_position" s)
###       ("_applC" ("_position" Throw) ("_position" r)) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss" ("_position" e) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s) ("_applC" ("_position" Throw) ("_position" r))
###       ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 582 of "$AFP/CoreC++/Equivalence.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###         ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###           ("_applC" ("_position" Throw) ("_position" r))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_applC" ("_position" Throw) ("_position" r))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###         ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###           ("_applC" ("_position" Throw) ("_position" r))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_applC" ("_position" Throw) ("_position" r))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 764 of "$AFP/CoreC++/Equivalence.thy") produces 8 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("_MapUpd" ("_position" E)
###         ("_maplet" ("_position" V) ("_position" T)))
###       ("_position" e) ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" h)
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" h')
###             ("_idts" ("_position" l')
###               ("_idts" ("_position" v) ("_position" v'))))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_tuple" ("_position" h)
###             ("_tuple_arg"
###               ("_MapUpd" ("_position" l)
###                 ("_maplet" ("_position" V) ("_position" v'))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###             ("_position" v) ("_position" v'))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq" ("_position" s')
###               ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l'))))
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" v'') ("_position" w))
###               ("\<^const>HOL.conj"
###                 ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###                   ("\<^const>Expr.expr.Block" ("_position" V)
###                     ("\<^const>Expr.expr.LAss" ("_position" T)
###                       ("_applC" ("_position" Val) ("_position" v)))
###                     ("_position" e))
###                   ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###                   ("\<^const>Expr.expr.Block" ("_position" V)
###                     ("\<^const>Expr.expr.LAss" ("_position" T)
###                       ("_applC" ("_position" Val) ("_position" v'')))
###                     ("_position" e'))
###                   ("_tuple" ("_position" h')
###                     ("_tuple_arg"
###                       ("_applC" ("_position" l')
###                         ("\<^const>Expr.expr.LAss" ("_position" V)
###                           ("_applC" ("_position" l) ("_position" V)))))))
###                 ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###                   ("_position" v'') ("_position" w))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("_MapUpd" ("_position" E)
###         ("_maplet" ("_position" V) ("_position" T)))
###       ("_position" e) ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" h)
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" h')
###             ("_idts" ("_position" l')
###               ("_idts" ("_position" v) ("_position" v'))))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_tuple" ("_position" h)
###             ("_tuple_arg"
###               ("_MapUpd" ("_position" l)
###                 ("_maplet" ("_position" V) ("_position" v'))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###             ("_position" v) ("_position" v'))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq" ("_position" s')
###               ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l'))))
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" v'') ("_position" w))
###               ("\<^const>HOL.conj"
###                 ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###                   ("\<^const>Syntax.InitBlock" ("_position" V)
###                     ("_position" T)
###                     ("_applC" ("_position" Val) ("_position" v))
###                     ("_position" e))
###                   ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###                   ("\<^const>Expr.expr.Block" ("_position" V)
###                     ("\<^const>Expr.expr.LAss" ("_position" T)
###                       ("_applC" ("_position" Val) ("_position" v'')))
###                     ("_position" e'))
###                   ("_tuple" ("_position" h')
###                     ("_tuple_arg"
###                       ("_applC" ("_position" l')
###                         ("\<^const>Expr.expr.LAss" ("_position" V)
###                           ("_applC" ("_position" l) ("_position" V)))))))
###                 ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###                   ("_position" v'') ("_position" w))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("_MapUpd" ("_position" E)
###         ("_maplet" ("_position" V) ("_position" T)))
###       ("_position" e) ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" h)
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" h')
###             ("_idts" ("_position" l')
###               ("_idts" ("_position" v) ("_position" v'))))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_tuple" ("_position" h)
###             ("_tuple_arg"
###               ("_MapUpd" ("_position" l)
###                 ("_maplet" ("_position" V) ("_position" v'))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###             ("_position" v) ("_position" v'))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq" ("_position" s')
###               ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l'))))
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" v'') ("_position" w))
###               ("\<^const>HOL.conj"
###                 ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###                   ("\<^const>Expr.expr.Block" ("_position" V)
###                     ("\<^const>Expr.expr.LAss" ("_position" T)
###                       ("_applC" ("_position" Val) ("_position" v)))
###                     ("_position" e))
###                   ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###                   ("\<^const>Syntax.InitBlock" ("_position" V)
###                     ("_position" T)
###                     ("_applC" ("_position" Val) ("_position" v''))
###                     ("_position" e'))
###                   ("_tuple" ("_position" h')
###                     ("_tuple_arg"
###                       ("_applC" ("_position" l')
###                         ("\<^const>Expr.expr.LAss" ("_position" V)
###                           ("_applC" ("_position" l) ("_position" V)))))))
###                 ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###                   ("_position" v'') ("_position" w))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("_MapUpd" ("_position" E)
###         ("_maplet" ("_position" V) ("_position" T)))
###       ("_position" e) ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" h)
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" h')
###             ("_idts" ("_position" l')
###               ("_idts" ("_position" v) ("_position" v'))))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_tuple" ("_position" h)
###             ("_tuple_arg"
###               ("_MapUpd" ("_position" l)
###                 ("_maplet" ("_position" V) ("_position" v'))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###             ("_position" v) ("_position" v'))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq" ("_position" s')
###               ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l'))))
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" v'') ("_position" w))
###               ("\<^const>HOL.conj"
###                 ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###                   ("\<^const>Syntax.InitBlock" ("_position" V)
###                     ("_position" T)
###                     ("_applC" ("_position" Val) ("_position" v))
###                     ("_position" e))
###                   ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###                   ("\<^const>Syntax.InitBlock" ("_position" V)
###                     ("_position" T)
###                     ("_applC" ("_position" Val) ("_position" v''))
###                     ("_position" e'))
###                   ("_tuple" ("_position" h')
###                     ("_tuple_arg"
###                       ("_applC" ("_position" l')
###                         ("\<^const>Expr.expr.LAss" ("_position" V)
###                           ("_applC" ("_position" l) ("_position" V)))))))
###                 ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###                   ("_position" v'') ("_position" w))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("_MapUpd" ("_position" E)
###         ("_maplet" ("_position" V) ("_position" T)))
###       ("_position" e) ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" h)
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" h')
###             ("_idts" ("_position" l')
###               ("_idts" ("_position" v) ("_position" v'))))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_tuple" ("_position" h)
###             ("_tuple_arg"
###               ("_MapUpd" ("_position" l)
###                 ("_maplet" ("_position" V) ("_position" v'))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###             ("_position" v) ("_position" v'))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq" ("_position" s')
###               ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l'))))
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" v'') ("_position" w))
###               ("\<^const>HOL.conj"
###                 ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###                   ("\<^const>Expr.expr.Block" ("_position" V)
###                     ("\<^const>Expr.expr.LAss" ("_position" T)
###                       ("_applC" ("_position" Val) ("_position" v)))
###                     ("_position" e))
###                   ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###                   ("\<^const>Expr.expr.Block" ("_position" V)
###                     ("\<^const>Expr.expr.LAss" ("_position" T)
###                       ("_applC" ("_position" Val) ("_position" v'')))
###                     ("_position" e'))
###                   ("_tuple" ("_position" h')
###                     ("_tuple_arg"
###                       ("_Update" ("_position" l')
###                         ("_updbind" ("_position" V)
###                           ("_applC" ("_position" l) ("_position" V)))))))
###                 ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###                   ("_position" v'') ("_position" w))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("_MapUpd" ("_position" E)
###         ("_maplet" ("_position" V) ("_position" T)))
###       ("_position" e) ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" h)
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" h')
###             ("_idts" ("_position" l')
###               ("_idts" ("_position" v) ("_position" v'))))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_tuple" ("_position" h)
###             ("_tuple_arg"
###               ("_MapUpd" ("_position" l)
###                 ("_maplet" ("_position" V) ("_position" v'))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###             ("_position" v) ("_position" v'))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq" ("_position" s')
###               ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l'))))
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" v'') ("_position" w))
###               ("\<^const>HOL.conj"
###                 ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###                   ("\<^const>Syntax.InitBlock" ("_position" V)
###                     ("_position" T)
###                     ("_applC" ("_position" Val) ("_position" v))
###                     ("_position" e))
###                   ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###                   ("\<^const>Expr.expr.Block" ("_position" V)
###                     ("\<^const>Expr.expr.LAss" ("_position" T)
###                       ("_applC" ("_position" Val) ("_position" v'')))
###                     ("_position" e'))
###                   ("_tuple" ("_position" h')
###                     ("_tuple_arg"
###                       ("_Update" ("_position" l')
###                         ("_updbind" ("_position" V)
###                           ("_applC" ("_position" l) ("_position" V)))))))
###                 ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###                   ("_position" v'') ("_position" w))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("_MapUpd" ("_position" E)
###         ("_maplet" ("_position" V) ("_position" T)))
###       ("_position" e) ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" h)
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" h')
###             ("_idts" ("_position" l')
###               ("_idts" ("_position" v) ("_position" v'))))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_tuple" ("_position" h)
###             ("_tuple_arg"
###               ("_MapUpd" ("_position" l)
###                 ("_maplet" ("_position" V) ("_position" v'))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###             ("_position" v) ("_position" v'))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq" ("_position" s')
###               ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l'))))
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" v'') ("_position" w))
###               ("\<^const>HOL.conj"
###                 ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###                   ("\<^const>Expr.expr.Block" ("_position" V)
###                     ("\<^const>Expr.expr.LAss" ("_position" T)
###                       ("_applC" ("_position" Val) ("_position" v)))
###                     ("_position" e))
###                   ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###                   ("\<^const>Syntax.InitBlock" ("_position" V)
###                     ("_position" T)
###                     ("_applC" ("_position" Val) ("_position" v''))
###                     ("_position" e'))
###                   ("_tuple" ("_position" h')
###                     ("_tuple_arg"
###                       ("_Update" ("_position" l')
###                         ("_updbind" ("_position" V)
###                           ("_applC" ("_position" l) ("_position" V)))))))
###                 ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###                   ("_position" v'') ("_position" w))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("_MapUpd" ("_position" E)
###         ("_maplet" ("_position" V) ("_position" T)))
###       ("_position" e) ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" h)
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" h')
###             ("_idts" ("_position" l')
###               ("_idts" ("_position" v) ("_position" v'))))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_tuple" ("_position" h)
###             ("_tuple_arg"
###               ("_MapUpd" ("_position" l)
###                 ("_maplet" ("_position" V) ("_position" v'))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###             ("_position" v) ("_position" v'))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq" ("_position" s')
###               ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l'))))
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" v'') ("_position" w))
###               ("\<^const>HOL.conj"
###                 ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###                   ("\<^const>Syntax.InitBlock" ("_position" V)
###                     ("_position" T)
###                     ("_applC" ("_position" Val) ("_position" v))
###                     ("_position" e))
###                   ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###                   ("\<^const>Syntax.InitBlock" ("_position" V)
###                     ("_position" T)
###                     ("_applC" ("_position" Val) ("_position" v''))
###                     ("_position" e'))
###                   ("_tuple" ("_position" h')
###                     ("_tuple_arg"
###                       ("_Update" ("_position" l')
###                         ("_updbind" ("_position" V)
###                           ("_applC" ("_position" l) ("_position" V)))))))
###                 ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###                   ("_position" v'') ("_position" w))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 845 of "$AFP/CoreC++/Equivalence.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v')))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###           ("_position" v) ("_position" v')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" wf_prog)
###             ("_cargs" ("_position" wf_md) ("_position" P)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" v'') ("_position" w))
###       ("\<^const>HOL.conj"
###         ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###           ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###             ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###           ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###           ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###             ("_applC" ("_position" Val) ("_position" v'')) ("_position" e'))
###           ("_tuple" ("_position" h')
###             ("_tuple_arg"
###               ("_Update" ("_position" l')
###                 ("_updbind" ("_position" V)
###                   ("_applC" ("_position" l) ("_position" V)))))))
###         ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###           ("_position" v'') ("_position" w))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v')))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###           ("_position" v) ("_position" v')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" wf_prog)
###             ("_cargs" ("_position" wf_md) ("_position" P)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" v'') ("_position" w))
###       ("\<^const>HOL.conj"
###         ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###           ("\<^const>Expr.expr.Block" ("_position" V)
###             ("\<^const>Expr.expr.LAss" ("_position" T)
###               ("_applC" ("_position" Val) ("_position" v)))
###             ("_position" e))
###           ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###           ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###             ("_applC" ("_position" Val) ("_position" v'')) ("_position" e'))
###           ("_tuple" ("_position" h')
###             ("_tuple_arg"
###               ("_Update" ("_position" l')
###                 ("_updbind" ("_position" V)
###                   ("_applC" ("_position" l) ("_position" V)))))))
###         ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###           ("_position" v'') ("_position" w))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v')))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###           ("_position" v) ("_position" v')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" wf_prog)
###             ("_cargs" ("_position" wf_md) ("_position" P)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" v'') ("_position" w))
###       ("\<^const>HOL.conj"
###         ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###           ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###             ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###           ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###           ("\<^const>Expr.expr.Block" ("_position" V)
###             ("\<^const>Expr.expr.LAss" ("_position" T)
###               ("_applC" ("_position" Val) ("_position" v'')))
###             ("_position" e'))
###           ("_tuple" ("_position" h')
###             ("_tuple_arg"
###               ("_Update" ("_position" l')
###                 ("_updbind" ("_position" V)
###                   ("_applC" ("_position" l) ("_position" V)))))))
###         ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###           ("_position" v'') ("_position" w))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v')))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###           ("_position" v) ("_position" v')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" wf_prog)
###             ("_cargs" ("_position" wf_md) ("_position" P)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" v'') ("_position" w))
###       ("\<^const>HOL.conj"
###         ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###           ("\<^const>Expr.expr.Block" ("_position" V)
###             ("\<^const>Expr.expr.LAss" ("_position" T)
###               ("_applC" ("_position" Val) ("_position" v)))
###             ("_position" e))
###           ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###           ("\<^const>Expr.expr.Block" ("_position" V)
###             ("\<^const>Expr.expr.LAss" ("_position" T)
###               ("_applC" ("_position" Val) ("_position" v'')))
###             ("_position" e'))
###           ("_tuple" ("_position" h')
###             ("_tuple_arg"
###               ("_Update" ("_position" l')
###                 ("_updbind" ("_position" V)
###                   ("_applC" ("_position" l) ("_position" V)))))))
###         ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###           ("_position" v'') ("_position" w))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v')))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###           ("_position" v) ("_position" v')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" wf_prog)
###             ("_cargs" ("_position" wf_md) ("_position" P)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" v'') ("_position" w))
###       ("\<^const>HOL.conj"
###         ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###           ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###             ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###           ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###           ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###             ("_applC" ("_position" Val) ("_position" v'')) ("_position" e'))
###           ("_tuple" ("_position" h')
###             ("_tuple_arg"
###               ("_applC" ("_position" l')
###                 ("\<^const>Expr.expr.LAss" ("_position" V)
###                   ("_applC" ("_position" l) ("_position" V)))))))
###         ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###           ("_position" v'') ("_position" w))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v')))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###           ("_position" v) ("_position" v')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" wf_prog)
###             ("_cargs" ("_position" wf_md) ("_position" P)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" v'') ("_position" w))
###       ("\<^const>HOL.conj"
###         ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###           ("\<^const>Expr.expr.Block" ("_position" V)
###             ("\<^const>Expr.expr.LAss" ("_position" T)
###               ("_applC" ("_position" Val) ("_position" v)))
###             ("_position" e))
###           ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###           ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###             ("_applC" ("_position" Val) ("_position" v'')) ("_position" e'))
###           ("_tuple" ("_position" h')
###             ("_tuple_arg"
###               ("_applC" ("_position" l')
###                 ("\<^const>Expr.expr.LAss" ("_position" V)
###                   ("_applC" ("_position" l) ("_position" V)))))))
###         ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###           ("_position" v'') ("_position" w))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v')))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###           ("_position" v) ("_position" v')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" wf_prog)
###             ("_cargs" ("_position" wf_md) ("_position" P)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" v'') ("_position" w))
###       ("\<^const>HOL.conj"
###         ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###           ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###             ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###           ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###           ("\<^const>Expr.expr.Block" ("_position" V)
###             ("\<^const>Expr.expr.LAss" ("_position" T)
###               ("_applC" ("_position" Val) ("_position" v'')))
###             ("_position" e'))
###           ("_tuple" ("_position" h')
###             ("_tuple_arg"
###               ("_applC" ("_position" l')
###                 ("\<^const>Expr.expr.LAss" ("_position" V)
###                   ("_applC" ("_position" l) ("_position" V)))))))
###         ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###           ("_position" v'') ("_position" w))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v')))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###           ("_position" v) ("_position" v')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" wf_prog)
###             ("_cargs" ("_position" wf_md) ("_position" P)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" v'') ("_position" w))
###       ("\<^const>HOL.conj"
###         ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###           ("\<^const>Expr.expr.Block" ("_position" V)
###             ("\<^const>Expr.expr.LAss" ("_position" T)
###               ("_applC" ("_position" Val) ("_position" v)))
###             ("_position" e))
###           ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###           ("\<^const>Expr.expr.Block" ("_position" V)
###             ("\<^const>Expr.expr.LAss" ("_position" T)
###               ("_applC" ("_position" Val) ("_position" v'')))
###             ("_position" e'))
###           ("_tuple" ("_position" h')
###             ("_tuple_arg"
###               ("_applC" ("_position" l')
###                 ("\<^const>Expr.expr.LAss" ("_position" V)
###                   ("_applC" ("_position" l) ("_position" V)))))))
###         ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###           ("_position" v'') ("_position" w))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 856 of "$AFP/CoreC++/Equivalence.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###     ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###       ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###     ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###     ("_position" e')
###     ("_tuple" ("_position" h')
###       ("_tuple_arg"
###         ("_applC" ("_position" l')
###           ("\<^const>Expr.expr.LAss" ("_position" V)
###             ("_applC" ("_position" l) ("_position" V))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.Block" ("_position" V)
###       ("\<^const>Expr.expr.LAss" ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_position" e))
###     ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###     ("_position" e')
###     ("_tuple" ("_position" h')
###       ("_tuple_arg"
###         ("_applC" ("_position" l')
###           ("\<^const>Expr.expr.LAss" ("_position" V)
###             ("_applC" ("_position" l) ("_position" V))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###     ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###       ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###     ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###     ("_position" e')
###     ("_tuple" ("_position" h')
###       ("_tuple_arg"
###         ("_Update" ("_position" l')
###           ("_updbind" ("_position" V)
###             ("_applC" ("_position" l) ("_position" V))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.Block" ("_position" V)
###       ("\<^const>Expr.expr.LAss" ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_position" e))
###     ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###     ("_position" e')
###     ("_tuple" ("_position" h')
###       ("_tuple_arg"
###         ("_Update" ("_position" l')
###           ("_updbind" ("_position" V)
###             ("_applC" ("_position" l) ("_position" V))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 878 of "$AFP/CoreC++/Equivalence.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" h\<^sub>0) ("_position" l\<^sub>0))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" s\<^sub>0)
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg"
###             ("_applC" ("_position" l\<^sub>0)
###               ("\<^const>Expr.expr.LAss" ("_position" V)
###                 ("_position" None)))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###         ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###           ("_position" e\<^sub>0))
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg" ("_position" l\<^sub>0)))
###         ("_position" e\<^sub>2)
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_arg"
###             ("_applC" ("_position" l\<^sub>2)
###               ("\<^const>Expr.expr.LAss" ("_position" V)
###                 ("_applC" ("_position" l\<^sub>0) ("_position" V))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" h\<^sub>0) ("_position" l\<^sub>0))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" s\<^sub>0)
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg"
###             ("_Update" ("_position" l\<^sub>0)
###               ("_updbind" ("_position" V) ("_position" None)))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###         ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###           ("_position" e\<^sub>0))
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg" ("_position" l\<^sub>0)))
###         ("_position" e\<^sub>2)
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_arg"
###             ("_applC" ("_position" l\<^sub>2)
###               ("\<^const>Expr.expr.LAss" ("_position" V)
###                 ("_applC" ("_position" l\<^sub>0) ("_position" V))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" h\<^sub>0) ("_position" l\<^sub>0))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" s\<^sub>0)
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg"
###             ("_applC" ("_position" l\<^sub>0)
###               ("\<^const>Expr.expr.LAss" ("_position" V)
###                 ("_position" None)))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###         ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###           ("_position" e\<^sub>0))
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg" ("_position" l\<^sub>0)))
###         ("_position" e\<^sub>2)
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_arg"
###             ("_Update" ("_position" l\<^sub>2)
###               ("_updbind" ("_position" V)
###                 ("_applC" ("_position" l\<^sub>0) ("_position" V))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" h\<^sub>0) ("_position" l\<^sub>0))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" s\<^sub>0)
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg"
###             ("_Update" ("_position" l\<^sub>0)
###               ("_updbind" ("_position" V) ("_position" None)))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###         ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###           ("_position" e\<^sub>0))
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg" ("_position" l\<^sub>0)))
###         ("_position" e\<^sub>2)
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_arg"
###             ("_Update" ("_position" l\<^sub>2)
###               ("_updbind" ("_position" V)
###                 ("_applC" ("_position" l\<^sub>0) ("_position" V))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1031 of "$AFP/CoreC++/Equivalence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("_applC" ("_position" override_on)
###         ("_cargs" ("_position" f)
###           ("_cargs"
###             ("_MapUpd" ("_position" g)
###               ("_maplet" ("_position" a) ("_position" b)))
###             ("_position" A))))
###       ("\<^const>Expr.expr.LAss" ("_position" a)
###         ("_applC" ("_position" g) ("_position" a))))
###     ("_applC" ("_position" override_on)
###       ("_cargs" ("_position" f)
###         ("_cargs" ("_position" g)
###           ("_applC" ("_position" insert)
###             ("_cargs" ("_position" a) ("_position" A))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update"
###       ("_applC" ("_position" override_on)
###         ("_cargs" ("_position" f)
###           ("_cargs"
###             ("_MapUpd" ("_position" g)
###               ("_maplet" ("_position" a) ("_position" b)))
###             ("_position" A))))
###       ("_updbind" ("_position" a)
###         ("_applC" ("_position" g) ("_position" a))))
###     ("_applC" ("_position" override_on)
###       ("_cargs" ("_position" f)
###         ("_cargs" ("_position" g)
###           ("_applC" ("_position" insert)
###             ("_cargs" ("_position" a) ("_position" A))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
[| ?P,?E \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<rightarrow>*
                      \<langle>null,?s\<^sub>1\<rangle>;
   ?P,?E \<turnstile> \<langle>?es,?s\<^sub>1\<rangle> [\<rightarrow>]*
                      \<langle>map Val ?vs,?s\<^sub>2\<rangle> |]
==> ?P,?E \<turnstile> \<langle>Call ?e ?Copt ?M ?es,
                        ?s\<^sub>0\<rangle> \<rightarrow>*
                       \<langle>Throw
                                 (addr_of_sys_xcpt NullPointer,
                                  [NullPointer]),
                        ?s\<^sub>2\<rangle>
### No such looper in simpset: "split_all_tac"
### theory "Draft.Equivalence"
### 1.584s elapsed time, 2.565s cpu time, 1.367s GC time
Loading theory "Draft.Progress" (required by "Draft.ProgressTemplates")
### Ambiguous input (line 115 of "$AFP/CoreC++/Progress.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt'" ("_position" P) ("_position" E) ("_position" h)
###         ("_position" e\<^sub>1) ("_position" NT)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WTrt'" ("_position" P) ("_position" E) ("_position" h)
###           ("_position" e\<^sub>2) ("_position" T')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt'" ("_position" P) ("_position" E) ("_position" h)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" T))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt'" ("_position" P) ("_position" E) ("_position" h)
###         ("_position" e\<^sub>1) ("_position" NT)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WTrt'" ("_position" P) ("_position" E) ("_position" h)
###           ("_position" e\<^sub>2) ("_position" T')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt'" ("_position" P) ("_position" E) ("_position" h)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" T))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 112 of "$AFP/CoreC++/Progress.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt'" ("_position" P) ("_position" E) ("_position" h)
###         ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" Cs)
###           ("\<^const>List.list.Nil")))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>SubObj.LeastFieldDecl" ("_position" P) ("_position" C)
###             ("_position" F) ("_position" T) ("_position" Cs)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>WTrt'" ("_position" P) ("_position" E)
###               ("_position" h) ("_position" e\<^sub>2) ("_position" T')))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                 ("_position" T))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt'" ("_position" P) ("_position" E) ("_position" h)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" T))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt'" ("_position" P) ("_position" E) ("_position" h)
###         ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" Cs)
###           ("\<^const>List.list.Nil")))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>SubObj.LeastFieldDecl" ("_position" P) ("_position" C)
###             ("_position" F) ("_position" T) ("_position" Cs)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>WTrt'" ("_position" P) ("_position" E)
###               ("_position" h) ("_position" e\<^sub>2) ("_position" T')))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                 ("_position" T))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt'" ("_position" P) ("_position" E) ("_position" h)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" T))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 125 of "$AFP/CoreC++/Progress.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC"
###           ("\<^const>WellTypeRT.typeof_h" ("_position" P) ("_position" h))
###           ("_position" v))
###         ("_applC" ("_position" Some) ("_position" T'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WTrt'" ("_position" P)
###           ("_MapUpd" ("_position" E)
###             ("_maplet" ("_position" V) ("_position" T)))
###           ("_position" h) ("_position" e\<^sub>2) ("_position" T\<^sub>2)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" is_type)
###               ("_cargs" ("_position" P) ("_position" T))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt'" ("_position" P) ("_position" E) ("_position" h)
###       ("\<^const>Expr.expr.Block" ("_position" V)
###         ("\<^const>Expr.expr.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC"
###           ("\<^const>WellTypeRT.typeof_h" ("_position" P) ("_position" h))
###           ("_position" v))
###         ("_applC" ("_position" Some) ("_position" T'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WTrt'" ("_position" P)
###           ("_MapUpd" ("_position" E)
###             ("_maplet" ("_position" V) ("_position" T)))
###           ("_position" h) ("_position" e\<^sub>2) ("_position" T\<^sub>2)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" is_type)
###               ("_cargs" ("_position" P) ("_position" T))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt'" ("_position" P) ("_position" E) ("_position" h)
###       ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v))
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "WTrt'", "WTrts'"
  Proving monotonicity ...
### Ambiguous input (line 150 of "$AFP/CoreC++/Progress.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Progress.WTrt'" ("_position" P) ("_position" E)
###       ("_position" h)
###       ("\<^const>Expr.expr.Seq" ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))
###     ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###       ("\<^const>HOL.conj"
###         ("\<^const>Progress.WTrt'" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" e\<^sub>1) ("_position" T\<^sub>1))
###         ("\<^const>Progress.WTrt'" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" e\<^sub>2)
###           ("_position" T\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Progress.WTrt'" ("_position" P) ("_position" E) ("_position" h)
###     ("\<^const>Expr.expr.Seq" ("_position" e\<^sub>1)
###       ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" T\<^sub>2)
###       ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###         ("\<^const>HOL.conj"
###           ("\<^const>Progress.WTrt'" ("_position" P) ("_position" E)
###             ("_position" h) ("_position" e\<^sub>1) ("_position" T\<^sub>1))
###           ("\<^const>Progress.WTrt'" ("_position" P) ("_position" E)
###             ("_position" h) ("_position" e\<^sub>2)
###             ("_position" T\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Progress.WTrt'" ("_position" P) ("_position" E)
###       ("_position" h)
###       ("\<^const>Expr.expr.Seq" ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))
###     ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###       ("\<^const>Progress.WTrt'" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" e\<^sub>1)
###         ("\<^const>HOL.conj" ("_position" T\<^sub>1)
###           ("\<^const>Progress.WTrt'" ("_position" P) ("_position" E)
###             ("_position" h) ("_position" e\<^sub>2)
###             ("_position" T\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Progress.WTrt'" ("_position" P) ("_position" E) ("_position" h)
###     ("\<^const>Expr.expr.Seq" ("_position" e\<^sub>1)
###       ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" T\<^sub>2)
###       ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###         ("\<^const>Progress.WTrt'" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" e\<^sub>1)
###           ("\<^const>HOL.conj" ("_position" T\<^sub>1)
###             ("\<^const>Progress.WTrt'" ("_position" P) ("_position" E)
###               ("_position" h) ("_position" e\<^sub>2)
###               ("_position" T\<^sub>2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 157 of "$AFP/CoreC++/Progress.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Progress.WTrt'" ("_position" P) ("_position" E)
###       ("_position" h) ("_applC" ("_position" Val) ("_position" v))
###       ("_position" T))
###     ("\<^const>HOL.eq"
###       ("_applC"
###         ("\<^const>WellTypeRT.typeof_h" ("_position" P) ("_position" h))
###         ("_position" v))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Progress.WTrt'" ("_position" P) ("_position" E) ("_position" h)
###     ("_applC" ("_position" Val) ("_position" v))
###     ("\<^const>HOL.eq" ("_position" T)
###       ("\<^const>HOL.eq"
###         ("_applC"
###           ("\<^const>WellTypeRT.typeof_h" ("_position" P) ("_position" h))
###           ("_position" v))
###         ("_applC" ("_position" Some) ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 164 of "$AFP/CoreC++/Progress.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Progress.WTrt'" ("_position" P) ("_position" E)
###       ("_position" h) ("_applC" ("_position" Var) ("_position" V))
###       ("_position" T))
###     ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Progress.WTrt'" ("_position" P) ("_position" E) ("_position" h)
###     ("_applC" ("_position" Var) ("_position" V))
###     ("\<^const>HOL.eq" ("_position" T)
###       ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###         ("_applC" ("_position" Some) ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 257 of "$AFP/CoreC++/Progress.thy") produces 8 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WellTypeRT.WTrt" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" e) ("_position" T)))
###   ("\<^const>Pure.all_binder" ("_position" l)
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.envconf" ("_position" P) ("_position" h)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Conform.envconf" ("_position" P) ("_position" E)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" \<D>)
###                 ("_cargs" ("_position" e)
###                   ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                     ("_applC" ("_position" dom) ("_position" l))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.Not"
###                   ("_applC" ("_position" final) ("_position" e))))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" e') ("_position" s'))
###           ("\<^const>SmallStep.red'" ("_position" P) ("_position" E)
###             ("_position" e)
###             ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###             ("_position" e') ("_position" s')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WellTypeRT.WTrt" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" e) ("_position" T)))
###   ("\<^const>Pure.all_binder" ("_position" l)
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.hconf" ("_position" P) ("_position" h)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Conform.envconf" ("_position" P) ("_position" E)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" \<D>)
###                 ("_cargs" ("_position" e)
###                   ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                     ("_applC" ("_position" dom) ("_position" l))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.Not"
###                   ("_applC" ("_position" final) ("_position" e))))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" e') ("_position" s'))
###           ("\<^const>SmallStep.red'" ("_position" P) ("_position" E)
###             ("_position" e)
###             ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###             ("_position" e') ("_position" s')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WellTypeRT.WTrt" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" e) ("_position" T)))
###   ("\<^const>Pure.all_binder" ("_position" l)
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.envconf" ("_position" P) ("_position" h)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Conform.hconf" ("_position" P) ("_position" E)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" \<D>)
###                 ("_cargs" ("_position" e)
###                   ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                     ("_applC" ("_position" dom) ("_position" l))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.Not"
###                   ("_applC" ("_position" final) ("_position" e))))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" e') ("_position" s'))
###           ("\<^const>SmallStep.red'" ("_position" P) ("_position" E)
###             ("_position" e)
###             ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###             ("_position" e') ("_position" s')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WellTypeRT.WTrt" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" e) ("_position" T)))
###   ("\<^const>Pure.all_binder" ("_position" l)
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.hconf" ("_position" P) ("_position" h)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Conform.hconf" ("_position" P) ("_position" E)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" \<D>)
###                 ("_cargs" ("_position" e)
###                   ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                     ("_applC" ("_position" dom) ("_position" l))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.Not"
###                   ("_applC" ("_position" final) ("_position" e))))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" e') ("_position" s'))
###           ("\<^const>SmallStep.red'" ("_position" P) ("_position" E)
###             ("_position" e)
###             ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###             ("_position" e') ("_position" s')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WellTypeRT.WTrt" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" e) ("_position" T)))
###   ("\<^const>Pure.all_binder" ("_position" l)
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.envconf" ("_position" P) ("_position" h)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Conform.envconf" ("_position" P) ("_position" E)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" \<D>)
###                 ("_cargs" ("_position" e)
###                   ("\<^const>Option.option.Some"
###                     ("_applC" ("_position" dom) ("_position" l))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.Not"
###                   ("_applC" ("_position" final) ("_position" e))))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" e') ("_position" s'))
###           ("\<^const>SmallStep.red'" ("_position" P) ("_position" E)
###             ("_position" e)
###             ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###             ("_position" e') ("_position" s')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WellTypeRT.WTrt" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" e) ("_position" T)))
###   ("\<^const>Pure.all_binder" ("_position" l)
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.hconf" ("_position" P) ("_position" h)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Conform.envconf" ("_position" P) ("_position" E)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" \<D>)
###                 ("_cargs" ("_position" e)
###                   ("\<^const>Option.option.Some"
###                     ("_applC" ("_position" dom) ("_position" l))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.Not"
###                   ("_applC" ("_position" final) ("_position" e))))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" e') ("_position" s'))
###           ("\<^const>SmallStep.red'" ("_position" P) ("_position" E)
###             ("_position" e)
###             ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###             ("_position" e') ("_position" s')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WellTypeRT.WTrt" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" e) ("_position" T)))
###   ("\<^const>Pure.all_binder" ("_position" l)
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.envconf" ("_position" P) ("_position" h)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Conform.hconf" ("_position" P) ("_position" E)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" \<D>)
###                 ("_cargs" ("_position" e)
###                   ("\<^const>Option.option.Some"
###                     ("_applC" ("_position" dom) ("_position" l))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.Not"
###                   ("_applC" ("_position" final) ("_position" e))))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" e') ("_position" s'))
###           ("\<^const>SmallStep.red'" ("_position" P) ("_position" E)
###             ("_position" e)
###             ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###             ("_position" e') ("_position" s')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WellTypeRT.WTrt" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" e) ("_position" T)))
###   ("\<^const>Pure.all_binder" ("_position" l)
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.hconf" ("_position" P) ("_position" h)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Conform.hconf" ("_position" P) ("_position" E)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" \<D>)
###                 ("_cargs" ("_position" e)
###                   ("\<^const>Option.option.Some"
###                     ("_applC" ("_position" dom) ("_position" l))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.Not"
###                   ("_applC" ("_position" final) ("_position" e))))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" e') ("_position" s'))
###           ("\<^const>SmallStep.red'" ("_position" P) ("_position" E)
###             ("_position" e)
###             ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###             ("_position" e') ("_position" s')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 259 of "$AFP/CoreC++/Progress.thy") produces 8 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WellTypeRT.WTrts" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" es) ("_position" Ts)))
###   ("\<^const>Pure.all_binder" ("_position" l)
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.envconf" ("_position" P) ("_position" h)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Conform.envconf" ("_position" P) ("_position" E)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" \<D>s)
###                 ("_cargs" ("_position" es)
###                   ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                     ("_applC" ("_position" dom) ("_position" l))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.Not"
###                   ("_applC" ("_position" finals) ("_position" es))))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" es') ("_position" s'))
###           ("\<^const>SmallStep.reds'" ("_position" P) ("_position" E)
###             ("_position" es)
###             ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###             ("_position" es') ("_position" s')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WellTypeRT.WTrts" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" es) ("_position" Ts)))
###   ("\<^const>Pure.all_binder" ("_position" l)
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.hconf" ("_position" P) ("_position" h)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Conform.envconf" ("_position" P) ("_position" E)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" \<D>s)
###                 ("_cargs" ("_position" es)
###                   ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                     ("_applC" ("_position" dom) ("_position" l))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.Not"
###                   ("_applC" ("_position" finals) ("_position" es))))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" es') ("_position" s'))
###           ("\<^const>SmallStep.reds'" ("_position" P) ("_position" E)
###             ("_position" es)
###             ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###             ("_position" es') ("_position" s')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WellTypeRT.WTrts" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" es) ("_position" Ts)))
###   ("\<^const>Pure.all_binder" ("_position" l)
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.envconf" ("_position" P) ("_position" h)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Conform.hconf" ("_position" P) ("_position" E)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" \<D>s)
###                 ("_cargs" ("_position" es)
###                   ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                     ("_applC" ("_position" dom) ("_position" l))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.Not"
###                   ("_applC" ("_position" finals) ("_position" es))))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" es') ("_position" s'))
###           ("\<^const>SmallStep.reds'" ("_position" P) ("_position" E)
###             ("_position" es)
###             ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###             ("_position" es') ("_position" s')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WellTypeRT.WTrts" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" es) ("_position" Ts)))
###   ("\<^const>Pure.all_binder" ("_position" l)
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.hconf" ("_position" P) ("_position" h)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Conform.hconf" ("_position" P) ("_position" E)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" \<D>s)
###                 ("_cargs" ("_position" es)
###                   ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                     ("_applC" ("_position" dom) ("_position" l))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.Not"
###                   ("_applC" ("_position" finals) ("_position" es))))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" es') ("_position" s'))
###           ("\<^const>SmallStep.reds'" ("_position" P) ("_position" E)
###             ("_position" es)
###             ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###             ("_position" es') ("_position" s')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WellTypeRT.WTrts" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" es) ("_position" Ts)))
###   ("\<^const>Pure.all_binder" ("_position" l)
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.envconf" ("_position" P) ("_position" h)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Conform.envconf" ("_position" P) ("_position" E)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" \<D>s)
###                 ("_cargs" ("_position" es)
###                   ("\<^const>Option.option.Some"
###                     ("_applC" ("_position" dom) ("_position" l))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.Not"
###                   ("_applC" ("_position" finals) ("_position" es))))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" es') ("_position" s'))
###           ("\<^const>SmallStep.reds'" ("_position" P) ("_position" E)
###             ("_position" es)
###             ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###             ("_position" es') ("_position" s')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WellTypeRT.WTrts" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" es) ("_position" Ts)))
###   ("\<^const>Pure.all_binder" ("_position" l)
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.hconf" ("_position" P) ("_position" h)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Conform.envconf" ("_position" P) ("_position" E)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" \<D>s)
###                 ("_cargs" ("_position" es)
###                   ("\<^const>Option.option.Some"
###                     ("_applC" ("_position" dom) ("_position" l))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.Not"
###                   ("_applC" ("_position" finals) ("_position" es))))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" es') ("_position" s'))
###           ("\<^const>SmallStep.reds'" ("_position" P) ("_position" E)
###             ("_position" es)
###             ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###             ("_position" es') ("_position" s')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WellTypeRT.WTrts" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" es) ("_position" Ts)))
###   ("\<^const>Pure.all_binder" ("_position" l)
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.envconf" ("_position" P) ("_position" h)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Conform.hconf" ("_position" P) ("_position" E)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" \<D>s)
###                 ("_cargs" ("_position" es)
###                   ("\<^const>Option.option.Some"
###                     ("_applC" ("_position" dom) ("_position" l))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.Not"
###                   ("_applC" ("_position" finals) ("_position" es))))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" es') ("_position" s'))
###           ("\<^const>SmallStep.reds'" ("_position" P) ("_position" E)
###             ("_position" es)
###             ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###             ("_position" es') ("_position" s')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WellTypeRT.WTrts" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" es) ("_position" Ts)))
###   ("\<^const>Pure.all_binder" ("_position" l)
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.hconf" ("_position" P) ("_position" h)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Conform.hconf" ("_position" P) ("_position" E)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" \<D>s)
###                 ("_cargs" ("_position" es)
###                   ("\<^const>Option.option.Some"
###                     ("_applC" ("_position" dom) ("_position" l))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.Not"
###                   ("_applC" ("_position" finals) ("_position" es))))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" es') ("_position" s'))
###           ("\<^const>SmallStep.reds'" ("_position" P) ("_position" E)
###             ("_position" es)
###             ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###             ("_position" es') ("_position" s')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Progress"
### 0.855s elapsed time, 0.983s cpu time, 0.164s GC time
Loading theory "Draft.ProgressTemplates"
val templateLemmas =
   [("Progress.wt'_iff_wt",
     "(?P,?E,?h \<turnstile> ?e :' ?T) = (?P,?E,?h \<turnstile> ?e : ?T)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("Progress.wts'_iff_wts",
     "(?P,?E,?h \<turnstile> ?es [:'] ?Ts) =
      (?P,?E,?h \<turnstile> ?es [:] ?Ts)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("Progress.wt'_wt",
     "?P,?E,?h \<turnstile> ?e :' ?T ==> ?P,?E,?h \<turnstile> ?e : ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Progress.wts'_wts",
     "?P,?E,?h \<turnstile> ?es [:'] ?Ts ==>
      ?P,?E,?h \<turnstile> ?es [:] ?Ts",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Progress.wt_wt'",
     "?P,?E,?h \<turnstile> ?e : ?T ==> ?P,?E,?h \<turnstile> ?e :' ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Progress.wts_wts'",
     "?P,?E,?h \<turnstile> ?es [:] ?Ts ==>
      ?P,?E,?h \<turnstile> ?es [:'] ?Ts",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Progress.appendPath_append_last",
     "?Ds ~= [] ==>
      (?Cs @\<^sub>p ?Ds) @\<^sub>p [last ?Ds] = ?Cs @\<^sub>p ?Ds",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_hole 3)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_var 1)))),
    ("Progress.sub_casts",
     "[| wf_prog ?wf_md ?P;
         ?P \<turnstile> typeof\<^bsub>?h\<^esub> ?v =
         \<lfloor>?T'\<rfloor>;
         is_type ?P ?T; ?P \<turnstile> ?T' \<le> ?T |]
      ==> EX v'. ?P \<turnstile> ?T casts ?v to v' ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 5),
              template_var 4)
            ),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 5, template_var 4),
              template_var 3),
            template_var 2),
          template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Progress.WTrt'_elim_cases",
     "[| ?P,?E,?h \<turnstile> ?V:=?e :' ?T;
         !!T'. [| ?P,?E,?h \<turnstile> Var ?V :' ?T;
                  ?P,?E,?h \<turnstile> ?e :' T';
                  ?P \<turnstile> T' \<le> ?T |]
               ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 6),
                    template_var 5),
                  template_var 4),
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Progress.final_refE",
     "[| ?P,?E,?h \<turnstile> ?e : Class ?C; final ?e;
         !!r. ?e = ref r ==> ?Q; !!r. ?e = Throw r ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 7, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_app (template_hole 6, template_var 1))
            ),
        template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Progress.mdc_leq_dyn_type",
     "?P,?E,?h \<turnstile> ?e : ?T ==>
      ALL C a Cs D S.
         ?T = Class C &
         ?e = ref (a, Cs) & ?h a = \<lfloor>(D, S)\<rfloor> -->
         ?P \<turnstile> D \<preceq>\<^sup>* C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 19, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 18, t_empty)))),
    ("Progress.finalRefE",
     "[| ?P,?E,?h \<turnstile> ?e : ?T; is_refT ?T; final ?e;
         ?e = null ==> ?Q; !!r. ?e = ref r ==> ?Q;
         !!r. ?e = Throw r ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 8, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate (template_app (template_hole 6, template_var 2)),
        template_implication
         ([template_equation
            (template_var 2,
             template_app (template_hole 4, template_hole 3))],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Progress.progress",
     "[| wwf_prog ?P; ?P,?E,?h \<turnstile> ?e : ?T;
         ?P \<turnstile> ?h \<surd>; ?P \<turnstile> ?E \<surd>;
         \<D> ?e \<lfloor>dom ?l\<rfloor>; ~ final ?e |]
      ==> EX e' s'.
             ?P,?E \<turnstile> \<langle>?e,(?h, ?l)\<rangle> \<rightarrow>
                                \<langle>e',s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 17, template_hole 16),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 15, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 5),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 2),
              template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 0)))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 8, template_var 2))
            )],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Progress.subE",
     "[| ?P \<turnstile> ?T \<le> ?T'; is_type ?P ?T'; wf_prog ?wf_md ?P;
         [| ?T = ?T'; ALL C. ?T ~= Class C |] ==> ?Q;
         !!C D.
            [| ?T = Class C; ?T' = Class D;
               ?P \<turnstile> Path C to D unique |]
            ==> ?Q;
         !!C. [| ?T = NT; ?T' = Class C |] ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 4)
            ),
        template_implication
         ([template_equation (template_var 3, template_var 2)],
          template_implication
           ([template_predicate (template_app (template_hole 5, t_empty))],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Progress.WTrt'_inducts",
     "[| ?P,?x1a,?x2a \<turnstile> ?x3a :' ?x4a;
         !!C E h. is_class ?P C ==> ?P1.0 E h (new C) (Class C);
         !!C E h e T.
            [| is_class ?P C; ?P,E,h \<turnstile> e :' T; ?P1.0 E h e T;
               is_refT T |]
            ==> ?P1.0 E h (Cast C e) (Class C);
         !!C E h e T.
            [| is_class ?P C; ?P,E,h \<turnstile> e :' T; ?P1.0 E h e T;
               is_refT T |]
            ==> ?P1.0 E h (\<lparr>C\<rparr>e) (Class C);
         !!h v T E.
            ?P \<turnstile> typeof\<^bsub>h\<^esub> v =
            \<lfloor>T\<rfloor> ==>
            ?P1.0 E h (Val v) T;
         !!E V T h. E V = \<lfloor>T\<rfloor> ==> ?P1.0 E h (Var V) T;
         !!E h e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2 bop T.
            [| ?P,E,h \<turnstile> e\<^sub>1 :' T\<^sub>1;
               ?P1.0 E h e\<^sub>1 T\<^sub>1;
               ?P,E,h \<turnstile> e\<^sub>2 :' T\<^sub>2;
               ?P1.0 E h e\<^sub>2 T\<^sub>2;
               case bop of Eq => T = Boolean
               | Add =>
                   T\<^sub>1 = Integer &
                   T\<^sub>2 = Integer & T = Integer |]
            ==> ?P1.0 E h
                 (e\<^sub>1 \<guillemotleft>bop\<guillemotright> e\<^sub>2)
                 T;
         !!E h V T e T'.
            [| ?P,E,h \<turnstile> Var V :' T; ?P1.0 E h (Var V) T;
               ?P,E,h \<turnstile> e :' T'; ?P1.0 E h e T';
               ?P \<turnstile> T' \<le> T |]
            ==> ?P1.0 E h (V:=e) T;
         !!E h e C Cs F T.
            [| ?P,E,h \<turnstile> e :' Class C; ?P1.0 E h e (Class C);
               Cs ~= []; ?P \<turnstile> C has least F:T via Cs |]
            ==> ?P1.0 E h (e\<bullet>F{Cs}) T;
         !!E h e F Cs T.
            [| ?P,E,h \<turnstile> e :' NT; ?P1.0 E h e NT |]
            ==> ?P1.0 E h (e\<bullet>F{Cs}) T;
         !!E h e\<^sub>1 C Cs F T e\<^sub>2 T'.
            [| ?P,E,h \<turnstile> e\<^sub>1 :' Class C;
               ?P1.0 E h e\<^sub>1 (Class C); Cs ~= [];
               ?P \<turnstile> C has least F:T via Cs;
               ?P,E,h \<turnstile> e\<^sub>2 :' T'; ?P1.0 E h e\<^sub>2 T';
               ?P \<turnstile> T' \<le> T |]
            ==> ?P1.0 E h (e\<^sub>1\<bullet>F{Cs} := e\<^sub>2) T;
         !!E h e\<^sub>1 e\<^sub>2 T' T F Cs.
            [| ?P,E,h \<turnstile> e\<^sub>1 :' NT; ?P1.0 E h e\<^sub>1 NT;
               ?P,E,h \<turnstile> e\<^sub>2 :' T'; ?P1.0 E h e\<^sub>2 T';
               ?P \<turnstile> T' \<le> T |]
            ==> ?P1.0 E h (e\<^sub>1\<bullet>F{Cs} := e\<^sub>2) T;
         !!E h e C M Ts T a b Cs es Ts'.
            [| ?P,E,h \<turnstile> e :' Class C; ?P1.0 E h e (Class C);
               ?P \<turnstile> C has least M = (Ts, T, a, b) via Cs;
               ?P,E,h \<turnstile> es [:'] Ts'; ?P2.0 E h es Ts';
               ?P \<turnstile> Ts' [\<le>] Ts |]
            ==> ?P1.0 E h (Call e None M es) T;
         !!E h e C' C M Ts T a b Cs es Ts'.
            [| ?P,E,h \<turnstile> e :' Class C'; ?P1.0 E h e (Class C');
               ?P \<turnstile> Path C' to C unique;
               ?P \<turnstile> C has least M = (Ts, T, a, b) via Cs;
               ?P,E,h \<turnstile> es [:'] Ts'; ?P2.0 E h es Ts';
               ?P \<turnstile> Ts' [\<le>] Ts |]
            ==> ?P1.0 E h (Call e \<lfloor>C\<rfloor> M es) T;
         !!E h e es Ts Copt M T.
            [| ?P,E,h \<turnstile> e :' NT; ?P1.0 E h e NT;
               ?P,E,h \<turnstile> es [:'] Ts; ?P2.0 E h es Ts |]
            ==> ?P1.0 E h (Call e Copt M es) T;
         !!h v T' E V T e\<^sub>2 T\<^sub>2.
            [| ?P \<turnstile> typeof\<^bsub>h\<^esub> v =
               \<lfloor>T'\<rfloor>;
               ?P,E(V |-> T),h \<turnstile> e\<^sub>2 :' T\<^sub>2;
               ?P1.0 (E(V |-> T)) h e\<^sub>2 T\<^sub>2;
               ?P \<turnstile> T' \<le> T; is_type ?P T |]
            ==> ?P1.0 E h {V:T; V:=Val v;; e\<^sub>2} T\<^sub>2;
         !!E V T h e T'.
            [| ?P,E(V |-> T),h \<turnstile> e :' T';
               ?P1.0 (E(V |-> T)) h e T'; ~ assigned V e; is_type ?P T |]
            ==> ?P1.0 E h {V:T; e} T';
         !!E h e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2.
            [| ?P,E,h \<turnstile> e\<^sub>1 :' T\<^sub>1;
               ?P1.0 E h e\<^sub>1 T\<^sub>1;
               ?P,E,h \<turnstile> e\<^sub>2 :' T\<^sub>2;
               ?P1.0 E h e\<^sub>2 T\<^sub>2 |]
            ==> ?P1.0 E h (e\<^sub>1;; e\<^sub>2) T\<^sub>2;
         !!E h e e\<^sub>1 T e\<^sub>2.
            [| ?P,E,h \<turnstile> e :' Boolean; ?P1.0 E h e Boolean;
               ?P,E,h \<turnstile> e\<^sub>1 :' T; ?P1.0 E h e\<^sub>1 T;
               ?P,E,h \<turnstile> e\<^sub>2 :' T; ?P1.0 E h e\<^sub>2 T |]
            ==> ?P1.0 E h (if (e) e\<^sub>1 else e\<^sub>2) T;
         !!E h e c T.
            [| ?P,E,h \<turnstile> e :' Boolean; ?P1.0 E h e Boolean;
               ?P,E,h \<turnstile> c :' T; ?P1.0 E h c T |]
            ==> ?P1.0 E h (while (e) c) Void;
         !!E h e T' T.
            [| ?P,E,h \<turnstile> e :' T'; ?P1.0 E h e T'; is_refT T' |]
            ==> ?P1.0 E h (throw e) T;
         !!E h. ?P2.0 E h [] [];
         !!E h e T es Ts.
            [| ?P,E,h \<turnstile> e :' T; ?P1.0 E h e T;
               ?P,E,h \<turnstile> es [:'] Ts; ?P2.0 E h es Ts |]
            ==> ?P2.0 E h (e # es) (T # Ts) |]
      ==> ?P1.0 ?x1a ?x2a ?x3a ?x4a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 60, template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 59, t_empty)),
        template_predicate (template_app (template_hole 59, t_empty)),
        template_predicate (template_app (template_hole 59, t_empty)),
        template_predicate (template_app (template_hole 57, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 57, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_var 1, template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2)
           ))),
    ("Progress.WTrt'_inducts",
     "[| ?P,?x5a,?x6a \<turnstile> ?x7a [:'] ?x8a;
         !!C E h. is_class ?P C ==> ?P1.0 E h (new C) (Class C);
         !!C E h e T.
            [| is_class ?P C; ?P,E,h \<turnstile> e :' T; ?P1.0 E h e T;
               is_refT T |]
            ==> ?P1.0 E h (Cast C e) (Class C);
         !!C E h e T.
            [| is_class ?P C; ?P,E,h \<turnstile> e :' T; ?P1.0 E h e T;
               is_refT T |]
            ==> ?P1.0 E h (\<lparr>C\<rparr>e) (Class C);
         !!h v T E.
            ?P \<turnstile> typeof\<^bsub>h\<^esub> v =
            \<lfloor>T\<rfloor> ==>
            ?P1.0 E h (Val v) T;
         !!E V T h. E V = \<lfloor>T\<rfloor> ==> ?P1.0 E h (Var V) T;
         !!E h e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2 bop T.
            [| ?P,E,h \<turnstile> e\<^sub>1 :' T\<^sub>1;
               ?P1.0 E h e\<^sub>1 T\<^sub>1;
               ?P,E,h \<turnstile> e\<^sub>2 :' T\<^sub>2;
               ?P1.0 E h e\<^sub>2 T\<^sub>2;
               case bop of Eq => T = Boolean
               | Add =>
                   T\<^sub>1 = Integer &
                   T\<^sub>2 = Integer & T = Integer |]
            ==> ?P1.0 E h
                 (e\<^sub>1 \<guillemotleft>bop\<guillemotright> e\<^sub>2)
                 T;
         !!E h V T e T'.
            [| ?P,E,h \<turnstile> Var V :' T; ?P1.0 E h (Var V) T;
               ?P,E,h \<turnstile> e :' T'; ?P1.0 E h e T';
               ?P \<turnstile> T' \<le> T |]
            ==> ?P1.0 E h (V:=e) T;
         !!E h e C Cs F T.
            [| ?P,E,h \<turnstile> e :' Class C; ?P1.0 E h e (Class C);
               Cs ~= []; ?P \<turnstile> C has least F:T via Cs |]
            ==> ?P1.0 E h (e\<bullet>F{Cs}) T;
         !!E h e F Cs T.
            [| ?P,E,h \<turnstile> e :' NT; ?P1.0 E h e NT |]
            ==> ?P1.0 E h (e\<bullet>F{Cs}) T;
         !!E h e\<^sub>1 C Cs F T e\<^sub>2 T'.
            [| ?P,E,h \<turnstile> e\<^sub>1 :' Class C;
               ?P1.0 E h e\<^sub>1 (Class C); Cs ~= [];
               ?P \<turnstile> C has least F:T via Cs;
               ?P,E,h \<turnstile> e\<^sub>2 :' T'; ?P1.0 E h e\<^sub>2 T';
               ?P \<turnstile> T' \<le> T |]
            ==> ?P1.0 E h (e\<^sub>1\<bullet>F{Cs} := e\<^sub>2) T;
         !!E h e\<^sub>1 e\<^sub>2 T' T F Cs.
            [| ?P,E,h \<turnstile> e\<^sub>1 :' NT; ?P1.0 E h e\<^sub>1 NT;
               ?P,E,h \<turnstile> e\<^sub>2 :' T'; ?P1.0 E h e\<^sub>2 T';
               ?P \<turnstile> T' \<le> T |]
            ==> ?P1.0 E h (e\<^sub>1\<bullet>F{Cs} := e\<^sub>2) T;
         !!E h e C M Ts T a b Cs es Ts'.
            [| ?P,E,h \<turnstile> e :' Class C; ?P1.0 E h e (Class C);
               ?P \<turnstile> C has least M = (Ts, T, a, b) via Cs;
               ?P,E,h \<turnstile> es [:'] Ts'; ?P2.0 E h es Ts';
               ?P \<turnstile> Ts' [\<le>] Ts |]
            ==> ?P1.0 E h (Call e None M es) T;
         !!E h e C' C M Ts T a b Cs es Ts'.
            [| ?P,E,h \<turnstile> e :' Class C'; ?P1.0 E h e (Class C');
               ?P \<turnstile> Path C' to C unique;
               ?P \<turnstile> C has least M = (Ts, T, a, b) via Cs;
               ?P,E,h \<turnstile> es [:'] Ts'; ?P2.0 E h es Ts';
               ?P \<turnstile> Ts' [\<le>] Ts |]
            ==> ?P1.0 E h (Call e \<lfloor>C\<rfloor> M es) T;
         !!E h e es Ts Copt M T.
            [| ?P,E,h \<turnstile> e :' NT; ?P1.0 E h e NT;
               ?P,E,h \<turnstile> es [:'] Ts; ?P2.0 E h es Ts |]
            ==> ?P1.0 E h (Call e Copt M es) T;
         !!h v T' E V T e\<^sub>2 T\<^sub>2.
            [| ?P \<turnstile> typeof\<^bsub>h\<^esub> v =
               \<lfloor>T'\<rfloor>;
               ?P,E(V |-> T),h \<turnstile> e\<^sub>2 :' T\<^sub>2;
               ?P1.0 (E(V |-> T)) h e\<^sub>2 T\<^sub>2;
               ?P \<turnstile> T' \<le> T; is_type ?P T |]
            ==> ?P1.0 E h {V:T; V:=Val v;; e\<^sub>2} T\<^sub>2;
         !!E V T h e T'.
            [| ?P,E(V |-> T),h \<turnstile> e :' T';
               ?P1.0 (E(V |-> T)) h e T'; ~ assigned V e; is_type ?P T |]
            ==> ?P1.0 E h {V:T; e} T';
         !!E h e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2.
            [| ?P,E,h \<turnstile> e\<^sub>1 :' T\<^sub>1;
               ?P1.0 E h e\<^sub>1 T\<^sub>1;
               ?P,E,h \<turnstile> e\<^sub>2 :' T\<^sub>2;
               ?P1.0 E h e\<^sub>2 T\<^sub>2 |]
            ==> ?P1.0 E h (e\<^sub>1;; e\<^sub>2) T\<^sub>2;
         !!E h e e\<^sub>1 T e\<^sub>2.
            [| ?P,E,h \<turnstile> e :' Boolean; ?P1.0 E h e Boolean;
               ?P,E,h \<turnstile> e\<^sub>1 :' T; ?P1.0 E h e\<^sub>1 T;
               ?P,E,h \<turnstile> e\<^sub>2 :' T; ?P1.0 E h e\<^sub>2 T |]
            ==> ?P1.0 E h (if (e) e\<^sub>1 else e\<^sub>2) T;
         !!E h e c T.
            [| ?P,E,h \<turnstile> e :' Boolean; ?P1.0 E h e Boolean;
               ?P,E,h \<turnstile> c :' T; ?P1.0 E h c T |]
            ==> ?P1.0 E h (while (e) c) Void;
         !!E h e T' T.
            [| ?P,E,h \<turnstile> e :' T'; ?P1.0 E h e T'; is_refT T' |]
            ==> ?P1.0 E h (throw e) T;
         !!E h. ?P2.0 E h [] [];
         !!E h e T es Ts.
            [| ?P,E,h \<turnstile> e :' T; ?P1.0 E h e T;
               ?P,E,h \<turnstile> es [:'] Ts; ?P2.0 E h es Ts |]
            ==> ?P2.0 E h (e # es) (T # Ts) |]
      ==> ?P2.0 ?x5a ?x6a ?x7a ?x8a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 60, template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 59, t_empty)),
        template_predicate (template_app (template_hole 59, t_empty)),
        template_predicate (template_app (template_hole 59, t_empty)),
        template_predicate (template_app (template_hole 57, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 57, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_var 0, template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2)
           ))),
    ("Progress.WTrt_inducts2",
     "[| ?P,?x1a,?x2a \<turnstile> ?x3a : ?x4a;
         !!C E h. is_class ?P C ==> ?P1.0 E h (new C) (Class C);
         !!C E h e T.
            [| is_class ?P C; ?P,E,h \<turnstile> e : T; ?P1.0 E h e T;
               is_refT T |]
            ==> ?P1.0 E h (Cast C e) (Class C);
         !!C E h e T.
            [| is_class ?P C; ?P,E,h \<turnstile> e : T; ?P1.0 E h e T;
               is_refT T |]
            ==> ?P1.0 E h (\<lparr>C\<rparr>e) (Class C);
         !!h v T E.
            ?P \<turnstile> typeof\<^bsub>h\<^esub> v =
            \<lfloor>T\<rfloor> ==>
            ?P1.0 E h (Val v) T;
         !!E V T h. E V = \<lfloor>T\<rfloor> ==> ?P1.0 E h (Var V) T;
         !!E h e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2 bop T.
            [| ?P,E,h \<turnstile> e\<^sub>1 : T\<^sub>1;
               ?P1.0 E h e\<^sub>1 T\<^sub>1;
               ?P,E,h \<turnstile> e\<^sub>2 : T\<^sub>2;
               ?P1.0 E h e\<^sub>2 T\<^sub>2;
               case bop of Eq => T = Boolean
               | Add =>
                   T\<^sub>1 = Integer &
                   T\<^sub>2 = Integer & T = Integer |]
            ==> ?P1.0 E h
                 (e\<^sub>1 \<guillemotleft>bop\<guillemotright> e\<^sub>2)
                 T;
         !!E h V T e T'.
            [| ?P,E,h \<turnstile> Var V : T; ?P1.0 E h (Var V) T;
               ?P,E,h \<turnstile> e : T'; ?P1.0 E h e T';
               ?P \<turnstile> T' \<le> T |]
            ==> ?P1.0 E h (V:=e) T;
         !!E h e C Cs F T.
            [| ?P,E,h \<turnstile> e : Class C; ?P1.0 E h e (Class C);
               Cs ~= []; ?P \<turnstile> C has least F:T via Cs |]
            ==> ?P1.0 E h (e\<bullet>F{Cs}) T;
         !!E h e F Cs T.
            [| ?P,E,h \<turnstile> e : NT; ?P1.0 E h e NT |]
            ==> ?P1.0 E h (e\<bullet>F{Cs}) T;
         !!E h e\<^sub>1 C Cs F T e\<^sub>2 T'.
            [| ?P,E,h \<turnstile> e\<^sub>1 : Class C;
               ?P1.0 E h e\<^sub>1 (Class C); Cs ~= [];
               ?P \<turnstile> C has least F:T via Cs;
               ?P,E,h \<turnstile> e\<^sub>2 : T'; ?P1.0 E h e\<^sub>2 T';
               ?P \<turnstile> T' \<le> T |]
            ==> ?P1.0 E h (e\<^sub>1\<bullet>F{Cs} := e\<^sub>2) T;
         !!E h e\<^sub>1 e\<^sub>2 T' T F Cs.
            [| ?P,E,h \<turnstile> e\<^sub>1 : NT; ?P1.0 E h e\<^sub>1 NT;
               ?P,E,h \<turnstile> e\<^sub>2 : T'; ?P1.0 E h e\<^sub>2 T';
               ?P \<turnstile> T' \<le> T |]
            ==> ?P1.0 E h (e\<^sub>1\<bullet>F{Cs} := e\<^sub>2) T;
         !!E h e C M Ts T a b Cs es Ts'.
            [| ?P,E,h \<turnstile> e : Class C; ?P1.0 E h e (Class C);
               ?P \<turnstile> C has least M = (Ts, T, a, b) via Cs;
               ?P,E,h \<turnstile> es [:] Ts'; ?P2.0 E h es Ts';
               ?P \<turnstile> Ts' [\<le>] Ts |]
            ==> ?P1.0 E h (Call e None M es) T;
         !!E h e C' C M Ts T a b Cs es Ts'.
            [| ?P,E,h \<turnstile> e : Class C'; ?P1.0 E h e (Class C');
               ?P \<turnstile> Path C' to C unique;
               ?P \<turnstile> C has least M = (Ts, T, a, b) via Cs;
               ?P,E,h \<turnstile> es [:] Ts'; ?P2.0 E h es Ts';
               ?P \<turnstile> Ts' [\<le>] Ts |]
            ==> ?P1.0 E h (Call e \<lfloor>C\<rfloor> M es) T;
         !!E h e es Ts Copt M T.
            [| ?P,E,h \<turnstile> e : NT; ?P1.0 E h e NT;
               ?P,E,h \<turnstile> es [:] Ts; ?P2.0 E h es Ts |]
            ==> ?P1.0 E h (Call e Copt M es) T;
         !!h v T' E V T e\<^sub>2 T\<^sub>2.
            [| ?P \<turnstile> typeof\<^bsub>h\<^esub> v =
               \<lfloor>T'\<rfloor>;
               ?P,E(V |-> T),h \<turnstile> e\<^sub>2 : T\<^sub>2;
               ?P1.0 (E(V |-> T)) h e\<^sub>2 T\<^sub>2;
               ?P \<turnstile> T' \<le> T; is_type ?P T |]
            ==> ?P1.0 E h {V:T; V:=Val v;; e\<^sub>2} T\<^sub>2;
         !!E V T h e T'.
            [| ?P,E(V |-> T),h \<turnstile> e : T';
               ?P1.0 (E(V |-> T)) h e T'; ~ assigned V e; is_type ?P T |]
            ==> ?P1.0 E h {V:T; e} T';
         !!E h e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2.
            [| ?P,E,h \<turnstile> e\<^sub>1 : T\<^sub>1;
               ?P1.0 E h e\<^sub>1 T\<^sub>1;
               ?P,E,h \<turnstile> e\<^sub>2 : T\<^sub>2;
               ?P1.0 E h e\<^sub>2 T\<^sub>2 |]
            ==> ?P1.0 E h (e\<^sub>1;; e\<^sub>2) T\<^sub>2;
         !!E h e e\<^sub>1 T e\<^sub>2.
            [| ?P,E,h \<turnstile> e : Boolean; ?P1.0 E h e Boolean;
               ?P,E,h \<turnstile> e\<^sub>1 : T; ?P1.0 E h e\<^sub>1 T;
               ?P,E,h \<turnstile> e\<^sub>2 : T; ?P1.0 E h e\<^sub>2 T |]
            ==> ?P1.0 E h (if (e) e\<^sub>1 else e\<^sub>2) T;
         !!E h e c T.
            [| ?P,E,h \<turnstile> e : Boolean; ?P1.0 E h e Boolean;
               ?P,E,h \<turnstile> c : T; ?P1.0 E h c T |]
            ==> ?P1.0 E h (while (e) c) Void;
         !!E h e T' T.
            [| ?P,E,h \<turnstile> e : T'; ?P1.0 E h e T'; is_refT T' |]
            ==> ?P1.0 E h (throw e) T;
         !!E h. ?P2.0 E h [] [];
         !!E h e T es Ts.
            [| ?P,E,h \<turnstile> e : T; ?P1.0 E h e T;
               ?P,E,h \<turnstile> es [:] Ts; ?P2.0 E h es Ts |]
            ==> ?P2.0 E h (e # es) (T # Ts) |]
      ==> ?P1.0 ?x1a ?x2a ?x3a ?x4a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 60, template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 59, t_empty)),
        template_predicate (template_app (template_hole 59, t_empty)),
        template_predicate (template_app (template_hole 59, t_empty)),
        template_predicate (template_app (template_hole 57, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 57, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_var 1, template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2)
           ))),
    ("Progress.WTrt_inducts2",
     "[| ?P,?x5a,?x6a \<turnstile> ?x7a [:] ?x8a;
         !!C E h. is_class ?P C ==> ?P1.0 E h (new C) (Class C);
         !!C E h e T.
            [| is_class ?P C; ?P,E,h \<turnstile> e : T; ?P1.0 E h e T;
               is_refT T |]
            ==> ?P1.0 E h (Cast C e) (Class C);
         !!C E h e T.
            [| is_class ?P C; ?P,E,h \<turnstile> e : T; ?P1.0 E h e T;
               is_refT T |]
            ==> ?P1.0 E h (\<lparr>C\<rparr>e) (Class C);
         !!h v T E.
            ?P \<turnstile> typeof\<^bsub>h\<^esub> v =
            \<lfloor>T\<rfloor> ==>
            ?P1.0 E h (Val v) T;
         !!E V T h. E V = \<lfloor>T\<rfloor> ==> ?P1.0 E h (Var V) T;
         !!E h e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2 bop T.
            [| ?P,E,h \<turnstile> e\<^sub>1 : T\<^sub>1;
               ?P1.0 E h e\<^sub>1 T\<^sub>1;
               ?P,E,h \<turnstile> e\<^sub>2 : T\<^sub>2;
               ?P1.0 E h e\<^sub>2 T\<^sub>2;
               case bop of Eq => T = Boolean
               | Add =>
                   T\<^sub>1 = Integer &
                   T\<^sub>2 = Integer & T = Integer |]
            ==> ?P1.0 E h
                 (e\<^sub>1 \<guillemotleft>bop\<guillemotright> e\<^sub>2)
                 T;
         !!E h V T e T'.
            [| ?P,E,h \<turnstile> Var V : T; ?P1.0 E h (Var V) T;
               ?P,E,h \<turnstile> e : T'; ?P1.0 E h e T';
               ?P \<turnstile> T' \<le> T |]
            ==> ?P1.0 E h (V:=e) T;
         !!E h e C Cs F T.
            [| ?P,E,h \<turnstile> e : Class C; ?P1.0 E h e (Class C);
               Cs ~= []; ?P \<turnstile> C has least F:T via Cs |]
            ==> ?P1.0 E h (e\<bullet>F{Cs}) T;
         !!E h e F Cs T.
            [| ?P,E,h \<turnstile> e : NT; ?P1.0 E h e NT |]
            ==> ?P1.0 E h (e\<bullet>F{Cs}) T;
         !!E h e\<^sub>1 C Cs F T e\<^sub>2 T'.
            [| ?P,E,h \<turnstile> e\<^sub>1 : Class C;
               ?P1.0 E h e\<^sub>1 (Class C); Cs ~= [];
               ?P \<turnstile> C has least F:T via Cs;
               ?P,E,h \<turnstile> e\<^sub>2 : T'; ?P1.0 E h e\<^sub>2 T';
               ?P \<turnstile> T' \<le> T |]
            ==> ?P1.0 E h (e\<^sub>1\<bullet>F{Cs} := e\<^sub>2) T;
         !!E h e\<^sub>1 e\<^sub>2 T' T F Cs.
            [| ?P,E,h \<turnstile> e\<^sub>1 : NT; ?P1.0 E h e\<^sub>1 NT;
               ?P,E,h \<turnstile> e\<^sub>2 : T'; ?P1.0 E h e\<^sub>2 T';
               ?P \<turnstile> T' \<le> T |]
            ==> ?P1.0 E h (e\<^sub>1\<bullet>F{Cs} := e\<^sub>2) T;
         !!E h e C M Ts T a b Cs es Ts'.
            [| ?P,E,h \<turnstile> e : Class C; ?P1.0 E h e (Class C);
               ?P \<turnstile> C has least M = (Ts, T, a, b) via Cs;
               ?P,E,h \<turnstile> es [:] Ts'; ?P2.0 E h es Ts';
               ?P \<turnstile> Ts' [\<le>] Ts |]
            ==> ?P1.0 E h (Call e None M es) T;
         !!E h e C' C M Ts T a b Cs es Ts'.
            [| ?P,E,h \<turnstile> e : Class C'; ?P1.0 E h e (Class C');
               ?P \<turnstile> Path C' to C unique;
               ?P \<turnstile> C has least M = (Ts, T, a, b) via Cs;
               ?P,E,h \<turnstile> es [:] Ts'; ?P2.0 E h es Ts';
               ?P \<turnstile> Ts' [\<le>] Ts |]
            ==> ?P1.0 E h (Call e \<lfloor>C\<rfloor> M es) T;
         !!E h e es Ts Copt M T.
            [| ?P,E,h \<turnstile> e : NT; ?P1.0 E h e NT;
               ?P,E,h \<turnstile> es [:] Ts; ?P2.0 E h es Ts |]
            ==> ?P1.0 E h (Call e Copt M es) T;
         !!h v T' E V T e\<^sub>2 T\<^sub>2.
            [| ?P \<turnstile> typeof\<^bsub>h\<^esub> v =
               \<lfloor>T'\<rfloor>;
               ?P,E(V |-> T),h \<turnstile> e\<^sub>2 : T\<^sub>2;
               ?P1.0 (E(V |-> T)) h e\<^sub>2 T\<^sub>2;
               ?P \<turnstile> T' \<le> T; is_type ?P T |]
            ==> ?P1.0 E h {V:T; V:=Val v;; e\<^sub>2} T\<^sub>2;
         !!E V T h e T'.
            [| ?P,E(V |-> T),h \<turnstile> e : T';
               ?P1.0 (E(V |-> T)) h e T'; ~ assigned V e; is_type ?P T |]
            ==> ?P1.0 E h {V:T; e} T';
         !!E h e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2.
            [| ?P,E,h \<turnstile> e\<^sub>1 : T\<^sub>1;
               ?P1.0 E h e\<^sub>1 T\<^sub>1;
               ?P,E,h \<turnstile> e\<^sub>2 : T\<^sub>2;
               ?P1.0 E h e\<^sub>2 T\<^sub>2 |]
            ==> ?P1.0 E h (e\<^sub>1;; e\<^sub>2) T\<^sub>2;
         !!E h e e\<^sub>1 T e\<^sub>2.
            [| ?P,E,h \<turnstile> e : Boolean; ?P1.0 E h e Boolean;
               ?P,E,h \<turnstile> e\<^sub>1 : T; ?P1.0 E h e\<^sub>1 T;
               ?P,E,h \<turnstile> e\<^sub>2 : T; ?P1.0 E h e\<^sub>2 T |]
            ==> ?P1.0 E h (if (e) e\<^sub>1 else e\<^sub>2) T;
         !!E h e c T.
            [| ?P,E,h \<turnstile> e : Boolean; ?P1.0 E h e Boolean;
               ?P,E,h \<turnstile> c : T; ?P1.0 E h c T |]
            ==> ?P1.0 E h (while (e) c) Void;
         !!E h e T' T.
            [| ?P,E,h \<turnstile> e : T'; ?P1.0 E h e T'; is_refT T' |]
            ==> ?P1.0 E h (throw e) T;
         !!E h. ?P2.0 E h [] [];
         !!E h e T es Ts.
            [| ?P,E,h \<turnstile> e : T; ?P1.0 E h e T;
               ?P,E,h \<turnstile> es [:] Ts; ?P2.0 E h es Ts |]
            ==> ?P2.0 E h (e # es) (T # Ts) |]
      ==> ?P2.0 ?x5a ?x6a ?x7a ?x8a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 60, template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 59, t_empty)),
        template_predicate (template_app (template_hole 59, t_empty)),
        template_predicate (template_app (template_hole 59, t_empty)),
        template_predicate (template_app (template_hole 57, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 57, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 58, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_var 0, template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2)
           ))),
    ("Progress.WTrt'_induct",
     "[| !!C E h. is_class ?P C ==> ?P1.0 E h (new C) (Class C);
         !!C E h e T.
            [| is_class ?P C; ?P,E,h \<turnstile> e :' T; ?P1.0 E h e T;
               is_refT T |]
            ==> ?P1.0 E h (Cast C e) (Class C);
         !!C E h e T.
            [| is_class ?P C; ?P,E,h \<turnstile> e :' T; ?P1.0 E h e T;
               is_refT T |]
            ==> ?P1.0 E h (\<lparr>C\<rparr>e) (Class C);
         !!h v T E.
            ?P \<turnstile> typeof\<^bsub>h\<^esub> v =
            \<lfloor>T\<rfloor> ==>
            ?P1.0 E h (Val v) T;
         !!E V T h. E V = \<lfloor>T\<rfloor> ==> ?P1.0 E h (Var V) T;
         !!E h e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2 bop T.
            [| ?P,E,h \<turnstile> e\<^sub>1 :' T\<^sub>1;
               ?P1.0 E h e\<^sub>1 T\<^sub>1;
               ?P,E,h \<turnstile> e\<^sub>2 :' T\<^sub>2;
               ?P1.0 E h e\<^sub>2 T\<^sub>2;
               case bop of Eq => T = Boolean
               | Add =>
                   T\<^sub>1 = Integer &
                   T\<^sub>2 = Integer & T = Integer |]
            ==> ?P1.0 E h
                 (e\<^sub>1 \<guillemotleft>bop\<guillemotright> e\<^sub>2)
                 T;
         !!E h V T e T'.
            [| ?P,E,h \<turnstile> Var V :' T; ?P1.0 E h (Var V) T;
               ?P,E,h \<turnstile> e :' T'; ?P1.0 E h e T';
               ?P \<turnstile> T' \<le> T |]
            ==> ?P1.0 E h (V:=e) T;
         !!E h e C Cs F T.
            [| ?P,E,h \<turnstile> e :' Class C; ?P1.0 E h e (Class C);
               Cs ~= []; ?P \<turnstile> C has least F:T via Cs |]
            ==> ?P1.0 E h (e\<bullet>F{Cs}) T;
         !!E h e F Cs T.
            [| ?P,E,h \<turnstile> e :' NT; ?P1.0 E h e NT |]
            ==> ?P1.0 E h (e\<bullet>F{Cs}) T;
         !!E h e\<^sub>1 C Cs F T e\<^sub>2 T'.
            [| ?P,E,h \<turnstile> e\<^sub>1 :' Class C;
               ?P1.0 E h e\<^sub>1 (Class C); Cs ~= [];
               ?P \<turnstile> C has least F:T via Cs;
               ?P,E,h \<turnstile> e\<^sub>2 :' T'; ?P1.0 E h e\<^sub>2 T';
               ?P \<turnstile> T' \<le> T |]
            ==> ?P1.0 E h (e\<^sub>1\<bullet>F{Cs} := e\<^sub>2) T;
         !!E h e\<^sub>1 e\<^sub>2 T' T F Cs.
            [| ?P,E,h \<turnstile> e\<^sub>1 :' NT; ?P1.0 E h e\<^sub>1 NT;
               ?P,E,h \<turnstile> e\<^sub>2 :' T'; ?P1.0 E h e\<^sub>2 T';
               ?P \<turnstile> T' \<le> T |]
            ==> ?P1.0 E h (e\<^sub>1\<bullet>F{Cs} := e\<^sub>2) T;
         !!E h e C M Ts T a b Cs es Ts'.
            [| ?P,E,h \<turnstile> e :' Class C; ?P1.0 E h e (Class C);
               ?P \<turnstile> C has least M = (Ts, T, a, b) via Cs;
               ?P,E,h \<turnstile> es [:'] Ts'; ?P2.0 E h es Ts';
               ?P \<turnstile> Ts' [\<le>] Ts |]
            ==> ?P1.0 E h (Call e None M es) T;
         !!E h e C' C M Ts T a b Cs es Ts'.
            [| ?P,E,h \<turnstile> e :' Class C'; ?P1.0 E h e (Class C');
               ?P \<turnstile> Path C' to C unique;
               ?P \<turnstile> C has least M = (Ts, T, a, b) via Cs;
               ?P,E,h \<turnstile> es [:'] Ts'; ?P2.0 E h es Ts';
               ?P \<turnstile> Ts' [\<le>] Ts |]
            ==> ?P1.0 E h (Call e \<lfloor>C\<rfloor> M es) T;
         !!E h e es Ts Copt M T.
            [| ?P,E,h \<turnstile> e :' NT; ?P1.0 E h e NT;
               ?P,E,h \<turnstile> es [:'] Ts; ?P2.0 E h es Ts |]
            ==> ?P1.0 E h (Call e Copt M es) T;
         !!h v T' E V T e\<^sub>2 T\<^sub>2.
            [| ?P \<turnstile> typeof\<^bsub>h\<^esub> v =
               \<lfloor>T'\<rfloor>;
               ?P,E(V |-> T),h \<turnstile> e\<^sub>2 :' T\<^sub>2;
               ?P1.0 (E(V |-> T)) h e\<^sub>2 T\<^sub>2;
               ?P \<turnstile> T' \<le> T; is_type ?P T |]
            ==> ?P1.0 E h {V:T; V:=Val v;; e\<^sub>2} T\<^sub>2;
         !!E V T h e T'.
            [| ?P,E(V |-> T),h \<turnstile> e :' T';
               ?P1.0 (E(V |-> T)) h e T'; ~ assigned V e; is_type ?P T |]
            ==> ?P1.0 E h {V:T; e} T';
         !!E h e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2.
            [| ?P,E,h \<turnstile> e\<^sub>1 :' T\<^sub>1;
               ?P1.0 E h e\<^sub>1 T\<^sub>1;
               ?P,E,h \<turnstile> e\<^sub>2 :' T\<^sub>2;
               ?P1.0 E h e\<^sub>2 T\<^sub>2 |]
            ==> ?P1.0 E h (e\<^sub>1;; e\<^sub>2) T\<^sub>2;
         !!E h e e\<^sub>1 T e\<^sub>2.
            [| ?P,E,h \<turnstile> e :' Boolean; ?P1.0 E h e Boolean;
               ?P,E,h \<turnstile> e\<^sub>1 :' T; ?P1.0 E h e\<^sub>1 T;
               ?P,E,h \<turnstile> e\<^sub>2 :' T; ?P1.0 E h e\<^sub>2 T |]
            ==> ?P1.0 E h (if (e) e\<^sub>1 else e\<^sub>2) T;
         !!E h e c T.
            [| ?P,E,h \<turnstile> e :' Boolean; ?P1.0 E h e Boolean;
               ?P,E,h \<turnstile> c :' T; ?P1.0 E h c T |]
            ==> ?P1.0 E h (while (e) c) Void;
         !!E h e T' T.
            [| ?P,E,h \<turnstile> e :' T'; ?P1.0 E h e T'; is_refT T' |]
            ==> ?P1.0 E h (throw e) T;
         !!E h. ?P2.0 E h [] [];
         !!E h e T es Ts.
            [| ?P,E,h \<turnstile> e :' T; ?P1.0 E h e T;
               ?P,E,h \<turnstile> es [:'] Ts; ?P2.0 E h es Ts |]
            ==> ?P2.0 E h (e # es) (T # Ts) |]
      ==> (?P,?x1a,?x2a \<turnstile> ?x3a :' ?x4a -->
           ?P1.0 ?x1a ?x2a ?x3a ?x4a) &
          (?P,?x5a,?x6a \<turnstile> ?x7a [:'] ?x8a -->
           ?P2.0 ?x5a ?x6a ?x7a ?x8a)",
     template_implication
      ([template_predicate (template_app (template_hole 62, t_empty)),
        template_predicate (template_app (template_hole 62, t_empty)),
        template_predicate (template_app (template_hole 62, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 39,
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 53, template_var 10),
                           template_var 7),
                         template_var 6),
                       template_var 5),
                     template_var 4)),
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_var 9, template_var 7),
                       template_var 6),
                     template_var 5),
                   template_var 4))),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 20, template_var 10),
                         template_var 3),
                       template_var 2),
                     template_var 1),
                   template_var 0)),
               template_app
                (template_app
                  (template_app
                    (template_app (template_var 8, template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0)))
           )))]:
   (string * thm * template) list
### theory "Draft.ProgressTemplates"
### 1.013s elapsed time, 2.085s cpu time, 1.313s GC time
val it = (): unit
