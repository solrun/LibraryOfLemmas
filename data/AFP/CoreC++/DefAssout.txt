Loading theory "Draft.Auxiliary" (required by "Draft.DefAssTemplates" via "Draft.DefAss" via "Draft.BigStep" via "Draft.Syntax" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj" via "Draft.ClassRel" via "Draft.Decl" via "Draft.Expr" via "Draft.Value" via "Draft.Type")
Loading theory "Draft.Templates" (required by "Draft.DefAssTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.073s elapsed time, 0.174s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.DefAssTemplates")
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### theory "Draft.Auxiliary"
### 0.299s elapsed time, 0.637s cpu time, 0.028s GC time
Loading theory "Draft.Type" (required by "Draft.DefAssTemplates" via "Draft.DefAss" via "Draft.BigStep" via "Draft.Syntax" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj" via "Draft.ClassRel" via "Draft.Decl" via "Draft.Expr" via "Draft.Value")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.591s elapsed time, 1.211s cpu time, 0.086s GC time
consts
  getbase :: "base => char list"
consts
  isRepBase :: "base => bool"
consts
  isShBase :: "base => bool"
### theory "Draft.Type"
### 0.695s elapsed time, 1.080s cpu time, 0.058s GC time
Loading theory "Draft.Value" (required by "Draft.DefAssTemplates" via "Draft.DefAss" via "Draft.BigStep" via "Draft.Syntax" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj" via "Draft.ClassRel" via "Draft.Decl" via "Draft.Expr")
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Ref"
consts
  the_Intg :: "val => int"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_addr :: "val => nat"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_path :: "val => char list list"
consts
  default_val :: "ty => val"
consts
  typeof :: "val => ty option"
### theory "Draft.Value"
### 0.436s elapsed time, 0.466s cpu time, 0.042s GC time
Loading theory "Draft.Expr" (required by "Draft.DefAssTemplates" via "Draft.DefAss" via "Draft.BigStep" via "Draft.Syntax" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj" via "Draft.ClassRel" via "Draft.Decl")
Found termination order: "{}"
### Ambiguous input (line 80 of "$AFP/CoreC++/Expr.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" fv)
###       ("_updbind" ("_position" V) ("_position" e)))
###     ("\<^const>Set.union" ("_Finset" ("_position" V))
###       ("_applC" ("_position" fv) ("_position" e)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.expr.LAss" ("_position" V) ("_position" e)))
###     ("\<^const>Set.union" ("_Finset" ("_position" V))
###       ("_applC" ("_position" fv) ("_position" e)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 82 of "$AFP/CoreC++/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" fv)
###       ("_updbind"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  fv :: "expr => char list set"
  fvs :: "expr list => char list set"
### theory "Draft.Expr"
### 2.436s elapsed time, 2.848s cpu time, 0.571s GC time
Loading theory "Draft.Decl" (required by "Draft.DefAssTemplates" via "Draft.DefAss" via "Draft.BigStep" via "Draft.Syntax" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj" via "Draft.ClassRel")
### theory "Draft.Decl"
### 0.106s elapsed time, 0.148s cpu time, 0.046s GC time
Loading theory "Draft.ClassRel" (required by "Draft.DefAssTemplates" via "Draft.DefAss" via "Draft.BigStep" via "Draft.Syntax" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj")
Proofs for inductive predicate(s) "subclsRp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "subclsSp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "subcls1p"
  Proving monotonicity ...
### theory "Draft.ClassRel"
### 0.181s elapsed time, 0.182s cpu time, 0.000s GC time
Loading theory "Draft.SubObj" (required by "Draft.DefAssTemplates" via "Draft.DefAss" via "Draft.BigStep" via "Draft.Syntax" via "Draft.Exceptions" via "Draft.Objects")
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Proofs for inductive predicate(s) "Subobjs\<^sub>R"
  Proving monotonicity ...
Proofs for inductive predicate(s) "Subobjs"
  Proving monotonicity ...
Proofs for inductive predicate(s) "casts_to"
  Proving monotonicity ...
Proofs for inductive predicate(s) "Casts_to"
  Proving monotonicity ...
Proofs for inductive predicate(s) "leq_path1p"
  Proving monotonicity ...
### Ambiguous input (line 720 of "$AFP/CoreC++/SubObj.thy") produces 3 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" MinimalMethodDefs)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" C) ("_position" M))))
###   ("_Coll" ("_pattern" ("_position" Cs) ("_position" mthd))
###     ("\<^const>HOL.conj"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" Cs) ("_tuple_arg" ("_position" mthd)))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M)))))
###       ("_Ball" ("_pattern" ("_position" Cs') ("_position" mthd'))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M))))
###         ("\<^const>HOL.eq"
###           ("\<^const>SubObj.leq_path" ("_position" P) ("_position" C)
###             ("_position" Cs')
###             ("\<^const>HOL.implies" ("_position" Cs) ("_position" Cs')))
###           ("_position" Cs))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" MinimalMethodDefs)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" C) ("_position" M))))
###   ("_Coll" ("_pattern" ("_position" Cs) ("_position" mthd))
###     ("\<^const>HOL.conj"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" Cs) ("_tuple_arg" ("_position" mthd)))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M)))))
###       ("_Ball" ("_pattern" ("_position" Cs') ("_position" mthd'))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M))))
###         ("\<^const>SubObj.leq_path" ("_position" P) ("_position" C)
###           ("_position" Cs')
###           ("\<^const>HOL.implies" ("_position" Cs)
###             ("\<^const>HOL.eq" ("_position" Cs') ("_position" Cs))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" MinimalMethodDefs)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" C) ("_position" M))))
###   ("_Coll" ("_pattern" ("_position" Cs) ("_position" mthd))
###     ("\<^const>HOL.conj"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" Cs) ("_tuple_arg" ("_position" mthd)))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M)))))
###       ("_Ball" ("_pattern" ("_position" Cs') ("_position" mthd'))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M))))
###         ("\<^const>HOL.implies"
###           ("\<^const>SubObj.leq_path" ("_position" P) ("_position" C)
###             ("_position" Cs') ("_position" Cs))
###           ("\<^const>HOL.eq" ("_position" Cs') ("_position" Cs)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 725 of "$AFP/CoreC++/SubObj.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" OverriderMethodDefs)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" R) ("_position" M))))
###   ("_Coll" ("_pattern" ("_position" Cs) ("_position" mthd))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" Cs') ("_position" mthd'))
###       ("\<^const>HOL.conj"
###         ("\<^const>SubObj.LeastMethodDef" ("_position" P)
###           ("_applC" ("_position" ldc) ("_position" R)) ("_position" M)
###           ("_position" mthd') ("_position" Cs'))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" Cs) ("_tuple_arg" ("_position" mthd)))
###             ("_applC" ("_position" MinimalMethodDefs)
###               ("_cargs" ("_position" P)
###                 ("_cargs" ("_applC" ("_position" mdc) ("_position" R))
###                   ("_position" M)))))
###           ("\<^const>SubObj.appendPath"
###             ("\<^const>SubObj.leq_path" ("_position" P)
###               ("_applC" ("_position" mdc) ("_position" R)) ("_position" Cs)
###               ("_applC" ("_position" snd) ("_position" R)))
###             ("_position" Cs')))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" OverriderMethodDefs)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" R) ("_position" M))))
###   ("_Coll" ("_pattern" ("_position" Cs) ("_position" mthd))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" Cs') ("_position" mthd'))
###       ("\<^const>HOL.conj"
###         ("\<^const>SubObj.LeastMethodDef" ("_position" P)
###           ("_applC" ("_position" ldc) ("_position" R)) ("_position" M)
###           ("_position" mthd') ("_position" Cs'))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" Cs) ("_tuple_arg" ("_position" mthd)))
###             ("_applC" ("_position" MinimalMethodDefs)
###               ("_cargs" ("_position" P)
###                 ("_cargs" ("_applC" ("_position" mdc) ("_position" R))
###                   ("_position" M)))))
###           ("\<^const>SubObj.leq_path" ("_position" P)
###             ("_applC" ("_position" mdc) ("_position" R)) ("_position" Cs)
###             ("\<^const>SubObj.appendPath"
###               ("_applC" ("_position" snd) ("_position" R))
###               ("_position" Cs'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "SelectMethodDef"
  Proving monotonicity ...
### theory "Draft.SubObj"
### 0.921s elapsed time, 0.977s cpu time, 0.072s GC time
Loading theory "Draft.Objects" (required by "Draft.DefAssTemplates" via "Draft.DefAss" via "Draft.BigStep" via "Draft.Syntax" via "Draft.Exceptions")
Proofs for inductive predicate(s) "init_obj"
  Proving monotonicity ...
### theory "Draft.Objects"
### 0.074s elapsed time, 0.076s cpu time, 0.000s GC time
Loading theory "Draft.Exceptions" (required by "Draft.DefAssTemplates" via "Draft.DefAss" via "Draft.BigStep" via "Draft.Syntax")
### theory "Draft.Exceptions"
### 0.110s elapsed time, 0.142s cpu time, 0.048s GC time
Loading theory "Draft.State" (required by "Draft.DefAssTemplates" via "Draft.DefAss" via "Draft.BigStep")
Loading theory "Draft.Syntax" (required by "Draft.DefAssTemplates" via "Draft.DefAss" via "Draft.BigStep")
### theory "Draft.Syntax"
### 0.036s elapsed time, 0.072s cpu time, 0.000s GC time
### theory "Draft.State"
### 0.037s elapsed time, 0.074s cpu time, 0.000s GC time
Loading theory "Draft.BigStep" (required by "Draft.DefAssTemplates" via "Draft.DefAss")
### Ambiguous input (line 172 of "$AFP/CoreC++/BigStep.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e\<^sub>0)
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg"
###             ("_applC" ("_position" l\<^sub>0)
###               ("\<^const>Expr.expr.LAss" ("_position" V)
###                 ("_position" None)))))
###         ("_position" e\<^sub>1)
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_arg" ("_position" l\<^sub>1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg" ("_position" l\<^sub>0)))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg"
###           ("_applC" ("_position" l\<^sub>1)
###             ("\<^const>Expr.expr.LAss" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e\<^sub>0)
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg"
###             ("_Update" ("_position" l\<^sub>0)
###               ("_updbind" ("_position" V) ("_position" None)))))
###         ("_position" e\<^sub>1)
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_arg" ("_position" l\<^sub>1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg" ("_position" l\<^sub>0)))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg"
###           ("_applC" ("_position" l\<^sub>1)
###             ("\<^const>Expr.expr.LAss" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e\<^sub>0)
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg"
###             ("_applC" ("_position" l\<^sub>0)
###               ("\<^const>Expr.expr.LAss" ("_position" V)
###                 ("_position" None)))))
###         ("_position" e\<^sub>1)
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_arg" ("_position" l\<^sub>1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg" ("_position" l\<^sub>0)))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg"
###           ("_Update" ("_position" l\<^sub>1)
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e\<^sub>0)
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg"
###             ("_Update" ("_position" l\<^sub>0)
###               ("_updbind" ("_position" V) ("_position" None)))))
###         ("_position" e\<^sub>1)
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_arg" ("_position" l\<^sub>1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg" ("_position" l\<^sub>0)))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg"
###           ("_Update" ("_position" l\<^sub>1)
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 123 of "$AFP/CoreC++/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###         ("_applC" ("_position" ref)
###           ("_tuple" ("_position" a) ("_tuple_arg" ("_position" Cs'))))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_arg" ("_position" l\<^sub>2)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" D) ("_tuple_arg" ("_position" S))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>SubObj.LeastFieldDecl" ("_position" P)
###               ("_applC" ("_position" last) ("_position" Cs'))
###               ("_position" F) ("_position" T) ("_position" Cs)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###                 ("_position" v) ("_position" v')))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" Ds)
###                   ("\<^const>SubObj.appendPath" ("_position" Cs')
###                     ("_position" Cs))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" Ds)
###                       ("_tuple_arg" ("_position" fs)))
###                     ("_position" S)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq" ("_position" fs')
###                       ("_MapUpd" ("_position" fs)
###                         ("_maplet" ("_position" F) ("_position" v')))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq" ("_position" S')
###                         ("\<^const>Set.union"
###                           ("\<^const>Groups.minus_class.minus"
###                             ("_position" S)
###                             ("_Finset"
###                               ("_tuple" ("_position" Ds)
###                                 ("_tuple_arg" ("_position" fs)))))
###                           ("_Finset"
###                             ("_tuple" ("_position" Ds)
###                               ("_tuple_arg" ("_position" fs')))))))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" h\<^sub>2')
###                           ("_MapUpd" ("_position" h\<^sub>2)
###                             ("_maplet" ("_position" a)
###                               ("_tuple" ("_position" D)
###                                 ("_tuple_arg"
###                                   ("_position" S')))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v'))
###       ("_tuple" ("_position" h\<^sub>2')
###         ("_tuple_arg" ("_position" l\<^sub>2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###         ("_applC" ("_position" ref)
###           ("_tuple" ("_position" a) ("_tuple_arg" ("_position" Cs'))))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_arg" ("_position" l\<^sub>2)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" D) ("_tuple_arg" ("_position" S))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>SubObj.LeastFieldDecl" ("_position" P)
###               ("_applC" ("_position" last) ("_position" Cs'))
###               ("_position" F) ("_position" T) ("_position" Cs)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###                 ("_position" v) ("_position" v')))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" Ds)
###                   ("\<^const>SubObj.appendPath" ("_position" Cs')
###                     ("_position" Cs))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" Ds)
###                       ("_tuple_arg" ("_position" fs)))
###                     ("_position" S)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq" ("_position" fs')
###                       ("_MapUpd" ("_position" fs)
###                         ("_maplet" ("_position" F) ("_position" v')))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq" ("_position" S')
###                         ("\<^const>Set.union"
###                           ("\<^const>Groups.minus_class.minus"
###                             ("_position" S)
###                             ("_Finset"
###                               ("_tuple" ("_position" Ds)
###                                 ("_tuple_arg" ("_position" fs)))))
###                           ("_Finset"
###                             ("_tuple" ("_position" Ds)
###                               ("_tuple_arg" ("_position" fs')))))))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" h\<^sub>2')
###                           ("_MapUpd" ("_position" h\<^sub>2)
###                             ("_maplet" ("_position" a)
###                               ("_tuple" ("_position" D)
###                                 ("_tuple_arg"
###                                   ("_position" S')))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v'))
###       ("_tuple" ("_position" h\<^sub>2')
###         ("_tuple_arg" ("_position" l\<^sub>2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 130 of "$AFP/CoreC++/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1) ("_position" s\<^sub>0) ("_position" null)
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1) ("_position" s\<^sub>0) ("_position" null)
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 134 of "$AFP/CoreC++/BigStep.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E) ("_position" e\<^sub>1)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E) ("_position" e\<^sub>1)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 138 of "$AFP/CoreC++/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###         ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###           ("_applC" ("_position" throw) ("_position" e'))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###         ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###           ("_applC" ("_position" throw) ("_position" e'))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "eval", "evals"
  Proving monotonicity ...
### Ambiguous input (line 247 of "$AFP/CoreC++/BigStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BigStep.eval" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.LAss"
###       ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs))
###       ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BigStep.eval" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###       ("_position" Cs) ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.BigStep"
### 2.673s elapsed time, 3.838s cpu time, 0.752s GC time
Loading theory "Draft.DefAss" (required by "Draft.DefAssTemplates")
### Ambiguous input (line 18 of "$AFP/CoreC++/DefAss.thy") produces 8 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>hyperUn" ("_position" A) ("_position" B))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" None))
###       ("_case1"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("_case_syntax" ("_position" B)
###           ("_case2" ("_case1" ("_position" None) ("_position" None))
###             ("_case1" ("\<^const>Option.option.Some" ("_position" B))
###               ("\<^const>Option.option.Some"
###                 ("\<^const>Set.union" ("_position" A)
###                   ("_position" B))))))))))
### ("\<^const>Pure.eq" ("\<^fixed>hyperUn" ("_position" A) ("_position" B))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" None))
###       ("_case1" ("\<^const>Option.option.Some" ("_position" A))
###         ("_case_syntax" ("_position" B)
###           ("_case2" ("_case1" ("_position" None) ("_position" None))
###             ("_case1" ("\<^const>Option.option.Some" ("_position" B))
###               ("\<^const>Option.option.Some"
###                 ("\<^const>Set.union" ("_position" A)
###                   ("_position" B))))))))))
### ("\<^const>Pure.eq" ("\<^fixed>hyperUn" ("_position" A) ("_position" B))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" None))
###       ("_case1"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("_case_syntax" ("_position" B)
###           ("_case2" ("_case1" ("_position" None) ("_position" None))
###             ("_case1"
###               ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                 ("_position" B))
###               ("\<^const>Option.option.Some"
###                 ("\<^const>Set.union" ("_position" A)
###                   ("_position" B))))))))))
### ("\<^const>Pure.eq" ("\<^fixed>hyperUn" ("_position" A) ("_position" B))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" None))
###       ("_case1" ("\<^const>Option.option.Some" ("_position" A))
###         ("_case_syntax" ("_position" B)
###           ("_case2" ("_case1" ("_position" None) ("_position" None))
###             ("_case1"
###               ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                 ("_position" B))
###               ("\<^const>Option.option.Some"
###                 ("\<^const>Set.union" ("_position" A)
###                   ("_position" B))))))))))
### ("\<^const>Pure.eq" ("\<^fixed>hyperUn" ("_position" A) ("_position" B))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" None))
###       ("_case1"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("_case_syntax" ("_position" B)
###           ("_case2" ("_case1" ("_position" None) ("_position" None))
###             ("_case1" ("\<^const>Option.option.Some" ("_position" B))
###               ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                 ("\<^const>Set.union" ("_position" A)
###                   ("_position" B))))))))))
### ("\<^const>Pure.eq" ("\<^fixed>hyperUn" ("_position" A) ("_position" B))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" None))
###       ("_case1" ("\<^const>Option.option.Some" ("_position" A))
###         ("_case_syntax" ("_position" B)
###           ("_case2" ("_case1" ("_position" None) ("_position" None))
###             ("_case1" ("\<^const>Option.option.Some" ("_position" B))
###               ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                 ("\<^const>Set.union" ("_position" A)
###                   ("_position" B))))))))))
### ("\<^const>Pure.eq" ("\<^fixed>hyperUn" ("_position" A) ("_position" B))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" None))
###       ("_case1"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("_case_syntax" ("_position" B)
###           ("_case2" ("_case1" ("_position" None) ("_position" None))
###             ("_case1"
###               ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                 ("_position" B))
###               ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                 ("\<^const>Set.union" ("_position" A)
###                   ("_position" B))))))))))
### ("\<^const>Pure.eq" ("\<^fixed>hyperUn" ("_position" A) ("_position" B))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" None))
###       ("_case1" ("\<^const>Option.option.Some" ("_position" A))
###         ("_case_syntax" ("_position" B)
###           ("_case2" ("_case1" ("_position" None) ("_position" None))
###             ("_case1"
###               ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                 ("_position" B))
###               ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                 ("\<^const>Set.union" ("_position" A)
###                   ("_position" B))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 22 of "$AFP/CoreC++/DefAss.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.eq" ("\<^fixed>hyperInt" ("_position" A) ("_position" B))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" B))
###       ("_case1"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("_case_syntax" ("_position" B)
###           ("_case2"
###             ("_case1" ("_position" None)
###               ("\<^const>Option.option.Some" ("_position" A)))
###             ("_case1" ("\<^const>Option.option.Some" ("_position" B))
###               ("\<^const>Option.option.Some"
###                 ("\<^const>Set.inter" ("_position" A)
###                   ("_position" B))))))))))
### ("\<^const>Pure.eq" ("\<^fixed>hyperInt" ("_position" A) ("_position" B))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" B))
###       ("_case1" ("\<^const>Option.option.Some" ("_position" A))
###         ("_case_syntax" ("_position" B)
###           ("_case2"
###             ("_case1" ("_position" None)
###               ("\<^const>Option.option.Some" ("_position" A)))
###             ("_case1" ("\<^const>Option.option.Some" ("_position" B))
###               ("\<^const>Option.option.Some"
###                 ("\<^const>Set.inter" ("_position" A)
###                   ("_position" B))))))))))
### ("\<^const>Pure.eq" ("\<^fixed>hyperInt" ("_position" A) ("_position" B))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" B))
###       ("_case1"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("_case_syntax" ("_position" B)
###           ("_case2"
###             ("_case1" ("_position" None)
###               ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                 ("_position" A)))
###             ("_case1" ("\<^const>Option.option.Some" ("_position" B))
###               ("\<^const>Option.option.Some"
###                 ("\<^const>Set.inter" ("_position" A)
###                   ("_position" B))))))))))
### ("\<^const>Pure.eq" ("\<^fixed>hyperInt" ("_position" A) ("_position" B))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" B))
###       ("_case1" ("\<^const>Option.option.Some" ("_position" A))
###         ("_case_syntax" ("_position" B)
###           ("_case2"
###             ("_case1" ("_position" None)
###               ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                 ("_position" A)))
###             ("_case1" ("\<^const>Option.option.Some" ("_position" B))
###               ("\<^const>Option.option.Some"
###                 ("\<^const>Set.inter" ("_position" A)
###                   ("_position" B))))))))))
### ("\<^const>Pure.eq" ("\<^fixed>hyperInt" ("_position" A) ("_position" B))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" B))
###       ("_case1"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("_case_syntax" ("_position" B)
###           ("_case2"
###             ("_case1" ("_position" None)
###               ("\<^const>Option.option.Some" ("_position" A)))
###             ("_case1"
###               ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                 ("_position" B))
###               ("\<^const>Option.option.Some"
###                 ("\<^const>Set.inter" ("_position" A)
###                   ("_position" B))))))))))
### ("\<^const>Pure.eq" ("\<^fixed>hyperInt" ("_position" A) ("_position" B))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" B))
###       ("_case1" ("\<^const>Option.option.Some" ("_position" A))
###         ("_case_syntax" ("_position" B)
###           ("_case2"
###             ("_case1" ("_position" None)
###               ("\<^const>Option.option.Some" ("_position" A)))
###             ("_case1"
###               ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                 ("_position" B))
###               ("\<^const>Option.option.Some"
###                 ("\<^const>Set.inter" ("_position" A)
###                   ("_position" B))))))))))
### ("\<^const>Pure.eq" ("\<^fixed>hyperInt" ("_position" A) ("_position" B))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" B))
###       ("_case1"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("_case_syntax" ("_position" B)
###           ("_case2"
###             ("_case1" ("_position" None)
###               ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                 ("_position" A)))
###             ("_case1"
###               ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                 ("_position" B))
###               ("\<^const>Option.option.Some"
###                 ("\<^const>Set.inter" ("_position" A)
###                   ("_position" B))))))))))
### ("\<^const>Pure.eq" ("\<^fixed>hyperInt" ("_position" A) ("_position" B))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" B))
###       ("_case1" ("\<^const>Option.option.Some" ("_position" A))
###         ("_case_syntax" ("_position" B)
###           ("_case2"
###             ("_case1" ("_position" None)
###               ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                 ("_position" A)))
###             ("_case1"
###               ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                 ("_position" B))
###               ("\<^const>Option.option.Some"
###                 ("\<^const>Set.inter" ("_position" A)
###                   ("_position" B))))))))))
### ("\<^const>Pure.eq" ("\<^fixed>hyperInt" ("_position" A) ("_position" B))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" B))
###       ("_case1"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("_case_syntax" ("_position" B)
###           ("_case2"
###             ("_case1" ("_position" None)
###               ("\<^const>Option.option.Some" ("_position" A)))
###             ("_case1" ("\<^const>Option.option.Some" ("_position" B))
###               ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                 ("\<^const>Set.inter" ("_position" A)
###                   ("_position" B))))))))))
### ("\<^const>Pure.eq" ("\<^fixed>hyperInt" ("_position" A) ("_position" B))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" B))
###       ("_case1" ("\<^const>Option.option.Some" ("_position" A))
###         ("_case_syntax" ("_position" B)
###           ("_case2"
###             ("_case1" ("_position" None)
###               ("\<^const>Option.option.Some" ("_position" A)))
###             ("_case1" ("\<^const>Option.option.Some" ("_position" B))
###               ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                 ("\<^const>Set.inter" ("_position" A)
###                   ("_position" B))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 26 of "$AFP/CoreC++/DefAss.thy") produces 4 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>hyperDiff1" ("_position" A) ("_position" a))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" None))
###       ("_case1"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("\<^const>Groups.minus_class.minus" ("_position" A)
###             ("_Finset" ("_position" a))))))))
### ("\<^const>Pure.eq" ("\<^fixed>hyperDiff1" ("_position" A) ("_position" a))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" None))
###       ("_case1" ("\<^const>Option.option.Some" ("_position" A))
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("\<^const>Groups.minus_class.minus" ("_position" A)
###             ("_Finset" ("_position" a))))))))
### ("\<^const>Pure.eq" ("\<^fixed>hyperDiff1" ("_position" A) ("_position" a))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" None))
###       ("_case1"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("\<^const>Option.option.Some"
###           ("\<^const>Groups.minus_class.minus" ("_position" A)
###             ("_Finset" ("_position" a))))))))
### ("\<^const>Pure.eq" ("\<^fixed>hyperDiff1" ("_position" A) ("_position" a))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" None))
###       ("_case1" ("\<^const>Option.option.Some" ("_position" A))
###         ("\<^const>Option.option.Some"
###           ("\<^const>Groups.minus_class.minus" ("_position" A)
###             ("_Finset" ("_position" a))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 29 of "$AFP/CoreC++/DefAss.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>hyper_isin" ("_position" a) ("_position" A))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" True))
###       ("_case1"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("\<^const>Set.member" ("_position" a) ("_position" A))))))
### ("\<^const>Pure.eq" ("\<^fixed>hyper_isin" ("_position" a) ("_position" A))
###   ("_case_syntax" ("_position" A)
###     ("_case2" ("_case1" ("_position" None) ("_position" True))
###       ("_case1" ("\<^const>Option.option.Some" ("_position" A))
###         ("\<^const>Set.member" ("_position" a) ("_position" A))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 32 of "$AFP/CoreC++/DefAss.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>hyper_subset" ("_position" A) ("_position" B))
###   ("_case_syntax" ("_position" B)
###     ("_case2" ("_case1" ("_position" None) ("_position" True))
###       ("_case1"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" B))
###         ("_case_syntax" ("_position" A)
###           ("_case2" ("_case1" ("_position" None) ("_position" False))
###             ("_case1" ("\<^const>Option.option.Some" ("_position" A))
###               ("\<^const>Set.subset_eq" ("_position" A)
###                 ("_position" B)))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>hyper_subset" ("_position" A) ("_position" B))
###   ("_case_syntax" ("_position" B)
###     ("_case2" ("_case1" ("_position" None) ("_position" True))
###       ("_case1" ("\<^const>Option.option.Some" ("_position" B))
###         ("_case_syntax" ("_position" A)
###           ("_case2" ("_case1" ("_position" None) ("_position" False))
###             ("_case1" ("\<^const>Option.option.Some" ("_position" A))
###               ("\<^const>Set.subset_eq" ("_position" A)
###                 ("_position" B)))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>hyper_subset" ("_position" A) ("_position" B))
###   ("_case_syntax" ("_position" B)
###     ("_case2" ("_case1" ("_position" None) ("_position" True))
###       ("_case1"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" B))
###         ("_case_syntax" ("_position" A)
###           ("_case2" ("_case1" ("_position" None) ("_position" False))
###             ("_case1"
###               ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                 ("_position" A))
###               ("\<^const>Set.subset_eq" ("_position" A)
###                 ("_position" B)))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>hyper_subset" ("_position" A) ("_position" B))
###   ("_case_syntax" ("_position" B)
###     ("_case2" ("_case1" ("_position" None) ("_position" True))
###       ("_case1" ("\<^const>Option.option.Some" ("_position" B))
###         ("_case_syntax" ("_position" A)
###           ("_case2" ("_case1" ("_position" None) ("_position" False))
###             ("_case1"
###               ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                 ("_position" A))
###               ("\<^const>Set.subset_eq" ("_position" A)
###                 ("_position" B)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 38 of "$AFP/CoreC++/DefAss.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("\<^const>Set.empty"))
###         ("_position" A))
###       ("_position" A))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("\<^const>Set.empty")))
###       ("_position" A))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Option.option.Some" ("\<^const>Set.empty"))
###         ("_position" A))
###       ("_position" A))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("\<^const>Set.empty")))
###       ("_position" A))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("\<^const>Set.empty"))
###         ("_position" A))
###       ("_position" A))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>Option.option.Some" ("\<^const>Set.empty")))
###       ("_position" A))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Option.option.Some" ("\<^const>Set.empty"))
###         ("_position" A))
###       ("_position" A))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>Option.option.Some" ("\<^const>Set.empty")))
###       ("_position" A))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 41 of "$AFP/CoreC++/DefAss.thy") produces 32 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" B)))
###       ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###         ("\<^const>Set.union" ("_position" A) ("_position" B))))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperDiff1"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("_position" a))
###       ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###         ("\<^const>Groups.minus_class.minus" ("_position" A)
###           ("_Finset" ("_position" a)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Option.option.Some" ("_position" A))
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" B)))
###       ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###         ("\<^const>Set.union" ("_position" A) ("_position" B))))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperDiff1"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("_position" a))
###       ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###         ("\<^const>Groups.minus_class.minus" ("_position" A)
###           ("_Finset" ("_position" a)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("\<^const>Option.option.Some" ("_position" B)))
###       ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###         ("\<^const>Set.union" ("_position" A) ("_position" B))))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperDiff1"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("_position" a))
###       ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###         ("\<^const>Groups.minus_class.minus" ("_position" A)
###           ("_Finset" ("_position" a)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Option.option.Some" ("_position" A))
###         ("\<^const>Option.option.Some" ("_position" B)))
###       ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###         ("\<^const>Set.union" ("_position" A) ("_position" B))))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperDiff1"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("_position" a))
###       ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###         ("\<^const>Groups.minus_class.minus" ("_position" A)
###           ("_Finset" ("_position" a)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" B)))
###       ("\<^const>Option.option.Some"
###         ("\<^const>Set.union" ("_position" A) ("_position" B))))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperDiff1"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("_position" a))
###       ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###         ("\<^const>Groups.minus_class.minus" ("_position" A)
###           ("_Finset" ("_position" a)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Option.option.Some" ("_position" A))
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" B)))
###       ("\<^const>Option.option.Some"
###         ("\<^const>Set.union" ("_position" A) ("_position" B))))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperDiff1"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("_position" a))
###       ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###         ("\<^const>Groups.minus_class.minus" ("_position" A)
###           ("_Finset" ("_position" a)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("\<^const>Option.option.Some" ("_position" B)))
###       ("\<^const>Option.option.Some"
###         ("\<^const>Set.union" ("_position" A) ("_position" B))))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperDiff1"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("_position" a))
###       ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###         ("\<^const>Groups.minus_class.minus" ("_position" A)
###           ("_Finset" ("_position" a)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Option.option.Some" ("_position" A))
###         ("\<^const>Option.option.Some" ("_position" B)))
###       ("\<^const>Option.option.Some"
###         ("\<^const>Set.union" ("_position" A) ("_position" B))))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperDiff1"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("_position" a))
###       ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###         ("\<^const>Groups.minus_class.minus" ("_position" A)
###           ("_Finset" ("_position" a)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" B)))
###       ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###         ("\<^const>Set.union" ("_position" A) ("_position" B))))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperDiff1"
###         ("\<^const>Option.option.Some" ("_position" A)) ("_position" a))
###       ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###         ("\<^const>Groups.minus_class.minus" ("_position" A)
###           ("_Finset" ("_position" a)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Option.option.Some" ("_position" A))
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" B)))
###       ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###         ("\<^const>Set.union" ("_position" A) ("_position" B))))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperDiff1"
###         ("\<^const>Option.option.Some" ("_position" A)) ("_position" a))
###       ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###         ("\<^const>Groups.minus_class.minus" ("_position" A)
###           ("_Finset" ("_position" a)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 53 of "$AFP/CoreC++/DefAss.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_Finset" ("_position" a))))
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_Finset" ("_position" a)))
###         ("_position" A)))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>DefAss.hyperUn"
###           ("\<^const>Option.option.Some" ("_Finset" ("_position" a)))
###           ("_position" B)))
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_Finset" ("_position" a)))
###         ("\<^const>DefAss.hyperUn" ("_position" A) ("_position" B))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>Option.option.Some" ("_Finset" ("_position" a))))
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_Finset" ("_position" a)))
###         ("_position" A)))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>DefAss.hyperUn"
###           ("\<^const>Option.option.Some" ("_Finset" ("_position" a)))
###           ("_position" B)))
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_Finset" ("_position" a)))
###         ("\<^const>DefAss.hyperUn" ("_position" A) ("_position" B))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_Finset" ("_position" a))))
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Option.option.Some" ("_Finset" ("_position" a)))
###         ("_position" A)))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>DefAss.hyperUn"
###           ("\<^const>Option.option.Some" ("_Finset" ("_position" a)))
###           ("_position" B)))
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_Finset" ("_position" a)))
###         ("\<^const>DefAss.hyperUn" ("_position" A) ("_position" B))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>Option.option.Some" ("_Finset" ("_position" a))))
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Option.option.Some" ("_Finset" ("_position" a)))
###         ("_position" A)))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>DefAss.hyperUn"
###           ("\<^const>Option.option.Some" ("_Finset" ("_position" a)))
###           ("_position" B)))
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_Finset" ("_position" a)))
###         ("\<^const>DefAss.hyperUn" ("_position" A) ("_position" B))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_Finset" ("_position" a))))
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_Finset" ("_position" a)))
###         ("_position" A)))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>DefAss.hyperUn"
###           ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###             ("_Finset" ("_position" a)))
###           ("_position" B)))
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_Finset" ("_position" a)))
###         ("\<^const>DefAss.hyperUn" ("_position" A) ("_position" B))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>Option.option.Some" ("_Finset" ("_position" a))))
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_Finset" ("_position" a)))
###         ("_position" A)))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>DefAss.hyperUn"
###           ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###             ("_Finset" ("_position" a)))
###           ("_position" B)))
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_Finset" ("_position" a)))
###         ("\<^const>DefAss.hyperUn" ("_position" A) ("_position" B))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_Finset" ("_position" a))))
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Option.option.Some" ("_Finset" ("_position" a)))
###         ("_position" A)))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>DefAss.hyperUn"
###           ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###             ("_Finset" ("_position" a)))
###           ("_position" B)))
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_Finset" ("_position" a)))
###         ("\<^const>DefAss.hyperUn" ("_position" A) ("_position" B))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>Option.option.Some" ("_Finset" ("_position" a))))
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Option.option.Some" ("_Finset" ("_position" a)))
###         ("_position" A)))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>DefAss.hyperUn"
###           ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###             ("_Finset" ("_position" a)))
###           ("_position" B)))
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_Finset" ("_position" a)))
###         ("\<^const>DefAss.hyperUn" ("_position" A) ("_position" B))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_Finset" ("_position" a))))
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_Finset" ("_position" a)))
###         ("_position" A)))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>DefAss.hyperUn"
###           ("\<^const>Option.option.Some" ("_Finset" ("_position" a)))
###           ("_position" B)))
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Option.option.Some" ("_Finset" ("_position" a)))
###         ("\<^const>DefAss.hyperUn" ("_position" A) ("_position" B))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>Option.option.Some" ("_Finset" ("_position" a))))
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_Finset" ("_position" a)))
###         ("_position" A)))
###     ("\<^const>HOL.eq"
###       ("\<^const>DefAss.hyperUn" ("_position" A)
###         ("\<^const>DefAss.hyperUn"
###           ("\<^const>Option.option.Some" ("_Finset" ("_position" a)))
###           ("_position" B)))
###       ("\<^const>DefAss.hyperUn"
###         ("\<^const>Option.option.Some" ("_Finset" ("_position" a)))
###         ("\<^const>DefAss.hyperUn" ("_position" A) ("_position" B))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 60 of "$AFP/CoreC++/DefAss.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>)
###       ("_applC" ("_position" new) ("_position" C)))
###     ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###       ("\<^const>Set.empty"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>)
###       ("_applC" ("_position" new) ("_position" C)))
###     ("\<^const>Option.option.Some" ("\<^const>Set.empty"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 63 of "$AFP/CoreC++/DefAss.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>)
###       ("_applC" ("_position" Val) ("_position" v)))
###     ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###       ("\<^const>Set.empty"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>)
###       ("_applC" ("_position" Val) ("_position" v)))
###     ("\<^const>Option.option.Some" ("\<^const>Set.empty"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 76 of "$AFP/CoreC++/DefAss.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>s) ("\<^const>List.list.Nil"))
###     ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###       ("\<^const>Set.empty"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>s) ("\<^const>List.list.Nil"))
###     ("\<^const>Option.option.Some" ("\<^const>Set.empty"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 65 of "$AFP/CoreC++/DefAss.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>)
###       ("_applC" ("_position" Var) ("_position" V)))
###     ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###       ("\<^const>Set.empty"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>)
###       ("_applC" ("_position" Var) ("_position" V)))
###     ("\<^const>Option.option.Some" ("\<^const>Set.empty"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 66 of "$AFP/CoreC++/DefAss.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>)
###       ("_applC" ("_position" LAss)
###         ("_cargs" ("_position" V) ("_position" e))))
###     ("\<^const>DefAss.hyperUn"
###       ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###         ("_Finset" ("_position" V)))
###       ("_applC" ("_position" \<A>) ("_position" e)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>)
###       ("_applC" ("_position" LAss)
###         ("_cargs" ("_position" V) ("_position" e))))
###     ("\<^const>DefAss.hyperUn"
###       ("\<^const>Option.option.Some" ("_Finset" ("_position" V)))
###       ("_applC" ("_position" \<A>) ("_position" e)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 68 of "$AFP/CoreC++/DefAss.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" \<A>)
###       ("_updbind"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2)))
###     ("\<^const>DefAss.hyperUn"
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>1))
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2)))
###     ("\<^const>DefAss.hyperUn"
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>1))
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2)))
###     ("\<^const>DefAss.hyperUn"
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>1))
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  \<A> :: "expr => char list set option"
  \<A>s :: "expr list => char list set option"
### Ambiguous input (line 88 of "$AFP/CoreC++/DefAss.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<D>)
###       ("_cargs"
###         ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs) ("_position" e\<^sub>2))
###         ("_position" A)))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" \<D>)
###         ("_cargs" ("_position" e\<^sub>1) ("_position" A)))
###       ("_applC" ("_position" \<D>)
###         ("_cargs" ("_position" e\<^sub>2)
###           ("\<^const>DefAss.hyperUn" ("_position" A)
###             ("_applC" ("_position" \<A>) ("_position" e\<^sub>1))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<D>)
###       ("_cargs"
###         ("\<^const>Expr.expr.LAss"
###           ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" Cs))
###           ("_position" e\<^sub>2))
###         ("_position" A)))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" \<D>)
###         ("_cargs" ("_position" e\<^sub>1) ("_position" A)))
###       ("_applC" ("_position" \<D>)
###         ("_cargs" ("_position" e\<^sub>2)
###           ("\<^const>DefAss.hyperUn" ("_position" A)
###             ("_applC" ("_position" \<A>) ("_position" e\<^sub>1))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  \<D> :: "expr => char list set option => bool"
  \<D>s :: "expr list => char list set option => bool"
### Ambiguous input (line 100 of "$AFP/CoreC++/DefAss.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>s)
###       ("_applC" ("_position" map)
###         ("_cargs" ("_position" Val) ("_position" vs))))
###     ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###       ("\<^const>Set.empty"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>s)
###       ("_applC" ("_position" map)
###         ("_cargs" ("_position" Val) ("_position" vs))))
###     ("\<^const>Option.option.Some" ("\<^const>Set.empty"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 107 of "$AFP/CoreC++/DefAss.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" A)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" \<A>) ("_position" e))
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.subset_eq" ("_position" A)
###         ("_applC" ("_position" fv) ("_position" e))))))
### ("\<^const>Pure.all_binder" ("_position" A)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" \<A>) ("_position" e))
###         ("\<^const>Option.option.Some" ("_position" A))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.subset_eq" ("_position" A)
###         ("_applC" ("_position" fv) ("_position" e))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 108 of "$AFP/CoreC++/DefAss.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" A)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" \<A>s) ("_position" es))
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_position" A))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.subset_eq" ("_position" A)
###         ("_applC" ("_position" fvs) ("_position" es))))))
### ("\<^const>Pure.all_binder" ("_position" A)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" \<A>s) ("_position" es))
###         ("\<^const>Option.option.Some" ("_position" A))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.subset_eq" ("_position" A)
###         ("_applC" ("_position" fvs) ("_position" es))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.DefAss"
### 0.208s elapsed time, 0.246s cpu time, 0.029s GC time
Loading theory "Draft.DefAssTemplates"
val templateLemmas =
   [("DefAss.As_map_Val", "\<A>s (map Val ?vs) = \<lfloor>{}\<rfloor>",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)),
       template_app (template_hole 1, template_hole 0))),
    ("DefAss.hyperUn_assoc",
     "?A \<squnion> ?B \<squnion> ?C = ?A \<squnion> (?B \<squnion> ?C)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("DefAss.A_fv", "\<A> ?e = \<lfloor>?A\<rfloor> ==> ?A <= fv ?e",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_equals, template_var 0,
         template_app (template_hole 0, template_var 1)))),
    ("DefAss.diff_lem",
     "?A \<sqsubseteq> ?A' ==>
      ?A \<ominus> ?b \<sqsubseteq> ?A' \<ominus> ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("DefAss.sqUn_lem",
     "?A \<sqsubseteq> ?A' ==>
      ?A \<squnion> ?B \<sqsubseteq> ?A' \<squnion> ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("DefAss.D_mono'",
     "[| \<D> ?e ?A; ?A \<sqsubseteq> ?A' |] ==> \<D> ?e ?A'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("DefAss.Ds_mono'",
     "[| \<D>s ?es ?A; ?A \<sqsubseteq> ?A' |] ==> \<D>s ?es ?A'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("DefAss.D_mono",
     "[| ?A \<sqsubseteq> ?A'; \<D> ?e ?A |] ==> \<D> ?e ?A'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("DefAss.Ds_mono",
     "[| ?A \<sqsubseteq> ?A'; \<D>s ?es ?A |] ==> \<D>s ?es ?A'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("DefAss.D_append",
     "\<D>s (?es @ ?es') ?A =
      (\<D>s ?es ?A & \<D>s ?es' (?A \<squnion> \<A>s ?es))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 2)))))),
    ("DefAss.hyper_insert_comm",
     "?A \<squnion> \<lfloor>{?a}\<rfloor> =
      \<lfloor>{?a}\<rfloor> \<squnion> ?A &
      ?A \<squnion> (\<lfloor>{?a}\<rfloor> \<squnion> ?B) =
      \<lfloor>{?a}\<rfloor> \<squnion> (?A \<squnion> ?B)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_hole 0)))),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_hole 0))),
                 template_var 2))),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 1, template_var 1),
                         template_hole 0))),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_hole 0))),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 0))))
         ))]:
   (string * thm * template) list
### theory "Draft.DefAssTemplates"
### 0.378s elapsed time, 0.519s cpu time, 0.052s GC time
val it = (): unit
