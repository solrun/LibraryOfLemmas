   [("Conform.lconf_empty",
     "?P,?h \<turnstile> Map.empty (:\<le>)\<^sub>w ?E",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             t_empty),
           template_var 0)
         )),
    ("Conform.conf_NT", "(?P,?h \<turnstile> ?v :\<le> NT) = (?v = Null)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1),
                template_var 0),
              template_hole 2)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("Conform.conf_Null",
     "(?P,?h \<turnstile> Null :\<le> ?T) = ?P \<turnstile> NT \<le> ?T",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_hole 2),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_hole 0),
         template_var 0))),
    ("Conform.defval_conf",
     "is_type ?P ?T ==> ?P,?h \<turnstile> default_val ?T :\<le> ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0),
               template_app (template_hole 0, template_var 1)),
             template_var 1)
           ))),
    ("Conform.typeof_lit_conf",
     "typeof ?v = \<lfloor>?T\<rfloor> ==> ?P,?h \<turnstile> ?v :\<le> ?T",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 3),
          template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 3),
             template_var 2)
           ))),
    ("Conform.wt_same_type_typeconf",
     "?P,?E,?h \<turnstile> ?e : ?T ==>
      ?P,?E,?h \<turnstile> ?e :\<^bsub>NT\<^esub> ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Conform.wts_same_types_typesconf",
     "?P,?E,?h \<turnstile> ?es [:] ?Ts ==>
      ?P,?E,?h \<turnstile> ?es [:]\<^bsub>NT\<^esub> ?Ts",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Conform.typeof_conf",
     "?P \<turnstile> typeof\<^bsub>?h\<^esub> ?v = \<lfloor>?T\<rfloor> ==>
      ?P,?h \<turnstile> ?v :\<le> ?T",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Conform.confs_rev",
     "(?P,?h \<turnstile> rev ?s [:\<le>] ?t) =
      (?P,?h \<turnstile> ?s [:\<le>] rev ?t)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2)),
           template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2)),
           template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Conform.hconfD",
     "[| ?P \<turnstile> ?h \<surd>; ?h ?a = \<lfloor>?obj\<rfloor> |]
      ==> ?P,?h \<turnstile> ?obj \<surd>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app (template_var 2, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Conform.fconf_init_fields",
     "class ?P ?C = \<lfloor>(?Bs, ?fs, ?ms)\<rfloor> ==>
      ?P,?h \<turnstile> init_class_fieldmap ?P ?C (:\<le>) map_of ?fs",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 5), template_var 4),
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 5),
                 template_var 0),
               template_app
                (template_app (template_hole 1, template_var 5),
                 template_var 4)),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Conform.typeof_notclass_heap",
     "ALL C. ?T ~= Class C ==>
      (?P \<turnstile> typeof\<^bsub>?h\<^esub> ?v = \<lfloor>?T\<rfloor>) =
      (?P \<turnstile> typeof\<^bsub>?h'\<^esub> ?v =
       \<lfloor>?T\<rfloor>)",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_app (template_hole 0, template_var 4)),
         template_equation
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0),
             template_var 1),
           template_app (template_hole 0, template_var 4))))),
    ("Conform.hconf_Subobjs",
     "[| ?h ?a = \<lfloor>(?C, ?S)\<rfloor>; (?Cs, ?fs) : ?S;
         ?P \<turnstile> ?h \<surd> |]
      ==> Subobjs ?P ?C ?Cs",
     template_implication
      ([template_equation
         (template_app (template_var 6, template_var 5),
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 6)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 4),
             template_var 2)
           ))),
    ("Conform.conf_upd_obj",
     "?h ?a = \<lfloor>(?C, ?S)\<rfloor> ==>
      (?P,?h(?a |-> (?C, ?S')) \<turnstile> ?v :\<le> ?T) =
      (?P,?h \<turnstile> ?v :\<le> ?T)",
     template_implication
      ([template_equation
         (template_app (template_var 7, template_var 6),
          template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 5),
              template_var 4)))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 7),
                   template_var 6),
                 template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 5),
                     template_var 2)))),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 7),
             template_var 1),
           template_var 0)))),
    ("Conform.lconf_upd2",
     "[| ?P,?h \<turnstile> ?l (:\<le>)\<^sub>w ?E;
         ?P,?h \<turnstile> ?v :\<le> ?T |]
      ==> ?P,?h \<turnstile> ?l(?V |-> ?v) (:\<le>)\<^sub>w ?E(?V |-> ?T)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 6),
                  template_var 5),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 5, template_var 6),
                 template_var 5),
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 4),
                   template_var 0),
                 template_app (template_hole 2, template_var 2))),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0),
               template_app (template_hole 0, template_var 1)))
           ))),
    ("Conform.lconf_upd",
     "[| ?P,?h \<turnstile> ?l (:\<le>)\<^sub>w ?E;
         ?P,?h \<turnstile> ?v :\<le> ?T; ?E ?V = \<lfloor>?T\<rfloor> |]
      ==> ?P,?h \<turnstile> ?l(?V |-> ?v) (:\<le>)\<^sub>w ?E",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 6),
                  template_var 5),
                template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app (template_var 3, template_var 0),
          template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 5, template_var 6),
                 template_var 5),
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 0),
                 template_app (template_hole 0, template_var 2))),
             template_var 3)
           ))),
    ("Conform.confs_Cons2",
     "(?P,?h \<turnstile> ?xs [:\<le>] ?y # ?ys) =
      (EX z zs.
          ?xs = z # zs &
          ?P,?h \<turnstile> z :\<le> ?y &
          ?P,?h \<turnstile> zs [:\<le>] ?ys)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 4),
               template_var 3)),
           template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("Conform.types_conf_smaller_types",
     "[| length ?es = length ?Ts';
         ?P,?E,?h \<turnstile> ?es [:]\<^bsub>NT\<^esub> ?Ts';
         ?P \<turnstile> ?Ts' [\<le>] ?Ts |]
      ==> EX Ts''.
             ?P,?E,?h \<turnstile> ?es [:] Ts'' &
             ?P \<turnstile> Ts'' [\<le>] ?Ts",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 5),
          template_app (template_hole 6, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 3)),
                template_var 4),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 2, t_empty))))]
