Loading theory "Draft.Auxiliary" (required by "Draft.WellTypeTemplates" via "Draft.WellType" via "Draft.Syntax" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj" via "Draft.ClassRel" via "Draft.Decl" via "Draft.Expr" via "Draft.Value" via "Draft.Type")
Loading theory "Draft.Templates" (required by "Draft.WellTypeTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.065s elapsed time, 0.158s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.WellTypeTemplates")
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### theory "Draft.Auxiliary"
### 0.281s elapsed time, 0.601s cpu time, 0.026s GC time
Loading theory "Draft.Type" (required by "Draft.WellTypeTemplates" via "Draft.WellType" via "Draft.Syntax" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj" via "Draft.ClassRel" via "Draft.Decl" via "Draft.Expr" via "Draft.Value")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.546s elapsed time, 1.124s cpu time, 0.090s GC time
consts
  getbase :: "base => char list"
consts
  isRepBase :: "base => bool"
consts
  isShBase :: "base => bool"
### theory "Draft.Type"
### 0.631s elapsed time, 0.985s cpu time, 0.064s GC time
Loading theory "Draft.Value" (required by "Draft.WellTypeTemplates" via "Draft.WellType" via "Draft.Syntax" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj" via "Draft.ClassRel" via "Draft.Decl" via "Draft.Expr")
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Ref"
consts
  the_Intg :: "val => int"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_addr :: "val => nat"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_path :: "val => char list list"
consts
  default_val :: "ty => val"
consts
  typeof :: "val => ty option"
### theory "Draft.Value"
### 0.399s elapsed time, 0.428s cpu time, 0.040s GC time
Loading theory "Draft.Expr" (required by "Draft.WellTypeTemplates" via "Draft.WellType" via "Draft.Syntax" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj" via "Draft.ClassRel" via "Draft.Decl")
Found termination order: "{}"
### Ambiguous input (line 80 of "$AFP/CoreC++/Expr.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" fv)
###       ("_updbind" ("_position" V) ("_position" e)))
###     ("\<^const>Set.union" ("_Finset" ("_position" V))
###       ("_applC" ("_position" fv) ("_position" e)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.expr.LAss" ("_position" V) ("_position" e)))
###     ("\<^const>Set.union" ("_Finset" ("_position" V))
###       ("_applC" ("_position" fv) ("_position" e)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 82 of "$AFP/CoreC++/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" fv)
###       ("_updbind"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  fv :: "expr => char list set"
  fvs :: "expr list => char list set"
### theory "Draft.Expr"
### 2.278s elapsed time, 2.686s cpu time, 0.569s GC time
Loading theory "Draft.Decl" (required by "Draft.WellTypeTemplates" via "Draft.WellType" via "Draft.Syntax" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj" via "Draft.ClassRel")
### theory "Draft.Decl"
### 0.098s elapsed time, 0.141s cpu time, 0.046s GC time
Loading theory "Draft.ClassRel" (required by "Draft.WellTypeTemplates" via "Draft.WellType" via "Draft.Syntax" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj")
Proofs for inductive predicate(s) "subclsRp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "subclsSp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "subcls1p"
  Proving monotonicity ...
### theory "Draft.ClassRel"
### 0.171s elapsed time, 0.171s cpu time, 0.000s GC time
Loading theory "Draft.SubObj" (required by "Draft.WellTypeTemplates" via "Draft.WellType" via "Draft.Syntax" via "Draft.Exceptions" via "Draft.Objects")
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Proofs for inductive predicate(s) "Subobjs\<^sub>R"
  Proving monotonicity ...
Proofs for inductive predicate(s) "Subobjs"
  Proving monotonicity ...
Proofs for inductive predicate(s) "casts_to"
  Proving monotonicity ...
Proofs for inductive predicate(s) "Casts_to"
  Proving monotonicity ...
Proofs for inductive predicate(s) "leq_path1p"
  Proving monotonicity ...
### Ambiguous input (line 720 of "$AFP/CoreC++/SubObj.thy") produces 3 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" MinimalMethodDefs)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" C) ("_position" M))))
###   ("_Coll" ("_pattern" ("_position" Cs) ("_position" mthd))
###     ("\<^const>HOL.conj"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" Cs) ("_tuple_arg" ("_position" mthd)))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M)))))
###       ("_Ball" ("_pattern" ("_position" Cs') ("_position" mthd'))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M))))
###         ("\<^const>HOL.eq"
###           ("\<^const>SubObj.leq_path" ("_position" P) ("_position" C)
###             ("_position" Cs')
###             ("\<^const>HOL.implies" ("_position" Cs) ("_position" Cs')))
###           ("_position" Cs))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" MinimalMethodDefs)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" C) ("_position" M))))
###   ("_Coll" ("_pattern" ("_position" Cs) ("_position" mthd))
###     ("\<^const>HOL.conj"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" Cs) ("_tuple_arg" ("_position" mthd)))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M)))))
###       ("_Ball" ("_pattern" ("_position" Cs') ("_position" mthd'))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M))))
###         ("\<^const>SubObj.leq_path" ("_position" P) ("_position" C)
###           ("_position" Cs')
###           ("\<^const>HOL.implies" ("_position" Cs)
###             ("\<^const>HOL.eq" ("_position" Cs') ("_position" Cs))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" MinimalMethodDefs)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" C) ("_position" M))))
###   ("_Coll" ("_pattern" ("_position" Cs) ("_position" mthd))
###     ("\<^const>HOL.conj"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" Cs) ("_tuple_arg" ("_position" mthd)))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M)))))
###       ("_Ball" ("_pattern" ("_position" Cs') ("_position" mthd'))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M))))
###         ("\<^const>HOL.implies"
###           ("\<^const>SubObj.leq_path" ("_position" P) ("_position" C)
###             ("_position" Cs') ("_position" Cs))
###           ("\<^const>HOL.eq" ("_position" Cs') ("_position" Cs)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 725 of "$AFP/CoreC++/SubObj.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" OverriderMethodDefs)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" R) ("_position" M))))
###   ("_Coll" ("_pattern" ("_position" Cs) ("_position" mthd))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" Cs') ("_position" mthd'))
###       ("\<^const>HOL.conj"
###         ("\<^const>SubObj.LeastMethodDef" ("_position" P)
###           ("_applC" ("_position" ldc) ("_position" R)) ("_position" M)
###           ("_position" mthd') ("_position" Cs'))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" Cs) ("_tuple_arg" ("_position" mthd)))
###             ("_applC" ("_position" MinimalMethodDefs)
###               ("_cargs" ("_position" P)
###                 ("_cargs" ("_applC" ("_position" mdc) ("_position" R))
###                   ("_position" M)))))
###           ("\<^const>SubObj.appendPath"
###             ("\<^const>SubObj.leq_path" ("_position" P)
###               ("_applC" ("_position" mdc) ("_position" R)) ("_position" Cs)
###               ("_applC" ("_position" snd) ("_position" R)))
###             ("_position" Cs')))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" OverriderMethodDefs)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" R) ("_position" M))))
###   ("_Coll" ("_pattern" ("_position" Cs) ("_position" mthd))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" Cs') ("_position" mthd'))
###       ("\<^const>HOL.conj"
###         ("\<^const>SubObj.LeastMethodDef" ("_position" P)
###           ("_applC" ("_position" ldc) ("_position" R)) ("_position" M)
###           ("_position" mthd') ("_position" Cs'))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" Cs) ("_tuple_arg" ("_position" mthd)))
###             ("_applC" ("_position" MinimalMethodDefs)
###               ("_cargs" ("_position" P)
###                 ("_cargs" ("_applC" ("_position" mdc) ("_position" R))
###                   ("_position" M)))))
###           ("\<^const>SubObj.leq_path" ("_position" P)
###             ("_applC" ("_position" mdc) ("_position" R)) ("_position" Cs)
###             ("\<^const>SubObj.appendPath"
###               ("_applC" ("_position" snd) ("_position" R))
###               ("_position" Cs'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "SelectMethodDef"
  Proving monotonicity ...
### theory "Draft.SubObj"
### 0.851s elapsed time, 0.903s cpu time, 0.069s GC time
Loading theory "Draft.Objects" (required by "Draft.WellTypeTemplates" via "Draft.WellType" via "Draft.Syntax" via "Draft.Exceptions")
Loading theory "Draft.TypeRel" (required by "Draft.WellTypeTemplates" via "Draft.WellType")
Proofs for inductive predicate(s) "widen"
  Proving monotonicity ...
Proofs for inductive predicate(s) "init_obj"
  Proving monotonicity ...
### theory "Draft.TypeRel"
### 0.077s elapsed time, 0.171s cpu time, 0.050s GC time
### theory "Draft.Objects"
### 0.091s elapsed time, 0.187s cpu time, 0.050s GC time
Loading theory "Draft.Exceptions" (required by "Draft.WellTypeTemplates" via "Draft.WellType" via "Draft.Syntax")
### theory "Draft.Exceptions"
### 0.084s elapsed time, 0.084s cpu time, 0.000s GC time
Loading theory "Draft.Syntax" (required by "Draft.WellTypeTemplates" via "Draft.WellType")
### theory "Draft.Syntax"
### 0.032s elapsed time, 0.032s cpu time, 0.000s GC time
Loading theory "Draft.WellType" (required by "Draft.WellTypeTemplates")
### Ambiguous input (line 62 of "$AFP/CoreC++/WellType.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WT" ("_position" P) ("_position" E) ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SubObj.LeastFieldDecl" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" T) ("_position" Cs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" T))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WT" ("_position" P) ("_position" E) ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SubObj.LeastFieldDecl" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" T) ("_position" Cs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" T))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "WT", "WTs"
  Proving monotonicity ...
### Ignoring duplicate safe introduction (intro!)
### ?P,?E \<turnstile> [] [::] []
### Ignoring duplicate safe introduction (intro!)
### ?P,?E \<turnstile> [] [::] []
### Ambiguous input (line 122 of "$AFP/CoreC++/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts)))
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E) ("_position" e)
###       ("\<^const>HOL.conj" ("_position" T)
###         ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###           ("_position" es) ("_position" Ts))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts)))
###     ("\<^const>HOL.conj"
###       ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###         ("_position" e) ("_position" T))
###       ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###         ("_position" es) ("_position" Ts)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 129 of "$AFP/CoreC++/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" Ts))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" U) ("_position" Us))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts)
###           ("\<^const>List.list.Cons" ("_position" U) ("_position" Us)))
###         ("\<^const>HOL.conj"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e) ("_position" U))
###           ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###             ("_position" es) ("_position" Us)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" Ts))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" U) ("_position" Us))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts)
###           ("\<^const>List.list.Cons" ("_position" U) ("_position" Us)))
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e)
###           ("\<^const>HOL.conj" ("_position" U)
###             ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###               ("_position" es) ("_position" Us))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 137 of "$AFP/CoreC++/WellType.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" Ts)
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###         ("\<^const>List.append" ("_position" es\<^sub>1)
###           ("_position" es\<^sub>2))
###         ("_position" Ts))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Ts\<^sub>1) ("_position" Ts\<^sub>2))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" Ts)
###             ("\<^const>List.append" ("_position" Ts\<^sub>1)
###               ("_position" Ts\<^sub>2)))
###           ("\<^const>HOL.conj"
###             ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###               ("_position" es\<^sub>1) ("_position" Ts\<^sub>1))
###             ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###               ("_position" es\<^sub>2) ("_position" Ts\<^sub>2))))))))
### ("\<^const>Pure.all_binder" ("_position" Ts)
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###         ("\<^const>List.append" ("_position" es\<^sub>1)
###           ("_position" es\<^sub>2))
###         ("_position" Ts))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Ts\<^sub>1) ("_position" Ts\<^sub>2))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" Ts)
###             ("\<^const>List.append" ("_position" Ts\<^sub>1)
###               ("_position" Ts\<^sub>2)))
###           ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###             ("_position" es\<^sub>1)
###             ("\<^const>HOL.conj" ("_position" Ts\<^sub>1)
###               ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###                 ("_position" es\<^sub>2) ("_position" Ts\<^sub>2)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 154 of "$AFP/CoreC++/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("_applC" ("_position" Val) ("_position" v)) ("_position" T))
###     ("\<^const>HOL.eq" ("_applC" ("_position" typeof) ("_position" v))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("_applC" ("_position" Val) ("_position" v))
###     ("\<^const>HOL.eq" ("_position" T)
###       ("\<^const>HOL.eq" ("_applC" ("_position" typeof) ("_position" v))
###         ("_applC" ("_position" Some) ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### typeof ?v = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Val ?v :: ?T
### Ignoring duplicate safe introduction (intro!)
### typeof ?v = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Val ?v :: ?T
### Ambiguous input (line 161 of "$AFP/CoreC++/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("_applC" ("_position" Var) ("_position" V)) ("_position" T))
###     ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("_applC" ("_position" Var) ("_position" V))
###     ("\<^const>HOL.eq" ("_position" T)
###       ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###         ("_applC" ("_position" Some) ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### ?E ?V = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Var ?V :: ?T
### Ignoring duplicate safe introduction (intro!)
### ?E ?V = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Var ?V :: ?T
### Ambiguous input (line 168 of "$AFP/CoreC++/WellType.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Seq" ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))
###     ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###       ("\<^const>HOL.conj"
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>1) ("_position" T\<^sub>1))
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" T\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.Seq" ("_position" e\<^sub>1)
###       ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" T\<^sub>2)
###       ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###         ("\<^const>HOL.conj"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>1) ("_position" T\<^sub>1))
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Seq" ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))
###     ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###       ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1)
###         ("\<^const>HOL.conj" ("_position" T\<^sub>1)
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.Seq" ("_position" e\<^sub>1)
###       ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" T\<^sub>2)
###       ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>1)
###           ("\<^const>HOL.conj" ("_position" T\<^sub>1)
###             ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###               ("_position" e\<^sub>2) ("_position" T\<^sub>2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 190 of "$AFP/CoreC++/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.LAss"
###       ("\<^const>Expr.expr.FAcc" ("_position" e) ("_position" F)
###         ("_position" Cs))
###       ("_position" v))
###     ("_position" T)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.FAss" ("_position" e) ("_position" F)
###       ("_position" Cs) ("_position" v))
###     ("_position" T)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.WellType"
### 0.795s elapsed time, 1.166s cpu time, 0.492s GC time
Loading theory "Draft.WellTypeTemplates"
val templateLemmas =
   [("WellType.WT_fv", "?P,?E \<turnstile> ?e :: ?T ==> fv ?e <= dom ?E",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 2)))),
    ("WellType.wt_env_mono",
     "[| ?P,?E \<turnstile> ?e :: ?T; ?E \<subseteq>\<^sub>m ?E' |]
      ==> ?P,?E' \<turnstile> ?e :: ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("WellType.WT_elim_cases",
     "[| ?P,?E \<turnstile> new ?C :: ?T;
         [| ?T = Class ?C; is_class ?P ?C |] ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 3),
                template_app (template_hole 3, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app (template_hole 1, template_var 2))],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 2)
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("WellType.WT_elim_cases",
     "[| ?P,?E \<turnstile> throw ?e :: ?T;
         !!C. [| ?T = Void; ?P,?E \<turnstile> ?e :: Class C |] ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 4),
                  template_var 3),
                template_app (template_hole 4, template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("WellType.WT_elim_cases",
     "[| ?P,?E \<turnstile> ?e\<bullet>?F{?Cs} :: ?T;
         !!C. [| ?P,?E \<turnstile> ?e :: Class C;
                 ?P \<turnstile> C has least ?F:?T via ?Cs |]
              ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 6),
                  template_var 5),
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("WellType.WT_elim_cases",
     "[| ?P,?E \<turnstile> while (?e) ?c :: ?T;
         !!T. [| ?T = Void; ?P,?E \<turnstile> ?e :: Boolean;
                 ?P,?E \<turnstile> ?c :: T |]
              ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 5),
                  template_var 4),
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("WellType.WT_elim_cases",
     "[| ?P,?E \<turnstile> ?V:=?e :: ?T;
         !!T'. [| ?E ?V = \<lfloor>?T\<rfloor>; ?P,?E \<turnstile> ?e :: T';
                  ?P \<turnstile> T' \<le> ?T |]
               ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 5),
                  template_var 4),
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("WellType.WT_elim_cases",
     "[| ?P,?E \<turnstile> if (?e) ?e\<^sub>1 else ?e\<^sub>2 :: ?T;
         [| ?P,?E \<turnstile> ?e :: Boolean;
            ?P,?E \<turnstile> ?e\<^sub>1 :: ?T;
            ?P,?E \<turnstile> ?e\<^sub>2 :: ?T |]
         ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 6),
                  template_var 5),
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 6),
                     template_var 5),
                   template_var 4),
                 template_hole 0)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 2, template_var 6),
                       template_var 5),
                     template_var 3),
                   template_var 1)
                 )],
            template_implication
             ([template_predicate
                (
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 2, template_var 6),
                         template_var 5),
                       template_var 2),
                     template_var 1)
                   )],
              template_predicate (template_var 0))))],
       template_predicate (template_var 0))),
    ("WellType.WT_elim_cases",
     "[| ?P,?E \<turnstile> ?e\<bullet>?F{?Cs} := ?v :: ?T;
         !!C T'.
            [| ?P,?E \<turnstile> ?e :: Class C;
               ?P \<turnstile> C has least ?F:?T via ?Cs;
               ?P,?E \<turnstile> ?v :: T'; ?P \<turnstile> T' \<le> ?T |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 7),
                  template_var 6),
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 5, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("WellType.WT_elim_cases",
     "[| ?P,?E \<turnstile> Cast ?C ?e :: ?T;
         !!D. [| ?T = Class ?C; ?P,?E \<turnstile> ?e :: Class D;
                 is_class ?P ?C;
                 ?P \<turnstile> Path D to ?C unique |
                 (ALL Cs. ~ ?P \<turnstile> Path D to ?C via Cs ) |]
              ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 5),
                  template_var 4),
                template_app
                 (template_app (template_hole 9, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0))),
    ("WellType.WT_elim_cases",
     "[| ?P,?E \<turnstile> ?e\<^sub>1 \<guillemotleft>?bop\<guillemotright> ?e\<^sub>2 :: ?T;
         !!T\<^sub>1 T\<^sub>2.
            [| ?P,?E \<turnstile> ?e\<^sub>1 :: T\<^sub>1;
               ?P,?E \<turnstile> ?e\<^sub>2 :: T\<^sub>2;
               case ?bop of Eq => T\<^sub>1 = T\<^sub>2 & ?T = Boolean
               | Add =>
                   T\<^sub>1 = Integer &
                   T\<^sub>2 = Integer & ?T = Integer |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 6),
                  template_var 5),
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("WellType.WT_elim_cases",
     "[| ?P,?E \<turnstile> Call ?e None ?M ?ps :: ?T;
         !!C Ts m Cs Ts'.
            [| ?P,?E \<turnstile> ?e :: Class C;
               ?P \<turnstile> C has least ?M = (Ts, ?T, m) via Cs;
               ?P,?E \<turnstile> ?ps [::] Ts';
               ?P \<turnstile> Ts' [\<le>] Ts |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 13, template_var 6),
                  template_var 5),
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 12, template_var 4),
                      template_hole 11),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate (template_var 0))),
    ("WellType.WT_elim_cases",
     "[| ?P,?E \<turnstile> \<lparr>?C\<rparr>?e :: ?T;
         !!D. [| ?T = Class ?C; ?P,?E \<turnstile> ?e :: Class D;
                 is_class ?P ?C;
                 ?P \<turnstile> Path D to ?C unique |
                 ?P \<turnstile> ?C \<preceq>\<^sup>* D &
                 (ALL Cs.
                     ?P \<turnstile> Path ?C to D via Cs  -->
                     Subobjs\<^sub>R ?P ?C Cs) |]
              ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 16, template_var 5),
                  template_var 4),
                template_app
                 (template_app (template_hole 15, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 14, t_empty))],
       template_predicate (template_var 0))),
    ("WellType.WT_elim_cases",
     "[| ?P,?E \<turnstile> Call ?e \<lfloor>?C\<rfloor> ?M ?ps :: ?T;
         !!C' Ts m Cs Ts'.
            [| ?P,?E \<turnstile> ?e :: Class C';
               ?P \<turnstile> Path C' to ?C unique;
               ?P \<turnstile> ?C has least ?M = (Ts, ?T, m) via Cs;
               ?P,?E \<turnstile> ?ps [::] Ts';
               ?P \<turnstile> Ts' [\<le>] Ts |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 14, template_var 7),
                  template_var 6),
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 13, template_var 5),
                      template_app (template_hole 12, template_var 4)),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate (template_var 0))),
    ("WellType.WT_WTs_inducts",
     "[| ?P,?x1a \<turnstile> ?x2a :: ?x3a;
         !!C E. is_class ?P C ==> ?P1.0 E (new C) (Class C);
         !!E e D C.
            [| ?P,E \<turnstile> e :: Class D; ?P1.0 E e (Class D);
               is_class ?P C;
               ?P \<turnstile> Path D to C unique |
               (ALL Cs. ~ ?P \<turnstile> Path D to C via Cs ) |]
            ==> ?P1.0 E (Cast C e) (Class C);
         !!E e D C.
            [| ?P,E \<turnstile> e :: Class D; ?P1.0 E e (Class D);
               is_class ?P C;
               ?P \<turnstile> Path D to C unique |
               ?P \<turnstile> C \<preceq>\<^sup>* D &
               (ALL Cs.
                   ?P \<turnstile> Path C to D via Cs  -->
                   Subobjs\<^sub>R ?P C Cs) |]
            ==> ?P1.0 E (\<lparr>C\<rparr>e) (Class C);
         !!v T E. typeof v = \<lfloor>T\<rfloor> ==> ?P1.0 E (Val v) T;
         !!E V T. E V = \<lfloor>T\<rfloor> ==> ?P1.0 E (Var V) T;
         !!E e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2 bop T.
            [| ?P,E \<turnstile> e\<^sub>1 :: T\<^sub>1;
               ?P1.0 E e\<^sub>1 T\<^sub>1;
               ?P,E \<turnstile> e\<^sub>2 :: T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2;
               case bop of Eq => T\<^sub>1 = T\<^sub>2 & T = Boolean
               | Add =>
                   T\<^sub>1 = Integer &
                   T\<^sub>2 = Integer & T = Integer |]
            ==> ?P1.0 E
                 (e\<^sub>1 \<guillemotleft>bop\<guillemotright> e\<^sub>2)
                 T;
         !!E V T e T'.
            [| E V = \<lfloor>T\<rfloor>; ?P,E \<turnstile> e :: T';
               ?P1.0 E e T'; ?P \<turnstile> T' \<le> T |]
            ==> ?P1.0 E (V:=e) T;
         !!E e C F T Cs.
            [| ?P,E \<turnstile> e :: Class C; ?P1.0 E e (Class C);
               ?P \<turnstile> C has least F:T via Cs |]
            ==> ?P1.0 E (e\<bullet>F{Cs}) T;
         !!E e\<^sub>1 C F T Cs e\<^sub>2 T'.
            [| ?P,E \<turnstile> e\<^sub>1 :: Class C;
               ?P1.0 E e\<^sub>1 (Class C);
               ?P \<turnstile> C has least F:T via Cs;
               ?P,E \<turnstile> e\<^sub>2 :: T'; ?P1.0 E e\<^sub>2 T';
               ?P \<turnstile> T' \<le> T |]
            ==> ?P1.0 E (e\<^sub>1\<bullet>F{Cs} := e\<^sub>2) T;
         !!E e C' C M Ts T a b Cs es Ts'.
            [| ?P,E \<turnstile> e :: Class C'; ?P1.0 E e (Class C');
               ?P \<turnstile> Path C' to C unique;
               ?P \<turnstile> C has least M = (Ts, T, a, b) via Cs;
               ?P,E \<turnstile> es [::] Ts'; ?P2.0 E es Ts';
               ?P \<turnstile> Ts' [\<le>] Ts |]
            ==> ?P1.0 E (Call e \<lfloor>C\<rfloor> M es) T;
         !!E e C M Ts T a b Cs es Ts'.
            [| ?P,E \<turnstile> e :: Class C; ?P1.0 E e (Class C);
               ?P \<turnstile> C has least M = (Ts, T, a, b) via Cs;
               ?P,E \<turnstile> es [::] Ts'; ?P2.0 E es Ts';
               ?P \<turnstile> Ts' [\<le>] Ts |]
            ==> ?P1.0 E (Call e None M es) T;
         !!T E V e T'.
            [| is_type ?P T; ?P,E(V |-> T) \<turnstile> e :: T';
               ?P1.0 (E(V |-> T)) e T' |]
            ==> ?P1.0 E {V:T; e} T';
         !!E e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2.
            [| ?P,E \<turnstile> e\<^sub>1 :: T\<^sub>1;
               ?P1.0 E e\<^sub>1 T\<^sub>1;
               ?P,E \<turnstile> e\<^sub>2 :: T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2 |]
            ==> ?P1.0 E (e\<^sub>1;; e\<^sub>2) T\<^sub>2;
         !!E e e\<^sub>1 T e\<^sub>2.
            [| ?P,E \<turnstile> e :: Boolean; ?P1.0 E e Boolean;
               ?P,E \<turnstile> e\<^sub>1 :: T; ?P1.0 E e\<^sub>1 T;
               ?P,E \<turnstile> e\<^sub>2 :: T; ?P1.0 E e\<^sub>2 T |]
            ==> ?P1.0 E (if (e) e\<^sub>1 else e\<^sub>2) T;
         !!E e c T.
            [| ?P,E \<turnstile> e :: Boolean; ?P1.0 E e Boolean;
               ?P,E \<turnstile> c :: T; ?P1.0 E c T |]
            ==> ?P1.0 E (while (e) c) Void;
         !!E e C.
            [| ?P,E \<turnstile> e :: Class C; ?P1.0 E e (Class C) |]
            ==> ?P1.0 E (throw e) Void;
         !!E. ?P2.0 E [] [];
         !!E e T es Ts.
            [| ?P,E \<turnstile> e :: T; ?P1.0 E e T;
               ?P,E \<turnstile> es [::] Ts; ?P2.0 E es Ts |]
            ==> ?P2.0 E (e # es) (T # Ts) |]
      ==> ?P1.0 ?x1a ?x2a ?x3a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 62, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 41, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 1, template_var 4),
               template_var 3),
             template_var 2)
           ))),
    ("WellType.WT_WTs_inducts",
     "[| ?P,?x4a \<turnstile> ?x5a [::] ?x6a;
         !!C E. is_class ?P C ==> ?P1.0 E (new C) (Class C);
         !!E e D C.
            [| ?P,E \<turnstile> e :: Class D; ?P1.0 E e (Class D);
               is_class ?P C;
               ?P \<turnstile> Path D to C unique |
               (ALL Cs. ~ ?P \<turnstile> Path D to C via Cs ) |]
            ==> ?P1.0 E (Cast C e) (Class C);
         !!E e D C.
            [| ?P,E \<turnstile> e :: Class D; ?P1.0 E e (Class D);
               is_class ?P C;
               ?P \<turnstile> Path D to C unique |
               ?P \<turnstile> C \<preceq>\<^sup>* D &
               (ALL Cs.
                   ?P \<turnstile> Path C to D via Cs  -->
                   Subobjs\<^sub>R ?P C Cs) |]
            ==> ?P1.0 E (\<lparr>C\<rparr>e) (Class C);
         !!v T E. typeof v = \<lfloor>T\<rfloor> ==> ?P1.0 E (Val v) T;
         !!E V T. E V = \<lfloor>T\<rfloor> ==> ?P1.0 E (Var V) T;
         !!E e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2 bop T.
            [| ?P,E \<turnstile> e\<^sub>1 :: T\<^sub>1;
               ?P1.0 E e\<^sub>1 T\<^sub>1;
               ?P,E \<turnstile> e\<^sub>2 :: T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2;
               case bop of Eq => T\<^sub>1 = T\<^sub>2 & T = Boolean
               | Add =>
                   T\<^sub>1 = Integer &
                   T\<^sub>2 = Integer & T = Integer |]
            ==> ?P1.0 E
                 (e\<^sub>1 \<guillemotleft>bop\<guillemotright> e\<^sub>2)
                 T;
         !!E V T e T'.
            [| E V = \<lfloor>T\<rfloor>; ?P,E \<turnstile> e :: T';
               ?P1.0 E e T'; ?P \<turnstile> T' \<le> T |]
            ==> ?P1.0 E (V:=e) T;
         !!E e C F T Cs.
            [| ?P,E \<turnstile> e :: Class C; ?P1.0 E e (Class C);
               ?P \<turnstile> C has least F:T via Cs |]
            ==> ?P1.0 E (e\<bullet>F{Cs}) T;
         !!E e\<^sub>1 C F T Cs e\<^sub>2 T'.
            [| ?P,E \<turnstile> e\<^sub>1 :: Class C;
               ?P1.0 E e\<^sub>1 (Class C);
               ?P \<turnstile> C has least F:T via Cs;
               ?P,E \<turnstile> e\<^sub>2 :: T'; ?P1.0 E e\<^sub>2 T';
               ?P \<turnstile> T' \<le> T |]
            ==> ?P1.0 E (e\<^sub>1\<bullet>F{Cs} := e\<^sub>2) T;
         !!E e C' C M Ts T a b Cs es Ts'.
            [| ?P,E \<turnstile> e :: Class C'; ?P1.0 E e (Class C');
               ?P \<turnstile> Path C' to C unique;
               ?P \<turnstile> C has least M = (Ts, T, a, b) via Cs;
               ?P,E \<turnstile> es [::] Ts'; ?P2.0 E es Ts';
               ?P \<turnstile> Ts' [\<le>] Ts |]
            ==> ?P1.0 E (Call e \<lfloor>C\<rfloor> M es) T;
         !!E e C M Ts T a b Cs es Ts'.
            [| ?P,E \<turnstile> e :: Class C; ?P1.0 E e (Class C);
               ?P \<turnstile> C has least M = (Ts, T, a, b) via Cs;
               ?P,E \<turnstile> es [::] Ts'; ?P2.0 E es Ts';
               ?P \<turnstile> Ts' [\<le>] Ts |]
            ==> ?P1.0 E (Call e None M es) T;
         !!T E V e T'.
            [| is_type ?P T; ?P,E(V |-> T) \<turnstile> e :: T';
               ?P1.0 (E(V |-> T)) e T' |]
            ==> ?P1.0 E {V:T; e} T';
         !!E e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2.
            [| ?P,E \<turnstile> e\<^sub>1 :: T\<^sub>1;
               ?P1.0 E e\<^sub>1 T\<^sub>1;
               ?P,E \<turnstile> e\<^sub>2 :: T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2 |]
            ==> ?P1.0 E (e\<^sub>1;; e\<^sub>2) T\<^sub>2;
         !!E e e\<^sub>1 T e\<^sub>2.
            [| ?P,E \<turnstile> e :: Boolean; ?P1.0 E e Boolean;
               ?P,E \<turnstile> e\<^sub>1 :: T; ?P1.0 E e\<^sub>1 T;
               ?P,E \<turnstile> e\<^sub>2 :: T; ?P1.0 E e\<^sub>2 T |]
            ==> ?P1.0 E (if (e) e\<^sub>1 else e\<^sub>2) T;
         !!E e c T.
            [| ?P,E \<turnstile> e :: Boolean; ?P1.0 E e Boolean;
               ?P,E \<turnstile> c :: T; ?P1.0 E c T |]
            ==> ?P1.0 E (while (e) c) Void;
         !!E e C.
            [| ?P,E \<turnstile> e :: Class C; ?P1.0 E e (Class C) |]
            ==> ?P1.0 E (throw e) Void;
         !!E. ?P2.0 E [] [];
         !!E e T es Ts.
            [| ?P,E \<turnstile> e :: T; ?P1.0 E e T;
               ?P,E \<turnstile> es [::] Ts; ?P2.0 E es Ts |]
            ==> ?P2.0 E (e # es) (T # Ts) |]
      ==> ?P2.0 ?x4a ?x5a ?x6a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 62, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 39, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 0, template_var 4),
               template_var 3),
             template_var 2)
           ))),
    ("WellType.WT_WTs_induct",
     "[| !!C E. is_class ?P C ==> ?P1.0 E (new C) (Class C);
         !!E e D C.
            [| ?P,E \<turnstile> e :: Class D; ?P1.0 E e (Class D);
               is_class ?P C;
               ?P \<turnstile> Path D to C unique |
               (ALL Cs. ~ ?P \<turnstile> Path D to C via Cs ) |]
            ==> ?P1.0 E (Cast C e) (Class C);
         !!E e D C.
            [| ?P,E \<turnstile> e :: Class D; ?P1.0 E e (Class D);
               is_class ?P C;
               ?P \<turnstile> Path D to C unique |
               ?P \<turnstile> C \<preceq>\<^sup>* D &
               (ALL Cs.
                   ?P \<turnstile> Path C to D via Cs  -->
                   Subobjs\<^sub>R ?P C Cs) |]
            ==> ?P1.0 E (\<lparr>C\<rparr>e) (Class C);
         !!v T E. typeof v = \<lfloor>T\<rfloor> ==> ?P1.0 E (Val v) T;
         !!E V T. E V = \<lfloor>T\<rfloor> ==> ?P1.0 E (Var V) T;
         !!E e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2 bop T.
            [| ?P,E \<turnstile> e\<^sub>1 :: T\<^sub>1;
               ?P1.0 E e\<^sub>1 T\<^sub>1;
               ?P,E \<turnstile> e\<^sub>2 :: T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2;
               case bop of Eq => T\<^sub>1 = T\<^sub>2 & T = Boolean
               | Add =>
                   T\<^sub>1 = Integer &
                   T\<^sub>2 = Integer & T = Integer |]
            ==> ?P1.0 E
                 (e\<^sub>1 \<guillemotleft>bop\<guillemotright> e\<^sub>2)
                 T;
         !!E V T e T'.
            [| E V = \<lfloor>T\<rfloor>; ?P,E \<turnstile> e :: T';
               ?P1.0 E e T'; ?P \<turnstile> T' \<le> T |]
            ==> ?P1.0 E (V:=e) T;
         !!E e C F T Cs.
            [| ?P,E \<turnstile> e :: Class C; ?P1.0 E e (Class C);
               ?P \<turnstile> C has least F:T via Cs |]
            ==> ?P1.0 E (e\<bullet>F{Cs}) T;
         !!E e\<^sub>1 C F T Cs e\<^sub>2 T'.
            [| ?P,E \<turnstile> e\<^sub>1 :: Class C;
               ?P1.0 E e\<^sub>1 (Class C);
               ?P \<turnstile> C has least F:T via Cs;
               ?P,E \<turnstile> e\<^sub>2 :: T'; ?P1.0 E e\<^sub>2 T';
               ?P \<turnstile> T' \<le> T |]
            ==> ?P1.0 E (e\<^sub>1\<bullet>F{Cs} := e\<^sub>2) T;
         !!E e C' C M Ts T a b Cs es Ts'.
            [| ?P,E \<turnstile> e :: Class C'; ?P1.0 E e (Class C');
               ?P \<turnstile> Path C' to C unique;
               ?P \<turnstile> C has least M = (Ts, T, a, b) via Cs;
               ?P,E \<turnstile> es [::] Ts'; ?P2.0 E es Ts';
               ?P \<turnstile> Ts' [\<le>] Ts |]
            ==> ?P1.0 E (Call e \<lfloor>C\<rfloor> M es) T;
         !!E e C M Ts T a b Cs es Ts'.
            [| ?P,E \<turnstile> e :: Class C; ?P1.0 E e (Class C);
               ?P \<turnstile> C has least M = (Ts, T, a, b) via Cs;
               ?P,E \<turnstile> es [::] Ts'; ?P2.0 E es Ts';
               ?P \<turnstile> Ts' [\<le>] Ts |]
            ==> ?P1.0 E (Call e None M es) T;
         !!T E V e T'.
            [| is_type ?P T; ?P,E(V |-> T) \<turnstile> e :: T';
               ?P1.0 (E(V |-> T)) e T' |]
            ==> ?P1.0 E {V:T; e} T';
         !!E e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2.
            [| ?P,E \<turnstile> e\<^sub>1 :: T\<^sub>1;
               ?P1.0 E e\<^sub>1 T\<^sub>1;
               ?P,E \<turnstile> e\<^sub>2 :: T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2 |]
            ==> ?P1.0 E (e\<^sub>1;; e\<^sub>2) T\<^sub>2;
         !!E e e\<^sub>1 T e\<^sub>2.
            [| ?P,E \<turnstile> e :: Boolean; ?P1.0 E e Boolean;
               ?P,E \<turnstile> e\<^sub>1 :: T; ?P1.0 E e\<^sub>1 T;
               ?P,E \<turnstile> e\<^sub>2 :: T; ?P1.0 E e\<^sub>2 T |]
            ==> ?P1.0 E (if (e) e\<^sub>1 else e\<^sub>2) T;
         !!E e c T.
            [| ?P,E \<turnstile> e :: Boolean; ?P1.0 E e Boolean;
               ?P,E \<turnstile> c :: T; ?P1.0 E c T |]
            ==> ?P1.0 E (while (e) c) Void;
         !!E e C.
            [| ?P,E \<turnstile> e :: Class C; ?P1.0 E e (Class C) |]
            ==> ?P1.0 E (throw e) Void;
         !!E. ?P2.0 E [] [];
         !!E e T es Ts.
            [| ?P,E \<turnstile> e :: T; ?P1.0 E e T;
               ?P,E \<turnstile> es [::] Ts; ?P2.0 E es Ts |]
            ==> ?P2.0 E (e # es) (T # Ts) |]
      ==> (?P,?x1a \<turnstile> ?x2a :: ?x3a --> ?P1.0 ?x1a ?x2a ?x3a) &
          (?P,?x4a \<turnstile> ?x5a [::] ?x6a --> ?P2.0 ?x4a ?x5a ?x6a)",
     template_implication
      ([template_predicate (template_app (template_hole 63, t_empty)),
        template_predicate (template_app (template_hole 62, t_empty)),
        template_predicate (template_app (template_hole 62, t_empty)),
        template_predicate (template_app (template_hole 41, t_empty)),
        template_predicate (template_app (template_hole 62, t_empty)),
        template_predicate (template_app (template_hole 62, t_empty)),
        template_predicate (template_app (template_hole 62, t_empty)),
        template_predicate (template_app (template_hole 62, t_empty)),
        template_predicate (template_app (template_hole 62, t_empty)),
        template_predicate (template_app (template_hole 62, t_empty)),
        template_predicate (template_app (template_hole 62, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 62, t_empty)),
        template_predicate (template_app (template_hole 62, t_empty)),
        template_predicate (template_app (template_hole 62, t_empty)),
        template_predicate (template_app (template_hole 62, t_empty)),
        template_predicate (template_app (template_hole 62, t_empty)),
        template_predicate (template_app (template_hole 62, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 49,
               template_app
                (template_app
                  (template_hole 44,
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 56, template_var 8),
                         template_var 5),
                       template_var 4),
                     template_var 3)),
                 template_app
                  (template_app
                    (template_app (template_var 7, template_var 5),
                     template_var 4),
                   template_var 3))),
             template_app
              (template_app
                (template_hole 44,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 16, template_var 8),
                       template_var 2),
                     template_var 1),
                   template_var 0)),
               template_app
                (template_app
                  (template_app (template_var 6, template_var 2),
                   template_var 1),
                 template_var 0)))
           )))]:
   (string * thm * template) list
### theory "Draft.WellTypeTemplates"
### 0.459s elapsed time, 0.582s cpu time, 0.032s GC time
val it = (): unit
