Loading theory "Draft.Auxiliary" (required by "Draft.ConformTemplates" via "Draft.Conform" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj" via "Draft.ClassRel" via "Draft.Decl" via "Draft.Expr" via "Draft.Value" via "Draft.Type")
Loading theory "Draft.Templates" (required by "Draft.ConformTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.064s elapsed time, 0.167s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ConformTemplates")
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### theory "Draft.Auxiliary"
### 0.289s elapsed time, 0.623s cpu time, 0.027s GC time
Loading theory "Draft.Type" (required by "Draft.ConformTemplates" via "Draft.Conform" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj" via "Draft.ClassRel" via "Draft.Decl" via "Draft.Expr" via "Draft.Value")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.548s elapsed time, 1.126s cpu time, 0.092s GC time
consts
  getbase :: "base => char list"
consts
  isRepBase :: "base => bool"
consts
  isShBase :: "base => bool"
### theory "Draft.Type"
### 0.631s elapsed time, 0.980s cpu time, 0.065s GC time
Loading theory "Draft.Value" (required by "Draft.ConformTemplates" via "Draft.Conform" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj" via "Draft.ClassRel" via "Draft.Decl" via "Draft.Expr")
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Ref"
consts
  the_Intg :: "val => int"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_addr :: "val => nat"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_path :: "val => char list list"
consts
  default_val :: "ty => val"
consts
  typeof :: "val => ty option"
### theory "Draft.Value"
### 0.403s elapsed time, 0.435s cpu time, 0.044s GC time
Loading theory "Draft.Expr" (required by "Draft.ConformTemplates" via "Draft.Conform" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj" via "Draft.ClassRel" via "Draft.Decl")
Found termination order: "{}"
### Ambiguous input (line 80 of "$AFP/CoreC++/Expr.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" fv)
###       ("_updbind" ("_position" V) ("_position" e)))
###     ("\<^const>Set.union" ("_Finset" ("_position" V))
###       ("_applC" ("_position" fv) ("_position" e)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.expr.LAss" ("_position" V) ("_position" e)))
###     ("\<^const>Set.union" ("_Finset" ("_position" V))
###       ("_applC" ("_position" fv) ("_position" e)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 82 of "$AFP/CoreC++/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" fv)
###       ("_updbind"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  fv :: "expr => char list set"
  fvs :: "expr list => char list set"
### theory "Draft.Expr"
### 2.280s elapsed time, 2.681s cpu time, 0.558s GC time
Loading theory "Draft.Decl" (required by "Draft.ConformTemplates" via "Draft.Conform" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj" via "Draft.ClassRel")
### theory "Draft.Decl"
### 0.094s elapsed time, 0.136s cpu time, 0.045s GC time
Loading theory "Draft.ClassRel" (required by "Draft.ConformTemplates" via "Draft.Conform" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj")
Proofs for inductive predicate(s) "subclsRp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "subclsSp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "subcls1p"
  Proving monotonicity ...
### theory "Draft.ClassRel"
### 0.172s elapsed time, 0.172s cpu time, 0.000s GC time
Loading theory "Draft.SubObj" (required by "Draft.ConformTemplates" via "Draft.Conform" via "Draft.Exceptions" via "Draft.Objects")
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Proofs for inductive predicate(s) "Subobjs\<^sub>R"
  Proving monotonicity ...
Proofs for inductive predicate(s) "Subobjs"
  Proving monotonicity ...
Proofs for inductive predicate(s) "casts_to"
  Proving monotonicity ...
Proofs for inductive predicate(s) "Casts_to"
  Proving monotonicity ...
Proofs for inductive predicate(s) "leq_path1p"
  Proving monotonicity ...
### Ambiguous input (line 720 of "$AFP/CoreC++/SubObj.thy") produces 3 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" MinimalMethodDefs)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" C) ("_position" M))))
###   ("_Coll" ("_pattern" ("_position" Cs) ("_position" mthd))
###     ("\<^const>HOL.conj"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" Cs) ("_tuple_arg" ("_position" mthd)))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M)))))
###       ("_Ball" ("_pattern" ("_position" Cs') ("_position" mthd'))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M))))
###         ("\<^const>HOL.eq"
###           ("\<^const>SubObj.leq_path" ("_position" P) ("_position" C)
###             ("_position" Cs')
###             ("\<^const>HOL.implies" ("_position" Cs) ("_position" Cs')))
###           ("_position" Cs))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" MinimalMethodDefs)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" C) ("_position" M))))
###   ("_Coll" ("_pattern" ("_position" Cs) ("_position" mthd))
###     ("\<^const>HOL.conj"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" Cs) ("_tuple_arg" ("_position" mthd)))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M)))))
###       ("_Ball" ("_pattern" ("_position" Cs') ("_position" mthd'))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M))))
###         ("\<^const>SubObj.leq_path" ("_position" P) ("_position" C)
###           ("_position" Cs')
###           ("\<^const>HOL.implies" ("_position" Cs)
###             ("\<^const>HOL.eq" ("_position" Cs') ("_position" Cs))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" MinimalMethodDefs)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" C) ("_position" M))))
###   ("_Coll" ("_pattern" ("_position" Cs) ("_position" mthd))
###     ("\<^const>HOL.conj"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" Cs) ("_tuple_arg" ("_position" mthd)))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M)))))
###       ("_Ball" ("_pattern" ("_position" Cs') ("_position" mthd'))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M))))
###         ("\<^const>HOL.implies"
###           ("\<^const>SubObj.leq_path" ("_position" P) ("_position" C)
###             ("_position" Cs') ("_position" Cs))
###           ("\<^const>HOL.eq" ("_position" Cs') ("_position" Cs)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 725 of "$AFP/CoreC++/SubObj.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" OverriderMethodDefs)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" R) ("_position" M))))
###   ("_Coll" ("_pattern" ("_position" Cs) ("_position" mthd))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" Cs') ("_position" mthd'))
###       ("\<^const>HOL.conj"
###         ("\<^const>SubObj.LeastMethodDef" ("_position" P)
###           ("_applC" ("_position" ldc) ("_position" R)) ("_position" M)
###           ("_position" mthd') ("_position" Cs'))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" Cs) ("_tuple_arg" ("_position" mthd)))
###             ("_applC" ("_position" MinimalMethodDefs)
###               ("_cargs" ("_position" P)
###                 ("_cargs" ("_applC" ("_position" mdc) ("_position" R))
###                   ("_position" M)))))
###           ("\<^const>SubObj.appendPath"
###             ("\<^const>SubObj.leq_path" ("_position" P)
###               ("_applC" ("_position" mdc) ("_position" R)) ("_position" Cs)
###               ("_applC" ("_position" snd) ("_position" R)))
###             ("_position" Cs')))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" OverriderMethodDefs)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" R) ("_position" M))))
###   ("_Coll" ("_pattern" ("_position" Cs) ("_position" mthd))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" Cs') ("_position" mthd'))
###       ("\<^const>HOL.conj"
###         ("\<^const>SubObj.LeastMethodDef" ("_position" P)
###           ("_applC" ("_position" ldc) ("_position" R)) ("_position" M)
###           ("_position" mthd') ("_position" Cs'))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" Cs) ("_tuple_arg" ("_position" mthd)))
###             ("_applC" ("_position" MinimalMethodDefs)
###               ("_cargs" ("_position" P)
###                 ("_cargs" ("_applC" ("_position" mdc) ("_position" R))
###                   ("_position" M)))))
###           ("\<^const>SubObj.leq_path" ("_position" P)
###             ("_applC" ("_position" mdc) ("_position" R)) ("_position" Cs)
###             ("\<^const>SubObj.appendPath"
###               ("_applC" ("_position" snd) ("_position" R))
###               ("_position" Cs'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "SelectMethodDef"
  Proving monotonicity ...
### theory "Draft.SubObj"
### 0.857s elapsed time, 0.909s cpu time, 0.067s GC time
Loading theory "Draft.Objects" (required by "Draft.ConformTemplates" via "Draft.Conform" via "Draft.Exceptions")
Loading theory "Draft.TypeRel" (required by "Draft.ConformTemplates" via "Draft.Conform" via "Draft.WellTypeRT" via "Draft.WellType")
Proofs for inductive predicate(s) "widen"
  Proving monotonicity ...
Proofs for inductive predicate(s) "init_obj"
  Proving monotonicity ...
### theory "Draft.TypeRel"
### 0.061s elapsed time, 0.123s cpu time, 0.000s GC time
### theory "Draft.Objects"
### 0.088s elapsed time, 0.180s cpu time, 0.043s GC time
Loading theory "Draft.Exceptions" (required by "Draft.ConformTemplates" via "Draft.Conform")
### theory "Draft.Exceptions"
### 0.089s elapsed time, 0.089s cpu time, 0.000s GC time
Loading theory "Draft.Syntax" (required by "Draft.ConformTemplates" via "Draft.Conform" via "Draft.WellTypeRT" via "Draft.WellType")
### theory "Draft.Syntax"
### 0.033s elapsed time, 0.033s cpu time, 0.000s GC time
Loading theory "Draft.WellType" (required by "Draft.ConformTemplates" via "Draft.Conform" via "Draft.WellTypeRT")
### Ambiguous input (line 62 of "$AFP/CoreC++/WellType.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WT" ("_position" P) ("_position" E) ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SubObj.LeastFieldDecl" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" T) ("_position" Cs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" T))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WT" ("_position" P) ("_position" E) ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SubObj.LeastFieldDecl" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" T) ("_position" Cs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" T))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "WT", "WTs"
  Proving monotonicity ...
### Ignoring duplicate safe introduction (intro!)
### ?P,?E \<turnstile> [] [::] []
### Ignoring duplicate safe introduction (intro!)
### ?P,?E \<turnstile> [] [::] []
### Ambiguous input (line 122 of "$AFP/CoreC++/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts)))
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E) ("_position" e)
###       ("\<^const>HOL.conj" ("_position" T)
###         ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###           ("_position" es) ("_position" Ts))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts)))
###     ("\<^const>HOL.conj"
###       ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###         ("_position" e) ("_position" T))
###       ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###         ("_position" es) ("_position" Ts)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 129 of "$AFP/CoreC++/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" Ts))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" U) ("_position" Us))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts)
###           ("\<^const>List.list.Cons" ("_position" U) ("_position" Us)))
###         ("\<^const>HOL.conj"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e) ("_position" U))
###           ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###             ("_position" es) ("_position" Us)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" Ts))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" U) ("_position" Us))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts)
###           ("\<^const>List.list.Cons" ("_position" U) ("_position" Us)))
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e)
###           ("\<^const>HOL.conj" ("_position" U)
###             ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###               ("_position" es) ("_position" Us))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 137 of "$AFP/CoreC++/WellType.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" Ts)
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###         ("\<^const>List.append" ("_position" es\<^sub>1)
###           ("_position" es\<^sub>2))
###         ("_position" Ts))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Ts\<^sub>1) ("_position" Ts\<^sub>2))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" Ts)
###             ("\<^const>List.append" ("_position" Ts\<^sub>1)
###               ("_position" Ts\<^sub>2)))
###           ("\<^const>HOL.conj"
###             ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###               ("_position" es\<^sub>1) ("_position" Ts\<^sub>1))
###             ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###               ("_position" es\<^sub>2) ("_position" Ts\<^sub>2))))))))
### ("\<^const>Pure.all_binder" ("_position" Ts)
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###         ("\<^const>List.append" ("_position" es\<^sub>1)
###           ("_position" es\<^sub>2))
###         ("_position" Ts))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Ts\<^sub>1) ("_position" Ts\<^sub>2))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" Ts)
###             ("\<^const>List.append" ("_position" Ts\<^sub>1)
###               ("_position" Ts\<^sub>2)))
###           ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###             ("_position" es\<^sub>1)
###             ("\<^const>HOL.conj" ("_position" Ts\<^sub>1)
###               ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###                 ("_position" es\<^sub>2) ("_position" Ts\<^sub>2)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 154 of "$AFP/CoreC++/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("_applC" ("_position" Val) ("_position" v)) ("_position" T))
###     ("\<^const>HOL.eq" ("_applC" ("_position" typeof) ("_position" v))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("_applC" ("_position" Val) ("_position" v))
###     ("\<^const>HOL.eq" ("_position" T)
###       ("\<^const>HOL.eq" ("_applC" ("_position" typeof) ("_position" v))
###         ("_applC" ("_position" Some) ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### typeof ?v = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Val ?v :: ?T
### Ignoring duplicate safe introduction (intro!)
### typeof ?v = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Val ?v :: ?T
### Ambiguous input (line 161 of "$AFP/CoreC++/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("_applC" ("_position" Var) ("_position" V)) ("_position" T))
###     ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("_applC" ("_position" Var) ("_position" V))
###     ("\<^const>HOL.eq" ("_position" T)
###       ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###         ("_applC" ("_position" Some) ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### ?E ?V = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Var ?V :: ?T
### Ignoring duplicate safe introduction (intro!)
### ?E ?V = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Var ?V :: ?T
### Ambiguous input (line 168 of "$AFP/CoreC++/WellType.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Seq" ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))
###     ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###       ("\<^const>HOL.conj"
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>1) ("_position" T\<^sub>1))
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" T\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.Seq" ("_position" e\<^sub>1)
###       ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" T\<^sub>2)
###       ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###         ("\<^const>HOL.conj"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>1) ("_position" T\<^sub>1))
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Seq" ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))
###     ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###       ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1)
###         ("\<^const>HOL.conj" ("_position" T\<^sub>1)
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.Seq" ("_position" e\<^sub>1)
###       ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" T\<^sub>2)
###       ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>1)
###           ("\<^const>HOL.conj" ("_position" T\<^sub>1)
###             ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###               ("_position" e\<^sub>2) ("_position" T\<^sub>2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 190 of "$AFP/CoreC++/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.LAss"
###       ("\<^const>Expr.expr.FAcc" ("_position" e) ("_position" F)
###         ("_position" Cs))
###       ("_position" v))
###     ("_position" T)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.FAss" ("_position" e) ("_position" F)
###       ("_position" Cs) ("_position" v))
###     ("_position" T)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.WellType"
### 0.813s elapsed time, 1.219s cpu time, 0.534s GC time
Loading theory "Draft.WellTypeRT" (required by "Draft.ConformTemplates" via "Draft.Conform")
consts
  typeof_h ::
    "(char list *
      base list *
      (char list * ty) list *
      (char list * ty list * ty * char list list * expr) list) list
     => (nat
         => (char list *
             (char list list * (char list => val option)) set) option)
        => val => ty option"
### Ambiguous input (line 99 of "$AFP/CoreC++/WellTypeRT.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt" ("_position" P) ("_position" E) ("_position" h)
###         ("_position" e\<^sub>1) ("_position" NT)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WTrt" ("_position" P) ("_position" E) ("_position" h)
###           ("_position" e\<^sub>2) ("_position" T')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt" ("_position" P) ("_position" E) ("_position" h)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" T))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt" ("_position" P) ("_position" E) ("_position" h)
###         ("_position" e\<^sub>1) ("_position" NT)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WTrt" ("_position" P) ("_position" E) ("_position" h)
###           ("_position" e\<^sub>2) ("_position" T')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt" ("_position" P) ("_position" E) ("_position" h)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" T))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 94 of "$AFP/CoreC++/WellTypeRT.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt" ("_position" P) ("_position" E) ("_position" h)
###         ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" Cs)
###           ("\<^const>List.list.Nil")))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>SubObj.LeastFieldDecl" ("_position" P) ("_position" C)
###             ("_position" F) ("_position" T) ("_position" Cs)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>WTrt" ("_position" P) ("_position" E) ("_position" h)
###               ("_position" e\<^sub>2) ("_position" T')))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                 ("_position" T))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt" ("_position" P) ("_position" E) ("_position" h)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" T))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt" ("_position" P) ("_position" E) ("_position" h)
###         ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" Cs)
###           ("\<^const>List.list.Nil")))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>SubObj.LeastFieldDecl" ("_position" P) ("_position" C)
###             ("_position" F) ("_position" T) ("_position" Cs)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>WTrt" ("_position" P) ("_position" E) ("_position" h)
###               ("_position" e\<^sub>2) ("_position" T')))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                 ("_position" T))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt" ("_position" P) ("_position" E) ("_position" h)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" T))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "WTrt", "WTrts"
  Proving monotonicity ...
### Ignoring duplicate safe introduction (intro!)
### ?P,?E,?h \<turnstile> [] [:] []
### Ignoring duplicate safe introduction (intro!)
### ?P,?E,?h \<turnstile> [] [:] []
### Ignoring duplicate safe introduction (intro!)
### ?P \<turnstile> typeof\<^bsub>?h\<^esub> ?v = \<lfloor>?T\<rfloor> ==>
### ?P,?E,?h \<turnstile> Val ?v : ?T
### Ignoring duplicate safe introduction (intro!)
### ?E ?V = \<lfloor>?T\<rfloor> ==> ?P,?E,?h \<turnstile> Var ?V : ?T
### Ignoring duplicate safe introduction (intro!)
### ?P \<turnstile> typeof\<^bsub>?h\<^esub> ?v = \<lfloor>?T\<rfloor> ==>
### ?P,?E,?h \<turnstile> Val ?v : ?T
### Ignoring duplicate safe introduction (intro!)
### ?E ?V = \<lfloor>?T\<rfloor> ==> ?P,?E,?h \<turnstile> Var ?V : ?T
### Ambiguous input (line 169 of "$AFP/CoreC++/WellTypeRT.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" Ts)
###     ("\<^const>HOL.eq"
###       ("\<^const>WellTypeRT.WTrts" ("_position" P) ("_position" E)
###         ("_position" h)
###         ("\<^const>List.append" ("_position" es\<^sub>1)
###           ("_position" es\<^sub>2))
###         ("_position" Ts))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Ts\<^sub>1) ("_position" Ts\<^sub>2))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" Ts)
###             ("\<^const>List.append" ("_position" Ts\<^sub>1)
###               ("_position" Ts\<^sub>2)))
###           ("\<^const>HOL.conj"
###             ("\<^const>WellTypeRT.WTrts" ("_position" P) ("_position" E)
###               ("_position" h) ("_position" es\<^sub>1)
###               ("_position" Ts\<^sub>1))
###             ("\<^const>WellTypeRT.WTrts" ("_position" P) ("_position" E)
###               ("_position" h) ("_position" es\<^sub>2)
###               ("_position" Ts\<^sub>2))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" Ts)
###     ("\<^const>HOL.eq"
###       ("\<^const>WellTypeRT.WTrts" ("_position" P) ("_position" E)
###         ("_position" h)
###         ("\<^const>List.append" ("_position" es\<^sub>1)
###           ("_position" es\<^sub>2))
###         ("_position" Ts))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Ts\<^sub>1) ("_position" Ts\<^sub>2))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" Ts)
###             ("\<^const>List.append" ("_position" Ts\<^sub>1)
###               ("_position" Ts\<^sub>2)))
###           ("\<^const>WellTypeRT.WTrts" ("_position" P) ("_position" E)
###             ("_position" h) ("_position" es\<^sub>1)
###             ("\<^const>HOL.conj" ("_position" Ts\<^sub>1)
###               ("\<^const>WellTypeRT.WTrts" ("_position" P) ("_position" E)
###                 ("_position" h) ("_position" es\<^sub>2)
###                 ("_position" Ts\<^sub>2)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 194 of "$AFP/CoreC++/WellTypeRT.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellTypeRT.WTrt" ("_position" P) ("_position" E)
###     ("_position" h)
###     ("\<^const>Expr.expr.LAss"
###       ("\<^const>Expr.expr.FAcc" ("_position" e) ("_position" F)
###         ("_position" Cs))
###       ("_position" v))
###     ("_position" T)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellTypeRT.WTrt" ("_position" P) ("_position" E)
###     ("_position" h)
###     ("\<^const>Expr.expr.FAss" ("_position" e) ("_position" F)
###       ("_position" Cs) ("_position" v))
###     ("_position" T)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.WellTypeRT"
### 0.754s elapsed time, 0.856s cpu time, 0.061s GC time
Loading theory "Draft.Conform" (required by "Draft.ConformTemplates")
### Ambiguous input (line 19 of "$AFP/CoreC++/Conform.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>conf" ("_position" P) ("_position" h) ("_position" v)
###       ("_applC" ("_position" Class) ("_position" C)))
###     ("\<^const>HOL.eq"
###       ("\<^const>HOL.eq"
###         ("_applC"
###           ("\<^const>WellTypeRT.typeof_h" ("_position" P) ("_position" h))
###           ("_position" v))
###         ("_applC"
###           ("\<^const>WellTypeRT.typeof_h"
###             ("\<^const>HOL.disj"
###               ("_applC" ("_position" Some)
###                 ("_applC" ("_position" Class) ("_position" C)))
###               ("_position" P))
###             ("_position" h))
###           ("_position" v)))
###       ("_applC" ("_position" Some) ("_position" NT)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>conf" ("_position" P) ("_position" h) ("_position" v)
###       ("_applC" ("_position" Class) ("_position" C)))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.eq"
###         ("_applC"
###           ("\<^const>WellTypeRT.typeof_h" ("_position" P) ("_position" h))
###           ("_position" v))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" Class) ("_position" C))))
###       ("\<^const>HOL.eq"
###         ("_applC"
###           ("\<^const>WellTypeRT.typeof_h" ("_position" P) ("_position" h))
###           ("_position" v))
###         ("_applC" ("_position" Some) ("_position" NT))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>conf" ("_position" P) ("_position" h) ("_position" v)
###       ("_applC" ("_position" Class) ("_position" C)))
###     ("\<^const>HOL.eq"
###       ("_applC"
###         ("\<^const>WellTypeRT.typeof_h"
###           ("\<^const>HOL.disj"
###             ("\<^const>HOL.eq"
###               ("_applC"
###                 ("\<^const>WellTypeRT.typeof_h" ("_position" P)
###                   ("_position" h))
###                 ("_position" v))
###               ("_applC" ("_position" Some)
###                 ("_applC" ("_position" Class) ("_position" C))))
###             ("_position" P))
###           ("_position" h))
###         ("_position" v))
###       ("_applC" ("_position" Some) ("_position" NT)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>conf" ("_position" P) ("_position" h) ("_position" v)
###       ("_applC" ("_position" Class) ("_position" C)))
###     ("\<^const>HOL.eq"
###       ("_applC"
###         ("\<^const>WellTypeRT.typeof_h" ("_position" P) ("_position" h))
###         ("_cargs"
###           ("\<^const>WellTypeRT.typeof_h"
###             ("\<^const>HOL.disj"
###               ("\<^const>HOL.eq" ("_position" v)
###                 ("_applC" ("_position" Some)
###                   ("_applC" ("_position" Class) ("_position" C))))
###               ("_position" P))
###             ("_position" h))
###           ("_position" v)))
###       ("_applC" ("_position" Some) ("_position" NT)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>conf" ("_position" P) ("_position" h) ("_position" v)
###       ("_applC" ("_position" Class) ("_position" C)))
###     ("\<^const>HOL.eq"
###       ("\<^const>HOL.eq"
###         ("_applC"
###           ("\<^const>WellTypeRT.typeof_h" ("_position" P) ("_position" h))
###           ("_position" v))
###         ("_applC" ("_position" Some)
###           ("_cargs"
###             ("\<^const>WellTypeRT.typeof_h"
###               ("\<^const>HOL.disj"
###                 ("_applC" ("_position" Class) ("_position" C))
###                 ("_position" P))
###               ("_position" h))
###             ("_position" v))))
###       ("_applC" ("_position" Some) ("_position" NT)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  conf ::
    "(char list *
      base list *
      (char list * ty) list *
      (char list * ty list * ty * char list list * expr) list) list
     => (nat
         => (char list *
             (char list list * (char list => val option)) set) option)
        => val => ty => bool"
### Ambiguous input (line 33 of "$AFP/CoreC++/Conform.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>hconf" ("_position" P) ("_position" h))
###   ("\<^const>HOL.conj"
###     ("_tuple"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" obj))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###             ("_applC" ("_position" Some) ("_position" obj)))
###           ("_position" P)))
###       ("_tuple_arg" ("\<^fixed>hconf" ("_position" h) ("_position" obj))))
###     ("_applC" ("_position" preallocated) ("_position" h))))
### ("\<^const>Pure.eq" ("\<^fixed>hconf" ("_position" P) ("_position" h))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" obj))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some) ("_position" obj)))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" h)
###           ("_position" obj))))
###     ("_applC" ("_position" preallocated) ("_position" h))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 203 of "$AFP/CoreC++/Conform.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>envconf" ("_position" P) ("_position" E))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" V) ("_position" T))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###         ("_applC" ("_position" Some) ("_position" T)))
###       ("_applC" ("_position" is_type)
###         ("_cargs" ("_position" P) ("_position" T))))))
### ("\<^const>Pure.eq"
###   ("\<^const>Conform.hconf" ("_position" P) ("_position" E))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" V) ("_position" T))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###         ("_applC" ("_position" Some) ("_position" T)))
###       ("_applC" ("_position" is_type)
###         ("_cargs" ("_position" P) ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 211 of "$AFP/CoreC++/Conform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^fixed>type_conf" ("_position" P) ("_position" E) ("_position" h)
###       ("_position" e) ("_position" Void))
###     ("\<^const>WellTypeRT.WTrt" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" e) ("_position" Void))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>type_conf" ("_position" P) ("_position" E) ("_position" h)
###     ("_position" e)
###     ("\<^const>HOL.iff" ("_position" Void)
###       ("\<^const>WellTypeRT.WTrt" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" e) ("_position" Void)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 212 of "$AFP/CoreC++/Conform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^fixed>type_conf" ("_position" P) ("_position" E) ("_position" h)
###       ("_position" e) ("_position" Boolean))
###     ("\<^const>WellTypeRT.WTrt" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" e) ("_position" Boolean))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>type_conf" ("_position" P) ("_position" E) ("_position" h)
###     ("_position" e)
###     ("\<^const>HOL.iff" ("_position" Boolean)
###       ("\<^const>WellTypeRT.WTrt" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" e) ("_position" Boolean)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 213 of "$AFP/CoreC++/Conform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^fixed>type_conf" ("_position" P) ("_position" E) ("_position" h)
###       ("_position" e) ("_position" Integer))
###     ("\<^const>WellTypeRT.WTrt" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" e) ("_position" Integer))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>type_conf" ("_position" P) ("_position" E) ("_position" h)
###     ("_position" e)
###     ("\<^const>HOL.iff" ("_position" Integer)
###       ("\<^const>WellTypeRT.WTrt" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" e) ("_position" Integer)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 214 of "$AFP/CoreC++/Conform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^fixed>type_conf" ("_position" P) ("_position" E) ("_position" h)
###       ("_position" e) ("_position" NT))
###     ("\<^const>WellTypeRT.WTrt" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" e) ("_position" NT))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>type_conf" ("_position" P) ("_position" E) ("_position" h)
###     ("_position" e)
###     ("\<^const>HOL.iff" ("_position" NT)
###       ("\<^const>WellTypeRT.WTrt" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" e) ("_position" NT)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 215 of "$AFP/CoreC++/Conform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^fixed>type_conf" ("_position" P) ("_position" E) ("_position" h)
###       ("_position" e) ("_applC" ("_position" Class) ("_position" C)))
###     ("\<^const>WellTypeRT.WTrt" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" e)
###       ("\<^const>HOL.disj" ("_applC" ("_position" Class) ("_position" C))
###         ("\<^const>WellTypeRT.WTrt" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" e) ("_position" NT))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>type_conf" ("_position" P) ("_position" E) ("_position" h)
###     ("_position" e)
###     ("\<^const>HOL.iff" ("_applC" ("_position" Class) ("_position" C))
###       ("\<^const>WellTypeRT.WTrt" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" e)
###         ("\<^const>HOL.disj" ("_applC" ("_position" Class) ("_position" C))
###           ("\<^const>WellTypeRT.WTrt" ("_position" P) ("_position" E)
###             ("_position" h) ("_position" e) ("_position" NT)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^fixed>type_conf" ("_position" P) ("_position" E) ("_position" h)
###       ("_position" e) ("_applC" ("_position" Class) ("_position" C)))
###     ("\<^const>HOL.disj"
###       ("\<^const>WellTypeRT.WTrt" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" e)
###         ("_applC" ("_position" Class) ("_position" C)))
###       ("\<^const>WellTypeRT.WTrt" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" e) ("_position" NT)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>type_conf" ("_position" P) ("_position" E) ("_position" h)
###     ("_position" e)
###     ("\<^const>HOL.iff" ("_applC" ("_position" Class) ("_position" C))
###       ("\<^const>HOL.disj"
###         ("\<^const>WellTypeRT.WTrt" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" e)
###           ("_applC" ("_position" Class) ("_position" C)))
###         ("\<^const>WellTypeRT.WTrt" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" e) ("_position" NT))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  type_conf ::
    "(char list *
      base list *
      (char list * ty) list *
      (char list * ty list * ty * char list list * expr) list) list
     => (char list => ty option)
        => (nat
            => (char list *
                (char list list * (char list => val option)) set) option)
           => expr => ty => bool"
### Ambiguous input (line 222 of "$AFP/CoreC++/Conform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^fixed>types_conf" ("_position" P) ("_position" E) ("_position" h)
###       ("\<^const>List.list.Nil") ("\<^const>List.list.Nil"))
###     ("_position" True)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>types_conf" ("_position" P) ("_position" E) ("_position" h)
###     ("\<^const>List.list.Nil")
###     ("\<^const>HOL.iff" ("\<^const>List.list.Nil") ("_position" True))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 223 of "$AFP/CoreC++/Conform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^fixed>types_conf" ("_position" P) ("_position" E) ("_position" h)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts)))
###     ("\<^const>Conform.type_conf" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" e)
###       ("\<^const>HOL.conj" ("_position" T)
###         ("\<^fixed>types_conf" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" es) ("_position" Ts))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>types_conf" ("_position" P) ("_position" E) ("_position" h)
###     ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###     ("\<^const>HOL.iff"
###       ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts))
###       ("\<^const>Conform.type_conf" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" e)
###         ("\<^const>HOL.conj" ("_position" T)
###           ("\<^fixed>types_conf" ("_position" P) ("_position" E)
###             ("_position" h) ("_position" es) ("_position" Ts)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^fixed>types_conf" ("_position" P) ("_position" E) ("_position" h)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts)))
###     ("\<^const>HOL.conj"
###       ("\<^const>Conform.type_conf" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" e) ("_position" T))
###       ("\<^fixed>types_conf" ("_position" P) ("_position" E) ("_position" h)
###         ("_position" es) ("_position" Ts)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>types_conf" ("_position" P) ("_position" E) ("_position" h)
###     ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###     ("\<^const>HOL.iff"
###       ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts))
###       ("\<^const>HOL.conj"
###         ("\<^const>Conform.type_conf" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" e) ("_position" T))
###         ("\<^fixed>types_conf" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" es) ("_position" Ts))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 225 of "$AFP/CoreC++/Conform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^fixed>types_conf" ("_position" P) ("_position" E) ("_position" h)
###       ("_position" es) ("_position" Ts))
###     ("_position" False)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>types_conf" ("_position" P) ("_position" E) ("_position" h)
###     ("_position" es)
###     ("\<^const>HOL.iff" ("_position" Ts) ("_position" False))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order:
  "(%p. size_list size (snd (snd (snd (snd p))))) <*mlex*> {}"
### Ambiguous input (line 248 of "$AFP/CoreC++/Conform.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_idts" ("_position" es) ("_position" Ts))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" es))
###           ("_applC" ("_position" length) ("_position" Ts'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" types_conf)
###             ("_cargs" ("_position" P)
###               ("_cargs" ("_position" E)
###                 ("_cargs" ("_position" h)
###                   ("_cargs" ("_position" es) ("_position" Ts')))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widens" ("_position" P) ("_position" Ts')
###               ("_position" Ts))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" Ts'')
###         ("\<^const>WellTypeRT.WTrts" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" es)
###           ("\<^const>HOL.conj" ("_position" Ts'')
###             ("\<^const>TypeRel.widens" ("_position" P) ("_position" Ts'')
###               ("_position" Ts))))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" es) ("_position" Ts))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" es))
###           ("_applC" ("_position" length) ("_position" Ts'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" types_conf)
###             ("_cargs" ("_position" P)
###               ("_cargs" ("_position" E)
###                 ("_cargs" ("_position" h)
###                   ("_cargs" ("_position" es) ("_position" Ts')))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widens" ("_position" P) ("_position" Ts')
###               ("_position" Ts))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" Ts'')
###         ("\<^const>HOL.conj"
###           ("\<^const>WellTypeRT.WTrts" ("_position" P) ("_position" E)
###             ("_position" h) ("_position" es) ("_position" Ts''))
###           ("\<^const>TypeRel.widens" ("_position" P) ("_position" Ts'')
###             ("_position" Ts)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Conform"
### 0.436s elapsed time, 0.485s cpu time, 0.062s GC time
Loading theory "Draft.ConformTemplates"
val templateLemmas =
   [("Conform.lconf_empty",
     "?P,?h \<turnstile> Map.empty (:\<le>)\<^sub>w ?E",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             t_empty),
           template_var 0)
         )),
    ("Conform.conf_NT", "(?P,?h \<turnstile> ?v :\<le> NT) = (?v = Null)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1),
                template_var 0),
              template_hole 2)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("Conform.conf_Null",
     "(?P,?h \<turnstile> Null :\<le> ?T) = ?P \<turnstile> NT \<le> ?T",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_hole 2),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_hole 0),
         template_var 0))),
    ("Conform.defval_conf",
     "is_type ?P ?T ==> ?P,?h \<turnstile> default_val ?T :\<le> ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0),
               template_app (template_hole 0, template_var 1)),
             template_var 1)
           ))),
    ("Conform.typeof_lit_conf",
     "typeof ?v = \<lfloor>?T\<rfloor> ==> ?P,?h \<turnstile> ?v :\<le> ?T",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 3),
          template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 3),
             template_var 2)
           ))),
    ("Conform.wt_same_type_typeconf",
     "?P,?E,?h \<turnstile> ?e : ?T ==>
      ?P,?E,?h \<turnstile> ?e :\<^bsub>NT\<^esub> ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Conform.wts_same_types_typesconf",
     "?P,?E,?h \<turnstile> ?es [:] ?Ts ==>
      ?P,?E,?h \<turnstile> ?es [:]\<^bsub>NT\<^esub> ?Ts",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Conform.typeof_conf",
     "?P \<turnstile> typeof\<^bsub>?h\<^esub> ?v = \<lfloor>?T\<rfloor> ==>
      ?P,?h \<turnstile> ?v :\<le> ?T",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Conform.confs_rev",
     "(?P,?h \<turnstile> rev ?s [:\<le>] ?t) =
      (?P,?h \<turnstile> ?s [:\<le>] rev ?t)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2)),
           template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2)),
           template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Conform.hconfD",
     "[| ?P \<turnstile> ?h \<surd>; ?h ?a = \<lfloor>?obj\<rfloor> |]
      ==> ?P,?h \<turnstile> ?obj \<surd>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app (template_var 2, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Conform.fconf_init_fields",
     "class ?P ?C = \<lfloor>(?Bs, ?fs, ?ms)\<rfloor> ==>
      ?P,?h \<turnstile> init_class_fieldmap ?P ?C (:\<le>) map_of ?fs",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 5), template_var 4),
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 5),
                 template_var 0),
               template_app
                (template_app (template_hole 1, template_var 5),
                 template_var 4)),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Conform.typeof_notclass_heap",
     "ALL C. ?T ~= Class C ==>
      (?P \<turnstile> typeof\<^bsub>?h\<^esub> ?v = \<lfloor>?T\<rfloor>) =
      (?P \<turnstile> typeof\<^bsub>?h'\<^esub> ?v =
       \<lfloor>?T\<rfloor>)",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_app (template_hole 0, template_var 4)),
         template_equation
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0),
             template_var 1),
           template_app (template_hole 0, template_var 4))))),
    ("Conform.hconf_Subobjs",
     "[| ?h ?a = \<lfloor>(?C, ?S)\<rfloor>; (?Cs, ?fs) : ?S;
         ?P \<turnstile> ?h \<surd> |]
      ==> Subobjs ?P ?C ?Cs",
     template_implication
      ([template_equation
         (template_app (template_var 6, template_var 5),
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 6)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 4),
             template_var 2)
           ))),
    ("Conform.conf_upd_obj",
     "?h ?a = \<lfloor>(?C, ?S)\<rfloor> ==>
      (?P,?h(?a |-> (?C, ?S')) \<turnstile> ?v :\<le> ?T) =
      (?P,?h \<turnstile> ?v :\<le> ?T)",
     template_implication
      ([template_equation
         (template_app (template_var 7, template_var 6),
          template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 5),
              template_var 4)))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 7),
                   template_var 6),
                 template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 5),
                     template_var 2)))),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 7),
             template_var 1),
           template_var 0)))),
    ("Conform.lconf_upd2",
     "[| ?P,?h \<turnstile> ?l (:\<le>)\<^sub>w ?E;
         ?P,?h \<turnstile> ?v :\<le> ?T |]
      ==> ?P,?h \<turnstile> ?l(?V |-> ?v) (:\<le>)\<^sub>w ?E(?V |-> ?T)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 6),
                  template_var 5),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 5, template_var 6),
                 template_var 5),
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 4),
                   template_var 0),
                 template_app (template_hole 2, template_var 2))),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0),
               template_app (template_hole 0, template_var 1)))
           ))),
    ("Conform.lconf_upd",
     "[| ?P,?h \<turnstile> ?l (:\<le>)\<^sub>w ?E;
         ?P,?h \<turnstile> ?v :\<le> ?T; ?E ?V = \<lfloor>?T\<rfloor> |]
      ==> ?P,?h \<turnstile> ?l(?V |-> ?v) (:\<le>)\<^sub>w ?E",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 6),
                  template_var 5),
                template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app (template_var 3, template_var 0),
          template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 5, template_var 6),
                 template_var 5),
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 0),
                 template_app (template_hole 0, template_var 2))),
             template_var 3)
           ))),
    ("Conform.confs_Cons2",
     "(?P,?h \<turnstile> ?xs [:\<le>] ?y # ?ys) =
      (EX z zs.
          ?xs = z # zs &
          ?P,?h \<turnstile> z :\<le> ?y &
          ?P,?h \<turnstile> zs [:\<le>] ?ys)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 4),
               template_var 3)),
           template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("Conform.types_conf_smaller_types",
     "[| length ?es = length ?Ts';
         ?P,?E,?h \<turnstile> ?es [:]\<^bsub>NT\<^esub> ?Ts';
         ?P \<turnstile> ?Ts' [\<le>] ?Ts |]
      ==> EX Ts''.
             ?P,?E,?h \<turnstile> ?es [:] Ts'' &
             ?P \<turnstile> Ts'' [\<le>] ?Ts",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 5),
          template_app (template_hole 6, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 3)),
                template_var 4),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 2, t_empty))))]:
   (string * thm * template) list
### theory "Draft.ConformTemplates"
### 0.388s elapsed time, 0.490s cpu time, 0.000s GC time
val it = (): unit
