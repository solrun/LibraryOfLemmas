Loading theory "Draft.Auxiliary" (required by "Draft.ExecuteTemplates" via "Draft.Execute" via "Draft.BigStep" via "Draft.Syntax" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj" via "Draft.ClassRel" via "Draft.Decl" via "Draft.Expr" via "Draft.Value" via "Draft.Type")
Loading theory "Draft.Templates" (required by "Draft.ExecuteTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.065s elapsed time, 0.158s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ExecuteTemplates")
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### theory "Draft.Auxiliary"
### 0.273s elapsed time, 0.583s cpu time, 0.026s GC time
Loading theory "Draft.Type" (required by "Draft.ExecuteTemplates" via "Draft.Execute" via "Draft.BigStep" via "Draft.Syntax" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj" via "Draft.ClassRel" via "Draft.Decl" via "Draft.Expr" via "Draft.Value")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.538s elapsed time, 1.107s cpu time, 0.087s GC time
consts
  getbase :: "base => char list"
consts
  isRepBase :: "base => bool"
consts
  isShBase :: "base => bool"
### theory "Draft.Type"
### 0.655s elapsed time, 1.011s cpu time, 0.061s GC time
Loading theory "Draft.Value" (required by "Draft.ExecuteTemplates" via "Draft.Execute" via "Draft.BigStep" via "Draft.Syntax" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj" via "Draft.ClassRel" via "Draft.Decl" via "Draft.Expr")
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Ref"
consts
  the_Intg :: "val => int"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_addr :: "val => nat"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_path :: "val => char list list"
consts
  default_val :: "ty => val"
consts
  typeof :: "val => ty option"
### theory "Draft.Value"
### 0.434s elapsed time, 0.467s cpu time, 0.046s GC time
Loading theory "Draft.Expr" (required by "Draft.ExecuteTemplates" via "Draft.Execute" via "Draft.BigStep" via "Draft.Syntax" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj" via "Draft.ClassRel" via "Draft.Decl")
Found termination order: "{}"
### Ambiguous input (line 80 of "$AFP/CoreC++/Expr.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" fv)
###       ("_updbind" ("_position" V) ("_position" e)))
###     ("\<^const>Set.union" ("_Finset" ("_position" V))
###       ("_applC" ("_position" fv) ("_position" e)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.expr.LAss" ("_position" V) ("_position" e)))
###     ("\<^const>Set.union" ("_Finset" ("_position" V))
###       ("_applC" ("_position" fv) ("_position" e)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 82 of "$AFP/CoreC++/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" fv)
###       ("_updbind"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  fv :: "expr => char list set"
  fvs :: "expr list => char list set"
### theory "Draft.Expr"
### 2.426s elapsed time, 2.832s cpu time, 0.575s GC time
Loading theory "Draft.Decl" (required by "Draft.ExecuteTemplates" via "Draft.Execute" via "Draft.BigStep" via "Draft.Syntax" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj" via "Draft.ClassRel")
### theory "Draft.Decl"
### 0.099s elapsed time, 0.141s cpu time, 0.045s GC time
Loading theory "Draft.ClassRel" (required by "Draft.ExecuteTemplates" via "Draft.Execute" via "Draft.BigStep" via "Draft.Syntax" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj")
Proofs for inductive predicate(s) "subclsRp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "subclsSp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "subcls1p"
  Proving monotonicity ...
### theory "Draft.ClassRel"
### 0.182s elapsed time, 0.182s cpu time, 0.000s GC time
Loading theory "Draft.SubObj" (required by "Draft.ExecuteTemplates" via "Draft.Execute" via "Draft.BigStep" via "Draft.Syntax" via "Draft.Exceptions" via "Draft.Objects")
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Proofs for inductive predicate(s) "Subobjs\<^sub>R"
  Proving monotonicity ...
Proofs for inductive predicate(s) "Subobjs"
  Proving monotonicity ...
Proofs for inductive predicate(s) "casts_to"
  Proving monotonicity ...
Proofs for inductive predicate(s) "Casts_to"
  Proving monotonicity ...
Proofs for inductive predicate(s) "leq_path1p"
  Proving monotonicity ...
### Ambiguous input (line 720 of "$AFP/CoreC++/SubObj.thy") produces 3 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" MinimalMethodDefs)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" C) ("_position" M))))
###   ("_Coll" ("_pattern" ("_position" Cs) ("_position" mthd))
###     ("\<^const>HOL.conj"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" Cs) ("_tuple_arg" ("_position" mthd)))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M)))))
###       ("_Ball" ("_pattern" ("_position" Cs') ("_position" mthd'))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M))))
###         ("\<^const>HOL.eq"
###           ("\<^const>SubObj.leq_path" ("_position" P) ("_position" C)
###             ("_position" Cs')
###             ("\<^const>HOL.implies" ("_position" Cs) ("_position" Cs')))
###           ("_position" Cs))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" MinimalMethodDefs)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" C) ("_position" M))))
###   ("_Coll" ("_pattern" ("_position" Cs) ("_position" mthd))
###     ("\<^const>HOL.conj"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" Cs) ("_tuple_arg" ("_position" mthd)))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M)))))
###       ("_Ball" ("_pattern" ("_position" Cs') ("_position" mthd'))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M))))
###         ("\<^const>SubObj.leq_path" ("_position" P) ("_position" C)
###           ("_position" Cs')
###           ("\<^const>HOL.implies" ("_position" Cs)
###             ("\<^const>HOL.eq" ("_position" Cs') ("_position" Cs))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" MinimalMethodDefs)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" C) ("_position" M))))
###   ("_Coll" ("_pattern" ("_position" Cs) ("_position" mthd))
###     ("\<^const>HOL.conj"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" Cs) ("_tuple_arg" ("_position" mthd)))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M)))))
###       ("_Ball" ("_pattern" ("_position" Cs') ("_position" mthd'))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M))))
###         ("\<^const>HOL.implies"
###           ("\<^const>SubObj.leq_path" ("_position" P) ("_position" C)
###             ("_position" Cs') ("_position" Cs))
###           ("\<^const>HOL.eq" ("_position" Cs') ("_position" Cs)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 725 of "$AFP/CoreC++/SubObj.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" OverriderMethodDefs)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" R) ("_position" M))))
###   ("_Coll" ("_pattern" ("_position" Cs) ("_position" mthd))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" Cs') ("_position" mthd'))
###       ("\<^const>HOL.conj"
###         ("\<^const>SubObj.LeastMethodDef" ("_position" P)
###           ("_applC" ("_position" ldc) ("_position" R)) ("_position" M)
###           ("_position" mthd') ("_position" Cs'))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" Cs) ("_tuple_arg" ("_position" mthd)))
###             ("_applC" ("_position" MinimalMethodDefs)
###               ("_cargs" ("_position" P)
###                 ("_cargs" ("_applC" ("_position" mdc) ("_position" R))
###                   ("_position" M)))))
###           ("\<^const>SubObj.appendPath"
###             ("\<^const>SubObj.leq_path" ("_position" P)
###               ("_applC" ("_position" mdc) ("_position" R)) ("_position" Cs)
###               ("_applC" ("_position" snd) ("_position" R)))
###             ("_position" Cs')))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" OverriderMethodDefs)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" R) ("_position" M))))
###   ("_Coll" ("_pattern" ("_position" Cs) ("_position" mthd))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" Cs') ("_position" mthd'))
###       ("\<^const>HOL.conj"
###         ("\<^const>SubObj.LeastMethodDef" ("_position" P)
###           ("_applC" ("_position" ldc) ("_position" R)) ("_position" M)
###           ("_position" mthd') ("_position" Cs'))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" Cs) ("_tuple_arg" ("_position" mthd)))
###             ("_applC" ("_position" MinimalMethodDefs)
###               ("_cargs" ("_position" P)
###                 ("_cargs" ("_applC" ("_position" mdc) ("_position" R))
###                   ("_position" M)))))
###           ("\<^const>SubObj.leq_path" ("_position" P)
###             ("_applC" ("_position" mdc) ("_position" R)) ("_position" Cs)
###             ("\<^const>SubObj.appendPath"
###               ("_applC" ("_position" snd) ("_position" R))
###               ("_position" Cs'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "SelectMethodDef"
  Proving monotonicity ...
### theory "Draft.SubObj"
### 0.911s elapsed time, 0.965s cpu time, 0.072s GC time
Loading theory "Draft.Objects" (required by "Draft.ExecuteTemplates" via "Draft.Execute" via "Draft.BigStep" via "Draft.Syntax" via "Draft.Exceptions")
Loading theory "Draft.TypeRel" (required by "Draft.ExecuteTemplates" via "Draft.Execute" via "Draft.WellType")
Proofs for inductive predicate(s) "widen"
  Proving monotonicity ...
Proofs for inductive predicate(s) "init_obj"
  Proving monotonicity ...
### theory "Draft.TypeRel"
### 0.079s elapsed time, 0.170s cpu time, 0.043s GC time
### theory "Draft.Objects"
### 0.093s elapsed time, 0.185s cpu time, 0.043s GC time
Loading theory "Draft.Exceptions" (required by "Draft.ExecuteTemplates" via "Draft.Execute" via "Draft.BigStep" via "Draft.Syntax")
### theory "Draft.Exceptions"
### 0.093s elapsed time, 0.093s cpu time, 0.000s GC time
Loading theory "Draft.State" (required by "Draft.ExecuteTemplates" via "Draft.Execute" via "Draft.BigStep")
Loading theory "Draft.Syntax" (required by "Draft.ExecuteTemplates" via "Draft.Execute" via "Draft.BigStep")
### theory "Draft.Syntax"
### 0.043s elapsed time, 0.087s cpu time, 0.000s GC time
Loading theory "Draft.WellType" (required by "Draft.ExecuteTemplates" via "Draft.Execute")
### theory "Draft.State"
### 0.045s elapsed time, 0.089s cpu time, 0.000s GC time
Loading theory "Draft.BigStep" (required by "Draft.ExecuteTemplates" via "Draft.Execute")
### Ambiguous input (line 172 of "$AFP/CoreC++/BigStep.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e\<^sub>0)
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg"
###             ("_applC" ("_position" l\<^sub>0)
###               ("\<^const>Expr.expr.LAss" ("_position" V)
###                 ("_position" None)))))
###         ("_position" e\<^sub>1)
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_arg" ("_position" l\<^sub>1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg" ("_position" l\<^sub>0)))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg"
###           ("_applC" ("_position" l\<^sub>1)
###             ("\<^const>Expr.expr.LAss" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e\<^sub>0)
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg"
###             ("_Update" ("_position" l\<^sub>0)
###               ("_updbind" ("_position" V) ("_position" None)))))
###         ("_position" e\<^sub>1)
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_arg" ("_position" l\<^sub>1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg" ("_position" l\<^sub>0)))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg"
###           ("_applC" ("_position" l\<^sub>1)
###             ("\<^const>Expr.expr.LAss" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e\<^sub>0)
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg"
###             ("_applC" ("_position" l\<^sub>0)
###               ("\<^const>Expr.expr.LAss" ("_position" V)
###                 ("_position" None)))))
###         ("_position" e\<^sub>1)
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_arg" ("_position" l\<^sub>1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg" ("_position" l\<^sub>0)))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg"
###           ("_Update" ("_position" l\<^sub>1)
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e\<^sub>0)
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg"
###             ("_Update" ("_position" l\<^sub>0)
###               ("_updbind" ("_position" V) ("_position" None)))))
###         ("_position" e\<^sub>1)
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_arg" ("_position" l\<^sub>1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg" ("_position" l\<^sub>0)))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg"
###           ("_Update" ("_position" l\<^sub>1)
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 123 of "$AFP/CoreC++/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###         ("_applC" ("_position" ref)
###           ("_tuple" ("_position" a) ("_tuple_arg" ("_position" Cs'))))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_arg" ("_position" l\<^sub>2)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" D) ("_tuple_arg" ("_position" S))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>SubObj.LeastFieldDecl" ("_position" P)
###               ("_applC" ("_position" last) ("_position" Cs'))
###               ("_position" F) ("_position" T) ("_position" Cs)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###                 ("_position" v) ("_position" v')))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" Ds)
###                   ("\<^const>SubObj.appendPath" ("_position" Cs')
###                     ("_position" Cs))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" Ds)
###                       ("_tuple_arg" ("_position" fs)))
###                     ("_position" S)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq" ("_position" fs')
###                       ("_MapUpd" ("_position" fs)
###                         ("_maplet" ("_position" F) ("_position" v')))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq" ("_position" S')
###                         ("\<^const>Set.union"
###                           ("\<^const>Groups.minus_class.minus"
###                             ("_position" S)
###                             ("_Finset"
###                               ("_tuple" ("_position" Ds)
###                                 ("_tuple_arg" ("_position" fs)))))
###                           ("_Finset"
###                             ("_tuple" ("_position" Ds)
###                               ("_tuple_arg" ("_position" fs')))))))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" h\<^sub>2')
###                           ("_MapUpd" ("_position" h\<^sub>2)
###                             ("_maplet" ("_position" a)
###                               ("_tuple" ("_position" D)
###                                 ("_tuple_arg"
###                                   ("_position" S')))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v'))
###       ("_tuple" ("_position" h\<^sub>2')
###         ("_tuple_arg" ("_position" l\<^sub>2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###         ("_applC" ("_position" ref)
###           ("_tuple" ("_position" a) ("_tuple_arg" ("_position" Cs'))))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_arg" ("_position" l\<^sub>2)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" D) ("_tuple_arg" ("_position" S))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>SubObj.LeastFieldDecl" ("_position" P)
###               ("_applC" ("_position" last) ("_position" Cs'))
###               ("_position" F) ("_position" T) ("_position" Cs)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###                 ("_position" v) ("_position" v')))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" Ds)
###                   ("\<^const>SubObj.appendPath" ("_position" Cs')
###                     ("_position" Cs))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" Ds)
###                       ("_tuple_arg" ("_position" fs)))
###                     ("_position" S)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq" ("_position" fs')
###                       ("_MapUpd" ("_position" fs)
###                         ("_maplet" ("_position" F) ("_position" v')))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq" ("_position" S')
###                         ("\<^const>Set.union"
###                           ("\<^const>Groups.minus_class.minus"
###                             ("_position" S)
###                             ("_Finset"
###                               ("_tuple" ("_position" Ds)
###                                 ("_tuple_arg" ("_position" fs)))))
###                           ("_Finset"
###                             ("_tuple" ("_position" Ds)
###                               ("_tuple_arg" ("_position" fs')))))))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" h\<^sub>2')
###                           ("_MapUpd" ("_position" h\<^sub>2)
###                             ("_maplet" ("_position" a)
###                               ("_tuple" ("_position" D)
###                                 ("_tuple_arg"
###                                   ("_position" S')))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v'))
###       ("_tuple" ("_position" h\<^sub>2')
###         ("_tuple_arg" ("_position" l\<^sub>2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 130 of "$AFP/CoreC++/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1) ("_position" s\<^sub>0) ("_position" null)
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1) ("_position" s\<^sub>0) ("_position" null)
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 134 of "$AFP/CoreC++/BigStep.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E) ("_position" e\<^sub>1)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E) ("_position" e\<^sub>1)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 138 of "$AFP/CoreC++/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###         ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###           ("_applC" ("_position" throw) ("_position" e'))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###         ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###           ("_applC" ("_position" throw) ("_position" e'))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 62 of "$AFP/CoreC++/WellType.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WT" ("_position" P) ("_position" E) ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SubObj.LeastFieldDecl" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" T) ("_position" Cs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" T))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WT" ("_position" P) ("_position" E) ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SubObj.LeastFieldDecl" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" T) ("_position" Cs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" T))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "WT", "WTs"
  Proving monotonicity ...
### Ignoring duplicate safe introduction (intro!)
### ?P,?E \<turnstile> [] [::] []
### Ignoring duplicate safe introduction (intro!)
### ?P,?E \<turnstile> [] [::] []
Proofs for inductive predicate(s) "eval", "evals"
### Ambiguous input (line 122 of "$AFP/CoreC++/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts)))
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E) ("_position" e)
###       ("\<^const>HOL.conj" ("_position" T)
###         ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###           ("_position" es) ("_position" Ts))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts)))
###     ("\<^const>HOL.conj"
###       ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###         ("_position" e) ("_position" T))
###       ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###         ("_position" es) ("_position" Ts)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 129 of "$AFP/CoreC++/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" Ts))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" U) ("_position" Us))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts)
###           ("\<^const>List.list.Cons" ("_position" U) ("_position" Us)))
###         ("\<^const>HOL.conj"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e) ("_position" U))
###           ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###             ("_position" es) ("_position" Us)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" Ts))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" U) ("_position" Us))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts)
###           ("\<^const>List.list.Cons" ("_position" U) ("_position" Us)))
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e)
###           ("\<^const>HOL.conj" ("_position" U)
###             ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###               ("_position" es) ("_position" Us))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 137 of "$AFP/CoreC++/WellType.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" Ts)
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###         ("\<^const>List.append" ("_position" es\<^sub>1)
###           ("_position" es\<^sub>2))
###         ("_position" Ts))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Ts\<^sub>1) ("_position" Ts\<^sub>2))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" Ts)
###             ("\<^const>List.append" ("_position" Ts\<^sub>1)
###               ("_position" Ts\<^sub>2)))
###           ("\<^const>HOL.conj"
###             ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###               ("_position" es\<^sub>1) ("_position" Ts\<^sub>1))
###             ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###               ("_position" es\<^sub>2) ("_position" Ts\<^sub>2))))))))
### ("\<^const>Pure.all_binder" ("_position" Ts)
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###         ("\<^const>List.append" ("_position" es\<^sub>1)
###           ("_position" es\<^sub>2))
###         ("_position" Ts))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Ts\<^sub>1) ("_position" Ts\<^sub>2))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" Ts)
###             ("\<^const>List.append" ("_position" Ts\<^sub>1)
###               ("_position" Ts\<^sub>2)))
###           ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###             ("_position" es\<^sub>1)
###             ("\<^const>HOL.conj" ("_position" Ts\<^sub>1)
###               ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###                 ("_position" es\<^sub>2) ("_position" Ts\<^sub>2)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 154 of "$AFP/CoreC++/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("_applC" ("_position" Val) ("_position" v)) ("_position" T))
###     ("\<^const>HOL.eq" ("_applC" ("_position" typeof) ("_position" v))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("_applC" ("_position" Val) ("_position" v))
###     ("\<^const>HOL.eq" ("_position" T)
###       ("\<^const>HOL.eq" ("_applC" ("_position" typeof) ("_position" v))
###         ("_applC" ("_position" Some) ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### typeof ?v = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Val ?v :: ?T
### Ignoring duplicate safe introduction (intro!)
### typeof ?v = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Val ?v :: ?T
### Ambiguous input (line 161 of "$AFP/CoreC++/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("_applC" ("_position" Var) ("_position" V)) ("_position" T))
###     ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("_applC" ("_position" Var) ("_position" V))
###     ("\<^const>HOL.eq" ("_position" T)
###       ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###         ("_applC" ("_position" Some) ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### ?E ?V = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Var ?V :: ?T
### Ignoring duplicate safe introduction (intro!)
### ?E ?V = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Var ?V :: ?T
### Ambiguous input (line 168 of "$AFP/CoreC++/WellType.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Seq" ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))
###     ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###       ("\<^const>HOL.conj"
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>1) ("_position" T\<^sub>1))
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" T\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.Seq" ("_position" e\<^sub>1)
###       ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" T\<^sub>2)
###       ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###         ("\<^const>HOL.conj"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>1) ("_position" T\<^sub>1))
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Seq" ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))
###     ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###       ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1)
###         ("\<^const>HOL.conj" ("_position" T\<^sub>1)
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.Seq" ("_position" e\<^sub>1)
###       ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" T\<^sub>2)
###       ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>1)
###           ("\<^const>HOL.conj" ("_position" T\<^sub>1)
###             ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###               ("_position" e\<^sub>2) ("_position" T\<^sub>2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
  Proving monotonicity ...
### Ambiguous input (line 190 of "$AFP/CoreC++/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.LAss"
###       ("\<^const>Expr.expr.FAcc" ("_position" e) ("_position" F)
###         ("_position" Cs))
###       ("_position" v))
###     ("_position" T)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.FAss" ("_position" e) ("_position" F)
###       ("_position" Cs) ("_position" v))
###     ("_position" T)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.WellType"
### 0.675s elapsed time, 1.473s cpu time, 0.098s GC time
### Ambiguous input (line 247 of "$AFP/CoreC++/BigStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BigStep.eval" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.LAss"
###       ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs))
###       ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BigStep.eval" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###       ("_position" Cs) ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.BigStep"
### 2.724s elapsed time, 4.677s cpu time, 0.848s GC time
Loading theory "Draft.Execute" (required by "Draft.ExecuteTemplates")
Proofs for inductive predicate(s) "app"
  Proving monotonicity ...
Proofs for inductive predicate(s) "map_val"
  Proving monotonicity ...
Proofs for inductive predicate(s) "map_val2"
  Proving monotonicity ...
### Ambiguous input (line 136 of "$AFP/CoreC++/Execute.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" class)
###           ("_cargs" ("_position" P) ("_position" C)))
###         ("\<^const>Option.option.Some"
###           ("_tuple" ("_position" Bs) ("_tuple_arg" ("_position" rest))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" Predicate_Compile.contains)
###           ("_cargs" ("_applC" ("_position" set) ("_position" Bs))
###             ("_applC" ("_position" Repeats) ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" subclsRp)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" C) ("_position" D))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" class)
###           ("_cargs" ("_position" P) ("_position" C)))
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_tuple" ("_position" Bs) ("_tuple_arg" ("_position" rest))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" Predicate_Compile.contains)
###           ("_cargs" ("_applC" ("_position" set) ("_position" Bs))
###             ("_applC" ("_position" Repeats) ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" subclsRp)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" C) ("_position" D))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 149 of "$AFP/CoreC++/Execute.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" class)
###           ("_cargs" ("_position" P) ("_position" C)))
###         ("\<^const>Option.option.Some"
###           ("_tuple" ("_position" Bs) ("_tuple_arg" ("_position" rest))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" Predicate_Compile.contains)
###           ("_cargs" ("_applC" ("_position" set) ("_position" Bs))
###             ("_applC" ("_position" Shares) ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" subclsSp)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" C) ("_position" D))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" class)
###           ("_cargs" ("_position" P) ("_position" C)))
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_tuple" ("_position" Bs) ("_tuple_arg" ("_position" rest))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" Predicate_Compile.contains)
###           ("_cargs" ("_applC" ("_position" set) ("_position" Bs))
###             ("_applC" ("_position" Shares) ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" subclsSp)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" C) ("_position" D))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Introduced fixed type variable(s): 'a in "xu" or "z"
### Introduced fixed type variable(s): 'a in "res" or "xu" or "z"
### Ambiguous input (line 211 of "$AFP/CoreC++/Execute.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>SubObj.leq_path" ("_position" P) ("_position" C)
###       ("_position" Cs) ("_position" Ds))
###     ("_applC"
###       ("\<^const>Transitive_Closure.rtranclp"
###         ("_applC" ("_position" leq_path1p)
###           ("_cargs" ("_position" P) ("_position" C))))
###       ("_cargs" ("_position" Cs) ("_position" Ds)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SubObj.leq_path" ("_position" P) ("_position" C)
###     ("_position" Cs)
###     ("\<^const>HOL.iff" ("_position" Ds)
###       ("_applC"
###         ("\<^const>Transitive_Closure.rtranclp"
###           ("_applC" ("_position" leq_path1p)
###             ("_cargs" ("_position" P) ("_position" C))))
###         ("_cargs" ("_position" Cs) ("_position" Ds))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 238 of "$AFP/CoreC++/Execute.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Subobjs)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" C) ("_position" Cs)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" class)
###           ("_cargs" ("_position" P)
###             ("_applC" ("_position" last) ("_position" Cs))))
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_tuple" ("_position" Bs)
###             ("_tuple_args" ("_position" fs)
###               ("_tuple_arg" ("_position" ms)))))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" map_of)
###             ("_cargs" ("_position" ms) ("_position" M)))
###           ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###             ("_position" mthd))))
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" MethodDefs')
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C)
###               ("_cargs" ("_position" M)
###                 ("_cargs" ("_position" Cs) ("_position" mthd))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Subobjs)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" C) ("_position" Cs)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" class)
###           ("_cargs" ("_position" P)
###             ("_applC" ("_position" last) ("_position" Cs))))
###         ("\<^const>Option.option.Some"
###           ("_tuple" ("_position" Bs)
###             ("_tuple_args" ("_position" fs)
###               ("_tuple_arg" ("_position" ms)))))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" map_of)
###             ("_cargs" ("_position" ms) ("_position" M)))
###           ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###             ("_position" mthd))))
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" MethodDefs')
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C)
###               ("_cargs" ("_position" M)
###                 ("_cargs" ("_position" Cs) ("_position" mthd))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Subobjs)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" C) ("_position" Cs)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" class)
###           ("_cargs" ("_position" P)
###             ("_applC" ("_position" last) ("_position" Cs))))
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_tuple" ("_position" Bs)
###             ("_tuple_args" ("_position" fs)
###               ("_tuple_arg" ("_position" ms)))))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" map_of)
###             ("_cargs" ("_position" ms) ("_position" M)))
###           ("\<^const>Option.option.Some" ("_position" mthd))))
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" MethodDefs')
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C)
###               ("_cargs" ("_position" M)
###                 ("_cargs" ("_position" Cs) ("_position" mthd))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Subobjs)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" C) ("_position" Cs)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" class)
###           ("_cargs" ("_position" P)
###             ("_applC" ("_position" last) ("_position" Cs))))
###         ("\<^const>Option.option.Some"
###           ("_tuple" ("_position" Bs)
###             ("_tuple_args" ("_position" fs)
###               ("_tuple_arg" ("_position" ms)))))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" map_of)
###             ("_cargs" ("_position" ms) ("_position" M)))
###           ("\<^const>Option.option.Some" ("_position" mthd))))
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" MethodDefs')
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C)
###               ("_cargs" ("_position" M)
###                 ("_cargs" ("_position" Cs) ("_position" mthd))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 252 of "$AFP/CoreC++/Execute.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Subobjs)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" C) ("_position" Cs)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" class)
###           ("_cargs" ("_position" P)
###             ("_applC" ("_position" last) ("_position" Cs))))
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_tuple" ("_position" Bs)
###             ("_tuple_args" ("_position" fs)
###               ("_tuple_arg" ("_position" ms)))))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" map_of)
###             ("_cargs" ("_position" fs) ("_position" F)))
###           ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###             ("_position" T))))
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" FieldDecls')
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C)
###               ("_cargs" ("_position" F)
###                 ("_cargs" ("_position" Cs) ("_position" T))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Subobjs)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" C) ("_position" Cs)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" class)
###           ("_cargs" ("_position" P)
###             ("_applC" ("_position" last) ("_position" Cs))))
###         ("\<^const>Option.option.Some"
###           ("_tuple" ("_position" Bs)
###             ("_tuple_args" ("_position" fs)
###               ("_tuple_arg" ("_position" ms)))))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" map_of)
###             ("_cargs" ("_position" fs) ("_position" F)))
###           ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###             ("_position" T))))
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" FieldDecls')
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C)
###               ("_cargs" ("_position" F)
###                 ("_cargs" ("_position" Cs) ("_position" T))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Subobjs)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" C) ("_position" Cs)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" class)
###           ("_cargs" ("_position" P)
###             ("_applC" ("_position" last) ("_position" Cs))))
###         ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###           ("_tuple" ("_position" Bs)
###             ("_tuple_args" ("_position" fs)
###               ("_tuple_arg" ("_position" ms)))))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" map_of)
###             ("_cargs" ("_position" fs) ("_position" F)))
###           ("\<^const>Option.option.Some" ("_position" T))))
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" FieldDecls')
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C)
###               ("_cargs" ("_position" F)
###                 ("_cargs" ("_position" Cs) ("_position" T))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Subobjs)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" C) ("_position" Cs)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" class)
###           ("_cargs" ("_position" P)
###             ("_applC" ("_position" last) ("_position" Cs))))
###         ("\<^const>Option.option.Some"
###           ("_tuple" ("_position" Bs)
###             ("_tuple_args" ("_position" fs)
###               ("_tuple_arg" ("_position" ms)))))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" map_of)
###             ("_cargs" ("_position" fs) ("_position" F)))
###           ("\<^const>Option.option.Some" ("_position" T))))
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" FieldDecls')
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C)
###               ("_cargs" ("_position" F)
###                 ("_cargs" ("_position" Cs) ("_position" T))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Replacing higher order arguments is not applied in an undestructable product type
### Replacing higher order arguments is not applied in an undestructable product type
### Replacing higher order arguments is not applied in an undestructable product type
### Replacing higher order arguments is not applied in an undestructable product type
### Replacing higher order arguments is not applied in an undestructable product type
### Replacing higher order arguments is not applied in an undestructable product type
### Ambiguous input (line 677 of "$AFP/CoreC++/Execute.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###         ("_applC" ("_position" ref)
###           ("_tuple" ("_position" a) ("_tuple_arg" ("_position" Cs'))))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_arg" ("_position" l\<^sub>2)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" D) ("_tuple_arg" ("_position" S))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>SubObj.LeastFieldDecl" ("_position" P)
###               ("_applC" ("_position" last) ("_position" Cs'))
###               ("_position" F) ("_position" T) ("_position" Cs)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###                 ("_position" v) ("_position" v')))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" Ds)
###                   ("\<^const>SubObj.appendPath" ("_position" Cs')
###                     ("_position" Cs))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" Predicate_Compile.contains)
###                     ("_cargs"
###                       ("_applC" ("_position" Set_project)
###                         ("_cargs" ("_position" S) ("_position" Ds)))
###                       ("_position" fs))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq" ("_position" fs')
###                       ("_applC" ("_position" Mapping.update)
###                         ("_cargs" ("_position" F)
###                           ("_cargs" ("_position" v') ("_position" fs))))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq" ("_position" S')
###                         ("\<^const>Set.union"
###                           ("\<^const>Groups.minus_class.minus"
###                             ("_position" S)
###                             ("_Finset"
###                               ("_tuple" ("_position" Ds)
###                                 ("_tuple_arg" ("_position" fs)))))
###                           ("_Finset"
###                             ("_tuple" ("_position" Ds)
###                               ("_tuple_arg" ("_position" fs')))))))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" h\<^sub>2')
###                           ("_MapUpd" ("_position" h\<^sub>2)
###                             ("_maplet" ("_position" a)
###                               ("_tuple" ("_position" D)
###                                 ("_tuple_arg"
###                                   ("_position" S')))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v'))
###       ("_tuple" ("_position" h\<^sub>2')
###         ("_tuple_arg" ("_position" l\<^sub>2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###         ("_applC" ("_position" ref)
###           ("_tuple" ("_position" a) ("_tuple_arg" ("_position" Cs'))))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_arg" ("_position" l\<^sub>2)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" D) ("_tuple_arg" ("_position" S))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>SubObj.LeastFieldDecl" ("_position" P)
###               ("_applC" ("_position" last) ("_position" Cs'))
###               ("_position" F) ("_position" T) ("_position" Cs)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###                 ("_position" v) ("_position" v')))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" Ds)
###                   ("\<^const>SubObj.appendPath" ("_position" Cs')
###                     ("_position" Cs))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" Predicate_Compile.contains)
###                     ("_cargs"
###                       ("_applC" ("_position" Set_project)
###                         ("_cargs" ("_position" S) ("_position" Ds)))
###                       ("_position" fs))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq" ("_position" fs')
###                       ("_applC" ("_position" Mapping.update)
###                         ("_cargs" ("_position" F)
###                           ("_cargs" ("_position" v') ("_position" fs))))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq" ("_position" S')
###                         ("\<^const>Set.union"
###                           ("\<^const>Groups.minus_class.minus"
###                             ("_position" S)
###                             ("_Finset"
###                               ("_tuple" ("_position" Ds)
###                                 ("_tuple_arg" ("_position" fs)))))
###                           ("_Finset"
###                             ("_tuple" ("_position" Ds)
###                               ("_tuple_arg" ("_position" fs')))))))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" h\<^sub>2')
###                           ("_MapUpd" ("_position" h\<^sub>2)
###                             ("_maplet" ("_position" a)
###                               ("_tuple" ("_position" D)
###                                 ("_tuple_arg"
###                                   ("_position" S')))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v'))
###       ("_tuple" ("_position" h\<^sub>2')
###         ("_tuple_arg" ("_position" l\<^sub>2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 686 of "$AFP/CoreC++/Execute.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1) ("_position" s\<^sub>0) ("_position" null)
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1) ("_position" s\<^sub>0) ("_position" null)
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 691 of "$AFP/CoreC++/Execute.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###       ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###       ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 696 of "$AFP/CoreC++/Execute.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###         ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###           ("_applC" ("_position" throw) ("_position" e'))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###         ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###           ("_applC" ("_position" throw) ("_position" e'))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 755 of "$AFP/CoreC++/Execute.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Execute.eval'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e\<^sub>0)
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg"
###             ("_applC" ("_position" l\<^sub>0)
###               ("\<^const>Expr.expr.LAss" ("_position" V)
###                 ("_position" None)))))
###         ("_position" e\<^sub>1)
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_arg" ("_position" l\<^sub>1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg" ("_position" l\<^sub>0)))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg"
###           ("_applC" ("_position" l\<^sub>1)
###             ("\<^const>Expr.expr.LAss" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Execute.eval'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e\<^sub>0)
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg"
###             ("_Update" ("_position" l\<^sub>0)
###               ("_updbind" ("_position" V) ("_position" None)))))
###         ("_position" e\<^sub>1)
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_arg" ("_position" l\<^sub>1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg" ("_position" l\<^sub>0)))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg"
###           ("_applC" ("_position" l\<^sub>1)
###             ("\<^const>Expr.expr.LAss" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Execute.eval'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e\<^sub>0)
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg"
###             ("_applC" ("_position" l\<^sub>0)
###               ("\<^const>Expr.expr.LAss" ("_position" V)
###                 ("_position" None)))))
###         ("_position" e\<^sub>1)
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_arg" ("_position" l\<^sub>1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg" ("_position" l\<^sub>0)))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg"
###           ("_Update" ("_position" l\<^sub>1)
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Execute.eval'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e\<^sub>0)
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg"
###             ("_Update" ("_position" l\<^sub>0)
###               ("_updbind" ("_position" V) ("_position" None)))))
###         ("_position" e\<^sub>1)
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_arg" ("_position" l\<^sub>1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg" ("_position" l\<^sub>0)))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg"
###           ("_Update" ("_position" l\<^sub>1)
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 854 of "$AFP/CoreC++/Execute.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" h)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" h')
###         ("_idts" ("_position" C)
###           ("_idts" ("_position" E) ("_position" l))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("_applC" ("_position" new) ("_position" C))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z)
###             ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u)
###               ("_applC" ("_position" ref)
###                 ("_tuple" ("_position" a)
###                   ("_tuple_arg" ("_list" ("_position" C)))))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v)
###                 ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l)))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" new_Addr') ("_position" h))
###                   ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                     ("_position" a))))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" h')
###                     ("_MapUpd" ("_position" h)
###                       ("_maplet" ("_position" a)
###                         ("_applC" ("_position" blank')
###                           ("_cargs" ("_position" P) ("_position" C)))))))
###                 ("\<^const>HOL.Trueprop" ("_position" thesis))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" h)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" h')
###         ("_idts" ("_position" C)
###           ("_idts" ("_position" E) ("_position" l))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("_applC" ("_position" new) ("_position" C))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z)
###             ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u)
###               ("_applC" ("_position" ref)
###                 ("_tuple" ("_position" a)
###                   ("_tuple_arg" ("_list" ("_position" C)))))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v)
###                 ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l)))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" new_Addr') ("_position" h))
###                   ("\<^const>Option.option.Some" ("_position" a))))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" h')
###                     ("_MapUpd" ("_position" h)
###                       ("_maplet" ("_position" a)
###                         ("_applC" ("_position" blank')
###                           ("_cargs" ("_position" P) ("_position" C)))))))
###                 ("\<^const>HOL.Trueprop" ("_position" thesis))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 876 of "$AFP/CoreC++/Execute.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" e)
###       ("_idts" ("_position" s\<^sub>0)
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" Cs)
###             ("_idts" ("_position" h)
###               ("_idts" ("_position" l)
###                 ("_idts" ("_position" D)
###                   ("_idts" ("_position" S)
###                     ("_idts" ("_position" C) ("_position" Cs')))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("_applC" ("_position" Cast)
###             ("_cargs" ("_position" C) ("_position" e)))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s\<^sub>0)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u)
###               ("_applC" ("_position" ref)
###                 ("_tuple" ("_position" a)
###                   ("_tuple_arg" ("_position" Cs'))))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v)
###                 ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                   ("_position" e) ("_position" s\<^sub>0)
###                   ("_applC" ("_position" ref)
###                     ("_tuple" ("_position" a)
###                       ("_tuple_arg" ("_position" Cs))))
###                   ("_tuple" ("_position" h)
###                     ("_tuple_arg" ("_position" l)))))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" h) ("_position" a))
###                     ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                       ("_tuple" ("_position" D)
###                         ("_tuple_arg" ("_position" S))))))
###                 ("\<^const>Pure.imp"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>SubObj.path_via" ("_position" P)
###                       ("_position" D) ("_position" C) ("_position" Cs')))
###                   ("\<^const>Pure.imp"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>SubObj.path_unique" ("_position" P)
###                         ("_position" D) ("_position" C)))
###                     ("\<^const>HOL.Trueprop" ("_position" thesis))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" e)
###       ("_idts" ("_position" s\<^sub>0)
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" Cs)
###             ("_idts" ("_position" h)
###               ("_idts" ("_position" l)
###                 ("_idts" ("_position" D)
###                   ("_idts" ("_position" S)
###                     ("_idts" ("_position" C) ("_position" Cs')))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("_applC" ("_position" Cast)
###             ("_cargs" ("_position" C) ("_position" e)))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s\<^sub>0)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u)
###               ("_applC" ("_position" ref)
###                 ("_tuple" ("_position" a)
###                   ("_tuple_arg" ("_position" Cs'))))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v)
###                 ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                   ("_position" e) ("_position" s\<^sub>0)
###                   ("_applC" ("_position" ref)
###                     ("_tuple" ("_position" a)
###                       ("_tuple_arg" ("_position" Cs))))
###                   ("_tuple" ("_position" h)
###                     ("_tuple_arg" ("_position" l)))))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" h) ("_position" a))
###                     ("\<^const>Option.option.Some"
###                       ("_tuple" ("_position" D)
###                         ("_tuple_arg" ("_position" S))))))
###                 ("\<^const>Pure.imp"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>SubObj.path_via" ("_position" P)
###                       ("_position" D) ("_position" C) ("_position" Cs')))
###                   ("\<^const>Pure.imp"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>SubObj.path_unique" ("_position" P)
###                         ("_position" D) ("_position" C)))
###                     ("\<^const>HOL.Trueprop" ("_position" thesis))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 881 of "$AFP/CoreC++/Execute.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" e)
###       ("_idts" ("_position" s\<^sub>0)
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" Cs)
###             ("_idts" ("_position" h)
###               ("_idts" ("_position" l)
###                 ("_idts" ("_position" D)
###                   ("_idts" ("_position" S) ("_position" C))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("_applC" ("_position" Cast)
###             ("_cargs" ("_position" C) ("_position" e)))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s\<^sub>0)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u) ("_position" null)))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v)
###                 ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                   ("_position" e) ("_position" s\<^sub>0)
###                   ("_applC" ("_position" ref)
###                     ("_tuple" ("_position" a)
###                       ("_tuple_arg" ("_position" Cs))))
###                   ("_tuple" ("_position" h)
###                     ("_tuple_arg" ("_position" l)))))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" h) ("_position" a))
###                     ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                       ("_tuple" ("_position" D)
###                         ("_tuple_arg" ("_position" S))))))
###                 ("\<^const>Pure.imp"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.Not"
###                       ("\<^const>SubObj.path_unique" ("_position" P)
###                         ("_position" D) ("_position" C))))
###                   ("\<^const>Pure.imp"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.Not"
###                         ("\<^const>SubObj.path_unique" ("_position" P)
###                           ("_applC" ("_position" last) ("_position" Cs))
###                           ("_position" C))))
###                     ("\<^const>Pure.imp"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Set.not_member" ("_position" C)
###                           ("_applC" ("_position" set) ("_position" Cs))))
###                       ("\<^const>HOL.Trueprop"
###                         ("_position" thesis)))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" e)
###       ("_idts" ("_position" s\<^sub>0)
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" Cs)
###             ("_idts" ("_position" h)
###               ("_idts" ("_position" l)
###                 ("_idts" ("_position" D)
###                   ("_idts" ("_position" S) ("_position" C))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("_applC" ("_position" Cast)
###             ("_cargs" ("_position" C) ("_position" e)))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s\<^sub>0)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u) ("_position" null)))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v)
###                 ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                   ("_position" e) ("_position" s\<^sub>0)
###                   ("_applC" ("_position" ref)
###                     ("_tuple" ("_position" a)
###                       ("_tuple_arg" ("_position" Cs))))
###                   ("_tuple" ("_position" h)
###                     ("_tuple_arg" ("_position" l)))))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" h) ("_position" a))
###                     ("\<^const>Option.option.Some"
###                       ("_tuple" ("_position" D)
###                         ("_tuple_arg" ("_position" S))))))
###                 ("\<^const>Pure.imp"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.Not"
###                       ("\<^const>SubObj.path_unique" ("_position" P)
###                         ("_position" D) ("_position" C))))
###                   ("\<^const>Pure.imp"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.Not"
###                         ("\<^const>SubObj.path_unique" ("_position" P)
###                           ("_applC" ("_position" last) ("_position" Cs))
###                           ("_position" C))))
###                     ("\<^const>Pure.imp"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Set.not_member" ("_position" C)
###                           ("_applC" ("_position" set) ("_position" Cs))))
###                       ("\<^const>HOL.Trueprop"
###                         ("_position" thesis)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 887 of "$AFP/CoreC++/Execute.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" e\<^sub>1)
###       ("_idts" ("_position" s\<^sub>0)
###         ("_idts" ("_position" v\<^sub>1)
###           ("_idts" ("_position" s\<^sub>1)
###             ("_idts" ("_position" e\<^sub>2)
###               ("_idts" ("_position" v\<^sub>2)
###                 ("_idts" ("_position" s\<^sub>2)
###                   ("_idts" ("_position" bop) ("_position" va))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Expr.expr.BinOp" ("_position" e\<^sub>1)
###             ("_position" bop) ("_position" e\<^sub>2))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s\<^sub>0)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u)
###               ("_applC" ("_position" Val) ("_position" va))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v) ("_position" s\<^sub>2)))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                   ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###                   ("_applC" ("_position" Val) ("_position" v\<^sub>1))
###                   ("_position" s\<^sub>1)))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                     ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###                     ("_applC" ("_position" Val) ("_position" v\<^sub>2))
###                     ("_position" s\<^sub>2)))
###                 ("\<^const>Pure.imp"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" binop)
###                         ("_tuple" ("_position" bop)
###                           ("_tuple_args" ("_position" v\<^sub>1)
###                             ("_tuple_arg" ("_position" v\<^sub>2)))))
###                       ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                         ("_position" va))))
###                   ("\<^const>HOL.Trueprop" ("_position" thesis)))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" e\<^sub>1)
###       ("_idts" ("_position" s\<^sub>0)
###         ("_idts" ("_position" v\<^sub>1)
###           ("_idts" ("_position" s\<^sub>1)
###             ("_idts" ("_position" e\<^sub>2)
###               ("_idts" ("_position" v\<^sub>2)
###                 ("_idts" ("_position" s\<^sub>2)
###                   ("_idts" ("_position" bop) ("_position" va))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Expr.expr.BinOp" ("_position" e\<^sub>1)
###             ("_position" bop) ("_position" e\<^sub>2))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s\<^sub>0)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u)
###               ("_applC" ("_position" Val) ("_position" va))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v) ("_position" s\<^sub>2)))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                   ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###                   ("_applC" ("_position" Val) ("_position" v\<^sub>1))
###                   ("_position" s\<^sub>1)))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                     ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###                     ("_applC" ("_position" Val) ("_position" v\<^sub>2))
###                     ("_position" s\<^sub>2)))
###                 ("\<^const>Pure.imp"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" binop)
###                         ("_tuple" ("_position" bop)
###                           ("_tuple_args" ("_position" v\<^sub>1)
###                             ("_tuple_arg" ("_position" v\<^sub>2)))))
###                       ("\<^const>Option.option.Some" ("_position" va))))
###                   ("\<^const>HOL.Trueprop" ("_position" thesis)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 894 of "$AFP/CoreC++/Execute.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" l)
###     ("_idts" ("_position" V)
###       ("_idts" ("_position" va) ("_idts" ("_position" E) ("_position" h)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("_applC" ("_position" Var) ("_position" V))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z)
###             ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u)
###               ("_applC" ("_position" Val) ("_position" va))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v)
###                 ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" l) ("_position" V))
###                   ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                     ("_position" va))))
###               ("\<^const>HOL.Trueprop" ("_position" thesis)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" l)
###     ("_idts" ("_position" V)
###       ("_idts" ("_position" va) ("_idts" ("_position" E) ("_position" h)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("_applC" ("_position" Var) ("_position" V))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z)
###             ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u)
###               ("_applC" ("_position" Val) ("_position" va))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v)
###                 ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" l) ("_position" V))
###                   ("\<^const>Option.option.Some" ("_position" va))))
###               ("\<^const>HOL.Trueprop" ("_position" thesis)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 896 of "$AFP/CoreC++/Execute.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" e)
###       ("_idts" ("_position" s\<^sub>0)
###         ("_idts" ("_position" va)
###           ("_idts" ("_position" h)
###             ("_idts" ("_position" l)
###               ("_idts" ("_position" V)
###                 ("_idts" ("_position" T)
###                   ("_idts" ("_position" v') ("_position" l'))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Expr.expr.LAss" ("_position" V) ("_position" e))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s\<^sub>0)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u)
###               ("_applC" ("_position" Val) ("_position" v'))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v)
###                 ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l')))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                   ("_position" e) ("_position" s\<^sub>0)
###                   ("_applC" ("_position" Val) ("_position" va))
###                   ("_tuple" ("_position" h)
###                     ("_tuple_arg" ("_position" l)))))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" E) ("_position" V))
###                     ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                       ("_position" T))))
###                 ("\<^const>Pure.imp"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>SubObj.casts_to" ("_position" P)
###                       ("_position" T) ("_position" va) ("_position" v')))
###                   ("\<^const>Pure.imp"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq" ("_position" l')
###                         ("_MapUpd" ("_position" l)
###                           ("_maplet" ("_position" V) ("_position" v')))))
###                     ("\<^const>HOL.Trueprop" ("_position" thesis))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" e)
###       ("_idts" ("_position" s\<^sub>0)
###         ("_idts" ("_position" va)
###           ("_idts" ("_position" h)
###             ("_idts" ("_position" l)
###               ("_idts" ("_position" V)
###                 ("_idts" ("_position" T)
###                   ("_idts" ("_position" v') ("_position" l'))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Expr.expr.LAss" ("_position" V) ("_position" e))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s\<^sub>0)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u)
###               ("_applC" ("_position" Val) ("_position" v'))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v)
###                 ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l')))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                   ("_position" e) ("_position" s\<^sub>0)
###                   ("_applC" ("_position" Val) ("_position" va))
###                   ("_tuple" ("_position" h)
###                     ("_tuple_arg" ("_position" l)))))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" E) ("_position" V))
###                     ("\<^const>Option.option.Some" ("_position" T))))
###                 ("\<^const>Pure.imp"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>SubObj.casts_to" ("_position" P)
###                       ("_position" T) ("_position" va) ("_position" v')))
###                   ("\<^const>Pure.imp"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq" ("_position" l')
###                         ("_MapUpd" ("_position" l)
###                           ("_maplet" ("_position" V) ("_position" v')))))
###                     ("\<^const>HOL.Trueprop" ("_position" thesis))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 901 of "$AFP/CoreC++/Execute.thy") produces 8 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" e)
###       ("_idts" ("_position" s\<^sub>0)
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" Cs')
###             ("_idts" ("_position" h)
###               ("_idts" ("_position" l)
###                 ("_idts" ("_position" D)
###                   ("_idts" ("_position" S)
###                     ("_idts" ("_position" Ds)
###                       ("_idts" ("_position" Cs)
###                         ("_idts" ("_position" fs)
###                           ("_idts" ("_position" F)
###                             ("_position" va))))))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Expr.expr.FAcc" ("_position" e) ("_position" F)
###             ("_position" Cs))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s\<^sub>0)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u)
###               ("_applC" ("_position" Val) ("_position" va))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v)
###                 ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                   ("_position" e) ("_position" s\<^sub>0)
###                   ("_applC" ("_position" ref)
###                     ("_tuple" ("_position" a)
###                       ("_tuple_arg" ("_position" Cs'))))
###                   ("_tuple" ("_position" h)
###                     ("_tuple_arg" ("_position" l)))))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" h) ("_position" a))
###                     ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                       ("_tuple" ("_position" D)
###                         ("_tuple_arg" ("_position" S))))))
###                 ("\<^const>Pure.imp"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq" ("_position" Ds)
###                       ("\<^const>SubObj.appendPath" ("_position" Cs')
###                         ("_position" Cs))))
###                   ("\<^const>Pure.imp"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Set.member"
###                         ("_tuple" ("_position" Ds)
###                           ("_tuple_arg" ("_position" fs)))
###                         ("_position" S)))
###                     ("\<^const>Pure.imp"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" Mapping.lookup)
###                             ("_cargs" ("_position" fs) ("_position" F)))
###                           ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                             ("_position" va))))
###                       ("\<^const>HOL.Trueprop"
###                         ("_position" thesis)))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" e)
###       ("_idts" ("_position" s\<^sub>0)
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" Cs')
###             ("_idts" ("_position" h)
###               ("_idts" ("_position" l)
###                 ("_idts" ("_position" D)
###                   ("_idts" ("_position" S)
###                     ("_idts" ("_position" Ds)
###                       ("_idts" ("_position" Cs)
###                         ("_idts" ("_position" fs)
###                           ("_idts" ("_position" F)
###                             ("_position" va))))))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Expr.expr.FAcc"
###           ("\<^const>HOL.eq" ("_position" y) ("_position" e))
###           ("_position" F) ("_position" Cs)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s\<^sub>0)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u)
###               ("_applC" ("_position" Val) ("_position" va))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v)
###                 ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                   ("_position" e) ("_position" s\<^sub>0)
###                   ("_applC" ("_position" ref)
###                     ("_tuple" ("_position" a)
###                       ("_tuple_arg" ("_position" Cs'))))
###                   ("_tuple" ("_position" h)
###                     ("_tuple_arg" ("_position" l)))))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" h) ("_position" a))
###                     ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                       ("_tuple" ("_position" D)
###                         ("_tuple_arg" ("_position" S))))))
###                 ("\<^const>Pure.imp"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq" ("_position" Ds)
###                       ("\<^const>SubObj.appendPath" ("_position" Cs')
###                         ("_position" Cs))))
###                   ("\<^const>Pure.imp"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Set.member"
###                         ("_tuple" ("_position" Ds)
###                           ("_tuple_arg" ("_position" fs)))
###                         ("_position" S)))
###                     ("\<^const>Pure.imp"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" Mapping.lookup)
###                             ("_cargs" ("_position" fs) ("_position" F)))
###                           ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                             ("_position" va))))
###                       ("\<^const>HOL.Trueprop"
###                         ("_position" thesis)))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" e)
###       ("_idts" ("_position" s\<^sub>0)
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" Cs')
###             ("_idts" ("_position" h)
###               ("_idts" ("_position" l)
###                 ("_idts" ("_position" D)
###                   ("_idts" ("_position" S)
###                     ("_idts" ("_position" Ds)
###                       ("_idts" ("_position" Cs)
###                         ("_idts" ("_position" fs)
###                           ("_idts" ("_position" F)
###                             ("_position" va))))))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Expr.expr.FAcc" ("_position" e) ("_position" F)
###             ("_position" Cs))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s\<^sub>0)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u)
###               ("_applC" ("_position" Val) ("_position" va))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v)
###                 ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                   ("_position" e) ("_position" s\<^sub>0)
###                   ("_applC" ("_position" ref)
###                     ("_tuple" ("_position" a)
###                       ("_tuple_arg" ("_position" Cs'))))
###                   ("_tuple" ("_position" h)
###                     ("_tuple_arg" ("_position" l)))))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" h) ("_position" a))
###                     ("\<^const>Option.option.Some"
###                       ("_tuple" ("_position" D)
###                         ("_tuple_arg" ("_position" S))))))
###                 ("\<^const>Pure.imp"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq" ("_position" Ds)
###                       ("\<^const>SubObj.appendPath" ("_position" Cs')
###                         ("_position" Cs))))
###                   ("\<^const>Pure.imp"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Set.member"
###                         ("_tuple" ("_position" Ds)
###                           ("_tuple_arg" ("_position" fs)))
###                         ("_position" S)))
###                     ("\<^const>Pure.imp"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" Mapping.lookup)
###                             ("_cargs" ("_position" fs) ("_position" F)))
###                           ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                             ("_position" va))))
###                       ("\<^const>HOL.Trueprop"
###                         ("_position" thesis)))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" e)
###       ("_idts" ("_position" s\<^sub>0)
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" Cs')
###             ("_idts" ("_position" h)
###               ("_idts" ("_position" l)
###                 ("_idts" ("_position" D)
###                   ("_idts" ("_position" S)
###                     ("_idts" ("_position" Ds)
###                       ("_idts" ("_position" Cs)
###                         ("_idts" ("_position" fs)
###                           ("_idts" ("_position" F)
###                             ("_position" va))))))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Expr.expr.FAcc"
###           ("\<^const>HOL.eq" ("_position" y) ("_position" e))
###           ("_position" F) ("_position" Cs)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s\<^sub>0)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u)
###               ("_applC" ("_position" Val) ("_position" va))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v)
###                 ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                   ("_position" e) ("_position" s\<^sub>0)
###                   ("_applC" ("_position" ref)
###                     ("_tuple" ("_position" a)
###                       ("_tuple_arg" ("_position" Cs'))))
###                   ("_tuple" ("_position" h)
###                     ("_tuple_arg" ("_position" l)))))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" h) ("_position" a))
###                     ("\<^const>Option.option.Some"
###                       ("_tuple" ("_position" D)
###                         ("_tuple_arg" ("_position" S))))))
###                 ("\<^const>Pure.imp"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq" ("_position" Ds)
###                       ("\<^const>SubObj.appendPath" ("_position" Cs')
###                         ("_position" Cs))))
###                   ("\<^const>Pure.imp"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Set.member"
###                         ("_tuple" ("_position" Ds)
###                           ("_tuple_arg" ("_position" fs)))
###                         ("_position" S)))
###                     ("\<^const>Pure.imp"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" Mapping.lookup)
###                             ("_cargs" ("_position" fs) ("_position" F)))
###                           ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                             ("_position" va))))
###                       ("\<^const>HOL.Trueprop"
###                         ("_position" thesis)))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" e)
###       ("_idts" ("_position" s\<^sub>0)
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" Cs')
###             ("_idts" ("_position" h)
###               ("_idts" ("_position" l)
###                 ("_idts" ("_position" D)
###                   ("_idts" ("_position" S)
###                     ("_idts" ("_position" Ds)
###                       ("_idts" ("_position" Cs)
###                         ("_idts" ("_position" fs)
###                           ("_idts" ("_position" F)
###                             ("_position" va))))))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Expr.expr.FAcc" ("_position" e) ("_position" F)
###             ("_position" Cs))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s\<^sub>0)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u)
###               ("_applC" ("_position" Val) ("_position" va))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v)
###                 ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                   ("_position" e) ("_position" s\<^sub>0)
###                   ("_applC" ("_position" ref)
###                     ("_tuple" ("_position" a)
###                       ("_tuple_arg" ("_position" Cs'))))
###                   ("_tuple" ("_position" h)
###                     ("_tuple_arg" ("_position" l)))))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" h) ("_position" a))
###                     ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                       ("_tuple" ("_position" D)
###                         ("_tuple_arg" ("_position" S))))))
###                 ("\<^const>Pure.imp"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq" ("_position" Ds)
###                       ("\<^const>SubObj.appendPath" ("_position" Cs')
###                         ("_position" Cs))))
###                   ("\<^const>Pure.imp"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Set.member"
###                         ("_tuple" ("_position" Ds)
###                           ("_tuple_arg" ("_position" fs)))
###                         ("_position" S)))
###                     ("\<^const>Pure.imp"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" Mapping.lookup)
###                             ("_cargs" ("_position" fs) ("_position" F)))
###                           ("\<^const>Option.option.Some" ("_position" va))))
###                       ("\<^const>HOL.Trueprop"
###                         ("_position" thesis)))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" e)
###       ("_idts" ("_position" s\<^sub>0)
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" Cs')
###             ("_idts" ("_position" h)
###               ("_idts" ("_position" l)
###                 ("_idts" ("_position" D)
###                   ("_idts" ("_position" S)
###                     ("_idts" ("_position" Ds)
###                       ("_idts" ("_position" Cs)
###                         ("_idts" ("_position" fs)
###                           ("_idts" ("_position" F)
###                             ("_position" va))))))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Expr.expr.FAcc"
###           ("\<^const>HOL.eq" ("_position" y) ("_position" e))
###           ("_position" F) ("_position" Cs)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s\<^sub>0)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u)
###               ("_applC" ("_position" Val) ("_position" va))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v)
###                 ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                   ("_position" e) ("_position" s\<^sub>0)
###                   ("_applC" ("_position" ref)
###                     ("_tuple" ("_position" a)
###                       ("_tuple_arg" ("_position" Cs'))))
###                   ("_tuple" ("_position" h)
###                     ("_tuple_arg" ("_position" l)))))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" h) ("_position" a))
###                     ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                       ("_tuple" ("_position" D)
###                         ("_tuple_arg" ("_position" S))))))
###                 ("\<^const>Pure.imp"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq" ("_position" Ds)
###                       ("\<^const>SubObj.appendPath" ("_position" Cs')
###                         ("_position" Cs))))
###                   ("\<^const>Pure.imp"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Set.member"
###                         ("_tuple" ("_position" Ds)
###                           ("_tuple_arg" ("_position" fs)))
###                         ("_position" S)))
###                     ("\<^const>Pure.imp"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" Mapping.lookup)
###                             ("_cargs" ("_position" fs) ("_position" F)))
###                           ("\<^const>Option.option.Some" ("_position" va))))
###                       ("\<^const>HOL.Trueprop"
###                         ("_position" thesis)))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" e)
###       ("_idts" ("_position" s\<^sub>0)
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" Cs')
###             ("_idts" ("_position" h)
###               ("_idts" ("_position" l)
###                 ("_idts" ("_position" D)
###                   ("_idts" ("_position" S)
###                     ("_idts" ("_position" Ds)
###                       ("_idts" ("_position" Cs)
###                         ("_idts" ("_position" fs)
###                           ("_idts" ("_position" F)
###                             ("_position" va))))))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Expr.expr.FAcc" ("_position" e) ("_position" F)
###             ("_position" Cs))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s\<^sub>0)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u)
###               ("_applC" ("_position" Val) ("_position" va))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v)
###                 ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                   ("_position" e) ("_position" s\<^sub>0)
###                   ("_applC" ("_position" ref)
###                     ("_tuple" ("_position" a)
###                       ("_tuple_arg" ("_position" Cs'))))
###                   ("_tuple" ("_position" h)
###                     ("_tuple_arg" ("_position" l)))))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" h) ("_position" a))
###                     ("\<^const>Option.option.Some"
###                       ("_tuple" ("_position" D)
###                         ("_tuple_arg" ("_position" S))))))
###                 ("\<^const>Pure.imp"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq" ("_position" Ds)
###                       ("\<^const>SubObj.appendPath" ("_position" Cs')
###                         ("_position" Cs))))
###                   ("\<^const>Pure.imp"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Set.member"
###                         ("_tuple" ("_position" Ds)
###                           ("_tuple_arg" ("_position" fs)))
###                         ("_position" S)))
###                     ("\<^const>Pure.imp"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" Mapping.lookup)
###                             ("_cargs" ("_position" fs) ("_position" F)))
###                           ("\<^const>Option.option.Some" ("_position" va))))
###                       ("\<^const>HOL.Trueprop"
###                         ("_position" thesis)))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" e)
###       ("_idts" ("_position" s\<^sub>0)
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" Cs')
###             ("_idts" ("_position" h)
###               ("_idts" ("_position" l)
###                 ("_idts" ("_position" D)
###                   ("_idts" ("_position" S)
###                     ("_idts" ("_position" Ds)
###                       ("_idts" ("_position" Cs)
###                         ("_idts" ("_position" fs)
###                           ("_idts" ("_position" F)
###                             ("_position" va))))))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Expr.expr.FAcc"
###           ("\<^const>HOL.eq" ("_position" y) ("_position" e))
###           ("_position" F) ("_position" Cs)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s\<^sub>0)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u)
###               ("_applC" ("_position" Val) ("_position" va))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v)
###                 ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                   ("_position" e) ("_position" s\<^sub>0)
###                   ("_applC" ("_position" ref)
###                     ("_tuple" ("_position" a)
###                       ("_tuple_arg" ("_position" Cs'))))
###                   ("_tuple" ("_position" h)
###                     ("_tuple_arg" ("_position" l)))))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" h) ("_position" a))
###                     ("\<^const>Option.option.Some"
###                       ("_tuple" ("_position" D)
###                         ("_tuple_arg" ("_position" S))))))
###                 ("\<^const>Pure.imp"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq" ("_position" Ds)
###                       ("\<^const>SubObj.appendPath" ("_position" Cs')
###                         ("_position" Cs))))
###                   ("\<^const>Pure.imp"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Set.member"
###                         ("_tuple" ("_position" Ds)
###                           ("_tuple_arg" ("_position" fs)))
###                         ("_position" S)))
###                     ("\<^const>Pure.imp"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" Mapping.lookup)
###                             ("_cargs" ("_position" fs) ("_position" F)))
###                           ("\<^const>Option.option.Some" ("_position" va))))
###                       ("\<^const>HOL.Trueprop"
###                         ("_position" thesis)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 904 of "$AFP/CoreC++/Execute.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" e)
###       ("_idts" ("_position" s\<^sub>0)
###         ("_idts" ("_position" s\<^sub>1)
###           ("_idts" ("_position" F) ("_position" Cs))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Expr.expr.FAcc" ("_position" e) ("_position" F)
###             ("_position" Cs))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s\<^sub>0)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u)
###               ("_applC" ("_position" Throw)
###                 ("_tuple"
###                   ("_applC" ("_position" addr_of_sys_xcpt)
###                     ("_position" NullPointer))
###                   ("_tuple_arg" ("_list" ("_position" NullPointer)))))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v) ("_position" s\<^sub>1)))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                   ("_position" e) ("_position" s\<^sub>0) ("_position" null)
###                   ("_position" s\<^sub>1)))
###               ("\<^const>HOL.Trueprop" ("_position" thesis)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" e)
###       ("_idts" ("_position" s\<^sub>0)
###         ("_idts" ("_position" s\<^sub>1)
###           ("_idts" ("_position" F) ("_position" Cs))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Expr.expr.FAcc"
###           ("\<^const>HOL.eq" ("_position" y) ("_position" e))
###           ("_position" F) ("_position" Cs)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s\<^sub>0)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u)
###               ("_applC" ("_position" Throw)
###                 ("_tuple"
###                   ("_applC" ("_position" addr_of_sys_xcpt)
###                     ("_position" NullPointer))
###                   ("_tuple_arg" ("_list" ("_position" NullPointer)))))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v) ("_position" s\<^sub>1)))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                   ("_position" e) ("_position" s\<^sub>0) ("_position" null)
###                   ("_position" s\<^sub>1)))
###               ("\<^const>HOL.Trueprop" ("_position" thesis)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 907 of "$AFP/CoreC++/Execute.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" e)
###       ("_idts" ("_position" s\<^sub>0)
###         ("_idts" ("_position" e')
###           ("_idts" ("_position" s\<^sub>1)
###             ("_idts" ("_position" F) ("_position" Cs)))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Expr.expr.FAcc" ("_position" e) ("_position" F)
###             ("_position" Cs))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s\<^sub>0)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u)
###               ("_applC" ("_position" throw) ("_position" e'))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v) ("_position" s\<^sub>1)))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                   ("_position" e) ("_position" s\<^sub>0)
###                   ("_applC" ("_position" throw) ("_position" e'))
###                   ("_position" s\<^sub>1)))
###               ("\<^const>HOL.Trueprop" ("_position" thesis)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" e)
###       ("_idts" ("_position" s\<^sub>0)
###         ("_idts" ("_position" e')
###           ("_idts" ("_position" s\<^sub>1)
###             ("_idts" ("_position" F) ("_position" Cs)))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Expr.expr.FAcc"
###           ("\<^const>HOL.eq" ("_position" y) ("_position" e))
###           ("_position" F) ("_position" Cs)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s\<^sub>0)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u)
###               ("_applC" ("_position" throw) ("_position" e'))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v) ("_position" s\<^sub>1)))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                   ("_position" e) ("_position" s\<^sub>0)
###                   ("_applC" ("_position" throw) ("_position" e'))
###                   ("_position" s\<^sub>1)))
###               ("\<^const>HOL.Trueprop" ("_position" thesis)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 909 of "$AFP/CoreC++/Execute.thy") produces 8 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" e\<^sub>1)
###       ("_idts" ("_position" s\<^sub>0)
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" Cs')
###             ("_idts" ("_position" s\<^sub>1)
###               ("_idts" ("_position" e\<^sub>2)
###                 ("_idts" ("_position" va)
###                   ("_idts" ("_position" h\<^sub>2)
###                     ("_idts" ("_position" l\<^sub>2)
###                       ("_idts" ("_position" D)
###                         ("_idts" ("_position" S)
###                           ("_idts" ("_position" F)
###                             ("_idts" ("_position" T)
###                               ("_idts" ("_position" Cs)
###                                 ("_idts" ("_position" v')
###                                   ("_idts" ("_position" Ds)
###                                     ("_idts" ("_position" fs)
### ("_idts" ("_position" fs')
###   ("_idts" ("_position" S') ("_position" h\<^sub>2')))))))))))))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" Cs) ("_position" e\<^sub>2))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s\<^sub>0)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u)
###               ("_applC" ("_position" Val) ("_position" v'))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v)
###                 ("_tuple" ("_position" h\<^sub>2')
###                   ("_tuple_arg" ("_position" l\<^sub>2)))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                   ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###                   ("_applC" ("_position" ref)
###                     ("_tuple" ("_position" a)
###                       ("_tuple_arg" ("_position" Cs'))))
###                   ("_position" s\<^sub>1)))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                     ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###                     ("_applC" ("_position" Val) ("_position" va))
###                     ("_tuple" ("_position" h\<^sub>2)
###                       ("_tuple_arg" ("_position" l\<^sub>2)))))
###                 ("\<^const>Pure.imp"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" h\<^sub>2) ("_position" a))
###                       ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                         ("_tuple" ("_position" D)
###                           ("_tuple_arg" ("_position" S))))))
###                   ("\<^const>Pure.imp"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>SubObj.LeastFieldDecl" ("_position" P)
###                         ("_applC" ("_position" last) ("_position" Cs'))
###                         ("_position" F) ("_position" T) ("_position" Cs)))
###                     ("\<^const>Pure.imp"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>SubObj.casts_to" ("_position" P)
###                           ("_position" T) ("_position" va)
###                           ("_position" v')))
###                       ("\<^const>Pure.imp"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.eq" ("_position" Ds)
###                             ("\<^const>SubObj.appendPath" ("_position" Cs')
###                               ("_position" Cs))))
###                         ("\<^const>Pure.imp"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Set.member"
###                               ("_tuple" ("_position" Ds)
###                                 ("_tuple_arg" ("_position" fs)))
###                               ("_position" S)))
###                           ("\<^const>Pure.imp"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>HOL.eq" ("_position" fs')
###                                 ("_applC" ("_position" Mapping.update)
###                                   ("_cargs" ("_position" F)
###                                     ("_cargs" ("_position" v')
### ("_position" fs))))))
###                             ("\<^const>Pure.imp"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>HOL.eq" ("_position" S')
###                                   ("\<^const>Set.union"
###                                     ("\<^const>Groups.minus_class.minus"
### ("_position" S)
### ("_Finset" ("_tuple" ("_position" Ds) ("_tuple_arg" ("_position" fs)))))
###                                     ("_Finset"
### ("_tuple" ("_position" Ds) ("_tuple_arg" ("_position" fs')))))))
###                               ("\<^const>Pure.imp"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq"
###                                     ("_position" h\<^sub>2')
###                                     ("_MapUpd" ("_position" h\<^sub>2)
### ("_maplet" ("_position" a)
###   ("_tuple" ("_position" D) ("_tuple_arg" ("_position" S')))))))
###                                 ("\<^const>HOL.Trueprop"
###                                   ("_position" thesis))))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" e\<^sub>1)
###       ("_idts" ("_position" s\<^sub>0)
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" Cs')
###             ("_idts" ("_position" s\<^sub>1)
###               ("_idts" ("_position" e\<^sub>2)
###                 ("_idts" ("_position" va)
###                   ("_idts" ("_position" h\<^sub>2)
###                     ("_idts" ("_position" l\<^sub>2)
###                       ("_idts" ("_position" D)
###                         ("_idts" ("_position" S)
###                           ("_idts" ("_position" F)
###                             ("_idts" ("_position" T)
###                               ("_idts" ("_position" Cs)
###                                 ("_idts" ("_position" v')
###                                   ("_idts" ("_position" Ds)
###                                     ("_idts" ("_position" fs)
### ("_idts" ("_position" fs')
###   ("_idts" ("_position" S') ("_position" h\<^sub>2')))))))))))))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Expr.expr.LAss"
###             ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1)
###               ("_position" F) ("_position" Cs))
###             ("_position" e\<^sub>2))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s\<^sub>0)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u)
###               ("_applC" ("_position" Val) ("_position" v'))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v)
###                 ("_tuple" ("_position" h\<^sub>2')
###                   ("_tuple_arg" ("_position" l\<^sub>2)))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                   ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###                   ("_applC" ("_position" ref)
###                     ("_tuple" ("_position" a)
###                       ("_tuple_arg" ("_position" Cs'))))
###                   ("_position" s\<^sub>1)))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                     ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###                     ("_applC" ("_position" Val) ("_position" va))
###                     ("_tuple" ("_position" h\<^sub>2)
###                       ("_tuple_arg" ("_position" l\<^sub>2)))))
###                 ("\<^const>Pure.imp"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" h\<^sub>2) ("_position" a))
###                       ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                         ("_tuple" ("_position" D)
###                           ("_tuple_arg" ("_position" S))))))
###                   ("\<^const>Pure.imp"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>SubObj.LeastFieldDecl" ("_position" P)
###                         ("_applC" ("_position" last) ("_position" Cs'))
###                         ("_position" F) ("_position" T) ("_position" Cs)))
###                     ("\<^const>Pure.imp"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>SubObj.casts_to" ("_position" P)
###                           ("_position" T) ("_position" va)
###                           ("_position" v')))
###                       ("\<^const>Pure.imp"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.eq" ("_position" Ds)
###                             ("\<^const>SubObj.appendPath" ("_position" Cs')
###                               ("_position" Cs))))
###                         ("\<^const>Pure.imp"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Set.member"
###                               ("_tuple" ("_position" Ds)
###                                 ("_tuple_arg" ("_position" fs)))
###                               ("_position" S)))
###                           ("\<^const>Pure.imp"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>HOL.eq" ("_position" fs')
###                                 ("_applC" ("_position" Mapping.update)
###                                   ("_cargs" ("_position" F)
###                                     ("_cargs" ("_position" v')
### ("_position" fs))))))
###                             ("\<^const>Pure.imp"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>HOL.eq" ("_position" S')
###                                   ("\<^const>Set.union"
###                                     ("\<^const>Groups.minus_class.minus"
### ("_position" S)
### ("_Finset" ("_tuple" ("_position" Ds) ("_tuple_arg" ("_position" fs)))))
###                                     ("_Finset"
### ("_tuple" ("_position" Ds) ("_tuple_arg" ("_position" fs')))))))
###                               ("\<^const>Pure.imp"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq"
###                                     ("_position" h\<^sub>2')
###                                     ("_MapUpd" ("_position" h\<^sub>2)
### ("_maplet" ("_position" a)
###   ("_tuple" ("_position" D) ("_tuple_arg" ("_position" S')))))))
###                                 ("\<^const>HOL.Trueprop"
###                                   ("_position" thesis))))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" e\<^sub>1)
###       ("_idts" ("_position" s\<^sub>0)
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" Cs')
###             ("_idts" ("_position" s\<^sub>1)
###               ("_idts" ("_position" e\<^sub>2)
###                 ("_idts" ("_position" va)
###                   ("_idts" ("_position" h\<^sub>2)
###                     ("_idts" ("_position" l\<^sub>2)
###                       ("_idts" ("_position" D)
###                         ("_idts" ("_position" S)
###                           ("_idts" ("_position" F)
###                             ("_idts" ("_position" T)
###                               ("_idts" ("_position" Cs)
###                                 ("_idts" ("_position" v')
###                                   ("_idts" ("_position" Ds)
###                                     ("_idts" ("_position" fs)
### ("_idts" ("_position" fs')
###   ("_idts" ("_position" S') ("_position" h\<^sub>2')))))))))))))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Expr.expr.FAss"
###           ("\<^const>HOL.eq" ("_position" y) ("_position" e\<^sub>1))
###           ("_position" F) ("_position" Cs) ("_position" e\<^sub>2)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s\<^sub>0)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u)
###               ("_applC" ("_position" Val) ("_position" v'))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v)
###                 ("_tuple" ("_position" h\<^sub>2')
###                   ("_tuple_arg" ("_position" l\<^sub>2)))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                   ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###                   ("_applC" ("_position" ref)
###                     ("_tuple" ("_position" a)
###                       ("_tuple_arg" ("_position" Cs'))))
###                   ("_position" s\<^sub>1)))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                     ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###                     ("_applC" ("_position" Val) ("_position" va))
###                     ("_tuple" ("_position" h\<^sub>2)
###                       ("_tuple_arg" ("_position" l\<^sub>2)))))
###                 ("\<^const>Pure.imp"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" h\<^sub>2) ("_position" a))
###                       ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                         ("_tuple" ("_position" D)
###                           ("_tuple_arg" ("_position" S))))))
###                   ("\<^const>Pure.imp"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>SubObj.LeastFieldDecl" ("_position" P)
###                         ("_applC" ("_position" last) ("_position" Cs'))
###                         ("_position" F) ("_position" T) ("_position" Cs)))
###                     ("\<^const>Pure.imp"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>SubObj.casts_to" ("_position" P)
###                           ("_position" T) ("_position" va)
###                           ("_position" v')))
###                       ("\<^const>Pure.imp"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.eq" ("_position" Ds)
###                             ("\<^const>SubObj.appendPath" ("_position" Cs')
###                               ("_position" Cs))))
###                         ("\<^const>Pure.imp"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Set.member"
###                               ("_tuple" ("_position" Ds)
###                                 ("_tuple_arg" ("_position" fs)))
###                               ("_position" S)))
###                           ("\<^const>Pure.imp"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>HOL.eq" ("_position" fs')
###                                 ("_applC" ("_position" Mapping.update)
###                                   ("_cargs" ("_position" F)
###                                     ("_cargs" ("_position" v')
### ("_position" fs))))))
###                             ("\<^const>Pure.imp"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>HOL.eq" ("_position" S')
###                                   ("\<^const>Set.union"
###                                     ("\<^const>Groups.minus_class.minus"
### ("_position" S)
### ("_Finset" ("_tuple" ("_position" Ds) ("_tuple_arg" ("_position" fs)))))
###                                     ("_Finset"
### ("_tuple" ("_position" Ds) ("_tuple_arg" ("_position" fs')))))))
###                               ("\<^const>Pure.imp"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq"
###                                     ("_position" h\<^sub>2')
###                                     ("_MapUpd" ("_position" h\<^sub>2)
### ("_maplet" ("_position" a)
###   ("_tuple" ("_position" D) ("_tuple_arg" ("_position" S')))))))
###                                 ("\<^const>HOL.Trueprop"
###                                   ("_position" thesis))))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" e\<^sub>1)
###       ("_idts" ("_position" s\<^sub>0)
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" Cs')
###             ("_idts" ("_position" s\<^sub>1)
###               ("_idts" ("_position" e\<^sub>2)
###                 ("_idts" ("_position" va)
###                   ("_idts" ("_position" h\<^sub>2)
###                     ("_idts" ("_position" l\<^sub>2)
###                       ("_idts" ("_position" D)
###                         ("_idts" ("_position" S)
###                           ("_idts" ("_position" F)
###                             ("_idts" ("_position" T)
###                               ("_idts" ("_position" Cs)
###                                 ("_idts" ("_position" v')
###                                   ("_idts" ("_position" Ds)
###                                     ("_idts" ("_position" fs)
### ("_idts" ("_position" fs')
###   ("_idts" ("_position" S') ("_position" h\<^sub>2')))))))))))))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Expr.expr.LAss"
###           ("\<^const>Expr.expr.FAcc"
###             ("\<^const>HOL.eq" ("_position" y) ("_position" e\<^sub>1))
###             ("_position" F) ("_position" Cs))
###           ("_position" e\<^sub>2)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s\<^sub>0)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u)
###               ("_applC" ("_position" Val) ("_position" v'))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v)
###                 ("_tuple" ("_position" h\<^sub>2')
###                   ("_tuple_arg" ("_position" l\<^sub>2)))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                   ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###                   ("_applC" ("_position" ref)
###                     ("_tuple" ("_position" a)
###                       ("_tuple_arg" ("_position" Cs'))))
###                   ("_position" s\<^sub>1)))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                     ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###                     ("_applC" ("_position" Val) ("_position" va))
###                     ("_tuple" ("_position" h\<^sub>2)
###                       ("_tuple_arg" ("_position" l\<^sub>2)))))
###                 ("\<^const>Pure.imp"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" h\<^sub>2) ("_position" a))
###                       ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                         ("_tuple" ("_position" D)
###                           ("_tuple_arg" ("_position" S))))))
###                   ("\<^const>Pure.imp"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>SubObj.LeastFieldDecl" ("_position" P)
###                         ("_applC" ("_position" last) ("_position" Cs'))
###                         ("_position" F) ("_position" T) ("_position" Cs)))
###                     ("\<^const>Pure.imp"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>SubObj.casts_to" ("_position" P)
###                           ("_position" T) ("_position" va)
###                           ("_position" v')))
###                       ("\<^const>Pure.imp"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.eq" ("_position" Ds)
###                             ("\<^const>SubObj.appendPath" ("_position" Cs')
###                               ("_position" Cs))))
###                         ("\<^const>Pure.imp"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Set.member"
###                               ("_tuple" ("_position" Ds)
###                                 ("_tuple_arg" ("_position" fs)))
###                               ("_position" S)))
###                           ("\<^const>Pure.imp"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>HOL.eq" ("_position" fs')
###                                 ("_applC" ("_position" Mapping.update)
###                                   ("_cargs" ("_position" F)
###                                     ("_cargs" ("_position" v')
### ("_position" fs))))))
###                             ("\<^const>Pure.imp"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>HOL.eq" ("_position" S')
###                                   ("\<^const>Set.union"
###                                     ("\<^const>Groups.minus_class.minus"
### ("_position" S)
### ("_Finset" ("_tuple" ("_position" Ds) ("_tuple_arg" ("_position" fs)))))
###                                     ("_Finset"
### ("_tuple" ("_position" Ds) ("_tuple_arg" ("_position" fs')))))))
###                               ("\<^const>Pure.imp"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq"
###                                     ("_position" h\<^sub>2')
###                                     ("_MapUpd" ("_position" h\<^sub>2)
### ("_maplet" ("_position" a)
###   ("_tuple" ("_position" D) ("_tuple_arg" ("_position" S')))))))
###                                 ("\<^const>HOL.Trueprop"
###                                   ("_position" thesis))))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" e\<^sub>1)
###       ("_idts" ("_position" s\<^sub>0)
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" Cs')
###             ("_idts" ("_position" s\<^sub>1)
###               ("_idts" ("_position" e\<^sub>2)
###                 ("_idts" ("_position" va)
###                   ("_idts" ("_position" h\<^sub>2)
###                     ("_idts" ("_position" l\<^sub>2)
###                       ("_idts" ("_position" D)
###                         ("_idts" ("_position" S)
###                           ("_idts" ("_position" F)
###                             ("_idts" ("_position" T)
###                               ("_idts" ("_position" Cs)
###                                 ("_idts" ("_position" v')
###                                   ("_idts" ("_position" Ds)
###                                     ("_idts" ("_position" fs)
### ("_idts" ("_position" fs')
###   ("_idts" ("_position" S') ("_position" h\<^sub>2')))))))))))))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" Cs) ("_position" e\<^sub>2))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s\<^sub>0)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u)
###               ("_applC" ("_position" Val) ("_position" v'))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v)
###                 ("_tuple" ("_position" h\<^sub>2')
###                   ("_tuple_arg" ("_position" l\<^sub>2)))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                   ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###                   ("_applC" ("_position" ref)
###                     ("_tuple" ("_position" a)
###                       ("_tuple_arg" ("_position" Cs'))))
###                   ("_position" s\<^sub>1)))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                     ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###                     ("_applC" ("_position" Val) ("_position" va))
###                     ("_tuple" ("_position" h\<^sub>2)
###                       ("_tuple_arg" ("_position" l\<^sub>2)))))
###                 ("\<^const>Pure.imp"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" h\<^sub>2) ("_position" a))
###                       ("\<^const>Option.option.Some"
###                         ("_tuple" ("_position" D)
###                           ("_tuple_arg" ("_position" S))))))
###                   ("\<^const>Pure.imp"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>SubObj.LeastFieldDecl" ("_position" P)
###                         ("_applC" ("_position" last) ("_position" Cs'))
###                         ("_position" F) ("_position" T) ("_position" Cs)))
###                     ("\<^const>Pure.imp"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>SubObj.casts_to" ("_position" P)
###                           ("_position" T) ("_position" va)
###                           ("_position" v')))
###                       ("\<^const>Pure.imp"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.eq" ("_position" Ds)
###                             ("\<^const>SubObj.appendPath" ("_position" Cs')
###                               ("_position" Cs))))
###                         ("\<^const>Pure.imp"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Set.member"
###                               ("_tuple" ("_position" Ds)
###                                 ("_tuple_arg" ("_position" fs)))
###                               ("_position" S)))
###                           ("\<^const>Pure.imp"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>HOL.eq" ("_position" fs')
###                                 ("_applC" ("_position" Mapping.update)
###                                   ("_cargs" ("_position" F)
###                                     ("_cargs" ("_position" v')
### ("_position" fs))))))
###                             ("\<^const>Pure.imp"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>HOL.eq" ("_position" S')
###                                   ("\<^const>Set.union"
###                                     ("\<^const>Groups.minus_class.minus"
### ("_position" S)
### ("_Finset" ("_tuple" ("_position" Ds) ("_tuple_arg" ("_position" fs)))))
###                                     ("_Finset"
### ("_tuple" ("_position" Ds) ("_tuple_arg" ("_position" fs')))))))
###                               ("\<^const>Pure.imp"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq"
###                                     ("_position" h\<^sub>2')
###                                     ("_MapUpd" ("_position" h\<^sub>2)
### ("_maplet" ("_position" a)
###   ("_tuple" ("_position" D) ("_tuple_arg" ("_position" S')))))))
###                                 ("\<^const>HOL.Trueprop"
###                                   ("_position" thesis))))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" e\<^sub>1)
###       ("_idts" ("_position" s\<^sub>0)
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" Cs')
###             ("_idts" ("_position" s\<^sub>1)
###               ("_idts" ("_position" e\<^sub>2)
###                 ("_idts" ("_position" va)
###                   ("_idts" ("_position" h\<^sub>2)
###                     ("_idts" ("_position" l\<^sub>2)
###                       ("_idts" ("_position" D)
###                         ("_idts" ("_position" S)
###                           ("_idts" ("_position" F)
###                             ("_idts" ("_position" T)
###                               ("_idts" ("_position" Cs)
###                                 ("_idts" ("_position" v')
###                                   ("_idts" ("_position" Ds)
###                                     ("_idts" ("_position" fs)
### ("_idts" ("_position" fs')
###   ("_idts" ("_position" S') ("_position" h\<^sub>2')))))))))))))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Expr.expr.LAss"
###             ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1)
###               ("_position" F) ("_position" Cs))
###             ("_position" e\<^sub>2))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s\<^sub>0)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u)
###               ("_applC" ("_position" Val) ("_position" v'))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v)
###                 ("_tuple" ("_position" h\<^sub>2')
###                   ("_tuple_arg" ("_position" l\<^sub>2)))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                   ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###                   ("_applC" ("_position" ref)
###                     ("_tuple" ("_position" a)
###                       ("_tuple_arg" ("_position" Cs'))))
###                   ("_position" s\<^sub>1)))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                     ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###                     ("_applC" ("_position" Val) ("_position" va))
###                     ("_tuple" ("_position" h\<^sub>2)
###                       ("_tuple_arg" ("_position" l\<^sub>2)))))
###                 ("\<^const>Pure.imp"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" h\<^sub>2) ("_position" a))
###                       ("\<^const>Option.option.Some"
###                         ("_tuple" ("_position" D)
###                           ("_tuple_arg" ("_position" S))))))
###                   ("\<^const>Pure.imp"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>SubObj.LeastFieldDecl" ("_position" P)
###                         ("_applC" ("_position" last) ("_position" Cs'))
###                         ("_position" F) ("_position" T) ("_position" Cs)))
###                     ("\<^const>Pure.imp"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>SubObj.casts_to" ("_position" P)
###                           ("_position" T) ("_position" va)
###                           ("_position" v')))
###                       ("\<^const>Pure.imp"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.eq" ("_position" Ds)
###                             ("\<^const>SubObj.appendPath" ("_position" Cs')
###                               ("_position" Cs))))
###                         ("\<^const>Pure.imp"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Set.member"
###                               ("_tuple" ("_position" Ds)
###                                 ("_tuple_arg" ("_position" fs)))
###                               ("_position" S)))
###                           ("\<^const>Pure.imp"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>HOL.eq" ("_position" fs')
###                                 ("_applC" ("_position" Mapping.update)
###                                   ("_cargs" ("_position" F)
###                                     ("_cargs" ("_position" v')
### ("_position" fs))))))
###                             ("\<^const>Pure.imp"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>HOL.eq" ("_position" S')
###                                   ("\<^const>Set.union"
###                                     ("\<^const>Groups.minus_class.minus"
### ("_position" S)
### ("_Finset" ("_tuple" ("_position" Ds) ("_tuple_arg" ("_position" fs)))))
###                                     ("_Finset"
### ("_tuple" ("_position" Ds) ("_tuple_arg" ("_position" fs')))))))
###                               ("\<^const>Pure.imp"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq"
###                                     ("_position" h\<^sub>2')
###                                     ("_MapUpd" ("_position" h\<^sub>2)
### ("_maplet" ("_position" a)
###   ("_tuple" ("_position" D) ("_tuple_arg" ("_position" S')))))))
###                                 ("\<^const>HOL.Trueprop"
###                                   ("_position" thesis))))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" e\<^sub>1)
###       ("_idts" ("_position" s\<^sub>0)
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" Cs')
###             ("_idts" ("_position" s\<^sub>1)
###               ("_idts" ("_position" e\<^sub>2)
###                 ("_idts" ("_position" va)
###                   ("_idts" ("_position" h\<^sub>2)
###                     ("_idts" ("_position" l\<^sub>2)
###                       ("_idts" ("_position" D)
###                         ("_idts" ("_position" S)
###                           ("_idts" ("_position" F)
###                             ("_idts" ("_position" T)
###                               ("_idts" ("_position" Cs)
###                                 ("_idts" ("_position" v')
###                                   ("_idts" ("_position" Ds)
###                                     ("_idts" ("_position" fs)
### ("_idts" ("_position" fs')
###   ("_idts" ("_position" S') ("_position" h\<^sub>2')))))))))))))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Expr.expr.FAss"
###           ("\<^const>HOL.eq" ("_position" y) ("_position" e\<^sub>1))
###           ("_position" F) ("_position" Cs) ("_position" e\<^sub>2)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s\<^sub>0)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u)
###               ("_applC" ("_position" Val) ("_position" v'))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v)
###                 ("_tuple" ("_position" h\<^sub>2')
###                   ("_tuple_arg" ("_position" l\<^sub>2)))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                   ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###                   ("_applC" ("_position" ref)
###                     ("_tuple" ("_position" a)
###                       ("_tuple_arg" ("_position" Cs'))))
###                   ("_position" s\<^sub>1)))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                     ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###                     ("_applC" ("_position" Val) ("_position" va))
###                     ("_tuple" ("_position" h\<^sub>2)
###                       ("_tuple_arg" ("_position" l\<^sub>2)))))
###                 ("\<^const>Pure.imp"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" h\<^sub>2) ("_position" a))
###                       ("\<^const>Option.option.Some"
###                         ("_tuple" ("_position" D)
###                           ("_tuple_arg" ("_position" S))))))
###                   ("\<^const>Pure.imp"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>SubObj.LeastFieldDecl" ("_position" P)
###                         ("_applC" ("_position" last) ("_position" Cs'))
###                         ("_position" F) ("_position" T) ("_position" Cs)))
###                     ("\<^const>Pure.imp"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>SubObj.casts_to" ("_position" P)
###                           ("_position" T) ("_position" va)
###                           ("_position" v')))
###                       ("\<^const>Pure.imp"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.eq" ("_position" Ds)
###                             ("\<^const>SubObj.appendPath" ("_position" Cs')
###                               ("_position" Cs))))
###                         ("\<^const>Pure.imp"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Set.member"
###                               ("_tuple" ("_position" Ds)
###                                 ("_tuple_arg" ("_position" fs)))
###                               ("_position" S)))
###                           ("\<^const>Pure.imp"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>HOL.eq" ("_position" fs')
###                                 ("_applC" ("_position" Mapping.update)
###                                   ("_cargs" ("_position" F)
###                                     ("_cargs" ("_position" v')
### ("_position" fs))))))
###                             ("\<^const>Pure.imp"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>HOL.eq" ("_position" S')
###                                   ("\<^const>Set.union"
###                                     ("\<^const>Groups.minus_class.minus"
### ("_position" S)
### ("_Finset" ("_tuple" ("_position" Ds) ("_tuple_arg" ("_position" fs)))))
###                                     ("_Finset"
### ("_tuple" ("_position" Ds) ("_tuple_arg" ("_position" fs')))))))
###                               ("\<^const>Pure.imp"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq"
###                                     ("_position" h\<^sub>2')
###                                     ("_MapUpd" ("_position" h\<^sub>2)
### ("_maplet" ("_position" a)
###   ("_tuple" ("_position" D) ("_tuple_arg" ("_position" S')))))))
###                                 ("\<^const>HOL.Trueprop"
###                                   ("_position" thesis))))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" e\<^sub>1)
###       ("_idts" ("_position" s\<^sub>0)
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" Cs')
###             ("_idts" ("_position" s\<^sub>1)
###               ("_idts" ("_position" e\<^sub>2)
###                 ("_idts" ("_position" va)
###                   ("_idts" ("_position" h\<^sub>2)
###                     ("_idts" ("_position" l\<^sub>2)
###                       ("_idts" ("_position" D)
###                         ("_idts" ("_position" S)
###                           ("_idts" ("_position" F)
###                             ("_idts" ("_position" T)
###                               ("_idts" ("_position" Cs)
###                                 ("_idts" ("_position" v')
###                                   ("_idts" ("_position" Ds)
###                                     ("_idts" ("_position" fs)
### ("_idts" ("_position" fs')
###   ("_idts" ("_position" S') ("_position" h\<^sub>2')))))))))))))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Expr.expr.LAss"
###           ("\<^const>Expr.expr.FAcc"
###             ("\<^const>HOL.eq" ("_position" y) ("_position" e\<^sub>1))
###             ("_position" F) ("_position" Cs))
###           ("_position" e\<^sub>2)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s\<^sub>0)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u)
###               ("_applC" ("_position" Val) ("_position" v'))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v)
###                 ("_tuple" ("_position" h\<^sub>2')
###                   ("_tuple_arg" ("_position" l\<^sub>2)))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                   ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###                   ("_applC" ("_position" ref)
###                     ("_tuple" ("_position" a)
###                       ("_tuple_arg" ("_position" Cs'))))
###                   ("_position" s\<^sub>1)))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                     ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###                     ("_applC" ("_position" Val) ("_position" va))
###                     ("_tuple" ("_position" h\<^sub>2)
###                       ("_tuple_arg" ("_position" l\<^sub>2)))))
###                 ("\<^const>Pure.imp"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" h\<^sub>2) ("_position" a))
###                       ("\<^const>Option.option.Some"
###                         ("_tuple" ("_position" D)
###                           ("_tuple_arg" ("_position" S))))))
###                   ("\<^const>Pure.imp"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>SubObj.LeastFieldDecl" ("_position" P)
###                         ("_applC" ("_position" last) ("_position" Cs'))
###                         ("_position" F) ("_position" T) ("_position" Cs)))
###                     ("\<^const>Pure.imp"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>SubObj.casts_to" ("_position" P)
###                           ("_position" T) ("_position" va)
###                           ("_position" v')))
###                       ("\<^const>Pure.imp"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.eq" ("_position" Ds)
###                             ("\<^const>SubObj.appendPath" ("_position" Cs')
###                               ("_position" Cs))))
###                         ("\<^const>Pure.imp"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Set.member"
###                               ("_tuple" ("_position" Ds)
###                                 ("_tuple_arg" ("_position" fs)))
###                               ("_position" S)))
###                           ("\<^const>Pure.imp"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>HOL.eq" ("_position" fs')
###                                 ("_applC" ("_position" Mapping.update)
###                                   ("_cargs" ("_position" F)
###                                     ("_cargs" ("_position" v')
### ("_position" fs))))))
###                             ("\<^const>Pure.imp"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>HOL.eq" ("_position" S')
###                                   ("\<^const>Set.union"
###                                     ("\<^const>Groups.minus_class.minus"
### ("_position" S)
### ("_Finset" ("_tuple" ("_position" Ds) ("_tuple_arg" ("_position" fs)))))
###                                     ("_Finset"
### ("_tuple" ("_position" Ds) ("_tuple_arg" ("_position" fs')))))))
###                               ("\<^const>Pure.imp"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq"
###                                     ("_position" h\<^sub>2')
###                                     ("_MapUpd" ("_position" h\<^sub>2)
### ("_maplet" ("_position" a)
###   ("_tuple" ("_position" D) ("_tuple_arg" ("_position" S')))))))
###                                 ("\<^const>HOL.Trueprop"
###                                   ("_position" thesis))))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 915 of "$AFP/CoreC++/Execute.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" e\<^sub>1)
###       ("_idts" ("_position" s\<^sub>0)
###         ("_idts" ("_position" s\<^sub>1)
###           ("_idts" ("_position" e\<^sub>2)
###             ("_idts" ("_position" va)
###               ("_idts" ("_position" s\<^sub>2)
###                 ("_idts" ("_position" F) ("_position" Cs)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" Cs) ("_position" e\<^sub>2))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s\<^sub>0)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u)
###               ("_applC" ("_position" Throw)
###                 ("_tuple"
###                   ("_applC" ("_position" addr_of_sys_xcpt)
###                     ("_position" NullPointer))
###                   ("_tuple_arg" ("_list" ("_position" NullPointer)))))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v) ("_position" s\<^sub>2)))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                   ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###                   ("_position" null) ("_position" s\<^sub>1)))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                     ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###                     ("_applC" ("_position" Val) ("_position" va))
###                     ("_position" s\<^sub>2)))
###                 ("\<^const>HOL.Trueprop" ("_position" thesis))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" e\<^sub>1)
###       ("_idts" ("_position" s\<^sub>0)
###         ("_idts" ("_position" s\<^sub>1)
###           ("_idts" ("_position" e\<^sub>2)
###             ("_idts" ("_position" va)
###               ("_idts" ("_position" s\<^sub>2)
###                 ("_idts" ("_position" F) ("_position" Cs)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Expr.expr.LAss"
###             ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1)
###               ("_position" F) ("_position" Cs))
###             ("_position" e\<^sub>2))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s\<^sub>0)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u)
###               ("_applC" ("_position" Throw)
###                 ("_tuple"
###                   ("_applC" ("_position" addr_of_sys_xcpt)
###                     ("_position" NullPointer))
###                   ("_tuple_arg" ("_list" ("_position" NullPointer)))))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v) ("_position" s\<^sub>2)))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                   ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###                   ("_position" null) ("_position" s\<^sub>1)))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                     ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###                     ("_applC" ("_position" Val) ("_position" va))
###                     ("_position" s\<^sub>2)))
###                 ("\<^const>HOL.Trueprop" ("_position" thesis))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" e\<^sub>1)
###       ("_idts" ("_position" s\<^sub>0)
###         ("_idts" ("_position" s\<^sub>1)
###           ("_idts" ("_position" e\<^sub>2)
###             ("_idts" ("_position" va)
###               ("_idts" ("_position" s\<^sub>2)
###                 ("_idts" ("_position" F) ("_position" Cs)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Expr.expr.FAss"
###           ("\<^const>HOL.eq" ("_position" y) ("_position" e\<^sub>1))
###           ("_position" F) ("_position" Cs) ("_position" e\<^sub>2)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s\<^sub>0)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u)
###               ("_applC" ("_position" Throw)
###                 ("_tuple"
###                   ("_applC" ("_position" addr_of_sys_xcpt)
###                     ("_position" NullPointer))
###                   ("_tuple_arg" ("_list" ("_position" NullPointer)))))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v) ("_position" s\<^sub>2)))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                   ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###                   ("_position" null) ("_position" s\<^sub>1)))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                     ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###                     ("_applC" ("_position" Val) ("_position" va))
###                     ("_position" s\<^sub>2)))
###                 ("\<^const>HOL.Trueprop" ("_position" thesis))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" e\<^sub>1)
###       ("_idts" ("_position" s\<^sub>0)
###         ("_idts" ("_position" s\<^sub>1)
###           ("_idts" ("_position" e\<^sub>2)
###             ("_idts" ("_position" va)
###               ("_idts" ("_position" s\<^sub>2)
###                 ("_idts" ("_position" F) ("_position" Cs)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Expr.expr.LAss"
###           ("\<^const>Expr.expr.FAcc"
###             ("\<^const>HOL.eq" ("_position" y) ("_position" e\<^sub>1))
###             ("_position" F) ("_position" Cs))
###           ("_position" e\<^sub>2)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s\<^sub>0)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u)
###               ("_applC" ("_position" Throw)
###                 ("_tuple"
###                   ("_applC" ("_position" addr_of_sys_xcpt)
###                     ("_position" NullPointer))
###                   ("_tuple_arg" ("_list" ("_position" NullPointer)))))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v) ("_position" s\<^sub>2)))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                   ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###                   ("_position" null) ("_position" s\<^sub>1)))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                     ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###                     ("_applC" ("_position" Val) ("_position" va))
###                     ("_position" s\<^sub>2)))
###                 ("\<^const>HOL.Trueprop" ("_position" thesis))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 918 of "$AFP/CoreC++/Execute.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" e\<^sub>1)
###       ("_idts" ("_position" s\<^sub>0)
###         ("_idts" ("_position" e')
###           ("_idts" ("_position" s\<^sub>1)
###             ("_idts" ("_position" F)
###               ("_idts" ("_position" Cs) ("_position" e\<^sub>2))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" Cs) ("_position" e\<^sub>2))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s\<^sub>0)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u)
###               ("_applC" ("_position" throw) ("_position" e'))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v) ("_position" s\<^sub>1)))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                   ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###                   ("_applC" ("_position" throw) ("_position" e'))
###                   ("_position" s\<^sub>1)))
###               ("\<^const>HOL.Trueprop" ("_position" thesis)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" e\<^sub>1)
###       ("_idts" ("_position" s\<^sub>0)
###         ("_idts" ("_position" e')
###           ("_idts" ("_position" s\<^sub>1)
###             ("_idts" ("_position" F)
###               ("_idts" ("_position" Cs) ("_position" e\<^sub>2))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Expr.expr.LAss"
###             ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1)
###               ("_position" F) ("_position" Cs))
###             ("_position" e\<^sub>2))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s\<^sub>0)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u)
###               ("_applC" ("_position" throw) ("_position" e'))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v) ("_position" s\<^sub>1)))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                   ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###                   ("_applC" ("_position" throw) ("_position" e'))
###                   ("_position" s\<^sub>1)))
###               ("\<^const>HOL.Trueprop" ("_position" thesis)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" e\<^sub>1)
###       ("_idts" ("_position" s\<^sub>0)
###         ("_idts" ("_position" e')
###           ("_idts" ("_position" s\<^sub>1)
###             ("_idts" ("_position" F)
###               ("_idts" ("_position" Cs) ("_position" e\<^sub>2))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Expr.expr.FAss"
###           ("\<^const>HOL.eq" ("_position" y) ("_position" e\<^sub>1))
###           ("_position" F) ("_position" Cs) ("_position" e\<^sub>2)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s\<^sub>0)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u)
###               ("_applC" ("_position" throw) ("_position" e'))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v) ("_position" s\<^sub>1)))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                   ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###                   ("_applC" ("_position" throw) ("_position" e'))
###                   ("_position" s\<^sub>1)))
###               ("\<^const>HOL.Trueprop" ("_position" thesis)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" e\<^sub>1)
###       ("_idts" ("_position" s\<^sub>0)
###         ("_idts" ("_position" e')
###           ("_idts" ("_position" s\<^sub>1)
###             ("_idts" ("_position" F)
###               ("_idts" ("_position" Cs) ("_position" e\<^sub>2))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Expr.expr.LAss"
###           ("\<^const>Expr.expr.FAcc"
###             ("\<^const>HOL.eq" ("_position" y) ("_position" e\<^sub>1))
###             ("_position" F) ("_position" Cs))
###           ("_position" e\<^sub>2)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s\<^sub>0)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u)
###               ("_applC" ("_position" throw) ("_position" e'))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v) ("_position" s\<^sub>1)))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                   ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###                   ("_applC" ("_position" throw) ("_position" e'))
###                   ("_position" s\<^sub>1)))
###               ("\<^const>HOL.Trueprop" ("_position" thesis)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 920 of "$AFP/CoreC++/Execute.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" e\<^sub>1)
###       ("_idts" ("_position" s\<^sub>0)
###         ("_idts" ("_position" va)
###           ("_idts" ("_position" s\<^sub>1)
###             ("_idts" ("_position" e\<^sub>2)
###               ("_idts" ("_position" e')
###                 ("_idts" ("_position" s\<^sub>2)
###                   ("_idts" ("_position" F) ("_position" Cs))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" Cs) ("_position" e\<^sub>2))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s\<^sub>0)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u)
###               ("_applC" ("_position" throw) ("_position" e'))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v) ("_position" s\<^sub>2)))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                   ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###                   ("_applC" ("_position" Val) ("_position" va))
###                   ("_position" s\<^sub>1)))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                     ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###                     ("_applC" ("_position" throw) ("_position" e'))
###                     ("_position" s\<^sub>2)))
###                 ("\<^const>HOL.Trueprop" ("_position" thesis))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" e\<^sub>1)
###       ("_idts" ("_position" s\<^sub>0)
###         ("_idts" ("_position" va)
###           ("_idts" ("_position" s\<^sub>1)
###             ("_idts" ("_position" e\<^sub>2)
###               ("_idts" ("_position" e')
###                 ("_idts" ("_position" s\<^sub>2)
###                   ("_idts" ("_position" F) ("_position" Cs))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Expr.expr.LAss"
###             ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1)
###               ("_position" F) ("_position" Cs))
###             ("_position" e\<^sub>2))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s\<^sub>0)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u)
###               ("_applC" ("_position" throw) ("_position" e'))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v) ("_position" s\<^sub>2)))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                   ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###                   ("_applC" ("_position" Val) ("_position" va))
###                   ("_position" s\<^sub>1)))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                     ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###                     ("_applC" ("_position" throw) ("_position" e'))
###                     ("_position" s\<^sub>2)))
###                 ("\<^const>HOL.Trueprop" ("_position" thesis))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" e\<^sub>1)
###       ("_idts" ("_position" s\<^sub>0)
###         ("_idts" ("_position" va)
###           ("_idts" ("_position" s\<^sub>1)
###             ("_idts" ("_position" e\<^sub>2)
###               ("_idts" ("_position" e')
###                 ("_idts" ("_position" s\<^sub>2)
###                   ("_idts" ("_position" F) ("_position" Cs))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Expr.expr.FAss"
###           ("\<^const>HOL.eq" ("_position" y) ("_position" e\<^sub>1))
###           ("_position" F) ("_position" Cs) ("_position" e\<^sub>2)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s\<^sub>0)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u)
###               ("_applC" ("_position" throw) ("_position" e'))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v) ("_position" s\<^sub>2)))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                   ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###                   ("_applC" ("_position" Val) ("_position" va))
###                   ("_position" s\<^sub>1)))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                     ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###                     ("_applC" ("_position" throw) ("_position" e'))
###                     ("_position" s\<^sub>2)))
###                 ("\<^const>HOL.Trueprop" ("_position" thesis))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" e\<^sub>1)
###       ("_idts" ("_position" s\<^sub>0)
###         ("_idts" ("_position" va)
###           ("_idts" ("_position" s\<^sub>1)
###             ("_idts" ("_position" e\<^sub>2)
###               ("_idts" ("_position" e')
###                 ("_idts" ("_position" s\<^sub>2)
###                   ("_idts" ("_position" F) ("_position" Cs))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Expr.expr.LAss"
###           ("\<^const>Expr.expr.FAcc"
###             ("\<^const>HOL.eq" ("_position" y) ("_position" e\<^sub>1))
###             ("_position" F) ("_position" Cs))
###           ("_position" e\<^sub>2)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s\<^sub>0)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u)
###               ("_applC" ("_position" throw) ("_position" e'))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v) ("_position" s\<^sub>2)))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                   ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###                   ("_applC" ("_position" Val) ("_position" va))
###                   ("_position" s\<^sub>1)))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                     ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###                     ("_applC" ("_position" throw) ("_position" e'))
###                     ("_position" s\<^sub>2)))
###                 ("\<^const>HOL.Trueprop" ("_position" thesis))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 928 of "$AFP/CoreC++/Execute.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" e)
###       ("_idts" ("_position" s\<^sub>0)
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" Cs)
###             ("_idts" ("_position" s\<^sub>1)
###               ("_idts" ("_position" ps)
###                 ("_idts" ("_position" vs)
###                   ("_idts" ("_position" h\<^sub>2)
###                     ("_idts" ("_position" l\<^sub>2)
###                       ("_idts" ("_position" C)
###                         ("_idts" ("_position" S)
###                           ("_idts" ("_position" M)
###                             ("_idts" ("_position" Ts')
###                               ("_idts" ("_position" T')
###                                 ("_idts" ("_position" pns')
###                                   ("_idts" ("_position" body')
###                                     ("_idts" ("_position" Ds)
### ("_idts" ("_position" Ts)
###   ("_idts" ("_position" T)
###     ("_idts" ("_position" pns)
###       ("_idts" ("_position" body)
###         ("_idts" ("_position" Cs')
###           ("_idts" ("_position" vs')
###             ("_idts" ("_position" l\<^sub>2')
###               ("_idts" ("_position" new_body)
###                 ("_idts" ("_position" e')
###                   ("_idts" ("_position" h\<^sub>3)
###                     ("_position" l\<^sub>3)))))))))))))))))))))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("_applC" ("_position" Call)
###             ("_cargs" ("_position" e)
###               ("_cargs" ("_position" None)
###                 ("_cargs" ("_position" M) ("_position" ps)))))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s\<^sub>0)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u) ("_position" e')))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v)
###                 ("_tuple" ("_position" h\<^sub>3)
###                   ("_tuple_arg" ("_position" l\<^sub>2)))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                   ("_position" e) ("_position" s\<^sub>0)
###                   ("_applC" ("_position" ref)
###                     ("_tuple" ("_position" a)
###                       ("_tuple_arg" ("_position" Cs))))
###                   ("_position" s\<^sub>1)))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Execute.evals'" ("_position" P) ("_position" E)
###                     ("_position" ps) ("_position" s\<^sub>1)
###                     ("_applC" ("_position" map)
###                       ("_cargs" ("_position" Val) ("_position" vs)))
###                     ("_tuple" ("_position" h\<^sub>2)
###                       ("_tuple_arg" ("_position" l\<^sub>2)))))
###                 ("\<^const>Pure.imp"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" h\<^sub>2) ("_position" a))
###                       ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                         ("_tuple" ("_position" C)
###                           ("_tuple_arg" ("_position" S))))))
###                   ("\<^const>Pure.imp"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>SubObj.LeastMethodDef" ("_position" P)
###                         ("_applC" ("_position" last) ("_position" Cs))
###                         ("_position" M)
###                         ("_tuple" ("_position" Ts')
###                           ("_tuple_args" ("_position" T')
###                             ("_tuple_args" ("_position" pns')
###                               ("_tuple_arg" ("_position" body')))))
###                         ("_position" Ds)))
###                     ("\<^const>Pure.imp"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>SubObj.SelectMethodDef" ("_position" P)
###                           ("_position" C)
###                           ("\<^const>SubObj.appendPath" ("_position" Cs)
###                             ("_position" Ds))
###                           ("_position" M)
###                           ("_tuple" ("_position" Ts)
###                             ("_tuple_args" ("_position" T)
###                               ("_tuple_args" ("_position" pns)
###                                 ("_tuple_arg" ("_position" body)))))
###                           ("_position" Cs')))
###                       ("\<^const>Pure.imp"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.eq"
###                             ("_applC" ("_position" length) ("_position" vs))
###                             ("_applC" ("_position" length)
###                               ("_position" pns))))
###                         ("\<^const>Pure.imp"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>SubObj.Casts_to" ("_position" P)
###                               ("_position" Ts) ("_position" vs)
###                               ("_position" vs')))
###                           ("\<^const>Pure.imp"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>HOL.eq" ("_position" l\<^sub>2')
###                                 ("_Map"
###                                   ("_Maplets"
###                                     ("_maplet" ("_position" this)
### ("_applC" ("_position" Ref)
###   ("_tuple" ("_position" a) ("_tuple_arg" ("_position" Cs')))))
###                                     ("_maplets" ("_position" pns)
### ("_position" vs'))))))
###                             ("\<^const>Pure.imp"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>HOL.eq" ("_position" new_body)
###                                   ("_case_syntax" ("_position" T')
###                                     ("_case2"
### ("_case1" ("_applC" ("_position" Class) ("_position" D))
###   ("\<^const>Expr.expr.StatCast" ("_position" D) ("_position" body)))
### ("_case1" ("\<^const>Pure.dummy_pattern") ("_position" body))))))
###                               ("\<^const>Pure.imp"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>Execute.eval'" ("_position" P)
###                                     ("_MapUpd" ("_position" E)
### ("_Maplets"
###   ("_maplet" ("_position" this)
###     ("_applC" ("_position" Class)
###       ("_applC" ("_position" last) ("_position" Cs'))))
###   ("_maplets" ("_position" pns) ("_position" Ts))))
###                                     ("_position" new_body)
###                                     ("_tuple" ("_position" h\<^sub>2)
### ("_tuple_arg" ("_position" l\<^sub>2')))
###                                     ("_position" e')
###                                     ("_tuple" ("_position" h\<^sub>3)
### ("_tuple_arg" ("_position" l\<^sub>3)))))
###                                 ("\<^const>HOL.Trueprop"
###                                   ("_position" thesis))))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" e)
###       ("_idts" ("_position" s\<^sub>0)
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" Cs)
###             ("_idts" ("_position" s\<^sub>1)
###               ("_idts" ("_position" ps)
###                 ("_idts" ("_position" vs)
###                   ("_idts" ("_position" h\<^sub>2)
###                     ("_idts" ("_position" l\<^sub>2)
###                       ("_idts" ("_position" C)
###                         ("_idts" ("_position" S)
###                           ("_idts" ("_position" M)
###                             ("_idts" ("_position" Ts')
###                               ("_idts" ("_position" T')
###                                 ("_idts" ("_position" pns')
###                                   ("_idts" ("_position" body')
###                                     ("_idts" ("_position" Ds)
### ("_idts" ("_position" Ts)
###   ("_idts" ("_position" T)
###     ("_idts" ("_position" pns)
###       ("_idts" ("_position" body)
###         ("_idts" ("_position" Cs')
###           ("_idts" ("_position" vs')
###             ("_idts" ("_position" l\<^sub>2')
###               ("_idts" ("_position" new_body)
###                 ("_idts" ("_position" e')
###                   ("_idts" ("_position" h\<^sub>3)
###                     ("_position" l\<^sub>3)))))))))))))))))))))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("_applC" ("_position" Call)
###             ("_cargs" ("_position" e)
###               ("_cargs" ("_position" None)
###                 ("_cargs" ("_position" M) ("_position" ps)))))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s\<^sub>0)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u) ("_position" e')))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v)
###                 ("_tuple" ("_position" h\<^sub>3)
###                   ("_tuple_arg" ("_position" l\<^sub>2)))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                   ("_position" e) ("_position" s\<^sub>0)
###                   ("_applC" ("_position" ref)
###                     ("_tuple" ("_position" a)
###                       ("_tuple_arg" ("_position" Cs))))
###                   ("_position" s\<^sub>1)))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Execute.evals'" ("_position" P) ("_position" E)
###                     ("_position" ps) ("_position" s\<^sub>1)
###                     ("_applC" ("_position" map)
###                       ("_cargs" ("_position" Val) ("_position" vs)))
###                     ("_tuple" ("_position" h\<^sub>2)
###                       ("_tuple_arg" ("_position" l\<^sub>2)))))
###                 ("\<^const>Pure.imp"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" h\<^sub>2) ("_position" a))
###                       ("\<^const>Option.option.Some"
###                         ("_tuple" ("_position" C)
###                           ("_tuple_arg" ("_position" S))))))
###                   ("\<^const>Pure.imp"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>SubObj.LeastMethodDef" ("_position" P)
###                         ("_applC" ("_position" last) ("_position" Cs))
###                         ("_position" M)
###                         ("_tuple" ("_position" Ts')
###                           ("_tuple_args" ("_position" T')
###                             ("_tuple_args" ("_position" pns')
###                               ("_tuple_arg" ("_position" body')))))
###                         ("_position" Ds)))
###                     ("\<^const>Pure.imp"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>SubObj.SelectMethodDef" ("_position" P)
###                           ("_position" C)
###                           ("\<^const>SubObj.appendPath" ("_position" Cs)
###                             ("_position" Ds))
###                           ("_position" M)
###                           ("_tuple" ("_position" Ts)
###                             ("_tuple_args" ("_position" T)
###                               ("_tuple_args" ("_position" pns)
###                                 ("_tuple_arg" ("_position" body)))))
###                           ("_position" Cs')))
###                       ("\<^const>Pure.imp"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.eq"
###                             ("_applC" ("_position" length) ("_position" vs))
###                             ("_applC" ("_position" length)
###                               ("_position" pns))))
###                         ("\<^const>Pure.imp"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>SubObj.Casts_to" ("_position" P)
###                               ("_position" Ts) ("_position" vs)
###                               ("_position" vs')))
###                           ("\<^const>Pure.imp"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>HOL.eq" ("_position" l\<^sub>2')
###                                 ("_Map"
###                                   ("_Maplets"
###                                     ("_maplet" ("_position" this)
### ("_applC" ("_position" Ref)
###   ("_tuple" ("_position" a) ("_tuple_arg" ("_position" Cs')))))
###                                     ("_maplets" ("_position" pns)
### ("_position" vs'))))))
###                             ("\<^const>Pure.imp"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>HOL.eq" ("_position" new_body)
###                                   ("_case_syntax" ("_position" T')
###                                     ("_case2"
### ("_case1" ("_applC" ("_position" Class) ("_position" D))
###   ("\<^const>Expr.expr.StatCast" ("_position" D) ("_position" body)))
### ("_case1" ("\<^const>Pure.dummy_pattern") ("_position" body))))))
###                               ("\<^const>Pure.imp"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>Execute.eval'" ("_position" P)
###                                     ("_MapUpd" ("_position" E)
### ("_Maplets"
###   ("_maplet" ("_position" this)
###     ("_applC" ("_position" Class)
###       ("_applC" ("_position" last) ("_position" Cs'))))
###   ("_maplets" ("_position" pns) ("_position" Ts))))
###                                     ("_position" new_body)
###                                     ("_tuple" ("_position" h\<^sub>2)
### ("_tuple_arg" ("_position" l\<^sub>2')))
###                                     ("_position" e')
###                                     ("_tuple" ("_position" h\<^sub>3)
### ("_tuple_arg" ("_position" l\<^sub>3)))))
###                                 ("\<^const>HOL.Trueprop"
###                                   ("_position" thesis))))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 937 of "$AFP/CoreC++/Execute.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" e)
###       ("_idts" ("_position" s\<^sub>0)
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" Cs)
###             ("_idts" ("_position" s\<^sub>1)
###               ("_idts" ("_position" ps)
###                 ("_idts" ("_position" vs)
###                   ("_idts" ("_position" h\<^sub>2)
###                     ("_idts" ("_position" l\<^sub>2)
###                       ("_idts" ("_position" C)
###                         ("_idts" ("_position" Cs'')
###                           ("_idts" ("_position" M)
###                             ("_idts" ("_position" Ts)
###                               ("_idts" ("_position" T)
###                                 ("_idts" ("_position" pns)
###                                   ("_idts" ("_position" body)
###                                     ("_idts" ("_position" Cs')
### ("_idts" ("_position" Ds)
###   ("_idts" ("_position" vs')
###     ("_idts" ("_position" l\<^sub>2')
###       ("_idts" ("_position" e')
###         ("_idts" ("_position" h\<^sub>3)
###           ("_position" l\<^sub>3))))))))))))))))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("_applC" ("_position" Call)
###             ("_cargs" ("_position" e)
###               ("_cargs" ("\<^const>Option.option.Some" ("_position" C))
###                 ("_cargs" ("_position" M) ("_position" ps)))))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s\<^sub>0)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u) ("_position" e')))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v)
###                 ("_tuple" ("_position" h\<^sub>3)
###                   ("_tuple_arg" ("_position" l\<^sub>2)))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                   ("_position" e) ("_position" s\<^sub>0)
###                   ("_applC" ("_position" ref)
###                     ("_tuple" ("_position" a)
###                       ("_tuple_arg" ("_position" Cs))))
###                   ("_position" s\<^sub>1)))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Execute.evals'" ("_position" P) ("_position" E)
###                     ("_position" ps) ("_position" s\<^sub>1)
###                     ("_applC" ("_position" map)
###                       ("_cargs" ("_position" Val) ("_position" vs)))
###                     ("_tuple" ("_position" h\<^sub>2)
###                       ("_tuple_arg" ("_position" l\<^sub>2)))))
###                 ("\<^const>Pure.imp"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>SubObj.path_unique" ("_position" P)
###                       ("_applC" ("_position" last) ("_position" Cs))
###                       ("_position" C)))
###                   ("\<^const>Pure.imp"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>SubObj.path_via" ("_position" P)
###                         ("_applC" ("_position" last) ("_position" Cs))
###                         ("_position" C) ("_position" Cs'')))
###                     ("\<^const>Pure.imp"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>SubObj.LeastMethodDef" ("_position" P)
###                           ("_position" C) ("_position" M)
###                           ("_tuple" ("_position" Ts)
###                             ("_tuple_args" ("_position" T)
###                               ("_tuple_args" ("_position" pns)
###                                 ("_tuple_arg" ("_position" body)))))
###                           ("_position" Cs')))
###                       ("\<^const>Pure.imp"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.eq" ("_position" Ds)
###                             ("\<^const>SubObj.appendPath"
###                               ("\<^const>SubObj.appendPath" ("_position" Cs)
###                                 ("_position" Cs''))
###                               ("_position" Cs'))))
###                         ("\<^const>Pure.imp"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>HOL.eq"
###                               ("_applC" ("_position" length)
###                                 ("_position" vs))
###                               ("_applC" ("_position" length)
###                                 ("_position" pns))))
###                           ("\<^const>Pure.imp"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>SubObj.Casts_to" ("_position" P)
###                                 ("_position" Ts) ("_position" vs)
###                                 ("_position" vs')))
###                             ("\<^const>Pure.imp"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>HOL.eq" ("_position" l\<^sub>2')
###                                   ("_Map"
###                                     ("_Maplets"
### ("_maplet" ("_position" this)
###   ("_applC" ("_position" Ref)
###     ("_tuple" ("_position" a) ("_tuple_arg" ("_position" Ds)))))
### ("_maplets" ("_position" pns) ("_position" vs'))))))
###                               ("\<^const>Pure.imp"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>Execute.eval'" ("_position" P)
###                                     ("_MapUpd" ("_position" E)
### ("_Maplets"
###   ("_maplet" ("_position" this)
###     ("_applC" ("_position" Class)
###       ("_applC" ("_position" last) ("_position" Ds))))
###   ("_maplets" ("_position" pns) ("_position" Ts))))
###                                     ("_position" body)
###                                     ("_tuple" ("_position" h\<^sub>2)
### ("_tuple_arg" ("_position" l\<^sub>2')))
###                                     ("_position" e')
###                                     ("_tuple" ("_position" h\<^sub>3)
### ("_tuple_arg" ("_position" l\<^sub>3)))))
###                                 ("\<^const>HOL.Trueprop"
###                                   ("_position" thesis))))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" e)
###       ("_idts" ("_position" s\<^sub>0)
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" Cs)
###             ("_idts" ("_position" s\<^sub>1)
###               ("_idts" ("_position" ps)
###                 ("_idts" ("_position" vs)
###                   ("_idts" ("_position" h\<^sub>2)
###                     ("_idts" ("_position" l\<^sub>2)
###                       ("_idts" ("_position" C)
###                         ("_idts" ("_position" Cs'')
###                           ("_idts" ("_position" M)
###                             ("_idts" ("_position" Ts)
###                               ("_idts" ("_position" T)
###                                 ("_idts" ("_position" pns)
###                                   ("_idts" ("_position" body)
###                                     ("_idts" ("_position" Cs')
### ("_idts" ("_position" Ds)
###   ("_idts" ("_position" vs')
###     ("_idts" ("_position" l\<^sub>2')
###       ("_idts" ("_position" e')
###         ("_idts" ("_position" h\<^sub>3)
###           ("_position" l\<^sub>3))))))))))))))))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("_applC" ("_position" Call)
###             ("_cargs" ("_position" e)
###               ("_cargs"
###                 ("\<^const>Archimedean_Field.floor_ceiling_class.floor"
###                   ("_position" C))
###                 ("_cargs" ("_position" M) ("_position" ps)))))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s\<^sub>0)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u) ("_position" e')))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v)
###                 ("_tuple" ("_position" h\<^sub>3)
###                   ("_tuple_arg" ("_position" l\<^sub>2)))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P) ("_position" E)
###                   ("_position" e) ("_position" s\<^sub>0)
###                   ("_applC" ("_position" ref)
###                     ("_tuple" ("_position" a)
###                       ("_tuple_arg" ("_position" Cs))))
###                   ("_position" s\<^sub>1)))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Execute.evals'" ("_position" P) ("_position" E)
###                     ("_position" ps) ("_position" s\<^sub>1)
###                     ("_applC" ("_position" map)
###                       ("_cargs" ("_position" Val) ("_position" vs)))
###                     ("_tuple" ("_position" h\<^sub>2)
###                       ("_tuple_arg" ("_position" l\<^sub>2)))))
###                 ("\<^const>Pure.imp"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>SubObj.path_unique" ("_position" P)
###                       ("_applC" ("_position" last) ("_position" Cs))
###                       ("_position" C)))
###                   ("\<^const>Pure.imp"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>SubObj.path_via" ("_position" P)
###                         ("_applC" ("_position" last) ("_position" Cs))
###                         ("_position" C) ("_position" Cs'')))
###                     ("\<^const>Pure.imp"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>SubObj.LeastMethodDef" ("_position" P)
###                           ("_position" C) ("_position" M)
###                           ("_tuple" ("_position" Ts)
###                             ("_tuple_args" ("_position" T)
###                               ("_tuple_args" ("_position" pns)
###                                 ("_tuple_arg" ("_position" body)))))
###                           ("_position" Cs')))
###                       ("\<^const>Pure.imp"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.eq" ("_position" Ds)
###                             ("\<^const>SubObj.appendPath"
###                               ("\<^const>SubObj.appendPath" ("_position" Cs)
###                                 ("_position" Cs''))
###                               ("_position" Cs'))))
###                         ("\<^const>Pure.imp"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>HOL.eq"
###                               ("_applC" ("_position" length)
###                                 ("_position" vs))
###                               ("_applC" ("_position" length)
###                                 ("_position" pns))))
###                           ("\<^const>Pure.imp"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>SubObj.Casts_to" ("_position" P)
###                                 ("_position" Ts) ("_position" vs)
###                                 ("_position" vs')))
###                             ("\<^const>Pure.imp"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>HOL.eq" ("_position" l\<^sub>2')
###                                   ("_Map"
###                                     ("_Maplets"
### ("_maplet" ("_position" this)
###   ("_applC" ("_position" Ref)
###     ("_tuple" ("_position" a) ("_tuple_arg" ("_position" Ds)))))
### ("_maplets" ("_position" pns) ("_position" vs'))))))
###                               ("\<^const>Pure.imp"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>Execute.eval'" ("_position" P)
###                                     ("_MapUpd" ("_position" E)
### ("_Maplets"
###   ("_maplet" ("_position" this)
###     ("_applC" ("_position" Class)
###       ("_applC" ("_position" last) ("_position" Ds))))
###   ("_maplets" ("_position" pns) ("_position" Ts))))
###                                     ("_position" body)
###                                     ("_tuple" ("_position" h\<^sub>2)
### ("_tuple_arg" ("_position" l\<^sub>2')))
###                                     ("_position" e')
###                                     ("_tuple" ("_position" h\<^sub>3)
### ("_tuple_arg" ("_position" l\<^sub>3)))))
###                                 ("\<^const>HOL.Trueprop"
###                                   ("_position" thesis))))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 949 of "$AFP/CoreC++/Execute.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" V)
###       ("_idts" ("_position" T)
###         ("_idts" ("_position" e\<^sub>0)
###           ("_idts" ("_position" h\<^sub>0)
###             ("_idts" ("_position" l\<^sub>0)
###               ("_idts" ("_position" e\<^sub>1)
###                 ("_idts" ("_position" h\<^sub>1)
###                   ("_position" l\<^sub>1)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###             ("_position" e\<^sub>0))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z)
###             ("_tuple" ("_position" h\<^sub>0)
###               ("_tuple_arg" ("_position" l\<^sub>0)))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u) ("_position" e\<^sub>1)))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v)
###                 ("_tuple" ("_position" h\<^sub>1)
###                   ("_tuple_arg"
###                     ("_Update" ("_position" l\<^sub>1)
###                       ("_updbind" ("_position" V)
###                         ("_applC" ("_position" l\<^sub>0)
###                           ("_position" V))))))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P)
###                   ("_MapUpd" ("_position" E)
###                     ("_maplet" ("_position" V) ("_position" T)))
###                   ("_position" e\<^sub>0)
###                   ("_tuple" ("_position" h\<^sub>0)
###                     ("_tuple_arg"
###                       ("_Update" ("_position" l\<^sub>0)
###                         ("_updbind" ("_position" V) ("_position" None)))))
###                   ("_position" e\<^sub>1)
###                   ("_tuple" ("_position" h\<^sub>1)
###                     ("_tuple_arg" ("_position" l\<^sub>1)))))
###               ("\<^const>HOL.Trueprop" ("_position" thesis)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" V)
###       ("_idts" ("_position" T)
###         ("_idts" ("_position" e\<^sub>0)
###           ("_idts" ("_position" h\<^sub>0)
###             ("_idts" ("_position" l\<^sub>0)
###               ("_idts" ("_position" e\<^sub>1)
###                 ("_idts" ("_position" h\<^sub>1)
###                   ("_position" l\<^sub>1)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###             ("_position" e\<^sub>0))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z)
###             ("_tuple" ("_position" h\<^sub>0)
###               ("_tuple_arg" ("_position" l\<^sub>0)))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u) ("_position" e\<^sub>1)))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v)
###                 ("_tuple" ("_position" h\<^sub>1)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" l\<^sub>1)
###                       ("\<^const>Expr.expr.LAss" ("_position" V)
###                         ("_applC" ("_position" l\<^sub>0)
###                           ("_position" V))))))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P)
###                   ("_MapUpd" ("_position" E)
###                     ("_maplet" ("_position" V) ("_position" T)))
###                   ("_position" e\<^sub>0)
###                   ("_tuple" ("_position" h\<^sub>0)
###                     ("_tuple_arg"
###                       ("_Update" ("_position" l\<^sub>0)
###                         ("_updbind" ("_position" V) ("_position" None)))))
###                   ("_position" e\<^sub>1)
###                   ("_tuple" ("_position" h\<^sub>1)
###                     ("_tuple_arg" ("_position" l\<^sub>1)))))
###               ("\<^const>HOL.Trueprop" ("_position" thesis)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" V)
###       ("_idts" ("_position" T)
###         ("_idts" ("_position" e\<^sub>0)
###           ("_idts" ("_position" h\<^sub>0)
###             ("_idts" ("_position" l\<^sub>0)
###               ("_idts" ("_position" e\<^sub>1)
###                 ("_idts" ("_position" h\<^sub>1)
###                   ("_position" l\<^sub>1)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###             ("_position" e\<^sub>0))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z)
###             ("_tuple" ("_position" h\<^sub>0)
###               ("_tuple_arg" ("_position" l\<^sub>0)))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u) ("_position" e\<^sub>1)))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v)
###                 ("_tuple" ("_position" h\<^sub>1)
###                   ("_tuple_arg"
###                     ("_Update" ("_position" l\<^sub>1)
###                       ("_updbind" ("_position" V)
###                         ("_applC" ("_position" l\<^sub>0)
###                           ("_position" V))))))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P)
###                   ("_MapUpd" ("_position" E)
###                     ("_maplet" ("_position" V) ("_position" T)))
###                   ("_position" e\<^sub>0)
###                   ("_tuple" ("_position" h\<^sub>0)
###                     ("_tuple_arg"
###                       ("_applC" ("_position" l\<^sub>0)
###                         ("\<^const>Expr.expr.LAss" ("_position" V)
###                           ("_position" None)))))
###                   ("_position" e\<^sub>1)
###                   ("_tuple" ("_position" h\<^sub>1)
###                     ("_tuple_arg" ("_position" l\<^sub>1)))))
###               ("\<^const>HOL.Trueprop" ("_position" thesis)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" E)
###     ("_idts" ("_position" V)
###       ("_idts" ("_position" T)
###         ("_idts" ("_position" e\<^sub>0)
###           ("_idts" ("_position" h\<^sub>0)
###             ("_idts" ("_position" l\<^sub>0)
###               ("_idts" ("_position" e\<^sub>1)
###                 ("_idts" ("_position" h\<^sub>1)
###                   ("_position" l\<^sub>1)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" E)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" y)
###           ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###             ("_position" e\<^sub>0))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" z)
###             ("_tuple" ("_position" h\<^sub>0)
###               ("_tuple_arg" ("_position" l\<^sub>0)))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" u) ("_position" e\<^sub>1)))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" v)
###                 ("_tuple" ("_position" h\<^sub>1)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" l\<^sub>1)
###                       ("\<^const>Expr.expr.LAss" ("_position" V)
###                         ("_applC" ("_position" l\<^sub>0)
###                           ("_position" V))))))))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Execute.eval'" ("_position" P)
###                   ("_MapUpd" ("_position" E)
###                     ("_maplet" ("_position" V) ("_position" T)))
###                   ("_position" e\<^sub>0)
###                   ("_tuple" ("_position" h\<^sub>0)
###                     ("_tuple_arg"
###                       ("_applC" ("_position" l\<^sub>0)
###                         ("\<^const>Expr.expr.LAss" ("_position" V)
###                           ("_position" None)))))
###                   ("_position" e\<^sub>1)
###                   ("_tuple" ("_position" h\<^sub>1)
###                     ("_tuple_arg" ("_position" l\<^sub>1)))))
###               ("\<^const>HOL.Trueprop" ("_position" thesis)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Execute"
### 26.481s elapsed time, 28.156s cpu time, 1.620s GC time
Loading theory "Draft.ExecuteTemplates"
val templateLemmas =
   [("Execute.casts_to_code",
     "?P \<turnstile> Class ?C casts Null to Null ",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 1, template_var 0)),
             template_hole 0),
           template_hole 0)
         )),
    ("Execute.Nil'",
     "?P,?E \<turnstile> \<langle>[],?s\<rangle> [\<Rightarrow>']
                         \<langle>[],?s\<rangle>",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1),
                 template_hole 0),
               template_var 0),
             template_hole 0),
           template_var 0)
         )),
    ("Execute.new_Addr'_code",
     "new_Addr' ?h = lowest (Option.is_none o ?h) 0",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0)),
         template_hole 0))),
    ("Execute.Val'",
     "?P,?E \<turnstile> \<langle>Val ?v,?s\<rangle> \<Rightarrow>'
                         \<langle>Val ?v,?s\<rangle>",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2),
                 template_app (template_hole 0, template_var 1)),
               template_var 0),
             template_app (template_hole 0, template_var 1)),
           template_var 0)
         )),
    ("Execute.init_obj_pred_conv",
     "set_of_pred (init_obj_pred ?P ?C) = Collect (init_obj' ?P ?C)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Execute.map_val_conv", "(?xs = map Val ?ys) = map_val ?xs ?ys",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Execute.lastP_i_oI", "lastP ?x ?xa ==> pred.eval (lastP_i_o ?x) ?xa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Execute.map_val_i_oI",
     "map_val ?x ?xa ==> pred.eval (map_val_i_o ?x) ?xa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Execute.eq_i_oI", "Predicate.eq ?x ?xa ==> pred.eval (eq_i_o ?x) ?xa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Execute.eq_o_iI", "Predicate.eq ?x ?xa ==> pred.eval (eq_o_i ?xa) ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Execute.app_eq", "app ?xs ?ys ?zs = (?zs = ?xs @ ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("Execute.blank'_code",
     "blank' ?P ?C = (?C, set_of_pred (init_obj_pred ?P ?C))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Execute.lastP_i_iI",
     "lastP ?x ?xa ==> pred.eval (lastP_i_i ?x ?xa) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.map_val_i_iI",
     "map_val ?x ?xa ==> pred.eval (map_val_i_i ?x ?xa) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.lastP_intro_1", "?xu = [] ==> lastP (?z # ?xu) ?z",
     template_implication
      ([template_equation (template_var 1, template_hole 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_var 0)
           ))),
    ("Execute.eq_i_iI",
     "Predicate.eq ?x ?xa ==> pred.eval (eq_i_i ?x ?xa) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.subclsR_code",
     "?P \<turnstile> ?C \<prec>\<^sub>R ?D = subclsRp ?P ?C ?D",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_var 1))),
    ("Execute.subcls1p_i_i_oI",
     "subcls1p ?x ?xa ?xb ==> pred.eval (subcls1p_i_i_o ?x ?xa) ?xb",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("Execute.subclsRp_i_i_oI",
     "subclsRp ?x ?xa ?xb ==> pred.eval (subclsRp_i_i_o ?x ?xa) ?xb",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("Execute.subclsSp_i_i_oI",
     "subclsSp ?x ?xa ?xb ==> pred.eval (subclsSp_i_i_o ?x ?xa) ?xb",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("Execute.app_i_i_oI",
     "app ?x ?xa ?xb ==> pred.eval (app_i_i_o ?x ?xa) ?xb",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("Execute.app_i_o_iI",
     "app ?x ?xa ?xb ==> pred.eval (app_i_o_i ?x ?xb) ?xa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("Execute.app_o_i_iI",
     "app ?x ?xa ?xb ==> pred.eval (app_o_i_i ?xa ?xb) ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("Execute.app_eq2", "app ?xs ?ys ?zs ==> ?zs = ?xs @ ?ys",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("Execute.init_obj_predI",
     "init_obj' ?x ?xa ?xb ==> pred.eval (init_obj_pred ?x ?xa) ?xb",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("Execute.Subobjs_i_i_oI",
     "Subobjs ?x ?xa ?xb ==> pred.eval (Subobjs_i_i_o ?x ?xa) ?xb",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("Execute.Subobjs\<^sub>R_i_i_oI",
     "Subobjs\<^sub>R ?x ?xa ?xb ==>
      pred.eval (Subobjs\<^sub>R_i_i_o ?x ?xa) ?xb",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("Execute.path_unique_i_i_oI",
     "?x \<turnstile> Path ?xa to ?xb unique ==>
      pred.eval (path_unique_i_i_o ?x ?xa) ?xb",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("Execute.app_eq1", "?zs = ?xs @ ?ys ==> app ?xs ?ys ?zs",
     template_implication
      ([template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)
           ))),
    ("Execute.subcls1p_i_i_iI",
     "subcls1p ?x ?xa ?xb ==> pred.eval (subcls1p_i_i_i ?x ?xa ?xb) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.subclsRp_i_i_iI",
     "subclsRp ?x ?xa ?xb ==> pred.eval (subclsRp_i_i_i ?x ?xa ?xb) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.subclsSp_i_i_iI",
     "subclsSp ?x ?xa ?xb ==> pred.eval (subclsSp_i_i_i ?x ?xa ?xb) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.SelectMethodDef_aux_i_i_iI",
     "SelectMethodDef_aux ?x ?xa ?xb ==>
      pred.eval (SelectMethodDef_aux_i_i_i ?x ?xa ?xb) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.WTDynCast_ex_i_i_iI",
     "WTDynCast_ex ?x ?xa ?xb ==>
      pred.eval (WTDynCast_ex_i_i_i ?x ?xa ?xb) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.WTStaticCast_sub_i_i_iI",
     "WTStaticCast_sub ?x ?xa ?xb ==>
      pred.eval (WTStaticCast_sub_i_i_i ?x ?xa ?xb) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.WTStaticCast_sub_aux_i_i_iI",
     "WTStaticCast_sub_aux ?x ?xa ?xb ==>
      pred.eval (WTStaticCast_sub_aux_i_i_i ?x ?xa ?xb) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.reverse_appI",
     "app ?x ?xa ?xb ==> pred.eval (reverse_app ?xb) (?x, ?xa)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))
           ))),
    ("Execute.app_i_i_iI",
     "app ?x ?xa ?xb ==> pred.eval (app_i_i_i ?x ?xa ?xb) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.map_val2_i_o_oI",
     "map_val2 ?x ?xa ?xb ==> pred.eval (map_val2_i_o_o ?x) (?xa, ?xb)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Execute.map_val2_i_i_iI",
     "map_val2 ?x ?xa ?xb ==> pred.eval (map_val2_i_i_i ?x ?xa ?xb) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.Subobjs_i_i_iI",
     "Subobjs ?x ?xa ?xb ==> pred.eval (Subobjs_i_i_i ?x ?xa ?xb) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.Subobjs\<^sub>R_i_i_iI",
     "Subobjs\<^sub>R ?x ?xa ?xb ==>
      pred.eval (Subobjs\<^sub>R_i_i_i ?x ?xa ?xb) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.path_unique_i_i_iI",
     "?x \<turnstile> Path ?xa to ?xb unique ==>
      pred.eval (path_unique_i_i_i ?x ?xa ?xb) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.widen_i_i_iI",
     "?x \<turnstile> ?xa \<le> ?xb ==>
      pred.eval (widen_i_i_i ?x ?xa ?xb) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.MinimalMethodDefs_unique_aux_o_i_i_iI",
     "MinimalMethodDefs_unique_aux ?x ?xa ?xb ?xc ==>
      pred.eval (MinimalMethodDefs_unique_aux_o_i_i_i ?xa ?xb ?xc) ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_var 3)
           ))),
    ("Execute.path_unique_aux_i_o_i_iI",
     "path_unique_aux ?x ?xa ?xb ?xc ==>
      pred.eval (path_unique_aux_i_o_i_i ?x ?xb ?xc) ?xa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("Execute.widen_unique_aux_i_o_i_iI",
     "widen_unique_aux ?x ?xa ?xb ?xc ==>
      pred.eval (widen_unique_aux_i_o_i_i ?x ?xb ?xc) ?xa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("Execute.Casts_to_i_i_i_oI",
     "?x \<turnstile> ?xa Casts ?xb to ?xc  ==>
      pred.eval (Casts_to_i_i_i_o ?x ?xa ?xb) ?xc",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("Execute.casts_to_i_i_i_oI",
     "?x \<turnstile> ?xa casts ?xb to ?xc  ==>
      pred.eval (casts_to_i_i_i_o ?x ?xa ?xb) ?xc",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("Execute.leq_path1p_i_i_i_oI",
     "leq_path1p ?x ?xa ?xb ?xc ==>
      pred.eval (leq_path1p_i_i_i_o ?x ?xa ?xb) ?xc",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("Execute.leq_path1p_i_i_o_iI",
     "leq_path1p ?x ?xa ?xb ?xc ==>
      pred.eval (leq_path1p_i_i_o_i ?x ?xa ?xc) ?xb",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("Execute.path_via_i_i_i_oI",
     "?x \<turnstile> Path ?xa to ?xb via ?xc  ==>
      pred.eval (path_via_i_i_i_o ?x ?xa ?xb) ?xc",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("Execute.WT_i_i_i_oI",
     "?x,?xa \<turnstile> ?xb :: ?xc ==>
      pred.eval (WT_i_i_i_o ?x ?xa ?xb) ?xc",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("Execute.WTs_i_i_i_oI",
     "?x,?xa \<turnstile> ?xb [::] ?xc ==>
      pred.eval (WTs_i_i_i_o ?x ?xa ?xb) ?xc",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("Execute.LeastFieldDecl_aux_i_i_i_iI",
     "LeastFieldDecl_aux ?x ?xa ?xb ?xc ==>
      pred.eval (LeastFieldDecl_aux_i_i_i_i ?x ?xa ?xb ?xc) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.LeastMethodDef_unique_i_i_i_iI",
     "LeastMethodDef_unique ?x ?xa ?xb ?xc ==>
      pred.eval (LeastMethodDef_unique_i_i_i_i ?x ?xa ?xb ?xc) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.LeastMethodDef_unique_aux_i_i_i_iI",
     "LeastMethodDef_unique_aux ?x ?xa ?xb ?xc ==>
      pred.eval (LeastMethodDef_unique_aux_i_i_i_i ?x ?xa ?xb ?xc) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.MinimalMethodDefs_unique_i_i_i_iI",
     "MinimalMethodDefs_unique ?x ?xa ?xb ?xc ==>
      pred.eval (MinimalMethodDefs_unique_i_i_i_i ?x ?xa ?xb ?xc) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.MinimalMethodDefs_unique_aux_i_i_i_iI",
     "MinimalMethodDefs_unique_aux ?x ?xa ?xb ?xc ==>
      pred.eval (MinimalMethodDefs_unique_aux_i_i_i_i ?x ?xa ?xb ?xc) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.path_unique_aux_i_i_i_iI",
     "path_unique_aux ?x ?xa ?xb ?xc ==>
      pred.eval (path_unique_aux_i_i_i_i ?x ?xa ?xb ?xc) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.widen_unique_i_i_i_iI",
     "widen_unique ?x ?xa ?xb ?xc ==>
      pred.eval (widen_unique_i_i_i_i ?x ?xa ?xb ?xc) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.widen_unique_aux_i_i_i_iI",
     "widen_unique_aux ?x ?xa ?xb ?xc ==>
      pred.eval (widen_unique_aux_i_i_i_i ?x ?xa ?xb ?xc) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.Casts_to_i_i_i_iI",
     "?x \<turnstile> ?xa Casts ?xb to ?xc  ==>
      pred.eval (Casts_to_i_i_i_i ?x ?xa ?xb ?xc) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.casts_to_i_i_i_iI",
     "?x \<turnstile> ?xa casts ?xb to ?xc  ==>
      pred.eval (casts_to_i_i_i_i ?x ?xa ?xb ?xc) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.leq_path1p_i_i_o_oI",
     "leq_path1p ?x ?xa ?xb ?xc ==>
      pred.eval (leq_path1p_i_i_o_o ?x ?xa) (?xb, ?xc)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Execute.leq_path1p_i_i_i_iI",
     "leq_path1p ?x ?xa ?xb ?xc ==>
      pred.eval (leq_path1p_i_i_i_i ?x ?xa ?xb ?xc) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.path_via_i_i_i_iI",
     "?x \<turnstile> Path ?xa to ?xb via ?xc  ==>
      pred.eval (path_via_i_i_i_i ?x ?xa ?xb ?xc) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.WT_i_i_i_iI",
     "?x,?xa \<turnstile> ?xb :: ?xc ==>
      pred.eval (WT_i_i_i_i ?x ?xa ?xb ?xc) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.WTs_i_i_i_iI",
     "?x,?xa \<turnstile> ?xb [::] ?xc ==>
      pred.eval (WTs_i_i_i_i ?x ?xa ?xb ?xc) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.leq_path_unfold",
     "?P,?C \<turnstile> ?Cs \<sqsubseteq> ?Ds =
      (leq_path1p ?P ?C)^** ?Cs ?Ds",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2)),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 3),
         template_var 2))),
    ("Execute.card_eq_1_iff_ex1", "?x : ?A ==> (card ?A = 1) = (?A = {?x})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            )],
       template_bimplication
        (template_equation
          (template_app (template_hole 4, template_var 0), template_hole 3),
         template_equation
          (template_var 0,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0))))),
    ("Execute.init_obj'_intros",
     "Subobjs ?P ?C ?Cs ==>
      init_obj' ?P ?C (?Cs, init_class_fieldmap' ?P (last ?Cs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("Execute.OverriderMethodDefs'_i_i_i_o_iI",
     "OverriderMethodDefs' ?x ?xa ?xb ?xc ?xd ==>
      pred.eval (OverriderMethodDefs'_i_i_i_o_i ?x ?xa ?xb ?xd) ?xc",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("Execute.OverriderMethodDefs'_i_i_i_i_oI",
     "OverriderMethodDefs' ?x ?xa ?xb ?xc ?xd ==>
      pred.eval (OverriderMethodDefs'_i_i_i_i_o ?x ?xa ?xb ?xc) ?xd",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("Execute.LeastFieldDecl_i_i_i_o_iI",
     "?x \<turnstile> ?xa has least ?xb:?xc via ?xd ==>
      pred.eval (LeastFieldDecl_i_i_i_o_i ?x ?xa ?xb ?xd) ?xc",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("Execute.LeastFieldDecl_i_i_i_i_oI",
     "?x \<turnstile> ?xa has least ?xb:?xc via ?xd ==>
      pred.eval (LeastFieldDecl_i_i_i_i_o ?x ?xa ?xb ?xc) ?xd",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("Execute.casts_to_code",
     "case ?T of Class C => False | _ => True ==>
      ?P \<turnstile> ?T casts ?v to ?v ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_hole 2),
                      template_hole 2),
                    template_hole 2),
                  template_hole 2),
                t_empty),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2),
               template_var 0),
             template_var 0)
           ))),
    ("Execute.eq_i_oE",
     "[| pred.eval (eq_i_o ?x) ?xa; Predicate.eq ?x ?xa ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.eq_o_iE",
     "[| pred.eval (eq_o_i ?xa) ?x; Predicate.eq ?x ?xa ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.lastP_i_oE",
     "[| pred.eval (lastP_i_o ?x) ?xa; lastP ?x ?xa ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.map_val_i_oE",
     "[| pred.eval (map_val_i_o ?x) ?xa; map_val ?x ?xa ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.FieldDecls'_i_i_i_o_oI",
     "FieldDecls' ?x ?xa ?xb ?xc ?xd ==>
      pred.eval (FieldDecls'_i_i_i_o_o ?x ?xa ?xb) (?xc, ?xd)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Execute.FieldDecls'_i_i_i_i_iI",
     "FieldDecls' ?x ?xa ?xb ?xc ?xd ==>
      pred.eval (FieldDecls'_i_i_i_i_i ?x ?xa ?xb ?xc ?xd) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 1, template_var 4),
                       template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.MethodDefs'_i_i_i_o_oI",
     "MethodDefs' ?x ?xa ?xb ?xc ?xd ==>
      pred.eval (MethodDefs'_i_i_i_o_o ?x ?xa ?xb) (?xc, ?xd)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Execute.MethodDefs'_i_i_i_i_iI",
     "MethodDefs' ?x ?xa ?xb ?xc ?xd ==>
      pred.eval (MethodDefs'_i_i_i_i_i ?x ?xa ?xb ?xc ?xd) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 1, template_var 4),
                       template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.MinimalMethodDefs'_i_i_i_o_oI",
     "MinimalMethodDefs' ?x ?xa ?xb ?xc ?xd ==>
      pred.eval (MinimalMethodDefs'_i_i_i_o_o ?x ?xa ?xb) (?xc, ?xd)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Execute.OverriderMethodDefs'_i_i_i_o_oI",
     "OverriderMethodDefs' ?x ?xa ?xb ?xc ?xd ==>
      pred.eval (OverriderMethodDefs'_i_i_i_o_o ?x ?xa ?xb) (?xc, ?xd)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Execute.OverriderMethodDefs'_i_i_i_i_iI",
     "OverriderMethodDefs' ?x ?xa ?xb ?xc ?xd ==>
      pred.eval (OverriderMethodDefs'_i_i_i_i_i ?x ?xa ?xb ?xc ?xd) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 1, template_var 4),
                       template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.FinalOverriderMethodDef_i_i_i_o_oI",
     "?x \<turnstile> ?xa has overrider ?xb = ?xc via ?xd ==>
      pred.eval (FinalOverriderMethodDef_i_i_i_o_o ?x ?xa ?xb) (?xc, ?xd)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Execute.LeastFieldDecl_i_i_i_o_oI",
     "?x \<turnstile> ?xa has least ?xb:?xc via ?xd ==>
      pred.eval (LeastFieldDecl_i_i_i_o_o ?x ?xa ?xb) (?xc, ?xd)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Execute.LeastFieldDecl_i_i_i_i_iI",
     "?x \<turnstile> ?xa has least ?xb:?xc via ?xd ==>
      pred.eval (LeastFieldDecl_i_i_i_i_i ?x ?xa ?xb ?xc ?xd) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 1, template_var 4),
                       template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.LeastMethodDef_i_i_i_o_oI",
     "?x \<turnstile> ?xa has least ?xb = ?xc via ?xd ==>
      pred.eval (LeastMethodDef_i_i_i_o_o ?x ?xa ?xb) (?xc, ?xd)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Execute.lastP_intro_2",
     "[| ?xu ~= []; lastP ?xu ?res |] ==> lastP (?z # ?xu) ?res",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_var 1)
           ))),
    ("Execute.eq_i_iE",
     "[| pred.eval (eq_i_i ?x ?xa) ?y; Predicate.eq ?x ?xa ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.lastP_i_iE",
     "[| pred.eval (lastP_i_i ?x ?xa) ?y; lastP ?x ?xa ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.map_val_i_iE",
     "[| pred.eval (map_val_i_i ?x ?xa) ?y; map_val ?x ?xa ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.app_i_i_oE",
     "[| pred.eval (app_i_i_o ?x ?xa) ?xb; app ?x ?xa ?xb ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.app_i_o_iE",
     "[| pred.eval (app_i_o_i ?x ?xb) ?xa; app ?x ?xa ?xb ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.app_o_i_iE",
     "[| pred.eval (app_o_i_i ?xa ?xb) ?x; app ?x ?xa ?xb ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.Subobjs\<^sub>R_i_i_oE",
     "[| pred.eval (Subobjs\<^sub>R_i_i_o ?x ?xa) ?xb;
         Subobjs\<^sub>R ?x ?xa ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.Subobjs_i_i_oE",
     "[| pred.eval (Subobjs_i_i_o ?x ?xa) ?xb; Subobjs ?x ?xa ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.path_unique_i_i_oE",
     "[| pred.eval (path_unique_i_i_o ?x ?xa) ?xb;
         ?x \<turnstile> Path ?xa to ?xb unique ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.subcls1p_i_i_oE",
     "[| pred.eval (subcls1p_i_i_o ?x ?xa) ?xb;
         subcls1p ?x ?xa ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.subclsRp_i_i_oE",
     "[| pred.eval (subclsRp_i_i_o ?x ?xa) ?xb;
         subclsRp ?x ?xa ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.subclsSp_i_i_oE",
     "[| pred.eval (subclsSp_i_i_o ?x ?xa) ?xb;
         subclsSp ?x ?xa ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.init_obj_predE",
     "[| pred.eval (init_obj_pred ?x ?xa) ?xb;
         init_obj' ?x ?xa ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.Set_project_set",
     "Set_project (set ?xs) ?a =
      set (List.map_filter
            (%(a', b). if ?a = a' then \<lfloor>b\<rfloor> else None) ?xs)",
     template_equation
      (template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 1)),
         template_var 0),
       template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5, template_app (template_hole 4, t_empty)),
           template_var 1)))),
    ("Execute.map_val2_conv",
     "(?xs = map Val ?ys @ throw ?e # ?zs) =
      map_val2 ?xs ?ys (throw ?e # ?zs)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 3),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 2)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_var 0))),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0)))),
    ("Execute.big_stepI",
     "?x,?xa \<turnstile> \<langle>?xb,?xc\<rangle> \<Rightarrow>'
                          \<langle>?xd,?xe\<rangle> ==>
      pred.eval (big_step ?x ?xa ?xb ?xc) (?xd, ?xe)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Execute.big_stepsI",
     "?x,?xa \<turnstile> \<langle>?xb,?xc\<rangle> [\<Rightarrow>']
                          \<langle>?xd,?xe\<rangle> ==>
      pred.eval (big_steps ?x ?xa ?xb ?xc) (?xd, ?xe)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Execute.SelectMethodDef_i_i_i_i_o_oI",
     "?x \<turnstile> (?xa,?xb) selects ?xc = ?xd via ?xe ==>
      pred.eval (SelectMethodDef_i_i_i_i_o_o ?x ?xa ?xb ?xc) (?xd, ?xe)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Execute.SelectMethodDef_i_i_i_i_i_iI",
     "?x \<turnstile> (?xa,?xb) selects ?xc = ?xd via ?xe ==>
      pred.eval (SelectMethodDef_i_i_i_i_i_i ?x ?xa ?xb ?xc ?xd ?xe) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 1, template_var 5),
                         template_var 4),
                       template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.SubobjsR_Rep_code",
     "[| subclsRp ?P ?C ?D; Subobjs\<^sub>R ?P ?D ?Cs |]
      ==> Subobjs\<^sub>R ?P ?C (?C # ?Cs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Execute.reverse_appE",
     "[| pred.eval (reverse_app ?xb) (?x, ?xa); app ?x ?xa ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 3)),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 3)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.map_val2_i_o_oE",
     "[| pred.eval (map_val2_i_o_o ?x) (?xa, ?xb);
         map_val2 ?x ?xa ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 3)),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.SelectMethodDef_aux_i_i_iE",
     "[| pred.eval (SelectMethodDef_aux_i_i_i ?x ?xa ?xb) ?y;
         SelectMethodDef_aux ?x ?xa ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.Subobjs\<^sub>R_i_i_iE",
     "[| pred.eval (Subobjs\<^sub>R_i_i_i ?x ?xa ?xb) ?y;
         Subobjs\<^sub>R ?x ?xa ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.Subobjs_i_i_iE",
     "[| pred.eval (Subobjs_i_i_i ?x ?xa ?xb) ?y;
         Subobjs ?x ?xa ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.WTDynCast_ex_i_i_iE",
     "[| pred.eval (WTDynCast_ex_i_i_i ?x ?xa ?xb) ?y;
         WTDynCast_ex ?x ?xa ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.WTStaticCast_sub_aux_i_i_iE",
     "[| pred.eval (WTStaticCast_sub_aux_i_i_i ?x ?xa ?xb) ?y;
         WTStaticCast_sub_aux ?x ?xa ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.WTStaticCast_sub_i_i_iE",
     "[| pred.eval (WTStaticCast_sub_i_i_i ?x ?xa ?xb) ?y;
         WTStaticCast_sub ?x ?xa ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.app_i_i_iE",
     "[| pred.eval (app_i_i_i ?x ?xa ?xb) ?y; app ?x ?xa ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.map_val2_i_i_iE",
     "[| pred.eval (map_val2_i_i_i ?x ?xa ?xb) ?y;
         map_val2 ?x ?xa ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.path_unique_i_i_iE",
     "[| pred.eval (path_unique_i_i_i ?x ?xa ?xb) ?y;
         ?x \<turnstile> Path ?xa to ?xb unique ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.subcls1p_i_i_iE",
     "[| pred.eval (subcls1p_i_i_i ?x ?xa ?xb) ?y;
         subcls1p ?x ?xa ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.subclsRp_i_i_iE",
     "[| pred.eval (subclsRp_i_i_i ?x ?xa ?xb) ?y;
         subclsRp ?x ?xa ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.subclsSp_i_i_iE",
     "[| pred.eval (subclsSp_i_i_i ?x ?xa ?xb) ?y;
         subclsSp ?x ?xa ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.widen_i_i_iE",
     "[| pred.eval (widen_i_i_i ?x ?xa ?xb) ?y;
         ?x \<turnstile> ?xa \<le> ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.LeastMethodDef_unfold",
     "(?P \<turnstile> ?C has least ?M = ?mthd via ?Cs) =
      (MethodDefs' ?P ?C ?M ?Cs ?mthd &
       LeastMethodDef_unique ?P ?C ?M ?Cs)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3),
             template_var 2),
           template_var 0)))),
    ("Execute.init_class_fieldmap'_code",
     "init_class_fieldmap' ?P ?C =
      AList_Mapping.Mapping
       (map (%(F, T). (F, default_val T)) (fst (snd (the (class ?P ?C)))))",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 1), template_var 0),
       template_app
        (template_hole 8,
         template_app
          (template_app
            (template_hole 7, template_app (template_hole 6, t_empty)),
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)))))))),
    ("Execute.ThrowThrow'",
     "?P,?E \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<Rightarrow>'
                         \<langle>throw ?e',?s\<^sub>1\<rangle> ==>
      ?P,?E \<turnstile> \<langle>throw ?e,
                          ?s\<^sub>0\<rangle> \<Rightarrow>'
                         \<langle>throw ?e',?s\<^sub>1\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_app (template_hole 0, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 5),
                     template_var 4),
                   template_app (template_hole 0, template_var 3)),
                 template_var 2),
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Execute.WT_i_i_i_oE",
     "[| pred.eval (WT_i_i_i_o ?x ?xa ?xb) ?xc;
         ?x,?xa \<turnstile> ?xb :: ?xc ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.WTs_i_i_i_oE",
     "[| pred.eval (WTs_i_i_i_o ?x ?xa ?xb) ?xc;
         ?x,?xa \<turnstile> ?xb [::] ?xc ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.MinimalMethodDefs_unique_aux_o_i_i_iE",
     "[| pred.eval (MinimalMethodDefs_unique_aux_o_i_i_i ?xa ?xb ?xc) ?x;
         MinimalMethodDefs_unique_aux ?x ?xa ?xb ?xc ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.leq_path1p_i_i_i_oE",
     "[| pred.eval (leq_path1p_i_i_i_o ?x ?xa ?xb) ?xc;
         leq_path1p ?x ?xa ?xb ?xc ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.leq_path1p_i_i_o_iE",
     "[| pred.eval (leq_path1p_i_i_o_i ?x ?xa ?xc) ?xb;
         leq_path1p ?x ?xa ?xb ?xc ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3),
                   template_var 1),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.path_via_i_i_i_oE",
     "[| pred.eval (path_via_i_i_i_o ?x ?xa ?xb) ?xc;
         ?x \<turnstile> Path ?xa to ?xb via ?xc  ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.Casts_to_i_i_i_oE",
     "[| pred.eval (Casts_to_i_i_i_o ?x ?xa ?xb) ?xc;
         ?x \<turnstile> ?xa Casts ?xb to ?xc  ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.path_unique_aux_i_o_i_iE",
     "[| pred.eval (path_unique_aux_i_o_i_i ?x ?xb ?xc) ?xa;
         path_unique_aux ?x ?xa ?xb ?xc ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 1),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.widen_unique_aux_i_o_i_iE",
     "[| pred.eval (widen_unique_aux_i_o_i_i ?x ?xb ?xc) ?xa;
         widen_unique_aux ?x ?xa ?xb ?xc ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 1),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.casts_to_i_i_i_oE",
     "[| pred.eval (casts_to_i_i_i_o ?x ?xa ?xb) ?xc;
         ?x \<turnstile> ?xa casts ?xb to ?xc  ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.Var'",
     "?l ?V = \<lfloor>?v\<rfloor> ==>
      ?P,?E \<turnstile> \<langle>Var ?V,(?h, ?l)\<rangle> \<Rightarrow>'
                         \<langle>Val ?v,(?h, ?l)\<rangle>",
     template_implication
      ([template_equation
         (template_app (template_var 5, template_var 4),
          template_app (template_hole 4, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 1),
                   template_app (template_hole 2, template_var 4)),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 5)),
               template_app (template_hole 0, template_var 3)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 5))
           ))),
    ("Execute.FinalOverriderMethodDef_aux_aux_Piiii_i_i_i_i_i_iI",
     "FinalOverriderMethodDef_aux_aux ?x ?xa ?xb ?xc ?xd ?xe ?xf ==>
      pred.eval
       (FinalOverriderMethodDef_aux_aux_Piiii_i_i_i_i_i_i ?x ?xa ?xb ?xc ?xd
         ?xe ?xf)
       ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 3, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 1, template_var 6),
                           template_var 5),
                         template_var 4),
                       template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.DynCastNull'",
     "?P,?E \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<Rightarrow>'
                         \<langle>null,?s\<^sub>1\<rangle> ==>
      ?P,?E \<turnstile> \<langle>Cast ?C ?e,
                          ?s\<^sub>0\<rangle> \<Rightarrow>'
                         \<langle>null,?s\<^sub>1\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_app (template_hole 2, template_hole 1)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 3, template_var 5),
                     template_var 4),
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 3)),
                 template_var 2),
               template_app (template_hole 2, template_hole 1)),
             template_var 1)
           ))),
    ("Execute.StaticCastNull'",
     "?P,?E \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<Rightarrow>'
                         \<langle>null,?s\<^sub>1\<rangle> ==>
      ?P,?E \<turnstile> \<langle>\<lparr>?C\<rparr>?e,
                          ?s\<^sub>0\<rangle> \<Rightarrow>'
                         \<langle>null,?s\<^sub>1\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_app (template_hole 2, template_hole 1)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 3, template_var 5),
                     template_var 4),
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 3)),
                 template_var 2),
               template_app (template_hole 2, template_hole 1)),
             template_var 1)
           ))),
    ("Execute.DynCastThrow'",
     "?P,?E \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<Rightarrow>'
                         \<langle>throw ?e',?s\<^sub>1\<rangle> ==>
      ?P,?E \<turnstile> \<langle>Cast ?C ?e,
                          ?s\<^sub>0\<rangle> \<Rightarrow>'
                         \<langle>throw ?e',?s\<^sub>1\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 2, template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 6),
                     template_var 5),
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 4)),
                 template_var 3),
               template_app (template_hole 1, template_var 2)),
             template_var 1)
           ))),
    ("Execute.LAssThrow'",
     "?P,?E \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<Rightarrow>'
                         \<langle>throw ?e',?s\<^sub>1\<rangle> ==>
      ?P,?E \<turnstile> \<langle>?V:=?e,?s\<^sub>0\<rangle> \<Rightarrow>'
                         \<langle>throw ?e',?s\<^sub>1\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 2, template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 6),
                     template_var 5),
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 4)),
                 template_var 3),
               template_app (template_hole 1, template_var 2)),
             template_var 1)
           ))),
    ("Execute.StaticCastThrow'",
     "?P,?E \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<Rightarrow>'
                         \<langle>throw ?e',?s\<^sub>1\<rangle> ==>
      ?P,?E \<turnstile> \<langle>\<lparr>?C\<rparr>?e,
                          ?s\<^sub>0\<rangle> \<Rightarrow>'
                         \<langle>throw ?e',?s\<^sub>1\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 2, template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 6),
                     template_var 5),
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 4)),
                 template_var 3),
               template_app (template_hole 1, template_var 2)),
             template_var 1)
           ))),
    ("Execute.WhileCondThrow'",
     "?P,?E \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<Rightarrow>'
                         \<langle>throw ?e',?s\<^sub>1\<rangle> ==>
      ?P,?E \<turnstile> \<langle>while (?e) ?c,
                          ?s\<^sub>0\<rangle> \<Rightarrow>'
                         \<langle>throw ?e',?s\<^sub>1\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 2, template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 6),
                     template_var 5),
                   template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 0)),
                 template_var 3),
               template_app (template_hole 1, template_var 2)),
             template_var 1)
           ))),
    ("Execute.SeqThrow'",
     "?P,?E \<turnstile> \<langle>?e\<^sub>0,
                          ?s\<^sub>0\<rangle> \<Rightarrow>'
                         \<langle>throw ?e,?s\<^sub>1\<rangle> ==>
      ?P,?E \<turnstile> \<langle>?e\<^sub>0;; ?e\<^sub>1,
                          ?s\<^sub>0\<rangle> \<Rightarrow>'
                         \<langle>throw ?e,?s\<^sub>1\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 2, template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 6),
                     template_var 5),
                   template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 0)),
                 template_var 3),
               template_app (template_hole 1, template_var 2)),
             template_var 1)
           ))),
    ("Execute.leq_path1p_i_i_o_oE",
     "[| pred.eval (leq_path1p_i_i_o_o ?x ?xa) (?xb, ?xc);
         leq_path1p ?x ?xa ?xb ?xc ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.Casts_to_i_i_i_iE",
     "[| pred.eval (Casts_to_i_i_i_i ?x ?xa ?xb ?xc) ?y;
         ?x \<turnstile> ?xa Casts ?xb to ?xc  ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.LeastFieldDecl_aux_i_i_i_iE",
     "[| pred.eval (LeastFieldDecl_aux_i_i_i_i ?x ?xa ?xb ?xc) ?y;
         LeastFieldDecl_aux ?x ?xa ?xb ?xc ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.LeastMethodDef_unique_aux_i_i_i_iE",
     "[| pred.eval (LeastMethodDef_unique_aux_i_i_i_i ?x ?xa ?xb ?xc) ?y;
         LeastMethodDef_unique_aux ?x ?xa ?xb ?xc ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.LeastMethodDef_unique_i_i_i_iE",
     "[| pred.eval (LeastMethodDef_unique_i_i_i_i ?x ?xa ?xb ?xc) ?y;
         LeastMethodDef_unique ?x ?xa ?xb ?xc ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.MinimalMethodDefs_unique_aux_i_i_i_iE",
     "[| pred.eval (MinimalMethodDefs_unique_aux_i_i_i_i ?x ?xa ?xb ?xc) ?y;
         MinimalMethodDefs_unique_aux ?x ?xa ?xb ?xc ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.MinimalMethodDefs_unique_i_i_i_iE",
     "[| pred.eval (MinimalMethodDefs_unique_i_i_i_i ?x ?xa ?xb ?xc) ?y;
         MinimalMethodDefs_unique ?x ?xa ?xb ?xc ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.WT_i_i_i_iE",
     "[| pred.eval (WT_i_i_i_i ?x ?xa ?xb ?xc) ?y;
         ?x,?xa \<turnstile> ?xb :: ?xc ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.WTs_i_i_i_iE",
     "[| pred.eval (WTs_i_i_i_i ?x ?xa ?xb ?xc) ?y;
         ?x,?xa \<turnstile> ?xb [::] ?xc ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.casts_to_i_i_i_iE",
     "[| pred.eval (casts_to_i_i_i_i ?x ?xa ?xb ?xc) ?y;
         ?x \<turnstile> ?xa casts ?xb to ?xc  ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.leq_path1p_i_i_i_iE",
     "[| pred.eval (leq_path1p_i_i_i_i ?x ?xa ?xb ?xc) ?y;
         leq_path1p ?x ?xa ?xb ?xc ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.path_unique_aux_i_i_i_iE",
     "[| pred.eval (path_unique_aux_i_i_i_i ?x ?xa ?xb ?xc) ?y;
         path_unique_aux ?x ?xa ?xb ?xc ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.path_via_i_i_i_iE",
     "[| pred.eval (path_via_i_i_i_i ?x ?xa ?xb ?xc) ?y;
         ?x \<turnstile> Path ?xa to ?xb via ?xc  ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.widen_unique_aux_i_i_i_iE",
     "[| pred.eval (widen_unique_aux_i_i_i_i ?x ?xa ?xb ?xc) ?y;
         widen_unique_aux ?x ?xa ?xb ?xc ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.widen_unique_i_i_i_iE",
     "[| pred.eval (widen_unique_i_i_i_i ?x ?xa ?xb ?xc) ?y;
         widen_unique ?x ?xa ?xb ?xc ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.subcls1p_code",
     "[| class ?P ?C = \<lfloor>(?Bs, ?rest)\<rfloor>;
         Predicate_Compile.contains (baseClasses ?Bs) ?D |]
      ==> subcls1p ?P ?C ?D",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 4), template_var 3),
          template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3),
             template_var 0)
           ))),
    ("Execute.CondThrow'",
     "?P,?E \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<Rightarrow>'
                         \<langle>throw ?e',?s\<^sub>1\<rangle> ==>
      ?P,?E \<turnstile> \<langle>if (?e) ?e\<^sub>1 else ?e\<^sub>2,
                          ?s\<^sub>0\<rangle> \<Rightarrow>'
                         \<langle>throw ?e',?s\<^sub>1\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 2, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_app (template_hole 1, template_var 3)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 7),
                     template_var 6),
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 1),
                     template_var 0)),
                 template_var 4),
               template_app (template_hole 1, template_var 3)),
             template_var 2)
           ))),
    ("Execute.FAccThrow'",
     "?P,?E \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<Rightarrow>'
                         \<langle>throw ?e',?s\<^sub>1\<rangle> ==>
      ?P,?E \<turnstile> \<langle>?e\<bullet>?F{?Cs},
                          ?s\<^sub>0\<rangle> \<Rightarrow>'
                         \<langle>throw ?e',?s\<^sub>1\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 2, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_app (template_hole 1, template_var 3)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 7),
                     template_var 6),
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 1),
                     template_var 0)),
                 template_var 4),
               template_app (template_hole 1, template_var 3)),
             template_var 2)
           ))),
    ("Execute.BinOpThrow1'",
     "?P,?E \<turnstile> \<langle>?e\<^sub>1,
                          ?s\<^sub>0\<rangle> \<Rightarrow>'
                         \<langle>throw ?e,?s\<^sub>1\<rangle> ==>
      ?P,?E \<turnstile> \<langle>?e\<^sub>1 \<guillemotleft>?bop\<guillemotright> ?e\<^sub>2,
                          ?s\<^sub>0\<rangle> \<Rightarrow>'
                         \<langle>throw ?e,?s\<^sub>1\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 2, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_app (template_hole 1, template_var 3)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 7),
                     template_var 6),
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 1),
                     template_var 0)),
                 template_var 4),
               template_app (template_hole 1, template_var 3)),
             template_var 2)
           ))),
    ("Execute.WhileF'",
     "?P,?E \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<Rightarrow>'
                         \<langle>false,?s\<^sub>1\<rangle> ==>
      ?P,?E \<turnstile> \<langle>while (?e) ?c,
                          ?s\<^sub>0\<rangle> \<Rightarrow>'
                         \<langle>unit,?s\<^sub>1\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 5, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_hole 2))),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 5, template_var 5),
                     template_var 4),
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 0)),
                 template_var 2),
               template_app (template_hole 4, template_hole 0)),
             template_var 1)
           ))),
    ("Execute.rtranclp_FioB_i_oI",
     "[| ?x1.0^** ?xa ?xb; (%xa. pred.eval (?x xa)) = ?x1.0 |]
      ==> pred.eval (rtranclp_FioB_i_o ?x ?xa) ?xb",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_equation (t_empty, template_var 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_var 1)
           ))),
    ("Execute.LeastMethodDef_intro",
     "[| MethodDefs' ?P ?C ?M ?Cs ?mthd;
         LeastMethodDef_unique ?P ?C ?M ?Cs |]
      ==> ?P \<turnstile> ?C has least ?M = ?mthd via ?Cs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 0),
             template_var 1)
           ))),
    ("Execute.LeastFieldDecl_i_i_i_o_iE",
     "[| pred.eval (LeastFieldDecl_i_i_i_o_i ?x ?xa ?xb ?xd) ?xc;
         ?x \<turnstile> ?xa has least ?xb:?xc via ?xd ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 4),
                     template_var 3),
                   template_var 1),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.LeastFieldDecl_i_i_i_i_oE",
     "[| pred.eval (LeastFieldDecl_i_i_i_i_o ?x ?xa ?xb ?xc) ?xd;
         ?x \<turnstile> ?xa has least ?xb:?xc via ?xd ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.OverriderMethodDefs'_i_i_i_o_iE",
     "[| pred.eval (OverriderMethodDefs'_i_i_i_o_i ?x ?xa ?xb ?xd) ?xc;
         OverriderMethodDefs' ?x ?xa ?xb ?xc ?xd ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 4),
                     template_var 3),
                   template_var 1),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.OverriderMethodDefs'_i_i_i_i_oE",
     "[| pred.eval (OverriderMethodDefs'_i_i_i_i_o ?x ?xa ?xb ?xc) ?xd;
         OverriderMethodDefs' ?x ?xa ?xb ?xc ?xd ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.subclsRp_code",
     "[| class ?P ?C = \<lfloor>(?Bs, ?rest)\<rfloor>;
         Predicate_Compile.contains (set ?Bs) (Repeats ?D) |]
      ==> subclsRp ?P ?C ?D",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 4), template_var 3),
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 2)),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3),
             template_var 0)
           ))),
    ("Execute.subclsSp_code",
     "[| class ?P ?C = \<lfloor>(?Bs, ?rest)\<rfloor>;
         Predicate_Compile.contains (set ?Bs) (Shares ?D) |]
      ==> subclsSp ?P ?C ?D",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 4), template_var 3),
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 2)),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3),
             template_var 0)
           ))),
    ("Execute.CallObjThrow'",
     "?P,?E \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<Rightarrow>'
                         \<langle>throw ?e',?s\<^sub>1\<rangle> ==>
      ?P,?E \<turnstile> \<langle>Call ?e ?Copt ?M ?es,
                          ?s\<^sub>0\<rangle> \<Rightarrow>'
                         \<langle>throw ?e',?s\<^sub>1\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 2, template_var 8),
                      template_var 7),
                    template_var 6),
                  template_var 5),
                template_app (template_hole 1, template_var 4)),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 8),
                     template_var 7),
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 6),
                         template_var 2),
                       template_var 1),
                     template_var 0)),
                 template_var 5),
               template_app (template_hole 1, template_var 4)),
             template_var 3)
           ))),
    ("Execute.ConsThrow'",
     "?P,?E \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<Rightarrow>'
                         \<langle>throw ?e',?s\<^sub>1\<rangle> ==>
      ?P,?E \<turnstile> \<langle>?e # ?es,
                          ?s\<^sub>0\<rangle> [\<Rightarrow>']
                         \<langle>throw ?e' # ?es,?s\<^sub>1\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_app (template_hole 2, template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 6),
                     template_var 5),
                   template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 0)),
                 template_var 3),
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 2, template_var 2)),
                 template_var 0)),
             template_var 1)
           ))),
    ("Execute.FAssThrow1'",
     "?P,?E \<turnstile> \<langle>?e\<^sub>1,
                          ?s\<^sub>0\<rangle> \<Rightarrow>'
                         \<langle>throw ?e',?s\<^sub>1\<rangle> ==>
      ?P,?E \<turnstile> \<langle>?e\<^sub>1\<bullet>?F{?Cs} := ?e\<^sub>2,
                          ?s\<^sub>0\<rangle> \<Rightarrow>'
                         \<langle>throw ?e',?s\<^sub>1\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 2, template_var 8),
                      template_var 7),
                    template_var 6),
                  template_var 5),
                template_app (template_hole 1, template_var 4)),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 8),
                     template_var 7),
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 6),
                         template_var 2),
                       template_var 1),
                     template_var 0)),
                 template_var 5),
               template_app (template_hole 1, template_var 4)),
             template_var 3)
           ))),
    ("Execute.Throw'",
     "?P,?E \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<Rightarrow>'
                         \<langle>ref ?r,?s\<^sub>1\<rangle> ==>
      ?P,?E \<turnstile> \<langle>throw ?e,
                          ?s\<^sub>0\<rangle> \<Rightarrow>'
                         \<langle>Throw ?r,?s\<^sub>1\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 1))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 3, template_var 5),
                     template_var 4),
                   template_app (template_hole 0, template_var 3)),
                 template_var 2),
               template_app
                (template_hole 0,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 1)))),
             template_var 0)
           ))),
    ("Execute.rtranclp_FioB_i_iI",
     "[| ?x1.0^** ?xa ?xb; (%xa. pred.eval (?x xa)) = ?x1.0 |]
      ==> pred.eval (rtranclp_FioB_i_i ?x ?xa ?xb) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_equation (t_empty, template_var 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 2),
                 template_var 1)),
             template_hole 0)
           ))),
    ("Execute.rtranclp_FioB_i_oE",
     "[| pred.eval (rtranclp_FioB_i_o ?x ?xa) ?xb;
         (%xa. pred.eval (?x xa))^** ?xa ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, t_empty), template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.WTBinOp1",
     "[| ?P,?E \<turnstile> ?e\<^sub>1 :: ?T;
         ?P,?E \<turnstile> ?e\<^sub>2 :: ?T |]
      ==> ?P,?E \<turnstile> ?e\<^sub>1 \<guillemotleft>Eq\<guillemotright> ?e\<^sub>2 :: Boolean",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3),
                template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 4),
                 template_var 3),
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 2),
                   template_hole 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.WTBinOp2",
     "[| ?P,?E \<turnstile> ?e\<^sub>1 :: Integer;
         ?P,?E \<turnstile> ?e\<^sub>2 :: Integer |]
      ==> ?P,?E \<turnstile> ?e\<^sub>1 \<guillemotleft>Add\<guillemotright> ?e\<^sub>2 :: Integer",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_hole 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 0),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2),
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 0),
                 template_var 0)),
             template_hole 2)
           ))),
    ("Execute.LeastFieldDecl_i_i_i_o_oE",
     "[| pred.eval (LeastFieldDecl_i_i_i_o_o ?x ?xa ?xb) (?xc, ?xd);
         ?x \<turnstile> ?xa has least ?xb:?xc via ?xd ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.FieldDecls'_i_i_i_o_oE",
     "[| pred.eval (FieldDecls'_i_i_i_o_o ?x ?xa ?xb) (?xc, ?xd);
         FieldDecls' ?x ?xa ?xb ?xc ?xd ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.MethodDefs'_i_i_i_o_oE",
     "[| pred.eval (MethodDefs'_i_i_i_o_o ?x ?xa ?xb) (?xc, ?xd);
         MethodDefs' ?x ?xa ?xb ?xc ?xd ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.MinimalMethodDefs'_i_i_i_o_oE",
     "[| pred.eval (MinimalMethodDefs'_i_i_i_o_o ?x ?xa ?xb) (?xc, ?xd);
         MinimalMethodDefs' ?x ?xa ?xb ?xc ?xd ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.OverriderMethodDefs'_i_i_i_o_oE",
     "[| pred.eval (OverriderMethodDefs'_i_i_i_o_o ?x ?xa ?xb) (?xc, ?xd);
         OverriderMethodDefs' ?x ?xa ?xb ?xc ?xd ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.FinalOverriderMethodDef_i_i_i_o_oE",
     "[| pred.eval (FinalOverriderMethodDef_i_i_i_o_o ?x ?xa ?xb)
          (?xc, ?xd);
         ?x \<turnstile> ?xa has overrider ?xb = ?xc via ?xd ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.LeastMethodDef_i_i_i_o_oE",
     "[| pred.eval (LeastMethodDef_i_i_i_o_o ?x ?xa ?xb) (?xc, ?xd);
         ?x \<turnstile> ?xa has least ?xb = ?xc via ?xd ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.FieldDecls'_i_i_i_i_iE",
     "[| pred.eval (FieldDecls'_i_i_i_i_i ?x ?xa ?xb ?xc ?xd) ?y;
         FieldDecls' ?x ?xa ?xb ?xc ?xd ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 1, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 6),
                       template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.LeastFieldDecl_i_i_i_i_iE",
     "[| pred.eval (LeastFieldDecl_i_i_i_i_i ?x ?xa ?xb ?xc ?xd) ?y;
         ?x \<turnstile> ?xa has least ?xb:?xc via ?xd ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 1, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 6),
                       template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.MethodDefs'_i_i_i_i_iE",
     "[| pred.eval (MethodDefs'_i_i_i_i_i ?x ?xa ?xb ?xc ?xd) ?y;
         MethodDefs' ?x ?xa ?xb ?xc ?xd ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 1, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 6),
                       template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.OverriderMethodDefs'_i_i_i_i_iE",
     "[| pred.eval (OverriderMethodDefs'_i_i_i_i_i ?x ?xa ?xb ?xc ?xd) ?y;
         OverriderMethodDefs' ?x ?xa ?xb ?xc ?xd ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 1, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 6),
                       template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.rtranclp_FioB_i_iE",
     "[| pred.eval (rtranclp_FioB_i_i ?x ?xa ?xb) ?y;
         (%xa. pred.eval (?x xa))^** ?xa ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 1, t_empty), template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.Subobjs_Sh_code",
     "[| (subcls1p ?P)^** ?C ?C'; subclsSp ?P ?C' ?D;
         Subobjs\<^sub>R ?P ?D ?Cs |]
      ==> Subobjs ?P ?C ?Cs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 4)),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3),
             template_var 0)
           ))),
    ("Execute.FinalOverriderMethodDef_aux_i_i_i_i_i_i_i_i_iI",
     "FinalOverriderMethodDef_aux ?x ?xa ?xb ?xc ?xd ?xe ?xf ?xg ?xh ==>
      pred.eval
       (FinalOverriderMethodDef_aux_i_i_i_i_i_i_i_i_i ?x ?xa ?xb ?xc ?xd ?xe
         ?xf ?xg ?xh)
       ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app (template_hole 3, template_var 8),
                            template_var 7),
                          template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 1, template_var 8),
                               template_var 7),
                             template_var 6),
                           template_var 5),
                         template_var 4),
                       template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.big_stepE",
     "[| pred.eval (big_step ?x ?xa ?xb ?xc) (?xd, ?xe);
         ?x,?xa \<turnstile> \<langle>?xb,?xc\<rangle> \<Rightarrow>'
                             \<langle>?xd,?xe\<rangle> ==>
         ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 2, template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 6),
                         template_var 5),
                       template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.big_stepsE",
     "[| pred.eval (big_steps ?x ?xa ?xb ?xc) (?xd, ?xe);
         ?x,?xa \<turnstile> \<langle>?xb,?xc\<rangle> [\<Rightarrow>']
                             \<langle>?xd,?xe\<rangle> ==>
         ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 2, template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 6),
                         template_var 5),
                       template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.SelectMethodDef_i_i_i_i_o_oE",
     "[| pred.eval (SelectMethodDef_i_i_i_i_o_o ?x ?xa ?xb ?xc) (?xd, ?xe);
         ?x \<turnstile> (?xa,?xb) selects ?xc = ?xd via ?xe ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 2, template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 6),
                         template_var 5),
                       template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.SelectMethodDef_i_i_i_i_i_iE",
     "[| pred.eval (SelectMethodDef_i_i_i_i_i_i ?x ?xa ?xb ?xc ?xd ?xe) ?y;
         ?x \<turnstile> (?xa,?xb) selects ?xc = ?xd via ?xe ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 1, template_var 7),
                          template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 7),
                         template_var 6),
                       template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.widen_subcls'",
     "[| Subobjs ?P ?C ?Cs'; last ?Cs' = ?D; widen_unique ?P ?C ?D ?Cs' |]
      ==> ?P \<turnstile> Class ?C \<le> Class ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 3, template_var 1), template_var 0),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_app (template_hole 0, template_var 2)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Execute.start_heap'_code",
     "start_heap' ?P =
      [addr_of_sys_xcpt NullPointer |-> blank' ?P NullPointer,
       addr_of_sys_xcpt ClassCast |-> blank' ?P ClassCast,
       addr_of_sys_xcpt OutOfMemory |-> blank' ?P OutOfMemory]",
     template_equation
      (template_app (template_hole 8, template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_app (template_hole 7, t_empty),
                       template_app (template_hole 5, template_hole 4)),
                     template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 0),
                         template_hole 4)))),
                 template_app (template_hole 5, template_hole 1)),
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1)))),
           template_app (template_hole 5, template_hole 0)),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 0))))),
    ("Execute.NewFail'",
     "new_Addr' ?h = None ==>
      ?P,?E \<turnstile> \<langle>new ?C,(?h, ?l)\<rangle> \<Rightarrow>'
                         \<langle>Throw
                                   (addr_of_sys_xcpt OutOfMemory,
                                    [OutOfMemory]),
                          (?h, ?l)\<rangle>",
     template_implication
      ([template_equation
         (template_app (template_hole 12, template_var 4),
          template_hole 11)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 10, template_var 3),
                     template_var 2),
                   template_app (template_hole 9, template_var 1)),
                 template_app
                  (template_app (template_hole 8, template_var 4),
                   template_var 0)),
               template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app (template_hole 3, template_hole 2)),
                       template_app
                        (template_app (template_hole 1, template_hole 2),
                         template_hole 0)))))),
             template_app
              (template_app (template_hole 8, template_var 4),
               template_var 0))
           ))),
    ("Execute.ThrowNull'",
     "?P,?E \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<Rightarrow>'
                         \<langle>null,?s\<^sub>1\<rangle> ==>
      ?P,?E \<turnstile> \<langle>throw ?e,
                          ?s\<^sub>0\<rangle> \<Rightarrow>'
                         \<langle>Throw
                                   (addr_of_sys_xcpt NullPointer,
                                    [NullPointer]),
                          ?s\<^sub>1\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 9, template_var 4),
                      template_var 3),
                    template_var 2),
                  template_var 1),
                template_app (template_hole 8, template_hole 7)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 9, template_var 4),
                     template_var 3),
                   template_app (template_hole 6, template_var 2)),
                 template_var 1),
               template_app
                (template_hole 6,
                 template_app
                  (template_hole 8,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app (template_hole 3, template_hole 2)),
                       template_app
                        (template_app (template_hole 1, template_hole 2),
                         template_hole 0)))))),
             template_var 0)
           ))),
    ("Execute.FinalOverriderMethodDef_aux_aux_Piiii_i_i_i_i_i_iE",
     "[| pred.eval
          (FinalOverriderMethodDef_aux_aux_Piiii_i_i_i_i_i_i ?x ?xa ?xb ?xc
            ?xd ?xe ?xf)
          ?y;
         FinalOverriderMethodDef_aux_aux ?x ?xa ?xb ?xc ?xd ?xe ?xf ==>
         ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app (template_hole 1, template_var 8),
                            template_var 7),
                          template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 0, template_var 8),
                           template_var 7),
                         template_var 6),
                       template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.WTStaticCast_new",
     "[| ?P,?E \<turnstile> ?e :: Class ?D; is_class ?P ?C;
         WTStaticCast_sub ?P ?C ?D |]
      ==> ?P,?E \<turnstile> \<lparr>?C\<rparr>?e :: Class ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 3),
                template_var 2),
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 4),
                 template_var 3),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app (template_hole 3, template_var 0))
           ))),
    ("Execute.FAccNull'",
     "?P,?E \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<Rightarrow>'
                         \<langle>null,?s\<^sub>1\<rangle> ==>
      ?P,?E \<turnstile> \<langle>?e\<bullet>?F{?Cs},
                          ?s\<^sub>0\<rangle> \<Rightarrow>'
                         \<langle>Throw
                                   (addr_of_sys_xcpt NullPointer,
                                    [NullPointer]),
                          ?s\<^sub>1\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 10, template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_app (template_hole 9, template_hole 8)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 10, template_var 6),
                     template_var 5),
                   template_app
                    (template_app
                      (template_app (template_hole 7, template_var 4),
                       template_var 1),
                     template_var 0)),
                 template_var 3),
               template_app
                (template_hole 6,
                 template_app
                  (template_hole 9,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app (template_hole 3, template_hole 2)),
                       template_app
                        (template_app (template_hole 1, template_hole 2),
                         template_hole 0)))))),
             template_var 2)
           ))),
    ("Execute.Seq'",
     "[| ?P,?E \<turnstile> \<langle>?e\<^sub>0,
                             ?s\<^sub>0\<rangle> \<Rightarrow>'
                            \<langle>Val ?v,?s\<^sub>1\<rangle>;
         ?P,?E \<turnstile> \<langle>?e\<^sub>1,
                             ?s\<^sub>1\<rangle> \<Rightarrow>'
                            \<langle>?e\<^sub>2,?s\<^sub>2\<rangle> |]
      ==> ?P,?E \<turnstile> \<langle>?e\<^sub>0;; ?e\<^sub>1,
                              ?s\<^sub>0\<rangle> \<Rightarrow>'
                             \<langle>?e\<^sub>2,?s\<^sub>2\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 2, template_var 8),
                      template_var 7),
                    template_var 6),
                  template_var 5),
                template_app (template_hole 1, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 2, template_var 8),
                      template_var 7),
                    template_var 2),
                  template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 8),
                     template_var 7),
                   template_app
                    (template_app (template_hole 0, template_var 6),
                     template_var 2)),
                 template_var 5),
               template_var 1),
             template_var 0)
           ))),
    ("Execute.CondF'",
     "[| ?P,?E \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<Rightarrow>'
                            \<langle>false,?s\<^sub>1\<rangle>;
         ?P,?E \<turnstile> \<langle>?e\<^sub>2,
                             ?s\<^sub>1\<rangle> \<Rightarrow>'
                            \<langle>?e',?s\<^sub>2\<rangle> |]
      ==> ?P,?E \<turnstile> \<langle>if (?e) ?e\<^sub>1 else ?e\<^sub>2,
                              ?s\<^sub>0\<rangle> \<Rightarrow>'
                             \<langle>?e',?s\<^sub>2\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 4, template_var 8),
                      template_var 7),
                    template_var 6),
                  template_var 5),
                template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_hole 1))),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 4, template_var 8),
                      template_var 7),
                    template_var 3),
                  template_var 4),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 4, template_var 8),
                     template_var 7),
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 6),
                       template_var 0),
                     template_var 3)),
                 template_var 5),
               template_var 2),
             template_var 1)
           ))),
    ("Execute.CondT'",
     "[| ?P,?E \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<Rightarrow>'
                            \<langle>true,?s\<^sub>1\<rangle>;
         ?P,?E \<turnstile> \<langle>?e\<^sub>1,
                             ?s\<^sub>1\<rangle> \<Rightarrow>'
                            \<langle>?e',?s\<^sub>2\<rangle> |]
      ==> ?P,?E \<turnstile> \<langle>if (?e) ?e\<^sub>1 else ?e\<^sub>2,
                              ?s\<^sub>0\<rangle> \<Rightarrow>'
                             \<langle>?e',?s\<^sub>2\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 4, template_var 8),
                      template_var 7),
                    template_var 6),
                  template_var 5),
                template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_hole 1))),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 4, template_var 8),
                      template_var 7),
                    template_var 3),
                  template_var 4),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 4, template_var 8),
                     template_var 7),
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 6),
                       template_var 3),
                     template_var 0)),
                 template_var 5),
               template_var 2),
             template_var 1)
           ))),
    ("Execute.FinalOverriderMethodDef_aux_i_i_i_i_i_i_i_i_iE",
     "[| pred.eval
          (FinalOverriderMethodDef_aux_i_i_i_i_i_i_i_i_i ?x ?xa ?xb ?xc ?xd
            ?xe ?xf ?xg ?xh)
          ?y;
         FinalOverriderMethodDef_aux ?x ?xa ?xb ?xc ?xd ?xe ?xf ?xg ?xh ==>
         ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_hole 1, template_var 10),
                                template_var 9),
                              template_var 8),
                            template_var 7),
                          template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 0, template_var 10),
                               template_var 9),
                             template_var 8),
                           template_var 7),
                         template_var 6),
                       template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.LeastFieldDecl_unfold",
     "(?P \<turnstile> ?C has least ?F:?T via ?Cs) =
      (FieldDecls' ?P ?C ?F ?Cs ?T &
       (ALL Cs' T'.
           FieldDecls' ?P ?C ?F Cs' T' --> (leq_path1p ?P ?C)^** ?Cs Cs'))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 7, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 5, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 0),
             template_var 1)),
         template_app (template_hole 4, t_empty)))),
    ("Execute.Cons'",
     "[| ?P,?E \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<Rightarrow>'
                            \<langle>Val ?v,?s\<^sub>1\<rangle>;
         ?P,?E \<turnstile> \<langle>?es,
                             ?s\<^sub>1\<rangle> [\<Rightarrow>']
                            \<langle>?es',?s\<^sub>2\<rangle> |]
      ==> ?P,?E \<turnstile> \<langle>?e # ?es,
                              ?s\<^sub>0\<rangle> [\<Rightarrow>']
                             \<langle>Val ?v # ?es',?s\<^sub>2\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 8),
                      template_var 7),
                    template_var 6),
                  template_var 5),
                template_app (template_hole 2, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 8),
                      template_var 7),
                    template_var 2),
                  template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 8),
                     template_var 7),
                   template_app
                    (template_app (template_hole 0, template_var 6),
                     template_var 2)),
                 template_var 5),
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 2, template_var 4)),
                 template_var 1)),
             template_var 0)
           ))),
    ("Execute.BinOpThrow2'",
     "[| ?P,?E \<turnstile> \<langle>?e\<^sub>1,
                             ?s\<^sub>0\<rangle> \<Rightarrow>'
                            \<langle>Val ?v\<^sub>1,?s\<^sub>1\<rangle>;
         ?P,?E \<turnstile> \<langle>?e\<^sub>2,
                             ?s\<^sub>1\<rangle> \<Rightarrow>'
                            \<langle>throw ?e,?s\<^sub>2\<rangle> |]
      ==> ?P,?E \<turnstile> \<langle>?e\<^sub>1 \<guillemotleft>?bop\<guillemotright> ?e\<^sub>2,
                              ?s\<^sub>0\<rangle> \<Rightarrow>'
                             \<langle>throw ?e,?s\<^sub>2\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 9),
                      template_var 8),
                    template_var 7),
                  template_var 6),
                template_app (template_hole 2, template_var 5)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 9),
                      template_var 8),
                    template_var 3),
                  template_var 4),
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 3, template_var 9),
                     template_var 8),
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 7),
                       template_var 0),
                     template_var 3)),
                 template_var 6),
               template_app (template_hole 1, template_var 2)),
             template_var 1)
           ))),
    ("Execute.WhileBodyThrow'",
     "[| ?P,?E \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<Rightarrow>'
                            \<langle>true,?s\<^sub>1\<rangle>;
         ?P,?E \<turnstile> \<langle>?c,?s\<^sub>1\<rangle> \<Rightarrow>'
                            \<langle>throw ?e',?s\<^sub>2\<rangle> |]
      ==> ?P,?E \<turnstile> \<langle>while (?e) ?c,
                              ?s\<^sub>0\<rangle> \<Rightarrow>'
                             \<langle>throw ?e',?s\<^sub>2\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 5, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_hole 2))),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 5, template_var 7),
                      template_var 6),
                    template_var 2),
                  template_var 3),
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 5, template_var 7),
                     template_var 6),
                   template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 2)),
                 template_var 4),
               template_app (template_hole 1, template_var 1)),
             template_var 0)
           ))),
    ("Execute.path_unique_eq",
     "(?P \<turnstile> Path ?C to ?D unique) =
      (EX Cs.
          Subobjs ?P ?C Cs &
          last Cs = ?D &
          (ALL Cs'. Subobjs ?P ?C Cs' --> last Cs' = ?D --> Cs = Cs'))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 8, template_var 2), template_var 1),
         template_var 0),
       template_app (template_hole 7, t_empty))),
    ("Execute.FinalOverriderMethodDef_unfold",
     "(?P \<turnstile> ?R has overrider ?M = ?mthd via ?Cs) =
      (OverriderMethodDefs' ?P ?R ?M ?Cs ?mthd &
       (ALL Cs' mthd'.
           OverriderMethodDefs' ?P ?R ?M Cs' mthd' -->
           ?Cs = Cs' & ?mthd = mthd'))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 7, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 5, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 0),
             template_var 1)),
         template_app (template_hole 4, t_empty)))),
    ("Execute.FAssThrow2'",
     "[| ?P,?E \<turnstile> \<langle>?e\<^sub>1,
                             ?s\<^sub>0\<rangle> \<Rightarrow>'
                            \<langle>Val ?v,?s\<^sub>1\<rangle>;
         ?P,?E \<turnstile> \<langle>?e\<^sub>2,
                             ?s\<^sub>1\<rangle> \<Rightarrow>'
                            \<langle>throw ?e',?s\<^sub>2\<rangle> |]
      ==> ?P,?E \<turnstile> \<langle>?e\<^sub>1\<bullet>?F{?Cs} := ?e\<^sub>2,
                              ?s\<^sub>0\<rangle> \<Rightarrow>'
                             \<langle>throw ?e',?s\<^sub>2\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 10),
                      template_var 9),
                    template_var 8),
                  template_var 7),
                template_app (template_hole 2, template_var 6)),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 10),
                      template_var 9),
                    template_var 4),
                  template_var 5),
                template_app (template_hole 1, template_var 3)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 3, template_var 10),
                     template_var 9),
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 8),
                         template_var 1),
                       template_var 0),
                     template_var 4)),
                 template_var 7),
               template_app (template_hole 1, template_var 3)),
             template_var 2)
           ))),
    ("Execute.casts_to_code",
     "[| Subobjs ?P (last ?Cs) ?Cs'; last ?Cs' = ?C; last ?Cs ~= hd ?Cs' |]
      ==> ?P \<turnstile> Class ?C casts Ref (?a, ?Cs) to Ref (?a, ?Cs') ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 4),
                template_app (template_hole 7, template_var 3)),
              template_var 2)
            ),
        template_equation
         (template_app (template_hole 7, template_var 2), template_var 1),
        template_negation
         (
            template_equation
             (template_app (template_hole 7, template_var 3),
              template_app (template_hole 4, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 4),
                 template_app (template_hole 2, template_var 1)),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 3))),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)))
           ))),
    ("Execute.WTDynCast_new",
     "[| ?P,?E \<turnstile> ?e :: Class ?D; is_class ?P ?C;
         ?P \<turnstile> Path ?D to ?C unique | ~ WTDynCast_ex ?P ?D ?C |]
      ==> ?P,?E \<turnstile> Cast ?C ?e :: Class ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 4),
                  template_var 3),
                template_var 2),
              template_app (template_hole 6, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 1),
                  template_var 0)),
              template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 7, template_var 4),
                 template_var 3),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app (template_hole 6, template_var 0))
           ))),
    ("Execute.New'",
     "[| new_Addr' ?h = \<lfloor>?a\<rfloor>;
         ?h' = ?h(?a |-> blank' ?P ?C) |]
      ==> ?P,?E \<turnstile> \<langle>new ?C,
                              (?h, ?l)\<rangle> \<Rightarrow>'
                             \<langle>ref (?a, [?C]),(?h', ?l)\<rangle>",
     template_implication
      ([template_equation
         (template_app (template_hole 13, template_var 6),
          template_app (template_hole 12, template_var 5)),
        template_equation
         (template_var 4,
          template_app
           (template_app
             (template_app (template_hole 10, template_var 6),
              template_var 5),
            template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, template_var 3),
                template_var 2))))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 7, template_var 3),
                     template_var 1),
                   template_app (template_hole 6, template_var 2)),
                 template_app
                  (template_app (template_hole 5, template_var 6),
                   template_var 0)),
               template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 5),
                     template_app
                      (template_app (template_hole 1, template_var 2),
                       template_hole 0))))),
             template_app
              (template_app (template_hole 5, template_var 4),
               template_var 0))
           ))),
    ("Execute.Block'",
     "?P,?E(?V |->
      ?T) \<turnstile> \<langle>?e\<^sub>0,
                        (?h\<^sub>0, ?l\<^sub>0
                         (?V := None))\<rangle> \<Rightarrow>'
                       \<langle>?e\<^sub>1,
                        (?h\<^sub>1, ?l\<^sub>1)\<rangle> ==>
      ?P,?E \<turnstile> \<langle>{?V:?T; ?e\<^sub>0},
                          (?h\<^sub>0, ?l\<^sub>0)\<rangle> \<Rightarrow>'
                         \<langle>?e\<^sub>1,
                          (?h\<^sub>1, ?l\<^sub>1
                           (?V := ?l\<^sub>0 ?V))\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 6, template_var 9),
                      template_app
                       (template_app
                         (template_app (template_hole 5, template_var 8),
                          template_var 7),
                        template_app (template_hole 4, template_var 6))),
                    template_var 5),
                  template_app
                   (template_app (template_hole 3, template_var 4),
                    template_app
                     (template_app
                       (template_app (template_hole 2, template_var 3),
                        template_var 7),
                      template_hole 1))),
                template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 6, template_var 9),
                     template_var 8),
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 7),
                       template_var 6),
                     template_var 5)),
                 template_app
                  (template_app (template_hole 3, template_var 4),
                   template_var 3)),
               template_var 2),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 7),
                 template_app (template_var 3, template_var 7))))
           ))),
    ("Execute.FAssNull'",
     "[| ?P,?E \<turnstile> \<langle>?e\<^sub>1,
                             ?s\<^sub>0\<rangle> \<Rightarrow>'
                            \<langle>null,?s\<^sub>1\<rangle>;
         ?P,?E \<turnstile> \<langle>?e\<^sub>2,
                             ?s\<^sub>1\<rangle> \<Rightarrow>'
                            \<langle>Val ?v,?s\<^sub>2\<rangle> |]
      ==> ?P,?E \<turnstile> \<langle>?e\<^sub>1\<bullet>?F{?Cs} := ?e\<^sub>2,
                              ?s\<^sub>0\<rangle> \<Rightarrow>'
                             \<langle>Throw
 (addr_of_sys_xcpt NullPointer, [NullPointer]),
                              ?s\<^sub>2\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 10, template_var 9),
                      template_var 8),
                    template_var 7),
                  template_var 6),
                template_app (template_hole 9, template_hole 8)),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 10, template_var 9),
                      template_var 8),
                    template_var 4),
                  template_var 5),
                template_app (template_hole 9, template_var 3)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 10, template_var 9),
                     template_var 8),
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 7, template_var 7),
                         template_var 1),
                       template_var 0),
                     template_var 4)),
                 template_var 6),
               template_app
                (template_hole 6,
                 template_app
                  (template_hole 9,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app (template_hole 3, template_hole 2)),
                       template_app
                        (template_app (template_hole 1, template_hole 2),
                         template_hole 0)))))),
             template_var 2)
           ))),
    ("Execute.CallParamsThrow'_new",
     "[| ?P,?E \<turnstile> \<langle>?e,?s0.0\<rangle> \<Rightarrow>'
                            \<langle>Val ?v,?s1.0\<rangle>;
         ?P,?E \<turnstile> \<langle>?es,?s1.0\<rangle> [\<Rightarrow>']
                            \<langle>?evs,?s2.0\<rangle>;
         map_val2 ?evs ?vs (throw ?ex # ?es') |]
      ==> ?P,?E \<turnstile> \<langle>Call ?e ?Copt ?M ?es,
                              ?s0.0\<rangle> \<Rightarrow>'
                             \<langle>throw ?ex,?s2.0\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 6, template_var 13),
                      template_var 12),
                    template_var 11),
                  template_var 10),
                template_app (template_hole 5, template_var 9)),
              template_var 8)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 4, template_var 13),
                      template_var 12),
                    template_var 7),
                  template_var 8),
                template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 6),
                template_var 4),
              template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 3)),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 6, template_var 13),
                     template_var 12),
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 11),
                         template_var 1),
                       template_var 0),
                     template_var 7)),
                 template_var 10),
               template_app (template_hole 1, template_var 3)),
             template_var 5)
           ))),
    ("Execute.casts_to_code",
     "[| Subobjs ?P (last ?Cs) ?Cs'; last ?Cs' = ?C; last ?Cs = hd ?Cs';
         ?Cs @ tl ?Cs' = ?Ds |]
      ==> ?P \<turnstile> Class ?C casts Ref (?a, ?Cs) to Ref (?a, ?Ds) ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 5),
                template_app (template_hole 9, template_var 4)),
              template_var 3)
            ),
        template_equation
         (template_app (template_hole 9, template_var 3), template_var 2),
        template_equation
         (template_app (template_hole 9, template_var 4),
          template_app (template_hole 7, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 4),
            template_app (template_hole 4, template_var 3)),
          template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 5),
                 template_app (template_hole 2, template_var 2)),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 4))),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Execute.WhileT'",
     "[| ?P,?E \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<Rightarrow>'
                            \<langle>true,?s\<^sub>1\<rangle>;
         ?P,?E \<turnstile> \<langle>?c,?s\<^sub>1\<rangle> \<Rightarrow>'
                            \<langle>Val ?v\<^sub>1,?s\<^sub>2\<rangle>;
         ?P,?E \<turnstile> \<langle>while (?e) ?c,
                             ?s\<^sub>2\<rangle> \<Rightarrow>'
                            \<langle>?e\<^sub>3,?s\<^sub>3\<rangle> |]
      ==> ?P,?E \<turnstile> \<langle>while (?e) ?c,
                              ?s\<^sub>0\<rangle> \<Rightarrow>'
                             \<langle>?e\<^sub>3,?s\<^sub>3\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 4, template_var 9),
                      template_var 8),
                    template_var 7),
                  template_var 6),
                template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_hole 1))),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 4, template_var 9),
                      template_var 8),
                    template_var 4),
                  template_var 5),
                template_app (template_hole 3, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 4, template_var 9),
                      template_var 8),
                    template_app
                     (template_app (template_hole 0, template_var 7),
                      template_var 4)),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 4, template_var 9),
                     template_var 8),
                   template_app
                    (template_app (template_hole 0, template_var 7),
                     template_var 4)),
                 template_var 6),
               template_var 1),
             template_var 0)
           ))),
    ("Execute.StaticUpCast'",
     "[| ?P,?E \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<Rightarrow>'
                            \<langle>ref (?a, ?Cs),?s\<^sub>1\<rangle>;
         ?P \<turnstile> Path last ?Cs to ?C via ?Cs' ;
         ?Ds = ?Cs @\<^sub>p ?Cs' |]
      ==> ?P,?E \<turnstile> \<langle>\<lparr>?C\<rparr>?e,
                              ?s\<^sub>0\<rangle> \<Rightarrow>'
                             \<langle>ref (?a, ?Ds),?s\<^sub>1\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 8, template_var 9),
                      template_var 8),
                    template_var 7),
                  template_var 6),
                template_app
                 (template_hole 7,
                  template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 5),
                      template_var 4)))),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 9),
                  template_app (template_hole 3, template_var 4)),
                template_var 2),
              template_var 1)
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 1, template_var 4),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 8, template_var 9),
                     template_var 8),
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 7)),
                 template_var 6),
               template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 5),
                     template_var 0)))),
             template_var 3)
           ))),
    ("Execute.BinOp'",
     "[| ?P,?E \<turnstile> \<langle>?e\<^sub>1,
                             ?s\<^sub>0\<rangle> \<Rightarrow>'
                            \<langle>Val ?v\<^sub>1,?s\<^sub>1\<rangle>;
         ?P,?E \<turnstile> \<langle>?e\<^sub>2,
                             ?s\<^sub>1\<rangle> \<Rightarrow>'
                            \<langle>Val ?v\<^sub>2,?s\<^sub>2\<rangle>;
         binop (?bop, ?v\<^sub>1, ?v\<^sub>2) = \<lfloor>?v\<rfloor> |]
      ==> ?P,?E \<turnstile> \<langle>?e\<^sub>1 \<guillemotleft>?bop\<guillemotright> ?e\<^sub>2,
                              ?s\<^sub>0\<rangle> \<Rightarrow>'
                             \<langle>Val ?v,?s\<^sub>2\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 7, template_var 10),
                      template_var 9),
                    template_var 8),
                  template_var 7),
                template_app (template_hole 6, template_var 6)),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 7, template_var 10),
                      template_var 9),
                    template_var 4),
                  template_var 5),
                template_app (template_hole 6, template_var 3)),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 6),
                template_var 3))),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 7, template_var 10),
                     template_var 9),
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 8),
                       template_var 1),
                     template_var 4)),
                 template_var 7),
               template_app (template_hole 6, template_var 0)),
             template_var 2)
           ))),
    ("Execute.Overrider2",
     "[| ?P \<turnstile> ldc ?R has least ?M = ?mthd' via ?Cs';
         MinimalMethodDefs' ?P (mdc ?R) ?M ?Cs ?mthd;
         last (snd ?R) ~= hd ?Cs'; (leq_path1p ?P (mdc ?R))^** ?Cs ?Cs' |]
      ==> OverriderMethodDefs' ?P ?R ?M ?Cs ?mthd",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 11, template_var 6),
                    template_app (template_hole 10, template_var 5)),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 9, template_var 6),
                    template_app (template_hole 8, template_var 5)),
                  template_var 4),
                template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 5)),
              template_app (template_hole 3, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 6),
                    template_app (template_hole 8, template_var 5))),
                template_var 1),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 6),
                   template_var 5),
                 template_var 4),
               template_var 1),
             template_var 0)
           ))),
    ("Execute.CallNull'_new",
     "[| ?P,?E \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<Rightarrow>'
                            \<langle>null,?s\<^sub>1\<rangle>;
         ?P,?E \<turnstile> \<langle>?es,
                             ?s\<^sub>1\<rangle> [\<Rightarrow>']
                            \<langle>?evs,?s\<^sub>2\<rangle>;
         map_val ?evs ?vs |]
      ==> ?P,?E \<turnstile> \<langle>Call ?e ?Copt ?M ?es,
                              ?s\<^sub>0\<rangle> \<Rightarrow>'
                             \<langle>Throw
 (addr_of_sys_xcpt NullPointer, [NullPointer]),
                              ?s\<^sub>2\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 12, template_var 10),
                      template_var 9),
                    template_var 8),
                  template_var 7),
                template_app (template_hole 11, template_hole 10)),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 9, template_var 10),
                      template_var 9),
                    template_var 5),
                  template_var 6),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 12, template_var 10),
                     template_var 9),
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 7, template_var 8),
                         template_var 1),
                       template_var 0),
                     template_var 5)),
                 template_var 7),
               template_app
                (template_hole 6,
                 template_app
                  (template_hole 11,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app (template_hole 3, template_hole 2)),
                       template_app
                        (template_app (template_hole 1, template_hole 2),
                         template_hole 0)))))),
             template_var 3)
           ))),
    ("Execute.StaticDownDynCast'_new",
     "[| ?P,?E \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<Rightarrow>'
                            \<langle>ref (?a, ?Ds),?s\<^sub>1\<rangle>;
         app ?Cs [?C] ?Ds'; app ?Ds' ?Cs' ?Ds |]
      ==> ?P,?E \<turnstile> \<langle>Cast ?C ?e,
                              ?s\<^sub>0\<rangle> \<Rightarrow>'
                             \<langle>ref (?a, ?Cs @ [?C]),
                              ?s\<^sub>1\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 8, template_var 10),
                      template_var 9),
                    template_var 8),
                  template_var 7),
                template_app
                 (template_hole 7,
                  template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 6),
                      template_var 5)))),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_hole 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0),
              template_var 5)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 8, template_var 10),
                     template_var 9),
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 8)),
                 template_var 7),
               template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 6),
                     template_app
                      (template_app (template_hole 0, template_var 3),
                       template_app
                        (template_app (template_hole 3, template_var 2),
                         template_hole 2)))))),
             template_var 4)
           ))),
    ("Execute.StaticDownCast'_new",
     "[| ?P,?E \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<Rightarrow>'
                            \<langle>ref (?a, ?Ds),?s\<^sub>1\<rangle>;
         app ?Cs [?C] ?Ds'; app ?Ds' ?Cs' ?Ds |]
      ==> ?P,?E \<turnstile> \<langle>\<lparr>?C\<rparr>?e,
                              ?s\<^sub>0\<rangle> \<Rightarrow>'
                             \<langle>ref (?a, ?Cs @ [?C]),
                              ?s\<^sub>1\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 8, template_var 10),
                      template_var 9),
                    template_var 8),
                  template_var 7),
                template_app
                 (template_hole 7,
                  template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 6),
                      template_var 5)))),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_hole 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0),
              template_var 5)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 8, template_var 10),
                     template_var 9),
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 8)),
                 template_var 7),
               template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 6),
                     template_app
                      (template_app (template_hole 0, template_var 3),
                       template_app
                        (template_app (template_hole 3, template_var 2),
                         template_hole 2)))))),
             template_var 4)
           ))),
    ("Execute.Overrider1",
     "[| ?P \<turnstile> ldc ?R has least ?M = ?mthd' via ?Cs';
         MinimalMethodDefs' ?P (mdc ?R) ?M ?Cs ?mthd;
         last (snd ?R) = hd ?Cs';
         (leq_path1p ?P (mdc ?R))^** ?Cs (snd ?R @ tl ?Cs') |]
      ==> OverriderMethodDefs' ?P ?R ?M ?Cs ?mthd",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 12, template_var 6),
                    template_app (template_hole 11, template_var 5)),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 10, template_var 6),
                    template_app (template_hole 9, template_var 5)),
                  template_var 4),
                template_var 1),
              template_var 0)
            ),
        template_equation
         (template_app
           (template_hole 7,
            template_app (template_hole 6, template_var 5)),
          template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 6),
                    template_app (template_hole 9, template_var 5))),
                template_var 1),
              template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 6, template_var 5)),
                template_app (template_hole 1, template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 6),
                   template_var 5),
                 template_var 4),
               template_var 1),
             template_var 0)
           ))),
    ("Execute.StaticCastFail'_new",
     "[| ?P,?E \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<Rightarrow>'
                            \<langle>ref (?a, ?Cs),?s\<^sub>1\<rangle>;
         ~ (subcls1p ?P)^** (last ?Cs) ?C; ?C ~: set ?Cs |]
      ==> ?P,?E \<turnstile> \<langle>\<lparr>?C\<rparr>?e,
                              ?s\<^sub>0\<rangle> \<Rightarrow>'
                             \<langle>Throw
 (addr_of_sys_xcpt ClassCast, [ClassCast]),
                              ?s\<^sub>1\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 15, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_app
                 (template_hole 14,
                  template_app
                   (template_hole 13,
                    template_app
                     (template_app (template_hole 12, template_var 3),
                      template_var 2)))),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app
                     (template_hole 10,
                      template_app (template_hole 9, template_var 7)),
                    template_app (template_hole 8, template_var 2)),
                  template_var 0)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 0),
                  template_app (template_hole 6, template_var 2))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 15, template_var 7),
                     template_var 6),
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_var 5)),
                 template_var 4),
               template_app
                (template_hole 4,
                 template_app
                  (template_hole 14,
                   template_app
                    (template_hole 13,
                     template_app
                      (template_app
                        (template_hole 12,
                         template_app (template_hole 3, template_hole 2)),
                       template_app
                        (template_app (template_hole 1, template_hole 2),
                         template_hole 0)))))),
             template_var 1)
           ))),
    ("Execute.LAss'",
     "[| ?P,?E \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<Rightarrow>'
                            \<langle>Val ?v,(?h, ?l)\<rangle>;
         ?E ?V = \<lfloor>?T\<rfloor>; ?P \<turnstile> ?T casts ?v to ?v' ;
         ?l' = ?l(?V |-> ?v') |]
      ==> ?P,?E \<turnstile> \<langle>?V:=?e,
                              ?s\<^sub>0\<rangle> \<Rightarrow>'
                             \<langle>Val ?v',(?h, ?l')\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 9, template_var 10),
                      template_var 9),
                    template_var 8),
                  template_var 7),
                template_app (template_hole 8, template_var 6)),
              template_app
               (template_app (template_hole 7, template_var 5),
                template_var 4))
            ),
        template_equation
         (template_app (template_var 9, template_var 3),
          template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 10),
                  template_var 2),
                template_var 6),
              template_var 1)
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3),
            template_app (template_hole 1, template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 9, template_var 10),
                     template_var 9),
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 8)),
                 template_var 7),
               template_app (template_hole 8, template_var 1)),
             template_app
              (template_app (template_hole 7, template_var 5),
               template_var 0))
           ))),
    ("Execute.StaticUpDynCast'",
     "[| ?P,?E \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<Rightarrow>'
                            \<langle>ref (?a, ?Cs),?s\<^sub>1\<rangle>;
         ?P \<turnstile> Path last ?Cs to ?C unique;
         ?P \<turnstile> Path last ?Cs to ?C via ?Cs' ;
         ?Ds = ?Cs @\<^sub>p ?Cs' |]
      ==> ?P,?E \<turnstile> \<langle>Cast ?C ?e,
                              ?s\<^sub>0\<rangle> \<Rightarrow>'
                             \<langle>ref (?a, ?Ds),?s\<^sub>1\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 9, template_var 9),
                      template_var 8),
                    template_var 7),
                  template_var 6),
                template_app
                 (template_hole 8,
                  template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 5),
                      template_var 4)))),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 9),
                template_app (template_hole 4, template_var 4)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 9),
                  template_app (template_hole 4, template_var 4)),
                template_var 2),
              template_var 1)
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 1, template_var 4),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 9, template_var 9),
                     template_var 8),
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 7)),
                 template_var 6),
               template_app
                (template_hole 8,
                 template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 5),
                     template_var 0)))),
             template_var 3)
           ))),
    ("Execute.DynCast'",
     "[| ?P,?E \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<Rightarrow>'
                            \<langle>ref (?a, ?Cs),(?h, ?l)\<rangle>;
         ?h ?a = \<lfloor>(?D, ?S)\<rfloor>;
         ?P \<turnstile> Path ?D to ?C via ?Cs' ;
         ?P \<turnstile> Path ?D to ?C unique |]
      ==> ?P,?E \<turnstile> \<langle>Cast ?C ?e,
                              ?s\<^sub>0\<rangle> \<Rightarrow>'
                             \<langle>ref (?a, ?Cs'),(?h, ?l)\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 10, template_var 11),
                      template_var 10),
                    template_var 9),
                  template_var 8),
                template_app
                 (template_hole 9,
                  template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_var 7),
                      template_var 6)))),
              template_app
               (template_app (template_hole 6, template_var 5),
                template_var 4))
            ),
        template_equation
         (template_app (template_var 5, template_var 7),
          template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 11),
                  template_var 3),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 11),
                template_var 3),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 10, template_var 11),
                     template_var 10),
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 9)),
                 template_var 8),
               template_app
                (template_hole 9,
                 template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 7),
                     template_var 0)))),
             template_app
              (template_app (template_hole 6, template_var 5),
               template_var 4))
           ))),
    ("Execute.DynCastFail'",
     "[| ?P,?E \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<Rightarrow>'
                            \<langle>ref (?a, ?Cs),(?h, ?l)\<rangle>;
         ?h ?a = \<lfloor>(?D, ?S)\<rfloor>;
         ~ ?P \<turnstile> Path ?D to ?C unique;
         ~ ?P \<turnstile> Path last ?Cs to ?C unique; ?C ~: set ?Cs |]
      ==> ?P,?E \<turnstile> \<langle>Cast ?C ?e,
                              ?s\<^sub>0\<rangle> \<Rightarrow>'
                             \<langle>null,(?h, ?l)\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 14, template_var 10),
                      template_var 9),
                    template_var 8),
                  template_var 7),
                template_app
                 (template_hole 13,
                  template_app
                   (template_hole 12,
                    template_app
                     (template_app (template_hole 11, template_var 6),
                      template_var 5)))),
              template_app
               (template_app (template_hole 10, template_var 4),
                template_var 3))
            ),
        template_equation
         (template_app (template_var 4, template_var 6),
          template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1))),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 5, template_var 10),
                    template_var 2),
                  template_var 0)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 5, template_var 10),
                    template_app (template_hole 4, template_var 5)),
                  template_var 0)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_app (template_hole 2, template_var 5))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 14, template_var 10),
                     template_var 9),
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 8)),
                 template_var 7),
               template_app (template_hole 13, template_hole 0)),
             template_app
              (template_app (template_hole 10, template_var 4),
               template_var 3))
           ))),
    ("Execute.FAcc'_new",
     "[| ?P,?E \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<Rightarrow>'
                            \<langle>ref (?a, ?Cs'),(?h, ?l)\<rangle>;
         ?h ?a = \<lfloor>(?D, ?S)\<rfloor>; ?Ds = ?Cs' @\<^sub>p ?Cs;
         Predicate_Compile.contains (Set_project ?S ?Ds) ?fs;
         Mapping.lookup ?fs ?F = \<lfloor>?v\<rfloor> |]
      ==> ?P,?E \<turnstile> \<langle>?e\<bullet>?F{?Cs},
                              ?s\<^sub>0\<rangle> \<Rightarrow>'
                             \<langle>Val ?v,(?h, ?l)\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 15, template_var 14),
                      template_var 13),
                    template_var 12),
                  template_var 11),
                template_app
                 (template_hole 14,
                  template_app
                   (template_hole 13,
                    template_app
                     (template_app (template_hole 12, template_var 10),
                      template_var 9)))),
              template_app
               (template_app (template_hole 11, template_var 8),
                template_var 7))
            ),
        template_equation
         (template_app (template_var 8, template_var 10),
          template_app
           (template_hole 9,
            template_app
             (template_app (template_hole 8, template_var 6),
              template_var 5))),
        template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 6, template_var 9),
            template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 5),
                  template_var 4)),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 15, template_var 14),
                     template_var 13),
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 12),
                       template_var 1),
                     template_var 3)),
                 template_var 11),
               template_app (template_hole 14, template_var 0)),
             template_app
              (template_app (template_hole 11, template_var 8),
               template_var 7))
           ))),
    ("Execute.FAss'_new",
     "[| ?P,?E \<turnstile> \<langle>?e\<^sub>1,
                             ?s\<^sub>0\<rangle> \<Rightarrow>'
                            \<langle>ref (?a, ?Cs'),?s\<^sub>1\<rangle>;
         ?P,?E \<turnstile> \<langle>?e\<^sub>2,
                             ?s\<^sub>1\<rangle> \<Rightarrow>'
                            \<langle>Val ?v,
                             (?h\<^sub>2, ?l\<^sub>2)\<rangle>;
         ?h\<^sub>2 ?a = \<lfloor>(?D, ?S)\<rfloor>;
         ?P \<turnstile> last ?Cs' has least ?F:?T via ?Cs;
         ?P \<turnstile> ?T casts ?v to ?v' ; ?Ds = ?Cs' @\<^sub>p ?Cs;
         Predicate_Compile.contains (Set_project ?S ?Ds) ?fs;
         ?fs' = Mapping.update ?F ?v' ?fs;
         ?S' = ?S - {(?Ds, ?fs)} Un {(?Ds, ?fs')};
         ?h\<^sub>2' = ?h\<^sub>2(?a |-> (?D, ?S')) |]
      ==> ?P,?E \<turnstile> \<langle>?e\<^sub>1\<bullet>?F{?Cs} := ?e\<^sub>2,
                              ?s\<^sub>0\<rangle> \<Rightarrow>'
                             \<langle>Val ?v',
                              (?h\<^sub>2', ?l\<^sub>2)\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 25, template_var 21),
                      template_var 20),
                    template_var 19),
                  template_var 18),
                template_app
                 (template_hole 24,
                  template_app
                   (template_hole 23,
                    template_app
                     (template_app (template_hole 22, template_var 17),
                      template_var 16)))),
              template_var 15)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 25, template_var 21),
                      template_var 20),
                    template_var 14),
                  template_var 15),
                template_app (template_hole 24, template_var 13)),
              template_app
               (template_app (template_hole 21, template_var 12),
                template_var 11))
            ),
        template_equation
         (template_app (template_var 12, template_var 17),
          template_app
           (template_hole 19,
            template_app
             (template_app (template_hole 18, template_var 10),
              template_var 9))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 17, template_var 21),
                    template_app (template_hole 16, template_var 16)),
                  template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 15, template_var 21),
                  template_var 7),
                template_var 13),
              template_var 5)
            ),
        template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 13, template_var 16),
            template_var 6)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 9),
                  template_var 4)),
              template_var 3)
            ),
        template_equation
         (template_var 2,
          template_app
           (template_app
             (template_app (template_hole 9, template_var 8),
              template_var 5),
            template_var 3)),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 9),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 4),
                      template_var 3)),
                  template_hole 3))),
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 2)),
              template_hole 3))),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_app (template_hole 1, template_var 12),
              template_var 17),
            template_app
             (template_hole 19,
              template_app
               (template_app (template_hole 18, template_var 10),
                template_var 1))))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 25, template_var 21),
                     template_var 20),
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 19),
                         template_var 8),
                       template_var 6),
                     template_var 14)),
                 template_var 18),
               template_app (template_hole 24, template_var 5)),
             template_app
              (template_app (template_hole 21, template_var 0),
               template_var 11))
           ))),
    ("Execute.StaticCall'_new",
     "[| ?P,?E \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<Rightarrow>'
                            \<langle>ref (?a, ?Cs),?s\<^sub>1\<rangle>;
         ?P,?E \<turnstile> \<langle>?ps,
                             ?s\<^sub>1\<rangle> [\<Rightarrow>']
                            \<langle>?evs,(?h\<^sub>2, ?l\<^sub>2)\<rangle>;
         map_val ?evs ?vs; ?P \<turnstile> Path last ?Cs to ?C unique;
         ?P \<turnstile> Path last ?Cs to ?C via ?Cs'' ;
         ?P \<turnstile> ?C has least ?M = (?Ts, ?T, ?pns, ?body) via ?Cs';
         ?Ds = (?Cs @\<^sub>p ?Cs'') @\<^sub>p ?Cs';
         length ?vs = length ?pns; ?P \<turnstile> ?Ts Casts ?vs to ?vs' ;
         ?l\<^sub>2' = [this |-> Ref (?a, ?Ds), ?pns [|->] ?vs'];
         ?P,?E(this |-> Class (last ?Ds), ?pns [|->]
         ?Ts) \<turnstile> \<langle>?body,
                            (?h\<^sub>2,
                             ?l\<^sub>2')\<rangle> \<Rightarrow>'
                           \<langle>?e',(?h\<^sub>3, ?l\<^sub>3)\<rangle> |]
      ==> ?P,?E \<turnstile> \<langle>Call ?e \<lfloor>?C\<rfloor> ?M ?ps,
                              ?s\<^sub>0\<rangle> \<Rightarrow>'
                             \<langle>?e',
                              (?h\<^sub>3, ?l\<^sub>2)\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 31, template_var 25),
                      template_var 24),
                    template_var 23),
                  template_var 22),
                template_app
                 (template_hole 30,
                  template_app
                   (template_hole 29,
                    template_app
                     (template_app (template_hole 28, template_var 21),
                      template_var 20)))),
              template_var 19)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 27, template_var 25),
                      template_var 24),
                    template_var 18),
                  template_var 19),
                template_var 17),
              template_app
               (template_app (template_hole 26, template_var 16),
                template_var 15))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 25, template_var 17),
              template_var 14)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 24, template_var 25),
                template_app (template_hole 23, template_var 20)),
              template_var 13)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 22, template_var 25),
                  template_app (template_hole 23, template_var 20)),
                template_var 13),
              template_var 12)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 21, template_var 25),
                    template_var 13),
                  template_var 11),
                template_app
                 (template_app (template_hole 20, template_var 10),
                  template_app
                   (template_app (template_hole 19, template_var 9),
                    template_app
                     (template_app (template_hole 18, template_var 8),
                      template_var 7)))),
              template_var 6)
            ),
        template_equation
         (template_var 5,
          template_app
           (template_app
             (template_hole 16,
              template_app
               (template_app (template_hole 16, template_var 20),
                template_var 12)),
            template_var 6)),
        template_equation
         (template_app (template_hole 14, template_var 14),
          template_app (template_hole 13, template_var 8)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 12, template_var 25),
                  template_var 10),
                template_var 14),
              template_var 4)
            ),
        template_equation
         (template_var 3,
          template_app
           (template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_app (template_hole 9, t_empty),
                    template_hole 7),
                  template_app
                   (template_hole 6,
                    template_app
                     (template_hole 29,
                      template_app
                       (template_app (template_hole 28, template_var 21),
                        template_var 5))))),
              template_var 8),
            template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 31, template_var 25),
                      template_app
                       (template_app
                         (template_app
                           (template_hole 5,
                            template_app
                             (template_app
                               (template_app
                                 (template_hole 4, template_var 24),
                                template_hole 7),
                              template_app
                               (template_hole 3,
                                template_app
                                 (template_hole 2,
                                  template_app
                                   (template_hole 23, template_var 5))))),
                          template_var 8),
                        template_var 10)),
                    template_var 7),
                  template_app
                   (template_app (template_hole 26, template_var 16),
                    template_var 3)),
                template_var 2),
              template_app
               (template_app (template_hole 26, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 31, template_var 25),
                     template_var 24),
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 1, template_var 23),
                         template_app (template_hole 0, template_var 13)),
                       template_var 11),
                     template_var 18)),
                 template_var 22),
               template_var 2),
             template_app
              (template_app (template_hole 26, template_var 1),
               template_var 15))
           ))),
    ("Execute.Call'_new",
     "[| ?P,?E \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<Rightarrow>'
                            \<langle>ref (?a, ?Cs),?s\<^sub>1\<rangle>;
         ?P,?E \<turnstile> \<langle>?ps,
                             ?s\<^sub>1\<rangle> [\<Rightarrow>']
                            \<langle>?evs,(?h\<^sub>2, ?l\<^sub>2)\<rangle>;
         map_val ?evs ?vs; ?h\<^sub>2 ?a = \<lfloor>(?C, ?S)\<rfloor>;
         ?P \<turnstile> last
                          ?Cs has least ?M = (?Ts', ?T', ?pns',
        ?body') via ?Ds;
         ?P \<turnstile> (?C,?Cs @\<^sub>p
                             ?Ds) selects ?M = (?Ts, ?T, ?pns,
          ?body) via ?Cs';
         length ?vs = length ?pns; ?P \<turnstile> ?Ts Casts ?vs to ?vs' ;
         ?l\<^sub>2' = [this |-> Ref (?a, ?Cs'), ?pns [|->] ?vs'];
         ?new_body =
         (case ?T' of Class D => \<lparr>D\<rparr>?body | _ => ?body);
         ?P,?E(this |-> Class (last ?Cs'), ?pns [|->]
         ?Ts) \<turnstile> \<langle>?new_body,
                            (?h\<^sub>2,
                             ?l\<^sub>2')\<rangle> \<Rightarrow>'
                           \<langle>?e',(?h\<^sub>3, ?l\<^sub>3)\<rangle> |]
      ==> ?P,?E \<turnstile> \<langle>Call ?e None ?M ?ps,
                              ?s\<^sub>0\<rangle> \<Rightarrow>'
                             \<langle>?e',
                              (?h\<^sub>3, ?l\<^sub>2)\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 35, template_var 30),
                      template_var 29),
                    template_var 28),
                  template_var 27),
                template_app
                 (template_hole 34,
                  template_app
                   (template_hole 33,
                    template_app
                     (template_app (template_hole 32, template_var 26),
                      template_var 25)))),
              template_var 24)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 31, template_var 30),
                      template_var 29),
                    template_var 23),
                  template_var 24),
                template_var 22),
              template_app
               (template_app (template_hole 30, template_var 21),
                template_var 20))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 29, template_var 22),
              template_var 19)
            ),
        template_equation
         (template_app (template_var 21, template_var 26),
          template_app
           (template_hole 27,
            template_app
             (template_app (template_hole 26, template_var 18),
              template_var 17))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 25, template_var 30),
                    template_app (template_hole 24, template_var 25)),
                  template_var 16),
                template_app
                 (template_app (template_hole 23, template_var 15),
                  template_app
                   (template_app (template_hole 22, template_var 14),
                    template_app
                     (template_app (template_hole 21, template_var 13),
                      template_var 12)))),
              template_var 11)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 20, template_var 30),
                      template_var 18),
                    template_app
                     (template_app (template_hole 19, template_var 25),
                      template_var 11)),
                  template_var 16),
                template_app
                 (template_app (template_hole 23, template_var 10),
                  template_app
                   (template_app (template_hole 22, template_var 9),
                    template_app
                     (template_app (template_hole 21, template_var 8),
                      template_var 7)))),
              template_var 6)
            ),
        template_equation
         (template_app (template_hole 17, template_var 19),
          template_app (template_hole 16, template_var 8)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 15, template_var 30),
                  template_var 10),
                template_var 19),
              template_var 5)
            ),
        template_equation
         (template_var 4,
          template_app
           (template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app
                   (template_app (template_hole 12, t_empty),
                    template_hole 10),
                  template_app
                   (template_hole 9,
                    template_app
                     (template_hole 33,
                      template_app
                       (template_app (template_hole 32, template_var 26),
                        template_var 6))))),
              template_var 8),
            template_var 5)),
        template_equation
         (template_var 3,
          template_app
           (template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 7, template_var 7),
                    template_var 7),
                  template_var 7),
                template_var 7),
              t_empty),
            template_var 14)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 35, template_var 30),
                      template_app
                       (template_app
                         (template_app
                           (template_hole 5,
                            template_app
                             (template_app
                               (template_app
                                 (template_hole 4, template_var 29),
                                template_hole 10),
                              template_app
                               (template_hole 3,
                                template_app
                                 (template_hole 2,
                                  template_app
                                   (template_hole 24, template_var 6))))),
                          template_var 8),
                        template_var 10)),
                    template_var 3),
                  template_app
                   (template_app (template_hole 30, template_var 21),
                    template_var 4)),
                template_var 2),
              template_app
               (template_app (template_hole 30, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 35, template_var 30),
                     template_var 29),
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 1, template_var 28),
                         template_hole 0),
                       template_var 16),
                     template_var 23)),
                 template_var 27),
               template_var 2),
             template_app
              (template_app (template_hole 30, template_var 1),
               template_var 20))
           ))),
    ("Execute.eval'_cases",
     "[| ?P,?x \<turnstile> \<langle>?y,?z\<rangle> \<Rightarrow>'
                            \<langle>?u,?v\<rangle>;
         !!h a h' C E l.
            [| ?x = E; ?y = new C; ?z = (h, l); ?u = ref (a, [C]);
               ?v = (h', l); new_Addr' h = \<lfloor>a\<rfloor>;
               h' = h(a |-> blank' ?P C) |]
            ==> ?thesis;
         !!h E C l.
            [| ?x = E; ?y = new C; ?z = (h, l);
               ?u = Throw (addr_of_sys_xcpt OutOfMemory, [OutOfMemory]);
               ?v = (h, l); new_Addr' h = None |]
            ==> ?thesis;
         !!E e s\<^sub>0 a Cs s\<^sub>1 C Cs' Ds.
            [| ?x = E; ?y = \<lparr>C\<rparr>e; ?z = s\<^sub>0;
               ?u = ref (a, Ds); ?v = s\<^sub>1;
               ?P,E \<turnstile> \<langle>e,
                                  s\<^sub>0\<rangle> \<Rightarrow>'
                                 \<langle>ref (a, Cs),s\<^sub>1\<rangle>;
               ?P \<turnstile> Path last Cs to C via Cs' ;
               Ds = Cs @\<^sub>p Cs' |]
            ==> ?thesis;
         !!E e s\<^sub>0 a Cs C Cs' s\<^sub>1.
            [| ?x = E; ?y = \<lparr>C\<rparr>e; ?z = s\<^sub>0;
               ?u = ref (a, Cs @ [C]); ?v = s\<^sub>1;
               ?P,E \<turnstile> \<langle>e,
                                  s\<^sub>0\<rangle> \<Rightarrow>'
                                 \<langle>ref (a, Cs @ [C] @ Cs'),
                                  s\<^sub>1\<rangle> |]
            ==> ?thesis;
         !!E e s\<^sub>0 s\<^sub>1 C.
            [| ?x = E; ?y = \<lparr>C\<rparr>e; ?z = s\<^sub>0; ?u = null;
               ?v = s\<^sub>1;
               ?P,E \<turnstile> \<langle>e,
                                  s\<^sub>0\<rangle> \<Rightarrow>'
                                 \<langle>null,s\<^sub>1\<rangle> |]
            ==> ?thesis;
         !!E e s\<^sub>0 a Cs s\<^sub>1 C.
            [| ?x = E; ?y = \<lparr>C\<rparr>e; ?z = s\<^sub>0;
               ?u = Throw (addr_of_sys_xcpt ClassCast, [ClassCast]);
               ?v = s\<^sub>1;
               ?P,E \<turnstile> \<langle>e,
                                  s\<^sub>0\<rangle> \<Rightarrow>'
                                 \<langle>ref (a, Cs),s\<^sub>1\<rangle>;
               (last Cs, C) ~: (subcls1 ?P)^*; C ~: set Cs |]
            ==> ?thesis;
         !!E e s\<^sub>0 e' s\<^sub>1 C.
            [| ?x = E; ?y = \<lparr>C\<rparr>e; ?z = s\<^sub>0;
               ?u = throw e'; ?v = s\<^sub>1;
               ?P,E \<turnstile> \<langle>e,
                                  s\<^sub>0\<rangle> \<Rightarrow>'
                                 \<langle>throw e',s\<^sub>1\<rangle> |]
            ==> ?thesis;
         !!E e s\<^sub>0 a Cs s\<^sub>1 C Cs' Ds.
            [| ?x = E; ?y = Cast C e; ?z = s\<^sub>0; ?u = ref (a, Ds);
               ?v = s\<^sub>1;
               ?P,E \<turnstile> \<langle>e,
                                  s\<^sub>0\<rangle> \<Rightarrow>'
                                 \<langle>ref (a, Cs),s\<^sub>1\<rangle>;
               ?P \<turnstile> Path last Cs to C unique;
               ?P \<turnstile> Path last Cs to C via Cs' ;
               Ds = Cs @\<^sub>p Cs' |]
            ==> ?thesis;
         !!E e s\<^sub>0 a Cs C Cs' s\<^sub>1.
            [| ?x = E; ?y = Cast C e; ?z = s\<^sub>0;
               ?u = ref (a, Cs @ [C]); ?v = s\<^sub>1;
               ?P,E \<turnstile> \<langle>e,
                                  s\<^sub>0\<rangle> \<Rightarrow>'
                                 \<langle>ref (a, Cs @ [C] @ Cs'),
                                  s\<^sub>1\<rangle> |]
            ==> ?thesis;
         !!E e s\<^sub>0 a Cs h l D S C Cs'.
            [| ?x = E; ?y = Cast C e; ?z = s\<^sub>0; ?u = ref (a, Cs');
               ?v = (h, l);
               ?P,E \<turnstile> \<langle>e,
                                  s\<^sub>0\<rangle> \<Rightarrow>'
                                 \<langle>ref (a, Cs),(h, l)\<rangle>;
               h a = \<lfloor>(D, S)\<rfloor>;
               ?P \<turnstile> Path D to C via Cs' ;
               ?P \<turnstile> Path D to C unique |]
            ==> ?thesis;
         !!E e s\<^sub>0 s\<^sub>1 C.
            [| ?x = E; ?y = Cast C e; ?z = s\<^sub>0; ?u = null;
               ?v = s\<^sub>1;
               ?P,E \<turnstile> \<langle>e,
                                  s\<^sub>0\<rangle> \<Rightarrow>'
                                 \<langle>null,s\<^sub>1\<rangle> |]
            ==> ?thesis;
         !!E e s\<^sub>0 a Cs h l D S C.
            [| ?x = E; ?y = Cast C e; ?z = s\<^sub>0; ?u = null;
               ?v = (h, l);
               ?P,E \<turnstile> \<langle>e,
                                  s\<^sub>0\<rangle> \<Rightarrow>'
                                 \<langle>ref (a, Cs),(h, l)\<rangle>;
               h a = \<lfloor>(D, S)\<rfloor>;
               ~ ?P \<turnstile> Path D to C unique;
               ~ ?P \<turnstile> Path last Cs to C unique; C ~: set Cs |]
            ==> ?thesis;
         !!E e s\<^sub>0 e' s\<^sub>1 C.
            [| ?x = E; ?y = Cast C e; ?z = s\<^sub>0; ?u = throw e';
               ?v = s\<^sub>1;
               ?P,E \<turnstile> \<langle>e,
                                  s\<^sub>0\<rangle> \<Rightarrow>'
                                 \<langle>throw e',s\<^sub>1\<rangle> |]
            ==> ?thesis;
         !!E va s.
            [| ?x = E; ?y = Val va; ?z = s; ?u = Val va; ?v = s |]
            ==> ?thesis;
         !!E e\<^sub>1 s\<^sub>0 v\<^sub>1 s\<^sub>1 e\<^sub>2 v\<^sub>2
            s\<^sub>2 bop va.
            [| ?x = E;
               ?y =
               e\<^sub>1 \<guillemotleft>bop\<guillemotright> e\<^sub>2;
               ?z = s\<^sub>0; ?u = Val va; ?v = s\<^sub>2;
               ?P,E \<turnstile> \<langle>e\<^sub>1,
                                  s\<^sub>0\<rangle> \<Rightarrow>'
                                 \<langle>Val v\<^sub>1,s\<^sub>1\<rangle>;
               ?P,E \<turnstile> \<langle>e\<^sub>2,
                                  s\<^sub>1\<rangle> \<Rightarrow>'
                                 \<langle>Val v\<^sub>2,s\<^sub>2\<rangle>;
               binop (bop, v\<^sub>1, v\<^sub>2) = \<lfloor>va\<rfloor> |]
            ==> ?thesis;
         !!E e\<^sub>1 s\<^sub>0 e s\<^sub>1 bop e\<^sub>2.
            [| ?x = E;
               ?y =
               e\<^sub>1 \<guillemotleft>bop\<guillemotright> e\<^sub>2;
               ?z = s\<^sub>0; ?u = throw e; ?v = s\<^sub>1;
               ?P,E \<turnstile> \<langle>e\<^sub>1,
                                  s\<^sub>0\<rangle> \<Rightarrow>'
                                 \<langle>throw e,s\<^sub>1\<rangle> |]
            ==> ?thesis;
         !!E e\<^sub>1 s\<^sub>0 v\<^sub>1 s\<^sub>1 e\<^sub>2 e s\<^sub>2
            bop.
            [| ?x = E;
               ?y =
               e\<^sub>1 \<guillemotleft>bop\<guillemotright> e\<^sub>2;
               ?z = s\<^sub>0; ?u = throw e; ?v = s\<^sub>2;
               ?P,E \<turnstile> \<langle>e\<^sub>1,
                                  s\<^sub>0\<rangle> \<Rightarrow>'
                                 \<langle>Val v\<^sub>1,s\<^sub>1\<rangle>;
               ?P,E \<turnstile> \<langle>e\<^sub>2,
                                  s\<^sub>1\<rangle> \<Rightarrow>'
                                 \<langle>throw e,s\<^sub>2\<rangle> |]
            ==> ?thesis;
         !!l V va E h.
            [| ?x = E; ?y = Var V; ?z = (h, l); ?u = Val va; ?v = (h, l);
               l V = \<lfloor>va\<rfloor> |]
            ==> ?thesis;
         !!E e s\<^sub>0 va h l V T v' l'.
            [| ?x = E; ?y = V:=e; ?z = s\<^sub>0; ?u = Val v'; ?v = (h, l');
               ?P,E \<turnstile> \<langle>e,
                                  s\<^sub>0\<rangle> \<Rightarrow>'
                                 \<langle>Val va,(h, l)\<rangle>;
               E V = \<lfloor>T\<rfloor>; ?P \<turnstile> T casts va to v' ;
               l' = l(V |-> v') |]
            ==> ?thesis;
         !!E e s\<^sub>0 e' s\<^sub>1 V.
            [| ?x = E; ?y = V:=e; ?z = s\<^sub>0; ?u = throw e';
               ?v = s\<^sub>1;
               ?P,E \<turnstile> \<langle>e,
                                  s\<^sub>0\<rangle> \<Rightarrow>'
                                 \<langle>throw e',s\<^sub>1\<rangle> |]
            ==> ?thesis;
         !!E e s\<^sub>0 a Cs' h l D S Ds Cs fs F va.
            [| ?x = E; ?y = e\<bullet>F{Cs}; ?z = s\<^sub>0; ?u = Val va;
               ?v = (h, l);
               ?P,E \<turnstile> \<langle>e,
                                  s\<^sub>0\<rangle> \<Rightarrow>'
                                 \<langle>ref (a, Cs'),(h, l)\<rangle>;
               h a = \<lfloor>(D, S)\<rfloor>; Ds = Cs' @\<^sub>p Cs;
               (Ds, fs) : S; Mapping.lookup fs F = \<lfloor>va\<rfloor> |]
            ==> ?thesis;
         !!E e s\<^sub>0 s\<^sub>1 F Cs.
            [| ?x = E; ?y = e\<bullet>F{Cs}; ?z = s\<^sub>0;
               ?u = Throw (addr_of_sys_xcpt NullPointer, [NullPointer]);
               ?v = s\<^sub>1;
               ?P,E \<turnstile> \<langle>e,
                                  s\<^sub>0\<rangle> \<Rightarrow>'
                                 \<langle>null,s\<^sub>1\<rangle> |]
            ==> ?thesis;
         !!E e s\<^sub>0 e' s\<^sub>1 F Cs.
            [| ?x = E; ?y = e\<bullet>F{Cs}; ?z = s\<^sub>0; ?u = throw e';
               ?v = s\<^sub>1;
               ?P,E \<turnstile> \<langle>e,
                                  s\<^sub>0\<rangle> \<Rightarrow>'
                                 \<langle>throw e',s\<^sub>1\<rangle> |]
            ==> ?thesis;
         !!E e\<^sub>1 s\<^sub>0 a Cs' s\<^sub>1 e\<^sub>2 va h\<^sub>2
            l\<^sub>2 D S F T Cs v' Ds fs fs' S' h\<^sub>2'.
            [| ?x = E; ?y = e\<^sub>1\<bullet>F{Cs} := e\<^sub>2;
               ?z = s\<^sub>0; ?u = Val v'; ?v = (h\<^sub>2', l\<^sub>2);
               ?P,E \<turnstile> \<langle>e\<^sub>1,
                                  s\<^sub>0\<rangle> \<Rightarrow>'
                                 \<langle>ref (a, Cs'),s\<^sub>1\<rangle>;
               ?P,E \<turnstile> \<langle>e\<^sub>2,
                                  s\<^sub>1\<rangle> \<Rightarrow>'
                                 \<langle>Val va,
                                  (h\<^sub>2, l\<^sub>2)\<rangle>;
               h\<^sub>2 a = \<lfloor>(D, S)\<rfloor>;
               ?P \<turnstile> last Cs' has least F:T via Cs;
               ?P \<turnstile> T casts va to v' ; Ds = Cs' @\<^sub>p Cs;
               (Ds, fs) : S; fs' = Mapping.update F v' fs;
               S' = S - {(Ds, fs)} Un {(Ds, fs')};
               h\<^sub>2' = h\<^sub>2(a |-> (D, S')) |]
            ==> ?thesis;
         !!E e\<^sub>1 s\<^sub>0 s\<^sub>1 e\<^sub>2 va s\<^sub>2 F Cs.
            [| ?x = E; ?y = e\<^sub>1\<bullet>F{Cs} := e\<^sub>2;
               ?z = s\<^sub>0;
               ?u = Throw (addr_of_sys_xcpt NullPointer, [NullPointer]);
               ?v = s\<^sub>2;
               ?P,E \<turnstile> \<langle>e\<^sub>1,
                                  s\<^sub>0\<rangle> \<Rightarrow>'
                                 \<langle>null,s\<^sub>1\<rangle>;
               ?P,E \<turnstile> \<langle>e\<^sub>2,
                                  s\<^sub>1\<rangle> \<Rightarrow>'
                                 \<langle>Val va,s\<^sub>2\<rangle> |]
            ==> ?thesis;
         !!E e\<^sub>1 s\<^sub>0 e' s\<^sub>1 F Cs e\<^sub>2.
            [| ?x = E; ?y = e\<^sub>1\<bullet>F{Cs} := e\<^sub>2;
               ?z = s\<^sub>0; ?u = throw e'; ?v = s\<^sub>1;
               ?P,E \<turnstile> \<langle>e\<^sub>1,
                                  s\<^sub>0\<rangle> \<Rightarrow>'
                                 \<langle>throw e',s\<^sub>1\<rangle> |]
            ==> ?thesis;
         !!E e\<^sub>1 s\<^sub>0 va s\<^sub>1 e\<^sub>2 e' s\<^sub>2 F Cs.
            [| ?x = E; ?y = e\<^sub>1\<bullet>F{Cs} := e\<^sub>2;
               ?z = s\<^sub>0; ?u = throw e'; ?v = s\<^sub>2;
               ?P,E \<turnstile> \<langle>e\<^sub>1,
                                  s\<^sub>0\<rangle> \<Rightarrow>'
                                 \<langle>Val va,s\<^sub>1\<rangle>;
               ?P,E \<turnstile> \<langle>e\<^sub>2,
                                  s\<^sub>1\<rangle> \<Rightarrow>'
                                 \<langle>throw e',s\<^sub>2\<rangle> |]
            ==> ?thesis;
         !!E e s\<^sub>0 e' s\<^sub>1 Copt M es.
            [| ?x = E; ?y = Call e Copt M es; ?z = s\<^sub>0; ?u = throw e';
               ?v = s\<^sub>1;
               ?P,E \<turnstile> \<langle>e,
                                  s\<^sub>0\<rangle> \<Rightarrow>'
                                 \<langle>throw e',s\<^sub>1\<rangle> |]
            ==> ?thesis;
         !!E e s\<^sub>0 va s\<^sub>1 es vs ex es' s\<^sub>2 Copt M.
            [| ?x = E; ?y = Call e Copt M es; ?z = s\<^sub>0; ?u = throw ex;
               ?v = s\<^sub>2;
               ?P,E \<turnstile> \<langle>e,
                                  s\<^sub>0\<rangle> \<Rightarrow>'
                                 \<langle>Val va,s\<^sub>1\<rangle>;
               ?P,E \<turnstile> \<langle>es,
                                  s\<^sub>1\<rangle> [\<Rightarrow>']
                                 \<langle>map Val vs @ throw ex # es',
                                  s\<^sub>2\<rangle> |]
            ==> ?thesis;
         !!E e s\<^sub>0 a Cs s\<^sub>1 ps vs h\<^sub>2 l\<^sub>2 C S M Ts'
            T' pns' body' Ds Ts T pns body Cs' vs' l\<^sub>2' new_body e'
            h\<^sub>3 l\<^sub>3.
            [| ?x = E; ?y = Call e None M ps; ?z = s\<^sub>0; ?u = e';
               ?v = (h\<^sub>3, l\<^sub>2);
               ?P,E \<turnstile> \<langle>e,
                                  s\<^sub>0\<rangle> \<Rightarrow>'
                                 \<langle>ref (a, Cs),s\<^sub>1\<rangle>;
               ?P,E \<turnstile> \<langle>ps,
                                  s\<^sub>1\<rangle> [\<Rightarrow>']
                                 \<langle>map Val vs,
                                  (h\<^sub>2, l\<^sub>2)\<rangle>;
               h\<^sub>2 a = \<lfloor>(C, S)\<rfloor>;
               ?P \<turnstile> last
                                Cs has least M = (Ts', T', pns',
            body') via Ds;
               ?P \<turnstile> (C,Cs @\<^sub>p
                                  Ds) selects M = (Ts, T, pns,
             body) via Cs';
               length vs = length pns; ?P \<turnstile> Ts Casts vs to vs' ;
               l\<^sub>2' = [this |-> Ref (a, Cs'), pns [|->] vs'];
               new_body =
               (case T' of Class D => \<lparr>D\<rparr>body | _ => body);
               ?P,E(this |-> Class (last Cs'), pns [|->]
               Ts) \<turnstile> \<langle>new_body,
                                 (h\<^sub>2,
                                  l\<^sub>2')\<rangle> \<Rightarrow>'
                                \<langle>e',
                                 (h\<^sub>3, l\<^sub>3)\<rangle> |]
            ==> ?thesis;
         !!E e s\<^sub>0 a Cs s\<^sub>1 ps vs h\<^sub>2 l\<^sub>2 C Cs'' M
            Ts T pns body Cs' Ds vs' l\<^sub>2' e' h\<^sub>3 l\<^sub>3.
            [| ?x = E; ?y = Call e \<lfloor>C\<rfloor> M ps; ?z = s\<^sub>0;
               ?u = e'; ?v = (h\<^sub>3, l\<^sub>2);
               ?P,E \<turnstile> \<langle>e,
                                  s\<^sub>0\<rangle> \<Rightarrow>'
                                 \<langle>ref (a, Cs),s\<^sub>1\<rangle>;
               ?P,E \<turnstile> \<langle>ps,
                                  s\<^sub>1\<rangle> [\<Rightarrow>']
                                 \<langle>map Val vs,
                                  (h\<^sub>2, l\<^sub>2)\<rangle>;
               ?P \<turnstile> Path last Cs to C unique;
               ?P \<turnstile> Path last Cs to C via Cs'' ;
               ?P \<turnstile> C has least M = (Ts, T, pns, body) via Cs';
               Ds = (Cs @\<^sub>p Cs'') @\<^sub>p Cs';
               length vs = length pns; ?P \<turnstile> Ts Casts vs to vs' ;
               l\<^sub>2' = [this |-> Ref (a, Ds), pns [|->] vs'];
               ?P,E(this |-> Class (last Ds), pns [|->]
               Ts) \<turnstile> \<langle>body,
                                 (h\<^sub>2,
                                  l\<^sub>2')\<rangle> \<Rightarrow>'
                                \<langle>e',
                                 (h\<^sub>3, l\<^sub>3)\<rangle> |]
            ==> ?thesis;
         !!E e s\<^sub>0 s\<^sub>1 es vs s\<^sub>2 Copt M.
            [| ?x = E; ?y = Call e Copt M es; ?z = s\<^sub>0;
               ?u = Throw (addr_of_sys_xcpt NullPointer, [NullPointer]);
               ?v = s\<^sub>2;
               ?P,E \<turnstile> \<langle>e,
                                  s\<^sub>0\<rangle> \<Rightarrow>'
                                 \<langle>null,s\<^sub>1\<rangle>;
               ?P,E \<turnstile> \<langle>es,
                                  s\<^sub>1\<rangle> [\<Rightarrow>']
                                 \<langle>map Val vs,s\<^sub>2\<rangle> |]
            ==> ?thesis;
         !!E V T e\<^sub>0 h\<^sub>0 l\<^sub>0 e\<^sub>1 h\<^sub>1
            l\<^sub>1.
            [| ?x = E; ?y = {V:T; e\<^sub>0}; ?z = (h\<^sub>0, l\<^sub>0);
               ?u = e\<^sub>1;
               ?v = (h\<^sub>1, l\<^sub>1(V := l\<^sub>0 V));
               ?P,E(V |->
               T) \<turnstile> \<langle>e\<^sub>0,
                                (h\<^sub>0, l\<^sub>0
                                 (V := None))\<rangle> \<Rightarrow>'
                               \<langle>e\<^sub>1,
                                (h\<^sub>1, l\<^sub>1)\<rangle> |]
            ==> ?thesis;
         !!E e\<^sub>0 s\<^sub>0 va s\<^sub>1 e\<^sub>1 e\<^sub>2 s\<^sub>2.
            [| ?x = E; ?y = e\<^sub>0;; e\<^sub>1; ?z = s\<^sub>0;
               ?u = e\<^sub>2; ?v = s\<^sub>2;
               ?P,E \<turnstile> \<langle>e\<^sub>0,
                                  s\<^sub>0\<rangle> \<Rightarrow>'
                                 \<langle>Val va,s\<^sub>1\<rangle>;
               ?P,E \<turnstile> \<langle>e\<^sub>1,
                                  s\<^sub>1\<rangle> \<Rightarrow>'
                                 \<langle>e\<^sub>2,s\<^sub>2\<rangle> |]
            ==> ?thesis;
         !!E e\<^sub>0 s\<^sub>0 e s\<^sub>1 e\<^sub>1.
            [| ?x = E; ?y = e\<^sub>0;; e\<^sub>1; ?z = s\<^sub>0;
               ?u = throw e; ?v = s\<^sub>1;
               ?P,E \<turnstile> \<langle>e\<^sub>0,
                                  s\<^sub>0\<rangle> \<Rightarrow>'
                                 \<langle>throw e,s\<^sub>1\<rangle> |]
            ==> ?thesis;
         !!E e s\<^sub>0 s\<^sub>1 e\<^sub>1 e' s\<^sub>2 e\<^sub>2.
            [| ?x = E; ?y = if (e) e\<^sub>1 else e\<^sub>2; ?z = s\<^sub>0;
               ?u = e'; ?v = s\<^sub>2;
               ?P,E \<turnstile> \<langle>e,
                                  s\<^sub>0\<rangle> \<Rightarrow>'
                                 \<langle>true,s\<^sub>1\<rangle>;
               ?P,E \<turnstile> \<langle>e\<^sub>1,
                                  s\<^sub>1\<rangle> \<Rightarrow>'
                                 \<langle>e',s\<^sub>2\<rangle> |]
            ==> ?thesis;
         !!E e s\<^sub>0 s\<^sub>1 e\<^sub>2 e' s\<^sub>2 e\<^sub>1.
            [| ?x = E; ?y = if (e) e\<^sub>1 else e\<^sub>2; ?z = s\<^sub>0;
               ?u = e'; ?v = s\<^sub>2;
               ?P,E \<turnstile> \<langle>e,
                                  s\<^sub>0\<rangle> \<Rightarrow>'
                                 \<langle>false,s\<^sub>1\<rangle>;
               ?P,E \<turnstile> \<langle>e\<^sub>2,
                                  s\<^sub>1\<rangle> \<Rightarrow>'
                                 \<langle>e',s\<^sub>2\<rangle> |]
            ==> ?thesis;
         !!E e s\<^sub>0 e' s\<^sub>1 e\<^sub>1 e\<^sub>2.
            [| ?x = E; ?y = if (e) e\<^sub>1 else e\<^sub>2; ?z = s\<^sub>0;
               ?u = throw e'; ?v = s\<^sub>1;
               ?P,E \<turnstile> \<langle>e,
                                  s\<^sub>0\<rangle> \<Rightarrow>'
                                 \<langle>throw e',s\<^sub>1\<rangle> |]
            ==> ?thesis;
         !!E e s\<^sub>0 s\<^sub>1 c.
            [| ?x = E; ?y = while (e) c; ?z = s\<^sub>0; ?u = unit;
               ?v = s\<^sub>1;
               ?P,E \<turnstile> \<langle>e,
                                  s\<^sub>0\<rangle> \<Rightarrow>'
                                 \<langle>false,s\<^sub>1\<rangle> |]
            ==> ?thesis;
         !!E e s\<^sub>0 s\<^sub>1 c v\<^sub>1 s\<^sub>2 e\<^sub>3
            s\<^sub>3.
            [| ?x = E; ?y = while (e) c; ?z = s\<^sub>0; ?u = e\<^sub>3;
               ?v = s\<^sub>3;
               ?P,E \<turnstile> \<langle>e,
                                  s\<^sub>0\<rangle> \<Rightarrow>'
                                 \<langle>true,s\<^sub>1\<rangle>;
               ?P,E \<turnstile> \<langle>c,
                                  s\<^sub>1\<rangle> \<Rightarrow>'
                                 \<langle>Val v\<^sub>1,s\<^sub>2\<rangle>;
               ?P,E \<turnstile> \<langle>while (e) c,
                                  s\<^sub>2\<rangle> \<Rightarrow>'
                                 \<langle>e\<^sub>3,s\<^sub>3\<rangle> |]
            ==> ?thesis;
         !!E e s\<^sub>0 e' s\<^sub>1 c.
            [| ?x = E; ?y = while (e) c; ?z = s\<^sub>0; ?u = throw e';
               ?v = s\<^sub>1;
               ?P,E \<turnstile> \<langle>e,
                                  s\<^sub>0\<rangle> \<Rightarrow>'
                                 \<langle>throw e',s\<^sub>1\<rangle> |]
            ==> ?thesis;
         !!E e s\<^sub>0 s\<^sub>1 c e' s\<^sub>2.
            [| ?x = E; ?y = while (e) c; ?z = s\<^sub>0; ?u = throw e';
               ?v = s\<^sub>2;
               ?P,E \<turnstile> \<langle>e,
                                  s\<^sub>0\<rangle> \<Rightarrow>'
                                 \<langle>true,s\<^sub>1\<rangle>;
               ?P,E \<turnstile> \<langle>c,
                                  s\<^sub>1\<rangle> \<Rightarrow>'
                                 \<langle>throw e',s\<^sub>2\<rangle> |]
            ==> ?thesis;
         !!E e s\<^sub>0 r s\<^sub>1.
            [| ?x = E; ?y = throw e; ?z = s\<^sub>0; ?u = Throw r;
               ?v = s\<^sub>1;
               ?P,E \<turnstile> \<langle>e,
                                  s\<^sub>0\<rangle> \<Rightarrow>'
                                 \<langle>ref r,s\<^sub>1\<rangle> |]
            ==> ?thesis;
         !!E e s\<^sub>0 s\<^sub>1.
            [| ?x = E; ?y = throw e; ?z = s\<^sub>0;
               ?u = Throw (addr_of_sys_xcpt NullPointer, [NullPointer]);
               ?v = s\<^sub>1;
               ?P,E \<turnstile> \<langle>e,
                                  s\<^sub>0\<rangle> \<Rightarrow>'
                                 \<langle>null,s\<^sub>1\<rangle> |]
            ==> ?thesis;
         !!E e s\<^sub>0 e' s\<^sub>1.
            [| ?x = E; ?y = throw e; ?z = s\<^sub>0; ?u = throw e';
               ?v = s\<^sub>1;
               ?P,E \<turnstile> \<langle>e,
                                  s\<^sub>0\<rangle> \<Rightarrow>'
                                 \<langle>throw e',s\<^sub>1\<rangle> |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 116, template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 115, t_empty)),
        template_predicate (template_app (template_hole 115, t_empty)),
        template_predicate (template_app (template_hole 112, t_empty)),
        template_predicate (template_app (template_hole 112, t_empty)),
        template_predicate (template_app (template_hole 112, t_empty)),
        template_predicate (template_app (template_hole 112, t_empty)),
        template_predicate (template_app (template_hole 112, t_empty)),
        template_predicate (template_app (template_hole 112, t_empty)),
        template_predicate (template_app (template_hole 112, t_empty)),
        template_predicate (template_app (template_hole 112, t_empty)),
        template_predicate (template_app (template_hole 112, t_empty)),
        template_predicate (template_app (template_hole 112, t_empty)),
        template_predicate (template_app (template_hole 112, t_empty)),
        template_predicate (template_app (template_hole 112, t_empty)),
        template_predicate (template_app (template_hole 112, t_empty)),
        template_predicate (template_app (template_hole 112, t_empty)),
        template_predicate (template_app (template_hole 112, t_empty)),
        template_predicate (template_app (template_hole 111, t_empty)),
        template_predicate (template_app (template_hole 112, t_empty)),
        template_predicate (template_app (template_hole 112, t_empty)),
        template_predicate (template_app (template_hole 112, t_empty)),
        template_predicate (template_app (template_hole 112, t_empty)),
        template_predicate (template_app (template_hole 112, t_empty)),
        template_predicate (template_app (template_hole 112, t_empty)),
        template_predicate (template_app (template_hole 112, t_empty)),
        template_predicate (template_app (template_hole 112, t_empty)),
        template_predicate (template_app (template_hole 112, t_empty)),
        template_predicate (template_app (template_hole 112, t_empty)),
        template_predicate (template_app (template_hole 112, t_empty)),
        template_predicate (template_app (template_hole 112, t_empty)),
        template_predicate (template_app (template_hole 112, t_empty)),
        template_predicate (template_app (template_hole 112, t_empty)),
        template_predicate (template_app (template_hole 112, t_empty)),
        template_predicate (template_app (template_hole 112, t_empty)),
        template_predicate (template_app (template_hole 112, t_empty)),
        template_predicate (template_app (template_hole 112, t_empty)),
        template_predicate (template_app (template_hole 112, t_empty)),
        template_predicate (template_app (template_hole 112, t_empty)),
        template_predicate (template_app (template_hole 112, t_empty)),
        template_predicate (template_app (template_hole 112, t_empty)),
        template_predicate (template_app (template_hole 112, t_empty)),
        template_predicate (template_app (template_hole 112, t_empty)),
        template_predicate (template_app (template_hole 112, t_empty)),
        template_predicate (template_app (template_hole 112, t_empty)),
        template_predicate (template_app (template_hole 112, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.ExecuteTemplates"
### 1.498s elapsed time, 5.658s cpu time, 1.745s GC time
"{\<lfloor>Intg 6\<rfloor>}"
  :: "val option set"
"{Val (Intg 11)}"
  :: "expr set"
"{Val (Intg 83)}"
  :: "expr set"
"{Val (Intg 5)}"
  :: "expr set"
"{\<lfloor>Intg 12\<rfloor>}"
  :: "val option set"
"{Val (Intg 30)}"
  :: "expr set"
### Ambiguous input (line 1179 of "$AFP/CoreC++/Execute.thy") produces 2 parse trees:
### ("_Setcompr"
###   ("_applC" ("_position" fst)
###     ("_tuple" ("_position" e') ("_tuple_arg" ("_position" s'))))
###   ("_idts" ("_position" e') ("_position" s'))
###   ("\<^const>Execute.eval'" ("_position" progOverrider)
###     ("_Map"
###       ("_Maplets"
###         ("_maplet" ("_String" ("_position" ''V''))
###           ("_applC" ("_position" Class)
###             ("_String" ("_position" ''Right''))))
###         ("_maplet" ("_String" ("_position" ''W''))
###           ("_applC" ("_position" Class)
###             ("_String" ("_position" ''Bottom''))))))
###     ("\<^const>Expr.expr.Seq"
###       ("\<^const>Expr.expr.LAss" ("_String" ("_position" ''V''))
###         ("_applC" ("_position" new) ("_String" ("_position" ''Bottom''))))
###       ("\<^const>Expr.expr.Seq"
###         ("\<^const>Expr.expr.LAss" ("_String" ("_position" ''W''))
###           ("_applC" ("_position" new) ("_String" ("_position" ''Bottom''))))
###         ("\<^const>Expr.expr.Seq"
###           ("\<^const>Expr.expr.LAss"
###             ("\<^const>Expr.expr.FAcc"
###               ("_applC" ("_position" Cast)
###                 ("_cargs" ("_String" ("_position" ''Left''))
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''W'')))))
###               ("_String" ("_position" ''x''))
###               ("_list"
###                 ("_args" ("_String" ("_position" ''Left''))
###                   ("_String" ("_position" ''Top'')))))
###             ("_applC" ("_position" Val)
###               ("_applC" ("_position" Intg)
###                 ("_Numeral" ("_constify" ("_position" 3))))))
###           ("\<^const>Expr.StaticCall"
###             ("_applC" ("_position" Var) ("_String" ("_position" ''W'')))
###             ("_String" ("_position" ''Left''))
###             ("_String" ("_position" ''f''))
###             ("_list"
###               ("_args"
###                 ("_applC" ("_position" Var) ("_String" ("_position" ''V'')))
###                 ("_applC" ("_position" Val)
###                   ("_applC" ("_position" Intg)
###                     ("_Numeral" ("_constify" ("_position" 2)))))))))))
###     ("_tuple" ("_position" Map.empty)
###       ("_tuple_arg" ("_position" Map.empty)))
###     ("_position" e') ("_position" s')))
### ("_Setcompr"
###   ("_applC" ("_position" fst)
###     ("_tuple" ("_position" e') ("_tuple_arg" ("_position" s'))))
###   ("_idts" ("_position" e') ("_position" s'))
###   ("\<^const>Execute.eval'" ("_position" progOverrider)
###     ("_Map"
###       ("_Maplets"
###         ("_maplet" ("_String" ("_position" ''V''))
###           ("_applC" ("_position" Class)
###             ("_String" ("_position" ''Right''))))
###         ("_maplet" ("_String" ("_position" ''W''))
###           ("_applC" ("_position" Class)
###             ("_String" ("_position" ''Bottom''))))))
###     ("\<^const>Expr.expr.Seq"
###       ("\<^const>Expr.expr.LAss" ("_String" ("_position" ''V''))
###         ("_applC" ("_position" new) ("_String" ("_position" ''Bottom''))))
###       ("\<^const>Expr.expr.Seq"
###         ("\<^const>Expr.expr.LAss" ("_String" ("_position" ''W''))
###           ("_applC" ("_position" new) ("_String" ("_position" ''Bottom''))))
###         ("\<^const>Expr.expr.Seq"
###           ("\<^const>Expr.expr.FAss"
###             ("_applC" ("_position" Cast)
###               ("_cargs" ("_String" ("_position" ''Left''))
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''W'')))))
###             ("_String" ("_position" ''x''))
###             ("_list"
###               ("_args" ("_String" ("_position" ''Left''))
###                 ("_String" ("_position" ''Top''))))
###             ("_applC" ("_position" Val)
###               ("_applC" ("_position" Intg)
###                 ("_Numeral" ("_constify" ("_position" 3))))))
###           ("\<^const>Expr.StaticCall"
###             ("_applC" ("_position" Var) ("_String" ("_position" ''W'')))
###             ("_String" ("_position" ''Left''))
###             ("_String" ("_position" ''f''))
###             ("_list"
###               ("_args"
###                 ("_applC" ("_position" Var) ("_String" ("_position" ''V'')))
###                 ("_applC" ("_position" Val)
###                   ("_applC" ("_position" Intg)
###                     ("_Numeral" ("_constify" ("_position" 2)))))))))))
###     ("_tuple" ("_position" Map.empty)
###       ("_tuple_arg" ("_position" Map.empty)))
###     ("_position" e') ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
"{ref (0, [''Bottom'', ''Left''])}"
  :: "expr set"
"{ref (0, [''Right''])}"
  :: "expr set"
### Ambiguous input (line 1193 of "$AFP/CoreC++/Execute.thy") produces 2 parse trees:
### ("_Setcompr"
###   ("_applC" ("_position" fst)
###     ("_tuple" ("_position" e') ("_tuple_arg" ("_position" s'))))
###   ("_idts" ("_position" e') ("_position" s'))
###   ("\<^const>Execute.eval'" ("_position" progOverrider)
###     ("_Map"
###       ("_Maplets"
###         ("_maplet" ("_String" ("_position" ''V''))
###           ("_applC" ("_position" Class)
###             ("_String" ("_position" ''Right2''))))
###         ("_maplet" ("_String" ("_position" ''W''))
###           ("_applC" ("_position" Class)
###             ("_String" ("_position" ''Left''))))))
###     ("\<^const>Expr.expr.Seq"
###       ("\<^const>Expr.expr.LAss" ("_String" ("_position" ''V''))
###         ("_applC" ("_position" new) ("_String" ("_position" ''Bottom''))))
###       ("\<^const>Expr.expr.Seq"
###         ("\<^const>Expr.expr.LAss"
###           ("\<^const>Expr.expr.FAcc"
###             ("_applC" ("_position" Var) ("_String" ("_position" ''V'')))
###             ("_String" ("_position" ''x''))
###             ("_list"
###               ("_args" ("_String" ("_position" ''Right2''))
###                 ("_String" ("_position" ''Top'')))))
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" Intg)
###               ("_Numeral" ("_constify" ("_position" 6))))))
###         ("\<^const>Expr.expr.Seq"
###           ("\<^const>Expr.expr.LAss" ("_String" ("_position" ''W''))
###             ("_applC" ("_position" new) ("_String" ("_position" ''Left''))))
###           ("\<^const>Expr.DynCall"
###             ("_applC" ("_position" Var) ("_String" ("_position" ''V'')))
###             ("_String" ("_position" ''f''))
###             ("_list"
###               ("_args"
###                 ("_applC" ("_position" Var) ("_String" ("_position" ''W'')))
###                 ("_applC" ("_position" Val)
###                   ("_applC" ("_position" Intg)
###                     ("_Numeral" ("_constify" ("_position" 42)))))))))))
###     ("_tuple" ("_position" Map.empty)
###       ("_tuple_arg" ("_position" Map.empty)))
###     ("_position" e') ("_position" s')))
### ("_Setcompr"
###   ("_applC" ("_position" fst)
###     ("_tuple" ("_position" e') ("_tuple_arg" ("_position" s'))))
###   ("_idts" ("_position" e') ("_position" s'))
###   ("\<^const>Execute.eval'" ("_position" progOverrider)
###     ("_Map"
###       ("_Maplets"
###         ("_maplet" ("_String" ("_position" ''V''))
###           ("_applC" ("_position" Class)
###             ("_String" ("_position" ''Right2''))))
###         ("_maplet" ("_String" ("_position" ''W''))
###           ("_applC" ("_position" Class)
###             ("_String" ("_position" ''Left''))))))
###     ("\<^const>Expr.expr.Seq"
###       ("\<^const>Expr.expr.LAss" ("_String" ("_position" ''V''))
###         ("_applC" ("_position" new) ("_String" ("_position" ''Bottom''))))
###       ("\<^const>Expr.expr.Seq"
###         ("\<^const>Expr.expr.FAss"
###           ("_applC" ("_position" Var) ("_String" ("_position" ''V'')))
###           ("_String" ("_position" ''x''))
###           ("_list"
###             ("_args" ("_String" ("_position" ''Right2''))
###               ("_String" ("_position" ''Top''))))
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" Intg)
###               ("_Numeral" ("_constify" ("_position" 6))))))
###         ("\<^const>Expr.expr.Seq"
###           ("\<^const>Expr.expr.LAss" ("_String" ("_position" ''W''))
###             ("_applC" ("_position" new) ("_String" ("_position" ''Left''))))
###           ("\<^const>Expr.DynCall"
###             ("_applC" ("_position" Var) ("_String" ("_position" ''V'')))
###             ("_String" ("_position" ''f''))
###             ("_list"
###               ("_args"
###                 ("_applC" ("_position" Var) ("_String" ("_position" ''W'')))
###                 ("_applC" ("_position" Val)
###                   ("_applC" ("_position" Intg)
###                     ("_Numeral" ("_constify" ("_position" 42)))))))))))
###     ("_tuple" ("_position" Map.empty)
###       ("_tuple_arg" ("_position" Map.empty)))
###     ("_position" e') ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
"{Val (Intg 42)}"
  :: "expr set"
"{Val (Intg 8), Val (Intg 8)}"
  :: "expr set"
"{Val (Intg 12)}"
  :: "expr set"
### Ambiguous input (line 1205 of "$AFP/CoreC++/Execute.thy") produces 2 parse trees:
### ("_Setcompr"
###   ("_applC" ("_position" fst)
###     ("_tuple" ("_position" e') ("_tuple_arg" ("_position" s'))))
###   ("_idts" ("_position" e') ("_position" s'))
###   ("\<^const>Execute.eval'" ("_position" progOverrider)
###     ("_Map"
###       ("_maplet" ("_String" ("_position" ''V''))
###         ("_applC" ("_position" Class)
###           ("_String" ("_position" ''Right2'')))))
###     ("\<^const>Expr.expr.Seq"
###       ("\<^const>Expr.expr.LAss" ("_String" ("_position" ''V''))
###         ("_applC" ("_position" new) ("_String" ("_position" ''Right''))))
###       ("\<^const>Expr.expr.Seq"
###         ("\<^const>Expr.expr.LAss"
###           ("\<^const>Expr.expr.FAcc"
###             ("_applC" ("_position" Var) ("_String" ("_position" ''V'')))
###             ("_String" ("_position" ''x''))
###             ("_list"
###               ("_args" ("_String" ("_position" ''Right2''))
###                 ("_String" ("_position" ''Top'')))))
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" Intg)
###               ("_Numeral" ("_constify" ("_position" 42))))))
###         ("\<^const>Expr.expr.FAcc"
###           ("_applC" ("_position" Var) ("_String" ("_position" ''V'')))
###           ("_String" ("_position" ''x''))
###           ("_list"
###             ("_args" ("_String" ("_position" ''Right2''))
###               ("_String" ("_position" ''Top'')))))))
###     ("_tuple" ("_position" Map.empty)
###       ("_tuple_arg" ("_position" Map.empty)))
###     ("_position" e') ("_position" s')))
### ("_Setcompr"
###   ("_applC" ("_position" fst)
###     ("_tuple" ("_position" e') ("_tuple_arg" ("_position" s'))))
###   ("_idts" ("_position" e') ("_position" s'))
###   ("\<^const>Execute.eval'" ("_position" progOverrider)
###     ("_Map"
###       ("_maplet" ("_String" ("_position" ''V''))
###         ("_applC" ("_position" Class)
###           ("_String" ("_position" ''Right2'')))))
###     ("\<^const>Expr.expr.Seq"
###       ("\<^const>Expr.expr.LAss" ("_String" ("_position" ''V''))
###         ("_applC" ("_position" new) ("_String" ("_position" ''Right''))))
###       ("\<^const>Expr.expr.Seq"
###         ("\<^const>Expr.expr.FAss"
###           ("_applC" ("_position" Var) ("_String" ("_position" ''V'')))
###           ("_String" ("_position" ''x''))
###           ("_list"
###             ("_args" ("_String" ("_position" ''Right2''))
###               ("_String" ("_position" ''Top''))))
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" Intg)
###               ("_Numeral" ("_constify" ("_position" 42))))))
###         ("\<^const>Expr.expr.FAcc"
###           ("_applC" ("_position" Var) ("_String" ("_position" ''V'')))
###           ("_String" ("_position" ''x''))
###           ("_list"
###             ("_args" ("_String" ("_position" ''Right2''))
###               ("_String" ("_position" ''Top'')))))))
###     ("_tuple" ("_position" Map.empty)
###       ("_tuple_arg" ("_position" Map.empty)))
###     ("_position" e') ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
"{Val (Intg 13)}"
  :: "expr set"
"{ref (1, [''Left'', ''Top''])}"
  :: "expr set"
"{Val (Intg 42)}"
  :: "expr set"
"{Class ''Bottom''}"
  :: "ty set"
"{Class ''Left''}"
  :: "ty set"
"{Integer}"
  :: "ty set"
"{Integer}"
  :: "ty set"
"{Boolean}"
  :: "ty set"
"{Class ''Left''}"
  :: "ty set"
"{Class ''Top''}"
  :: "ty set"
"{Integer}"
  :: "ty set"
"{Integer}"
  :: "ty set"
"{Integer, Integer}"
  :: "ty set"
"{Class ''Top''}"
  :: "ty set"
"{Class ''Top''}"
  :: "ty set"
"{Integer}"
  :: "ty set"
"{Void}"
  :: "ty set"
"{Void}"
  :: "ty set"
"{Integer, Integer}"
  :: "ty set"
"{}"
  :: "ty set"
### Ambiguous input (line 1320 of "$AFP/CoreC++/Execute.thy") produces 2 parse trees:
### ("_Setcompr"
###   ("_applC" ("_position" fst)
###     ("_tuple" ("_position" e') ("_tuple_arg" ("_position" s'))))
###   ("_idts" ("_position" e') ("_position" s'))
###   ("\<^const>Execute.eval'" ("_position" progDiamond)
###     ("_Map"
###       ("_maplet" ("_String" ("_position" ''V''))
###         ("_applC" ("_position" Class)
###           ("_String" ("_position" ''Bottom'')))))
###     ("\<^const>Expr.expr.Seq"
###       ("\<^const>Expr.expr.LAss" ("_String" ("_position" ''V''))
###         ("_applC" ("_position" new) ("_String" ("_position" ''Bottom''))))
###       ("\<^const>Expr.expr.Seq"
###         ("\<^const>Expr.expr.LAss"
###           ("\<^const>Expr.expr.FAcc"
###             ("_applC" ("_position" Var) ("_String" ("_position" ''V'')))
###             ("_String" ("_position" ''x''))
###             ("_list" ("_String" ("_position" ''Bottom''))))
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" Intg)
###               ("_Numeral" ("_constify" ("_position" 17))))))
###         ("\<^const>Expr.expr.FAcc"
###           ("_applC" ("_position" Var) ("_String" ("_position" ''V'')))
###           ("_String" ("_position" ''x''))
###           ("_list" ("_String" ("_position" ''Bottom''))))))
###     ("_tuple" ("_position" Map.empty)
###       ("_tuple_arg" ("_position" Map.empty)))
###     ("_position" e') ("_position" s')))
### ("_Setcompr"
###   ("_applC" ("_position" fst)
###     ("_tuple" ("_position" e') ("_tuple_arg" ("_position" s'))))
###   ("_idts" ("_position" e') ("_position" s'))
###   ("\<^const>Execute.eval'" ("_position" progDiamond)
###     ("_Map"
###       ("_maplet" ("_String" ("_position" ''V''))
###         ("_applC" ("_position" Class)
###           ("_String" ("_position" ''Bottom'')))))
###     ("\<^const>Expr.expr.Seq"
###       ("\<^const>Expr.expr.LAss" ("_String" ("_position" ''V''))
###         ("_applC" ("_position" new) ("_String" ("_position" ''Bottom''))))
###       ("\<^const>Expr.expr.Seq"
###         ("\<^const>Expr.expr.FAss"
###           ("_applC" ("_position" Var) ("_String" ("_position" ''V'')))
###           ("_String" ("_position" ''x''))
###           ("_list" ("_String" ("_position" ''Bottom'')))
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" Intg)
###               ("_Numeral" ("_constify" ("_position" 17))))))
###         ("\<^const>Expr.expr.FAcc"
###           ("_applC" ("_position" Var) ("_String" ("_position" ''V'')))
###           ("_String" ("_position" ''x''))
###           ("_list" ("_String" ("_position" ''Bottom''))))))
###     ("_tuple" ("_position" Map.empty)
###       ("_tuple_arg" ("_position" Map.empty)))
###     ("_position" e') ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
"{ref (0, [''Bottom'', ''Left''])}"
  :: "expr set"
"{ref (0, [''TopSh'']), ref (0, [''TopSh''])}"
  :: "expr set"
"{ref (0, [''Bottom'', ''Left'', ''TopRep'']),
  ref (0, [''Bottom'', ''Right'', ''TopRep''])}"
  :: "expr set"
"{null}"
  :: "expr set"
"{ref (0, [''Right''])}"
  :: "expr set"
"{null}"
  :: "expr set"
"{Val (Intg 17)}"
  :: "expr set"
"{ref (0, [''Bottom'', ''Left''])}"
  :: "expr set"
"{Val (Intg 42)}"
  :: "expr set"
val it = (): unit
