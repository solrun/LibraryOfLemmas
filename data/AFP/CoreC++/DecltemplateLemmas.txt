   [("Decl.finite_is_class", "finite {C. is_class ?P C}",
     template_predicate
      (
         template_app
          (template_hole 2, template_app (template_hole 1, t_empty))
         )),
    ("Decl.typeof_lit_is_type",
     "typeof ?v = \<lfloor>?T\<rfloor> ==> is_type ?P ?T",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 2),
          template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Decl.not_getbase_repeats",
     "?D ~: set (map getbase ?xs) ==> Repeats ?D ~: set ?xs",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_hole 3),
                      template_var 0)))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 1)),
                 template_app (template_hole 0, template_var 0))
               )
           ))),
    ("Decl.not_getbase_shares",
     "?D ~: set (map getbase ?xs) ==> Shares ?D ~: set ?xs",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_hole 3),
                      template_var 0)))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 1)),
                 template_app (template_hole 0, template_var 0))
               )
           ))),
    ("Decl.finite_baseClasses",
     "class ?P ?C = \<lfloor>(?Bs, ?fs, ?ms)\<rfloor> ==>
      finite (baseClasses ?Bs)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 4), template_var 3),
          template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2))
           ))),
    ("Decl.baseClasses_repeats_or_shares",
     "?D : baseClasses ?Bs ==> Repeats ?D : set ?Bs | Shares ?D : set ?Bs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 1)),
                 template_app (template_hole 1, template_var 0))),
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 0, template_var 1)),
               template_app (template_hole 1, template_var 0)))
           ))),
    ("Decl.base_repeats_or_shares",
     "[| ?B : set ?Bs; ?D = getbase ?B |]
      ==> Repeats ?D : set ?Bs | Shares ?D : set ?Bs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 1))
            ),
        template_equation
         (template_var 0, template_app (template_hole 3, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 1, template_var 0)),
                 template_app (template_hole 5, template_var 1))),
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 0, template_var 0)),
               template_app (template_hole 5, template_var 1)))
           ))),
    ("Decl.RepBaseclass_isBaseclass",
     "[| class ?P ?C = \<lfloor>(?Bs, ?fs, ?ms)\<rfloor>;
         Repeats ?D : set ?Bs |]
      ==> ?D : baseClasses ?Bs",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 8, template_var 5), template_var 4),
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1)))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)),
              template_app (template_hole 2, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 3))
           ))),
    ("Decl.ShBaseclass_isBaseclass",
     "[| class ?P ?C = \<lfloor>(?Bs, ?fs, ?ms)\<rfloor>;
         Shares ?D : set ?Bs |]
      ==> ?D : baseClasses ?Bs",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 8, template_var 5), template_var 4),
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1)))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)),
              template_app (template_hole 2, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 3))
           ))),
    ("Decl.is_type_simps",
     "is_type ?P Void &
      is_type ?P Boolean &
      is_type ?P Integer &
      is_type ?P NT & is_type ?P (Class ?C) = is_class ?P ?C",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_var 1),
               template_hole 6)),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 1),
                 template_hole 5)),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 1),
                   template_hole 4)),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 1),
                     template_hole 3)),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 7, template_var 1),
                       template_app (template_hole 1, template_var 0))),
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0))))))
         ))]
