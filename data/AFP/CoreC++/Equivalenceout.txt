Loading theory "Draft.Auxiliary" (required by "Draft.EquivalenceTemplates" via "Draft.Equivalence" via "Draft.BigStep" via "Draft.Syntax" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj" via "Draft.ClassRel" via "Draft.Decl" via "Draft.Expr" via "Draft.Value" via "Draft.Type")
Loading theory "Draft.Templates" (required by "Draft.EquivalenceTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.079s elapsed time, 0.189s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.EquivalenceTemplates")
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### theory "Draft.Auxiliary"
### 0.290s elapsed time, 0.619s cpu time, 0.029s GC time
Loading theory "Draft.Type" (required by "Draft.EquivalenceTemplates" via "Draft.Equivalence" via "Draft.BigStep" via "Draft.Syntax" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj" via "Draft.ClassRel" via "Draft.Decl" via "Draft.Expr" via "Draft.Value")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.549s elapsed time, 1.132s cpu time, 0.096s GC time
consts
  getbase :: "base => char list"
consts
  isRepBase :: "base => bool"
consts
  isShBase :: "base => bool"
### theory "Draft.Type"
### 0.629s elapsed time, 0.991s cpu time, 0.066s GC time
Loading theory "Draft.Value" (required by "Draft.EquivalenceTemplates" via "Draft.Equivalence" via "Draft.BigStep" via "Draft.Syntax" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj" via "Draft.ClassRel" via "Draft.Decl" via "Draft.Expr")
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Ref"
consts
  the_Intg :: "val => int"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_addr :: "val => nat"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_path :: "val => char list list"
consts
  default_val :: "ty => val"
consts
  typeof :: "val => ty option"
### theory "Draft.Value"
### 0.404s elapsed time, 0.442s cpu time, 0.052s GC time
Loading theory "Draft.Expr" (required by "Draft.EquivalenceTemplates" via "Draft.Equivalence" via "Draft.BigStep" via "Draft.Syntax" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj" via "Draft.ClassRel" via "Draft.Decl")
Found termination order: "{}"
### Ambiguous input (line 80 of "$AFP/CoreC++/Expr.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" fv)
###       ("_updbind" ("_position" V) ("_position" e)))
###     ("\<^const>Set.union" ("_Finset" ("_position" V))
###       ("_applC" ("_position" fv) ("_position" e)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.expr.LAss" ("_position" V) ("_position" e)))
###     ("\<^const>Set.union" ("_Finset" ("_position" V))
###       ("_applC" ("_position" fv) ("_position" e)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 82 of "$AFP/CoreC++/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" fv)
###       ("_updbind"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  fv :: "expr => char list set"
  fvs :: "expr list => char list set"
### theory "Draft.Expr"
### 2.282s elapsed time, 2.724s cpu time, 0.619s GC time
Loading theory "Draft.Decl" (required by "Draft.EquivalenceTemplates" via "Draft.Equivalence" via "Draft.BigStep" via "Draft.Syntax" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj" via "Draft.ClassRel")
### theory "Draft.Decl"
### 0.095s elapsed time, 0.143s cpu time, 0.053s GC time
Loading theory "Draft.ClassRel" (required by "Draft.EquivalenceTemplates" via "Draft.Equivalence" via "Draft.BigStep" via "Draft.Syntax" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj")
Proofs for inductive predicate(s) "subclsRp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "subclsSp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "subcls1p"
  Proving monotonicity ...
### theory "Draft.ClassRel"
### 0.170s elapsed time, 0.170s cpu time, 0.000s GC time
Loading theory "Draft.SubObj" (required by "Draft.EquivalenceTemplates" via "Draft.Equivalence" via "Draft.BigStep" via "Draft.Syntax" via "Draft.Exceptions" via "Draft.Objects")
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Proofs for inductive predicate(s) "Subobjs\<^sub>R"
  Proving monotonicity ...
Proofs for inductive predicate(s) "Subobjs"
  Proving monotonicity ...
Proofs for inductive predicate(s) "casts_to"
  Proving monotonicity ...
Proofs for inductive predicate(s) "Casts_to"
  Proving monotonicity ...
Proofs for inductive predicate(s) "leq_path1p"
  Proving monotonicity ...
### Ambiguous input (line 720 of "$AFP/CoreC++/SubObj.thy") produces 3 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" MinimalMethodDefs)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" C) ("_position" M))))
###   ("_Coll" ("_pattern" ("_position" Cs) ("_position" mthd))
###     ("\<^const>HOL.conj"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" Cs) ("_tuple_arg" ("_position" mthd)))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M)))))
###       ("_Ball" ("_pattern" ("_position" Cs') ("_position" mthd'))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M))))
###         ("\<^const>HOL.eq"
###           ("\<^const>SubObj.leq_path" ("_position" P) ("_position" C)
###             ("_position" Cs')
###             ("\<^const>HOL.implies" ("_position" Cs) ("_position" Cs')))
###           ("_position" Cs))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" MinimalMethodDefs)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" C) ("_position" M))))
###   ("_Coll" ("_pattern" ("_position" Cs) ("_position" mthd))
###     ("\<^const>HOL.conj"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" Cs) ("_tuple_arg" ("_position" mthd)))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M)))))
###       ("_Ball" ("_pattern" ("_position" Cs') ("_position" mthd'))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M))))
###         ("\<^const>SubObj.leq_path" ("_position" P) ("_position" C)
###           ("_position" Cs')
###           ("\<^const>HOL.implies" ("_position" Cs)
###             ("\<^const>HOL.eq" ("_position" Cs') ("_position" Cs))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" MinimalMethodDefs)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" C) ("_position" M))))
###   ("_Coll" ("_pattern" ("_position" Cs) ("_position" mthd))
###     ("\<^const>HOL.conj"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" Cs) ("_tuple_arg" ("_position" mthd)))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M)))))
###       ("_Ball" ("_pattern" ("_position" Cs') ("_position" mthd'))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M))))
###         ("\<^const>HOL.implies"
###           ("\<^const>SubObj.leq_path" ("_position" P) ("_position" C)
###             ("_position" Cs') ("_position" Cs))
###           ("\<^const>HOL.eq" ("_position" Cs') ("_position" Cs)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 725 of "$AFP/CoreC++/SubObj.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" OverriderMethodDefs)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" R) ("_position" M))))
###   ("_Coll" ("_pattern" ("_position" Cs) ("_position" mthd))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" Cs') ("_position" mthd'))
###       ("\<^const>HOL.conj"
###         ("\<^const>SubObj.LeastMethodDef" ("_position" P)
###           ("_applC" ("_position" ldc) ("_position" R)) ("_position" M)
###           ("_position" mthd') ("_position" Cs'))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" Cs) ("_tuple_arg" ("_position" mthd)))
###             ("_applC" ("_position" MinimalMethodDefs)
###               ("_cargs" ("_position" P)
###                 ("_cargs" ("_applC" ("_position" mdc) ("_position" R))
###                   ("_position" M)))))
###           ("\<^const>SubObj.appendPath"
###             ("\<^const>SubObj.leq_path" ("_position" P)
###               ("_applC" ("_position" mdc) ("_position" R)) ("_position" Cs)
###               ("_applC" ("_position" snd) ("_position" R)))
###             ("_position" Cs')))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" OverriderMethodDefs)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" R) ("_position" M))))
###   ("_Coll" ("_pattern" ("_position" Cs) ("_position" mthd))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" Cs') ("_position" mthd'))
###       ("\<^const>HOL.conj"
###         ("\<^const>SubObj.LeastMethodDef" ("_position" P)
###           ("_applC" ("_position" ldc) ("_position" R)) ("_position" M)
###           ("_position" mthd') ("_position" Cs'))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" Cs) ("_tuple_arg" ("_position" mthd)))
###             ("_applC" ("_position" MinimalMethodDefs)
###               ("_cargs" ("_position" P)
###                 ("_cargs" ("_applC" ("_position" mdc) ("_position" R))
###                   ("_position" M)))))
###           ("\<^const>SubObj.leq_path" ("_position" P)
###             ("_applC" ("_position" mdc) ("_position" R)) ("_position" Cs)
###             ("\<^const>SubObj.appendPath"
###               ("_applC" ("_position" snd) ("_position" R))
###               ("_position" Cs'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "SelectMethodDef"
  Proving monotonicity ...
### theory "Draft.SubObj"
### 0.869s elapsed time, 0.935s cpu time, 0.089s GC time
Loading theory "Draft.Objects" (required by "Draft.EquivalenceTemplates" via "Draft.Equivalence" via "Draft.BigStep" via "Draft.Syntax" via "Draft.Exceptions")
Loading theory "Draft.TypeRel" (required by "Draft.EquivalenceTemplates" via "Draft.Equivalence" via "Draft.WWellForm" via "Draft.WellForm")
Proofs for inductive predicate(s) "widen"
  Proving monotonicity ...
Proofs for inductive predicate(s) "init_obj"
  Proving monotonicity ...
### theory "Draft.TypeRel"
### 0.077s elapsed time, 0.173s cpu time, 0.049s GC time
### theory "Draft.Objects"
### 0.092s elapsed time, 0.189s cpu time, 0.049s GC time
Loading theory "Draft.Exceptions" (required by "Draft.EquivalenceTemplates" via "Draft.Equivalence" via "Draft.BigStep" via "Draft.Syntax")
### theory "Draft.Exceptions"
### 0.085s elapsed time, 0.085s cpu time, 0.000s GC time
Loading theory "Draft.State" (required by "Draft.EquivalenceTemplates" via "Draft.Equivalence" via "Draft.BigStep")
Loading theory "Draft.Syntax" (required by "Draft.EquivalenceTemplates" via "Draft.Equivalence" via "Draft.BigStep")
Loading theory "Draft.SystemClasses" (required by "Draft.EquivalenceTemplates" via "Draft.Equivalence" via "Draft.WWellForm" via "Draft.WellForm")
### theory "Draft.Syntax"
### 0.035s elapsed time, 0.100s cpu time, 0.000s GC time
Loading theory "Draft.WellType" (required by "Draft.EquivalenceTemplates" via "Draft.Equivalence" via "Draft.WWellForm" via "Draft.WellForm")
### theory "Draft.State"
### 0.036s elapsed time, 0.107s cpu time, 0.000s GC time
Loading theory "Draft.BigStep" (required by "Draft.EquivalenceTemplates" via "Draft.Equivalence")
Loading theory "Draft.SmallStep" (required by "Draft.EquivalenceTemplates" via "Draft.Equivalence")
### theory "Draft.SystemClasses"
### 0.052s elapsed time, 0.170s cpu time, 0.000s GC time
### Ambiguous input (line 17 of "$AFP/CoreC++/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" blocks)
###       ("_tuple" ("\<^const>List.list.Cons" ("_position" V) ("_position" Vs))
###         ("_tuple_args"
###           ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts))
###           ("_tuple_args"
###             ("\<^const>List.list.Cons" ("_position" v) ("_position" vs))
###             ("_tuple_arg" ("_position" e))))))
###     ("\<^const>Expr.expr.Block" ("_position" V)
###       ("\<^const>Expr.expr.LAss" ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_applC" ("_position" blocks)
###         ("_tuple" ("_position" Vs)
###           ("_tuple_args" ("_position" Ts)
###             ("_tuple_args" ("_position" vs)
###               ("_tuple_arg" ("_position" e)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" blocks)
###       ("_tuple" ("\<^const>List.list.Cons" ("_position" V) ("_position" Vs))
###         ("_tuple_args"
###           ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts))
###           ("_tuple_args"
###             ("\<^const>List.list.Cons" ("_position" v) ("_position" vs))
###             ("_tuple_arg" ("_position" e))))))
###     ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###       ("_applC" ("_position" Val) ("_position" v))
###       ("_applC" ("_position" blocks)
###         ("_tuple" ("_position" Vs)
###           ("_tuple_args" ("_position" Ts)
###             ("_tuple_args" ("_position" vs)
###               ("_tuple_arg" ("_position" e)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Missing patterns in function definition:
### !!vc vd vb. blocks ([], vc # vd, vb) = undefined
### !!v ve vf vd. blocks ([], v, ve # vf, vd) = undefined
### !!va vb vc. blocks (va # vb, [], vc) = undefined
### (3 more)
### Ambiguous input (line 172 of "$AFP/CoreC++/BigStep.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e\<^sub>0)
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg"
###             ("_applC" ("_position" l\<^sub>0)
###               ("\<^const>Expr.expr.LAss" ("_position" V)
###                 ("_position" None)))))
###         ("_position" e\<^sub>1)
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_arg" ("_position" l\<^sub>1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg" ("_position" l\<^sub>0)))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg"
###           ("_applC" ("_position" l\<^sub>1)
###             ("\<^const>Expr.expr.LAss" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e\<^sub>0)
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg"
###             ("_Update" ("_position" l\<^sub>0)
###               ("_updbind" ("_position" V) ("_position" None)))))
###         ("_position" e\<^sub>1)
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_arg" ("_position" l\<^sub>1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg" ("_position" l\<^sub>0)))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg"
###           ("_applC" ("_position" l\<^sub>1)
###             ("\<^const>Expr.expr.LAss" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e\<^sub>0)
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg"
###             ("_applC" ("_position" l\<^sub>0)
###               ("\<^const>Expr.expr.LAss" ("_position" V)
###                 ("_position" None)))))
###         ("_position" e\<^sub>1)
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_arg" ("_position" l\<^sub>1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg" ("_position" l\<^sub>0)))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg"
###           ("_Update" ("_position" l\<^sub>1)
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e\<^sub>0)
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg"
###             ("_Update" ("_position" l\<^sub>0)
###               ("_updbind" ("_position" V) ("_position" None)))))
###         ("_position" e\<^sub>1)
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_arg" ("_position" l\<^sub>1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg" ("_position" l\<^sub>0)))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg"
###           ("_Update" ("_position" l\<^sub>1)
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 123 of "$AFP/CoreC++/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###         ("_applC" ("_position" ref)
###           ("_tuple" ("_position" a) ("_tuple_arg" ("_position" Cs'))))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_arg" ("_position" l\<^sub>2)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" D) ("_tuple_arg" ("_position" S))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>SubObj.LeastFieldDecl" ("_position" P)
###               ("_applC" ("_position" last) ("_position" Cs'))
###               ("_position" F) ("_position" T) ("_position" Cs)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###                 ("_position" v) ("_position" v')))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" Ds)
###                   ("\<^const>SubObj.appendPath" ("_position" Cs')
###                     ("_position" Cs))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" Ds)
###                       ("_tuple_arg" ("_position" fs)))
###                     ("_position" S)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq" ("_position" fs')
###                       ("_MapUpd" ("_position" fs)
###                         ("_maplet" ("_position" F) ("_position" v')))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq" ("_position" S')
###                         ("\<^const>Set.union"
###                           ("\<^const>Groups.minus_class.minus"
###                             ("_position" S)
###                             ("_Finset"
###                               ("_tuple" ("_position" Ds)
###                                 ("_tuple_arg" ("_position" fs)))))
###                           ("_Finset"
###                             ("_tuple" ("_position" Ds)
###                               ("_tuple_arg" ("_position" fs')))))))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" h\<^sub>2')
###                           ("_MapUpd" ("_position" h\<^sub>2)
###                             ("_maplet" ("_position" a)
###                               ("_tuple" ("_position" D)
###                                 ("_tuple_arg"
###                                   ("_position" S')))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v'))
###       ("_tuple" ("_position" h\<^sub>2')
###         ("_tuple_arg" ("_position" l\<^sub>2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###         ("_applC" ("_position" ref)
###           ("_tuple" ("_position" a) ("_tuple_arg" ("_position" Cs'))))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_arg" ("_position" l\<^sub>2)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" D) ("_tuple_arg" ("_position" S))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>SubObj.LeastFieldDecl" ("_position" P)
###               ("_applC" ("_position" last) ("_position" Cs'))
###               ("_position" F) ("_position" T) ("_position" Cs)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###                 ("_position" v) ("_position" v')))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" Ds)
###                   ("\<^const>SubObj.appendPath" ("_position" Cs')
###                     ("_position" Cs))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" Ds)
###                       ("_tuple_arg" ("_position" fs)))
###                     ("_position" S)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq" ("_position" fs')
###                       ("_MapUpd" ("_position" fs)
###                         ("_maplet" ("_position" F) ("_position" v')))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq" ("_position" S')
###                         ("\<^const>Set.union"
###                           ("\<^const>Groups.minus_class.minus"
###                             ("_position" S)
###                             ("_Finset"
###                               ("_tuple" ("_position" Ds)
###                                 ("_tuple_arg" ("_position" fs)))))
###                           ("_Finset"
###                             ("_tuple" ("_position" Ds)
###                               ("_tuple_arg" ("_position" fs')))))))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" h\<^sub>2')
###                           ("_MapUpd" ("_position" h\<^sub>2)
###                             ("_maplet" ("_position" a)
###                               ("_tuple" ("_position" D)
###                                 ("_tuple_arg"
###                                   ("_position" S')))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v'))
###       ("_tuple" ("_position" h\<^sub>2')
###         ("_tuple_arg" ("_position" l\<^sub>2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 130 of "$AFP/CoreC++/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1) ("_position" s\<^sub>0) ("_position" null)
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1) ("_position" s\<^sub>0) ("_position" null)
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 134 of "$AFP/CoreC++/BigStep.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E) ("_position" e\<^sub>1)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E) ("_position" e\<^sub>1)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 138 of "$AFP/CoreC++/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###         ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###           ("_applC" ("_position" throw) ("_position" e'))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###         ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###           ("_applC" ("_position" throw) ("_position" e'))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 62 of "$AFP/CoreC++/WellType.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WT" ("_position" P) ("_position" E) ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SubObj.LeastFieldDecl" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" T) ("_position" Cs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" T))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WT" ("_position" P) ("_position" E) ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SubObj.LeastFieldDecl" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" T) ("_position" Cs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" T))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "WT", "WTs"
  Proving monotonicity ...
Found termination order:
  "(%p. size_list size (fst (snd (snd p)))) <*mlex*> {}"
### Ambiguous input (line 144 of "$AFP/CoreC++/SmallStep.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e') ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss" ("_position" e) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e') ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s)
###       ("\<^const>Expr.expr.FAss" ("_position" e') ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss" ("_position" e) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s)
###       ("\<^const>Expr.expr.FAss" ("_position" e') ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 148 of "$AFP/CoreC++/SmallStep.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" Cs))
###         ("_position" e))
###       ("_position" s)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" Cs))
###         ("_position" e'))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss"
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###         ("_position" Cs) ("_position" e))
###       ("_position" s)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" Cs))
###         ("_position" e'))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" Cs))
###         ("_position" e))
###       ("_position" s)
###       ("\<^const>Expr.expr.FAss"
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###         ("_position" Cs) ("_position" e'))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss"
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###         ("_position" Cs) ("_position" e))
###       ("_position" s)
###       ("\<^const>Expr.expr.FAss"
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###         ("_position" Cs) ("_position" e'))
###       ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 186 of "$AFP/CoreC++/SmallStep.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.expr.LAss" ("_position" V)
###                 ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_position" None)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.expr.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_position" None)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.expr.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.expr.LAss" ("_position" V)
###                 ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_position" None)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_position" None)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 152 of "$AFP/CoreC++/SmallStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" D) ("_tuple_arg" ("_position" S))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SubObj.LeastFieldDecl" ("_position" P)
###           ("_applC" ("_position" last) ("_position" Cs')) ("_position" F)
###           ("_position" T) ("_position" Cs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###             ("_position" v) ("_position" v')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" Ds)
###               ("\<^const>SubObj.appendPath" ("_position" Cs')
###                 ("_position" Cs))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" Ds) ("_tuple_arg" ("_position" fs)))
###                 ("_position" S))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc"
###           ("_applC" ("_position" ref)
###             ("_tuple" ("_position" a) ("_tuple_arg" ("_position" Cs'))))
###           ("_position" F) ("_position" Cs))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("_applC" ("_position" Val) ("_position" v'))
###       ("_tuple"
###         ("_MapUpd" ("_position" h)
###           ("_maplet" ("_position" a)
###             ("_tuple" ("_position" D)
###               ("_tuple_arg"
###                 ("_applC" ("_position" insert)
###                   ("_cargs"
###                     ("_tuple" ("_position" Ds)
###                       ("_tuple_arg"
###                         ("_MapUpd" ("_position" fs)
###                           ("_maplet" ("_position" F) ("_position" v')))))
###                     ("\<^const>Groups.minus_class.minus" ("_position" S)
###                       ("_Finset"
###                         ("_tuple" ("_position" Ds)
###                           ("_tuple_arg" ("_position" fs)))))))))))
###         ("_tuple_arg" ("_position" l))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" D) ("_tuple_arg" ("_position" S))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SubObj.LeastFieldDecl" ("_position" P)
###           ("_applC" ("_position" last) ("_position" Cs')) ("_position" F)
###           ("_position" T) ("_position" Cs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###             ("_position" v) ("_position" v')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" Ds)
###               ("\<^const>SubObj.appendPath" ("_position" Cs')
###                 ("_position" Cs))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" Ds) ("_tuple_arg" ("_position" fs)))
###                 ("_position" S))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss"
###         ("_applC" ("_position" ref)
###           ("_tuple" ("_position" a) ("_tuple_arg" ("_position" Cs'))))
###         ("_position" F) ("_position" Cs)
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("_applC" ("_position" Val) ("_position" v'))
###       ("_tuple"
###         ("_MapUpd" ("_position" h)
###           ("_maplet" ("_position" a)
###             ("_tuple" ("_position" D)
###               ("_tuple_arg"
###                 ("_applC" ("_position" insert)
###                   ("_cargs"
###                     ("_tuple" ("_position" Ds)
###                       ("_tuple_arg"
###                         ("_MapUpd" ("_position" fs)
###                           ("_maplet" ("_position" F) ("_position" v')))))
###                     ("\<^const>Groups.minus_class.minus" ("_position" S)
###                       ("_Finset"
###                         ("_tuple" ("_position" Ds)
###                           ("_tuple_arg" ("_position" fs)))))))))))
###         ("_tuple_arg" ("_position" l))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 157 of "$AFP/CoreC++/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.LAss"
###       ("\<^const>Expr.expr.FAcc" ("_position" null) ("_position" F)
###         ("_position" Cs))
###       ("_applC" ("_position" Val) ("_position" v)))
###     ("_position" s) ("_applC" ("_position" THROW) ("_position" NullPointer))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.FAss" ("_position" null) ("_position" F)
###       ("_position" Cs) ("_applC" ("_position" Val) ("_position" v)))
###     ("_position" s) ("_applC" ("_position" THROW) ("_position" NullPointer))
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 190 of "$AFP/CoreC++/SmallStep.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.expr.LAss" ("_position" V)
###                 ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.expr.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.expr.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.expr.LAss" ("_position" V)
###                 ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.expr.Block" ("_position" V)
###         ("\<^const>Expr.expr.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.expr.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.expr.Block" ("_position" V)
###         ("\<^const>Expr.expr.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.expr.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.expr.LAss" ("_position" V)
###                 ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.expr.LAss" ("_position" V)
###                 ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.expr.Block" ("_position" V)
###         ("\<^const>Expr.expr.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.expr.Block" ("_position" V)
###         ("\<^const>Expr.expr.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 248 of "$AFP/CoreC++/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.LAss"
###       ("\<^const>Expr.expr.FAcc"
###         ("_applC" ("_position" Throw) ("_position" r)) ("_position" F)
###         ("_position" Cs))
###       ("_position" e\<^sub>2))
###     ("_position" s) ("_applC" ("_position" Throw) ("_position" r))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.FAss"
###       ("_applC" ("_position" Throw) ("_position" r)) ("_position" F)
###       ("_position" Cs) ("_position" e\<^sub>2))
###     ("_position" s) ("_applC" ("_position" Throw) ("_position" r))
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 249 of "$AFP/CoreC++/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.LAss"
###       ("\<^const>Expr.expr.FAcc"
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###         ("_position" Cs))
###       ("_applC" ("_position" Throw) ("_position" r)))
###     ("_position" s) ("_applC" ("_position" Throw) ("_position" r))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.FAss" ("_applC" ("_position" Val) ("_position" v))
###       ("_position" F) ("_position" Cs)
###       ("_applC" ("_position" Throw) ("_position" r)))
###     ("_position" s) ("_applC" ("_position" Throw) ("_position" r))
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 254 of "$AFP/CoreC++/SmallStep.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###       ("_position" v) ("_position" v')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v))
###         ("_applC" ("_position" Throw) ("_position" r)))
###       ("_position" s) ("_applC" ("_position" Throw) ("_position" r))
###       ("_position" s))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###       ("_position" v) ("_position" v')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V)
###         ("\<^const>Expr.expr.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_applC" ("_position" Throw) ("_position" r)))
###       ("_position" s) ("_applC" ("_position" Throw) ("_position" r))
###       ("_position" s))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 195 of "$AFP/CoreC++/SmallStep.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v')))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v''))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###             ("_position" v) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v'')) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.expr.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v')))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v''))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###             ("_position" v) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V)
###         ("\<^const>Expr.expr.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v'')) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.expr.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v')))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v''))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###             ("_position" v) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.expr.Block" ("_position" V)
###         ("\<^const>Expr.expr.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v'')))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.expr.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v')))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v''))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###             ("_position" v) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V)
###         ("\<^const>Expr.expr.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.expr.Block" ("_position" V)
###         ("\<^const>Expr.expr.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v'')))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.expr.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v')))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v''))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###             ("_position" v) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v'')) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v')))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v''))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###             ("_position" v) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V)
###         ("\<^const>Expr.expr.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v'')) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v')))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v''))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###             ("_position" v) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.expr.Block" ("_position" V)
###         ("\<^const>Expr.expr.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v'')))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v')))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v''))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###             ("_position" v) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V)
###         ("\<^const>Expr.expr.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.expr.Block" ("_position" V)
###         ("\<^const>Expr.expr.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v'')))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 203 of "$AFP/CoreC++/SmallStep.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###       ("_position" v) ("_position" v')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v))
###         ("_applC" ("_position" Val) ("_position" u)))
###       ("_position" s) ("_applC" ("_position" Val) ("_position" u))
###       ("_position" s))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###       ("_position" v) ("_position" v')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V)
###         ("\<^const>Expr.expr.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_applC" ("_position" Val) ("_position" u)))
###       ("_position" s) ("_applC" ("_position" Val) ("_position" u))
###       ("_position" s))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### ?P,?E \<turnstile> [] [::] []
### Ignoring duplicate safe introduction (intro!)
### ?P,?E \<turnstile> [] [::] []
Proofs for inductive predicate(s) "eval", "evals"
### Ambiguous input (line 122 of "$AFP/CoreC++/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts)))
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E) ("_position" e)
###       ("\<^const>HOL.conj" ("_position" T)
###         ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###           ("_position" es) ("_position" Ts))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts)))
###     ("\<^const>HOL.conj"
###       ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###         ("_position" e) ("_position" T))
###       ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###         ("_position" es) ("_position" Ts)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 129 of "$AFP/CoreC++/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" Ts))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" U) ("_position" Us))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts)
###           ("\<^const>List.list.Cons" ("_position" U) ("_position" Us)))
###         ("\<^const>HOL.conj"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e) ("_position" U))
###           ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###             ("_position" es) ("_position" Us)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" Ts))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" U) ("_position" Us))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts)
###           ("\<^const>List.list.Cons" ("_position" U) ("_position" Us)))
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e)
###           ("\<^const>HOL.conj" ("_position" U)
###             ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###               ("_position" es) ("_position" Us))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 137 of "$AFP/CoreC++/WellType.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" Ts)
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###         ("\<^const>List.append" ("_position" es\<^sub>1)
###           ("_position" es\<^sub>2))
###         ("_position" Ts))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Ts\<^sub>1) ("_position" Ts\<^sub>2))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" Ts)
###             ("\<^const>List.append" ("_position" Ts\<^sub>1)
###               ("_position" Ts\<^sub>2)))
###           ("\<^const>HOL.conj"
###             ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###               ("_position" es\<^sub>1) ("_position" Ts\<^sub>1))
###             ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###               ("_position" es\<^sub>2) ("_position" Ts\<^sub>2))))))))
### ("\<^const>Pure.all_binder" ("_position" Ts)
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###         ("\<^const>List.append" ("_position" es\<^sub>1)
###           ("_position" es\<^sub>2))
###         ("_position" Ts))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Ts\<^sub>1) ("_position" Ts\<^sub>2))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" Ts)
###             ("\<^const>List.append" ("_position" Ts\<^sub>1)
###               ("_position" Ts\<^sub>2)))
###           ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###             ("_position" es\<^sub>1)
###             ("\<^const>HOL.conj" ("_position" Ts\<^sub>1)
###               ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###                 ("_position" es\<^sub>2) ("_position" Ts\<^sub>2)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 154 of "$AFP/CoreC++/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("_applC" ("_position" Val) ("_position" v)) ("_position" T))
###     ("\<^const>HOL.eq" ("_applC" ("_position" typeof) ("_position" v))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("_applC" ("_position" Val) ("_position" v))
###     ("\<^const>HOL.eq" ("_position" T)
###       ("\<^const>HOL.eq" ("_applC" ("_position" typeof) ("_position" v))
###         ("_applC" ("_position" Some) ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### typeof ?v = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Val ?v :: ?T
### Ignoring duplicate safe introduction (intro!)
### typeof ?v = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Val ?v :: ?T
### Ambiguous input (line 161 of "$AFP/CoreC++/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("_applC" ("_position" Var) ("_position" V)) ("_position" T))
###     ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("_applC" ("_position" Var) ("_position" V))
###     ("\<^const>HOL.eq" ("_position" T)
###       ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###         ("_applC" ("_position" Some) ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### ?E ?V = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Var ?V :: ?T
### Ignoring duplicate safe introduction (intro!)
### ?E ?V = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Var ?V :: ?T
### Ambiguous input (line 168 of "$AFP/CoreC++/WellType.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Seq" ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))
###     ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###       ("\<^const>HOL.conj"
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>1) ("_position" T\<^sub>1))
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" T\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.Seq" ("_position" e\<^sub>1)
###       ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" T\<^sub>2)
###       ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###         ("\<^const>HOL.conj"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>1) ("_position" T\<^sub>1))
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Seq" ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))
###     ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###       ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1)
###         ("\<^const>HOL.conj" ("_position" T\<^sub>1)
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.Seq" ("_position" e\<^sub>1)
###       ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" T\<^sub>2)
###       ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>1)
###           ("\<^const>HOL.conj" ("_position" T\<^sub>1)
###             ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###               ("_position" e\<^sub>2) ("_position" T\<^sub>2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
  Proving monotonicity ...
### Ambiguous input (line 190 of "$AFP/CoreC++/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.LAss"
###       ("\<^const>Expr.expr.FAcc" ("_position" e) ("_position" F)
###         ("_position" Cs))
###       ("_position" v))
###     ("_position" T)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.FAss" ("_position" e) ("_position" F)
###       ("_position" Cs) ("_position" v))
###     ("_position" T)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.WellType"
### 0.738s elapsed time, 2.389s cpu time, 0.192s GC time
Loading theory "Draft.WellForm" (required by "Draft.EquivalenceTemplates" via "Draft.Equivalence" via "Draft.WWellForm")
Proofs for inductive predicate(s) "redp", "redsp"
  Proving monotonicity ...
### Ambiguous input (line 553 of "$AFP/CoreC++/WellForm.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" Cs)
###     ("\<^const>SubObj.leq_path" ("_position" P) ("_position" C)
###       ("_list" ("_position" C))
###       ("\<^const>List.append" ("_position" Cs) ("_list" ("_position" D))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" Cs)
###     ("\<^const>List.append"
###       ("\<^const>SubObj.leq_path" ("_position" P) ("_position" C)
###         ("_list" ("_position" C)) ("_position" Cs))
###       ("_list" ("_position" D)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 923 of "$AFP/CoreC++/WellForm.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SubObj.appendPath"
###     ("\<^const>SubObj.leq_path" ("_position" P) ("_position" C)
###       ("_position" Cs) ("_position" Cs'))
###     ("_position" Cs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SubObj.leq_path" ("_position" P) ("_position" C)
###     ("_position" Cs)
###     ("\<^const>SubObj.appendPath" ("_position" Cs') ("_position" Cs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1647 of "$AFP/CoreC++/WellForm.thy") produces 9 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" Ts)
###       ("_idts" ("_position" T)
###         ("_idts" ("_position" m)
###           ("_idts" ("_position" Cs) ("_position" Cs')))))
###     ("\<^const>HOL.conj"
###       ("\<^const>SubObj.path_via" ("_position" P) ("_position" D)
###         ("_position" C) ("_position" Cs'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>SubObj.leq_path" ("_position" P) ("_position" D)
###             ("_position" Ds)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj"
###                 ("\<^const>SubObj.appendPath" ("_position" Cs')
###                   ("_position" Cs))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.not_equal" ("_position" Cs)
###                     ("\<^const>List.list.Nil"))
###                   ("\<^const>SubObj.HasMethodDef" ("_position" P)
###                     ("_position" C) ("_position" M)
###                     ("_tuple" ("_position" Ts)
###                       ("_tuple_args" ("_position" T)
###                         ("_tuple_arg" ("_position" m))))
###                     ("_position" Cs))))
###               ("_position" Ts)))
###           ("_position" Ts'))
###         ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###           ("_position" T))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" Ts)
###       ("_idts" ("_position" T)
###         ("_idts" ("_position" m)
###           ("_idts" ("_position" Cs) ("_position" Cs')))))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>SubObj.path_via" ("_position" P) ("_position" D)
###           ("_position" C) ("_position" Cs'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.not_equal"
###             ("\<^const>SubObj.leq_path" ("_position" P) ("_position" D)
###               ("_position" Ds)
###               ("\<^const>HOL.conj"
###                 ("\<^const>SubObj.appendPath" ("_position" Cs')
###                   ("_position" Cs))
###                 ("_position" Cs)))
###             ("\<^const>List.list.Nil"))
###           ("\<^const>SubObj.HasMethodDef" ("_position" P) ("_position" C)
###             ("_position" M)
###             ("_tuple" ("_position" Ts)
###               ("_tuple_args" ("_position" T)
###                 ("_tuple_arg" ("_position" m))))
###             ("_position" Cs))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts) ("_position" Ts'))
###         ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###           ("_position" T))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" Ts)
###       ("_idts" ("_position" T)
###         ("_idts" ("_position" m)
###           ("_idts" ("_position" Cs) ("_position" Cs')))))
###     ("\<^const>HOL.conj"
###       ("\<^const>SubObj.path_via" ("_position" P) ("_position" D)
###         ("_position" C) ("_position" Cs'))
###       ("\<^const>SubObj.leq_path" ("_position" P) ("_position" D)
###         ("_position" Ds)
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj"
###             ("\<^const>SubObj.appendPath" ("_position" Cs')
###               ("_position" Cs))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.not_equal" ("_position" Cs)
###                 ("\<^const>List.list.Nil"))
###               ("\<^const>SubObj.HasMethodDef" ("_position" P)
###                 ("_position" C) ("_position" M)
###                 ("_tuple" ("_position" Ts)
###                   ("_tuple_args" ("_position" T)
###                     ("_tuple_arg" ("_position" m))))
###                 ("_position" Cs))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" Ts) ("_position" Ts'))
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" Ts)
###       ("_idts" ("_position" T)
###         ("_idts" ("_position" m)
###           ("_idts" ("_position" Cs) ("_position" Cs')))))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>SubObj.path_via" ("_position" P) ("_position" D)
###           ("_position" C) ("_position" Cs'))
###         ("\<^const>SubObj.leq_path" ("_position" P) ("_position" D)
###           ("_position" Ds)
###           ("\<^const>HOL.conj"
###             ("\<^const>SubObj.appendPath" ("_position" Cs')
###               ("_position" Cs))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.not_equal" ("_position" Cs)
###                 ("\<^const>List.list.Nil"))
###               ("\<^const>SubObj.HasMethodDef" ("_position" P)
###                 ("_position" C) ("_position" M)
###                 ("_tuple" ("_position" Ts)
###                   ("_tuple_args" ("_position" T)
###                     ("_tuple_arg" ("_position" m))))
###                 ("_position" Cs))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts) ("_position" Ts'))
###         ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###           ("_position" T))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" Ts)
###       ("_idts" ("_position" T)
###         ("_idts" ("_position" m)
###           ("_idts" ("_position" Cs) ("_position" Cs')))))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>SubObj.path_via" ("_position" P) ("_position" D)
###           ("_position" C) ("_position" Cs'))
###         ("\<^const>HOL.conj"
###           ("\<^const>SubObj.leq_path" ("_position" P) ("_position" D)
###             ("_position" Ds)
###             ("\<^const>SubObj.appendPath" ("_position" Cs')
###               ("_position" Cs)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" Cs)
###               ("\<^const>List.list.Nil"))
###             ("\<^const>SubObj.HasMethodDef" ("_position" P) ("_position" C)
###               ("_position" M)
###               ("_tuple" ("_position" Ts)
###                 ("_tuple_args" ("_position" T)
###                   ("_tuple_arg" ("_position" m))))
###               ("_position" Cs)))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts) ("_position" Ts'))
###         ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###           ("_position" T))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" Ts)
###       ("_idts" ("_position" T)
###         ("_idts" ("_position" m)
###           ("_idts" ("_position" Cs) ("_position" Cs')))))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>SubObj.path_via" ("_position" P) ("_position" D)
###           ("_position" C) ("_position" Cs'))
###         ("\<^const>HOL.conj"
###           ("\<^const>SubObj.appendPath"
###             ("\<^const>SubObj.leq_path" ("_position" P) ("_position" D)
###               ("_position" Ds) ("_position" Cs'))
###             ("_position" Cs))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" Cs)
###               ("\<^const>List.list.Nil"))
###             ("\<^const>SubObj.HasMethodDef" ("_position" P) ("_position" C)
###               ("_position" M)
###               ("_tuple" ("_position" Ts)
###                 ("_tuple_args" ("_position" T)
###                   ("_tuple_arg" ("_position" m))))
###               ("_position" Cs)))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts) ("_position" Ts'))
###         ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###           ("_position" T))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" Ts)
###       ("_idts" ("_position" T)
###         ("_idts" ("_position" m)
###           ("_idts" ("_position" Cs) ("_position" Cs')))))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>SubObj.path_via" ("_position" P) ("_position" D)
###           ("_position" C) ("_position" Cs'))
###         ("\<^const>HOL.conj"
###           ("\<^const>SubObj.leq_path" ("_position" P) ("_position" D)
###             ("_position" Ds)
###             ("\<^const>HOL.conj"
###               ("\<^const>SubObj.appendPath" ("_position" Cs')
###                 ("_position" Cs))
###               ("\<^const>HOL.not_equal" ("_position" Cs)
###                 ("\<^const>List.list.Nil"))))
###           ("\<^const>SubObj.HasMethodDef" ("_position" P) ("_position" C)
###             ("_position" M)
###             ("_tuple" ("_position" Ts)
###               ("_tuple_args" ("_position" T)
###                 ("_tuple_arg" ("_position" m))))
###             ("_position" Cs))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts) ("_position" Ts'))
###         ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###           ("_position" T))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" Ts)
###       ("_idts" ("_position" T)
###         ("_idts" ("_position" m)
###           ("_idts" ("_position" Cs) ("_position" Cs')))))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>SubObj.path_via" ("_position" P) ("_position" D)
###           ("_position" C) ("_position" Cs'))
###         ("\<^const>SubObj.HasMethodDef"
###           ("\<^const>SubObj.leq_path" ("_position" P) ("_position" D)
###             ("_position" Ds)
###             ("\<^const>HOL.conj"
###               ("\<^const>SubObj.appendPath" ("_position" Cs')
###                 ("_position" Cs))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.not_equal" ("_position" Cs)
###                   ("\<^const>List.list.Nil"))
###                 ("_position" P))))
###           ("_position" C) ("_position" M)
###           ("_tuple" ("_position" Ts)
###             ("_tuple_args" ("_position" T) ("_tuple_arg" ("_position" m))))
###           ("_position" Cs)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts) ("_position" Ts'))
###         ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###           ("_position" T))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" Ts)
###       ("_idts" ("_position" T)
###         ("_idts" ("_position" m)
###           ("_idts" ("_position" Cs) ("_position" Cs')))))
###     ("\<^const>HOL.conj"
###       ("\<^const>SubObj.path_via" ("_position" P) ("_position" D)
###         ("_position" C) ("_position" Cs'))
###       ("\<^const>HOL.conj"
###         ("\<^const>SubObj.leq_path" ("_position" P) ("_position" D)
###           ("_position" Ds)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.conj"
###               ("\<^const>SubObj.appendPath" ("_position" Cs')
###                 ("_position" Cs))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.not_equal" ("_position" Cs)
###                   ("\<^const>List.list.Nil"))
###                 ("\<^const>SubObj.HasMethodDef" ("_position" P)
###                   ("_position" C) ("_position" M)
###                   ("_tuple" ("_position" Ts)
###                     ("_tuple_args" ("_position" T)
###                       ("_tuple_arg" ("_position" m))))
###                   ("_position" Cs))))
###             ("\<^const>HOL.eq" ("_position" Ts) ("_position" Ts'))))
###         ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###           ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.WellForm"
### 0.930s elapsed time, 2.871s cpu time, 0.879s GC time
Loading theory "Draft.WWellForm" (required by "Draft.EquivalenceTemplates" via "Draft.Equivalence")
### theory "Draft.WWellForm"
### 0.064s elapsed time, 0.194s cpu time, 0.062s GC time
### Ambiguous input (line 247 of "$AFP/CoreC++/BigStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BigStep.eval" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.LAss"
###       ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs))
###       ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BigStep.eval" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###       ("_position" Cs) ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.BigStep"
### 3.198s elapsed time, 9.135s cpu time, 1.302s GC time
### Ignoring duplicate safe introduction (intro!)
### EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==>
### ?x # ?xs = map ?f ?ys
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe introduction (intro!)
### EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==>
### ?x # ?xs = map ?f ?ys
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate rewrite rule:
### ?x1 # ?xs1 = map ?f1 ?ys1 ==
### EX z zs. ?ys1 = z # zs & ?x1 = ?f1 z & ?xs1 = map ?f1 zs
### theory "Draft.SmallStep"
### 4.221s elapsed time, 10.227s cpu time, 1.411s GC time
Loading theory "Draft.Equivalence" (required by "Draft.EquivalenceTemplates")
### Ambiguous input (line 526 of "$AFP/CoreC++/Equivalence.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("_position" e) ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e') ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("_position" e) ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss" ("_position" e) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e') ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("_position" e) ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s)
###       ("\<^const>Expr.expr.FAss" ("_position" e') ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("_position" e) ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss" ("_position" e) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s)
###       ("\<^const>Expr.expr.FAss" ("_position" e') ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 536 of "$AFP/CoreC++/Equivalence.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("_position" e) ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" Cs))
###         ("_position" e))
###       ("_position" s)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" Cs))
###         ("_position" e'))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("_position" e) ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss"
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###         ("_position" Cs) ("_position" e))
###       ("_position" s)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" Cs))
###         ("_position" e'))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("_position" e) ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" Cs))
###         ("_position" e))
###       ("_position" s)
###       ("\<^const>Expr.expr.FAss"
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###         ("_position" Cs) ("_position" e'))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("_position" e) ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss"
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###         ("_position" Cs) ("_position" e))
###       ("_position" s)
###       ("\<^const>Expr.expr.FAss"
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###         ("_position" Cs) ("_position" e'))
###       ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 546 of "$AFP/CoreC++/Equivalence.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###         ("_applC" ("_position" ref)
###           ("_tuple" ("_position" a) ("_tuple_arg" ("_position" Cs'))))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_arg" ("_position" l\<^sub>2)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" D) ("_tuple_arg" ("_position" S))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>SubObj.LeastFieldDecl" ("_position" P)
###               ("_applC" ("_position" last) ("_position" Cs'))
###               ("_position" F) ("_position" T) ("_position" Cs)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###                 ("_position" v) ("_position" v')))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" Ds)
###                   ("\<^const>SubObj.appendPath" ("_position" Cs')
###                     ("_position" Cs))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" Ds)
###                       ("_tuple_arg" ("_position" fs)))
###                     ("_position" S))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v'))
###       ("_tuple"
###         ("_MapUpd" ("_position" h\<^sub>2)
###           ("_maplet" ("_position" a)
###             ("_tuple" ("_position" D)
###               ("_tuple_arg"
###                 ("_applC" ("_position" insert)
###                   ("_cargs"
###                     ("_tuple" ("_position" Ds)
###                       ("_tuple_arg"
###                         ("_MapUpd" ("_position" fs)
###                           ("_maplet" ("_position" F) ("_position" v')))))
###                     ("\<^const>Groups.minus_class.minus" ("_position" S)
###                       ("_Finset"
###                         ("_tuple" ("_position" Ds)
###                           ("_tuple_arg" ("_position" fs)))))))))))
###         ("_tuple_arg" ("_position" l\<^sub>2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###         ("_applC" ("_position" ref)
###           ("_tuple" ("_position" a) ("_tuple_arg" ("_position" Cs'))))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_arg" ("_position" l\<^sub>2)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" D) ("_tuple_arg" ("_position" S))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>SubObj.LeastFieldDecl" ("_position" P)
###               ("_applC" ("_position" last) ("_position" Cs'))
###               ("_position" F) ("_position" T) ("_position" Cs)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###                 ("_position" v) ("_position" v')))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" Ds)
###                   ("\<^const>SubObj.appendPath" ("_position" Cs')
###                     ("_position" Cs))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" Ds)
###                       ("_tuple_arg" ("_position" fs)))
###                     ("_position" S))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v'))
###       ("_tuple"
###         ("_MapUpd" ("_position" h\<^sub>2)
###           ("_maplet" ("_position" a)
###             ("_tuple" ("_position" D)
###               ("_tuple_arg"
###                 ("_applC" ("_position" insert)
###                   ("_cargs"
###                     ("_tuple" ("_position" Ds)
###                       ("_tuple_arg"
###                         ("_MapUpd" ("_position" fs)
###                           ("_maplet" ("_position" F) ("_position" v')))))
###                     ("\<^const>Groups.minus_class.minus" ("_position" S)
###                       ("_Finset"
###                         ("_tuple" ("_position" Ds)
###                           ("_tuple_arg" ("_position" fs)))))))))))
###         ("_tuple_arg" ("_position" l\<^sub>2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 561 of "$AFP/CoreC++/Equivalence.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1) ("_position" s\<^sub>0) ("_position" null)
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1) ("_position" s\<^sub>0) ("_position" null)
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 573 of "$AFP/CoreC++/Equivalence.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("_position" e) ("_position" s)
###       ("_applC" ("_position" Throw) ("_position" r)) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s) ("_applC" ("_position" Throw) ("_position" r))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("_position" e) ("_position" s)
###       ("_applC" ("_position" Throw) ("_position" r)) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss" ("_position" e) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s) ("_applC" ("_position" Throw) ("_position" r))
###       ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 582 of "$AFP/CoreC++/Equivalence.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###         ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###           ("_applC" ("_position" Throw) ("_position" r))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_applC" ("_position" Throw) ("_position" r))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1) ("_position" s\<^sub>0)
###         ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" s\<^sub>1)
###           ("_applC" ("_position" Throw) ("_position" r))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_applC" ("_position" Throw) ("_position" r))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 764 of "$AFP/CoreC++/Equivalence.thy") produces 8 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("_MapUpd" ("_position" E)
###         ("_maplet" ("_position" V) ("_position" T)))
###       ("_position" e) ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" h)
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" h')
###             ("_idts" ("_position" l')
###               ("_idts" ("_position" v) ("_position" v'))))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_tuple" ("_position" h)
###             ("_tuple_arg"
###               ("_MapUpd" ("_position" l)
###                 ("_maplet" ("_position" V) ("_position" v'))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###             ("_position" v) ("_position" v'))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq" ("_position" s')
###               ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l'))))
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" v'') ("_position" w))
###               ("\<^const>HOL.conj"
###                 ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###                   ("\<^const>Expr.expr.Block" ("_position" V)
###                     ("\<^const>Expr.expr.LAss" ("_position" T)
###                       ("_applC" ("_position" Val) ("_position" v)))
###                     ("_position" e))
###                   ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###                   ("\<^const>Expr.expr.Block" ("_position" V)
###                     ("\<^const>Expr.expr.LAss" ("_position" T)
###                       ("_applC" ("_position" Val) ("_position" v'')))
###                     ("_position" e'))
###                   ("_tuple" ("_position" h')
###                     ("_tuple_arg"
###                       ("_applC" ("_position" l')
###                         ("\<^const>Expr.expr.LAss" ("_position" V)
###                           ("_applC" ("_position" l) ("_position" V)))))))
###                 ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###                   ("_position" v'') ("_position" w))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("_MapUpd" ("_position" E)
###         ("_maplet" ("_position" V) ("_position" T)))
###       ("_position" e) ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" h)
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" h')
###             ("_idts" ("_position" l')
###               ("_idts" ("_position" v) ("_position" v'))))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_tuple" ("_position" h)
###             ("_tuple_arg"
###               ("_MapUpd" ("_position" l)
###                 ("_maplet" ("_position" V) ("_position" v'))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###             ("_position" v) ("_position" v'))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq" ("_position" s')
###               ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l'))))
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" v'') ("_position" w))
###               ("\<^const>HOL.conj"
###                 ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###                   ("\<^const>Syntax.InitBlock" ("_position" V)
###                     ("_position" T)
###                     ("_applC" ("_position" Val) ("_position" v))
###                     ("_position" e))
###                   ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###                   ("\<^const>Expr.expr.Block" ("_position" V)
###                     ("\<^const>Expr.expr.LAss" ("_position" T)
###                       ("_applC" ("_position" Val) ("_position" v'')))
###                     ("_position" e'))
###                   ("_tuple" ("_position" h')
###                     ("_tuple_arg"
###                       ("_applC" ("_position" l')
###                         ("\<^const>Expr.expr.LAss" ("_position" V)
###                           ("_applC" ("_position" l) ("_position" V)))))))
###                 ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###                   ("_position" v'') ("_position" w))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("_MapUpd" ("_position" E)
###         ("_maplet" ("_position" V) ("_position" T)))
###       ("_position" e) ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" h)
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" h')
###             ("_idts" ("_position" l')
###               ("_idts" ("_position" v) ("_position" v'))))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_tuple" ("_position" h)
###             ("_tuple_arg"
###               ("_MapUpd" ("_position" l)
###                 ("_maplet" ("_position" V) ("_position" v'))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###             ("_position" v) ("_position" v'))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq" ("_position" s')
###               ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l'))))
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" v'') ("_position" w))
###               ("\<^const>HOL.conj"
###                 ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###                   ("\<^const>Expr.expr.Block" ("_position" V)
###                     ("\<^const>Expr.expr.LAss" ("_position" T)
###                       ("_applC" ("_position" Val) ("_position" v)))
###                     ("_position" e))
###                   ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###                   ("\<^const>Syntax.InitBlock" ("_position" V)
###                     ("_position" T)
###                     ("_applC" ("_position" Val) ("_position" v''))
###                     ("_position" e'))
###                   ("_tuple" ("_position" h')
###                     ("_tuple_arg"
###                       ("_applC" ("_position" l')
###                         ("\<^const>Expr.expr.LAss" ("_position" V)
###                           ("_applC" ("_position" l) ("_position" V)))))))
###                 ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###                   ("_position" v'') ("_position" w))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("_MapUpd" ("_position" E)
###         ("_maplet" ("_position" V) ("_position" T)))
###       ("_position" e) ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" h)
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" h')
###             ("_idts" ("_position" l')
###               ("_idts" ("_position" v) ("_position" v'))))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_tuple" ("_position" h)
###             ("_tuple_arg"
###               ("_MapUpd" ("_position" l)
###                 ("_maplet" ("_position" V) ("_position" v'))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###             ("_position" v) ("_position" v'))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq" ("_position" s')
###               ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l'))))
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" v'') ("_position" w))
###               ("\<^const>HOL.conj"
###                 ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###                   ("\<^const>Syntax.InitBlock" ("_position" V)
###                     ("_position" T)
###                     ("_applC" ("_position" Val) ("_position" v))
###                     ("_position" e))
###                   ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###                   ("\<^const>Syntax.InitBlock" ("_position" V)
###                     ("_position" T)
###                     ("_applC" ("_position" Val) ("_position" v''))
###                     ("_position" e'))
###                   ("_tuple" ("_position" h')
###                     ("_tuple_arg"
###                       ("_applC" ("_position" l')
###                         ("\<^const>Expr.expr.LAss" ("_position" V)
###                           ("_applC" ("_position" l) ("_position" V)))))))
###                 ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###                   ("_position" v'') ("_position" w))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("_MapUpd" ("_position" E)
###         ("_maplet" ("_position" V) ("_position" T)))
###       ("_position" e) ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" h)
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" h')
###             ("_idts" ("_position" l')
###               ("_idts" ("_position" v) ("_position" v'))))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_tuple" ("_position" h)
###             ("_tuple_arg"
###               ("_MapUpd" ("_position" l)
###                 ("_maplet" ("_position" V) ("_position" v'))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###             ("_position" v) ("_position" v'))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq" ("_position" s')
###               ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l'))))
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" v'') ("_position" w))
###               ("\<^const>HOL.conj"
###                 ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###                   ("\<^const>Expr.expr.Block" ("_position" V)
###                     ("\<^const>Expr.expr.LAss" ("_position" T)
###                       ("_applC" ("_position" Val) ("_position" v)))
###                     ("_position" e))
###                   ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###                   ("\<^const>Expr.expr.Block" ("_position" V)
###                     ("\<^const>Expr.expr.LAss" ("_position" T)
###                       ("_applC" ("_position" Val) ("_position" v'')))
###                     ("_position" e'))
###                   ("_tuple" ("_position" h')
###                     ("_tuple_arg"
###                       ("_Update" ("_position" l')
###                         ("_updbind" ("_position" V)
###                           ("_applC" ("_position" l) ("_position" V)))))))
###                 ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###                   ("_position" v'') ("_position" w))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("_MapUpd" ("_position" E)
###         ("_maplet" ("_position" V) ("_position" T)))
###       ("_position" e) ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" h)
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" h')
###             ("_idts" ("_position" l')
###               ("_idts" ("_position" v) ("_position" v'))))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_tuple" ("_position" h)
###             ("_tuple_arg"
###               ("_MapUpd" ("_position" l)
###                 ("_maplet" ("_position" V) ("_position" v'))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###             ("_position" v) ("_position" v'))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq" ("_position" s')
###               ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l'))))
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" v'') ("_position" w))
###               ("\<^const>HOL.conj"
###                 ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###                   ("\<^const>Syntax.InitBlock" ("_position" V)
###                     ("_position" T)
###                     ("_applC" ("_position" Val) ("_position" v))
###                     ("_position" e))
###                   ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###                   ("\<^const>Expr.expr.Block" ("_position" V)
###                     ("\<^const>Expr.expr.LAss" ("_position" T)
###                       ("_applC" ("_position" Val) ("_position" v'')))
###                     ("_position" e'))
###                   ("_tuple" ("_position" h')
###                     ("_tuple_arg"
###                       ("_Update" ("_position" l')
###                         ("_updbind" ("_position" V)
###                           ("_applC" ("_position" l) ("_position" V)))))))
###                 ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###                   ("_position" v'') ("_position" w))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("_MapUpd" ("_position" E)
###         ("_maplet" ("_position" V) ("_position" T)))
###       ("_position" e) ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" h)
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" h')
###             ("_idts" ("_position" l')
###               ("_idts" ("_position" v) ("_position" v'))))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_tuple" ("_position" h)
###             ("_tuple_arg"
###               ("_MapUpd" ("_position" l)
###                 ("_maplet" ("_position" V) ("_position" v'))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###             ("_position" v) ("_position" v'))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq" ("_position" s')
###               ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l'))))
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" v'') ("_position" w))
###               ("\<^const>HOL.conj"
###                 ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###                   ("\<^const>Expr.expr.Block" ("_position" V)
###                     ("\<^const>Expr.expr.LAss" ("_position" T)
###                       ("_applC" ("_position" Val) ("_position" v)))
###                     ("_position" e))
###                   ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###                   ("\<^const>Syntax.InitBlock" ("_position" V)
###                     ("_position" T)
###                     ("_applC" ("_position" Val) ("_position" v''))
###                     ("_position" e'))
###                   ("_tuple" ("_position" h')
###                     ("_tuple_arg"
###                       ("_Update" ("_position" l')
###                         ("_updbind" ("_position" V)
###                           ("_applC" ("_position" l) ("_position" V)))))))
###                 ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###                   ("_position" v'') ("_position" w))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("_MapUpd" ("_position" E)
###         ("_maplet" ("_position" V) ("_position" T)))
###       ("_position" e) ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" h)
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" h')
###             ("_idts" ("_position" l')
###               ("_idts" ("_position" v) ("_position" v'))))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_tuple" ("_position" h)
###             ("_tuple_arg"
###               ("_MapUpd" ("_position" l)
###                 ("_maplet" ("_position" V) ("_position" v'))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###             ("_position" v) ("_position" v'))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq" ("_position" s')
###               ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l'))))
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" v'') ("_position" w))
###               ("\<^const>HOL.conj"
###                 ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###                   ("\<^const>Syntax.InitBlock" ("_position" V)
###                     ("_position" T)
###                     ("_applC" ("_position" Val) ("_position" v))
###                     ("_position" e))
###                   ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###                   ("\<^const>Syntax.InitBlock" ("_position" V)
###                     ("_position" T)
###                     ("_applC" ("_position" Val) ("_position" v''))
###                     ("_position" e'))
###                   ("_tuple" ("_position" h')
###                     ("_tuple_arg"
###                       ("_Update" ("_position" l')
###                         ("_updbind" ("_position" V)
###                           ("_applC" ("_position" l) ("_position" V)))))))
###                 ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###                   ("_position" v'') ("_position" w))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 845 of "$AFP/CoreC++/Equivalence.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v')))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###           ("_position" v) ("_position" v')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" wf_prog)
###             ("_cargs" ("_position" wf_md) ("_position" P)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" v'') ("_position" w))
###       ("\<^const>HOL.conj"
###         ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###           ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###             ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###           ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###           ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###             ("_applC" ("_position" Val) ("_position" v'')) ("_position" e'))
###           ("_tuple" ("_position" h')
###             ("_tuple_arg"
###               ("_Update" ("_position" l')
###                 ("_updbind" ("_position" V)
###                   ("_applC" ("_position" l) ("_position" V)))))))
###         ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###           ("_position" v'') ("_position" w))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v')))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###           ("_position" v) ("_position" v')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" wf_prog)
###             ("_cargs" ("_position" wf_md) ("_position" P)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" v'') ("_position" w))
###       ("\<^const>HOL.conj"
###         ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###           ("\<^const>Expr.expr.Block" ("_position" V)
###             ("\<^const>Expr.expr.LAss" ("_position" T)
###               ("_applC" ("_position" Val) ("_position" v)))
###             ("_position" e))
###           ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###           ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###             ("_applC" ("_position" Val) ("_position" v'')) ("_position" e'))
###           ("_tuple" ("_position" h')
###             ("_tuple_arg"
###               ("_Update" ("_position" l')
###                 ("_updbind" ("_position" V)
###                   ("_applC" ("_position" l) ("_position" V)))))))
###         ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###           ("_position" v'') ("_position" w))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v')))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###           ("_position" v) ("_position" v')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" wf_prog)
###             ("_cargs" ("_position" wf_md) ("_position" P)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" v'') ("_position" w))
###       ("\<^const>HOL.conj"
###         ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###           ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###             ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###           ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###           ("\<^const>Expr.expr.Block" ("_position" V)
###             ("\<^const>Expr.expr.LAss" ("_position" T)
###               ("_applC" ("_position" Val) ("_position" v'')))
###             ("_position" e'))
###           ("_tuple" ("_position" h')
###             ("_tuple_arg"
###               ("_Update" ("_position" l')
###                 ("_updbind" ("_position" V)
###                   ("_applC" ("_position" l) ("_position" V)))))))
###         ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###           ("_position" v'') ("_position" w))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v')))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###           ("_position" v) ("_position" v')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" wf_prog)
###             ("_cargs" ("_position" wf_md) ("_position" P)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" v'') ("_position" w))
###       ("\<^const>HOL.conj"
###         ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###           ("\<^const>Expr.expr.Block" ("_position" V)
###             ("\<^const>Expr.expr.LAss" ("_position" T)
###               ("_applC" ("_position" Val) ("_position" v)))
###             ("_position" e))
###           ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###           ("\<^const>Expr.expr.Block" ("_position" V)
###             ("\<^const>Expr.expr.LAss" ("_position" T)
###               ("_applC" ("_position" Val) ("_position" v'')))
###             ("_position" e'))
###           ("_tuple" ("_position" h')
###             ("_tuple_arg"
###               ("_Update" ("_position" l')
###                 ("_updbind" ("_position" V)
###                   ("_applC" ("_position" l) ("_position" V)))))))
###         ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###           ("_position" v'') ("_position" w))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v')))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###           ("_position" v) ("_position" v')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" wf_prog)
###             ("_cargs" ("_position" wf_md) ("_position" P)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" v'') ("_position" w))
###       ("\<^const>HOL.conj"
###         ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###           ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###             ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###           ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###           ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###             ("_applC" ("_position" Val) ("_position" v'')) ("_position" e'))
###           ("_tuple" ("_position" h')
###             ("_tuple_arg"
###               ("_applC" ("_position" l')
###                 ("\<^const>Expr.expr.LAss" ("_position" V)
###                   ("_applC" ("_position" l) ("_position" V)))))))
###         ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###           ("_position" v'') ("_position" w))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v')))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###           ("_position" v) ("_position" v')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" wf_prog)
###             ("_cargs" ("_position" wf_md) ("_position" P)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" v'') ("_position" w))
###       ("\<^const>HOL.conj"
###         ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###           ("\<^const>Expr.expr.Block" ("_position" V)
###             ("\<^const>Expr.expr.LAss" ("_position" T)
###               ("_applC" ("_position" Val) ("_position" v)))
###             ("_position" e))
###           ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###           ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###             ("_applC" ("_position" Val) ("_position" v'')) ("_position" e'))
###           ("_tuple" ("_position" h')
###             ("_tuple_arg"
###               ("_applC" ("_position" l')
###                 ("\<^const>Expr.expr.LAss" ("_position" V)
###                   ("_applC" ("_position" l) ("_position" V)))))))
###         ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###           ("_position" v'') ("_position" w))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v')))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###           ("_position" v) ("_position" v')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" wf_prog)
###             ("_cargs" ("_position" wf_md) ("_position" P)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" v'') ("_position" w))
###       ("\<^const>HOL.conj"
###         ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###           ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###             ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###           ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###           ("\<^const>Expr.expr.Block" ("_position" V)
###             ("\<^const>Expr.expr.LAss" ("_position" T)
###               ("_applC" ("_position" Val) ("_position" v'')))
###             ("_position" e'))
###           ("_tuple" ("_position" h')
###             ("_tuple_arg"
###               ("_applC" ("_position" l')
###                 ("\<^const>Expr.expr.LAss" ("_position" V)
###                   ("_applC" ("_position" l) ("_position" V)))))))
###         ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###           ("_position" v'') ("_position" w))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v')))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###           ("_position" v) ("_position" v')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" wf_prog)
###             ("_cargs" ("_position" wf_md) ("_position" P)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" v'') ("_position" w))
###       ("\<^const>HOL.conj"
###         ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###           ("\<^const>Expr.expr.Block" ("_position" V)
###             ("\<^const>Expr.expr.LAss" ("_position" T)
###               ("_applC" ("_position" Val) ("_position" v)))
###             ("_position" e))
###           ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###           ("\<^const>Expr.expr.Block" ("_position" V)
###             ("\<^const>Expr.expr.LAss" ("_position" T)
###               ("_applC" ("_position" Val) ("_position" v'')))
###             ("_position" e'))
###           ("_tuple" ("_position" h')
###             ("_tuple_arg"
###               ("_applC" ("_position" l')
###                 ("\<^const>Expr.expr.LAss" ("_position" V)
###                   ("_applC" ("_position" l) ("_position" V)))))))
###         ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###           ("_position" v'') ("_position" w))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 856 of "$AFP/CoreC++/Equivalence.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###     ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###       ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###     ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###     ("_position" e')
###     ("_tuple" ("_position" h')
###       ("_tuple_arg"
###         ("_applC" ("_position" l')
###           ("\<^const>Expr.expr.LAss" ("_position" V)
###             ("_applC" ("_position" l) ("_position" V))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.Block" ("_position" V)
###       ("\<^const>Expr.expr.LAss" ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_position" e))
###     ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###     ("_position" e')
###     ("_tuple" ("_position" h')
###       ("_tuple_arg"
###         ("_applC" ("_position" l')
###           ("\<^const>Expr.expr.LAss" ("_position" V)
###             ("_applC" ("_position" l) ("_position" V))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###     ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###       ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###     ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###     ("_position" e')
###     ("_tuple" ("_position" h')
###       ("_tuple_arg"
###         ("_Update" ("_position" l')
###           ("_updbind" ("_position" V)
###             ("_applC" ("_position" l) ("_position" V))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.Block" ("_position" V)
###       ("\<^const>Expr.expr.LAss" ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_position" e))
###     ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###     ("_position" e')
###     ("_tuple" ("_position" h')
###       ("_tuple_arg"
###         ("_Update" ("_position" l')
###           ("_updbind" ("_position" V)
###             ("_applC" ("_position" l) ("_position" V))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 878 of "$AFP/CoreC++/Equivalence.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" h\<^sub>0) ("_position" l\<^sub>0))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" s\<^sub>0)
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg"
###             ("_applC" ("_position" l\<^sub>0)
###               ("\<^const>Expr.expr.LAss" ("_position" V)
###                 ("_position" None)))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###         ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###           ("_position" e\<^sub>0))
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg" ("_position" l\<^sub>0)))
###         ("_position" e\<^sub>2)
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_arg"
###             ("_applC" ("_position" l\<^sub>2)
###               ("\<^const>Expr.expr.LAss" ("_position" V)
###                 ("_applC" ("_position" l\<^sub>0) ("_position" V))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" h\<^sub>0) ("_position" l\<^sub>0))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" s\<^sub>0)
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg"
###             ("_Update" ("_position" l\<^sub>0)
###               ("_updbind" ("_position" V) ("_position" None)))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###         ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###           ("_position" e\<^sub>0))
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg" ("_position" l\<^sub>0)))
###         ("_position" e\<^sub>2)
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_arg"
###             ("_applC" ("_position" l\<^sub>2)
###               ("\<^const>Expr.expr.LAss" ("_position" V)
###                 ("_applC" ("_position" l\<^sub>0) ("_position" V))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" h\<^sub>0) ("_position" l\<^sub>0))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" s\<^sub>0)
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg"
###             ("_applC" ("_position" l\<^sub>0)
###               ("\<^const>Expr.expr.LAss" ("_position" V)
###                 ("_position" None)))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###         ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###           ("_position" e\<^sub>0))
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg" ("_position" l\<^sub>0)))
###         ("_position" e\<^sub>2)
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_arg"
###             ("_Update" ("_position" l\<^sub>2)
###               ("_updbind" ("_position" V)
###                 ("_applC" ("_position" l\<^sub>0) ("_position" V))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" h\<^sub>0) ("_position" l\<^sub>0))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" s\<^sub>0)
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg"
###             ("_Update" ("_position" l\<^sub>0)
###               ("_updbind" ("_position" V) ("_position" None)))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P) ("_position" E)
###         ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###           ("_position" e\<^sub>0))
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_arg" ("_position" l\<^sub>0)))
###         ("_position" e\<^sub>2)
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_arg"
###             ("_Update" ("_position" l\<^sub>2)
###               ("_updbind" ("_position" V)
###                 ("_applC" ("_position" l\<^sub>0) ("_position" V))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1031 of "$AFP/CoreC++/Equivalence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("_applC" ("_position" override_on)
###         ("_cargs" ("_position" f)
###           ("_cargs"
###             ("_MapUpd" ("_position" g)
###               ("_maplet" ("_position" a) ("_position" b)))
###             ("_position" A))))
###       ("\<^const>Expr.expr.LAss" ("_position" a)
###         ("_applC" ("_position" g) ("_position" a))))
###     ("_applC" ("_position" override_on)
###       ("_cargs" ("_position" f)
###         ("_cargs" ("_position" g)
###           ("_applC" ("_position" insert)
###             ("_cargs" ("_position" a) ("_position" A))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update"
###       ("_applC" ("_position" override_on)
###         ("_cargs" ("_position" f)
###           ("_cargs"
###             ("_MapUpd" ("_position" g)
###               ("_maplet" ("_position" a) ("_position" b)))
###             ("_position" A))))
###       ("_updbind" ("_position" a)
###         ("_applC" ("_position" g) ("_position" a))))
###     ("_applC" ("_position" override_on)
###       ("_cargs" ("_position" f)
###         ("_cargs" ("_position" g)
###           ("_applC" ("_position" insert)
###             ("_cargs" ("_position" a) ("_position" A))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
[| ?P,?E \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<rightarrow>*
                      \<langle>null,?s\<^sub>1\<rangle>;
   ?P,?E \<turnstile> \<langle>?es,?s\<^sub>1\<rangle> [\<rightarrow>]*
                      \<langle>map Val ?vs,?s\<^sub>2\<rangle> |]
==> ?P,?E \<turnstile> \<langle>Call ?e ?Copt ?M ?es,
                        ?s\<^sub>0\<rangle> \<rightarrow>*
                       \<langle>Throw
                                 (addr_of_sys_xcpt NullPointer,
                                  [NullPointer]),
                        ?s\<^sub>2\<rangle>
### No such looper in simpset: "split_all_tac"
### theory "Draft.Equivalence"
### 1.569s elapsed time, 2.403s cpu time, 1.173s GC time
Loading theory "Draft.EquivalenceTemplates"
val templateLemmas =
   [("Equivalence.casts_casts",
     "[| wf_prog ?wf_md ?P; ?P \<turnstile> ?T casts ?v to ?v'  |]
      ==> ?P \<turnstile> ?T casts ?v' to ?v' ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 0),
             template_var 0)
           ))),
    ("Equivalence.override_on_upd_lemma",
     "(override_on ?f (?g(?a |-> ?b)) ?A)(?a := ?g ?a) =
      override_on ?f ?g (insert ?a ?A)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_app
                  (template_app
                    (template_app (template_hole 3, template_var 3),
                     template_var 2),
                   template_app (template_hole 1, template_var 1))),
               template_var 0)),
           template_var 2),
         template_app (template_var 3, template_var 2)),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 4), template_var 3),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Equivalence.casts_casts_eq",
     "[| ?P \<turnstile> ?T casts ?v to ?v ;
         ?P \<turnstile> ?T casts ?v to ?v' ; wf_prog ?wf_md ?P |]
      ==> ?v = ?v'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 4)
            )],
       template_equation (template_var 2, template_var 1))),
    ("Equivalence.unfold_while",
     "?P,?E \<turnstile> \<langle>while (?b) ?c,?s\<rangle> \<Rightarrow>
                         \<langle>?e',?s'\<rangle> =
      ?P,?E \<turnstile> \<langle>if (?b) (?c;; while (?b) ?c) else unit,
                          ?s\<rangle> \<Rightarrow>
                         \<langle>?e',?s'\<rangle>",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 5, template_var 6),
                 template_var 5),
               template_app
                (template_app (template_hole 4, template_var 4),
                 template_var 3)),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 5, template_var 6),
                 template_var 5),
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 4),
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_app
                      (template_app (template_hole 4, template_var 4),
                       template_var 3))),
                 template_app (template_hole 1, template_hole 0))),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("Equivalence.Cast_step_Cast_or_fin",
     "?P,?E \<turnstile> \<langle>\<lparr>?C\<rparr>?e,
                          ?s\<rangle> \<rightarrow>*
                         \<langle>?e',?s'\<rangle> ==>
      final ?e' | (EX e''. ?e' = \<lparr>?C\<rparr>e'')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app
                       (template_hole 7,
                        template_app
                         (template_app (template_hole 6, template_var 6),
                          template_var 5)),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 7, template_var 3),
                    template_var 2))),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 3)),
             template_app (template_hole 1, t_empty))
           ))),
    ("Equivalence.Red_dom_lcl",
     "?P,?E \<turnstile> \<langle>?e,(?h, ?l)\<rangle> \<rightarrow>
                         \<langle>?e',(?h', ?l')\<rangle> ==>
      dom ?l' <= dom ?l Un fv ?e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 7),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app (template_hole 6, template_var 6),
                        template_app
                         (template_app (template_hole 5, template_var 5),
                          template_var 4))),
                    template_app
                     (template_app (template_hole 6, template_var 3),
                      template_app
                       (template_app (template_hole 5, template_var 2),
                        template_var 1))))),
              template_app (template_hole 4, template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 2, template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 2, template_var 4)),
           template_app (template_hole 0, template_var 6))))),
    ("Equivalence.big_by_small",
     "[| wwf_prog ?P;
         ?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<Rightarrow>
                            \<langle>?e',?s'\<rangle> |]
      ==> ?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                             \<langle>?e',?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 5, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0))),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 4)))
           ))),
    ("Equivalence.bigs_by_smalls",
     "[| wwf_prog ?P;
         ?P,?E \<turnstile> \<langle>?es,?s\<rangle> [\<Rightarrow>]
                            \<langle>?es',?s'\<rangle> |]
      ==> ?P,?E \<turnstile> \<langle>?es,?s\<rangle> [\<rightarrow>]*
                             \<langle>?es',?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 5, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0))),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 4)))
           ))),
    ("Equivalence.eval_closed_lcl_unchanged",
     "[| wwf_prog ?P;
         ?P,?E \<turnstile> \<langle>?e,(?h, ?l)\<rangle> \<Rightarrow>
                            \<langle>?e',(?h', ?l')\<rangle>;
         fv ?e = {} |]
      ==> ?l' = ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 5, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 3)),
                template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            ),
        template_equation
         (template_app (template_hole 2, template_var 5), template_hole 1)],
       template_equation (template_var 0, template_var 3))),
    ("Equivalence.big_iff_small",
     "wwf_prog ?P ==>
      ?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<Rightarrow>
                         \<langle>?e',?s'\<rangle> =
      (?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                          \<langle>?e',?s'\<rangle> &
       final ?e')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_hole 9),
              template_var 5)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 7, template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 3),
                       template_var 2)),
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 0))),
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 5),
                   template_var 4)))),
           template_app (template_hole 0, template_var 1))))),
    ("Equivalence.ThrowReds",
     "?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                         \<langle>?e',?s'\<rangle> ==>
      ?P,?E \<turnstile> \<langle>throw ?e,?s\<rangle> \<rightarrow>*
                         \<langle>throw ?e',?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 5),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 0, template_var 5)),
                     template_var 4)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 0, template_var 3)),
                   template_var 2))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)))
           ))),
    ("Equivalence.Red_fv",
     "[| wwf_prog ?P;
         ?P,?E \<turnstile> \<langle>?e,(?h, ?l)\<rangle> \<rightarrow>
                            \<langle>?e',(?h', ?l')\<rangle> |]
      ==> fv ?e' <= fv ?e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_hole 8),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 6),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_app (template_hole 4, template_var 5),
                        template_app
                         (template_app (template_hole 3, template_var 4),
                          template_var 3))),
                    template_app
                     (template_app (template_hole 4, template_var 2),
                      template_app
                       (template_app (template_hole 3, template_var 1),
                        template_var 0))))),
              template_app (template_hole 2, template_var 7))
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 2),
         template_app (template_hole 0, template_var 5)))),
    ("Equivalence.list_eval_Throw",
     "?P,?E \<turnstile> \<langle>throw ?x,?s\<rangle> \<Rightarrow>
                         \<langle>?e',?s'\<rangle> ==>
      ?P,?E \<turnstile> \<langle>map Val ?vs @ throw ?x # ?es',
                          ?s\<rangle> [\<Rightarrow>]
                         \<langle>map Val ?vs @ ?e' # ?es',?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 6, template_var 7),
                      template_var 6),
                    template_app (template_hole 5, template_var 5)),
                  template_var 4),
                template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 4, template_var 7),
                     template_var 6),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_hole 1),
                         template_var 1)),
                     template_app
                      (template_app
                        (template_hole 0,
                         template_app (template_hole 5, template_var 5)),
                       template_var 0))),
                 template_var 4),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0))),
             template_var 2)
           ))),
    ("Equivalence.DynCastReds",
     "?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                         \<langle>?e',?s'\<rangle> ==>
      ?P,?E \<turnstile> \<langle>Cast ?C ?e,?s\<rangle> \<rightarrow>*
                         \<langle>Cast ?C ?e',?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 6),
                      template_var 5)),
                  template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 0, template_var 0),
                         template_var 6)),
                     template_var 5)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 4)),
                   template_var 3))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)))
           ))),
    ("Equivalence.LAssReds",
     "?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                         \<langle>?e',?s'\<rangle> ==>
      ?P,?E \<turnstile> \<langle>?V:=?e,?s\<rangle> \<rightarrow>*
                         \<langle>?V:=?e',?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 6),
                      template_var 5)),
                  template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 0, template_var 0),
                         template_var 6)),
                     template_var 5)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 4)),
                   template_var 3))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)))
           ))),
    ("Equivalence.SeqReds",
     "?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                         \<langle>?e',?s'\<rangle> ==>
      ?P,?E \<turnstile> \<langle>?e;; ?e\<^sub>2,?s\<rangle> \<rightarrow>*
                         \<langle>?e';; ?e\<^sub>2,?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 6),
                      template_var 5)),
                  template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 0, template_var 6),
                         template_var 0)),
                     template_var 5)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 0, template_var 4),
                       template_var 0)),
                   template_var 3))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)))
           ))),
    ("Equivalence.StaticCastReds",
     "?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                         \<langle>?e',?s'\<rangle> ==>
      ?P,?E \<turnstile> \<langle>\<lparr>?C\<rparr>?e,
                          ?s\<rangle> \<rightarrow>*
                         \<langle>\<lparr>?C\<rparr>?e',?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 6),
                      template_var 5)),
                  template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 0, template_var 0),
                         template_var 6)),
                     template_var 5)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 4)),
                   template_var 3))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)))
           ))),
    ("Equivalence.ListReds1",
     "?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                         \<langle>?e',?s'\<rangle> ==>
      ?P,?E \<turnstile> \<langle>?e # ?es,?s\<rangle> [\<rightarrow>]*
                         \<langle>?e' # ?es,?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 6),
                      template_var 5)),
                  template_app
                   (template_app (template_hole 8, template_var 4),
                    template_var 3))),
              template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 6),
                         template_var 0)),
                     template_var 5)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 4),
                       template_var 0)),
                   template_var 3))),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)))
           ))),
    ("Equivalence.DynCastRedsNull",
     "?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                         \<langle>null,?s'\<rangle> ==>
      ?P,?E \<turnstile> \<langle>Cast ?C ?e,?s\<rangle> \<rightarrow>*
                         \<langle>null,?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 5),
                      template_var 4)),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_hole 3)),
                    template_var 3))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 0, template_var 0),
                         template_var 5)),
                     template_var 4)),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_hole 3)),
                   template_var 3))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)))
           ))),
    ("Equivalence.StaticCastRedsNull",
     "?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                         \<langle>null,?s'\<rangle> ==>
      ?P,?E \<turnstile> \<langle>\<lparr>?C\<rparr>?e,
                          ?s\<rangle> \<rightarrow>*
                         \<langle>null,?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 5),
                      template_var 4)),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_hole 3)),
                    template_var 3))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 0, template_var 0),
                         template_var 5)),
                     template_var 4)),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_hole 3)),
                   template_var 3))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)))
           ))),
    ("Equivalence.eval_notfree_unchanged",
     "[| wwf_prog ?P;
         ?P,?E \<turnstile> \<langle>?e,(?h, ?l)\<rangle> \<Rightarrow>
                            \<langle>?e',(?h', ?l')\<rangle>;
         ?V ~: fv ?e |]
      ==> ?l' ?V = ?l ?V",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 8)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 5, template_var 8),
                      template_var 7),
                    template_var 6),
                  template_app
                   (template_app (template_hole 4, template_var 5),
                    template_var 4)),
                template_var 3),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_app (template_hole 1, template_var 6))
                )
            )],
       template_equation
        (template_app (template_var 1, template_var 0),
         template_app (template_var 4, template_var 0)))),
    ("Equivalence.eval_notfree_unchanged",
     "[| wwf_prog ?P;
         ?P,?E \<turnstile> \<langle>?es,(?h, ?l)\<rangle> [\<Rightarrow>]
                            \<langle>?es',(?h', ?l')\<rangle>;
         ?V ~: fvs ?es |]
      ==> ?l' ?V = ?l ?V",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 8)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 5, template_var 8),
                      template_var 7),
                    template_var 6),
                  template_app
                   (template_app (template_hole 4, template_var 5),
                    template_var 4)),
                template_var 3),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_app (template_hole 1, template_var 6))
                )
            )],
       template_equation
        (template_app (template_var 1, template_var 0),
         template_app (template_var 4, template_var 0)))),
    ("Equivalence.small_by_big",
     "[| wwf_prog ?P;
         ?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                            \<langle>?e',?s'\<rangle>;
         final ?e' |]
      ==> ?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<Rightarrow>
                             \<langle>?e',?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_hole 7),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 4),
                      template_var 3)),
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 1))),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 5),
                  template_var 0)))
            ),
        template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 0),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("Equivalence.WhileFReds",
     "?P,?E \<turnstile> \<langle>?b,?s\<rangle> \<rightarrow>*
                         \<langle>false,?s'\<rangle> ==>
      ?P,?E \<turnstile> \<langle>while (?b) ?c,?s\<rangle> \<rightarrow>*
                         \<langle>unit,?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_var 5),
                      template_var 4)),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_hole 6,
                        template_app (template_hole 5, template_hole 4))),
                    template_var 3))),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app (template_hole 1, template_var 5),
                         template_var 0)),
                     template_var 4)),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_hole 0)),
                   template_var 3))),
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)))
           ))),
    ("Equivalence.Reds_dom_lcl",
     "[| wwf_prog ?P;
         ?P,?E \<turnstile> \<langle>?e,(?h, ?l)\<rangle> \<rightarrow>*
                            \<langle>?e',(?h', ?l')\<rangle> |]
      ==> dom ?l' <= dom ?l Un fv ?e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_hole 10),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_var 6),
                      template_app
                       (template_app (template_hole 6, template_var 5),
                        template_var 4))),
                  template_app
                   (template_app (template_hole 7, template_var 3),
                    template_app
                     (template_app (template_hole 6, template_var 2),
                      template_var 1)))),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 7),
                  template_var 0)))
            )],
       template_inequation
        (less_equals, template_app (template_hole 2, template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 2, template_var 4)),
           template_app (template_hole 0, template_var 6))))),
    ("Equivalence.BinOp1Reds",
     "?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                         \<langle>?e',?s'\<rangle> ==>
      ?P,?E \<turnstile> \<langle>?e \<guillemotleft>?bop\<guillemotright> ?e\<^sub>2,
                          ?s\<rangle> \<rightarrow>*
                         \<langle>?e' \<guillemotleft>?bop\<guillemotright> ?e\<^sub>2,
                          ?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 7),
                      template_var 6)),
                  template_app
                   (template_app (template_hole 3, template_var 5),
                    template_var 4))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 7),
                           template_var 1),
                         template_var 0)),
                     template_var 6)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 5),
                         template_var 1),
                       template_var 0)),
                   template_var 4))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)))
           ))),
    ("Equivalence.CondReds",
     "?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                         \<langle>?e',?s'\<rangle> ==>
      ?P,?E \<turnstile> \<langle>if (?e) ?e\<^sub>1 else ?e\<^sub>2,
                          ?s\<rangle> \<rightarrow>*
                         \<langle>if (?e') ?e\<^sub>1 else ?e\<^sub>2,
                          ?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 7),
                      template_var 6)),
                  template_app
                   (template_app (template_hole 3, template_var 5),
                    template_var 4))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 7),
                           template_var 1),
                         template_var 0)),
                     template_var 6)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 5),
                         template_var 1),
                       template_var 0)),
                   template_var 4))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)))
           ))),
    ("Equivalence.FAccReds",
     "?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                         \<langle>?e',?s'\<rangle> ==>
      ?P,?E \<turnstile> \<langle>?e\<bullet>?F{?Cs},
                          ?s\<rangle> \<rightarrow>*
                         \<langle>?e'\<bullet>?F{?Cs},?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 7),
                      template_var 6)),
                  template_app
                   (template_app (template_hole 3, template_var 5),
                    template_var 4))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 7),
                           template_var 1),
                         template_var 0)),
                     template_var 6)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 5),
                         template_var 1),
                       template_var 0)),
                   template_var 4))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)))
           ))),
    ("Equivalence.ListReds2",
     "?P,?E \<turnstile> \<langle>?es,?s\<rangle> [\<rightarrow>]*
                         \<langle>?es',?s'\<rangle> ==>
      ?P,?E \<turnstile> \<langle>Val ?v # ?es,?s\<rangle> [\<rightarrow>]*
                         \<langle>Val ?v # ?es',?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 6),
                      template_var 5)),
                  template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 3))),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_hole 1,
                           template_app (template_hole 0, template_var 0)),
                         template_var 6)),
                     template_var 5)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 1,
                         template_app (template_hole 0, template_var 0)),
                       template_var 4)),
                   template_var 3))),
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)))
           ))),
    ("Equivalence.ThrowRedsThrow",
     "?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                         \<langle>Throw ?r,?s'\<rangle> ==>
      ?P,?E \<turnstile> \<langle>throw ?e,?s\<rangle> \<rightarrow>*
                         \<langle>Throw ?r,?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 5),
                      template_var 4)),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_hole 4,
                        template_app
                         (template_hole 3,
                          template_app (template_hole 2, template_var 3)))),
                    template_var 2))),
              template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app (template_hole 4, template_var 5)),
                     template_var 4)),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app
                        (template_hole 3,
                         template_app (template_hole 2, template_var 3)))),
                   template_var 2))),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Equivalence.BinOp2Reds",
     "?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                         \<langle>?e',?s'\<rangle> ==>
      ?P,?E \<turnstile> \<langle>Val ?v \<guillemotleft>?bop\<guillemotright> ?e,
                          ?s\<rangle> \<rightarrow>*
                         \<langle>Val ?v \<guillemotleft>?bop\<guillemotright> ?e',
                          ?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 7),
                      template_var 6)),
                  template_app
                   (template_app (template_hole 4, template_var 5),
                    template_var 4))),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_app
                            (template_hole 1,
                             template_app
                              (template_hole 0, template_var 1)),
                           template_var 0),
                         template_var 7)),
                     template_var 6)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_app
                          (template_hole 1,
                           template_app (template_hole 0, template_var 1)),
                         template_var 0),
                       template_var 5)),
                   template_var 4))),
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2)))
           ))),
    ("Equivalence.CallRedsObj",
     "?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                         \<langle>?e',?s'\<rangle> ==>
      ?P,?E \<turnstile> \<langle>Call ?e ?Copt ?M ?es,
                          ?s\<rangle> \<rightarrow>*
                         \<langle>Call ?e' ?Copt ?M ?es,?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 8),
                      template_var 7)),
                  template_app
                   (template_app (template_hole 3, template_var 6),
                    template_var 5))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 0, template_var 8),
                             template_var 2),
                           template_var 1),
                         template_var 0)),
                     template_var 7)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 0, template_var 6),
                           template_var 2),
                         template_var 1),
                       template_var 0)),
                   template_var 5))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3)))
           ))),
    ("Equivalence.FAssReds1",
     "?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                         \<langle>?e',?s'\<rangle> ==>
      ?P,?E \<turnstile> \<langle>?e\<bullet>?F{?Cs} := ?e\<^sub>2,
                          ?s\<rangle> \<rightarrow>*
                         \<langle>?e'\<bullet>?F{?Cs} := ?e\<^sub>2,
                          ?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 8),
                      template_var 7)),
                  template_app
                   (template_app (template_hole 3, template_var 6),
                    template_var 5))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 0, template_var 8),
                             template_var 2),
                           template_var 1),
                         template_var 0)),
                     template_var 7)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 0, template_var 6),
                           template_var 2),
                         template_var 1),
                       template_var 0)),
                   template_var 5))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3)))
           ))),
    ("Equivalence.WhileRedsThrow",
     "?P,?E \<turnstile> \<langle>?b,?s\<rangle> \<rightarrow>*
                         \<langle>Throw ?r,?s'\<rangle> ==>
      ?P,?E \<turnstile> \<langle>while (?b) ?c,?s\<rangle> \<rightarrow>*
                         \<langle>Throw ?r,?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 6),
                      template_var 5)),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_hole 5,
                        template_app
                         (template_hole 4,
                          template_app (template_hole 3, template_var 4)))),
                    template_var 3))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 0, template_var 6),
                         template_var 0)),
                     template_var 5)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4,
                         template_app (template_hole 3, template_var 4)))),
                   template_var 3))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)))
           ))),
    ("Equivalence.DynCastRedsThrow",
     "?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                         \<langle>Throw ?r,?s'\<rangle> ==>
      ?P,?E \<turnstile> \<langle>Cast ?C ?e,?s\<rangle> \<rightarrow>*
                         \<langle>Throw ?r,?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 6),
                      template_var 5)),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_hole 5,
                        template_app
                         (template_hole 4,
                          template_app (template_hole 3, template_var 4)))),
                    template_var 3))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 0, template_var 0),
                         template_var 6)),
                     template_var 5)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4,
                         template_app (template_hole 3, template_var 4)))),
                   template_var 3))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)))
           ))),
    ("Equivalence.LAssRedsThrow",
     "?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                         \<langle>Throw ?r,?s'\<rangle> ==>
      ?P,?E \<turnstile> \<langle>?V:=?e,?s\<rangle> \<rightarrow>*
                         \<langle>Throw ?r,?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 6),
                      template_var 5)),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_hole 5,
                        template_app
                         (template_hole 4,
                          template_app (template_hole 3, template_var 4)))),
                    template_var 3))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 0, template_var 0),
                         template_var 6)),
                     template_var 5)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4,
                         template_app (template_hole 3, template_var 4)))),
                   template_var 3))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)))
           ))),
    ("Equivalence.SeqRedsThrow",
     "?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                         \<langle>Throw ?r,?s'\<rangle> ==>
      ?P,?E \<turnstile> \<langle>?e;; ?e\<^sub>2,?s\<rangle> \<rightarrow>*
                         \<langle>Throw ?r,?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 6),
                      template_var 5)),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_hole 5,
                        template_app
                         (template_hole 4,
                          template_app (template_hole 3, template_var 4)))),
                    template_var 3))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 0, template_var 6),
                         template_var 0)),
                     template_var 5)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4,
                         template_app (template_hole 3, template_var 4)))),
                   template_var 3))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)))
           ))),
    ("Equivalence.StaticCastRedsThrow",
     "?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                         \<langle>Throw ?r,?s'\<rangle> ==>
      ?P,?E \<turnstile> \<langle>\<lparr>?C\<rparr>?e,
                          ?s\<rangle> \<rightarrow>*
                         \<langle>Throw ?r,?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 6),
                      template_var 5)),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_hole 5,
                        template_app
                         (template_hole 4,
                          template_app (template_hole 3, template_var 4)))),
                    template_var 3))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 0, template_var 0),
                         template_var 6)),
                     template_var 5)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4,
                         template_app (template_hole 3, template_var 4)))),
                   template_var 3))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)))
           ))),
    ("Equivalence.BinOpRedsThrow1",
     "?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                         \<langle>Throw ?r,?s'\<rangle> ==>
      ?P,?E \<turnstile> \<langle>?e \<guillemotleft>?bop\<guillemotright> ?e\<^sub>2,
                          ?s\<rangle> \<rightarrow>*
                         \<langle>Throw ?r,?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 7),
                      template_var 6)),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_hole 5,
                        template_app
                         (template_hole 4,
                          template_app (template_hole 3, template_var 5)))),
                    template_var 4))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 7),
                           template_var 1),
                         template_var 0)),
                     template_var 6)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4,
                         template_app (template_hole 3, template_var 5)))),
                   template_var 4))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)))
           ))),
    ("Equivalence.CondRedsThrow",
     "?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                         \<langle>Throw ?r,?s'\<rangle> ==>
      ?P,?E \<turnstile> \<langle>if (?e) ?e\<^sub>1 else ?e\<^sub>2,
                          ?s\<rangle> \<rightarrow>*
                         \<langle>Throw ?r,?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 7),
                      template_var 6)),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_hole 5,
                        template_app
                         (template_hole 4,
                          template_app (template_hole 3, template_var 5)))),
                    template_var 4))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 7),
                           template_var 1),
                         template_var 0)),
                     template_var 6)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4,
                         template_app (template_hole 3, template_var 5)))),
                   template_var 4))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)))
           ))),
    ("Equivalence.FAccRedsThrow",
     "?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                         \<langle>Throw ?r,?s'\<rangle> ==>
      ?P,?E \<turnstile> \<langle>?e\<bullet>?F{?Cs},
                          ?s\<rangle> \<rightarrow>*
                         \<langle>Throw ?r,?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 7),
                      template_var 6)),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_hole 5,
                        template_app
                         (template_hole 4,
                          template_app (template_hole 3, template_var 5)))),
                    template_var 4))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 7),
                           template_var 1),
                         template_var 0)),
                     template_var 6)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4,
                         template_app (template_hole 3, template_var 5)))),
                   template_var 4))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)))
           ))),
    ("Equivalence.extend_1_eval",
     "[| wwf_prog ?P;
         ?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>
                            \<langle>?e'',?s''\<rangle>;
         ?P,?E \<turnstile> \<langle>?e'',?s''\<rangle> \<Rightarrow>
                            \<langle>?e',?s'\<rangle> |]
      ==> ?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<Rightarrow>
                             \<langle>?e',?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 6),
                  template_app
                   (template_app
                     (template_hole 3,
                      template_app
                       (template_app (template_hole 2, template_var 5),
                        template_var 4)),
                    template_app
                     (template_app (template_hole 2, template_var 3),
                      template_var 2)))),
              template_app (template_hole 1, template_var 7))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 0, template_var 7),
                      template_var 6),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 7),
                     template_var 6),
                   template_var 5),
                 template_var 4),
               template_var 1),
             template_var 0)
           ))),
    ("Equivalence.extend_1_evals",
     "[| wwf_prog ?P;
         ?P,?E \<turnstile> \<langle>?es,?t\<rangle> [\<rightarrow>]
                            \<langle>?es'',?t''\<rangle>;
         ?P,?E \<turnstile> \<langle>?es'',?t''\<rangle> [\<Rightarrow>]
                            \<langle>?es',?t'\<rangle> |]
      ==> ?P,?E \<turnstile> \<langle>?es,?t\<rangle> [\<Rightarrow>]
                             \<langle>?es',?t'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 6),
                  template_app
                   (template_app
                     (template_hole 3,
                      template_app
                       (template_app (template_hole 2, template_var 5),
                        template_var 4)),
                    template_app
                     (template_app (template_hole 2, template_var 3),
                      template_var 2)))),
              template_app (template_hole 1, template_var 7))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 0, template_var 7),
                      template_var 6),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 7),
                     template_var 6),
                   template_var 5),
                 template_var 4),
               template_var 1),
             template_var 0)
           ))),
    ("Equivalence.extend_eval",
     "[| wwf_prog ?P;
         ?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                            \<langle>?e'',?s''\<rangle>;
         ?P,?E \<turnstile> \<langle>?e'',?s''\<rangle> \<Rightarrow>
                            \<langle>?e',?s'\<rangle> |]
      ==> ?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<Rightarrow>
                             \<langle>?e',?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 6),
                      template_var 5)),
                  template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 7),
                  template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 0, template_var 7),
                      template_var 2),
                    template_var 4),
                  template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 7),
                     template_var 2),
                   template_var 6),
                 template_var 5),
               template_var 1),
             template_var 0)
           ))),
    ("Equivalence.extend_evals",
     "[| wwf_prog ?P;
         ?P,?E \<turnstile> \<langle>?es,?s\<rangle> [\<rightarrow>]*
                            \<langle>?es'',?s''\<rangle>;
         ?P,?E \<turnstile> \<langle>?es'',?s''\<rangle> [\<Rightarrow>]
                            \<langle>?es',?s'\<rangle> |]
      ==> ?P,?E \<turnstile> \<langle>?es,?s\<rangle> [\<Rightarrow>]
                             \<langle>?es',?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 6),
                      template_var 5)),
                  template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 7),
                  template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 0, template_var 7),
                      template_var 2),
                    template_var 4),
                  template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 7),
                     template_var 2),
                   template_var 6),
                 template_var 5),
               template_var 1),
             template_var 0)
           ))),
    ("Equivalence.FAssReds2",
     "?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                         \<langle>?e',?s'\<rangle> ==>
      ?P,?E \<turnstile> \<langle>Val ?v\<bullet>?F{?Cs} := ?e,
                          ?s\<rangle> \<rightarrow>*
                         \<langle>Val ?v\<bullet>?F{?Cs} := ?e',
                          ?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 8),
                      template_var 7)),
                  template_app
                   (template_app (template_hole 4, template_var 6),
                    template_var 5))),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_hole 1,
                               template_app
                                (template_hole 0, template_var 2)),
                             template_var 1),
                           template_var 0),
                         template_var 8)),
                     template_var 7)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_hole 1,
                             template_app
                              (template_hole 0, template_var 2)),
                           template_var 1),
                         template_var 0),
                       template_var 6)),
                   template_var 5))),
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 3)))
           ))),
    ("Equivalence.CallRedsParams",
     "?P,?E \<turnstile> \<langle>?es,?s\<rangle> [\<rightarrow>]*
                         \<langle>?es',?s'\<rangle> ==>
      ?P,?E \<turnstile> \<langle>Call (Val ?v) ?Copt ?M ?es,
                          ?s\<rangle> \<rightarrow>*
                         \<langle>Call (Val ?v) ?Copt ?M ?es',?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 8),
                      template_var 7)),
                  template_app
                   (template_app (template_hole 9, template_var 6),
                    template_var 5))),
              template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 4),
                  template_var 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_hole 3,
                               template_app
                                (template_hole 2, template_var 2)),
                             template_var 1),
                           template_var 0),
                         template_var 8)),
                     template_var 7)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_hole 3,
                             template_app
                              (template_hole 2, template_var 2)),
                           template_var 1),
                         template_var 0),
                       template_var 6)),
                   template_var 5))),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3)))
           ))),
    ("Equivalence.ThrowRedsNull",
     "?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                         \<langle>null,?s'\<rangle> ==>
      ?P,?E \<turnstile> \<langle>throw ?e,?s\<rangle> \<rightarrow>*
                         \<langle>Throw
                                   (addr_of_sys_xcpt NullPointer,
                                    [NullPointer]),
                          ?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app
                   (template_hole 12,
                    template_app
                     (template_app (template_hole 11, template_var 4),
                      template_var 3)),
                  template_app
                   (template_app
                     (template_hole 11,
                      template_app (template_hole 10, template_hole 9)),
                    template_var 2))),
              template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app
                      (template_hole 11,
                       template_app (template_hole 6, template_var 4)),
                     template_var 3)),
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app
                      (template_hole 6,
                       template_app
                        (template_hole 10,
                         template_app
                          (template_hole 5,
                           template_app
                            (template_app
                              (template_hole 4,
                               template_app
                                (template_hole 3, template_hole 2)),
                             template_app
                              (template_app
                                (template_hole 1, template_hole 2),
                               template_hole 0)))))),
                   template_var 2))),
             template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 1),
                 template_var 0)))
           ))),
    ("Equivalence.FAssRedsThrow1",
     "?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                         \<langle>Throw ?r,?s'\<rangle> ==>
      ?P,?E \<turnstile> \<langle>?e\<bullet>?F{?Cs} := ?e\<^sub>2,
                          ?s\<rangle> \<rightarrow>*
                         \<langle>Throw ?r,?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 8),
                      template_var 7)),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_hole 5,
                        template_app
                         (template_hole 4,
                          template_app (template_hole 3, template_var 6)))),
                    template_var 5))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 0, template_var 8),
                             template_var 2),
                           template_var 1),
                         template_var 0)),
                     template_var 7)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4,
                         template_app (template_hole 3, template_var 6)))),
                   template_var 5))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3)))
           ))),
    ("Equivalence.CallRedsThrowObj",
     "?P,?E \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<rightarrow>*
                         \<langle>Throw ?ex,?s\<^sub>1\<rangle> ==>
      ?P,?E \<turnstile> \<langle>Call ?e ?Copt ?M ?es,
                          ?s\<^sub>0\<rangle> \<rightarrow>*
                         \<langle>Throw ?ex,?s\<^sub>1\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 8),
                      template_var 7)),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_hole 5,
                        template_app
                         (template_hole 4,
                          template_app (template_hole 3, template_var 6)))),
                    template_var 5))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 0, template_var 8),
                             template_var 2),
                           template_var 1),
                         template_var 0)),
                     template_var 7)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4,
                         template_app (template_hole 3, template_var 6)))),
                   template_var 5))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3)))
           ))),
    ("Equivalence.FAccRedsNull",
     "?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                         \<langle>null,?s'\<rangle> ==>
      ?P,?E \<turnstile> \<langle>?e\<bullet>?F{?Cs},
                          ?s\<rangle> \<rightarrow>*
                         \<langle>Throw
                                   (addr_of_sys_xcpt NullPointer,
                                    [NullPointer]),
                          ?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_app (template_hole 12, template_var 6),
                      template_var 5)),
                  template_app
                   (template_app
                     (template_hole 12,
                      template_app (template_hole 11, template_hole 10)),
                    template_var 4))),
              template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 3),
                  template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_app
                      (template_hole 12,
                       template_app
                        (template_app
                          (template_app (template_hole 7, template_var 6),
                           template_var 1),
                         template_var 0)),
                     template_var 5)),
                 template_app
                  (template_app
                    (template_hole 12,
                     template_app
                      (template_hole 6,
                       template_app
                        (template_hole 11,
                         template_app
                          (template_hole 5,
                           template_app
                            (template_app
                              (template_hole 4,
                               template_app
                                (template_hole 3, template_hole 2)),
                             template_app
                              (template_app
                                (template_hole 1, template_hole 2),
                               template_hole 0)))))),
                   template_var 4))),
             template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_var 3),
                 template_var 2)))
           ))),
    ("Equivalence.eval_restrict_lcl",
     "[| wwf_prog ?P;
         ?P,?E \<turnstile> \<langle>?e,(?h, ?l)\<rangle> \<Rightarrow>
                            \<langle>?e',(?h', ?l')\<rangle>;
         fv ?e <= ?W |]
      ==> ?P,?E \<turnstile> \<langle>?e,
                              (?h, ?l |` ?W)\<rangle> \<Rightarrow>
                             \<langle>?e',(?h', ?l' |` ?W)\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_var 8)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 4, template_var 8),
                      template_var 7),
                    template_var 6),
                  template_app
                   (template_app (template_hole 3, template_var 5),
                    template_var 4)),
                template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_inequation
         (less_equals, template_app (template_hole 1, template_var 6),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 4, template_var 8),
                     template_var 7),
                   template_var 6),
                 template_app
                  (template_app (template_hole 3, template_var 5),
                   template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 0))),
               template_var 3),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Equivalence.Cast_red",
     "[| ?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                            \<langle>?e',?s'\<rangle>;
         ?e = \<lparr>?C\<rparr>?e\<^sub>0;
         ?e' = \<lparr>?C\<rparr>?e\<^sub>1 |]
      ==> ?P,?E \<turnstile> \<langle>?e\<^sub>0,?s\<rangle> \<rightarrow>*
                             \<langle>?e\<^sub>1,?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 8),
                      template_var 7)),
                  template_app
                   (template_app (template_hole 4, template_var 6),
                    template_var 5))),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3)))
            ),
        template_equation
         (template_var 8,
          template_app
           (template_app (template_hole 0, template_var 2),
            template_var 1)),
        template_equation
         (template_var 6,
          template_app
           (template_app (template_hole 0, template_var 2),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_var 7)),
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_var 5))),
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 3)))
           ))),
    ("Equivalence.cast_lcl",
     "?P,?E \<turnstile> \<langle>\<lparr>?C\<rparr>Val ?v,
                          (?h, ?l)\<rangle> \<rightarrow>
                         \<langle>Val ?v',(?h, ?l)\<rangle> ==>
      ?P,?E \<turnstile> \<langle>\<lparr>?C\<rparr>Val ?v,
                          (?h, ?l')\<rangle> \<rightarrow>
                         \<langle>Val ?v',(?h, ?l')\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 7),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_app
                         (template_hole 4,
                          template_app
                           (template_app (template_hole 3, template_var 6),
                            template_app
                             (template_hole 2, template_var 5))),
                        template_app
                         (template_app (template_hole 1, template_var 4),
                          template_var 3))),
                    template_app
                     (template_app
                       (template_hole 4,
                        template_app (template_hole 2, template_var 2)),
                      template_app
                       (template_app (template_hole 1, template_var 4),
                        template_var 3))))),
              template_app (template_hole 0, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 7),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 3, template_var 6),
                           template_app (template_hole 2, template_var 5))),
                       template_app
                        (template_app (template_hole 1, template_var 4),
                         template_var 0))),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app (template_hole 2, template_var 2)),
                     template_app
                      (template_app (template_hole 1, template_var 4),
                       template_var 0))))),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Equivalence.cast_env",
     "?P,?E \<turnstile> \<langle>\<lparr>?C\<rparr>Val ?v,
                          (?h, ?l)\<rangle> \<rightarrow>
                         \<langle>Val ?v',(?h, ?l)\<rangle> ==>
      ?P,?E' \<turnstile> \<langle>\<lparr>?C\<rparr>Val ?v,
                           (?h, ?l)\<rangle> \<rightarrow>
                          \<langle>Val ?v',(?h, ?l)\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 7),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_app
                         (template_hole 4,
                          template_app
                           (template_app (template_hole 3, template_var 6),
                            template_app
                             (template_hole 2, template_var 5))),
                        template_app
                         (template_app (template_hole 1, template_var 4),
                          template_var 3))),
                    template_app
                     (template_app
                       (template_hole 4,
                        template_app (template_hole 2, template_var 2)),
                      template_app
                       (template_app (template_hole 1, template_var 4),
                        template_var 3))))),
              template_app (template_hole 0, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 3, template_var 6),
                           template_app (template_hole 2, template_var 5))),
                       template_app
                        (template_app (template_hole 1, template_var 4),
                         template_var 3))),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app (template_hole 2, template_var 2)),
                     template_app
                      (template_app (template_hole 1, template_var 4),
                       template_var 3))))),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Equivalence.SeqReds2",
     "[| ?P,?E \<turnstile> \<langle>?e\<^sub>1,
                             ?s\<^sub>0\<rangle> \<rightarrow>*
                            \<langle>Val ?v\<^sub>1,?s\<^sub>1\<rangle>;
         ?P,?E \<turnstile> \<langle>?e\<^sub>2,
                             ?s\<^sub>1\<rangle> \<rightarrow>*
                            \<langle>?e\<^sub>2',?s\<^sub>2\<rangle> |]
      ==> ?P,?E \<turnstile> \<langle>?e\<^sub>1;; ?e\<^sub>2,
                              ?s\<^sub>0\<rangle> \<rightarrow>*
                             \<langle>?e\<^sub>2',?s\<^sub>2\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 8),
                      template_var 7)),
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_var 6)),
                    template_var 5))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 2),
                      template_var 5)),
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    template_var 0))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 0, template_var 8),
                         template_var 2)),
                     template_var 7)),
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_var 0))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3)))
           ))),
    ("Equivalence.CondReds2F",
     "[| ?P,?E \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<rightarrow>*
                            \<langle>false,?s\<^sub>1\<rangle>;
         ?P,?E \<turnstile> \<langle>?e\<^sub>2,
                             ?s\<^sub>1\<rangle> \<rightarrow>*
                            \<langle>?e',?s\<^sub>2\<rangle> |]
      ==> ?P,?E \<turnstile> \<langle>if (?e) ?e\<^sub>1 else ?e\<^sub>2,
                              ?s\<^sub>0\<rangle> \<rightarrow>*
                             \<langle>?e',?s\<^sub>2\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 8),
                      template_var 7)),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_hole 5,
                        template_app (template_hole 4, template_hole 3))),
                    template_var 6))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 5),
                  template_var 4)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 3),
                      template_var 6)),
                  template_app
                   (template_app (template_hole 6, template_var 2),
                    template_var 1))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 5),
                  template_var 4)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 8),
                           template_var 0),
                         template_var 3)),
                     template_var 7)),
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_var 1))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 5),
                 template_var 4)))
           ))),
    ("Equivalence.CondReds2T",
     "[| ?P,?E \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<rightarrow>*
                            \<langle>true,?s\<^sub>1\<rangle>;
         ?P,?E \<turnstile> \<langle>?e\<^sub>1,
                             ?s\<^sub>1\<rangle> \<rightarrow>*
                            \<langle>?e',?s\<^sub>2\<rangle> |]
      ==> ?P,?E \<turnstile> \<langle>if (?e) ?e\<^sub>1 else ?e\<^sub>2,
                              ?s\<^sub>0\<rangle> \<rightarrow>*
                             \<langle>?e',?s\<^sub>2\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 8),
                      template_var 7)),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_hole 5,
                        template_app (template_hole 4, template_hole 3))),
                    template_var 6))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 5),
                  template_var 4)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 3),
                      template_var 6)),
                  template_app
                   (template_app (template_hole 6, template_var 2),
                    template_var 1))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 5),
                  template_var 4)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 8),
                           template_var 3),
                         template_var 0)),
                     template_var 7)),
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_var 1))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 5),
                 template_var 4)))
           ))),
    ("Equivalence.StaticDownDynCastReds",
     "?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                         \<langle>ref (?a, ?Cs @ [?C] @ ?Cs'),
                          ?s'\<rangle> ==>
      ?P,?E \<turnstile> \<langle>Cast ?C ?e,?s\<rangle> \<rightarrow>*
                         \<langle>ref (?a, ?Cs @ [?C]),?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 8),
                      template_var 7)),
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_hole 8,
                        template_app
                         (template_hole 7,
                          template_app
                           (template_app (template_hole 6, template_var 6),
                            template_app
                             (template_app
                               (template_hole 5, template_var 5),
                              template_app
                               (template_app
                                 (template_hole 5,
                                  template_app
                                   (template_app
                                     (template_hole 4, template_var 4),
                                    template_hole 3)),
                                template_var 3)))))),
                    template_var 2))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app
                        (template_app (template_hole 0, template_var 4),
                         template_var 8)),
                     template_var 7)),
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_hole 8,
                       template_app
                        (template_hole 7,
                         template_app
                          (template_app (template_hole 6, template_var 6),
                           template_app
                            (template_app (template_hole 5, template_var 5),
                             template_app
                              (template_app
                                (template_hole 4, template_var 4),
                               template_hole 3)))))),
                   template_var 2))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)))
           ))),
    ("Equivalence.StaticDownCastReds",
     "?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                         \<langle>ref (?a, ?Cs @ [?C] @ ?Cs'),
                          ?s'\<rangle> ==>
      ?P,?E \<turnstile> \<langle>\<lparr>?C\<rparr>?e,
                          ?s\<rangle> \<rightarrow>*
                         \<langle>ref (?a, ?Cs @ [?C]),?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 8),
                      template_var 7)),
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_hole 8,
                        template_app
                         (template_hole 7,
                          template_app
                           (template_app (template_hole 6, template_var 6),
                            template_app
                             (template_app
                               (template_hole 5, template_var 5),
                              template_app
                               (template_app
                                 (template_hole 5,
                                  template_app
                                   (template_app
                                     (template_hole 4, template_var 4),
                                    template_hole 3)),
                                template_var 3)))))),
                    template_var 2))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app
                        (template_app (template_hole 0, template_var 4),
                         template_var 8)),
                     template_var 7)),
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_hole 8,
                       template_app
                        (template_hole 7,
                         template_app
                          (template_app (template_hole 6, template_var 6),
                           template_app
                            (template_app (template_hole 5, template_var 5),
                             template_app
                              (template_app
                                (template_hole 4, template_var 4),
                               template_hole 3)))))),
                   template_var 2))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)))
           ))),
    ("Equivalence.ListRedsVal",
     "[| ?P,?E \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<rightarrow>*
                            \<langle>Val ?v,?s\<^sub>1\<rangle>;
         ?P,?E \<turnstile> \<langle>?es,
                             ?s\<^sub>1\<rangle> [\<rightarrow>]*
                            \<langle>?es',?s\<^sub>2\<rangle> |]
      ==> ?P,?E \<turnstile> \<langle>?e # ?es,
                              ?s\<^sub>0\<rangle> [\<rightarrow>]*
                             \<langle>Val ?v # ?es',?s\<^sub>2\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 8),
                      template_var 7)),
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app (template_hole 8, template_var 6)),
                    template_var 5))),
              template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 4),
                  template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 2),
                      template_var 5)),
                  template_app
                   (template_app (template_hole 3, template_var 1),
                    template_var 0))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 0, template_var 8),
                         template_var 2)),
                     template_var 7)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_hole 0,
                         template_app (template_hole 8, template_var 6)),
                       template_var 1)),
                   template_var 0))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3)))
           ))),
    ("Equivalence.Cast_final_eq",
     "[| ?P,?E \<turnstile> \<langle>\<lparr>?C\<rparr>?e,
                             (?h, ?l)\<rangle> \<rightarrow>
                            \<langle>?e',(?h, ?l)\<rangle>;
         final ?e; final ?e' |]
      ==> ?P,?E' \<turnstile> \<langle>\<lparr>?C\<rparr>?e,
                               (?h, ?l')\<rangle> \<rightarrow>
                              \<langle>?e',(?h, ?l')\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 8),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_app
                         (template_hole 4,
                          template_app
                           (template_app (template_hole 3, template_var 7),
                            template_var 6)),
                        template_app
                         (template_app (template_hole 2, template_var 5),
                          template_var 4))),
                    template_app
                     (template_app (template_hole 4, template_var 3),
                      template_app
                       (template_app (template_hole 2, template_var 5),
                        template_var 4))))),
              template_app (template_hole 1, template_var 2))
            ),
        template_predicate (template_app (template_hole 0, template_var 6)),
        template_predicate
         (template_app (template_hole 0, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 3, template_var 7),
                           template_var 6)),
                       template_app
                        (template_app (template_hole 2, template_var 5),
                         template_var 0))),
                   template_app
                    (template_app (template_hole 4, template_var 3),
                     template_app
                      (template_app (template_hole 2, template_var 5),
                       template_var 0))))),
             template_app (template_hole 1, template_var 2))
           ))),
    ("Equivalence.None_lcl_casts_values",
     "[| wf_prog ?wf_md ?P;
         ?P,?E \<turnstile> \<langle>?e,(?h, ?l)\<rangle> \<rightarrow>
                            \<langle>?e',(?h', ?l')\<rangle>;
         ?l ?V = None; ?E ?V = \<lfloor>?T\<rfloor>;
         ?l' ?V = \<lfloor>?v'\<rfloor> |]
      ==> ?P \<turnstile> ?T casts ?v' to ?v' ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 11),
              template_var 10)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 9),
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_app (template_hole 8, template_var 8),
                        template_app
                         (template_app (template_hole 7, template_var 7),
                          template_var 6))),
                    template_app
                     (template_app (template_hole 8, template_var 5),
                      template_app
                       (template_app (template_hole 7, template_var 4),
                        template_var 3))))),
              template_app (template_hole 6, template_var 10))
            ),
        template_equation
         (template_app (template_var 6, template_var 2), template_hole 4),
        template_equation
         (template_app (template_var 9, template_var 2),
          template_app (template_hole 2, template_var 1)),
        template_equation
         (template_app (template_var 3, template_var 2),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 10),
                 template_var 1),
               template_var 0),
             template_var 0)
           ))),
    ("Equivalence.BinOpRedsThrow2",
     "[| ?P,?E \<turnstile> \<langle>?e\<^sub>1,
                             ?s\<^sub>0\<rangle> \<rightarrow>*
                            \<langle>Val ?v\<^sub>1,?s\<^sub>1\<rangle>;
         ?P,?E \<turnstile> \<langle>?e\<^sub>2,
                             ?s\<^sub>1\<rangle> \<rightarrow>*
                            \<langle>Throw ?r,?s\<^sub>2\<rangle> |]
      ==> ?P,?E \<turnstile> \<langle>?e\<^sub>1 \<guillemotleft>?bop\<guillemotright> ?e\<^sub>2,
                              ?s\<^sub>0\<rangle> \<rightarrow>*
                             \<langle>Throw ?r,?s\<^sub>2\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 9),
                      template_var 8)),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app (template_hole 5, template_var 7)),
                    template_var 6))),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 5),
                  template_var 4)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 3),
                      template_var 6)),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 5,
                          template_app (template_hole 1, template_var 2)))),
                    template_var 1))),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 5),
                  template_var 4)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 9),
                           template_var 0),
                         template_var 3)),
                     template_var 8)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 5,
                         template_app (template_hole 1, template_var 2)))),
                   template_var 1))),
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 5),
                 template_var 4)))
           ))),
    ("Equivalence.WhileTRedsThrow",
     "[| ?P,?E \<turnstile> \<langle>?b,?s\<^sub>0\<rangle> \<rightarrow>*
                            \<langle>true,?s\<^sub>1\<rangle>;
         ?P,?E \<turnstile> \<langle>?c,?s\<^sub>1\<rangle> \<rightarrow>*
                            \<langle>Throw ?r,?s\<^sub>2\<rangle> |]
      ==> ?P,?E \<turnstile> \<langle>while (?b) ?c,
                              ?s\<^sub>0\<rangle> \<rightarrow>*
                             \<langle>Throw ?r,?s\<^sub>2\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 7),
                      template_var 6)),
                  template_app
                   (template_app
                     (template_hole 8,
                      template_app
                       (template_hole 7,
                        template_app (template_hole 6, template_hole 5))),
                    template_var 5))),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 2),
                      template_var 5)),
                  template_app
                   (template_app
                     (template_hole 8,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 7,
                          template_app (template_hole 1, template_var 1)))),
                    template_var 0))),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_app (template_hole 0, template_var 7),
                         template_var 2)),
                     template_var 6)),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 7,
                         template_app (template_hole 1, template_var 1)))),
                   template_var 0))),
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 4),
                 template_var 3)))
           ))),
    ("Equivalence.FAssRedsThrow2",
     "[| ?P,?E \<turnstile> \<langle>?e\<^sub>1,
                             ?s\<^sub>0\<rangle> \<rightarrow>*
                            \<langle>Val ?v,?s\<^sub>1\<rangle>;
         ?P,?E \<turnstile> \<langle>?e\<^sub>2,
                             ?s\<^sub>1\<rangle> \<rightarrow>*
                            \<langle>Throw ?r,?s\<^sub>2\<rangle> |]
      ==> ?P,?E \<turnstile> \<langle>?e\<^sub>1\<bullet>?F{?Cs} := ?e\<^sub>2,
                              ?s\<^sub>0\<rangle> \<rightarrow>*
                             \<langle>Throw ?r,?s\<^sub>2\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 10),
                      template_var 9)),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app (template_hole 5, template_var 8)),
                    template_var 7))),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 6),
                  template_var 5)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 4),
                      template_var 7)),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 5,
                          template_app (template_hole 1, template_var 3)))),
                    template_var 2))),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 6),
                  template_var 5)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_hole 0, template_var 10),
                             template_var 1),
                           template_var 0),
                         template_var 4)),
                     template_var 9)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 5,
                         template_app (template_hole 1, template_var 3)))),
                   template_var 2))),
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 6),
                 template_var 5)))
           ))),
    ("Equivalence.StaticUpCastReds",
     "[| ?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                            \<langle>ref (?a, ?Cs),?s'\<rangle>;
         ?P \<turnstile> Path last ?Cs to ?C via ?Cs' ;
         ?Ds = ?Cs @\<^sub>p ?Cs' |]
      ==> ?P,?E \<turnstile> \<langle>\<lparr>?C\<rparr>?e,
                              ?s\<rangle> \<rightarrow>*
                             \<langle>ref (?a, ?Ds),?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app (template_hole 10, template_var 9),
                      template_var 8)),
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_hole 9,
                        template_app
                         (template_hole 8,
                          template_app
                           (template_app (template_hole 7, template_var 7),
                            template_var 6)))),
                    template_var 5))),
              template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 4),
                  template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 4),
                  template_app (template_hole 3, template_var 6)),
                template_var 2),
              template_var 1)
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 1, template_var 6),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app
                      (template_hole 10,
                       template_app
                        (template_app (template_hole 0, template_var 2),
                         template_var 9)),
                     template_var 8)),
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_hole 9,
                       template_app
                        (template_hole 8,
                         template_app
                          (template_app (template_hole 7, template_var 7),
                           template_var 0)))),
                   template_var 5))),
             template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 4),
                 template_var 3)))
           ))),
    ("Equivalence.LAssRedsVal",
     "[| ?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                            \<langle>Val ?v,(?h', ?l')\<rangle>;
         ?E ?V = \<lfloor>?T\<rfloor>;
         ?P \<turnstile> ?T casts ?v to ?v'  |]
      ==> ?P,?E \<turnstile> \<langle>?V:=?e,?s\<rangle> \<rightarrow>*
                             \<langle>Val ?v',
                              (?h', ?l'(?V |-> ?v'))\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app (template_hole 10, template_var 9),
                      template_var 8)),
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app (template_hole 9, template_var 7)),
                    template_app
                     (template_app (template_hole 8, template_var 6),
                      template_var 5)))),
              template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 4),
                  template_var 3)))
            ),
        template_equation
         (template_app (template_var 3, template_var 2),
          template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 1),
                template_var 7),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app
                      (template_hole 10,
                       template_app
                        (template_app (template_hole 2, template_var 2),
                         template_var 9)),
                     template_var 8)),
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app (template_hole 9, template_var 0)),
                   template_app
                    (template_app (template_hole 8, template_var 6),
                     template_app
                      (template_app
                        (template_app (template_hole 1, template_var 5),
                         template_var 2),
                       template_app (template_hole 0, template_var 0)))))),
             template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 4),
                 template_var 3)))
           ))),
    ("Equivalence.blocksFinal",
     "[| wf_prog ?wf_md ?P; length ?Vs = length ?Ts;
         length ?vs = length ?Ts; final ?e;
         ?P \<turnstile> ?Ts Casts ?vs to ?vs'  |]
      ==> ?P,?E \<turnstile> \<langle>blocks (?Vs, ?Ts, ?vs, ?e),
                              (?h, ?l)\<rangle> \<rightarrow>*
                             \<langle>?e,(?h, ?l)\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 9),
              template_var 8)
            ),
        template_equation
         (template_app (template_hole 14, template_var 7),
          template_app (template_hole 13, template_var 6)),
        template_equation
         (template_app (template_hole 12, template_var 5),
          template_app (template_hole 13, template_var 6)),
        template_predicate
         (template_app (template_hole 11, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 8),
                  template_var 6),
                template_var 5),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_hole 6,
                         template_app
                          (template_app (template_hole 5, template_var 7),
                           template_app
                            (template_app (template_hole 4, template_var 6),
                             template_app
                              (template_app
                                (template_hole 3, template_var 5),
                               template_var 4))))),
                     template_app
                      (template_app (template_hole 2, template_var 2),
                       template_var 1))),
                 template_app
                  (template_app (template_hole 7, template_var 4),
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 1)))),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 8),
                 template_var 0)))
           ))),
    ("Equivalence.FAssRedsNull",
     "[| ?P,?E \<turnstile> \<langle>?e\<^sub>1,
                             ?s\<^sub>0\<rangle> \<rightarrow>*
                            \<langle>null,?s\<^sub>1\<rangle>;
         ?P,?E \<turnstile> \<langle>?e\<^sub>2,
                             ?s\<^sub>1\<rangle> \<rightarrow>*
                            \<langle>Val ?v,?s\<^sub>2\<rangle> |]
      ==> ?P,?E \<turnstile> \<langle>?e\<^sub>1\<bullet>?F{?Cs} := ?e\<^sub>2,
                              ?s\<^sub>0\<rangle> \<rightarrow>*
                             \<langle>Throw
 (addr_of_sys_xcpt NullPointer, [NullPointer]),
                              ?s\<^sub>2\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_app (template_hole 12, template_var 9),
                      template_var 8)),
                  template_app
                   (template_app
                     (template_hole 12,
                      template_app (template_hole 11, template_hole 10)),
                    template_var 7))),
              template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 6),
                  template_var 5)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_app (template_hole 12, template_var 4),
                      template_var 7)),
                  template_app
                   (template_app
                     (template_hole 12,
                      template_app (template_hole 11, template_var 3)),
                    template_var 2))),
              template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 6),
                  template_var 5)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_app
                      (template_hole 12,
                       template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 7, template_var 9),
                             template_var 1),
                           template_var 0),
                         template_var 4)),
                     template_var 8)),
                 template_app
                  (template_app
                    (template_hole 12,
                     template_app
                      (template_hole 6,
                       template_app
                        (template_hole 11,
                         template_app
                          (template_hole 5,
                           template_app
                            (template_app
                              (template_hole 4,
                               template_app
                                (template_hole 3, template_hole 2)),
                             template_app
                              (template_app
                                (template_hole 1, template_hole 2),
                               template_hole 0)))))),
                   template_var 2))),
             template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_var 6),
                 template_var 5)))
           ))),
    ("Equivalence.Cast_final",
     "[| ?P,?E \<turnstile> \<langle>\<lparr>?C\<rparr>?e,
                             ?s\<rangle> \<rightarrow>*
                            \<langle>?e',?s'\<rangle>;
         final ?e' |]
      ==> EX e'' s''.
             ?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                                \<langle>e'',s''\<rangle> &
             ?P,?E \<turnstile> \<langle>\<lparr>?C\<rparr>e'',
                                 s''\<rangle> \<rightarrow>
                                \<langle>?e',?s'\<rangle> &
             final e''",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app
                         (template_app (template_hole 9, template_var 6),
                          template_var 5)),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 10, template_var 3),
                    template_var 2))),
              template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_var 0)))
            ),
        template_predicate
         (template_app (template_hole 6, template_var 3))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Equivalence.CallRedsNull",
     "[| ?P,?E \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<rightarrow>*
                            \<langle>null,?s\<^sub>1\<rangle>;
         ?P,?E \<turnstile> \<langle>?es,
                             ?s\<^sub>1\<rangle> [\<rightarrow>]*
                            \<langle>map Val ?vs,?s\<^sub>2\<rangle> |]
      ==> ?P,?E \<turnstile> \<langle>Call ?e ?Copt ?M ?es,
                              ?s\<^sub>0\<rangle> \<rightarrow>*
                             \<langle>Throw
 (addr_of_sys_xcpt NullPointer, [NullPointer]),
                              ?s\<^sub>2\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 20,
                template_app
                 (template_app
                   (template_hole 19,
                    template_app
                     (template_app (template_hole 18, template_var 9),
                      template_var 8)),
                  template_app
                   (template_app
                     (template_hole 18,
                      template_app (template_hole 17, template_hole 16)),
                    template_var 7))),
              template_app
               (template_hole 15,
                template_app
                 (template_app (template_hole 14, template_var 6),
                  template_var 5)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app
                   (template_hole 12,
                    template_app
                     (template_app (template_hole 11, template_var 4),
                      template_var 7)),
                  template_app
                   (template_app
                     (template_hole 11,
                      template_app
                       (template_app (template_hole 10, template_hole 17),
                        template_var 3)),
                    template_var 2))),
              template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 6),
                  template_var 5)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 20,
               template_app
                (template_app
                  (template_hole 19,
                   template_app
                    (template_app
                      (template_hole 18,
                       template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 7, template_var 9),
                             template_var 1),
                           template_var 0),
                         template_var 4)),
                     template_var 8)),
                 template_app
                  (template_app
                    (template_hole 18,
                     template_app
                      (template_hole 6,
                       template_app
                        (template_hole 17,
                         template_app
                          (template_hole 5,
                           template_app
                            (template_app
                              (template_hole 4,
                               template_app
                                (template_hole 3, template_hole 2)),
                             template_app
                              (template_app
                                (template_hole 1, template_hole 2),
                               template_hole 0)))))),
                   template_var 2))),
             template_app
              (template_hole 15,
               template_app
                (template_app (template_hole 14, template_var 6),
                 template_var 5)))
           ))),
    ("Equivalence.Some_lcl_casts_values",
     "[| wf_prog ?wf_md ?P;
         ?P,?E \<turnstile> \<langle>?e,(?h, ?l)\<rangle> \<rightarrow>
                            \<langle>?e',(?h', ?l')\<rangle>;
         ?l ?V = \<lfloor>?v\<rfloor>; ?E ?V = \<lfloor>?T\<rfloor>;
         ?P \<turnstile> ?T casts ?v'' to ?v ;
         ?l' ?V = \<lfloor>?v'\<rfloor> |]
      ==> ?P \<turnstile> ?T casts ?v' to ?v' ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 13),
              template_var 12)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 11),
                  template_app
                   (template_app
                     (template_hole 8,
                      template_app
                       (template_app (template_hole 7, template_var 10),
                        template_app
                         (template_app (template_hole 6, template_var 9),
                          template_var 8))),
                    template_app
                     (template_app (template_hole 7, template_var 7),
                      template_app
                       (template_app (template_hole 6, template_var 6),
                        template_var 5))))),
              template_app (template_hole 5, template_var 12))
            ),
        template_equation
         (template_app (template_var 8, template_var 4),
          template_app (template_hole 3, template_var 3)),
        template_equation
         (template_app (template_var 11, template_var 4),
          template_app (template_hole 1, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 12),
                  template_var 2),
                template_var 1),
              template_var 3)
            ),
        template_equation
         (template_app (template_var 5, template_var 4),
          template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 12),
                 template_var 2),
               template_var 0),
             template_var 0)
           ))),
    ("Equivalence.CallRedsThrowParams",
     "[| ?P,?E \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<rightarrow>*
                            \<langle>Val ?v,?s\<^sub>1\<rangle>;
         ?P,?E \<turnstile> \<langle>?es,
                             ?s\<^sub>1\<rangle> [\<rightarrow>]*
                            \<langle>map Val ?vs\<^sub>1 @
                                     Throw ?ex # ?es\<^sub>2,
                             ?s\<^sub>2\<rangle> |]
      ==> ?P,?E \<turnstile> \<langle>Call ?e ?Copt ?M ?es,
                              ?s\<^sub>0\<rangle> \<rightarrow>*
                             \<langle>Throw ?ex,?s\<^sub>2\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app
                   (template_hole 15,
                    template_app
                     (template_app (template_hole 14, template_var 12),
                      template_var 11)),
                  template_app
                   (template_app
                     (template_hole 14,
                      template_app (template_hole 13, template_var 10)),
                    template_var 9))),
              template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 8),
                  template_var 7)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 6),
                      template_var 9)),
                  template_app
                   (template_app
                     (template_hole 8,
                      template_app
                       (template_app
                         (template_hole 7,
                          template_app
                           (template_app
                             (template_hole 6, template_hole 13),
                            template_var 5)),
                        template_app
                         (template_app
                           (template_hole 5,
                            template_app
                             (template_hole 4,
                              template_app
                               (template_hole 13,
                                template_app
                                 (template_hole 3, template_var 4)))),
                          template_var 3))),
                    template_var 2))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 8),
                  template_var 7)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 16,
               template_app
                (template_app
                  (template_hole 15,
                   template_app
                    (template_app
                      (template_hole 14,
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_hole 0, template_var 12),
                             template_var 1),
                           template_var 0),
                         template_var 6)),
                     template_var 11)),
                 template_app
                  (template_app
                    (template_hole 14,
                     template_app
                      (template_hole 4,
                       template_app
                        (template_hole 13,
                         template_app (template_hole 3, template_var 4)))),
                   template_var 2))),
             template_app
              (template_hole 12,
               template_app
                (template_app (template_hole 11, template_var 8),
                 template_var 7)))
           ))),
    ("Equivalence.BinOpRedsVal",
     "[| ?P,?E \<turnstile> \<langle>?e\<^sub>1,
                             ?s\<^sub>0\<rangle> \<rightarrow>*
                            \<langle>Val ?v\<^sub>1,?s\<^sub>1\<rangle>;
         ?P,?E \<turnstile> \<langle>?e\<^sub>2,
                             ?s\<^sub>1\<rangle> \<rightarrow>*
                            \<langle>Val ?v\<^sub>2,?s\<^sub>2\<rangle>;
         binop (?bop, ?v\<^sub>1, ?v\<^sub>2) = \<lfloor>?v\<rfloor> |]
      ==> ?P,?E \<turnstile> \<langle>?e\<^sub>1 \<guillemotleft>?bop\<guillemotright> ?e\<^sub>2,
                              ?s\<^sub>0\<rangle> \<rightarrow>*
                             \<langle>Val ?v,?s\<^sub>2\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 10),
                      template_var 9)),
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app (template_hole 8, template_var 8)),
                    template_var 7))),
              template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 6),
                  template_var 5)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 4),
                      template_var 7)),
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app (template_hole 8, template_var 3)),
                    template_var 2))),
              template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 6),
                  template_var 5)))
            ),
        template_equation
         (template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 8),
                template_var 3))),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 10),
                           template_var 1),
                         template_var 4)),
                     template_var 9)),
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app (template_hole 8, template_var 0)),
                   template_var 2))),
             template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 6),
                 template_var 5)))
           ))),
    ("Equivalence.StaticCastRedsFail",
     "[| ?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                            \<langle>ref (?a, ?Cs),?s'\<rangle>;
         ?C ~: set ?Cs; (last ?Cs, ?C) ~: (subcls1 ?P)^* |]
      ==> ?P,?E \<turnstile> \<langle>\<lparr>?C\<rparr>?e,
                              ?s\<rangle> \<rightarrow>*
                             \<langle>Throw
 (addr_of_sys_xcpt ClassCast, [ClassCast]),
                              ?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 21,
                template_app
                 (template_app
                   (template_hole 20,
                    template_app
                     (template_app (template_hole 19, template_var 7),
                      template_var 6)),
                  template_app
                   (template_app
                     (template_hole 19,
                      template_app
                       (template_hole 18,
                        template_app
                         (template_hole 17,
                          template_app
                           (template_app (template_hole 16, template_var 5),
                            template_var 4)))),
                    template_var 3))),
              template_app
               (template_hole 15,
                template_app
                 (template_app (template_hole 14, template_var 2),
                  template_var 1)))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 12, template_var 0),
                  template_app (template_hole 11, template_var 4))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app
                       (template_hole 9,
                        template_app (template_hole 8, template_var 4)),
                      template_var 0)),
                  template_app
                   (template_hole 7,
                    template_app (template_hole 6, template_var 2)))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 21,
               template_app
                (template_app
                  (template_hole 20,
                   template_app
                    (template_app
                      (template_hole 19,
                       template_app
                        (template_app (template_hole 5, template_var 0),
                         template_var 7)),
                     template_var 6)),
                 template_app
                  (template_app
                    (template_hole 19,
                     template_app
                      (template_hole 4,
                       template_app
                        (template_hole 18,
                         template_app
                          (template_hole 17,
                           template_app
                            (template_app
                              (template_hole 16,
                               template_app
                                (template_hole 3, template_hole 2)),
                             template_app
                              (template_app
                                (template_hole 1, template_hole 2),
                               template_hole 0)))))),
                   template_var 3))),
             template_app
              (template_hole 15,
               template_app
                (template_app (template_hole 14, template_var 2),
                 template_var 1)))
           ))),
    ("Equivalence.StaticUpDynCastReds",
     "[| ?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                            \<langle>ref (?a, ?Cs),?s'\<rangle>;
         ?P \<turnstile> Path last ?Cs to ?C unique;
         ?P \<turnstile> Path last ?Cs to ?C via ?Cs' ;
         ?Ds = ?Cs @\<^sub>p ?Cs' |]
      ==> ?P,?E \<turnstile> \<langle>Cast ?C ?e,?s\<rangle> \<rightarrow>*
                             \<langle>ref (?a, ?Ds),?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app
                   (template_hole 12,
                    template_app
                     (template_app (template_hole 11, template_var 9),
                      template_var 8)),
                  template_app
                   (template_app
                     (template_hole 11,
                      template_app
                       (template_hole 10,
                        template_app
                         (template_hole 9,
                          template_app
                           (template_app (template_hole 8, template_var 7),
                            template_var 6)))),
                    template_var 5))),
              template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 4),
                  template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_app (template_hole 4, template_var 6)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 4),
                  template_app (template_hole 4, template_var 6)),
                template_var 2),
              template_var 1)
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 1, template_var 6),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app
                      (template_hole 11,
                       template_app
                        (template_app (template_hole 0, template_var 2),
                         template_var 9)),
                     template_var 8)),
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app
                      (template_hole 10,
                       template_app
                        (template_hole 9,
                         template_app
                          (template_app (template_hole 8, template_var 7),
                           template_var 0)))),
                   template_var 5))),
             template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 4),
                 template_var 3)))
           ))),
    ("Equivalence.DynCastRedsRef",
     "[| ?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                            \<langle>ref (?a, ?Cs),?s'\<rangle>;
         hp ?s' ?a = \<lfloor>(?D, ?S)\<rfloor>;
         ?P \<turnstile> Path ?D to ?C via ?Cs' ;
         ?P \<turnstile> Path ?D to ?C unique |]
      ==> ?P,?E \<turnstile> \<langle>Cast ?C ?e,?s\<rangle> \<rightarrow>*
                             \<langle>ref (?a, ?Cs'),?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_app (template_hole 12, template_var 10),
                      template_var 9)),
                  template_app
                   (template_app
                     (template_hole 12,
                      template_app
                       (template_hole 11,
                        template_app
                         (template_hole 10,
                          template_app
                           (template_app (template_hole 9, template_var 8),
                            template_var 7)))),
                    template_var 6))),
              template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 5),
                  template_var 4)))
            ),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 6), template_var 8),
          template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 5),
                  template_var 3),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 5),
                template_var 3),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_app
                      (template_hole 12,
                       template_app
                        (template_app (template_hole 0, template_var 1),
                         template_var 10)),
                     template_var 9)),
                 template_app
                  (template_app
                    (template_hole 12,
                     template_app
                      (template_hole 11,
                       template_app
                        (template_hole 10,
                         template_app
                          (template_app (template_hole 9, template_var 8),
                           template_var 0)))),
                   template_var 6))),
             template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 5),
                 template_var 4)))
           ))),
    ("Equivalence.WhileTReds",
     "[| ?P,?E \<turnstile> \<langle>?b,?s\<^sub>0\<rangle> \<rightarrow>*
                            \<langle>true,?s\<^sub>1\<rangle>;
         ?P,?E \<turnstile> \<langle>?c,?s\<^sub>1\<rangle> \<rightarrow>*
                            \<langle>Val ?v\<^sub>1,?s\<^sub>2\<rangle>;
         ?P,?E \<turnstile> \<langle>while (?b) ?c,
                             ?s\<^sub>2\<rangle> \<rightarrow>*
                            \<langle>?e,?s\<^sub>3\<rangle> |]
      ==> ?P,?E \<turnstile> \<langle>while (?b) ?c,
                              ?s\<^sub>0\<rangle> \<rightarrow>*
                             \<langle>?e,?s\<^sub>3\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 9),
                      template_var 8)),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_hole 5,
                        template_app (template_hole 4, template_hole 3))),
                    template_var 7))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 6),
                  template_var 5)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 4),
                      template_var 7)),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app (template_hole 5, template_var 3)),
                    template_var 2))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 6),
                  template_var 5)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app
                       (template_hole 6,
                        template_app
                         (template_app (template_hole 0, template_var 9),
                          template_var 4)),
                      template_var 2)),
                  template_app
                   (template_app (template_hole 6, template_var 1),
                    template_var 0))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 6),
                  template_var 5)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 0, template_var 9),
                         template_var 4)),
                     template_var 8)),
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_var 0))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 6),
                 template_var 5)))
           ))),
    ("Equivalence.BlockRedsFinal",
     "[| ?P,?E(?V |->
         ?T) \<turnstile> \<langle>?e\<^sub>0,
                           ?s\<^sub>0\<rangle> \<rightarrow>*
                          \<langle>?e\<^sub>2,
                           (?h\<^sub>2, ?l\<^sub>2)\<rangle>;
         final ?e\<^sub>2; wf_prog ?wf_md ?P;
         ?s\<^sub>0 = (?h\<^sub>0, ?l\<^sub>0(?V := None)) |]
      ==> ?P,?E \<turnstile> \<langle>{?V:?T; ?e\<^sub>0},
                              (?h\<^sub>0,
                               ?l\<^sub>0)\<rangle> \<rightarrow>*
                             \<langle>?e\<^sub>2,
                              (?h\<^sub>2, ?l\<^sub>2
                               (?V := ?l\<^sub>0 ?V))\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app
                   (template_hole 12,
                    template_app
                     (template_app (template_hole 11, template_var 11),
                      template_var 10)),
                  template_app
                   (template_app (template_hole 11, template_var 9),
                    template_app
                     (template_app (template_hole 10, template_var 8),
                      template_var 7)))),
              template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 6),
                  template_app
                   (template_app
                     (template_app (template_hole 7, template_var 5),
                      template_var 4),
                    template_app (template_hole 6, template_var 3)))))
            ),
        template_predicate (template_app (template_hole 5, template_var 9)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 6)
            ),
        template_equation
         (template_var 10,
          template_app
           (template_app (template_hole 10, template_var 1),
            template_app
             (template_app
               (template_app (template_hole 2, template_var 0),
                template_var 4),
              template_hole 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app
                      (template_hole 11,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 4),
                           template_var 3),
                         template_var 11)),
                     template_app
                      (template_app (template_hole 10, template_var 1),
                       template_var 0))),
                 template_app
                  (template_app (template_hole 11, template_var 9),
                   template_app
                    (template_app (template_hole 10, template_var 8),
                     template_app
                      (template_app
                        (template_app (template_hole 2, template_var 7),
                         template_var 4),
                       template_app (template_var 0, template_var 4)))))),
             template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_var 6),
                 template_var 5)))
           ))),
    ("Equivalence.DynCastRedsFail",
     "[| ?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                            \<langle>ref (?a, ?Cs),?s'\<rangle>;
         hp ?s' ?a = \<lfloor>(?D, ?S)\<rfloor>;
         ~ ?P \<turnstile> Path ?D to ?C unique;
         ~ ?P \<turnstile> Path last ?Cs to ?C unique; ?C ~: set ?Cs |]
      ==> ?P,?E \<turnstile> \<langle>Cast ?C ?e,?s\<rangle> \<rightarrow>*
                             \<langle>null,?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app
                 (template_app
                   (template_hole 17,
                    template_app
                     (template_app (template_hole 16, template_var 9),
                      template_var 8)),
                  template_app
                   (template_app
                     (template_hole 16,
                      template_app
                       (template_hole 15,
                        template_app
                         (template_hole 14,
                          template_app
                           (template_app (template_hole 13, template_var 7),
                            template_var 6)))),
                    template_var 5))),
              template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 4),
                  template_var 3)))
            ),
        template_equation
         (template_app
           (template_app (template_hole 9, template_var 5), template_var 7),
          template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1))),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 5, template_var 4),
                    template_var 2),
                  template_var 0)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 5, template_var 4),
                    template_app (template_hole 4, template_var 6)),
                  template_var 0)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_app (template_hole 2, template_var 6))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 18,
               template_app
                (template_app
                  (template_hole 17,
                   template_app
                    (template_app
                      (template_hole 16,
                       template_app
                        (template_app (template_hole 1, template_var 0),
                         template_var 9)),
                     template_var 8)),
                 template_app
                  (template_app
                    (template_hole 16,
                     template_app (template_hole 15, template_hole 0)),
                   template_var 5))),
             template_app
              (template_hole 12,
               template_app
                (template_app (template_hole 11, template_var 4),
                 template_var 3)))
           ))),
    ("Equivalence.FAccRedsVal",
     "[| ?P,?E \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                            \<langle>ref (?a, ?Cs'),?s'\<rangle>;
         hp ?s' ?a = \<lfloor>(?D, ?S)\<rfloor>; ?Ds = ?Cs' @\<^sub>p ?Cs;
         (?Ds, ?fs) : ?S; ?fs ?F = \<lfloor>?v\<rfloor> |]
      ==> ?P,?E \<turnstile> \<langle>?e\<bullet>?F{?Cs},
                              ?s\<rangle> \<rightarrow>*
                             \<langle>Val ?v,?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app
                 (template_app
                   (template_hole 17,
                    template_app
                     (template_app (template_hole 16, template_var 13),
                      template_var 12)),
                  template_app
                   (template_app
                     (template_hole 16,
                      template_app
                       (template_hole 15,
                        template_app
                         (template_hole 14,
                          template_app
                           (template_app
                             (template_hole 13, template_var 11),
                            template_var 10)))),
                    template_var 9))),
              template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 8),
                  template_var 7)))
            ),
        template_equation
         (template_app
           (template_app (template_hole 9, template_var 9),
            template_var 11),
          template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 7, template_var 6),
              template_var 5))),
        template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 5, template_var 10),
            template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 2)),
              template_var 5)
            ),
        template_equation
         (template_app (template_var 2, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 18,
               template_app
                (template_app
                  (template_hole 17,
                   template_app
                    (template_app
                      (template_hole 16,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 13),
                           template_var 1),
                         template_var 3)),
                     template_var 12)),
                 template_app
                  (template_app
                    (template_hole 16,
                     template_app (template_hole 15, template_var 0)),
                   template_var 9))),
             template_app
              (template_hole 12,
               template_app
                (template_app (template_hole 11, template_var 8),
                 template_var 7)))
           ))),
    ("Equivalence.blocksEval",
     "[| length ?ps = length ?Ts; length ?ps = length ?vs;
         ?P,?E \<turnstile> \<langle>blocks (?ps, ?Ts, ?vs, ?e),
                             (?h, ?l)\<rangle> \<Rightarrow>
                            \<langle>?e',(?h', ?l')\<rangle> |]
      ==> EX l'' vs'.
             ?P,?E(?ps [|->]
             ?Ts) \<turnstile> \<langle>?e,
                                (?h, ?l(?ps [|->]
                                 vs'))\<rangle> \<Rightarrow>
                               \<langle>?e',(?h', l'')\<rangle> &
             ?P \<turnstile> ?Ts Casts ?vs to vs'  &
             length vs' = length ?vs",
     template_implication
      ([template_equation
         (template_app (template_hole 14, template_var 10),
          template_app (template_hole 13, template_var 9)),
        template_equation
         (template_app (template_hole 14, template_var 10),
          template_app (template_hole 12, template_var 8)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 11, template_var 7),
                      template_var 6),
                    template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 10),
                        template_app
                         (template_app (template_hole 8, template_var 9),
                          template_app
                           (template_app (template_hole 7, template_var 8),
                            template_var 5))))),
                  template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3)),
                template_var 2),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Equivalence.InitBlockRedsFinal",
     "[| ?P,?E(?V |->
         ?T) \<turnstile> \<langle>?e,
                           (?h, ?l(?V |-> ?v'))\<rangle> \<rightarrow>*
                          \<langle>?e',(?h', ?l')\<rangle>;
         final ?e'; ?P \<turnstile> ?T casts ?v to ?v' ;
         wf_prog ?wf_md ?P |]
      ==> ?P,?E \<turnstile> \<langle>{?V:?T; ?V:=Val ?v;; ?e},
                              (?h, ?l)\<rangle> \<rightarrow>*
                             \<langle>?e',(?h', ?l'(?V := ?l ?V))\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app
                   (template_hole 15,
                    template_app
                     (template_app (template_hole 14, template_var 12),
                      template_app
                       (template_app (template_hole 13, template_var 11),
                        template_app
                         (template_app
                           (template_app
                             (template_hole 12, template_var 10),
                            template_var 9),
                          template_app
                           (template_hole 11, template_var 8))))),
                  template_app
                   (template_app (template_hole 14, template_var 7),
                    template_app
                     (template_app (template_hole 13, template_var 6),
                      template_var 5)))),
              template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 4),
                  template_app
                   (template_app
                     (template_app (template_hole 8, template_var 3),
                      template_var 9),
                    template_app (template_hole 7, template_var 2)))))
            ),
        template_predicate (template_app (template_hole 6, template_var 7)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 4),
                  template_var 2),
                template_var 1),
              template_var 8)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 16,
               template_app
                (template_app
                  (template_hole 15,
                   template_app
                    (template_app
                      (template_hole 14,
                       template_app
                        (template_app
                          (template_app (template_hole 3, template_var 9),
                           template_var 2),
                         template_app
                          (template_app
                            (template_hole 2,
                             template_app
                              (template_app
                                (template_hole 1, template_var 9),
                               template_app
                                (template_hole 0, template_var 1))),
                           template_var 12))),
                     template_app
                      (template_app (template_hole 13, template_var 11),
                       template_var 10))),
                 template_app
                  (template_app (template_hole 14, template_var 7),
                   template_app
                    (template_app (template_hole 13, template_var 6),
                     template_app
                      (template_app
                        (template_app (template_hole 12, template_var 5),
                         template_var 9),
                       template_app (template_var 10, template_var 9)))))),
             template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 9, template_var 4),
                 template_var 3)))
           ))),
    ("Equivalence.CastblocksEval",
     "[| length ?ps = length ?Ts; length ?ps = length ?vs;
         ?P,?E \<turnstile> \<langle>\<lparr>?C'\<rparr>blocks
                   (?ps, ?Ts, ?vs, ?e),
                             (?h, ?l)\<rangle> \<Rightarrow>
                            \<langle>?e',(?h', ?l')\<rangle> |]
      ==> EX l'' vs'.
             ?P,?E(?ps [|->]
             ?Ts) \<turnstile> \<langle>\<lparr>?C'\<rparr>?e,
                                (?h, ?l(?ps [|->]
                                 vs'))\<rangle> \<Rightarrow>
                               \<langle>?e',(?h', l'')\<rangle> &
             ?P \<turnstile> ?Ts Casts ?vs to vs'  &
             length vs' = length ?vs",
     template_implication
      ([template_equation
         (template_app (template_hole 15, template_var 11),
          template_app (template_hole 14, template_var 10)),
        template_equation
         (template_app (template_hole 15, template_var 11),
          template_app (template_hole 13, template_var 9)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 12, template_var 8),
                      template_var 7),
                    template_app
                     (template_app (template_hole 11, template_var 6),
                      template_app
                       (template_hole 10,
                        template_app
                         (template_app (template_hole 9, template_var 11),
                          template_app
                           (template_app (template_hole 8, template_var 10),
                            template_app
                             (template_app
                               (template_hole 7, template_var 9),
                              template_var 5)))))),
                  template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3)),
                template_var 2),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Equivalence.InitBlockReds",
     "[| ?P,?E(?V |->
         ?T) \<turnstile> \<langle>?e,
                           (?h, ?l(?V |-> ?v'))\<rangle> \<rightarrow>*
                          \<langle>?e',(?h', ?l')\<rangle>;
         ?P \<turnstile> ?T casts ?v to ?v' ; wf_prog ?wf_md ?P |]
      ==> EX v'' w.
             ?P,?E \<turnstile> \<langle>{?V:?T; ?V:=Val ?v;; ?e},
                                 (?h, ?l)\<rangle> \<rightarrow>*
                                \<langle>{?V:?T; ?V:=Val v'';; ?e'},
                                 (?h', ?l'(?V := ?l ?V))\<rangle> &
             ?P \<turnstile> ?T casts v'' to w ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app
                   (template_hole 16,
                    template_app
                     (template_app (template_hole 15, template_var 12),
                      template_app
                       (template_app (template_hole 14, template_var 11),
                        template_app
                         (template_app
                           (template_app
                             (template_hole 13, template_var 10),
                            template_var 9),
                          template_app
                           (template_hole 12, template_var 8))))),
                  template_app
                   (template_app (template_hole 15, template_var 7),
                    template_app
                     (template_app (template_hole 14, template_var 6),
                      template_var 5)))),
              template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 4),
                  template_app
                   (template_app
                     (template_app (template_hole 9, template_var 3),
                      template_var 9),
                    template_app (template_hole 8, template_var 2)))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 4),
                  template_var 2),
                template_var 1),
              template_var 8)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_var 4)
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Equivalence.blocksRedsFinal",
     "[| wf_prog ?wf_md ?P; length ?Vs = length ?Ts;
         length ?vs = length ?Ts; distinct ?Vs;
         ?P \<turnstile> ?Ts Casts ?vs to ?vs' ;
         ?P,?E(?Vs [|->]
         ?Ts) \<turnstile> \<langle>?e,
                            (?h\<^sub>0, ?l\<^sub>0(?Vs [|->]
                             ?vs'))\<rangle> \<rightarrow>*
                           \<langle>?e',(?h\<^sub>1, ?l\<^sub>1)\<rangle>;
         final ?e';
         ?l\<^sub>2 = override_on ?l\<^sub>1 ?l\<^sub>0 (set ?Vs) |]
      ==> ?P,?E \<turnstile> \<langle>blocks (?Vs, ?Ts, ?vs, ?e),
                              (?h\<^sub>0,
                               ?l\<^sub>0)\<rangle> \<rightarrow>*
                             \<langle>?e',
                              (?h\<^sub>1, ?l\<^sub>2)\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 22, template_var 13),
              template_var 12)
            ),
        template_equation
         (template_app (template_hole 20, template_var 11),
          template_app (template_hole 19, template_var 10)),
        template_equation
         (template_app (template_hole 18, template_var 9),
          template_app (template_hole 19, template_var 10)),
        template_predicate
         (template_app (template_hole 17, template_var 11)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 16, template_var 12),
                  template_var 10),
                template_var 9),
              template_var 8)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_app (template_hole 13, template_var 7),
                      template_app
                       (template_app (template_hole 12, template_var 6),
                        template_app
                         (template_app
                           (template_app (template_hole 11, template_var 5),
                            template_var 11),
                          template_var 8)))),
                  template_app
                   (template_app (template_hole 13, template_var 4),
                    template_app
                     (template_app (template_hole 12, template_var 3),
                      template_var 2)))),
              template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 12),
                  template_app
                   (template_app
                     (template_app (template_hole 8, template_var 1),
                      template_var 11),
                    template_var 10))))
            ),
        template_predicate (template_app (template_hole 7, template_var 4)),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_app (template_hole 5, template_var 2),
              template_var 5),
            template_app (template_hole 4, template_var 11)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 15,
               template_app
                (template_app
                  (template_hole 14,
                   template_app
                    (template_app
                      (template_hole 13,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_app (template_hole 2, template_var 11),
                           template_app
                            (template_app
                              (template_hole 1, template_var 10),
                             template_app
                              (template_app
                                (template_hole 0, template_var 9),
                               template_var 7))))),
                     template_app
                      (template_app (template_hole 12, template_var 6),
                       template_var 5))),
                 template_app
                  (template_app (template_hole 13, template_var 4),
                   template_app
                    (template_app (template_hole 12, template_var 3),
                     template_var 0)))),
             template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 9, template_var 12),
                 template_var 1)))
           ))),
    ("Equivalence.InitBlockReds_aux",
     "[| wf_prog ?wf_md ?P;
         ?P,?E(?V |->
         ?T) \<turnstile> \<langle>?e,?s\<rangle> \<rightarrow>*
                          \<langle>?e',?s'\<rangle> |]
      ==> ALL h l h' l' v v'.
             ?s = (h, l(?V |-> v')) -->
             ?P \<turnstile> ?T casts v to v'  -->
             ?s' = (h', l') -->
             (EX v'' w.
                 ?P,?E \<turnstile> \<langle>{?V:?T; ?V:=Val v;; ?e},
                                     (h, l)\<rangle> \<rightarrow>*
                                    \<langle>{?V:?T; ?V:=Val v'';; ?e'},
                                     (h', l'(?V := l ?V))\<rangle> &
                 ?P \<turnstile> ?T casts v'' to w )",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 22, template_var 8),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 21,
                template_app
                 (template_app
                   (template_hole 20,
                    template_app
                     (template_app (template_hole 19, template_var 6),
                      template_var 5)),
                  template_app
                   (template_app (template_hole 19, template_var 4),
                    template_var 3))),
              template_app
               (template_hole 18,
                template_app
                 (template_app (template_hole 17, template_var 7),
                  template_app
                   (template_app
                     (template_app (template_hole 16, template_var 2),
                      template_var 1),
                    template_app (template_hole 15, template_var 0)))))
            )],
       template_predicate (template_app (template_hole 14, t_empty)))),
    ("Equivalence.blocksReds",
     "[| wf_prog ?wf_md ?P; length ?Vs = length ?Ts;
         length ?vs = length ?Ts; distinct ?Vs;
         ?P \<turnstile> ?Ts Casts ?vs to ?vs' ;
         ?P,?E(?Vs [|->]
         ?Ts) \<turnstile> \<langle>?e,
                            (?h\<^sub>0, ?l\<^sub>0(?Vs [|->]
                             ?vs'))\<rangle> \<rightarrow>*
                           \<langle>?e',(?h\<^sub>1, ?l\<^sub>1)\<rangle> |]
      ==> EX vs''.
             ?P,?E \<turnstile> \<langle>blocks (?Vs, ?Ts, ?vs, ?e),
                                 (?h\<^sub>0,
                                  ?l\<^sub>0)\<rangle> \<rightarrow>*
                                \<langle>blocks (?Vs, ?Ts, vs'', ?e'),
                                 (?h\<^sub>1,
                                  override_on ?l\<^sub>1 ?l\<^sub>0
                                   (set ?Vs))\<rangle> &
             (EX ws. ?P \<turnstile> ?Ts Casts vs'' to ws ) &
             length ?vs = length vs''",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 22, template_var 12),
              template_var 11)
            ),
        template_equation
         (template_app (template_hole 20, template_var 10),
          template_app (template_hole 19, template_var 9)),
        template_equation
         (template_app (template_hole 18, template_var 8),
          template_app (template_hole 19, template_var 9)),
        template_predicate
         (template_app (template_hole 17, template_var 10)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 16, template_var 11),
                  template_var 9),
                template_var 8),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_app (template_hole 13, template_var 6),
                      template_app
                       (template_app (template_hole 12, template_var 5),
                        template_app
                         (template_app
                           (template_app (template_hole 11, template_var 4),
                            template_var 10),
                          template_var 7)))),
                  template_app
                   (template_app (template_hole 13, template_var 3),
                    template_app
                     (template_app (template_hole 12, template_var 2),
                      template_var 1)))),
              template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 11),
                  template_app
                   (template_app
                     (template_app (template_hole 8, template_var 0),
                      template_var 10),
                    template_var 9))))
            )],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Equivalence.FAssRedsVal",
     "[| ?P,?E \<turnstile> \<langle>?e\<^sub>1,
                             ?s\<^sub>0\<rangle> \<rightarrow>*
                            \<langle>ref (?a, ?Cs'),?s\<^sub>1\<rangle>;
         ?P,?E \<turnstile> \<langle>?e\<^sub>2,
                             ?s\<^sub>1\<rangle> \<rightarrow>*
                            \<langle>Val ?v,
                             (?h\<^sub>2, ?l\<^sub>2)\<rangle>;
         ?h\<^sub>2 ?a = \<lfloor>(?D, ?S)\<rfloor>;
         ?P \<turnstile> last ?Cs' has least ?F:?T via ?Cs;
         ?P \<turnstile> ?T casts ?v to ?v' ; ?Ds = ?Cs' @\<^sub>p ?Cs;
         (?Ds, ?fs) : ?S |]
      ==> ?P,?E \<turnstile> \<langle>?e\<^sub>1\<bullet>?F{?Cs} := ?e\<^sub>2,
                              ?s\<^sub>0\<rangle> \<rightarrow>*
                             \<langle>Val ?v',
                              (?h\<^sub>2(?a |->
                               (?D,
                                insert (?Ds, ?fs(?F |-> ?v'))
                                 (?S - {(?Ds, ?fs)}))),
                               ?l\<^sub>2)\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 25,
                template_app
                 (template_app
                   (template_hole 24,
                    template_app
                     (template_app (template_hole 23, template_var 18),
                      template_var 17)),
                  template_app
                   (template_app
                     (template_hole 23,
                      template_app
                       (template_hole 22,
                        template_app
                         (template_hole 21,
                          template_app
                           (template_app
                             (template_hole 20, template_var 16),
                            template_var 15)))),
                    template_var 14))),
              template_app
               (template_hole 19,
                template_app
                 (template_app (template_hole 18, template_var 13),
                  template_var 12)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 25,
                template_app
                 (template_app
                   (template_hole 24,
                    template_app
                     (template_app (template_hole 23, template_var 11),
                      template_var 14)),
                  template_app
                   (template_app
                     (template_hole 23,
                      template_app (template_hole 22, template_var 10)),
                    template_app
                     (template_app (template_hole 17, template_var 9),
                      template_var 8)))),
              template_app
               (template_hole 19,
                template_app
                 (template_app (template_hole 18, template_var 13),
                  template_var 12)))
            ),
        template_equation
         (template_app (template_var 9, template_var 16),
          template_app
           (template_hole 15,
            template_app
             (template_app (template_hole 14, template_var 7),
              template_var 6))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 13, template_var 13),
                    template_app (template_hole 12, template_var 15)),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 11, template_var 13),
                  template_var 4),
                template_var 10),
              template_var 2)
            ),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 9, template_var 15),
            template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_var 0)),
              template_var 6)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 25,
               template_app
                (template_app
                  (template_hole 24,
                   template_app
                    (template_app
                      (template_hole 23,
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_hole 6, template_var 18),
                             template_var 5),
                           template_var 3),
                         template_var 11)),
                     template_var 17)),
                 template_app
                  (template_app
                    (template_hole 23,
                     template_app (template_hole 22, template_var 2)),
                   template_app
                    (template_app
                      (template_hole 17,
                       template_app
                        (template_app
                          (template_app (template_hole 5, template_var 9),
                           template_var 16),
                         template_app
                          (template_hole 15,
                           template_app
                            (template_app
                              (template_hole 14, template_var 7),
                             template_app
                              (template_app
                                (template_hole 4,
                                 template_app
                                  (template_app
                                    (template_hole 7, template_var 1),
                                   template_app
                                    (template_app
(template_app (template_hole 3, template_var 0), template_var 5),
                                     template_app
(template_hole 2, template_var 2)))),
                               template_app
                                (template_app
                                  (template_hole 1, template_var 6),
                                 template_app
                                  (template_app
                                    (template_hole 4,
                                     template_app
(template_app (template_hole 7, template_var 1), template_var 0)),
                                   template_hole 0))))))),
                     template_var 8)))),
             template_app
              (template_hole 19,
               template_app
                (template_app (template_hole 18, template_var 13),
                 template_var 12)))
           ))),
    ("Equivalence.StaticCallRedsFinal",
     "[| wwf_prog ?P;
         ?P,?E \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<rightarrow>*
                            \<langle>ref (?a, ?Cs),?s\<^sub>1\<rangle>;
         ?P,?E \<turnstile> \<langle>?es,
                             ?s\<^sub>1\<rangle> [\<rightarrow>]*
                            \<langle>map Val ?vs,
                             (?h\<^sub>2, ?l\<^sub>2)\<rangle>;
         ?P \<turnstile> Path last ?Cs to ?C unique;
         ?P \<turnstile> Path last ?Cs to ?C via ?Cs'' ;
         ?Ds = (?Cs @\<^sub>p ?Cs'') @\<^sub>p ?Cs';
         ?P \<turnstile> ?C has least ?M = (?Ts, ?T, ?pns, ?body) via ?Cs';
         length ?vs = length ?pns; ?P \<turnstile> ?Ts Casts ?vs to ?vs' ;
         ?l\<^sub>2' = [this |-> Ref (?a, ?Ds), ?pns [|->] ?vs'];
         ?P,?E(this |-> Class (last ?Ds), ?pns [|->]
         ?Ts) \<turnstile> \<langle>?body,
                            (?h\<^sub>2,
                             ?l\<^sub>2')\<rangle> \<rightarrow>*
                           \<langle>?ef,(?h\<^sub>3, ?l\<^sub>3)\<rangle>;
         final ?ef |]
      ==> ?P,?E \<turnstile> \<langle>Call ?e \<lfloor>?C\<rfloor> ?M ?es,
                              ?s\<^sub>0\<rangle> \<rightarrow>*
                             \<langle>?ef,
                              (?h\<^sub>3, ?l\<^sub>2)\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 42, template_hole 41),
              template_var 24)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 40,
                template_app
                 (template_app
                   (template_hole 39,
                    template_app
                     (template_app (template_hole 38, template_var 23),
                      template_var 22)),
                  template_app
                   (template_app
                     (template_hole 38,
                      template_app
                       (template_hole 37,
                        template_app
                         (template_hole 36,
                          template_app
                           (template_app
                             (template_hole 35, template_var 21),
                            template_var 20)))),
                    template_var 19))),
              template_app
               (template_hole 34,
                template_app
                 (template_app (template_hole 33, template_var 24),
                  template_var 18)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 32,
                template_app
                 (template_app
                   (template_hole 31,
                    template_app
                     (template_app (template_hole 30, template_var 17),
                      template_var 19)),
                  template_app
                   (template_app
                     (template_hole 30,
                      template_app
                       (template_app (template_hole 29, template_hole 37),
                        template_var 16)),
                    template_app
                     (template_app (template_hole 28, template_var 15),
                      template_var 14)))),
              template_app
               (template_hole 27,
                template_app
                 (template_app (template_hole 26, template_var 24),
                  template_var 18)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 25, template_var 24),
                template_app (template_hole 24, template_var 20)),
              template_var 13)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 23, template_var 24),
                  template_app (template_hole 24, template_var 20)),
                template_var 13),
              template_var 12)
            ),
        template_equation
         (template_var 11,
          template_app
           (template_app
             (template_hole 21,
              template_app
               (template_app (template_hole 21, template_var 20),
                template_var 12)),
            template_var 10)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 20, template_var 24),
                    template_var 13),
                  template_var 9),
                template_app
                 (template_app (template_hole 19, template_var 8),
                  template_app
                   (template_app (template_hole 18, template_var 7),
                    template_app
                     (template_app (template_hole 17, template_var 6),
                      template_var 5)))),
              template_var 10)
            ),
        template_equation
         (template_app (template_hole 15, template_var 16),
          template_app (template_hole 14, template_var 6)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 13, template_var 24),
                  template_var 8),
                template_var 16),
              template_var 4)
            ),
        template_equation
         (template_var 3,
          template_app
           (template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_app (template_hole 10, t_empty),
                    template_hole 8),
                  template_app
                   (template_hole 7,
                    template_app
                     (template_hole 36,
                      template_app
                       (template_app (template_hole 35, template_var 21),
                        template_var 11))))),
              template_var 6),
            template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 40,
                template_app
                 (template_app
                   (template_hole 39,
                    template_app
                     (template_app (template_hole 38, template_var 5),
                      template_app
                       (template_app (template_hole 28, template_var 15),
                        template_var 3))),
                  template_app
                   (template_app (template_hole 38, template_var 2),
                    template_app
                     (template_app (template_hole 28, template_var 1),
                      template_var 0)))),
              template_app
               (template_hole 34,
                template_app
                 (template_app (template_hole 33, template_var 24),
                  template_app
                   (template_app
                     (template_app
                       (template_hole 6,
                        template_app
                         (template_app
                           (template_app (template_hole 5, template_var 18),
                            template_hole 8),
                          template_app
                           (template_hole 4,
                            template_app
                             (template_hole 3,
                              template_app
                               (template_hole 24, template_var 11))))),
                      template_var 6),
                    template_var 8))))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 40,
               template_app
                (template_app
                  (template_hole 39,
                   template_app
                    (template_app
                      (template_hole 38,
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_hole 1, template_var 23),
                             template_app
                              (template_hole 0, template_var 13)),
                           template_var 9),
                         template_var 17)),
                     template_var 22)),
                 template_app
                  (template_app (template_hole 38, template_var 2),
                   template_app
                    (template_app (template_hole 28, template_var 1),
                     template_var 14)))),
             template_app
              (template_hole 34,
               template_app
                (template_app (template_hole 33, template_var 24),
                 template_var 18)))
           ))),
    ("Equivalence.CallRedsFinal",
     "[| wwf_prog ?P;
         ?P,?E \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<rightarrow>*
                            \<langle>ref (?a, ?Cs),?s\<^sub>1\<rangle>;
         ?P,?E \<turnstile> \<langle>?es,
                             ?s\<^sub>1\<rangle> [\<rightarrow>]*
                            \<langle>map Val ?vs,
                             (?h\<^sub>2, ?l\<^sub>2)\<rangle>;
         ?h\<^sub>2 ?a = \<lfloor>(?C, ?S)\<rfloor>;
         ?P \<turnstile> last
                          ?Cs has least ?M = (?Ts', ?T', ?pns',
        ?body') via ?Ds;
         ?P \<turnstile> (?C,?Cs @\<^sub>p
                             ?Ds) selects ?M = (?Ts, ?T, ?pns,
          ?body) via ?Cs';
         length ?vs = length ?pns; ?P \<turnstile> ?Ts Casts ?vs to ?vs' ;
         ?l\<^sub>2' = [this |-> Ref (?a, ?Cs'), ?pns [|->] ?vs'];
         ?new_body =
         (case ?T' of Class D => \<lparr>D\<rparr>?body | _ => ?body);
         ?P,?E(this |-> Class (last ?Cs'), ?pns [|->]
         ?Ts) \<turnstile> \<langle>?new_body,
                            (?h\<^sub>2,
                             ?l\<^sub>2')\<rangle> \<rightarrow>*
                           \<langle>?ef,(?h\<^sub>3, ?l\<^sub>3)\<rangle>;
         final ?ef |]
      ==> ?P,?E \<turnstile> \<langle>Call ?e None ?M ?es,
                              ?s\<^sub>0\<rangle> \<rightarrow>*
                             \<langle>?ef,
                              (?h\<^sub>3, ?l\<^sub>2)\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 46, template_hole 45),
              template_var 29)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 44,
                template_app
                 (template_app
                   (template_hole 43,
                    template_app
                     (template_app (template_hole 42, template_var 28),
                      template_var 27)),
                  template_app
                   (template_app
                     (template_hole 42,
                      template_app
                       (template_hole 41,
                        template_app
                         (template_hole 40,
                          template_app
                           (template_app
                             (template_hole 39, template_var 26),
                            template_var 25)))),
                    template_var 24))),
              template_app
               (template_hole 38,
                template_app
                 (template_app (template_hole 37, template_var 29),
                  template_var 23)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 36,
                template_app
                 (template_app
                   (template_hole 35,
                    template_app
                     (template_app (template_hole 34, template_var 22),
                      template_var 24)),
                  template_app
                   (template_app
                     (template_hole 34,
                      template_app
                       (template_app (template_hole 33, template_hole 41),
                        template_var 21)),
                    template_app
                     (template_app (template_hole 32, template_var 20),
                      template_var 19)))),
              template_app
               (template_hole 31,
                template_app
                 (template_app (template_hole 30, template_var 29),
                  template_var 23)))
            ),
        template_equation
         (template_app (template_var 20, template_var 26),
          template_app
           (template_hole 28,
            template_app
             (template_app (template_hole 27, template_var 18),
              template_var 17))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 26, template_var 29),
                    template_app (template_hole 25, template_var 25)),
                  template_var 16),
                template_app
                 (template_app (template_hole 24, template_var 15),
                  template_app
                   (template_app (template_hole 23, template_var 14),
                    template_app
                     (template_app (template_hole 22, template_var 13),
                      template_var 12)))),
              template_var 11)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 21, template_var 29),
                      template_var 18),
                    template_app
                     (template_app (template_hole 20, template_var 25),
                      template_var 11)),
                  template_var 16),
                template_app
                 (template_app (template_hole 24, template_var 10),
                  template_app
                   (template_app (template_hole 23, template_var 9),
                    template_app
                     (template_app (template_hole 22, template_var 8),
                      template_var 7)))),
              template_var 6)
            ),
        template_equation
         (template_app (template_hole 18, template_var 21),
          template_app (template_hole 17, template_var 8)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 16, template_var 29),
                  template_var 10),
                template_var 21),
              template_var 5)
            ),
        template_equation
         (template_var 4,
          template_app
           (template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_app (template_hole 13, t_empty),
                    template_hole 11),
                  template_app
                   (template_hole 10,
                    template_app
                     (template_hole 40,
                      template_app
                       (template_app (template_hole 39, template_var 26),
                        template_var 6))))),
              template_var 8),
            template_var 5)),
        template_equation
         (template_var 3,
          template_app
           (template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 8, template_var 7),
                    template_var 7),
                  template_var 7),
                template_var 7),
              t_empty),
            template_var 14)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 44,
                template_app
                 (template_app
                   (template_hole 43,
                    template_app
                     (template_app (template_hole 42, template_var 3),
                      template_app
                       (template_app (template_hole 32, template_var 20),
                        template_var 4))),
                  template_app
                   (template_app (template_hole 42, template_var 2),
                    template_app
                     (template_app (template_hole 32, template_var 1),
                      template_var 0)))),
              template_app
               (template_hole 38,
                template_app
                 (template_app (template_hole 37, template_var 29),
                  template_app
                   (template_app
                     (template_app
                       (template_hole 6,
                        template_app
                         (template_app
                           (template_app (template_hole 5, template_var 23),
                            template_hole 11),
                          template_app
                           (template_hole 4,
                            template_app
                             (template_hole 3,
                              template_app
                               (template_hole 25, template_var 6))))),
                      template_var 8),
                    template_var 10))))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 44,
               template_app
                (template_app
                  (template_hole 43,
                   template_app
                    (template_app
                      (template_hole 42,
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_hole 1, template_var 28),
                             template_hole 0),
                           template_var 16),
                         template_var 22)),
                     template_var 27)),
                 template_app
                  (template_app (template_hole 42, template_var 2),
                   template_app
                    (template_app (template_hole 32, template_var 1),
                     template_var 19)))),
             template_app
              (template_hole 38,
               template_app
                (template_app (template_hole 37, template_var 29),
                 template_var 23)))
           )))]:
   (string * thm * template) list
### theory "Draft.EquivalenceTemplates"
### 0.516s elapsed time, 0.662s cpu time, 0.107s GC time
val it = (): unit
