Loading theory "Draft.Auxiliary" (required by "Draft.SystemClassesTemplates" via "Draft.SystemClasses" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj" via "Draft.ClassRel" via "Draft.Decl" via "Draft.Expr" via "Draft.Value" via "Draft.Type")
Loading theory "Draft.Templates" (required by "Draft.SystemClassesTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.063s elapsed time, 0.154s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SystemClassesTemplates")
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### theory "Draft.Auxiliary"
### 0.272s elapsed time, 0.579s cpu time, 0.025s GC time
Loading theory "Draft.Type" (required by "Draft.SystemClassesTemplates" via "Draft.SystemClasses" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj" via "Draft.ClassRel" via "Draft.Decl" via "Draft.Expr" via "Draft.Value")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.543s elapsed time, 1.121s cpu time, 0.095s GC time
consts
  getbase :: "base => char list"
consts
  isRepBase :: "base => bool"
consts
  isShBase :: "base => bool"
### theory "Draft.Type"
### 0.638s elapsed time, 1.002s cpu time, 0.070s GC time
Loading theory "Draft.Value" (required by "Draft.SystemClassesTemplates" via "Draft.SystemClasses" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj" via "Draft.ClassRel" via "Draft.Decl" via "Draft.Expr")
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Ref"
consts
  the_Intg :: "val => int"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_addr :: "val => nat"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_path :: "val => char list list"
consts
  default_val :: "ty => val"
consts
  typeof :: "val => ty option"
### theory "Draft.Value"
### 0.401s elapsed time, 0.436s cpu time, 0.048s GC time
Loading theory "Draft.Expr" (required by "Draft.SystemClassesTemplates" via "Draft.SystemClasses" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj" via "Draft.ClassRel" via "Draft.Decl")
Found termination order: "{}"
### Ambiguous input (line 80 of "$AFP/CoreC++/Expr.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" fv)
###       ("_updbind" ("_position" V) ("_position" e)))
###     ("\<^const>Set.union" ("_Finset" ("_position" V))
###       ("_applC" ("_position" fv) ("_position" e)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.expr.LAss" ("_position" V) ("_position" e)))
###     ("\<^const>Set.union" ("_Finset" ("_position" V))
###       ("_applC" ("_position" fv) ("_position" e)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 82 of "$AFP/CoreC++/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" fv)
###       ("_updbind"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  fv :: "expr => char list set"
  fvs :: "expr list => char list set"
### theory "Draft.Expr"
### 2.243s elapsed time, 2.629s cpu time, 0.545s GC time
Loading theory "Draft.Decl" (required by "Draft.SystemClassesTemplates" via "Draft.SystemClasses" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj" via "Draft.ClassRel")
### theory "Draft.Decl"
### 0.101s elapsed time, 0.151s cpu time, 0.055s GC time
Loading theory "Draft.ClassRel" (required by "Draft.SystemClassesTemplates" via "Draft.SystemClasses" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj")
Proofs for inductive predicate(s) "subclsRp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "subclsSp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "subcls1p"
  Proving monotonicity ...
### theory "Draft.ClassRel"
### 0.172s elapsed time, 0.172s cpu time, 0.000s GC time
Loading theory "Draft.SubObj" (required by "Draft.SystemClassesTemplates" via "Draft.SystemClasses" via "Draft.Exceptions" via "Draft.Objects")
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Proofs for inductive predicate(s) "Subobjs\<^sub>R"
  Proving monotonicity ...
Proofs for inductive predicate(s) "Subobjs"
  Proving monotonicity ...
Proofs for inductive predicate(s) "casts_to"
  Proving monotonicity ...
Proofs for inductive predicate(s) "Casts_to"
  Proving monotonicity ...
Proofs for inductive predicate(s) "leq_path1p"
  Proving monotonicity ...
### Ambiguous input (line 720 of "$AFP/CoreC++/SubObj.thy") produces 3 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" MinimalMethodDefs)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" C) ("_position" M))))
###   ("_Coll" ("_pattern" ("_position" Cs) ("_position" mthd))
###     ("\<^const>HOL.conj"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" Cs) ("_tuple_arg" ("_position" mthd)))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M)))))
###       ("_Ball" ("_pattern" ("_position" Cs') ("_position" mthd'))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M))))
###         ("\<^const>HOL.eq"
###           ("\<^const>SubObj.leq_path" ("_position" P) ("_position" C)
###             ("_position" Cs')
###             ("\<^const>HOL.implies" ("_position" Cs) ("_position" Cs')))
###           ("_position" Cs))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" MinimalMethodDefs)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" C) ("_position" M))))
###   ("_Coll" ("_pattern" ("_position" Cs) ("_position" mthd))
###     ("\<^const>HOL.conj"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" Cs) ("_tuple_arg" ("_position" mthd)))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M)))))
###       ("_Ball" ("_pattern" ("_position" Cs') ("_position" mthd'))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M))))
###         ("\<^const>SubObj.leq_path" ("_position" P) ("_position" C)
###           ("_position" Cs')
###           ("\<^const>HOL.implies" ("_position" Cs)
###             ("\<^const>HOL.eq" ("_position" Cs') ("_position" Cs))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" MinimalMethodDefs)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" C) ("_position" M))))
###   ("_Coll" ("_pattern" ("_position" Cs) ("_position" mthd))
###     ("\<^const>HOL.conj"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" Cs) ("_tuple_arg" ("_position" mthd)))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M)))))
###       ("_Ball" ("_pattern" ("_position" Cs') ("_position" mthd'))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M))))
###         ("\<^const>HOL.implies"
###           ("\<^const>SubObj.leq_path" ("_position" P) ("_position" C)
###             ("_position" Cs') ("_position" Cs))
###           ("\<^const>HOL.eq" ("_position" Cs') ("_position" Cs)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 725 of "$AFP/CoreC++/SubObj.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" OverriderMethodDefs)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" R) ("_position" M))))
###   ("_Coll" ("_pattern" ("_position" Cs) ("_position" mthd))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" Cs') ("_position" mthd'))
###       ("\<^const>HOL.conj"
###         ("\<^const>SubObj.LeastMethodDef" ("_position" P)
###           ("_applC" ("_position" ldc) ("_position" R)) ("_position" M)
###           ("_position" mthd') ("_position" Cs'))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" Cs) ("_tuple_arg" ("_position" mthd)))
###             ("_applC" ("_position" MinimalMethodDefs)
###               ("_cargs" ("_position" P)
###                 ("_cargs" ("_applC" ("_position" mdc) ("_position" R))
###                   ("_position" M)))))
###           ("\<^const>SubObj.appendPath"
###             ("\<^const>SubObj.leq_path" ("_position" P)
###               ("_applC" ("_position" mdc) ("_position" R)) ("_position" Cs)
###               ("_applC" ("_position" snd) ("_position" R)))
###             ("_position" Cs')))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" OverriderMethodDefs)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" R) ("_position" M))))
###   ("_Coll" ("_pattern" ("_position" Cs) ("_position" mthd))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" Cs') ("_position" mthd'))
###       ("\<^const>HOL.conj"
###         ("\<^const>SubObj.LeastMethodDef" ("_position" P)
###           ("_applC" ("_position" ldc) ("_position" R)) ("_position" M)
###           ("_position" mthd') ("_position" Cs'))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" Cs) ("_tuple_arg" ("_position" mthd)))
###             ("_applC" ("_position" MinimalMethodDefs)
###               ("_cargs" ("_position" P)
###                 ("_cargs" ("_applC" ("_position" mdc) ("_position" R))
###                   ("_position" M)))))
###           ("\<^const>SubObj.leq_path" ("_position" P)
###             ("_applC" ("_position" mdc) ("_position" R)) ("_position" Cs)
###             ("\<^const>SubObj.appendPath"
###               ("_applC" ("_position" snd) ("_position" R))
###               ("_position" Cs'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "SelectMethodDef"
  Proving monotonicity ...
### theory "Draft.SubObj"
### 0.858s elapsed time, 0.925s cpu time, 0.088s GC time
Loading theory "Draft.Objects" (required by "Draft.SystemClassesTemplates" via "Draft.SystemClasses" via "Draft.Exceptions")
Proofs for inductive predicate(s) "init_obj"
  Proving monotonicity ...
### theory "Draft.Objects"
### 0.072s elapsed time, 0.074s cpu time, 0.000s GC time
Loading theory "Draft.Exceptions" (required by "Draft.SystemClassesTemplates" via "Draft.SystemClasses")
### theory "Draft.Exceptions"
### 0.102s elapsed time, 0.134s cpu time, 0.047s GC time
Loading theory "Draft.SystemClasses" (required by "Draft.SystemClassesTemplates")
### theory "Draft.SystemClasses"
### 0.042s elapsed time, 0.042s cpu time, 0.000s GC time
Loading theory "Draft.SystemClassesTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.SystemClassesTemplates"
### 0.346s elapsed time, 0.441s cpu time, 0.000s GC time
val it = (): unit
