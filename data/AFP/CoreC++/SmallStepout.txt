Loading theory "Draft.Auxiliary" (required by "Draft.SmallStepTemplates" via "Draft.SmallStep" via "Draft.Syntax" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj" via "Draft.ClassRel" via "Draft.Decl" via "Draft.Expr" via "Draft.Value" via "Draft.Type")
Loading theory "Draft.Templates" (required by "Draft.SmallStepTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.066s elapsed time, 0.164s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SmallStepTemplates")
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### theory "Draft.Auxiliary"
### 0.275s elapsed time, 0.598s cpu time, 0.029s GC time
Loading theory "Draft.Type" (required by "Draft.SmallStepTemplates" via "Draft.SmallStep" via "Draft.Syntax" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj" via "Draft.ClassRel" via "Draft.Decl" via "Draft.Expr" via "Draft.Value")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.541s elapsed time, 1.119s cpu time, 0.096s GC time
consts
  getbase :: "base => char list"
consts
  isRepBase :: "base => bool"
consts
  isShBase :: "base => bool"
### theory "Draft.Type"
### 0.640s elapsed time, 0.999s cpu time, 0.067s GC time
Loading theory "Draft.Value" (required by "Draft.SmallStepTemplates" via "Draft.SmallStep" via "Draft.Syntax" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj" via "Draft.ClassRel" via "Draft.Decl" via "Draft.Expr")
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Ref"
consts
  the_Intg :: "val => int"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_addr :: "val => nat"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_path :: "val => char list list"
consts
  default_val :: "ty => val"
consts
  typeof :: "val => ty option"
### theory "Draft.Value"
### 0.406s elapsed time, 0.445s cpu time, 0.052s GC time
Loading theory "Draft.Expr" (required by "Draft.SmallStepTemplates" via "Draft.SmallStep" via "Draft.Syntax" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj" via "Draft.ClassRel" via "Draft.Decl")
Found termination order: "{}"
### Ambiguous input (line 80 of "$AFP/CoreC++/Expr.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" fv)
###       ("_updbind" ("_position" V) ("_position" e)))
###     ("\<^const>Set.union" ("_Finset" ("_position" V))
###       ("_applC" ("_position" fv) ("_position" e)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.expr.LAss" ("_position" V) ("_position" e)))
###     ("\<^const>Set.union" ("_Finset" ("_position" V))
###       ("_applC" ("_position" fv) ("_position" e)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 82 of "$AFP/CoreC++/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" fv)
###       ("_updbind"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.expr.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  fv :: "expr => char list set"
  fvs :: "expr list => char list set"
### theory "Draft.Expr"
### 2.276s elapsed time, 2.721s cpu time, 0.614s GC time
Loading theory "Draft.Decl" (required by "Draft.SmallStepTemplates" via "Draft.SmallStep" via "Draft.Syntax" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj" via "Draft.ClassRel")
### theory "Draft.Decl"
### 0.101s elapsed time, 0.150s cpu time, 0.055s GC time
Loading theory "Draft.ClassRel" (required by "Draft.SmallStepTemplates" via "Draft.SmallStep" via "Draft.Syntax" via "Draft.Exceptions" via "Draft.Objects" via "Draft.SubObj")
Proofs for inductive predicate(s) "subclsRp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "subclsSp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "subcls1p"
  Proving monotonicity ...
### theory "Draft.ClassRel"
### 0.171s elapsed time, 0.171s cpu time, 0.000s GC time
Loading theory "Draft.SubObj" (required by "Draft.SmallStepTemplates" via "Draft.SmallStep" via "Draft.Syntax" via "Draft.Exceptions" via "Draft.Objects")
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Proofs for inductive predicate(s) "Subobjs\<^sub>R"
  Proving monotonicity ...
Proofs for inductive predicate(s) "Subobjs"
  Proving monotonicity ...
Proofs for inductive predicate(s) "casts_to"
  Proving monotonicity ...
Proofs for inductive predicate(s) "Casts_to"
  Proving monotonicity ...
Proofs for inductive predicate(s) "leq_path1p"
  Proving monotonicity ...
### Ambiguous input (line 720 of "$AFP/CoreC++/SubObj.thy") produces 3 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" MinimalMethodDefs)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" C) ("_position" M))))
###   ("_Coll" ("_pattern" ("_position" Cs) ("_position" mthd))
###     ("\<^const>HOL.conj"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" Cs) ("_tuple_arg" ("_position" mthd)))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M)))))
###       ("_Ball" ("_pattern" ("_position" Cs') ("_position" mthd'))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M))))
###         ("\<^const>HOL.eq"
###           ("\<^const>SubObj.leq_path" ("_position" P) ("_position" C)
###             ("_position" Cs')
###             ("\<^const>HOL.implies" ("_position" Cs) ("_position" Cs')))
###           ("_position" Cs))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" MinimalMethodDefs)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" C) ("_position" M))))
###   ("_Coll" ("_pattern" ("_position" Cs) ("_position" mthd))
###     ("\<^const>HOL.conj"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" Cs) ("_tuple_arg" ("_position" mthd)))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M)))))
###       ("_Ball" ("_pattern" ("_position" Cs') ("_position" mthd'))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M))))
###         ("\<^const>SubObj.leq_path" ("_position" P) ("_position" C)
###           ("_position" Cs')
###           ("\<^const>HOL.implies" ("_position" Cs)
###             ("\<^const>HOL.eq" ("_position" Cs') ("_position" Cs))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" MinimalMethodDefs)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" C) ("_position" M))))
###   ("_Coll" ("_pattern" ("_position" Cs) ("_position" mthd))
###     ("\<^const>HOL.conj"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" Cs) ("_tuple_arg" ("_position" mthd)))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M)))))
###       ("_Ball" ("_pattern" ("_position" Cs') ("_position" mthd'))
###         ("_applC" ("_position" MethodDefs)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C) ("_position" M))))
###         ("\<^const>HOL.implies"
###           ("\<^const>SubObj.leq_path" ("_position" P) ("_position" C)
###             ("_position" Cs') ("_position" Cs))
###           ("\<^const>HOL.eq" ("_position" Cs') ("_position" Cs)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 725 of "$AFP/CoreC++/SubObj.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" OverriderMethodDefs)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" R) ("_position" M))))
###   ("_Coll" ("_pattern" ("_position" Cs) ("_position" mthd))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" Cs') ("_position" mthd'))
###       ("\<^const>HOL.conj"
###         ("\<^const>SubObj.LeastMethodDef" ("_position" P)
###           ("_applC" ("_position" ldc) ("_position" R)) ("_position" M)
###           ("_position" mthd') ("_position" Cs'))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" Cs) ("_tuple_arg" ("_position" mthd)))
###             ("_applC" ("_position" MinimalMethodDefs)
###               ("_cargs" ("_position" P)
###                 ("_cargs" ("_applC" ("_position" mdc) ("_position" R))
###                   ("_position" M)))))
###           ("\<^const>SubObj.appendPath"
###             ("\<^const>SubObj.leq_path" ("_position" P)
###               ("_applC" ("_position" mdc) ("_position" R)) ("_position" Cs)
###               ("_applC" ("_position" snd) ("_position" R)))
###             ("_position" Cs')))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" OverriderMethodDefs)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" R) ("_position" M))))
###   ("_Coll" ("_pattern" ("_position" Cs) ("_position" mthd))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" Cs') ("_position" mthd'))
###       ("\<^const>HOL.conj"
###         ("\<^const>SubObj.LeastMethodDef" ("_position" P)
###           ("_applC" ("_position" ldc) ("_position" R)) ("_position" M)
###           ("_position" mthd') ("_position" Cs'))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" Cs) ("_tuple_arg" ("_position" mthd)))
###             ("_applC" ("_position" MinimalMethodDefs)
###               ("_cargs" ("_position" P)
###                 ("_cargs" ("_applC" ("_position" mdc) ("_position" R))
###                   ("_position" M)))))
###           ("\<^const>SubObj.leq_path" ("_position" P)
###             ("_applC" ("_position" mdc) ("_position" R)) ("_position" Cs)
###             ("\<^const>SubObj.appendPath"
###               ("_applC" ("_position" snd) ("_position" R))
###               ("_position" Cs'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "SelectMethodDef"
  Proving monotonicity ...
### theory "Draft.SubObj"
### 0.862s elapsed time, 0.929s cpu time, 0.088s GC time
Loading theory "Draft.Objects" (required by "Draft.SmallStepTemplates" via "Draft.SmallStep" via "Draft.Syntax" via "Draft.Exceptions")
Proofs for inductive predicate(s) "init_obj"
  Proving monotonicity ...
### theory "Draft.Objects"
### 0.071s elapsed time, 0.073s cpu time, 0.000s GC time
Loading theory "Draft.Exceptions" (required by "Draft.SmallStepTemplates" via "Draft.SmallStep" via "Draft.Syntax")
### theory "Draft.Exceptions"
### 0.103s elapsed time, 0.136s cpu time, 0.049s GC time
Loading theory "Draft.State" (required by "Draft.SmallStepTemplates" via "Draft.SmallStep")
Loading theory "Draft.Syntax" (required by "Draft.SmallStepTemplates" via "Draft.SmallStep")
### theory "Draft.Syntax"
### 0.044s elapsed time, 0.088s cpu time, 0.000s GC time
### theory "Draft.State"
### 0.046s elapsed time, 0.090s cpu time, 0.000s GC time
Loading theory "Draft.SmallStep" (required by "Draft.SmallStepTemplates")
### Ambiguous input (line 17 of "$AFP/CoreC++/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" blocks)
###       ("_tuple" ("\<^const>List.list.Cons" ("_position" V) ("_position" Vs))
###         ("_tuple_args"
###           ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts))
###           ("_tuple_args"
###             ("\<^const>List.list.Cons" ("_position" v) ("_position" vs))
###             ("_tuple_arg" ("_position" e))))))
###     ("\<^const>Expr.expr.Block" ("_position" V)
###       ("\<^const>Expr.expr.LAss" ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_applC" ("_position" blocks)
###         ("_tuple" ("_position" Vs)
###           ("_tuple_args" ("_position" Ts)
###             ("_tuple_args" ("_position" vs)
###               ("_tuple_arg" ("_position" e)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" blocks)
###       ("_tuple" ("\<^const>List.list.Cons" ("_position" V) ("_position" Vs))
###         ("_tuple_args"
###           ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts))
###           ("_tuple_args"
###             ("\<^const>List.list.Cons" ("_position" v) ("_position" vs))
###             ("_tuple_arg" ("_position" e))))))
###     ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###       ("_applC" ("_position" Val) ("_position" v))
###       ("_applC" ("_position" blocks)
###         ("_tuple" ("_position" Vs)
###           ("_tuple_args" ("_position" Ts)
###             ("_tuple_args" ("_position" vs)
###               ("_tuple_arg" ("_position" e)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Missing patterns in function definition:
### !!vc vd vb. blocks ([], vc # vd, vb) = undefined
### !!v ve vf vd. blocks ([], v, ve # vf, vd) = undefined
### !!va vb vc. blocks (va # vb, [], vc) = undefined
### (3 more)
Found termination order:
  "(%p. size_list size (fst (snd (snd p)))) <*mlex*> {}"
### Ambiguous input (line 248 of "$AFP/CoreC++/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.LAss"
###       ("\<^const>Expr.expr.FAcc"
###         ("_applC" ("_position" Throw) ("_position" r)) ("_position" F)
###         ("_position" Cs))
###       ("_position" e\<^sub>2))
###     ("_position" s) ("_applC" ("_position" Throw) ("_position" r))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.FAss"
###       ("_applC" ("_position" Throw) ("_position" r)) ("_position" F)
###       ("_position" Cs) ("_position" e\<^sub>2))
###     ("_position" s) ("_applC" ("_position" Throw) ("_position" r))
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 144 of "$AFP/CoreC++/SmallStep.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e') ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss" ("_position" e) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e') ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc" ("_position" e) ("_position" F)
###           ("_position" Cs))
###         ("_position" e\<^sub>2))
###       ("_position" s)
###       ("\<^const>Expr.expr.FAss" ("_position" e') ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss" ("_position" e) ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s)
###       ("\<^const>Expr.expr.FAss" ("_position" e') ("_position" F)
###         ("_position" Cs) ("_position" e\<^sub>2))
###       ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 249 of "$AFP/CoreC++/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.LAss"
###       ("\<^const>Expr.expr.FAcc"
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###         ("_position" Cs))
###       ("_applC" ("_position" Throw) ("_position" r)))
###     ("_position" s) ("_applC" ("_position" Throw) ("_position" r))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.FAss" ("_applC" ("_position" Val) ("_position" v))
###       ("_position" F) ("_position" Cs)
###       ("_applC" ("_position" Throw) ("_position" r)))
###     ("_position" s) ("_applC" ("_position" Throw) ("_position" r))
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 148 of "$AFP/CoreC++/SmallStep.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" Cs))
###         ("_position" e))
###       ("_position" s)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" Cs))
###         ("_position" e'))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss"
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###         ("_position" Cs) ("_position" e))
###       ("_position" s)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" Cs))
###         ("_position" e'))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" Cs))
###         ("_position" e))
###       ("_position" s)
###       ("\<^const>Expr.expr.FAss"
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###         ("_position" Cs) ("_position" e'))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E) ("_position" e)
###       ("_position" s) ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss"
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###         ("_position" Cs) ("_position" e))
###       ("_position" s)
###       ("\<^const>Expr.expr.FAss"
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###         ("_position" Cs) ("_position" e'))
###       ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 254 of "$AFP/CoreC++/SmallStep.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###       ("_position" v) ("_position" v')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v))
###         ("_applC" ("_position" Throw) ("_position" r)))
###       ("_position" s) ("_applC" ("_position" Throw) ("_position" r))
###       ("_position" s))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###       ("_position" v) ("_position" v')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V)
###         ("\<^const>Expr.expr.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_applC" ("_position" Throw) ("_position" r)))
###       ("_position" s) ("_applC" ("_position" Throw) ("_position" r))
###       ("_position" s))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 186 of "$AFP/CoreC++/SmallStep.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.expr.LAss" ("_position" V)
###                 ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_position" None)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.expr.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_position" None)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.expr.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.expr.LAss" ("_position" V)
###                 ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_position" None)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_position" None)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 152 of "$AFP/CoreC++/SmallStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" D) ("_tuple_arg" ("_position" S))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SubObj.LeastFieldDecl" ("_position" P)
###           ("_applC" ("_position" last) ("_position" Cs')) ("_position" F)
###           ("_position" T) ("_position" Cs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###             ("_position" v) ("_position" v')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" Ds)
###               ("\<^const>SubObj.appendPath" ("_position" Cs')
###                 ("_position" Cs))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" Ds) ("_tuple_arg" ("_position" fs)))
###                 ("_position" S))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.LAss"
###         ("\<^const>Expr.expr.FAcc"
###           ("_applC" ("_position" ref)
###             ("_tuple" ("_position" a) ("_tuple_arg" ("_position" Cs'))))
###           ("_position" F) ("_position" Cs))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("_applC" ("_position" Val) ("_position" v'))
###       ("_tuple"
###         ("_MapUpd" ("_position" h)
###           ("_maplet" ("_position" a)
###             ("_tuple" ("_position" D)
###               ("_tuple_arg"
###                 ("_applC" ("_position" insert)
###                   ("_cargs"
###                     ("_tuple" ("_position" Ds)
###                       ("_tuple_arg"
###                         ("_MapUpd" ("_position" fs)
###                           ("_maplet" ("_position" F) ("_position" v')))))
###                     ("\<^const>Groups.minus_class.minus" ("_position" S)
###                       ("_Finset"
###                         ("_tuple" ("_position" Ds)
###                           ("_tuple_arg" ("_position" fs)))))))))))
###         ("_tuple_arg" ("_position" l))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" D) ("_tuple_arg" ("_position" S))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SubObj.LeastFieldDecl" ("_position" P)
###           ("_applC" ("_position" last) ("_position" Cs')) ("_position" F)
###           ("_position" T) ("_position" Cs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###             ("_position" v) ("_position" v')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" Ds)
###               ("\<^const>SubObj.appendPath" ("_position" Cs')
###                 ("_position" Cs))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" Ds) ("_tuple_arg" ("_position" fs)))
###                 ("_position" S))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.FAss"
###         ("_applC" ("_position" ref)
###           ("_tuple" ("_position" a) ("_tuple_arg" ("_position" Cs'))))
###         ("_position" F) ("_position" Cs)
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("_applC" ("_position" Val) ("_position" v'))
###       ("_tuple"
###         ("_MapUpd" ("_position" h)
###           ("_maplet" ("_position" a)
###             ("_tuple" ("_position" D)
###               ("_tuple_arg"
###                 ("_applC" ("_position" insert)
###                   ("_cargs"
###                     ("_tuple" ("_position" Ds)
###                       ("_tuple_arg"
###                         ("_MapUpd" ("_position" fs)
###                           ("_maplet" ("_position" F) ("_position" v')))))
###                     ("\<^const>Groups.minus_class.minus" ("_position" S)
###                       ("_Finset"
###                         ("_tuple" ("_position" Ds)
###                           ("_tuple_arg" ("_position" fs)))))))))))
###         ("_tuple_arg" ("_position" l))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 157 of "$AFP/CoreC++/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.LAss"
###       ("\<^const>Expr.expr.FAcc" ("_position" null) ("_position" F)
###         ("_position" Cs))
###       ("_applC" ("_position" Val) ("_position" v)))
###     ("_position" s) ("_applC" ("_position" THROW) ("_position" NullPointer))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P) ("_position" E)
###     ("\<^const>Expr.expr.FAss" ("_position" null) ("_position" F)
###       ("_position" Cs) ("_applC" ("_position" Val) ("_position" v)))
###     ("_position" s) ("_applC" ("_position" THROW) ("_position" NullPointer))
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 190 of "$AFP/CoreC++/SmallStep.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.expr.LAss" ("_position" V)
###                 ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.expr.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.expr.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.expr.LAss" ("_position" V)
###                 ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.expr.Block" ("_position" V)
###         ("\<^const>Expr.expr.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.expr.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.expr.Block" ("_position" V)
###         ("\<^const>Expr.expr.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.expr.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.expr.LAss" ("_position" V)
###                 ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.expr.LAss" ("_position" V)
###                 ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.expr.Block" ("_position" V)
###         ("\<^const>Expr.expr.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.expr.Block" ("_position" V)
###         ("\<^const>Expr.expr.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 195 of "$AFP/CoreC++/SmallStep.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v')))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v''))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###             ("_position" v) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v'')) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.expr.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v')))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v''))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###             ("_position" v) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V)
###         ("\<^const>Expr.expr.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v'')) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.expr.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v')))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v''))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###             ("_position" v) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.expr.Block" ("_position" V)
###         ("\<^const>Expr.expr.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v'')))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.expr.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v')))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v''))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###             ("_position" v) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V)
###         ("\<^const>Expr.expr.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.expr.Block" ("_position" V)
###         ("\<^const>Expr.expr.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v'')))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.expr.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v')))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v''))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###             ("_position" v) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v'')) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v')))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v''))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###             ("_position" v) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V)
###         ("\<^const>Expr.expr.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v'')) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v')))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v''))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###             ("_position" v) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.expr.Block" ("_position" V)
###         ("\<^const>Expr.expr.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v'')))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v')))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v''))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###             ("_position" v) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V)
###         ("\<^const>Expr.expr.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.expr.Block" ("_position" V)
###         ("\<^const>Expr.expr.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v'')))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 203 of "$AFP/CoreC++/SmallStep.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###       ("_position" v) ("_position" v')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Syntax.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v))
###         ("_applC" ("_position" Val) ("_position" u)))
###       ("_position" s) ("_applC" ("_position" Val) ("_position" u))
###       ("_position" s))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SubObj.casts_to" ("_position" P) ("_position" T)
###       ("_position" v) ("_position" v')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" E)
###       ("\<^const>Expr.expr.Block" ("_position" V)
###         ("\<^const>Expr.expr.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_applC" ("_position" Val) ("_position" u)))
###       ("_position" s) ("_applC" ("_position" Val) ("_position" u))
###       ("_position" s))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "redp", "redsp"
  Proving monotonicity ...
### Ignoring duplicate safe introduction (intro!)
### EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==>
### ?x # ?xs = map ?f ?ys
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe introduction (intro!)
### EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==>
### ?x # ?xs = map ?f ?ys
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate rewrite rule:
### ?x1 # ?xs1 = map ?f1 ?ys1 ==
### EX z zs. ?ys1 = z # zs & ?x1 = ?f1 z & ?xs1 = map ?f1 zs
### theory "Draft.SmallStep"
### 3.543s elapsed time, 4.232s cpu time, 0.831s GC time
Loading theory "Draft.SmallStepTemplates"
val templateLemmas =
   [("SmallStep.blocks_Nil", "blocks ([], [], [], ?e) = ?e",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_hole 4),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0)))),
       template_var 0)),
    ("SmallStep.reds_length",
     "?P,?E \<turnstile> \<langle>?es,?s\<rangle> [\<rightarrow>]
                         \<langle>?es',?s'\<rangle> ==>
      length ?es = length ?es'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 5),
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app
                       (template_app (template_hole 3, template_var 4),
                        template_var 3)),
                    template_app
                     (template_app (template_hole 3, template_var 2),
                      template_var 1)))),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app (template_hole 0, template_var 4),
         template_app (template_hole 0, template_var 2)))),
    ("SmallStep.steps_length",
     "?P,?E \<turnstile> \<langle>?es,?s\<rangle> [\<rightarrow>]*
                         \<langle>?es',?s'\<rangle> ==>
      length ?es = length ?es'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 5),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 2))),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)))
            )],
       template_equation
        (template_app (template_hole 0, template_var 5),
         template_app (template_hole 0, template_var 3)))),
    ("SmallStep.redp_red_eq", "redp ?P = red' ?P",
     template_equation
      (template_app (template_hole 5, template_var 0), t_empty)),
    ("SmallStep.redsp_reds_eq", "redsp ?P = reds' ?P",
     template_equation
      (template_app (template_hole 5, template_var 0), t_empty)),
    ("SmallStep.red_lcl_incr",
     "?P,?E \<turnstile> \<langle>?e,
                          (?h\<^sub>0, ?l\<^sub>0)\<rangle> \<rightarrow>
                         \<langle>?e',(?h\<^sub>1, ?l\<^sub>1)\<rangle> ==>
      dom ?l\<^sub>0 <= dom ?l\<^sub>1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 7),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_app (template_hole 4, template_var 6),
                        template_app
                         (template_app (template_hole 3, template_var 5),
                          template_var 4))),
                    template_app
                     (template_app (template_hole 4, template_var 3),
                      template_app
                       (template_app (template_hole 3, template_var 2),
                        template_var 1))))),
              template_app (template_hole 2, template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 4),
         template_app (template_hole 0, template_var 1)))),
    ("SmallStep.blocks_Cons",
     "blocks (?V # ?Vs, ?T # ?Ts, ?v # ?vs, ?e) = {?V:?T; ?V:=Val ?v;;
      blocks (?Vs, ?Ts, ?vs, ?e)}",
     template_equation
      (template_app
        (template_hole 10,
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_var 6),
               template_var 5)),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 4),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 1)),
               template_var 0)))),
       template_app
        (template_app
          (template_app (template_hole 3, template_var 6), template_var 4),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 6),
               template_app (template_hole 0, template_var 2))),
           template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_var 5),
               template_app
                (template_app (template_hole 7, template_var 3),
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_var 0)))))))),
    ("SmallStep.red_preserves_obj",
     "[| ?P,?E \<turnstile> \<langle>?e,(?h, ?l)\<rangle> \<rightarrow>
                            \<langle>?e',(?h', ?l')\<rangle>;
         ?h ?a = \<lfloor>(?D, ?S)\<rfloor> |]
      ==> EX S'. ?h' ?a = \<lfloor>(?D, S')\<rfloor>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 10),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app (template_hole 6, template_var 9),
                        template_app
                         (template_app (template_hole 5, template_var 8),
                          template_var 7))),
                    template_app
                     (template_app (template_hole 6, template_var 6),
                      template_app
                       (template_app (template_hole 5, template_var 5),
                        template_var 4))))),
              template_app (template_hole 4, template_var 3))
            ),
        template_equation
         (template_app (template_var 8, template_var 2),
          template_app
           (template_hole 2,
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("SmallStep.reds_preserves_obj",
     "[| ?P,?E \<turnstile> \<langle>?es,(?h, ?l)\<rangle> [\<rightarrow>]
                            \<langle>?es',(?h', ?l')\<rangle>;
         ?h ?a = \<lfloor>(?D, ?S)\<rfloor> |]
      ==> EX S'. ?h' ?a = \<lfloor>(?D, S')\<rfloor>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 10),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app (template_hole 6, template_var 9),
                        template_app
                         (template_app (template_hole 5, template_var 8),
                          template_var 7))),
                    template_app
                     (template_app (template_hole 6, template_var 6),
                      template_app
                       (template_app (template_hole 5, template_var 5),
                        template_var 4))))),
              template_app (template_hole 4, template_var 3))
            ),
        template_equation
         (template_app (template_var 8, template_var 2),
          template_app
           (template_hole 2,
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("SmallStep.red_lcl_add",
     "?P,?E \<turnstile> \<langle>?e,(?h, ?l)\<rangle> \<rightarrow>
                         \<langle>?e',(?h', ?l')\<rangle> ==>
      ?P,?E \<turnstile> \<langle>?e,
                          (?h, ?l\<^sub>0 ++ ?l)\<rangle> \<rightarrow>
                         \<langle>?e',(?h', ?l\<^sub>0 ++ ?l')\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 8),
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app
                       (template_app (template_hole 3, template_var 7),
                        template_app
                         (template_app (template_hole 2, template_var 6),
                          template_var 5))),
                    template_app
                     (template_app (template_hole 3, template_var 4),
                      template_app
                       (template_app (template_hole 2, template_var 3),
                        template_var 2))))),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 8),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 7),
                       template_app
                        (template_app (template_hole 2, template_var 6),
                         template_app
                          (template_app (template_hole 0, template_var 0),
                           template_var 5)))),
                   template_app
                    (template_app (template_hole 3, template_var 4),
                     template_app
                      (template_app (template_hole 2, template_var 3),
                       template_app
                        (template_app (template_hole 0, template_var 0),
                         template_var 2)))))),
             template_app (template_hole 1, template_var 1))
           ))),
    ("SmallStep.Red_lcl_add",
     "?P,?E \<turnstile> \<langle>?e,(?h, ?l)\<rangle> \<rightarrow>*
                         \<langle>?e',(?h', ?l')\<rangle> ==>
      ?P,?E \<turnstile> \<langle>?e,
                          (?h, ?l\<^sub>0 ++ ?l)\<rangle> \<rightarrow>*
                         \<langle>?e',(?h', ?l\<^sub>0 ++ ?l')\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 8),
                      template_app
                       (template_app (template_hole 3, template_var 7),
                        template_var 6))),
                  template_app
                   (template_app (template_hole 4, template_var 5),
                    template_app
                     (template_app (template_hole 3, template_var 4),
                      template_var 3)))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 8),
                     template_app
                      (template_app (template_hole 3, template_var 7),
                       template_app
                        (template_app (template_hole 0, template_var 0),
                         template_var 6)))),
                 template_app
                  (template_app (template_hole 4, template_var 5),
                   template_app
                    (template_app (template_hole 3, template_var 4),
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 3))))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)))
           ))),
    ("SmallStep.converse_rtrancl_induct_red",
     "[| ?P,?E \<turnstile> \<langle>?e,(?h, ?l)\<rangle> \<rightarrow>*
                            \<langle>?e',(?h', ?l')\<rangle>;
         !!e h l. ?R e h l e h l;
         !!e\<^sub>0 h\<^sub>0 l\<^sub>0 e\<^sub>1 h\<^sub>1 l\<^sub>1 e' h'
            l'.
            [| ?P,?E \<turnstile> \<langle>e\<^sub>0,
                                   (h\<^sub>0,
                                    l\<^sub>0)\<rangle> \<rightarrow>
                                  \<langle>e\<^sub>1,
                                   (h\<^sub>1, l\<^sub>1)\<rangle>;
               ?R e\<^sub>1 h\<^sub>1 l\<^sub>1 e' h' l' |]
            ==> ?R e\<^sub>0 h\<^sub>0 l\<^sub>0 e' h' l' |]
      ==> ?R ?e ?h ?l ?e' ?h' ?l'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 8),
                      template_app
                       (template_app (template_hole 8, template_var 7),
                        template_var 6))),
                  template_app
                   (template_app (template_hole 9, template_var 5),
                    template_app
                     (template_app (template_hole 8, template_var 4),
                      template_var 3)))),
              template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)))
            ),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_var 0, template_var 8),
                     template_var 7),
                   template_var 6),
                 template_var 5),
               template_var 4),
             template_var 3)
           ))),
    ("SmallStep.blocks_old_induct",
     "[| !!aj ak al. ?P [] [] (aj # ak) al;
         !!ad ae a b. ?P [] (ad # ae) a b; !!V Vs a b. ?P (V # Vs) [] a b;
         !!V Vs T Ts aw. ?P (V # Vs) (T # Ts) [] aw;
         !!V Vs T Ts v vs e.
            ?P Vs Ts vs e ==> ?P (V # Vs) (T # Ts) (v # vs) e;
         !!e. ?P [] [] [] e |]
      ==> ?P ?u ?v ?w ?x",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_var 4, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("SmallStep.red_reds_inducts",
     "[| ?P,?x1a \<turnstile> \<langle>?x2a,
                               (?x3a, ?x3b)\<rangle> \<rightarrow>
                              \<langle>?x4a,(?x5a, ?x5b)\<rangle>;
         !!h a h' C E l.
            [| new_Addr h = \<lfloor>a\<rfloor>;
               h' = h(a |-> (C, Collect (init_obj ?P C))) |]
            ==> ?P1.0 E (new C) h l (ref (a, [C])) h' l;
         !!h E C l.
            new_Addr h = None ==>
            ?P1.0 E (new C) h l
             (Throw (addr_of_sys_xcpt OutOfMemory, [OutOfMemory])) h l;
         !!E e a b e' aa ba C.
            [| ?P,E \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                                 \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 E e a b e' aa ba |]
            ==> ?P1.0 E (\<lparr>C\<rparr>e) a b (\<lparr>C\<rparr>e') aa
                 ba;
         !!E C a b. ?P1.0 E (\<lparr>C\<rparr>null) a b null a b;
         !!Cs C Cs' Ds E a aa b.
            [| ?P \<turnstile> Path last Cs to C via Cs' ;
               Ds = Cs @\<^sub>p Cs' |]
            ==> ?P1.0 E (\<lparr>C\<rparr>ref (a, Cs)) aa b (ref (a, Ds)) aa
                 b;
         !!E C a Cs Cs' aa b.
            ?P1.0 E (\<lparr>C\<rparr>ref (a, Cs @ [C] @ Cs')) aa b
             (ref (a, Cs @ [C])) aa b;
         !!C Cs E a aa b.
            [| C ~: set Cs; (last Cs, C) ~: (subcls1 ?P)^* |]
            ==> ?P1.0 E (\<lparr>C\<rparr>ref (a, Cs)) aa b
                 (Throw (addr_of_sys_xcpt ClassCast, [ClassCast])) aa b;
         !!E e a b e' aa ba C.
            [| ?P,E \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                                 \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 E e a b e' aa ba |]
            ==> ?P1.0 E (Cast C e) a b (Cast C e') aa ba;
         !!E C a b. ?P1.0 E (Cast C null) a b null a b;
         !!Cs C Cs' Ds E a aa b.
            [| ?P \<turnstile> Path last Cs to C unique;
               ?P \<turnstile> Path last Cs to C via Cs' ;
               Ds = Cs @\<^sub>p Cs' |]
            ==> ?P1.0 E (Cast C (ref (a, Cs))) aa b (ref (a, Ds)) aa b;
         !!E C a Cs Cs' aa b.
            ?P1.0 E (Cast C (ref (a, Cs @ [C] @ Cs'))) aa b
             (ref (a, Cs @ [C])) aa b;
         !!a b aa D S C Cs' E Cs.
            [| hp (a, b) aa = \<lfloor>(D, S)\<rfloor>;
               ?P \<turnstile> Path D to C via Cs' ;
               ?P \<turnstile> Path D to C unique |]
            ==> ?P1.0 E (Cast C (ref (aa, Cs))) a b (ref (aa, Cs')) a b;
         !!a b aa D S C Cs E.
            [| hp (a, b) aa = \<lfloor>(D, S)\<rfloor>;
               ~ ?P \<turnstile> Path D to C unique;
               ~ ?P \<turnstile> Path last Cs to C unique; C ~: set Cs |]
            ==> ?P1.0 E (Cast C (ref (aa, Cs))) a b null a b;
         !!E e a b e' aa ba bop e\<^sub>2.
            [| ?P,E \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                                 \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 E e a b e' aa ba |]
            ==> ?P1.0 E (e \<guillemotleft>bop\<guillemotright> e\<^sub>2) a
                 b (e' \<guillemotleft>bop\<guillemotright> e\<^sub>2) aa
                 ba;
         !!E e a b e' aa ba v\<^sub>1 bop.
            [| ?P,E \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                                 \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 E e a b e' aa ba |]
            ==> ?P1.0 E
                 (Val v\<^sub>1 \<guillemotleft>bop\<guillemotright> e) a b
                 (Val v\<^sub>1 \<guillemotleft>bop\<guillemotright> e') aa
                 ba;
         !!bop v\<^sub>1 v\<^sub>2 v E a b.
            binop (bop, v\<^sub>1, v\<^sub>2) = \<lfloor>v\<rfloor> ==>
            ?P1.0 E
             (Val v\<^sub>1 \<guillemotleft>bop\<guillemotright> Val
                            v\<^sub>2)
             a b (Val v) a b;
         !!a b V v E.
            lcl (a, b) V = \<lfloor>v\<rfloor> ==>
            ?P1.0 E (Var V) a b (Val v) a b;
         !!E e a b e' aa ba V.
            [| ?P,E \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                                 \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 E e a b e' aa ba |]
            ==> ?P1.0 E (V:=e) a b (V:=e') aa ba;
         !!E V T v v' h l.
            [| E V = \<lfloor>T\<rfloor>;
               ?P \<turnstile> T casts v to v'  |]
            ==> ?P1.0 E (V:=Val v) h l (Val v') h (l(V |-> v'));
         !!E e a b e' aa ba F Cs.
            [| ?P,E \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                                 \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 E e a b e' aa ba |]
            ==> ?P1.0 E (e\<bullet>F{Cs}) a b (e'\<bullet>F{Cs}) aa ba;
         !!a b aa D S Ds Cs' Cs fs F v E.
            [| hp (a, b) aa = \<lfloor>(D, S)\<rfloor>;
               Ds = Cs' @\<^sub>p Cs; (Ds, fs) : S;
               fs F = \<lfloor>v\<rfloor> |]
            ==> ?P1.0 E (ref (aa, Cs')\<bullet>F{Cs}) a b (Val v) a b;
         !!E F Cs a b.
            ?P1.0 E (null\<bullet>F{Cs}) a b
             (Throw (addr_of_sys_xcpt NullPointer, [NullPointer])) a b;
         !!E e a b e' aa ba F Cs e\<^sub>2.
            [| ?P,E \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                                 \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 E e a b e' aa ba |]
            ==> ?P1.0 E (e\<bullet>F{Cs} := e\<^sub>2) a b
                 (e'\<bullet>F{Cs} := e\<^sub>2) aa ba;
         !!E e a b e' aa ba v F Cs.
            [| ?P,E \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                                 \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 E e a b e' aa ba |]
            ==> ?P1.0 E (Val v\<bullet>F{Cs} := e) a b
                 (Val v\<bullet>F{Cs} := e') aa ba;
         !!h a D S Cs' F T Cs v v' Ds fs E l.
            [| h a = \<lfloor>(D, S)\<rfloor>;
               ?P \<turnstile> last Cs' has least F:T via Cs;
               ?P \<turnstile> T casts v to v' ; Ds = Cs' @\<^sub>p Cs;
               (Ds, fs) : S |]
            ==> ?P1.0 E (ref (a, Cs')\<bullet>F{Cs} := Val v) h l (Val v')
                 (h(a |-> (D, insert (Ds, fs(F |-> v')) (S - {(Ds, fs)}))))
                 l;
         !!E F Cs v a b.
            ?P1.0 E (null\<bullet>F{Cs} := Val v) a b
             (Throw (addr_of_sys_xcpt NullPointer, [NullPointer])) a b;
         !!E e a b e' aa ba Copt M es.
            [| ?P,E \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                                 \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 E e a b e' aa ba |]
            ==> ?P1.0 E (Call e Copt M es) a b (Call e' Copt M es) aa ba;
         !!E es a b es' aa ba v Copt M.
            [| ?P,E \<turnstile> \<langle>es,(a, b)\<rangle> [\<rightarrow>]
                                 \<langle>es',(aa, ba)\<rangle>;
               ?P2.0 E es a b es' aa ba |]
            ==> ?P1.0 E (Call (Val v) Copt M es) a b
                 (Call (Val v) Copt M es') aa ba;
         !!a b aa C S Cs M Ts' T' pns' body' Ds Ts T pns body Cs' vs bs
            new_body E.
            [| hp (a, b) aa = \<lfloor>(C, S)\<rfloor>;
               ?P \<turnstile> last
                                Cs has least M = (Ts', T', pns',
            body') via Ds;
               ?P \<turnstile> (C,Cs @\<^sub>p
                                  Ds) selects M = (Ts, T, pns,
             body) via Cs';
               length vs = length pns; length Ts = length pns;
               bs =
               blocks
                (this # pns, Class (last Cs') # Ts, Ref (aa, Cs') # vs,
                 body);
               new_body =
               (case T' of Class D => \<lparr>D\<rparr>bs | _ => bs) |]
            ==> ?P1.0 E (Call (ref (aa, Cs)) None M (map Val vs)) a b
                 new_body a b;
         !!Cs C Cs'' M Ts T pns body Cs' Ds vs E a aa b.
            [| ?P \<turnstile> Path last Cs to C unique;
               ?P \<turnstile> Path last Cs to C via Cs'' ;
               ?P \<turnstile> C has least M = (Ts, T, pns, body) via Cs';
               Ds = (Cs @\<^sub>p Cs'') @\<^sub>p Cs';
               length vs = length pns; length Ts = length pns |]
            ==> ?P1.0 E
                 (Call (ref (a, Cs)) \<lfloor>C\<rfloor> M (map Val vs)) aa
                 b (blocks
                     (this # pns, Class (last Ds) # Ts, Ref (a, Ds) # vs,
                      body))
                 aa b;
         !!E Copt M vs a b.
            ?P1.0 E (Call null Copt M (map Val vs)) a b
             (Throw (addr_of_sys_xcpt NullPointer, [NullPointer])) a b;
         !!E V T e h l e' h' l'.
            [| ?P,E(V |->
               T) \<turnstile> \<langle>e,
                                (h, l(V := None))\<rangle> \<rightarrow>
                               \<langle>e',(h', l')\<rangle>;
               ?P1.0 (E(V |-> T)) e h (l(V := None)) e' h' l'; l' V = None;
               ~ assigned V e |]
            ==> ?P1.0 E {V:T; e} h l {V:T; e'} h' (l'(V := l V));
         !!E V T e h l e' h' l' v.
            [| ?P,E(V |->
               T) \<turnstile> \<langle>e,
                                (h, l(V := None))\<rangle> \<rightarrow>
                               \<langle>e',(h', l')\<rangle>;
               ?P1.0 (E(V |-> T)) e h (l(V := None)) e' h' l';
               l' V = \<lfloor>v\<rfloor>; ~ assigned V e |]
            ==> ?P1.0 E {V:T; e} h l {V:T; V:=Val v;; e'} h' (l'(V := l V));
         !!E V T e h l v' e' h' l' v'' v.
            [| ?P,E(V |->
               T) \<turnstile> \<langle>e,
                                (h, l(V |-> v'))\<rangle> \<rightarrow>
                               \<langle>e',(h', l')\<rangle>;
               ?P1.0 (E(V |-> T)) e h (l(V |-> v')) e' h' l';
               l' V = \<lfloor>v''\<rfloor>;
               ?P \<turnstile> T casts v to v'  |]
            ==> ?P1.0 E {V:T; V:=Val v;; e} h l {V:T; V:=Val v'';; e'} h'
                 (l'(V := l V));
         !!E V T u a b. ?P1.0 E {V:T; Val u} a b (Val u) a b;
         !!T v v' E V u a b.
            ?P \<turnstile> T casts v to v'  ==>
            ?P1.0 E {V:T; V:=Val v;; Val u} a b (Val u) a b;
         !!E e a b e' aa ba e\<^sub>2.
            [| ?P,E \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                                 \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 E e a b e' aa ba |]
            ==> ?P1.0 E (e;; e\<^sub>2) a b (e';; e\<^sub>2) aa ba;
         !!E v e\<^sub>2 a b. ?P1.0 E (Val v;; e\<^sub>2) a b e\<^sub>2 a b;
         !!E e a b e' aa ba e\<^sub>1 e\<^sub>2.
            [| ?P,E \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                                 \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 E e a b e' aa ba |]
            ==> ?P1.0 E (if (e) e\<^sub>1 else e\<^sub>2) a b
                 (if (e') e\<^sub>1 else e\<^sub>2) aa ba;
         !!E e\<^sub>1 e\<^sub>2 a b.
            ?P1.0 E (if (true) e\<^sub>1 else e\<^sub>2) a b e\<^sub>1 a b;
         !!E e\<^sub>1 e\<^sub>2 a b.
            ?P1.0 E (if (false) e\<^sub>1 else e\<^sub>2) a b e\<^sub>2 a b;
         !!E b c a ba.
            ?P1.0 E (while (b) c) a ba (if (b) (c;; while (b) c) else unit)
             a ba;
         !!E e a b e' aa ba.
            [| ?P,E \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                                 \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 E e a b e' aa ba |]
            ==> ?P1.0 E (throw e) a b (throw e') aa ba;
         !!E a b.
            ?P1.0 E (throw null) a b
             (Throw (addr_of_sys_xcpt NullPointer, [NullPointer])) a b;
         !!E e a b e' aa ba es.
            [| ?P,E \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                                 \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 E e a b e' aa ba |]
            ==> ?P2.0 E (e # es) a b (e' # es) aa ba;
         !!E es a b es' aa ba v.
            [| ?P,E \<turnstile> \<langle>es,(a, b)\<rangle> [\<rightarrow>]
                                 \<langle>es',(aa, ba)\<rangle>;
               ?P2.0 E es a b es' aa ba |]
            ==> ?P2.0 E (Val v # es) a b (Val v # es') aa ba;
         !!E C a b aa ba.
            ?P1.0 E (Cast C (Throw (a, b))) aa ba (Throw (a, b)) aa ba;
         !!E C a b aa ba.
            ?P1.0 E (\<lparr>C\<rparr>Throw (a, b)) aa ba (Throw (a, b)) aa
             ba;
         !!E a b bop e\<^sub>2 aa ba.
            ?P1.0 E
             (Throw (a, b) \<guillemotleft>bop\<guillemotright> e\<^sub>2)
             aa ba (Throw (a, b)) aa ba;
         !!E v\<^sub>1 bop a b aa ba.
            ?P1.0 E
             (Val v\<^sub>1 \<guillemotleft>bop\<guillemotright> Throw
                            (a, b))
             aa ba (Throw (a, b)) aa ba;
         !!E V a b aa ba.
            ?P1.0 E (V:=Throw (a, b)) aa ba (Throw (a, b)) aa ba;
         !!E a b F Cs aa ba.
            ?P1.0 E (Throw (a, b)\<bullet>F{Cs}) aa ba (Throw (a, b)) aa ba;
         !!E a b F Cs e\<^sub>2 aa ba.
            ?P1.0 E (Throw (a, b)\<bullet>F{Cs} := e\<^sub>2) aa ba
             (Throw (a, b)) aa ba;
         !!E v F Cs a b aa ba.
            ?P1.0 E (Val v\<bullet>F{Cs} := Throw (a, b)) aa ba
             (Throw (a, b)) aa ba;
         !!E a b Copt M es aa ba.
            ?P1.0 E (Call (Throw (a, b)) Copt M es) aa ba (Throw (a, b)) aa
             ba;
         !!es vs a b es' E v Copt M aa ba.
            es = map Val vs @ Throw (a, b) # es' ==>
            ?P1.0 E (Call (Val v) Copt M es) aa ba (Throw (a, b)) aa ba;
         !!E V T a b aa ba.
            ?P1.0 E {V:T; Throw (a, b)} aa ba (Throw (a, b)) aa ba;
         !!T v v' E V a b aa ba.
            ?P \<turnstile> T casts v to v'  ==>
            ?P1.0 E {V:T; V:=Val v;; Throw (a, b)} aa ba (Throw (a, b)) aa
             ba;
         !!E a b e\<^sub>2 aa ba.
            ?P1.0 E (Throw (a, b);; e\<^sub>2) aa ba (Throw (a, b)) aa ba;
         !!E a b e\<^sub>1 e\<^sub>2 aa ba.
            ?P1.0 E (if (Throw (a, b)) e\<^sub>1 else e\<^sub>2) aa ba
             (Throw (a, b)) aa ba;
         !!E a b aa ba.
            ?P1.0 E (throw (Throw (a, b))) aa ba (Throw (a, b)) aa ba |]
      ==> ?P1.0 ?x1a ?x2a ?x3a ?x3b ?x4a ?x5a ?x5b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 122,
                template_app
                 (template_app (template_hole 121, template_var 9),
                  template_app
                   (template_app
                     (template_hole 120,
                      template_app
                       (template_app (template_hole 119, template_var 8),
                        template_app
                         (template_app (template_hole 118, template_var 7),
                          template_var 6))),
                    template_app
                     (template_app (template_hole 119, template_var 5),
                      template_app
                       (template_app (template_hole 118, template_var 4),
                        template_var 3))))),
              template_app (template_hole 117, template_var 2))
            ),
        template_predicate (template_app (template_hole 116, t_empty)),
        template_predicate (template_app (template_hole 116, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 89, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 114, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 89, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 116, t_empty)),
        template_predicate (template_app (template_hole 116, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 70, t_empty)),
        template_predicate (template_app (template_hole 116, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 116, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 116, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 116, t_empty)),
        template_predicate (template_app (template_hole 89, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 59, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 44, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 59, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_var 1, template_var 9),
                       template_var 8),
                     template_var 7),
                   template_var 6),
                 template_var 5),
               template_var 4),
             template_var 3)
           ))),
    ("SmallStep.red_reds_inducts",
     "[| ?P,?x6a \<turnstile> \<langle>?x7a,
                               (?x8a, ?x8b)\<rangle> [\<rightarrow>]
                              \<langle>?x9a,(?x10a, ?x10b)\<rangle>;
         !!h a h' C E l.
            [| new_Addr h = \<lfloor>a\<rfloor>;
               h' = h(a |-> (C, Collect (init_obj ?P C))) |]
            ==> ?P1.0 E (new C) h l (ref (a, [C])) h' l;
         !!h E C l.
            new_Addr h = None ==>
            ?P1.0 E (new C) h l
             (Throw (addr_of_sys_xcpt OutOfMemory, [OutOfMemory])) h l;
         !!E e a b e' aa ba C.
            [| ?P,E \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                                 \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 E e a b e' aa ba |]
            ==> ?P1.0 E (\<lparr>C\<rparr>e) a b (\<lparr>C\<rparr>e') aa
                 ba;
         !!E C a b. ?P1.0 E (\<lparr>C\<rparr>null) a b null a b;
         !!Cs C Cs' Ds E a aa b.
            [| ?P \<turnstile> Path last Cs to C via Cs' ;
               Ds = Cs @\<^sub>p Cs' |]
            ==> ?P1.0 E (\<lparr>C\<rparr>ref (a, Cs)) aa b (ref (a, Ds)) aa
                 b;
         !!E C a Cs Cs' aa b.
            ?P1.0 E (\<lparr>C\<rparr>ref (a, Cs @ [C] @ Cs')) aa b
             (ref (a, Cs @ [C])) aa b;
         !!C Cs E a aa b.
            [| C ~: set Cs; (last Cs, C) ~: (subcls1 ?P)^* |]
            ==> ?P1.0 E (\<lparr>C\<rparr>ref (a, Cs)) aa b
                 (Throw (addr_of_sys_xcpt ClassCast, [ClassCast])) aa b;
         !!E e a b e' aa ba C.
            [| ?P,E \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                                 \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 E e a b e' aa ba |]
            ==> ?P1.0 E (Cast C e) a b (Cast C e') aa ba;
         !!E C a b. ?P1.0 E (Cast C null) a b null a b;
         !!Cs C Cs' Ds E a aa b.
            [| ?P \<turnstile> Path last Cs to C unique;
               ?P \<turnstile> Path last Cs to C via Cs' ;
               Ds = Cs @\<^sub>p Cs' |]
            ==> ?P1.0 E (Cast C (ref (a, Cs))) aa b (ref (a, Ds)) aa b;
         !!E C a Cs Cs' aa b.
            ?P1.0 E (Cast C (ref (a, Cs @ [C] @ Cs'))) aa b
             (ref (a, Cs @ [C])) aa b;
         !!a b aa D S C Cs' E Cs.
            [| hp (a, b) aa = \<lfloor>(D, S)\<rfloor>;
               ?P \<turnstile> Path D to C via Cs' ;
               ?P \<turnstile> Path D to C unique |]
            ==> ?P1.0 E (Cast C (ref (aa, Cs))) a b (ref (aa, Cs')) a b;
         !!a b aa D S C Cs E.
            [| hp (a, b) aa = \<lfloor>(D, S)\<rfloor>;
               ~ ?P \<turnstile> Path D to C unique;
               ~ ?P \<turnstile> Path last Cs to C unique; C ~: set Cs |]
            ==> ?P1.0 E (Cast C (ref (aa, Cs))) a b null a b;
         !!E e a b e' aa ba bop e\<^sub>2.
            [| ?P,E \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                                 \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 E e a b e' aa ba |]
            ==> ?P1.0 E (e \<guillemotleft>bop\<guillemotright> e\<^sub>2) a
                 b (e' \<guillemotleft>bop\<guillemotright> e\<^sub>2) aa
                 ba;
         !!E e a b e' aa ba v\<^sub>1 bop.
            [| ?P,E \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                                 \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 E e a b e' aa ba |]
            ==> ?P1.0 E
                 (Val v\<^sub>1 \<guillemotleft>bop\<guillemotright> e) a b
                 (Val v\<^sub>1 \<guillemotleft>bop\<guillemotright> e') aa
                 ba;
         !!bop v\<^sub>1 v\<^sub>2 v E a b.
            binop (bop, v\<^sub>1, v\<^sub>2) = \<lfloor>v\<rfloor> ==>
            ?P1.0 E
             (Val v\<^sub>1 \<guillemotleft>bop\<guillemotright> Val
                            v\<^sub>2)
             a b (Val v) a b;
         !!a b V v E.
            lcl (a, b) V = \<lfloor>v\<rfloor> ==>
            ?P1.0 E (Var V) a b (Val v) a b;
         !!E e a b e' aa ba V.
            [| ?P,E \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                                 \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 E e a b e' aa ba |]
            ==> ?P1.0 E (V:=e) a b (V:=e') aa ba;
         !!E V T v v' h l.
            [| E V = \<lfloor>T\<rfloor>;
               ?P \<turnstile> T casts v to v'  |]
            ==> ?P1.0 E (V:=Val v) h l (Val v') h (l(V |-> v'));
         !!E e a b e' aa ba F Cs.
            [| ?P,E \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                                 \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 E e a b e' aa ba |]
            ==> ?P1.0 E (e\<bullet>F{Cs}) a b (e'\<bullet>F{Cs}) aa ba;
         !!a b aa D S Ds Cs' Cs fs F v E.
            [| hp (a, b) aa = \<lfloor>(D, S)\<rfloor>;
               Ds = Cs' @\<^sub>p Cs; (Ds, fs) : S;
               fs F = \<lfloor>v\<rfloor> |]
            ==> ?P1.0 E (ref (aa, Cs')\<bullet>F{Cs}) a b (Val v) a b;
         !!E F Cs a b.
            ?P1.0 E (null\<bullet>F{Cs}) a b
             (Throw (addr_of_sys_xcpt NullPointer, [NullPointer])) a b;
         !!E e a b e' aa ba F Cs e\<^sub>2.
            [| ?P,E \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                                 \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 E e a b e' aa ba |]
            ==> ?P1.0 E (e\<bullet>F{Cs} := e\<^sub>2) a b
                 (e'\<bullet>F{Cs} := e\<^sub>2) aa ba;
         !!E e a b e' aa ba v F Cs.
            [| ?P,E \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                                 \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 E e a b e' aa ba |]
            ==> ?P1.0 E (Val v\<bullet>F{Cs} := e) a b
                 (Val v\<bullet>F{Cs} := e') aa ba;
         !!h a D S Cs' F T Cs v v' Ds fs E l.
            [| h a = \<lfloor>(D, S)\<rfloor>;
               ?P \<turnstile> last Cs' has least F:T via Cs;
               ?P \<turnstile> T casts v to v' ; Ds = Cs' @\<^sub>p Cs;
               (Ds, fs) : S |]
            ==> ?P1.0 E (ref (a, Cs')\<bullet>F{Cs} := Val v) h l (Val v')
                 (h(a |-> (D, insert (Ds, fs(F |-> v')) (S - {(Ds, fs)}))))
                 l;
         !!E F Cs v a b.
            ?P1.0 E (null\<bullet>F{Cs} := Val v) a b
             (Throw (addr_of_sys_xcpt NullPointer, [NullPointer])) a b;
         !!E e a b e' aa ba Copt M es.
            [| ?P,E \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                                 \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 E e a b e' aa ba |]
            ==> ?P1.0 E (Call e Copt M es) a b (Call e' Copt M es) aa ba;
         !!E es a b es' aa ba v Copt M.
            [| ?P,E \<turnstile> \<langle>es,(a, b)\<rangle> [\<rightarrow>]
                                 \<langle>es',(aa, ba)\<rangle>;
               ?P2.0 E es a b es' aa ba |]
            ==> ?P1.0 E (Call (Val v) Copt M es) a b
                 (Call (Val v) Copt M es') aa ba;
         !!a b aa C S Cs M Ts' T' pns' body' Ds Ts T pns body Cs' vs bs
            new_body E.
            [| hp (a, b) aa = \<lfloor>(C, S)\<rfloor>;
               ?P \<turnstile> last
                                Cs has least M = (Ts', T', pns',
            body') via Ds;
               ?P \<turnstile> (C,Cs @\<^sub>p
                                  Ds) selects M = (Ts, T, pns,
             body) via Cs';
               length vs = length pns; length Ts = length pns;
               bs =
               blocks
                (this # pns, Class (last Cs') # Ts, Ref (aa, Cs') # vs,
                 body);
               new_body =
               (case T' of Class D => \<lparr>D\<rparr>bs | _ => bs) |]
            ==> ?P1.0 E (Call (ref (aa, Cs)) None M (map Val vs)) a b
                 new_body a b;
         !!Cs C Cs'' M Ts T pns body Cs' Ds vs E a aa b.
            [| ?P \<turnstile> Path last Cs to C unique;
               ?P \<turnstile> Path last Cs to C via Cs'' ;
               ?P \<turnstile> C has least M = (Ts, T, pns, body) via Cs';
               Ds = (Cs @\<^sub>p Cs'') @\<^sub>p Cs';
               length vs = length pns; length Ts = length pns |]
            ==> ?P1.0 E
                 (Call (ref (a, Cs)) \<lfloor>C\<rfloor> M (map Val vs)) aa
                 b (blocks
                     (this # pns, Class (last Ds) # Ts, Ref (a, Ds) # vs,
                      body))
                 aa b;
         !!E Copt M vs a b.
            ?P1.0 E (Call null Copt M (map Val vs)) a b
             (Throw (addr_of_sys_xcpt NullPointer, [NullPointer])) a b;
         !!E V T e h l e' h' l'.
            [| ?P,E(V |->
               T) \<turnstile> \<langle>e,
                                (h, l(V := None))\<rangle> \<rightarrow>
                               \<langle>e',(h', l')\<rangle>;
               ?P1.0 (E(V |-> T)) e h (l(V := None)) e' h' l'; l' V = None;
               ~ assigned V e |]
            ==> ?P1.0 E {V:T; e} h l {V:T; e'} h' (l'(V := l V));
         !!E V T e h l e' h' l' v.
            [| ?P,E(V |->
               T) \<turnstile> \<langle>e,
                                (h, l(V := None))\<rangle> \<rightarrow>
                               \<langle>e',(h', l')\<rangle>;
               ?P1.0 (E(V |-> T)) e h (l(V := None)) e' h' l';
               l' V = \<lfloor>v\<rfloor>; ~ assigned V e |]
            ==> ?P1.0 E {V:T; e} h l {V:T; V:=Val v;; e'} h' (l'(V := l V));
         !!E V T e h l v' e' h' l' v'' v.
            [| ?P,E(V |->
               T) \<turnstile> \<langle>e,
                                (h, l(V |-> v'))\<rangle> \<rightarrow>
                               \<langle>e',(h', l')\<rangle>;
               ?P1.0 (E(V |-> T)) e h (l(V |-> v')) e' h' l';
               l' V = \<lfloor>v''\<rfloor>;
               ?P \<turnstile> T casts v to v'  |]
            ==> ?P1.0 E {V:T; V:=Val v;; e} h l {V:T; V:=Val v'';; e'} h'
                 (l'(V := l V));
         !!E V T u a b. ?P1.0 E {V:T; Val u} a b (Val u) a b;
         !!T v v' E V u a b.
            ?P \<turnstile> T casts v to v'  ==>
            ?P1.0 E {V:T; V:=Val v;; Val u} a b (Val u) a b;
         !!E e a b e' aa ba e\<^sub>2.
            [| ?P,E \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                                 \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 E e a b e' aa ba |]
            ==> ?P1.0 E (e;; e\<^sub>2) a b (e';; e\<^sub>2) aa ba;
         !!E v e\<^sub>2 a b. ?P1.0 E (Val v;; e\<^sub>2) a b e\<^sub>2 a b;
         !!E e a b e' aa ba e\<^sub>1 e\<^sub>2.
            [| ?P,E \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                                 \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 E e a b e' aa ba |]
            ==> ?P1.0 E (if (e) e\<^sub>1 else e\<^sub>2) a b
                 (if (e') e\<^sub>1 else e\<^sub>2) aa ba;
         !!E e\<^sub>1 e\<^sub>2 a b.
            ?P1.0 E (if (true) e\<^sub>1 else e\<^sub>2) a b e\<^sub>1 a b;
         !!E e\<^sub>1 e\<^sub>2 a b.
            ?P1.0 E (if (false) e\<^sub>1 else e\<^sub>2) a b e\<^sub>2 a b;
         !!E b c a ba.
            ?P1.0 E (while (b) c) a ba (if (b) (c;; while (b) c) else unit)
             a ba;
         !!E e a b e' aa ba.
            [| ?P,E \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                                 \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 E e a b e' aa ba |]
            ==> ?P1.0 E (throw e) a b (throw e') aa ba;
         !!E a b.
            ?P1.0 E (throw null) a b
             (Throw (addr_of_sys_xcpt NullPointer, [NullPointer])) a b;
         !!E e a b e' aa ba es.
            [| ?P,E \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                                 \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 E e a b e' aa ba |]
            ==> ?P2.0 E (e # es) a b (e' # es) aa ba;
         !!E es a b es' aa ba v.
            [| ?P,E \<turnstile> \<langle>es,(a, b)\<rangle> [\<rightarrow>]
                                 \<langle>es',(aa, ba)\<rangle>;
               ?P2.0 E es a b es' aa ba |]
            ==> ?P2.0 E (Val v # es) a b (Val v # es') aa ba;
         !!E C a b aa ba.
            ?P1.0 E (Cast C (Throw (a, b))) aa ba (Throw (a, b)) aa ba;
         !!E C a b aa ba.
            ?P1.0 E (\<lparr>C\<rparr>Throw (a, b)) aa ba (Throw (a, b)) aa
             ba;
         !!E a b bop e\<^sub>2 aa ba.
            ?P1.0 E
             (Throw (a, b) \<guillemotleft>bop\<guillemotright> e\<^sub>2)
             aa ba (Throw (a, b)) aa ba;
         !!E v\<^sub>1 bop a b aa ba.
            ?P1.0 E
             (Val v\<^sub>1 \<guillemotleft>bop\<guillemotright> Throw
                            (a, b))
             aa ba (Throw (a, b)) aa ba;
         !!E V a b aa ba.
            ?P1.0 E (V:=Throw (a, b)) aa ba (Throw (a, b)) aa ba;
         !!E a b F Cs aa ba.
            ?P1.0 E (Throw (a, b)\<bullet>F{Cs}) aa ba (Throw (a, b)) aa ba;
         !!E a b F Cs e\<^sub>2 aa ba.
            ?P1.0 E (Throw (a, b)\<bullet>F{Cs} := e\<^sub>2) aa ba
             (Throw (a, b)) aa ba;
         !!E v F Cs a b aa ba.
            ?P1.0 E (Val v\<bullet>F{Cs} := Throw (a, b)) aa ba
             (Throw (a, b)) aa ba;
         !!E a b Copt M es aa ba.
            ?P1.0 E (Call (Throw (a, b)) Copt M es) aa ba (Throw (a, b)) aa
             ba;
         !!es vs a b es' E v Copt M aa ba.
            es = map Val vs @ Throw (a, b) # es' ==>
            ?P1.0 E (Call (Val v) Copt M es) aa ba (Throw (a, b)) aa ba;
         !!E V T a b aa ba.
            ?P1.0 E {V:T; Throw (a, b)} aa ba (Throw (a, b)) aa ba;
         !!T v v' E V a b aa ba.
            ?P \<turnstile> T casts v to v'  ==>
            ?P1.0 E {V:T; V:=Val v;; Throw (a, b)} aa ba (Throw (a, b)) aa
             ba;
         !!E a b e\<^sub>2 aa ba.
            ?P1.0 E (Throw (a, b);; e\<^sub>2) aa ba (Throw (a, b)) aa ba;
         !!E a b e\<^sub>1 e\<^sub>2 aa ba.
            ?P1.0 E (if (Throw (a, b)) e\<^sub>1 else e\<^sub>2) aa ba
             (Throw (a, b)) aa ba;
         !!E a b aa ba.
            ?P1.0 E (throw (Throw (a, b))) aa ba (Throw (a, b)) aa ba |]
      ==> ?P2.0 ?x6a ?x7a ?x8a ?x8b ?x9a ?x10a ?x10b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 122,
                template_app
                 (template_app (template_hole 121, template_var 9),
                  template_app
                   (template_app
                     (template_hole 120,
                      template_app
                       (template_app (template_hole 119, template_var 8),
                        template_app
                         (template_app (template_hole 118, template_var 7),
                          template_var 6))),
                    template_app
                     (template_app (template_hole 119, template_var 5),
                      template_app
                       (template_app (template_hole 118, template_var 4),
                        template_var 3))))),
              template_app (template_hole 117, template_var 2))
            ),
        template_predicate (template_app (template_hole 116, t_empty)),
        template_predicate (template_app (template_hole 116, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 84, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 114, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 84, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 116, t_empty)),
        template_predicate (template_app (template_hole 116, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 65, t_empty)),
        template_predicate (template_app (template_hole 116, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 116, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 116, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 116, t_empty)),
        template_predicate (template_app (template_hole 84, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 54, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 39, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 54, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_var 0, template_var 9),
                       template_var 8),
                     template_var 7),
                   template_var 6),
                 template_var 5),
               template_var 4),
             template_var 3)
           ))),
    ("SmallStep.red_reds_induct",
     "[| !!h a h' C E l.
            [| new_Addr h = \<lfloor>a\<rfloor>;
               h' = h(a |-> (C, Collect (init_obj ?P C))) |]
            ==> ?P1.0 E (new C) h l (ref (a, [C])) h' l;
         !!h E C l.
            new_Addr h = None ==>
            ?P1.0 E (new C) h l
             (Throw (addr_of_sys_xcpt OutOfMemory, [OutOfMemory])) h l;
         !!E e a b e' aa ba C.
            [| ?P,E \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                                 \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 E e a b e' aa ba |]
            ==> ?P1.0 E (\<lparr>C\<rparr>e) a b (\<lparr>C\<rparr>e') aa
                 ba;
         !!E C a b. ?P1.0 E (\<lparr>C\<rparr>null) a b null a b;
         !!Cs C Cs' Ds E a aa b.
            [| ?P \<turnstile> Path last Cs to C via Cs' ;
               Ds = Cs @\<^sub>p Cs' |]
            ==> ?P1.0 E (\<lparr>C\<rparr>ref (a, Cs)) aa b (ref (a, Ds)) aa
                 b;
         !!E C a Cs Cs' aa b.
            ?P1.0 E (\<lparr>C\<rparr>ref (a, Cs @ [C] @ Cs')) aa b
             (ref (a, Cs @ [C])) aa b;
         !!C Cs E a aa b.
            [| C ~: set Cs; (last Cs, C) ~: (subcls1 ?P)^* |]
            ==> ?P1.0 E (\<lparr>C\<rparr>ref (a, Cs)) aa b
                 (Throw (addr_of_sys_xcpt ClassCast, [ClassCast])) aa b;
         !!E e a b e' aa ba C.
            [| ?P,E \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                                 \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 E e a b e' aa ba |]
            ==> ?P1.0 E (Cast C e) a b (Cast C e') aa ba;
         !!E C a b. ?P1.0 E (Cast C null) a b null a b;
         !!Cs C Cs' Ds E a aa b.
            [| ?P \<turnstile> Path last Cs to C unique;
               ?P \<turnstile> Path last Cs to C via Cs' ;
               Ds = Cs @\<^sub>p Cs' |]
            ==> ?P1.0 E (Cast C (ref (a, Cs))) aa b (ref (a, Ds)) aa b;
         !!E C a Cs Cs' aa b.
            ?P1.0 E (Cast C (ref (a, Cs @ [C] @ Cs'))) aa b
             (ref (a, Cs @ [C])) aa b;
         !!a b aa D S C Cs' E Cs.
            [| hp (a, b) aa = \<lfloor>(D, S)\<rfloor>;
               ?P \<turnstile> Path D to C via Cs' ;
               ?P \<turnstile> Path D to C unique |]
            ==> ?P1.0 E (Cast C (ref (aa, Cs))) a b (ref (aa, Cs')) a b;
         !!a b aa D S C Cs E.
            [| hp (a, b) aa = \<lfloor>(D, S)\<rfloor>;
               ~ ?P \<turnstile> Path D to C unique;
               ~ ?P \<turnstile> Path last Cs to C unique; C ~: set Cs |]
            ==> ?P1.0 E (Cast C (ref (aa, Cs))) a b null a b;
         !!E e a b e' aa ba bop e\<^sub>2.
            [| ?P,E \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                                 \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 E e a b e' aa ba |]
            ==> ?P1.0 E (e \<guillemotleft>bop\<guillemotright> e\<^sub>2) a
                 b (e' \<guillemotleft>bop\<guillemotright> e\<^sub>2) aa
                 ba;
         !!E e a b e' aa ba v\<^sub>1 bop.
            [| ?P,E \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                                 \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 E e a b e' aa ba |]
            ==> ?P1.0 E
                 (Val v\<^sub>1 \<guillemotleft>bop\<guillemotright> e) a b
                 (Val v\<^sub>1 \<guillemotleft>bop\<guillemotright> e') aa
                 ba;
         !!bop v\<^sub>1 v\<^sub>2 v E a b.
            binop (bop, v\<^sub>1, v\<^sub>2) = \<lfloor>v\<rfloor> ==>
            ?P1.0 E
             (Val v\<^sub>1 \<guillemotleft>bop\<guillemotright> Val
                            v\<^sub>2)
             a b (Val v) a b;
         !!a b V v E.
            lcl (a, b) V = \<lfloor>v\<rfloor> ==>
            ?P1.0 E (Var V) a b (Val v) a b;
         !!E e a b e' aa ba V.
            [| ?P,E \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                                 \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 E e a b e' aa ba |]
            ==> ?P1.0 E (V:=e) a b (V:=e') aa ba;
         !!E V T v v' h l.
            [| E V = \<lfloor>T\<rfloor>;
               ?P \<turnstile> T casts v to v'  |]
            ==> ?P1.0 E (V:=Val v) h l (Val v') h (l(V |-> v'));
         !!E e a b e' aa ba F Cs.
            [| ?P,E \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                                 \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 E e a b e' aa ba |]
            ==> ?P1.0 E (e\<bullet>F{Cs}) a b (e'\<bullet>F{Cs}) aa ba;
         !!a b aa D S Ds Cs' Cs fs F v E.
            [| hp (a, b) aa = \<lfloor>(D, S)\<rfloor>;
               Ds = Cs' @\<^sub>p Cs; (Ds, fs) : S;
               fs F = \<lfloor>v\<rfloor> |]
            ==> ?P1.0 E (ref (aa, Cs')\<bullet>F{Cs}) a b (Val v) a b;
         !!E F Cs a b.
            ?P1.0 E (null\<bullet>F{Cs}) a b
             (Throw (addr_of_sys_xcpt NullPointer, [NullPointer])) a b;
         !!E e a b e' aa ba F Cs e\<^sub>2.
            [| ?P,E \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                                 \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 E e a b e' aa ba |]
            ==> ?P1.0 E (e\<bullet>F{Cs} := e\<^sub>2) a b
                 (e'\<bullet>F{Cs} := e\<^sub>2) aa ba;
         !!E e a b e' aa ba v F Cs.
            [| ?P,E \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                                 \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 E e a b e' aa ba |]
            ==> ?P1.0 E (Val v\<bullet>F{Cs} := e) a b
                 (Val v\<bullet>F{Cs} := e') aa ba;
         !!h a D S Cs' F T Cs v v' Ds fs E l.
            [| h a = \<lfloor>(D, S)\<rfloor>;
               ?P \<turnstile> last Cs' has least F:T via Cs;
               ?P \<turnstile> T casts v to v' ; Ds = Cs' @\<^sub>p Cs;
               (Ds, fs) : S |]
            ==> ?P1.0 E (ref (a, Cs')\<bullet>F{Cs} := Val v) h l (Val v')
                 (h(a |-> (D, insert (Ds, fs(F |-> v')) (S - {(Ds, fs)}))))
                 l;
         !!E F Cs v a b.
            ?P1.0 E (null\<bullet>F{Cs} := Val v) a b
             (Throw (addr_of_sys_xcpt NullPointer, [NullPointer])) a b;
         !!E e a b e' aa ba Copt M es.
            [| ?P,E \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                                 \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 E e a b e' aa ba |]
            ==> ?P1.0 E (Call e Copt M es) a b (Call e' Copt M es) aa ba;
         !!E es a b es' aa ba v Copt M.
            [| ?P,E \<turnstile> \<langle>es,(a, b)\<rangle> [\<rightarrow>]
                                 \<langle>es',(aa, ba)\<rangle>;
               ?P2.0 E es a b es' aa ba |]
            ==> ?P1.0 E (Call (Val v) Copt M es) a b
                 (Call (Val v) Copt M es') aa ba;
         !!a b aa C S Cs M Ts' T' pns' body' Ds Ts T pns body Cs' vs bs
            new_body E.
            [| hp (a, b) aa = \<lfloor>(C, S)\<rfloor>;
               ?P \<turnstile> last
                                Cs has least M = (Ts', T', pns',
            body') via Ds;
               ?P \<turnstile> (C,Cs @\<^sub>p
                                  Ds) selects M = (Ts, T, pns,
             body) via Cs';
               length vs = length pns; length Ts = length pns;
               bs =
               blocks
                (this # pns, Class (last Cs') # Ts, Ref (aa, Cs') # vs,
                 body);
               new_body =
               (case T' of Class D => \<lparr>D\<rparr>bs | _ => bs) |]
            ==> ?P1.0 E (Call (ref (aa, Cs)) None M (map Val vs)) a b
                 new_body a b;
         !!Cs C Cs'' M Ts T pns body Cs' Ds vs E a aa b.
            [| ?P \<turnstile> Path last Cs to C unique;
               ?P \<turnstile> Path last Cs to C via Cs'' ;
               ?P \<turnstile> C has least M = (Ts, T, pns, body) via Cs';
               Ds = (Cs @\<^sub>p Cs'') @\<^sub>p Cs';
               length vs = length pns; length Ts = length pns |]
            ==> ?P1.0 E
                 (Call (ref (a, Cs)) \<lfloor>C\<rfloor> M (map Val vs)) aa
                 b (blocks
                     (this # pns, Class (last Ds) # Ts, Ref (a, Ds) # vs,
                      body))
                 aa b;
         !!E Copt M vs a b.
            ?P1.0 E (Call null Copt M (map Val vs)) a b
             (Throw (addr_of_sys_xcpt NullPointer, [NullPointer])) a b;
         !!E V T e h l e' h' l'.
            [| ?P,E(V |->
               T) \<turnstile> \<langle>e,
                                (h, l(V := None))\<rangle> \<rightarrow>
                               \<langle>e',(h', l')\<rangle>;
               ?P1.0 (E(V |-> T)) e h (l(V := None)) e' h' l'; l' V = None;
               ~ assigned V e |]
            ==> ?P1.0 E {V:T; e} h l {V:T; e'} h' (l'(V := l V));
         !!E V T e h l e' h' l' v.
            [| ?P,E(V |->
               T) \<turnstile> \<langle>e,
                                (h, l(V := None))\<rangle> \<rightarrow>
                               \<langle>e',(h', l')\<rangle>;
               ?P1.0 (E(V |-> T)) e h (l(V := None)) e' h' l';
               l' V = \<lfloor>v\<rfloor>; ~ assigned V e |]
            ==> ?P1.0 E {V:T; e} h l {V:T; V:=Val v;; e'} h' (l'(V := l V));
         !!E V T e h l v' e' h' l' v'' v.
            [| ?P,E(V |->
               T) \<turnstile> \<langle>e,
                                (h, l(V |-> v'))\<rangle> \<rightarrow>
                               \<langle>e',(h', l')\<rangle>;
               ?P1.0 (E(V |-> T)) e h (l(V |-> v')) e' h' l';
               l' V = \<lfloor>v''\<rfloor>;
               ?P \<turnstile> T casts v to v'  |]
            ==> ?P1.0 E {V:T; V:=Val v;; e} h l {V:T; V:=Val v'';; e'} h'
                 (l'(V := l V));
         !!E V T u a b. ?P1.0 E {V:T; Val u} a b (Val u) a b;
         !!T v v' E V u a b.
            ?P \<turnstile> T casts v to v'  ==>
            ?P1.0 E {V:T; V:=Val v;; Val u} a b (Val u) a b;
         !!E e a b e' aa ba e\<^sub>2.
            [| ?P,E \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                                 \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 E e a b e' aa ba |]
            ==> ?P1.0 E (e;; e\<^sub>2) a b (e';; e\<^sub>2) aa ba;
         !!E v e\<^sub>2 a b. ?P1.0 E (Val v;; e\<^sub>2) a b e\<^sub>2 a b;
         !!E e a b e' aa ba e\<^sub>1 e\<^sub>2.
            [| ?P,E \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                                 \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 E e a b e' aa ba |]
            ==> ?P1.0 E (if (e) e\<^sub>1 else e\<^sub>2) a b
                 (if (e') e\<^sub>1 else e\<^sub>2) aa ba;
         !!E e\<^sub>1 e\<^sub>2 a b.
            ?P1.0 E (if (true) e\<^sub>1 else e\<^sub>2) a b e\<^sub>1 a b;
         !!E e\<^sub>1 e\<^sub>2 a b.
            ?P1.0 E (if (false) e\<^sub>1 else e\<^sub>2) a b e\<^sub>2 a b;
         !!E b c a ba.
            ?P1.0 E (while (b) c) a ba (if (b) (c;; while (b) c) else unit)
             a ba;
         !!E e a b e' aa ba.
            [| ?P,E \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                                 \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 E e a b e' aa ba |]
            ==> ?P1.0 E (throw e) a b (throw e') aa ba;
         !!E a b.
            ?P1.0 E (throw null) a b
             (Throw (addr_of_sys_xcpt NullPointer, [NullPointer])) a b;
         !!E e a b e' aa ba es.
            [| ?P,E \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                                 \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 E e a b e' aa ba |]
            ==> ?P2.0 E (e # es) a b (e' # es) aa ba;
         !!E es a b es' aa ba v.
            [| ?P,E \<turnstile> \<langle>es,(a, b)\<rangle> [\<rightarrow>]
                                 \<langle>es',(aa, ba)\<rangle>;
               ?P2.0 E es a b es' aa ba |]
            ==> ?P2.0 E (Val v # es) a b (Val v # es') aa ba;
         !!E C a b aa ba.
            ?P1.0 E (Cast C (Throw (a, b))) aa ba (Throw (a, b)) aa ba;
         !!E C a b aa ba.
            ?P1.0 E (\<lparr>C\<rparr>Throw (a, b)) aa ba (Throw (a, b)) aa
             ba;
         !!E a b bop e\<^sub>2 aa ba.
            ?P1.0 E
             (Throw (a, b) \<guillemotleft>bop\<guillemotright> e\<^sub>2)
             aa ba (Throw (a, b)) aa ba;
         !!E v\<^sub>1 bop a b aa ba.
            ?P1.0 E
             (Val v\<^sub>1 \<guillemotleft>bop\<guillemotright> Throw
                            (a, b))
             aa ba (Throw (a, b)) aa ba;
         !!E V a b aa ba.
            ?P1.0 E (V:=Throw (a, b)) aa ba (Throw (a, b)) aa ba;
         !!E a b F Cs aa ba.
            ?P1.0 E (Throw (a, b)\<bullet>F{Cs}) aa ba (Throw (a, b)) aa ba;
         !!E a b F Cs e\<^sub>2 aa ba.
            ?P1.0 E (Throw (a, b)\<bullet>F{Cs} := e\<^sub>2) aa ba
             (Throw (a, b)) aa ba;
         !!E v F Cs a b aa ba.
            ?P1.0 E (Val v\<bullet>F{Cs} := Throw (a, b)) aa ba
             (Throw (a, b)) aa ba;
         !!E a b Copt M es aa ba.
            ?P1.0 E (Call (Throw (a, b)) Copt M es) aa ba (Throw (a, b)) aa
             ba;
         !!es vs a b es' E v Copt M aa ba.
            es = map Val vs @ Throw (a, b) # es' ==>
            ?P1.0 E (Call (Val v) Copt M es) aa ba (Throw (a, b)) aa ba;
         !!E V T a b aa ba.
            ?P1.0 E {V:T; Throw (a, b)} aa ba (Throw (a, b)) aa ba;
         !!T v v' E V a b aa ba.
            ?P \<turnstile> T casts v to v'  ==>
            ?P1.0 E {V:T; V:=Val v;; Throw (a, b)} aa ba (Throw (a, b)) aa
             ba;
         !!E a b e\<^sub>2 aa ba.
            ?P1.0 E (Throw (a, b);; e\<^sub>2) aa ba (Throw (a, b)) aa ba;
         !!E a b e\<^sub>1 e\<^sub>2 aa ba.
            ?P1.0 E (if (Throw (a, b)) e\<^sub>1 else e\<^sub>2) aa ba
             (Throw (a, b)) aa ba;
         !!E a b aa ba.
            ?P1.0 E (throw (Throw (a, b))) aa ba (Throw (a, b)) aa ba |]
      ==> (?P,?x1a \<turnstile> \<langle>?x2a,
                                 (?x3a, ?x3b)\<rangle> \<rightarrow>
                                \<langle>?x4a,(?x5a, ?x5b)\<rangle> -->
           ?P1.0 ?x1a ?x2a ?x3a ?x3b ?x4a ?x5a ?x5b) &
          (?P,?x6a \<turnstile> \<langle>?x7a,
                                 (?x8a, ?x8b)\<rangle> [\<rightarrow>]
                                \<langle>?x9a,(?x10a, ?x10b)\<rangle> -->
           ?P2.0 ?x6a ?x7a ?x8a ?x8b ?x9a ?x10a ?x10b)",
     template_implication
      ([template_predicate (template_app (template_hole 125, t_empty)),
        template_predicate (template_app (template_hole 125, t_empty)),
        template_predicate (template_app (template_hole 122, t_empty)),
        template_predicate (template_app (template_hole 122, t_empty)),
        template_predicate (template_app (template_hole 91, t_empty)),
        template_predicate (template_app (template_hole 122, t_empty)),
        template_predicate (template_app (template_hole 123, t_empty)),
        template_predicate (template_app (template_hole 122, t_empty)),
        template_predicate (template_app (template_hole 122, t_empty)),
        template_predicate (template_app (template_hole 91, t_empty)),
        template_predicate (template_app (template_hole 122, t_empty)),
        template_predicate (template_app (template_hole 125, t_empty)),
        template_predicate (template_app (template_hole 125, t_empty)),
        template_predicate (template_app (template_hole 122, t_empty)),
        template_predicate (template_app (template_hole 122, t_empty)),
        template_predicate (template_app (template_hole 72, t_empty)),
        template_predicate (template_app (template_hole 125, t_empty)),
        template_predicate (template_app (template_hole 122, t_empty)),
        template_predicate (template_app (template_hole 122, t_empty)),
        template_predicate (template_app (template_hole 122, t_empty)),
        template_predicate (template_app (template_hole 125, t_empty)),
        template_predicate (template_app (template_hole 122, t_empty)),
        template_predicate (template_app (template_hole 122, t_empty)),
        template_predicate (template_app (template_hole 122, t_empty)),
        template_predicate (template_app (template_hole 125, t_empty)),
        template_predicate (template_app (template_hole 122, t_empty)),
        template_predicate (template_app (template_hole 122, t_empty)),
        template_predicate (template_app (template_hole 122, t_empty)),
        template_predicate (template_app (template_hole 125, t_empty)),
        template_predicate (template_app (template_hole 91, t_empty)),
        template_predicate (template_app (template_hole 122, t_empty)),
        template_predicate (template_app (template_hole 122, t_empty)),
        template_predicate (template_app (template_hole 122, t_empty)),
        template_predicate (template_app (template_hole 122, t_empty)),
        template_predicate (template_app (template_hole 122, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 122, t_empty)),
        template_predicate (template_app (template_hole 122, t_empty)),
        template_predicate (template_app (template_hole 122, t_empty)),
        template_predicate (template_app (template_hole 122, t_empty)),
        template_predicate (template_app (template_hole 122, t_empty)),
        template_predicate (template_app (template_hole 122, t_empty)),
        template_predicate (template_app (template_hole 122, t_empty)),
        template_predicate (template_app (template_hole 122, t_empty)),
        template_predicate (template_app (template_hole 122, t_empty)),
        template_predicate (template_app (template_hole 122, t_empty)),
        template_predicate (template_app (template_hole 122, t_empty)),
        template_predicate (template_app (template_hole 122, t_empty)),
        template_predicate (template_app (template_hole 122, t_empty)),
        template_predicate (template_app (template_hole 122, t_empty)),
        template_predicate (template_app (template_hole 122, t_empty)),
        template_predicate (template_app (template_hole 122, t_empty)),
        template_predicate (template_app (template_hole 122, t_empty)),
        template_predicate (template_app (template_hole 122, t_empty)),
        template_predicate (template_app (template_hole 122, t_empty)),
        template_predicate (template_app (template_hole 46, t_empty)),
        template_predicate (template_app (template_hole 122, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 122, t_empty)),
        template_predicate (template_app (template_hole 122, t_empty)),
        template_predicate (template_app (template_hole 122, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app
                      (template_hole 99,
                       template_app
                        (template_app (template_hole 98, template_var 13),
                         template_app
                          (template_app
                            (template_hole 97,
                             template_app
                              (template_app
                                (template_hole 96, template_var 12),
                               template_app
                                (template_app
                                  (template_hole 95, template_var 11),
                                 template_var 10))),
                           template_app
                            (template_app
                              (template_hole 96, template_var 9),
                             template_app
                              (template_app
                                (template_hole 95, template_var 8),
                               template_var 7))))),
                     template_app (template_hole 94, template_var 16))),
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_var 15, template_var 13),
                             template_var 12),
                           template_var 11),
                         template_var 10),
                       template_var 9),
                     template_var 8),
                   template_var 7))),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_hole 44,
                     template_app
                      (template_app (template_hole 43, template_var 6),
                       template_app
                        (template_app
                          (template_hole 42,
                           template_app
                            (template_app
                              (template_hole 41, template_var 5),
                             template_app
                              (template_app
                                (template_hole 95, template_var 4),
                               template_var 3))),
                         template_app
                          (template_app (template_hole 41, template_var 2),
                           template_app
                            (template_app
                              (template_hole 95, template_var 1),
                             template_var 0))))),
                   template_app (template_hole 40, template_var 16))),
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_var 14, template_var 6),
                           template_var 5),
                         template_var 4),
                       template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0)))
           )))]:
   (string * thm * template) list
### theory "Draft.SmallStepTemplates"
### 1.312s elapsed time, 1.445s cpu time, 0.059s GC time
val it = (): unit
