   [("CombinableWands.w_in_scaled", "?w : scaled ?w",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 0))
         )),
    ("CombinableWands.R_mono_transformer",
     "PartialSA.mono_transformer (R ?a)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_hole 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("CombinableWands.R_smaller", "?w \<succeq> R ?a ?w",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("CombinableWands.cwand_stronger", "cwand ?A ?B <= wand ?A ?B",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("CombinableWands.valid_bin",
     "valid_state (binary_mask (get_m ?a), get_h ?a)",
     template_predicate
      (
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0))),
             template_app (template_hole 0, template_var 0)))
         )),
    ("CombinableWands.R_compatible_same", "?a |#| ?w ==> R ?a ?w = ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 0))),
    ("CombinableWands.properties_of_combinable_wands",
     "intuitionistic ?B ==> cwand ?A ?B <= wand ?A ?B",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("CombinableWands.compatible_same_mask",
     "valid_mask (add_masks ?a ?w) ==> ?w = comp_min_mask ?a ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("CombinableWands.get_h_multiply",
     "pgte pwrite ?p ==> get_h (multiply ?p ?x) = get_h ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("CombinableWands.in_multiply_refl",
     "?x : ?A ==> multiply ?p ?x : multiply_sem_assertion ?p ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("CombinableWands.combinable_cwand",
     "[| combinable ?B; intuitionistic ?B |] ==> combinable (cwand ?A ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("CombinableWands.properties_of_combinable_wands",
     "[| intuitionistic ?B; combinable ?B |] ==> combinable (cwand ?A ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("CombinableWands.get_m_smaller_mask",
     "pgte pwrite ?p ==>
      get_m (multiply ?p ?a) = multiply_mask ?p (get_m ?a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_hole 2, template_var 0))))),
    ("CombinableWands.valid_mask_add_comp_min",
     "[| valid_mask ?a; valid_mask ?b |]
      ==> valid_mask (add_masks (comp_min_mask ?b ?a) ?b)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1)),
               template_var 0))
           ))),
    ("CombinableWands.in_multiply_sem",
     "?x : multiply_sem_assertion ?p ?A ==>
      EX a:?A. ?x \<succeq> multiply ?p a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0), t_empty)
           ))),
    ("CombinableWands.binary_same",
     "[| binary ?A; intuitionistic ?B |] ==> wand ?A ?B <= cwand ?A ?B",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("CombinableWands.properties_of_combinable_wands",
     "[| intuitionistic ?B; binary ?A |] ==> cwand ?A ?B = wand ?A ?B",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("CombinableWands.get_m_smaller",
     "pgte pwrite ?p ==>
      get_m (multiply ?p ?a) ?hl = pmult ?p (get_m ?a ?hl)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))))),
    ("CombinableWands.multiply_order",
     "[| pgte pwrite ?p; ?a \<succeq> ?b |]
      ==> multiply ?p ?a \<succeq> multiply ?p ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("CombinableWands.non_scalable_instantiate",
     "~ scalable ?w ?a ==>
      EX p. ppos p & pgte pwrite p & ?a |#| multiply p ?w",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_var 0)
                )
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("CombinableWands.multiply_twice",
     "pgte pwrite ?a & pgte pwrite ?b ==>
      multiply ?a (multiply ?b ?x) = multiply (pmult ?a ?b) ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("CombinableWands.non_scalable_R_charact",
     "~ scalable ?w ?a ==>
      get_m (R ?a ?w) = comp_min_mask (get_m ?a) (get_m ?w) &
      get_h (R ?a ?w) = get_h ?w",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_var 1))),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 4, template_var 0)),
                   template_app (template_hole 4, template_var 1)))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_var 1))),
               template_app (template_hole 0, template_var 1)))
           ))),
    ("CombinableWands.wandI",
     "(!!a x. a : ?A & Some x = a \<oplus> ?w ==> x : ?B) ==>
      ?w : wand ?A ?B",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("CombinableWands.in_cwand",
     "(!!a x. a : ?A & Some x = R a ?w \<oplus> a ==> x : ?B) ==>
      ?w : cwand ?A ?B",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("CombinableWands.combinableI",
     "(!!a b.
          ppos a & ppos b & padd a b = pwrite ==>
          multiply_sem_assertion a (cwand ?A ?B) \<otimes>
          multiply_sem_assertion b (cwand ?A ?B)
          <= cwand ?A ?B) ==>
      combinable (cwand ?A ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))
           )))]
