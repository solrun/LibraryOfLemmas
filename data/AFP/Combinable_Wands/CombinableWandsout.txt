Loading theory "HOL-Library.Function_Algebras" (required by "Draft.CombinableWandsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.CombinableWandsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.CombinableWandsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.CombinableWandsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.129s elapsed time, 0.529s cpu time, 0.054s GC time
Loading theory "Draft.PosRat" (required by "Draft.CombinableWandsMoreTemplates" via "Draft.CombinableWands" via "Draft.PartialHeapSA" via "Draft.Mask")
### theory "HOL-Library.Set_Algebras"
### 0.202s elapsed time, 0.821s cpu time, 0.054s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.CombinableWandsMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.345s elapsed time, 1.383s cpu time, 0.147s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.CombinableWandsMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.PosRat"
### 0.273s elapsed time, 1.073s cpu time, 0.093s GC time
Loading theory "Draft.Mask" (required by "Draft.CombinableWandsMoreTemplates" via "Draft.CombinableWands" via "Draft.PartialHeapSA")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Proofs for inductive predicate(s) "rm_acc"
consts
  left :: "'a tree => 'a tree"
  Proving monotonicity ...
consts
  right :: "'a tree => 'a tree"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "{}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "{}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "{}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.BigO"
### 1.045s elapsed time, 3.951s cpu time, 0.982s GC time
Loading theory "Package_logic.SepAlgebra" (required by "Draft.CombinableWandsMoreTemplates" via "Draft.CombinableWands" via "Draft.PartialHeapSA" via "Package_logic.PackageLogic")
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
locale sep_algebra
  fixes plus :: "'a => 'a => 'a option"  (infixl \<open>\<oplus>\<close> 63)
    and core :: "'a => 'a"  (\<open> |_| \<close>)
  assumes "sep_algebra (\<oplus>) core"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Proofs for inductive predicate(s) "multi_plus"
### theory "HOL-Library.Stream"
### 1.158s elapsed time, 4.398s cpu time, 1.005s GC time
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Mask"
### 1.211s elapsed time, 4.509s cpu time, 1.005s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Package_logic.SepAlgebra"
### 0.536s elapsed time, 1.683s cpu time, 0.186s GC time
Loading theory "Package_logic.PackageLogic" (required by "Draft.CombinableWandsMoreTemplates" via "Draft.CombinableWands" via "Draft.PartialHeapSA")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.213s elapsed time, 7.415s cpu time, 1.339s GC time
Loading theory "Draft.Templates" (required by "Draft.CombinableWandsMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.126s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.CombinableWandsMoreTemplates")
locale package_logic
  fixes plus :: "'a => 'a => 'a option"  (infixl \<open>\<oplus>\<close> 63)
    and core :: "'a => 'a"  (\<open> |_| \<close>)
    and unit :: "'a"
    and stable :: "'a => bool"
  assumes "package_logic (\<oplus>) core unit stable"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "package_rhs"
  Proving monotonicity ...
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.548s elapsed time, 1.158s cpu time, 0.109s GC time
### theory "Package_logic.PackageLogic"
### 1.151s elapsed time, 2.308s cpu time, 0.269s GC time
Loading theory "Draft.PartialHeapSA" (required by "Draft.CombinableWandsMoreTemplates" via "Draft.CombinableWands")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.PartialHeapSA"
### 0.791s elapsed time, 0.869s cpu time, 0.106s GC time
Loading theory "Draft.CombinableWands" (required by "Draft.CombinableWandsMoreTemplates")
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.CombinableWands"
### 0.418s elapsed time, 0.966s cpu time, 0.750s GC time
Loading theory "Draft.CombinableWandsMoreTemplates"
val templateLemmas =
   [("CombinableWands.w_in_scaled", "?w : scaled ?w",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 0))
         )),
    ("CombinableWands.R_mono_transformer",
     "PartialSA.mono_transformer (R ?a)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_hole 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("CombinableWands.R_smaller", "?w \<succeq> R ?a ?w",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("CombinableWands.cwand_stronger", "cwand ?A ?B <= wand ?A ?B",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("CombinableWands.valid_bin",
     "valid_state (binary_mask (get_m ?a), get_h ?a)",
     template_predicate
      (
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0))),
             template_app (template_hole 0, template_var 0)))
         )),
    ("CombinableWands.R_compatible_same", "?a |#| ?w ==> R ?a ?w = ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 0))),
    ("CombinableWands.properties_of_combinable_wands",
     "intuitionistic ?B ==> cwand ?A ?B <= wand ?A ?B",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("CombinableWands.compatible_same_mask",
     "valid_mask (add_masks ?a ?w) ==> ?w = comp_min_mask ?a ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("CombinableWands.get_h_multiply",
     "pgte pwrite ?p ==> get_h (multiply ?p ?x) = get_h ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("CombinableWands.in_multiply_refl",
     "?x : ?A ==> multiply ?p ?x : multiply_sem_assertion ?p ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("CombinableWands.combinable_cwand",
     "[| combinable ?B; intuitionistic ?B |] ==> combinable (cwand ?A ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("CombinableWands.properties_of_combinable_wands",
     "[| intuitionistic ?B; combinable ?B |] ==> combinable (cwand ?A ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("CombinableWands.get_m_smaller_mask",
     "pgte pwrite ?p ==>
      get_m (multiply ?p ?a) = multiply_mask ?p (get_m ?a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_hole 2, template_var 0))))),
    ("CombinableWands.valid_mask_add_comp_min",
     "[| valid_mask ?a; valid_mask ?b |]
      ==> valid_mask (add_masks (comp_min_mask ?b ?a) ?b)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1)),
               template_var 0))
           ))),
    ("CombinableWands.in_multiply_sem",
     "?x : multiply_sem_assertion ?p ?A ==>
      EX a:?A. ?x \<succeq> multiply ?p a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0), t_empty)
           ))),
    ("CombinableWands.binary_same",
     "[| binary ?A; intuitionistic ?B |] ==> wand ?A ?B <= cwand ?A ?B",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("CombinableWands.properties_of_combinable_wands",
     "[| intuitionistic ?B; binary ?A |] ==> cwand ?A ?B = wand ?A ?B",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("CombinableWands.get_m_smaller",
     "pgte pwrite ?p ==>
      get_m (multiply ?p ?a) ?hl = pmult ?p (get_m ?a ?hl)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))))),
    ("CombinableWands.multiply_order",
     "[| pgte pwrite ?p; ?a \<succeq> ?b |]
      ==> multiply ?p ?a \<succeq> multiply ?p ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("CombinableWands.non_scalable_instantiate",
     "~ scalable ?w ?a ==>
      EX p. ppos p & pgte pwrite p & ?a |#| multiply p ?w",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_var 0)
                )
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("CombinableWands.multiply_twice",
     "pgte pwrite ?a & pgte pwrite ?b ==>
      multiply ?a (multiply ?b ?x) = multiply (pmult ?a ?b) ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("CombinableWands.non_scalable_R_charact",
     "~ scalable ?w ?a ==>
      get_m (R ?a ?w) = comp_min_mask (get_m ?a) (get_m ?w) &
      get_h (R ?a ?w) = get_h ?w",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_var 1))),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 4, template_var 0)),
                   template_app (template_hole 4, template_var 1)))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_var 1))),
               template_app (template_hole 0, template_var 1)))
           ))),
    ("CombinableWands.wandI",
     "(!!a x. a : ?A & Some x = a \<oplus> ?w ==> x : ?B) ==>
      ?w : wand ?A ?B",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("CombinableWands.in_cwand",
     "(!!a x. a : ?A & Some x = R a ?w \<oplus> a ==> x : ?B) ==>
      ?w : cwand ?A ?B",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("CombinableWands.combinableI",
     "(!!a b.
          ppos a & ppos b & padd a b = pwrite ==>
          multiply_sem_assertion a (cwand ?A ?B) \<otimes>
          multiply_sem_assertion b (cwand ?A ?B)
          <= cwand ?A ?B) ==>
      combinable (cwand ?A ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))
           )))]:
   (string * thm * template) list
### theory "Draft.CombinableWandsMoreTemplates"
### 0.399s elapsed time, 0.564s cpu time, 0.049s GC time
val it = (): unit
