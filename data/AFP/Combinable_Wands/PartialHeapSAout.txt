Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.PartialHeapSAMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.PartialHeapSAMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.PartialHeapSAMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.PartialHeapSAMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.128s elapsed time, 0.519s cpu time, 0.045s GC time
Loading theory "Draft.PosRat" (required by "Draft.PartialHeapSAMoreTemplates" via "Draft.PartialHeapSA" via "Draft.Mask")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.238s elapsed time, 0.957s cpu time, 0.045s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.PartialHeapSAMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.322s elapsed time, 1.279s cpu time, 0.120s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.PartialHeapSAMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.PosRat"
### 0.253s elapsed time, 1.001s cpu time, 0.075s GC time
Loading theory "Draft.Mask" (required by "Draft.PartialHeapSAMoreTemplates" via "Draft.PartialHeapSA")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Proofs for inductive predicate(s) "rm_acc"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "{}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 1.032s elapsed time, 3.848s cpu time, 0.932s GC time
Loading theory "Package_logic.SepAlgebra" (required by "Draft.PartialHeapSAMoreTemplates" via "Draft.PartialHeapSA" via "Package_logic.PackageLogic")
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
locale sep_algebra
  fixes plus :: "'a => 'a => 'a option"  (infixl \<open>\<oplus>\<close> 63)
    and core :: "'a => 'a"  (\<open> |_| \<close>)
  assumes "sep_algebra (\<oplus>) core"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.110s elapsed time, 4.163s cpu time, 0.937s GC time
Found termination order: "size <*mlex*> {}"
### theory "Draft.Mask"
### 1.119s elapsed time, 4.136s cpu time, 0.937s GC time
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "multi_plus"
  Proving monotonicity ...
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Package_logic.SepAlgebra"
### 0.500s elapsed time, 1.397s cpu time, 0.148s GC time
Loading theory "Package_logic.PackageLogic" (required by "Draft.PartialHeapSAMoreTemplates" via "Draft.PartialHeapSA")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.099s elapsed time, 6.954s cpu time, 1.255s GC time
Loading theory "Draft.Templates" (required by "Draft.PartialHeapSAMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.127s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.PartialHeapSAMoreTemplates")
locale package_logic
  fixes plus :: "'a => 'a => 'a option"  (infixl \<open>\<oplus>\<close> 63)
    and core :: "'a => 'a"  (\<open> |_| \<close>)
    and unit :: "'a"
    and stable :: "'a => bool"
  assumes "package_logic (\<oplus>) core unit stable"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "package_rhs"
  Proving monotonicity ...
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.767s elapsed time, 1.841s cpu time, 0.731s GC time
### theory "Package_logic.PackageLogic"
### 1.412s elapsed time, 2.954s cpu time, 0.920s GC time
Loading theory "Draft.PartialHeapSA" (required by "Draft.PartialHeapSAMoreTemplates")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.PartialHeapSA"
### 0.795s elapsed time, 0.893s cpu time, 0.132s GC time
Loading theory "Draft.PartialHeapSAMoreTemplates"
val templateLemmas =
   [("PartialHeapSA.larger_heap_refl", "larger_heap ?h ?h",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("PartialHeapSA.empty_heap_neutral", "?a ++ empty_heap = ?a",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("PartialHeapSA.get_pre", "get_m ?x = fst (Rep_state ?x)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("PartialHeapSA.get_pre", "get_h ?x = snd (Rep_state ?x)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("PartialHeapSA.unit_neutral", "Some ?a = ?a \<oplus> unit",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("PartialHeapSA.core_is_smaller", "Some ?x = ?x \<oplus>  |?x| ",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("PartialHeapSA.commutative", "?a \<oplus> ?b = ?b \<oplus> ?a",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("PartialHeapSA.get_h_m", "Rep_state ?x = (get_m ?x, get_h ?x)",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("PartialHeapSA.core_is_pure", "Some  |?x|  =  |?x|  \<oplus>  |?x| ",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("PartialHeapSA.larger_implies_larger_heap",
     "?a \<succeq> ?b ==> larger_heap (get_h ?a) (get_h ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("PartialHeapSA.compatible_heaps_comm",
     "compatible_heaps ?a ?b ==> ?a ++ ?b = ?b ++ ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("PartialHeapSA.larger_implies_greater_mask_hl",
     "?a \<succeq> ?b ==> pgte (get_m ?a ?hl) (get_m ?b ?hl)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("PartialHeapSA.valid_state_decompose",
     "valid_state (add_masks ?a ?b, ?h) ==> valid_state (?a, ?h)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0))
           ))),
    ("PartialHeapSA.multiply_valid",
     "pgte pwrite ?p ==>
      valid_state (multiply_mask ?p (get_m ?\<phi>), get_h ?\<phi>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_app (template_hole 1, template_var 0))),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("PartialHeapSA.larger_heap_anti",
     "[| larger_heap ?a ?b; larger_heap ?b ?a |] ==> ?a = ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_equation (template_var 1, template_var 0))),
    ("PartialHeapSA.larger_heap_trans",
     "[| larger_heap ?a ?b; larger_heap ?b ?c |] ==> larger_heap ?a ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("PartialHeapSA.larger_heap_comp",
     "[| larger_heap ?a ?b; compatible_heaps ?a ?c |]
      ==> compatible_heaps ?b ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("PartialHeapSA.compatible_heaps_sum",
     "[| compatible_heaps ?a ?b; compatible_heaps ?a ?c |]
      ==> compatible_heaps ?a (?b ++ ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("PartialHeapSA.larger_heap_plus",
     "[| larger_heap ?a ?b; larger_heap ?a ?c |]
      ==> larger_heap ?a (?b ++ ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("PartialHeapSA.plus_charact",
     "?a \<oplus> ?b = Some ?x ==>
      get_m ?x = add_masks (get_m ?a) (get_m ?b)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 2), template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 2)),
           template_app (template_hole 1, template_var 1))))),
    ("PartialHeapSA.plus_charact",
     "?a \<oplus> ?b = Some ?x ==> get_h ?x = get_h ?a ++ get_h ?b",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 2), template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 2)),
           template_app (template_hole 1, template_var 1))))),
    ("PartialHeapSA.core_sum",
     "Some ?c = ?a \<oplus> ?b ==> Some  |?c|  =  |?a|  \<oplus>  |?b| ",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 2),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 0, template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("PartialHeapSA.core_max",
     "Some ?x = ?x \<oplus> ?c ==> EX r. Some  |?x|  = ?c \<oplus> r",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 1),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("PartialHeapSA.valid_heapI",
     "(!!hl. ppos (?\<pi> hl) ==> ?h hl ~= None) ==> valid_heap ?\<pi> ?h",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("PartialHeapSA.stableI",
     "(!!hl. ppos (get_m ?\<phi> hl) = (get_h ?\<phi> hl ~= None)) ==>
      stable ?\<phi>",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("PartialHeapSA.state_ext",
     "[| get_h ?a = get_h ?b; get_m ?a = get_m ?b |] ==> ?a = ?b",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 3, template_var 0)),
        template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("PartialHeapSA.greaterI",
     "[| larger_heap (get_h ?a) (get_h ?b);
         greater_mask (get_m ?a) (get_m ?b) |]
      ==> ?a \<succeq> ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)),
              template_app (template_hole 3, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("PartialHeapSA.compatibleI",
     "[| compatible_heaps (get_h ?a) (get_h ?b);
         valid_mask (add_masks (get_m ?a) (get_m ?b)) |]
      ==> ?a |#| ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              template_app (template_hole 4, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 1)),
                template_app (template_hole 1, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("PartialHeapSA.stable_sum",
     "[| stable ?a; stable ?b; Some ?x = ?a \<oplus> ?b |] ==> stable ?x",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate (template_app (template_hole 3, template_var 1)),
        template_equation
         (template_app (template_hole 1, template_var 0),
          template_app
           (template_app (template_hole 0, template_var 2),
            template_var 1))],
       template_predicate
        (template_app (template_hole 3, template_var 0)))),
    ("PartialHeapSA.larger_compatible_sum_heaps",
     "[| larger_heap ?a ?x; larger_heap ?b ?y; compatible_heaps ?a ?b |]
      ==> compatible_heaps ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 3),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("PartialHeapSA.asso2",
     "?a \<oplus> ?b = Some ?ab & ?b \<oplus> ?c = None ==>
      ?ab \<oplus> ?c = None",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 3),
                      template_var 2)),
                  template_app (template_hole 1, template_var 1))),
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 2),
                    template_var 0)),
                template_hole 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 0))),
    ("PartialHeapSA.larger_heapI",
     "(!!hl x. ?h hl = Some x ==> ?h' hl = Some x) ==> larger_heap ?h' ?h",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("PartialHeapSA.asso1",
     "?a \<oplus> ?b = Some ?ab & ?b \<oplus> ?c = Some ?bc ==>
      ?ab \<oplus> ?c = ?a \<oplus> ?bc",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_hole 2,
                    template_app
                     (template_app (template_hole 1, template_var 4),
                      template_var 3)),
                  template_app (template_hole 0, template_var 2))),
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 3),
                    template_var 1)),
                template_app (template_hole 0, template_var 0)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 1, template_var 4),
           template_var 0)))),
    ("PartialHeapSA.valid_stateI",
     "[| valid_mask ?\<pi>; !!hl. ppos (?\<pi> hl) ==> ?h hl ~= None |]
      ==> valid_state (?\<pi>, ?h)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("PartialHeapSA.positivity",
     "[| ?a \<oplus> ?b = Some ?c; Some ?c = ?c \<oplus> ?c |]
      ==> Some ?a = ?a \<oplus> ?a",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          template_app (template_hole 0, template_var 0)),
        template_equation
         (template_app (template_hole 0, template_var 0),
          template_app
           (template_app (template_hole 1, template_var 0),
            template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 2)))),
    ("PartialHeapSA.larger_heaps_sum_ineq",
     "[| larger_heap ?a' ?a; larger_heap ?b' ?b; compatible_heaps ?a' ?b' |]
      ==> larger_heap (?a' ++ ?b') (?a ++ ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("PartialHeapSA.cancellative",
     "[| Some ?a = ?b \<oplus> ?x; Some ?a = ?b \<oplus> ?y;
          |?x|  =  |?y|  |]
      ==> ?x = ?y",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 3),
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 1)),
        template_equation
         (template_app (template_hole 3, template_var 3),
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 0)),
        template_equation
         (template_app (template_hole 0, template_var 1),
          template_app (template_hole 0, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("PartialHeapSA.compatible_heapsI",
     "(!!hl a b. [| ?h hl = Some a; ?h' hl = Some b |] ==> a = b) ==>
      compatible_heaps ?h ?h'",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("PartialHeapSA.compatibleI_old",
     "[| !!hl x y.
            snd ?\<phi> hl = Some x & snd ?\<phi>' hl = Some y ==> x = y;
         valid_mask (add_masks (fst ?\<phi>) (fst ?\<phi>')) |]
      ==> compatible ?\<phi> ?\<phi>'",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 1)),
                template_app (template_hole 1, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           )))]:
   (string * thm * template) list
### theory "Draft.PartialHeapSAMoreTemplates"
### 0.353s elapsed time, 0.532s cpu time, 0.057s GC time
val it = (): unit
