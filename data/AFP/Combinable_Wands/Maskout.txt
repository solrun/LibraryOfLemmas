Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.MaskMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Tree" (required by "Draft.MaskMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.MaskMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.MaskMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.137s elapsed time, 0.564s cpu time, 0.044s GC time
Loading theory "Draft.PosRat" (required by "Draft.MaskMoreTemplates" via "Draft.Mask")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.219s elapsed time, 0.891s cpu time, 0.044s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.MaskMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.325s elapsed time, 1.302s cpu time, 0.127s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.MaskMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.PosRat"
### 0.259s elapsed time, 1.022s cpu time, 0.084s GC time
Loading theory "Draft.Mask" (required by "Draft.MaskMoreTemplates")
Found termination order: "{}"
Found termination order: "{}"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "{}"
Proofs for inductive predicate(s) "rm_acc"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "{}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 1.055s elapsed time, 3.984s cpu time, 0.910s GC time
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.073s elapsed time, 3.959s cpu time, 0.827s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Mask"
### 1.148s elapsed time, 4.005s cpu time, 0.903s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.972s elapsed time, 6.077s cpu time, 1.078s GC time
Loading theory "Draft.Templates" (required by "Draft.MaskMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.049s elapsed time, 0.063s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.MaskMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.462s elapsed time, 0.516s cpu time, 0.057s GC time
Loading theory "Draft.MaskMoreTemplates"
val templateLemmas =
   [("Mask.greater_bmask_refl", "greater_bmask ?H ?H",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Mask.greater_mask_properties", "greater_mask ?\<pi> ?\<pi>",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Mask.minus_empty", "?\<pi> = add_masks ?\<pi> empty_mask",
     template_equation
      (template_var 0,
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Mask.mult_write_mask", "multiply_mask pwrite ?\<pi> = ?\<pi>",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Mask.big_add_greater", "big_greater_mask (big_add_masks ?A ?B) ?B",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 0)
         )),
    ("Mask.big_add_mask_neutral",
     "big_add_masks ?\<Pi> (%_. empty_mask) = ?\<Pi>",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), t_empty),
       template_var 0)),
    ("Mask.update_dm_same", "update_dm ?dm ?\<pi> ?\<pi> = ?dm",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 0),
       template_var 1)),
    ("Mask.valid_larger_mask",
     "valid_mask ?\<pi> = greater_mask full_mask ?\<pi>",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Mask.add_masks_comm", "add_masks ?a ?b = add_masks ?b ?a",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Mask.sym_equal_on_mask",
     "equal_on_mask ?\<pi> ?a ?b = equal_on_mask ?\<pi> ?b ?a",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("Mask.add_acc_uni_mask",
     "add_acc ?\<pi> ?hl ?p = add_masks ?\<pi> (uni_mask ?hl ?p)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Mask.add_masks_equiv_valid_null",
     "valid_null (add_masks ?a ?b) = (valid_null ?a & valid_null ?b)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Mask.greater_mask_uni_equiv",
     "greater_mask ?\<pi> (uni_mask ?hl ?r) = pgte (?\<pi> ?hl) ?r",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 2, template_var 1)),
         template_var 0))),
    ("Mask.big_add_masks_asso",
     "big_add_masks ?A (big_add_masks ?B ?C) =
      big_add_masks (big_add_masks ?A ?B) ?C",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Mask.add_masks_asso",
     "add_masks (add_masks ?a ?b) ?c = add_masks ?a (add_masks ?b ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Mask.greater_mask_uniI",
     "pgte (?\<pi> ?hl) ?r ==> greater_mask ?\<pi> (uni_mask ?hl ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_var 2, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Mask.upper_boundedI",
     "(!!hl. pgte ?p (?\<pi> hl)) ==> upper_bounded ?\<pi> ?p",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Mask.big_greater_iff",
     "big_greater_mask ?A ?B ==> EX C. ?A = big_add_masks ?B C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Mask.greater_mult",
     "greater_mask ?a ?b ==>
      greater_mask (multiply_mask ?p ?a) (multiply_mask ?p ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Mask.upper_bounded_smaller",
     "upper_bounded ?\<pi> ?a ==>
      upper_bounded (multiply_mask ?p ?\<pi>) (pmult ?p ?a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Mask.greater_mask_properties",
     "greater_mask ?\<pi>' ?\<pi> & greater_mask ?\<pi> ?\<pi>' ==>
      ?\<pi> = ?\<pi>'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)),
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 1))
            )],
       template_equation (template_var 0, template_var 1))),
    ("Mask.greater_mask_properties",
     "greater_mask ?a ?b & greater_mask ?b ?c ==> greater_mask ?a ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Mask.add_masks_cancellative",
     "add_masks ?b ?c = add_masks ?b ?d ==> ?c = ?d",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 0, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 0, template_var 2),
            template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Mask.greater_maskI",
     "(!!hl. pgte (?\<pi>' hl) (?\<pi> hl)) ==>
      greater_mask ?\<pi>' ?\<pi>",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Mask.mult_distr_masks",
     "multiply_mask ?a (add_masks ?b ?c) =
      add_masks (multiply_mask ?a ?b) (multiply_mask ?a ?c)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Mask.mult_add_states",
     "multiply_mask (padd ?a ?b) ?\<pi> =
      add_masks (multiply_mask ?a ?\<pi>) (multiply_mask ?b ?\<pi>)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Mask.valid_mult",
     "[| valid_mask ?\<pi>; pgte pwrite ?p |]
      ==> valid_mask (multiply_mask ?p ?\<pi>)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Mask.upper_valid_aux",
     "[| valid_mask ?a; ?a = add_masks ?b ?c |] ==> valid_mask ?b",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 0, template_var 1),
            template_var 0))],
       template_predicate
        (template_app (template_hole 2, template_var 1)))),
    ("Mask.greater_bmask_trans",
     "[| greater_bmask ?A ?B; greater_bmask ?B ?C |]
      ==> greater_bmask ?A ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Mask.upper_bounded_bigger",
     "[| upper_bounded ?\<pi> ?a; pgte ?b ?a |]
      ==> upper_bounded ?\<pi> ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("Mask.double_inclusion", "[| ?A <= ?B; ?B <= ?A |] ==> ?A = ?B",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_equation (template_var 1, template_var 0))),
    ("Mask.equal_on_bmask_greater",
     "[| equal_on_bmask ?\<pi>' ?h ?h'; greater_bmask ?\<pi>' ?\<pi> |]
      ==> equal_on_bmask ?\<pi> ?h ?h'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("Mask.greater_equal_on_mask",
     "[| equal_on_mask ?\<pi>' ?h ?h'; greater_mask ?\<pi>' ?\<pi> |]
      ==> equal_on_mask ?\<pi> ?h ?h'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("Mask.equal_on_mask_sum",
     "(equal_on_mask ?\<pi>1.0 ?h ?h' & equal_on_mask ?\<pi>2.0 ?h ?h') =
      equal_on_mask (add_masks ?\<pi>1.0 ?\<pi>2.0) ?h ?h'",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2),
           template_var 1)),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0)),
           template_var 2),
         template_var 1))),
    ("Mask.upper_valid",
     "[| valid_mask ?a; ?a = add_masks ?b ?c |]
      ==> valid_mask ?b & valid_mask ?c",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 2)),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 3, template_var 1)),
             template_app (template_hole 3, template_var 0))
           ))),
    ("Mask.equal_on_bmaskI",
     "(!!hl. ?\<pi> hl ==> ?h hl = ?h' hl) ==>
      equal_on_bmask ?\<pi> ?h ?h'",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Mask.const_sum_mask_greater",
     "[| add_masks ?a ?b = add_masks ?c ?d; greater_mask ?a ?c |]
      ==> greater_mask ?d ?b",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 3),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 2)
           ))),
    ("Mask.equal_on_maskI",
     "(!!hl. ppos (?\<pi> hl) ==> ?h hl = ?h' hl) ==>
      equal_on_mask ?\<pi> ?h ?h'",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Mask.valid_maskI",
     "[| !!hl. pgte pwrite (?\<pi> hl); !!f. ?\<pi> (null, f) = pnone |]
      ==> valid_mask ?\<pi>",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Mask.valid_multiply",
     "[| valid_mask ?a; upper_bounded ?a ?ma; pgte pwrite (pmult ?ma ?p) |]
      ==> valid_mask (multiply_mask ?p ?a)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("Mask.ssubsetI",
     "(!!\<pi> h. (\<pi>, h) : ?A ==> (\<pi>, h) : ?B) ==> ?A <= ?B",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("Mask.update_trans",
     "[| greater_mask ?\<pi> ?\<pi>'; greater_mask ?\<pi>' ?\<pi>'' |]
      ==> update_dm (update_dm ?dm ?\<pi> ?\<pi>') ?\<pi>' ?\<pi>'' =
          update_dm ?dm ?\<pi> ?\<pi>''",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 3),
                 template_var 2)),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 3),
           template_var 1)))),
    ("Mask.update_dm_equal_bmask",
     "?\<pi> = add_masks ?\<pi>' ?m ==>
      equal_on_bmask (update_dm ?dm ?\<pi> ?\<pi>') ?h' ?h =
      (equal_on_mask ?m ?h ?h' & equal_on_bmask ?dm ?h ?h')",
     template_implication
      ([template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 5, template_var 4),
            template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 5),
                 template_var 4)),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0),
               template_var 1)),
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0),
             template_var 1))))),
    ("Mask.greater_mask_decomp",
     "greater_mask ?a (add_masks ?b ?c) ==>
      EX a1 a2.
         ?a = add_masks a1 a2 & greater_mask a1 ?b & greater_mask a2 ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Mask.valid_sum",
     "[| valid_mask ?a; valid_mask ?b; upper_bounded ?a ?ma;
         upper_bounded ?b ?mb; pgte pwrite (padd ?ma ?mb) |]
      ==> valid_mask (add_masks ?a ?b)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2))
           ))),
    ("Mask.valid_sum",
     "[| valid_mask ?a; valid_mask ?b; upper_bounded ?a ?ma;
         upper_bounded ?b ?mb; pgte pwrite (padd ?ma ?mb) |]
      ==> upper_bounded (add_masks ?a ?b) (padd ?ma ?mb)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))
           )))]:
   (string * thm * template) list
### theory "Draft.MaskMoreTemplates"
### 0.268s elapsed time, 0.353s cpu time, 0.000s GC time
val it = (): unit
