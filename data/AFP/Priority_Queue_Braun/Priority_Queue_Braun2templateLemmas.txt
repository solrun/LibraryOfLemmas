   [("Priority_Queue_Braun2.mset_tree_merge",
     "braun \<langle>?l, ?x, ?r\<rangle> ==>
      mset_tree (merge ?l ?r) = mset_tree ?l + mset_tree ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 2)),
           template_app (template_hole 2, template_var 0))))),
    ("Priority_Queue_Braun2.replace_min_sift_down",
     "braun \<langle>?l, ?a, ?r\<rangle> ==>
      replace_min ?x \<langle>?l, ?a, ?r\<rangle> = sift_down ?l ?x ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0),
           template_var 1)))),
    ("Priority_Queue_Braun2.heap_merge",
     "[| braun \<langle>?l, ?x, ?r\<rangle>; heap ?l; heap ?r |]
      ==> heap (merge ?l ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1),
                template_var 0))
            ),
        template_predicate (template_app (template_hole 1, template_var 2)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Priority_Queue_Braun2.braun_size_merge",
     "braun \<langle>?l, ?x, ?r\<rangle> ==>
      braun (merge ?l ?r) & size (merge ?l ?r) = size ?l + size ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 0))),
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 1, template_var 2)),
                 template_app (template_hole 1, template_var 0))))
           ))),
    ("Priority_Queue_Braun2.del_left_braun_size",
     "[| del_left ?t = (?x, ?t'); braun ?t; ?t ~= \<langle>\<rangle> |]
      ==> braun ?t' & size ?t = size ?t' + 1",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 2),
          template_app
           (template_app (template_hole 9, template_var 1),
            template_var 0)),
        template_predicate (template_app (template_hole 8, template_var 2)),
        template_negation
         (template_equation (template_var 2, template_hole 5))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 8, template_var 0)),
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 2, template_var 0)),
                 template_hole 0)))
           )))]
