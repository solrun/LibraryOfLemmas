   [("Sorting_Braun.braun_heap_of_A", "braun (heap_of_A ?xs)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Sorting_Braun.heap_heap_of_A", "heap (heap_of_A ?xs)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Sorting_Braun.sortedA", "sorted (list_of_A (heap_of_A ?xs))",
     template_predicate
      (
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))
         )),
    ("Sorting_Braun.sortedB", "sorted (list_of_B (heap_of_B ?xs))",
     template_predicate
      (
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))
         )),
    ("Sorting_Braun.size_heap_of_A", "size (heap_of_A ?xs) = length ?xs",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Sorting_Braun.set_list_of_A", "set (list_of_A ?t) = set_tree ?t",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Sorting_Braun.mset_list_of_A", "mset (list_of_A ?t) = mset_tree ?t",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Sorting_Braun.mset_tree_heap_of_A",
     "mset_tree (heap_of_A ?xs) = mset ?xs",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Sorting_Braun.msetA", "mset (list_of_A (heap_of_A ?xs)) = mset ?xs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app (template_hole 2, template_var 0))),
    ("Sorting_Braun.msetB", "mset (list_of_B (heap_of_B ?xs)) = mset ?xs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app (template_hole 2, template_var 0))),
    ("Sorting_Braun.height_insert_ge",
     "height ?t <= height (Priority_Queue_Braun.insert ?x ?t)",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 1),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Sorting_Braun.list_of_B_braun_ptermination",
     "braun ?t ==> list_of_B_dom ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)
           ))),
    ("Sorting_Braun.t_list_of_B_braun_ptermination",
     "braun ?t ==> t_list_of_B_dom ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)
           ))),
    ("Sorting_Braun.t_insert_height", "t_insert ?x ?t <= height ?t + 1",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Sorting_Braun.sorted_list_of_A", "heap ?t ==> sorted (list_of_A ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Sorting_Braun.t_merge_height",
     "t_merge ?l ?r <= max (height ?l) (height ?r)",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Sorting_Braun.merge_size", "size (merge ?l ?r) = size ?l + size ?r",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Sorting_Braun.set_tree_merge",
     "set_tree (merge ?l ?r) = set_tree ?l Un set_tree ?r",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Sorting_Braun.mset_tree_merge",
     "mset_tree (merge ?l ?r) = mset_tree ?l + mset_tree ?r",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Sorting_Braun.merge_height_display",
     "height (merge ?l ?r) <= height \<langle>?l, ?x, ?r\<rangle>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 2), template_var 1)),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0),
           template_var 1)))),
    ("Sorting_Braun.set_list_of_B",
     "braun ?t ==> set (list_of_B ?t) = set_tree ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Sorting_Braun.mset_list_of_B",
     "braun ?t ==> mset (list_of_B ?t) = mset_tree ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Sorting_Braun.del_min_height",
     "braun ?t ==> height (del_min ?t) <= height ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Sorting_Braun.t_heap_of_A_bound",
     "t_heap_of_A ?xs <= length ?xs * (height (heap_of_A ?xs) + 1)",
     template_inequation
      (less_equals, template_app (template_hole 6, template_var 0),
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0))),
           template_hole 0)))),
    ("Sorting_Braun.merge_height",
     "height (merge ?l ?r) <= Suc (max (height ?l) (height ?r))",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 1)),
           template_app (template_hole 3, template_var 0))))),
    ("Sorting_Braun.braun_heapify",
     "?n <= length ?xs ==> braun (fst (heapify ?n ?xs))",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Sorting_Braun.heap_heapify",
     "?n <= length ?xs ==> heap (fst (heapify ?n ?xs))",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Sorting_Braun.t_heap_of_B_bound",
     "t_heap_of_B ?xs <= 6 * length ?xs + 1",
     template_inequation
      (less_equals, template_app (template_hole 8, template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2)))),
             template_app (template_hole 1, template_var 0))),
         template_hole 0))),
    ("Sorting_Braun.t_list_of_A_bound",
     "t_list_of_A ?t <= 2 * height ?t * size ?t",
     template_inequation
      (less_equals, template_app (template_hole 6, template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2))),
             template_app (template_hole 1, template_var 0))),
         template_app (template_hole 0, template_var 0)))),
    ("Sorting_Braun.braun_height_r_le",
     "braun \<langle>?l, ?x, ?r\<rangle> ==> height ?r <= height ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 2)))),
    ("Sorting_Braun.sorted_list_of_B",
     "[| braun ?t; heap ?t |] ==> sorted (list_of_B ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 0)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Sorting_Braun.size_prod_measure",
     "[| is_measure ?f; is_measure ?g |] ==> is_measure (size_prod ?f ?g)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Sorting_Braun.merge_heap",
     "[| heap ?l; heap ?r |] ==> heap (merge ?l ?r)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Sorting_Braun.t_del_min_bound",
     "braun ?t ==> t_del_min ?t <= 3 * height ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 5, template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_app (template_hole 0, template_var 0))))),
    ("Sorting_Braun.braun_height_l_le",
     "braun \<langle>?l, ?x, ?r\<rangle> ==> height ?l <= Suc (height ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 2),
         template_app
          (template_hole 0,
           template_app (template_hole 1, template_var 0))))),
    ("Sorting_Braun.heapify_snd",
     "?n <= length ?xs ==> snd (heapify ?n ?xs) = drop ?n ?xs",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Sorting_Braun.t_del_left_bound",
     "?t ~= \<langle>\<rangle> ==> t_del_left ?t <= 2 * height ?t",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 7))],
       template_inequation
        (less_equals, template_app (template_hole 5, template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_app (template_hole 0, template_var 0))))),
    ("Sorting_Braun.size_heapify",
     "?n <= length ?xs ==>
      size (fst (heapify ?n ?xs)) = min (length ?xs) ?n",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 5, template_var 0)),
           template_var 1)))),
    ("Sorting_Braun.mset_heapify",
     "?n <= length ?xs ==>
      mset_tree (fst (heapify ?n ?xs)) = mset (take ?n ?xs)",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Sorting_Braun.braun_height_node_eq",
     "braun \<langle>?l, ?x, ?r\<rangle> ==>
      height \<langle>?l, ?x, ?r\<rangle> = Suc (height ?l)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_hole 0,
           template_app (template_hole 1, template_var 2))))),
    ("Sorting_Braun.t_list_of_A_induct",
     "height ?t <= ?n ==> t_list_of_A ?t <= 2 * ?n * size ?t",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 6, template_var 1),
          template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 5, template_var 1),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))),
               template_var 0)),
           template_app (template_hole 0, template_var 1))))),
    ("Sorting_Braun.t_sift_down_height",
     "braun \<langle>?l, ?x, ?r\<rangle> ==>
      t_sift_down ?l ?x ?r <= height \<langle>?l, ?x, ?r\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1),
             template_var 0))))),
    ("Sorting_Braun.t_list_of_B_bound",
     "braun ?t ==> t_list_of_B ?t <= 3 * (height ?t + 1) * size ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 8, template_var 0),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_hole 4))),
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_hole 1))),
           template_app (template_hole 0, template_var 0))))),
    ("Sorting_Braun.t_heapify_bound",
     "?i <= length ?xs ==> t_heapify ?i ?xs <= 5 * ?i + 1",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 8, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1)))),
               template_var 1)),
           template_hole 0)))),
    ("Sorting_Braun.sift_down_height",
     "braun \<langle>?l, ?x, ?r\<rangle> ==>
      height (sift_down ?l ?x ?r) <= height \<langle>?l, ?x, ?r\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1),
             template_var 0))))),
    ("Sorting_Braun.t_heap_of_A_log_bound",
     "t_heap_of_A ?xs
      <= length ?xs *
         (nat \<lceil>log 2 (real (length ?xs + 1))\<rceil> + 1)",
     template_inequation
      (less_equals, template_app (template_hole 11, template_var 0),
       template_app
        (template_app
          (template_hole 10,
           template_app (template_hole 9, template_var 0)),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_hole 2))),
                   template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_hole 8,
                         template_app (template_hole 9, template_var 0)),
                       template_hole 0)))))),
           template_hole 0)))),
    ("Sorting_Braun.del_left_height",
     "[| del_left ?t = (?v, ?t'); ?t ~= \<langle>\<rangle> |]
      ==> height ?t' <= height ?t",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 2),
          template_app
           (template_app (template_hole 5, template_var 1),
            template_var 0)),
        template_negation
         (template_equation (template_var 2, template_hole 2))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 2)))),
    ("Sorting_Braun.heapify_snd_tup",
     "[| heapify ?n ?xs = (?t, ?ys); ?n <= length ?xs |]
      ==> ?ys = drop ?n ?xs",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0)),
        template_inequation
         (less_equals, template_var 3,
          template_app (template_hole 2, template_var 2))],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 2)))),
    ("Sorting_Braun.list_of_B_braun_simps",
     "braun \<langle>?l, ?a, ?r\<rangle> ==>
      list_of_B \<langle>?l, ?a, ?r\<rangle> =
      ?a # list_of_B (del_min \<langle>?l, ?a, ?r\<rangle>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_hole 2,
             template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 1),
                 template_var 0))))))),
    ("Sorting_Braun.t_list_of_B_induct",
     "[| braun ?t; height ?t <= ?n |]
      ==> t_list_of_B ?t <= 3 * (?n + 1) * size ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 8, template_var 1),
          template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 7, template_var 1),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_hole 3))),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1))),
           template_app (template_hole 0, template_var 1))))),
    ("Sorting_Braun.t_heapify_induct",
     "?i <= length ?xs ==>
      t_heapify ?i ?xs + height (fst (heapify ?i ?xs)) <= 5 * ?i + 1",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 11, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_var 1),
               template_var 0)),
           template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_var 0)))),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1)))),
               template_var 1)),
           template_hole 0)))),
    ("Sorting_Braun.t_list_of_A_log_bound",
     "braun ?t ==>
      t_list_of_A ?t
      <= 2 * nat \<lceil>log 2 (real (size ?t + 1))\<rceil> * size ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 12, template_var 0),
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_hole 10,
                   template_app (template_hole 9, template_hole 8))),
               template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4,
                         template_app (template_hole 9, template_hole 8))),
                     template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_hole 2,
                           template_app (template_hole 1, template_var 0)),
                         template_hole 0))))))),
           template_app (template_hole 1, template_var 0))))),
    ("Sorting_Braun.t_sortA",
     "t_heap_of_A ?xs + t_list_of_A (heap_of_A ?xs)
      <= 3 * length ?xs *
         (nat \<lceil>log 2 (real (length ?xs + 1))\<rceil> + 1)",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 15,
           template_app (template_hole 14, template_var 0)),
         template_app
          (template_hole 13,
           template_app (template_hole 12, template_var 0))),
       template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_hole 10,
                 template_app (template_hole 9, template_hole 8))),
             template_app (template_hole 7, template_var 0))),
         template_app
          (template_app
            (template_hole 15,
             template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_hole 8))),
                   template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_hole 15,
                         template_app (template_hole 7, template_var 0)),
                       template_hole 0)))))),
           template_hole 0)))),
    ("Sorting_Braun.t_list_of_B_log_bound",
     "braun ?t ==>
      t_list_of_B ?t
      <= 3 * (nat \<lceil>log 2 (real (size ?t + 1))\<rceil> + 1) *
         size ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 15, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 13, template_var 0),
         template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_hole 11,
                   template_app (template_hole 10, template_hole 9))),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_hole 7,
                     template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_hole 5,
                           template_app
                            (template_hole 4,
                             template_app
                              (template_hole 3, template_hole 9))),
                         template_app
                          (template_hole 2,
                           template_app
                            (template_app
                              (template_hole 8,
                               template_app
                                (template_hole 1, template_var 0)),
                             template_hole 0)))))),
                 template_hole 0))),
           template_app (template_hole 1, template_var 0))))),
    ("Sorting_Braun.t_list_of_B_braun_simps",
     "braun \<langle>?l, ?a, ?r\<rangle> ==>
      t_list_of_B \<langle>?l, ?a, ?r\<rangle> =
      1 + t_del_min \<langle>?l, ?a, ?r\<rangle> +
      t_list_of_B (del_min \<langle>?l, ?a, ?r\<rangle>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 6, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app (template_hole 6, template_var 2),
                     template_var 1),
                   template_var 0)))),
           template_app
            (template_hole 4,
             template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 6, template_var 2),
                   template_var 1),
                 template_var 0))))))),
    ("Sorting_Braun.t_sortB",
     "t_heap_of_B ?xs + t_list_of_B (heap_of_B ?xs)
      <= 3 * length ?xs *
         (nat \<lceil>log 2 (real (length ?xs + 1))\<rceil> + 3) +
         1",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 15,
           template_app (template_hole 14, template_var 0)),
         template_app
          (template_hole 13,
           template_app (template_hole 12, template_var 0))),
       template_app
        (template_app
          (template_hole 15,
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_hole 10,
                     template_app (template_hole 9, template_hole 8))),
                 template_app (template_hole 7, template_var 0))),
             template_app
              (template_app
                (template_hole 15,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 2, template_hole 8))),
                       template_app
                        (template_hole 1,
                         template_app
                          (template_app
                            (template_hole 15,
                             template_app
                              (template_hole 7, template_var 0)),
                           template_hole 0)))))),
               template_app
                (template_hole 10,
                 template_app (template_hole 9, template_hole 8))))),
         template_hole 0))),
    ("Sorting_Braun.heapify_correct",
     "[| ?n <= length ?xs; heapify ?n ?xs = (?t, ?ys) |]
      ==> size ?t = ?n &
          heap ?t & braun ?t & mset_tree ?t = mset (take ?n ?xs)",
     template_implication
      ([template_inequation
         (less_equals, template_var 3,
          template_app (template_hole 12, template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 10, template_var 3),
            template_var 2),
          template_app
           (template_app (template_hole 9, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 6, template_var 1)),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 8,
                 template_app (template_hole 5, template_var 1)),
               template_app
                (template_app
                  (template_hole 8,
                   template_app (template_hole 4, template_var 1)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 1)),
                   template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 2))))))
           )))]
