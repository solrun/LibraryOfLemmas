Loading theory "HOL-Library.Cancellation" (required by "Draft.Sorting_BraunMoreTemplates" via "Draft.Sorting_Braun" via "Draft.Priority_Queue_Braun" via "HOL-Library.Tree_Multiset" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Sorting_BraunMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Sorting_BraunMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Pattern_Aliases" (required by "Draft.Sorting_BraunMoreTemplates" via "Draft.Sorting_Braun" via "Draft.Priority_Queue_Braun")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### ML warning (line 135 of "~~/src/HOL/Library/Pattern_Aliases.thy"):
### Pattern is not exhaustive.
val check_pattern_syntax = fn: term -> term
val uncheck_pattern_syntax = fn: Proof.context -> term -> term
bundle pattern_aliases
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.128s elapsed time, 0.533s cpu time, 0.035s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Sorting_BraunMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "{}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
val it = (): unit
### theory "HOL-Library.Pattern_Aliases"
### 0.160s elapsed time, 0.661s cpu time, 0.035s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Sorting_BraunMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.327s elapsed time, 1.313s cpu time, 0.109s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Sorting_BraunMoreTemplates" via "Draft.ExtrEqs")
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
### theory "HOL-Library.Set_Algebras"
### 0.207s elapsed time, 0.816s cpu time, 0.074s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Sorting_BraunMoreTemplates" via "Draft.ExtrEqs")
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.427s elapsed time, 1.707s cpu time, 0.109s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Sorting_BraunMoreTemplates" via "Draft.Sorting_Braun" via "Draft.Priority_Queue_Braun" via "HOL-Library.Tree_Multiset")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
### theory "HOL-Library.BigO"
### 1.011s elapsed time, 3.803s cpu time, 0.834s GC time
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.093s elapsed time, 4.076s cpu time, 0.923s GC time
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
consts
  mset :: "'a list => 'a multiset"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "HOL-Library.Tree"
### 2.013s elapsed time, 6.342s cpu time, 1.192s GC time
Loading theory "Draft.Templates" (required by "Draft.Sorting_BraunMoreTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Tree_Real" (required by "Draft.Sorting_BraunMoreTemplates" via "Draft.Sorting_Braun" via "Draft.Priority_Queue_Braun" via "HOL-Data_Structures.Braun_Tree")
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.158s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Sorting_BraunMoreTemplates")
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
### theory "HOL-Library.Tree_Real"
### 0.312s elapsed time, 0.946s cpu time, 0.131s GC time
Loading theory "HOL-Data_Structures.Braun_Tree" (required by "Draft.Sorting_BraunMoreTemplates" via "Draft.Sorting_Braun" via "Draft.Priority_Queue_Braun")
Found termination order: "size <*mlex*> {}"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Data_Structures.Braun_Tree"
### 0.220s elapsed time, 0.673s cpu time, 0.067s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.617s elapsed time, 1.749s cpu time, 0.199s GC time
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 3.164s elapsed time, 7.900s cpu time, 1.355s GC time
Loading theory "HOL-Data_Structures.Priority_Queue_Specs" (required by "Draft.Sorting_BraunMoreTemplates" via "Draft.Sorting_Braun" via "Draft.Priority_Queue_Braun")
Loading theory "HOL-Library.Tree_Multiset" (required by "Draft.Sorting_BraunMoreTemplates" via "Draft.Sorting_Braun" via "Draft.Priority_Queue_Braun")
locale Priority_Queue
  fixes empty :: "'q"
    and is_empty :: "'q => bool"
    and insert :: "'a => 'q => 'q"
    and get_min :: "'q => 'a"
    and del_min :: "'q => 'q"
    and invar :: "'q => bool"
    and mset :: "'q => 'a multiset"
  assumes "Priority_Queue empty is_empty insert get_min del_min invar mset"
locale Priority_Queue_Merge
  fixes is_empty :: "'q => bool"
    and insert :: "'a => 'q => 'q"
    and get_min :: "'q => 'a"
    and del_min :: "'q => 'q"
    and invar :: "'q => bool"
    and mset :: "'q => 'a multiset"
    and empty :: "'q"
    and merge :: "'q => 'q => 'q"
  assumes
    "Priority_Queue_Merge is_empty insert get_min del_min invar mset empty
      merge"
### theory "HOL-Data_Structures.Priority_Queue_Specs"
### 0.047s elapsed time, 0.140s cpu time, 0.000s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree_Multiset"
### 0.543s elapsed time, 1.307s cpu time, 0.871s GC time
Loading theory "Draft.Priority_Queue_Braun" (required by "Draft.Sorting_BraunMoreTemplates" via "Draft.Sorting_Braun")
### Missing patterns in function definition:
### get_min \<langle>\<rangle> = undefined
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Missing patterns in function definition:
### del_left \<langle>\<rangle> = undefined
Found termination order: "size <*mlex*> {}"
### Missing patterns in function definition:
### !!vc vd ve va vb b.
###    sift_down \<langle>\<langle>vc, vd, ve\<rangle>, va, vb\<rangle> b
###     \<langle>\<rangle> =
###    undefined
Found termination order: "{}"
### theory "Draft.Priority_Queue_Braun"
### 0.961s elapsed time, 1.031s cpu time, 0.078s GC time
Loading theory "Draft.Sorting_Braun" (required by "Draft.Sorting_BraunMoreTemplates")
Found termination order: "length <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
### Missing patterns in function definition:
### !!v. heapify (Suc v) [] = undefined
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Missing patterns in function definition:
### !!vc vd ve va vb b.
###    t_sift_down \<langle>\<langle>vc, vd, ve\<rangle>, va, vb\<rangle> b
###     \<langle>\<rangle> =
###    undefined
### !!v va vc vd ve b.
###    t_sift_down \<langle>v, va, \<langle>vc, vd, ve\<rangle>\<rangle> b
###     \<langle>\<rangle> =
###    undefined
### !!b v va vb.
###    t_sift_down \<langle>\<rangle> b \<langle>v, va, vb\<rangle> = undefined
### Missing patterns in function definition:
### !!v. t_heapify (Suc v) [] = undefined
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size_prod size size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
"True"
  :: "bool"
"list_of_A (heap_of_A shuffle100)"
  :: "'a list"
Found termination order: "size_prod size size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### Missing patterns in function definition:
### t_del_left \<langle>\<rangle> = undefined
"t_list_of_A (heap_of_A shuffle100)"
  :: "nat"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Sorting_Braun"
### 1.275s elapsed time, 1.652s cpu time, 0.196s GC time
Loading theory "Draft.Sorting_BraunMoreTemplates"
val templateLemmas =
   [("Sorting_Braun.braun_heap_of_A", "braun (heap_of_A ?xs)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Sorting_Braun.heap_heap_of_A", "heap (heap_of_A ?xs)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Sorting_Braun.sortedA", "sorted (list_of_A (heap_of_A ?xs))",
     template_predicate
      (
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))
         )),
    ("Sorting_Braun.sortedB", "sorted (list_of_B (heap_of_B ?xs))",
     template_predicate
      (
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))
         )),
    ("Sorting_Braun.size_heap_of_A", "size (heap_of_A ?xs) = length ?xs",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Sorting_Braun.set_list_of_A", "set (list_of_A ?t) = set_tree ?t",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Sorting_Braun.mset_list_of_A", "mset (list_of_A ?t) = mset_tree ?t",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Sorting_Braun.mset_tree_heap_of_A",
     "mset_tree (heap_of_A ?xs) = mset ?xs",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Sorting_Braun.msetA", "mset (list_of_A (heap_of_A ?xs)) = mset ?xs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app (template_hole 2, template_var 0))),
    ("Sorting_Braun.msetB", "mset (list_of_B (heap_of_B ?xs)) = mset ?xs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app (template_hole 2, template_var 0))),
    ("Sorting_Braun.height_insert_ge",
     "height ?t <= height (Priority_Queue_Braun.insert ?x ?t)",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 1),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Sorting_Braun.list_of_B_braun_ptermination",
     "braun ?t ==> list_of_B_dom ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)
           ))),
    ("Sorting_Braun.t_list_of_B_braun_ptermination",
     "braun ?t ==> t_list_of_B_dom ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)
           ))),
    ("Sorting_Braun.t_insert_height", "t_insert ?x ?t <= height ?t + 1",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Sorting_Braun.sorted_list_of_A", "heap ?t ==> sorted (list_of_A ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Sorting_Braun.t_merge_height",
     "t_merge ?l ?r <= max (height ?l) (height ?r)",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Sorting_Braun.merge_size", "size (merge ?l ?r) = size ?l + size ?r",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Sorting_Braun.set_tree_merge",
     "set_tree (merge ?l ?r) = set_tree ?l Un set_tree ?r",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Sorting_Braun.mset_tree_merge",
     "mset_tree (merge ?l ?r) = mset_tree ?l + mset_tree ?r",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Sorting_Braun.merge_height_display",
     "height (merge ?l ?r) <= height \<langle>?l, ?x, ?r\<rangle>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 2), template_var 1)),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0),
           template_var 1)))),
    ("Sorting_Braun.set_list_of_B",
     "braun ?t ==> set (list_of_B ?t) = set_tree ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Sorting_Braun.mset_list_of_B",
     "braun ?t ==> mset (list_of_B ?t) = mset_tree ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Sorting_Braun.del_min_height",
     "braun ?t ==> height (del_min ?t) <= height ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Sorting_Braun.t_heap_of_A_bound",
     "t_heap_of_A ?xs <= length ?xs * (height (heap_of_A ?xs) + 1)",
     template_inequation
      (less_equals, template_app (template_hole 6, template_var 0),
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0))),
           template_hole 0)))),
    ("Sorting_Braun.merge_height",
     "height (merge ?l ?r) <= Suc (max (height ?l) (height ?r))",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 1)),
           template_app (template_hole 3, template_var 0))))),
    ("Sorting_Braun.braun_heapify",
     "?n <= length ?xs ==> braun (fst (heapify ?n ?xs))",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Sorting_Braun.heap_heapify",
     "?n <= length ?xs ==> heap (fst (heapify ?n ?xs))",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Sorting_Braun.t_heap_of_B_bound",
     "t_heap_of_B ?xs <= 6 * length ?xs + 1",
     template_inequation
      (less_equals, template_app (template_hole 8, template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2)))),
             template_app (template_hole 1, template_var 0))),
         template_hole 0))),
    ("Sorting_Braun.t_list_of_A_bound",
     "t_list_of_A ?t <= 2 * height ?t * size ?t",
     template_inequation
      (less_equals, template_app (template_hole 6, template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2))),
             template_app (template_hole 1, template_var 0))),
         template_app (template_hole 0, template_var 0)))),
    ("Sorting_Braun.braun_height_r_le",
     "braun \<langle>?l, ?x, ?r\<rangle> ==> height ?r <= height ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 2)))),
    ("Sorting_Braun.sorted_list_of_B",
     "[| braun ?t; heap ?t |] ==> sorted (list_of_B ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 0)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Sorting_Braun.size_prod_measure",
     "[| is_measure ?f; is_measure ?g |] ==> is_measure (size_prod ?f ?g)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Sorting_Braun.merge_heap",
     "[| heap ?l; heap ?r |] ==> heap (merge ?l ?r)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Sorting_Braun.t_del_min_bound",
     "braun ?t ==> t_del_min ?t <= 3 * height ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 5, template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_app (template_hole 0, template_var 0))))),
    ("Sorting_Braun.braun_height_l_le",
     "braun \<langle>?l, ?x, ?r\<rangle> ==> height ?l <= Suc (height ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 2),
         template_app
          (template_hole 0,
           template_app (template_hole 1, template_var 0))))),
    ("Sorting_Braun.heapify_snd",
     "?n <= length ?xs ==> snd (heapify ?n ?xs) = drop ?n ?xs",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Sorting_Braun.t_del_left_bound",
     "?t ~= \<langle>\<rangle> ==> t_del_left ?t <= 2 * height ?t",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 7))],
       template_inequation
        (less_equals, template_app (template_hole 5, template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_app (template_hole 0, template_var 0))))),
    ("Sorting_Braun.size_heapify",
     "?n <= length ?xs ==>
      size (fst (heapify ?n ?xs)) = min (length ?xs) ?n",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 5, template_var 0)),
           template_var 1)))),
    ("Sorting_Braun.mset_heapify",
     "?n <= length ?xs ==>
      mset_tree (fst (heapify ?n ?xs)) = mset (take ?n ?xs)",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Sorting_Braun.braun_height_node_eq",
     "braun \<langle>?l, ?x, ?r\<rangle> ==>
      height \<langle>?l, ?x, ?r\<rangle> = Suc (height ?l)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_hole 0,
           template_app (template_hole 1, template_var 2))))),
    ("Sorting_Braun.t_list_of_A_induct",
     "height ?t <= ?n ==> t_list_of_A ?t <= 2 * ?n * size ?t",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 6, template_var 1),
          template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 5, template_var 1),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))),
               template_var 0)),
           template_app (template_hole 0, template_var 1))))),
    ("Sorting_Braun.t_sift_down_height",
     "braun \<langle>?l, ?x, ?r\<rangle> ==>
      t_sift_down ?l ?x ?r <= height \<langle>?l, ?x, ?r\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1),
             template_var 0))))),
    ("Sorting_Braun.t_list_of_B_bound",
     "braun ?t ==> t_list_of_B ?t <= 3 * (height ?t + 1) * size ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 8, template_var 0),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_hole 4))),
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_hole 1))),
           template_app (template_hole 0, template_var 0))))),
    ("Sorting_Braun.t_heapify_bound",
     "?i <= length ?xs ==> t_heapify ?i ?xs <= 5 * ?i + 1",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 8, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1)))),
               template_var 1)),
           template_hole 0)))),
    ("Sorting_Braun.sift_down_height",
     "braun \<langle>?l, ?x, ?r\<rangle> ==>
      height (sift_down ?l ?x ?r) <= height \<langle>?l, ?x, ?r\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1),
             template_var 0))))),
    ("Sorting_Braun.t_heap_of_A_log_bound",
     "t_heap_of_A ?xs
      <= length ?xs *
         (nat \<lceil>log 2 (real (length ?xs + 1))\<rceil> + 1)",
     template_inequation
      (less_equals, template_app (template_hole 11, template_var 0),
       template_app
        (template_app
          (template_hole 10,
           template_app (template_hole 9, template_var 0)),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_hole 2))),
                   template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_hole 8,
                         template_app (template_hole 9, template_var 0)),
                       template_hole 0)))))),
           template_hole 0)))),
    ("Sorting_Braun.del_left_height",
     "[| del_left ?t = (?v, ?t'); ?t ~= \<langle>\<rangle> |]
      ==> height ?t' <= height ?t",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 2),
          template_app
           (template_app (template_hole 5, template_var 1),
            template_var 0)),
        template_negation
         (template_equation (template_var 2, template_hole 2))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 2)))),
    ("Sorting_Braun.heapify_snd_tup",
     "[| heapify ?n ?xs = (?t, ?ys); ?n <= length ?xs |]
      ==> ?ys = drop ?n ?xs",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0)),
        template_inequation
         (less_equals, template_var 3,
          template_app (template_hole 2, template_var 2))],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 2)))),
    ("Sorting_Braun.list_of_B_braun_simps",
     "braun \<langle>?l, ?a, ?r\<rangle> ==>
      list_of_B \<langle>?l, ?a, ?r\<rangle> =
      ?a # list_of_B (del_min \<langle>?l, ?a, ?r\<rangle>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_hole 2,
             template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 1),
                 template_var 0))))))),
    ("Sorting_Braun.t_list_of_B_induct",
     "[| braun ?t; height ?t <= ?n |]
      ==> t_list_of_B ?t <= 3 * (?n + 1) * size ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 8, template_var 1),
          template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 7, template_var 1),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_hole 3))),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1))),
           template_app (template_hole 0, template_var 1))))),
    ("Sorting_Braun.t_heapify_induct",
     "?i <= length ?xs ==>
      t_heapify ?i ?xs + height (fst (heapify ?i ?xs)) <= 5 * ?i + 1",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 11, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_var 1),
               template_var 0)),
           template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_var 0)))),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1)))),
               template_var 1)),
           template_hole 0)))),
    ("Sorting_Braun.t_list_of_A_log_bound",
     "braun ?t ==>
      t_list_of_A ?t
      <= 2 * nat \<lceil>log 2 (real (size ?t + 1))\<rceil> * size ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 12, template_var 0),
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_hole 10,
                   template_app (template_hole 9, template_hole 8))),
               template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4,
                         template_app (template_hole 9, template_hole 8))),
                     template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_hole 2,
                           template_app (template_hole 1, template_var 0)),
                         template_hole 0))))))),
           template_app (template_hole 1, template_var 0))))),
    ("Sorting_Braun.t_sortA",
     "t_heap_of_A ?xs + t_list_of_A (heap_of_A ?xs)
      <= 3 * length ?xs *
         (nat \<lceil>log 2 (real (length ?xs + 1))\<rceil> + 1)",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 15,
           template_app (template_hole 14, template_var 0)),
         template_app
          (template_hole 13,
           template_app (template_hole 12, template_var 0))),
       template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_hole 10,
                 template_app (template_hole 9, template_hole 8))),
             template_app (template_hole 7, template_var 0))),
         template_app
          (template_app
            (template_hole 15,
             template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_hole 8))),
                   template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_hole 15,
                         template_app (template_hole 7, template_var 0)),
                       template_hole 0)))))),
           template_hole 0)))),
    ("Sorting_Braun.t_list_of_B_log_bound",
     "braun ?t ==>
      t_list_of_B ?t
      <= 3 * (nat \<lceil>log 2 (real (size ?t + 1))\<rceil> + 1) *
         size ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 15, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 13, template_var 0),
         template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_hole 11,
                   template_app (template_hole 10, template_hole 9))),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_hole 7,
                     template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_hole 5,
                           template_app
                            (template_hole 4,
                             template_app
                              (template_hole 3, template_hole 9))),
                         template_app
                          (template_hole 2,
                           template_app
                            (template_app
                              (template_hole 8,
                               template_app
                                (template_hole 1, template_var 0)),
                             template_hole 0)))))),
                 template_hole 0))),
           template_app (template_hole 1, template_var 0))))),
    ("Sorting_Braun.t_list_of_B_braun_simps",
     "braun \<langle>?l, ?a, ?r\<rangle> ==>
      t_list_of_B \<langle>?l, ?a, ?r\<rangle> =
      1 + t_del_min \<langle>?l, ?a, ?r\<rangle> +
      t_list_of_B (del_min \<langle>?l, ?a, ?r\<rangle>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 6, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app (template_hole 6, template_var 2),
                     template_var 1),
                   template_var 0)))),
           template_app
            (template_hole 4,
             template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 6, template_var 2),
                   template_var 1),
                 template_var 0))))))),
    ("Sorting_Braun.t_sortB",
     "t_heap_of_B ?xs + t_list_of_B (heap_of_B ?xs)
      <= 3 * length ?xs *
         (nat \<lceil>log 2 (real (length ?xs + 1))\<rceil> + 3) +
         1",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 15,
           template_app (template_hole 14, template_var 0)),
         template_app
          (template_hole 13,
           template_app (template_hole 12, template_var 0))),
       template_app
        (template_app
          (template_hole 15,
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_hole 10,
                     template_app (template_hole 9, template_hole 8))),
                 template_app (template_hole 7, template_var 0))),
             template_app
              (template_app
                (template_hole 15,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 2, template_hole 8))),
                       template_app
                        (template_hole 1,
                         template_app
                          (template_app
                            (template_hole 15,
                             template_app
                              (template_hole 7, template_var 0)),
                           template_hole 0)))))),
               template_app
                (template_hole 10,
                 template_app (template_hole 9, template_hole 8))))),
         template_hole 0))),
    ("Sorting_Braun.heapify_correct",
     "[| ?n <= length ?xs; heapify ?n ?xs = (?t, ?ys) |]
      ==> size ?t = ?n &
          heap ?t & braun ?t & mset_tree ?t = mset (take ?n ?xs)",
     template_implication
      ([template_inequation
         (less_equals, template_var 3,
          template_app (template_hole 12, template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 10, template_var 3),
            template_var 2),
          template_app
           (template_app (template_hole 9, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 6, template_var 1)),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 8,
                 template_app (template_hole 5, template_var 1)),
               template_app
                (template_app
                  (template_hole 8,
                   template_app (template_hole 4, template_var 1)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 1)),
                   template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 2))))))
           )))]:
   (string * thm * template) list
### theory "Draft.Sorting_BraunMoreTemplates"
### 0.667s elapsed time, 1.592s cpu time, 1.087s GC time
val it = (): unit
