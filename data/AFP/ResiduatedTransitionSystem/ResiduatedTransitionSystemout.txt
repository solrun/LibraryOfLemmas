Loading theory "Draft.ResiduatedTransitionSystem" (required by "Draft.ResiduatedTransitionSystemMoreTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ResiduatedTransitionSystemMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ResiduatedTransitionSystemMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ResiduatedTransitionSystemMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.155s elapsed time, 0.606s cpu time, 0.116s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ResiduatedTransitionSystemMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
locale partial_magma
  fixes OP :: "'a => 'a => 'a"
  assumes "partial_magma OP"
locale residuation
  fixes resid :: "'a => 'a => 'a"  (infix \<open>\\<close> 70)
  assumes "residuation (\)"
### theory "HOL-Library.Set_Algebras"
### 0.291s elapsed time, 1.141s cpu time, 0.228s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ResiduatedTransitionSystemMoreTemplates" via "Draft.ExtrEqs")
locale rts
  fixes resid :: "'a => 'a => 'a"  (infix \<open>\\<close> 70)
  assumes "rts (\)"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.386s elapsed time, 1.528s cpu time, 0.228s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ResiduatedTransitionSystemMoreTemplates" via "Draft.ExtrEqs")
locale weakly_extensional_rts
  fixes resid :: "'a => 'a => 'a"  (infix \<open>\\<close> 70)
  assumes "weakly_extensional_rts (\)"
locale extensional_rts
  fixes resid :: "'a => 'a => 'a"  (infix \<open>\\<close> 70)
  assumes "extensional_rts (\)"
locale rts
  fixes resid :: "'a => 'a => 'a"  (infix \<open>\\<close> 70)
  assumes "rts (\)"
locale rts_with_composites
  fixes resid :: "'a => 'a => 'a"  (infix \<open>\\<close> 70)
  assumes "rts_with_composites (\)"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
locale rts
  fixes resid :: "'a => 'a => 'a"  (infix \<open>\\<close> 70)
  assumes "rts (\)"
Found termination order: "size <*mlex*> {}"
locale rts_with_joins
  fixes resid :: "'a => 'a => 'a"  (infix \<open>\\<close> 70)
  assumes "rts_with_joins (\)"
consts
  shift :: "'a list => 'a stream => 'a stream"
locale weakly_extensional_rts
  fixes resid :: "'a => 'a => 'a"  (infix \<open>\\<close> 70)
  assumes "weakly_extensional_rts (\)"
Proofs for coinductive predicate(s) "streamsp"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
locale extensional_rts
  fixes resid :: "'a => 'a => 'a"  (infix \<open>\\<close> 70)
  assumes "extensional_rts (\)"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
locale extensional_rts_with_joins
  fixes resid :: "'a => 'a => 'a"  (infix \<open>\\<close> 70)
  assumes "extensional_rts_with_joins (\)"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 1.010s elapsed time, 3.831s cpu time, 0.827s GC time
locale extensional_rts_with_composites
  fixes resid :: "'a => 'a => 'a"  (infix \<open>\\<close> 70)
  assumes "extensional_rts_with_composites (\)"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
locale confluent_rts
  fixes resid :: "'a => 'a => 'a"  (infix \<open>\\<close> 70)
  assumes "confluent_rts (\)"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
locale simulation
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\\<^sub>A\<close> 70)
    and B :: "'b => 'b => 'b"  (infixr \<open>\\<^sub>B\<close> 70)
    and F :: "'a => 'b"
  assumes "simulation (\\<^sub>A) (\\<^sub>B) F"
### theory "HOL-Library.Stream"
### 1.107s elapsed time, 4.033s cpu time, 0.899s GC time
Found termination order: "size <*mlex*> {}"
locale identity_simulation
  fixes resid :: "'a => 'a => 'a"  (infix \<open>\\<close> 70)
  assumes "identity_simulation (\)"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale composite_simulation
  fixes A :: "'a => 'a => 'a"
    and B :: "'b => 'b => 'b"
    and C :: "'c => 'c => 'c"
    and F :: "'a => 'b"
    and G :: "'b => 'c"
  assumes "composite_simulation A B C F G"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale simulation_to_weakly_extensional_rts
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\\<^sub>A\<close> 70)
    and B :: "'b => 'b => 'b"  (infixr \<open>\\<^sub>B\<close> 70)
    and F :: "'a => 'b"
  assumes "simulation_to_weakly_extensional_rts (\\<^sub>A) (\\<^sub>B) F"
Found termination order: "size <*mlex*> {}"
locale simulation_to_extensional_rts
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\\<^sub>A\<close> 70)
    and B :: "'b => 'b => 'b"  (infixr \<open>\\<^sub>B\<close> 70)
    and F :: "'a => 'b"
  assumes "simulation_to_extensional_rts (\\<^sub>A) (\\<^sub>B) F"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale simulation_between_extensional_rts
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\\<^sub>A\<close> 70)
    and B :: "'b => 'b => 'b"  (infixr \<open>\\<^sub>B\<close> 70)
    and F :: "'a => 'b"
  assumes "simulation_between_extensional_rts (\\<^sub>A) (\\<^sub>B) F"
locale transformation
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\\<^sub>A\<close> 70)
    and B :: "'b => 'b => 'b"  (infixr \<open>\\<^sub>B\<close> 70)
    and F :: "'a => 'b"
    and G :: "'a => 'b"
    and \<tau> :: "'a => 'b"
  assumes "transformation (\\<^sub>A) (\\<^sub>B) F G \<tau>"
locale normal_sub_rts
  fixes resid :: "'a => 'a => 'a"  (infix \<open>\\<close> 70)
    and \<NN> :: "'a set"
  assumes "normal_sub_rts (\) \<NN>"
Found termination order: "size <*mlex*> {}"
locale normal_in_extensional_rts_with_composites
  fixes resid :: "'a => 'a => 'a"  (infix \<open>\\<close> 70)
    and \<NN> :: "'a set"
  assumes "normal_in_extensional_rts_with_composites (\) \<NN>"
locale normal_sub_rts
  fixes resid :: "'a => 'a => 'a"  (infix \<open>\\<close> 70)
    and \<NN> :: "'a set"
  assumes "normal_sub_rts (\) \<NN>"
### theory "HOL-Library.Tree"
### 2.031s elapsed time, 6.447s cpu time, 1.224s GC time
Loading theory "Draft.Templates" (required by "Draft.ResiduatedTransitionSystemMoreTemplates" via "Draft.ExtrEqs")
Proofs for inductive predicate(s) "Cong'"
  Proving monotonicity ...
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.070s elapsed time, 0.161s cpu time, 0.054s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ResiduatedTransitionSystemMoreTemplates")
locale coherent_normal_sub_rts
  fixes resid :: "'a => 'a => 'a"  (infix \<open>\\<close> 70)
    and \<NN> :: "'a set"
  assumes "coherent_normal_sub_rts (\) \<NN>"
locale normal_sub_rts
  fixes resid :: "'a => 'a => 'a"  (infix \<open>\\<close> 70)
    and \<NN> :: "'a set"
  assumes "normal_sub_rts (\) \<NN>"
locale coherent_normal_sub_rts
  fixes resid :: "'a => 'a => 'a"  (infix \<open>\\<close> 70)
    and \<NN> :: "'a set"
  assumes "coherent_normal_sub_rts (\) \<NN>"
locale normal_sub_rts
  fixes resid :: "'a => 'a => 'a"  (infix \<open>\\<close> 70)
    and \<NN> :: "'a set"
  assumes "normal_sub_rts (\) \<NN>"
locale quotient_by_coherent_normal
  fixes resid :: "'a => 'a => 'a"  (infix \<open>\\<close> 70)
    and \<NN> :: "'a set"
  assumes "quotient_by_coherent_normal (\) \<NN>"
locale rts
  fixes resid :: "'a => 'a => 'a"  (infix \<open>\\<close> 70)
  assumes "rts (\)"
locale paths_in_rts
  fixes resid :: "'a => 'a => 'a"  (infix \<open>\\<close> 70)
  assumes "paths_in_rts (\)"
Found termination order: "{}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.545s elapsed time, 1.140s cpu time, 0.108s GC time
Found termination order: "length <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
locale paths_in_rts
  fixes resid :: "'a => 'a => 'a"  (infix \<open>\\<close> 70)
  assumes "paths_in_rts (\)"
locale paths_in_weakly_extensional_rts
  fixes resid :: "'a => 'a => 'a"  (infix \<open>\\<close> 70)
  assumes "paths_in_weakly_extensional_rts (\)"
Found termination order: "{}"
Found termination order: "length <*mlex*> {}"
locale paths_in_confluent_rts
  fixes resid :: "'a => 'a => 'a"  (infix \<open>\\<close> 70)
  assumes "paths_in_confluent_rts (\)"
locale simulation
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\\<^sub>A\<close> 70)
    and B :: "'b => 'b => 'b"  (infixr \<open>\\<^sub>B\<close> 70)
    and F :: "'a => 'b"
  assumes "simulation (\\<^sub>A) (\\<^sub>B) F"
locale paths_in_rts_with_normal
  fixes resid :: "'a => 'a => 'a"  (infix \<open>\\<close> 70)
    and \<NN> :: "'a set"
  assumes "paths_in_rts_with_normal (\) \<NN>"
locale paths_in_rts_with_coherent_normal
  fixes resid :: "'a => 'a => 'a"  (infix \<open>\\<close> 70)
    and \<NN> :: "'a set"
  assumes "paths_in_rts_with_coherent_normal (\) \<NN>"
Proofs for inductive predicate(s) "PCong"
  Proving monotonicity ...
locale composite_completion
  fixes resid :: "'a => 'a => 'a"  (infix \<open>\\<close> 70)
  assumes "composite_completion (\)"
locale composite_completion_of_extensional_rts
  fixes resid :: "'a => 'a => 'a"  (infix \<open>\\<close> 70)
  assumes "composite_completion_of_extensional_rts (\)"
locale extension_of_simulation
  fixes
    resid\<^sub>A :: "'a => 'a => 'a"  (infix \<open>\\<^sub>A\<close> 70)
    and
    resid\<^sub>B :: "'b => 'b => 'b"  (infix \<open>\\<^sub>B\<close> 70)
    and F :: "'a => 'b"
  assumes "extension_of_simulation (\\<^sub>A) (\\<^sub>B) F"
Found termination order: "length <*mlex*> {}"
locale product_rts
  fixes R1 :: "'a1 => 'a1 => 'a1"  (infix \<open>\\<^sub>1\<close> 70)
    and R2 :: "'a2 => 'a2 => 'a2"  (infix \<open>\\<^sub>2\<close> 70)
  assumes "product_rts (\\<^sub>1) (\\<^sub>2)"
locale product_of_weakly_extensional_rts
  fixes R1 :: "'a => 'a => 'a"  (infix \<open>\\<^sub>1\<close> 70)
    and R2 :: "'b => 'b => 'b"  (infix \<open>\\<^sub>2\<close> 70)
  assumes "product_of_weakly_extensional_rts (\\<^sub>1) (\\<^sub>2)"
locale product_of_extensional_rts
  fixes R1 :: "'a => 'a => 'a"  (infix \<open>\\<^sub>1\<close> 70)
    and R2 :: "'b => 'b => 'b"  (infix \<open>\\<^sub>2\<close> 70)
  assumes "product_of_extensional_rts (\\<^sub>1) (\\<^sub>2)"
locale product_simulation
  fixes
    A1 :: "'a1 => 'a1 => 'a1"  (infix \<open>\\<^sub>A\<^sub>1\<close> 70)
    and
    A2 :: "'a2 => 'a2 => 'a2"  (infix \<open>\\<^sub>A\<^sub>2\<close> 70)
    and
    B1 :: "'b1 => 'b1 => 'b1"  (infix \<open>\\<^sub>B\<^sub>1\<close> 70)
    and
    B2 :: "'b2 => 'b2 => 'b2"  (infix \<open>\\<^sub>B\<^sub>2\<close> 70)
    and F1 :: "'a1 => 'b1"
    and F2 :: "'a2 => 'b2"
  assumes
    "product_simulation (\\<^sub>A\<^sub>1) (\\<^sub>A\<^sub>2)
      (\\<^sub>B\<^sub>1) (\\<^sub>B\<^sub>2) F1 F2"
locale binary_simulation
  fixes
    A1 :: "'a1 => 'a1 => 'a1"  (infixr \<open>\\<^sub>A\<^sub>1\<close> 70)
    and
    A2 :: "'a2 => 'a2 => 'a2"  (infixr \<open>\\<^sub>A\<^sub>2\<close> 70)
    and B :: "'b => 'b => 'b"  (infixr \<open>\\<^sub>B\<close> 70)
    and F :: "'a1 * 'a2 => 'b"
  assumes
    "binary_simulation (\\<^sub>A\<^sub>1) (\\<^sub>A\<^sub>2) (\\<^sub>B)
      F"
locale sub_rts
  fixes R :: "'a => 'a => 'a"  (infix \<open>\\<^sub>R\<close> 70)
    and Arr :: "'a => bool"
  assumes "sub_rts (\\<^sub>R) Arr"
locale sub_weakly_extensional_rts
  fixes R :: "'a => 'a => 'a"  (infix \<open>\\<^sub>R\<close> 70)
    and Arr :: "'a => bool"
  assumes "sub_weakly_extensional_rts (\\<^sub>R) Arr"
### theory "Draft.ResiduatedTransitionSystem"
### 7.380s elapsed time, 12.894s cpu time, 1.876s GC time
Loading theory "Draft.ResiduatedTransitionSystemMoreTemplates"
val templateLemmas =
   [("ResiduatedTransitionSystem.simulation_comp",
     "[| simulation ?A ?B ?F; simulation ?B ?C ?G |]
      ==> simulation ?A ?C (?G o ?F)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("ResiduatedTransitionSystem.composite_completion_of_rts",
     "rts ?A ==>
      EX C I.
         rts_with_composites C &
         simulation ?A C I &
         (ALL B J.
             extensional_rts_with_composites B & simulation ?A B J -->
             (EX! J'. simulation C B J' & J' o I = J))",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 0))],
       template_predicate (template_app (template_hole 13, t_empty))))]:
   (string * thm * template) list
### theory "Draft.ResiduatedTransitionSystemMoreTemplates"
### 0.273s elapsed time, 0.420s cpu time, 0.000s GC time
val it = (): unit
