Loading theory "Draft.Regular_Set" (required by "Draft.Regexp_ConstructionsTemplates" via "Draft.Regexp_Constructions" via "Draft.Regular_Exp")
Loading theory "Draft.Templates" (required by "Draft.Regexp_ConstructionsTemplates" via "Draft.ExtrEqs")
overloading
  lang_pow \<equiv> compow :: nat => 'a list set => 'a list set
consts
  lang_pow :: "nat => 'a list set => 'a list set"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.076s elapsed time, 0.187s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Regexp_ConstructionsTemplates")
### theory "Draft.Regular_Set"
### 0.217s elapsed time, 0.474s cpu time, 0.034s GC time
Loading theory "Draft.Regular_Exp" (required by "Draft.Regexp_ConstructionsTemplates" via "Draft.Regexp_Constructions")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.541s elapsed time, 1.115s cpu time, 0.102s GC time
consts
  lang :: "'a rexp => 'a list set"
consts
  nullable :: "'a rexp => bool"
consts
  rexp_empty :: "'a rexp => bool"
instantiation
  rexp :: (order) order
  less_eq_rexp == less_eq :: 'a rexp => 'a rexp => bool
  less_rexp == less :: 'a rexp => 'a rexp => bool
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  rexp :: (linorder) linorder
### theory "Draft.Regular_Exp"
### 1.526s elapsed time, 2.185s cpu time, 0.174s GC time
Loading theory "Draft.Regexp_Constructions" (required by "Draft.Regexp_ConstructionsTemplates")
consts
  rexp_rev :: "'a rexp => 'a rexp"
Found termination order: "length <*mlex*> {}"
consts
  rexp_subst :: "('a => 'b list) => 'a rexp => 'b rexp"
consts
  suffix_rexp :: "'a rexp => 'a rexp"
consts
  prefix_rexp :: "'a rexp => 'a rexp"
consts
  sublist_rexp :: "'a rexp => 'a rexp"
consts
  subseqs_rexp :: "'a rexp => 'a rexp"
### theory "Draft.Regexp_Constructions"
### 0.353s elapsed time, 0.388s cpu time, 0.039s GC time
Loading theory "Draft.Regexp_ConstructionsTemplates"
val templateLemmas =
   [("Regexp_Constructions.star_not_empty", "star ?A ~= {}",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Regexp_Constructions.subst_word_Nil", "subst_word ?f [] = []",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Regexp_Constructions.Prefixes_subset_Sublists",
     "Prefixes ?A <= Sublists ?A",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Regexp_Constructions.Sublists_subset_Subseqs",
     "Sublists ?A <= Subseqs ?A",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Regexp_Constructions.Suffixes_subset_Sublists",
     "Suffixes ?A <= Sublists ?A",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Regexp_Constructions.Sublists_conv_Prefixes",
     "Sublists ?A = Prefixes (Suffixes ?A)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Regexp_Constructions.Sublists_conv_Suffixes",
     "Sublists ?A = Suffixes (Prefixes ?A)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Regexp_Constructions.Subseqs_star",
     "Subseqs (star ?A) = star (Subseqs ?A)",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 1, template_var 0)))),
    ("Regexp_Constructions.lang_prefix_rexp",
     "lang (prefix_rexp ?r) = Prefixes (lang ?r)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Regexp_Constructions.lang_rexp_of_word",
     "lang (rexp_of_word ?xs) = {?xs}",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Regexp_Constructions.lang_sublist_rexp",
     "lang (sublist_rexp ?r) = Sublists (lang ?r)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Regexp_Constructions.lang_subseqs_rexp",
     "lang (subseqs_rexp ?r) = Subseqs (lang ?r)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Regexp_Constructions.lang_suffix_rexp",
     "lang (suffix_rexp ?r) = Suffixes (lang ?r)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Regexp_Constructions.lang_rexp_rev",
     "lang (rexp_rev ?r) = rev ` lang ?r",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0),
         template_app (template_hole 3, template_var 0)))),
    ("Regexp_Constructions.Prefixes_singleton",
     "Prefixes {?xs} = set (prefixes ?xs)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Regexp_Constructions.Sublists_singleton",
     "Sublists {?w} = set (sublists ?w)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Regexp_Constructions.Subseqs_singleton",
     "Subseqs {?xs} = set (subseqs ?xs)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Regexp_Constructions.Suffixes_singleton",
     "Suffixes {?xs} = set (suffixes ?xs)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Regexp_Constructions.Prefixes_empty_iff",
     "(Prefixes ?A = {}) = (?A = {})",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("Regexp_Constructions.Suffixes_empty_iff",
     "(Suffixes ?A = {}) = (?A = {})",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("Regexp_Constructions.subst_word_singleton",
     "subst_word ?f [?x] = ?f ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_app (template_var 1, template_var 0))),
    ("Regexp_Constructions.Prefixes_rev",
     "Prefixes (rev ` ?A) = rev ` Suffixes ?A",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("Regexp_Constructions.Subseqs_compower",
     "Subseqs (?A ^^ ?n) = Subseqs ?A ^^ ?n",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("Regexp_Constructions.Suffixes_rev",
     "Suffixes (rev ` ?A) = rev ` Prefixes ?A",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("Regexp_Constructions.rev_star", "rev ` star ?A = star (rev ` ?A)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)))),
    ("Regexp_Constructions.Nil_in_Prefixes_iff",
     "([] : Prefixes ?A) = (?A ~= {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_app (template_hole 3, template_var 0))
            )],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("Regexp_Constructions.Nil_in_Suffixes_iff",
     "([] : Suffixes ?A) = (?A ~= {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_app (template_hole 3, template_var 0))
            )],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("Regexp_Constructions.Prefixes_altdef",
     "Prefixes ?A = (UN w:?A. set (prefixes w))",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)))),
    ("Regexp_Constructions.Sublists_altdef",
     "Sublists ?A = (UN w:?A. set (sublists w))",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)))),
    ("Regexp_Constructions.Suffixes_altdef",
     "Suffixes ?A = (UN w:?A. set (suffixes w))",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)))),
    ("Regexp_Constructions.Prefixes_union",
     "Prefixes (?A Un ?B) = Prefixes ?A Un Prefixes ?B",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Regexp_Constructions.Sublists_Un",
     "Sublists (?A Un ?B) = Sublists ?A Un Sublists ?B",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Regexp_Constructions.Subseqs_Un",
     "Subseqs (?A Un ?B) = Subseqs ?A Un Subseqs ?B",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Regexp_Constructions.Subseqs_conc",
     "Subseqs (?A @@ ?B) = Subseqs ?A @@ Subseqs ?B",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Regexp_Constructions.Suffixes_union",
     "Suffixes (?A Un ?B) = Suffixes ?A Un Suffixes ?B",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Regexp_Constructions.lang_rexp_subst",
     "lang (rexp_subst ?f ?r) = subst_word ?f ` lang ?r",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Regexp_Constructions.Prefixes_insert",
     "Prefixes (insert ?xs ?A) = set (prefixes ?xs) Un Prefixes ?A",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))),
         template_app (template_hole 4, template_var 0)))),
    ("Regexp_Constructions.Sublists_insert",
     "Sublists (insert ?w ?A) = set (sublists ?w) Un Sublists ?A",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))),
         template_app (template_hole 4, template_var 0)))),
    ("Regexp_Constructions.Subseqs_insert",
     "Subseqs (insert ?xs ?A) = set (subseqs ?xs) Un Subseqs ?A",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))),
         template_app (template_hole 4, template_var 0)))),
    ("Regexp_Constructions.Suffixes_insert",
     "Suffixes (insert ?xs ?A) = set (suffixes ?xs) Un Suffixes ?A",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))),
         template_app (template_hole 4, template_var 0)))),
    ("Regexp_Constructions.rev_compower",
     "rev ` (?A ^^ ?n) = rev ` ?A ^^ ?n",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)))),
    ("Regexp_Constructions.subst_word_star",
     "subst_word ?f ` star ?A = star (subst_word ?f ` ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_var 0)))),
    ("Regexp_Constructions.subst_word_Cons",
     "subst_word ?f (?x # ?xs) = ?f ?x @ subst_word ?f ?xs",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 2, template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Regexp_Constructions.size_rexp_of_word",
     "size (rexp_of_word ?xs) = Suc (2 * (length ?xs - 1))",
     template_equation
      (template_app
        (template_hole 9, template_app (template_hole 8, template_var 0)),
       template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3))),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_hole 0))))),
    ("Regexp_Constructions.Prefixes_UNION",
     "Prefixes (\<Union> (?f ` ?A)) = (UN x:?A. Prefixes (?f x))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Regexp_Constructions.Sublists_UN",
     "Sublists (\<Union> (?f ` ?A)) = (UN x:?A. Sublists (?f x))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Regexp_Constructions.Subseqs_UNION",
     "Subseqs (\<Union> (?f ` ?A)) = (UN x:?A. Subseqs (?f x))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Regexp_Constructions.Suffixes_UNION",
     "Suffixes (\<Union> (?f ` ?A)) = (UN x:?A. Suffixes (?f x))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Regexp_Constructions.rev_conc",
     "rev ` (?A @@ ?B) = rev ` ?B @@ rev ` ?A",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 1)))),
    ("Regexp_Constructions.subst_word_compower",
     "subst_word ?f ` (?A ^^ ?n) = subst_word ?f ` ?A ^^ ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 2)),
           template_var 0)))),
    ("Regexp_Constructions.subst_word_append",
     "subst_word ?f (?xs @ ?ys) = subst_word ?f ?xs @ subst_word ?f ?ys",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Regexp_Constructions.Prefixes_star",
     "?A ~= {} ==> Prefixes (star ?A) = star ?A @@ Prefixes ?A",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 2, template_var 0))))),
    ("Regexp_Constructions.Suffixes_star",
     "?A ~= {} ==> Suffixes (star ?A) = Suffixes ?A @@ star ?A",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)),
           template_app (template_hole 1, template_var 0))))),
    ("Regexp_Constructions.subst_word_conc",
     "subst_word ?f ` (?A @@ ?B) =
      subst_word ?f ` ?A @@ subst_word ?f ` ?B",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 2)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 2)),
           template_var 0)))),
    ("Regexp_Constructions.Suffixes_conc",
     "?A ~= {} ==> Suffixes (?A @@ ?B) = Suffixes ?B Un Suffixes ?A @@ ?B",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 2, template_var 1)),
             template_var 0))))),
    ("Regexp_Constructions.Prefixes_conc",
     "?B ~= {} ==> Prefixes (?A @@ ?B) = Prefixes ?A Un ?A @@ Prefixes ?B",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 2, template_var 1)))))),
    ("Regexp_Constructions.Sublists_star",
     "?A ~= {} ==>
      Sublists (star ?A) =
      Sublists ?A Un Suffixes ?A @@ star ?A @@ Prefixes ?A",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 6))],
       template_equation
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 5, template_var 0)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 4, template_var 0)),
               template_app (template_hole 0, template_var 0))))))),
    ("Regexp_Constructions.Prefixes_compower",
     "?A ~= {} ==>
      Prefixes (?A ^^ ?n) =
      insert [] (\<Union> ((^^) ?A ` {..<?n}) @@ Prefixes ?A)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 8))],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 5, template_hole 4),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, t_empty),
                   template_app (template_hole 0, template_var 0)))),
             template_app (template_hole 7, template_var 1)))))),
    ("Regexp_Constructions.Suffixes_compower",
     "?A ~= {} ==>
      Suffixes (?A ^^ ?n) =
      insert [] (Suffixes ?A @@ \<Union> ((^^) ?A ` {..<?n}))",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 8))],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 5, template_hole 4),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 7, template_var 1)),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, t_empty),
                 template_app (template_hole 0, template_var 0)))))))),
    ("Regexp_Constructions.Sublists_conc",
     "[| ?A ~= {}; ?B ~= {} |]
      ==> Sublists (?A @@ ?B) =
          Sublists ?A Un Sublists ?B Un Suffixes ?A @@ Prefixes ?B",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5)),
        template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 4, template_var 1)),
               template_app (template_hole 4, template_var 0))),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))))))]:
   (string * thm * template) list
### theory "Draft.Regexp_ConstructionsTemplates"
### 0.333s elapsed time, 0.460s cpu time, 0.066s GC time
val it = (): unit
