   [("Regular_Exp.le_rexp_refl", "le_rexp ?r ?r",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Regular_Exp.le_rexp_total", "le_rexp ?r ?s | le_rexp ?s ?r",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("Regular_Exp.nullable_iff", "nullable ?r = ([] : lang ?r)",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("Regular_Exp.rexp_empty_iff", "rexp_empty ?r = (lang ?r = {})",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Regular_Exp.le_rexp_Zero", "le_rexp ?r Zero ==> ?r = Zero",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_equation (template_var 0, template_hole 1))),
    ("Regular_Exp.atoms_lang", "?w : lang ?r ==> set ?w <= atoms ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Regular_Exp.map_map_rexp",
     "map_rexp ?f (map_rexp ?g ?r) = map_rexp (%r. ?f (?g r)) ?r",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Regular_Exp.le_rexp_antisym",
     "[| le_rexp ?r ?s; le_rexp ?s ?r |] ==> ?r = ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Regular_Exp.le_rexp_trans",
     "[| le_rexp ?r ?s; le_rexp ?s ?t |] ==> le_rexp ?r ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Regular_Exp.lang_eq_ext",
     "(lang ?r = lang ?s) =
      (ALL w:lists (atoms ?r Un atoms ?s). (w : lang ?r) = (w : lang ?s))",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_app (template_hole 1, template_var 0)))),
         t_empty))),
    ("Regular_Exp.lang_eq_ext_Nil_fold_Deriv",
     "(lang ?r = lang ?s) =
      (ALL (K, L)
           :{(fold Deriv w (lang ?r), fold Deriv w (lang ?s)) |w.
             w : lists (atoms ?r Un atoms ?s)}.
          ([] : K) = ([] : L))",
     template_equation
      (template_app
        (template_app
          (template_hole 15,
           template_app (template_hole 14, template_var 1)),
         template_app (template_hole 14, template_var 0)),
       template_app
        (template_app
          (template_hole 13, template_app (template_hole 12, t_empty)),
         template_app (template_hole 1, t_empty))))]
