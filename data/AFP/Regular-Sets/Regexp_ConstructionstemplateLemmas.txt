   [("Regexp_Constructions.star_not_empty", "star ?A ~= {}",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Regexp_Constructions.subst_word_Nil", "subst_word ?f [] = []",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Regexp_Constructions.Prefixes_subset_Sublists",
     "Prefixes ?A <= Sublists ?A",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Regexp_Constructions.Sublists_subset_Subseqs",
     "Sublists ?A <= Subseqs ?A",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Regexp_Constructions.Suffixes_subset_Sublists",
     "Suffixes ?A <= Sublists ?A",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Regexp_Constructions.Sublists_conv_Prefixes",
     "Sublists ?A = Prefixes (Suffixes ?A)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Regexp_Constructions.Sublists_conv_Suffixes",
     "Sublists ?A = Suffixes (Prefixes ?A)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Regexp_Constructions.Subseqs_star",
     "Subseqs (star ?A) = star (Subseqs ?A)",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 1, template_var 0)))),
    ("Regexp_Constructions.lang_prefix_rexp",
     "lang (prefix_rexp ?r) = Prefixes (lang ?r)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Regexp_Constructions.lang_rexp_of_word",
     "lang (rexp_of_word ?xs) = {?xs}",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Regexp_Constructions.lang_sublist_rexp",
     "lang (sublist_rexp ?r) = Sublists (lang ?r)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Regexp_Constructions.lang_subseqs_rexp",
     "lang (subseqs_rexp ?r) = Subseqs (lang ?r)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Regexp_Constructions.lang_suffix_rexp",
     "lang (suffix_rexp ?r) = Suffixes (lang ?r)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Regexp_Constructions.lang_rexp_rev",
     "lang (rexp_rev ?r) = rev ` lang ?r",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0),
         template_app (template_hole 3, template_var 0)))),
    ("Regexp_Constructions.Prefixes_singleton",
     "Prefixes {?xs} = set (prefixes ?xs)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Regexp_Constructions.Sublists_singleton",
     "Sublists {?w} = set (sublists ?w)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Regexp_Constructions.Subseqs_singleton",
     "Subseqs {?xs} = set (subseqs ?xs)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Regexp_Constructions.Suffixes_singleton",
     "Suffixes {?xs} = set (suffixes ?xs)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Regexp_Constructions.Prefixes_empty_iff",
     "(Prefixes ?A = {}) = (?A = {})",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("Regexp_Constructions.Suffixes_empty_iff",
     "(Suffixes ?A = {}) = (?A = {})",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("Regexp_Constructions.subst_word_singleton",
     "subst_word ?f [?x] = ?f ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_app (template_var 1, template_var 0))),
    ("Regexp_Constructions.Prefixes_rev",
     "Prefixes (rev ` ?A) = rev ` Suffixes ?A",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("Regexp_Constructions.Subseqs_compower",
     "Subseqs (?A ^^ ?n) = Subseqs ?A ^^ ?n",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("Regexp_Constructions.Suffixes_rev",
     "Suffixes (rev ` ?A) = rev ` Prefixes ?A",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("Regexp_Constructions.rev_star", "rev ` star ?A = star (rev ` ?A)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)))),
    ("Regexp_Constructions.Nil_in_Prefixes_iff",
     "([] : Prefixes ?A) = (?A ~= {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_app (template_hole 3, template_var 0))
            )],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("Regexp_Constructions.Nil_in_Suffixes_iff",
     "([] : Suffixes ?A) = (?A ~= {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_app (template_hole 3, template_var 0))
            )],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("Regexp_Constructions.Prefixes_altdef",
     "Prefixes ?A = (UN w:?A. set (prefixes w))",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)))),
    ("Regexp_Constructions.Sublists_altdef",
     "Sublists ?A = (UN w:?A. set (sublists w))",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)))),
    ("Regexp_Constructions.Suffixes_altdef",
     "Suffixes ?A = (UN w:?A. set (suffixes w))",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)))),
    ("Regexp_Constructions.Prefixes_union",
     "Prefixes (?A Un ?B) = Prefixes ?A Un Prefixes ?B",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Regexp_Constructions.Sublists_Un",
     "Sublists (?A Un ?B) = Sublists ?A Un Sublists ?B",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Regexp_Constructions.Subseqs_Un",
     "Subseqs (?A Un ?B) = Subseqs ?A Un Subseqs ?B",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Regexp_Constructions.Subseqs_conc",
     "Subseqs (?A @@ ?B) = Subseqs ?A @@ Subseqs ?B",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Regexp_Constructions.Suffixes_union",
     "Suffixes (?A Un ?B) = Suffixes ?A Un Suffixes ?B",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Regexp_Constructions.lang_rexp_subst",
     "lang (rexp_subst ?f ?r) = subst_word ?f ` lang ?r",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Regexp_Constructions.Prefixes_insert",
     "Prefixes (insert ?xs ?A) = set (prefixes ?xs) Un Prefixes ?A",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))),
         template_app (template_hole 4, template_var 0)))),
    ("Regexp_Constructions.Sublists_insert",
     "Sublists (insert ?w ?A) = set (sublists ?w) Un Sublists ?A",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))),
         template_app (template_hole 4, template_var 0)))),
    ("Regexp_Constructions.Subseqs_insert",
     "Subseqs (insert ?xs ?A) = set (subseqs ?xs) Un Subseqs ?A",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))),
         template_app (template_hole 4, template_var 0)))),
    ("Regexp_Constructions.Suffixes_insert",
     "Suffixes (insert ?xs ?A) = set (suffixes ?xs) Un Suffixes ?A",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))),
         template_app (template_hole 4, template_var 0)))),
    ("Regexp_Constructions.rev_compower",
     "rev ` (?A ^^ ?n) = rev ` ?A ^^ ?n",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)))),
    ("Regexp_Constructions.subst_word_star",
     "subst_word ?f ` star ?A = star (subst_word ?f ` ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_var 0)))),
    ("Regexp_Constructions.subst_word_Cons",
     "subst_word ?f (?x # ?xs) = ?f ?x @ subst_word ?f ?xs",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 2, template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Regexp_Constructions.size_rexp_of_word",
     "size (rexp_of_word ?xs) = Suc (2 * (length ?xs - 1))",
     template_equation
      (template_app
        (template_hole 9, template_app (template_hole 8, template_var 0)),
       template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3))),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_hole 0))))),
    ("Regexp_Constructions.Prefixes_UNION",
     "Prefixes (\<Union> (?f ` ?A)) = (UN x:?A. Prefixes (?f x))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Regexp_Constructions.Sublists_UN",
     "Sublists (\<Union> (?f ` ?A)) = (UN x:?A. Sublists (?f x))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Regexp_Constructions.Subseqs_UNION",
     "Subseqs (\<Union> (?f ` ?A)) = (UN x:?A. Subseqs (?f x))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Regexp_Constructions.Suffixes_UNION",
     "Suffixes (\<Union> (?f ` ?A)) = (UN x:?A. Suffixes (?f x))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Regexp_Constructions.rev_conc",
     "rev ` (?A @@ ?B) = rev ` ?B @@ rev ` ?A",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 1)))),
    ("Regexp_Constructions.subst_word_compower",
     "subst_word ?f ` (?A ^^ ?n) = subst_word ?f ` ?A ^^ ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 2)),
           template_var 0)))),
    ("Regexp_Constructions.subst_word_append",
     "subst_word ?f (?xs @ ?ys) = subst_word ?f ?xs @ subst_word ?f ?ys",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Regexp_Constructions.Prefixes_star",
     "?A ~= {} ==> Prefixes (star ?A) = star ?A @@ Prefixes ?A",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 2, template_var 0))))),
    ("Regexp_Constructions.Suffixes_star",
     "?A ~= {} ==> Suffixes (star ?A) = Suffixes ?A @@ star ?A",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)),
           template_app (template_hole 1, template_var 0))))),
    ("Regexp_Constructions.subst_word_conc",
     "subst_word ?f ` (?A @@ ?B) =
      subst_word ?f ` ?A @@ subst_word ?f ` ?B",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 2)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 2)),
           template_var 0)))),
    ("Regexp_Constructions.Suffixes_conc",
     "?A ~= {} ==> Suffixes (?A @@ ?B) = Suffixes ?B Un Suffixes ?A @@ ?B",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 2, template_var 1)),
             template_var 0))))),
    ("Regexp_Constructions.Prefixes_conc",
     "?B ~= {} ==> Prefixes (?A @@ ?B) = Prefixes ?A Un ?A @@ Prefixes ?B",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 2, template_var 1)))))),
    ("Regexp_Constructions.Sublists_star",
     "?A ~= {} ==>
      Sublists (star ?A) =
      Sublists ?A Un Suffixes ?A @@ star ?A @@ Prefixes ?A",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 6))],
       template_equation
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 5, template_var 0)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 4, template_var 0)),
               template_app (template_hole 0, template_var 0))))))),
    ("Regexp_Constructions.Prefixes_compower",
     "?A ~= {} ==>
      Prefixes (?A ^^ ?n) =
      insert [] (\<Union> ((^^) ?A ` {..<?n}) @@ Prefixes ?A)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 8))],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 5, template_hole 4),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, t_empty),
                   template_app (template_hole 0, template_var 0)))),
             template_app (template_hole 7, template_var 1)))))),
    ("Regexp_Constructions.Suffixes_compower",
     "?A ~= {} ==>
      Suffixes (?A ^^ ?n) =
      insert [] (Suffixes ?A @@ \<Union> ((^^) ?A ` {..<?n}))",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 8))],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 5, template_hole 4),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 7, template_var 1)),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, t_empty),
                 template_app (template_hole 0, template_var 0)))))))),
    ("Regexp_Constructions.Sublists_conc",
     "[| ?A ~= {}; ?B ~= {} |]
      ==> Sublists (?A @@ ?B) =
          Sublists ?A Un Sublists ?B Un Suffixes ?A @@ Prefixes ?B",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5)),
        template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 4, template_var 1)),
               template_app (template_hole 4, template_var 0))),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))))))]
