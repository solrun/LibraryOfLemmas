Loading theory "Draft.Regular_Set" (required by "Draft.pEquivalence_CheckingTemplates" via "Draft.pEquivalence_Checking" via "Draft.Equivalence_Checking" via "Draft.NDerivative" via "Draft.Regular_Exp")
Loading theory "Draft.Templates" (required by "Draft.pEquivalence_CheckingTemplates" via "Draft.ExtrEqs")
overloading
  lang_pow \<equiv> compow :: nat => 'a list set => 'a list set
consts
  lang_pow :: "nat => 'a list set => 'a list set"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.069s elapsed time, 0.162s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.pEquivalence_CheckingTemplates")
### theory "Draft.Regular_Set"
### 0.213s elapsed time, 0.459s cpu time, 0.034s GC time
Loading theory "Draft.Regular_Exp" (required by "Draft.pEquivalence_CheckingTemplates" via "Draft.pEquivalence_Checking" via "Draft.Equivalence_Checking" via "Draft.NDerivative")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.540s elapsed time, 1.113s cpu time, 0.101s GC time
consts
  lang :: "'a rexp => 'a list set"
consts
  nullable :: "'a rexp => bool"
consts
  rexp_empty :: "'a rexp => bool"
instantiation
  rexp :: (order) order
  less_eq_rexp == less_eq :: 'a rexp => 'a rexp => bool
  less_rexp == less :: 'a rexp => 'a rexp => bool
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  rexp :: (linorder) linorder
### theory "Draft.Regular_Exp"
### 1.590s elapsed time, 2.304s cpu time, 0.184s GC time
Loading theory "Draft.Derivatives" (required by "Draft.pEquivalence_CheckingTemplates" via "Draft.pEquivalence_Checking")
Loading theory "Draft.NDerivative" (required by "Draft.pEquivalence_CheckingTemplates" via "Draft.pEquivalence_Checking" via "Draft.Equivalence_Checking")
consts
  deriv :: "'a => 'a rexp => 'a rexp"
consts
  derivs :: "'a list => 'a rexp => 'a rexp"
consts
  pderiv :: "'a => 'a rexp => 'a rexp set"
consts
  pderivs :: "'a list => 'a rexp => 'a rexp set"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Derivatives"
### 0.231s elapsed time, 0.483s cpu time, 0.036s GC time
Found termination order:
  "(%p. size (fst p)) <*mlex*> (%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  norm :: "'a rexp => 'a rexp"
consts
  nderiv :: "'a => 'a rexp => 'a rexp"
### theory "Draft.NDerivative"
### 1.916s elapsed time, 3.121s cpu time, 0.574s GC time
Loading theory "Draft.Equivalence_Checking" (required by "Draft.pEquivalence_CheckingTemplates" via "Draft.pEquivalence_Checking")
Proofs for coinductive predicate(s) "bisimilar"
  Proving monotonicity ...
consts
  add_atoms :: "'a rexp => 'a list => 'a list"
### theory "Draft.Equivalence_Checking"
### 0.175s elapsed time, 0.181s cpu time, 0.000s GC time
Loading theory "Draft.pEquivalence_Checking" (required by "Draft.pEquivalence_CheckingTemplates")
### theory "Draft.pEquivalence_Checking"
### 0.092s elapsed time, 0.092s cpu time, 0.000s GC time
*** Failed to load theory "Draft.pEquivalence_CheckingTemplates" (unresolved "Draft.pEquivalence_Checking")
*** Unknown ancestor theory "Regular-Sets.Equivalence_Checking" (line 7 of "$AFP/Regular-Sets/pEquivalence_Checking.thy")
*** At command "text" (line 7 of "$AFP/Regular-Sets/pEquivalence_Checking.thy")
Exception- TOPLEVEL_ERROR raised
