Loading theory "Draft.Regular_Set" (required by "Draft.Equivalence_Checking2Templates" via "Draft.Equivalence_Checking2" via "Draft.Regular_Exp2")
Loading theory "Draft.Templates" (required by "Draft.Equivalence_Checking2Templates" via "Draft.ExtrEqs")
overloading
  lang_pow \<equiv> compow :: nat => 'a list set => 'a list set
consts
  lang_pow :: "nat => 'a list set => 'a list set"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.064s elapsed time, 0.154s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Equivalence_Checking2Templates")
### theory "Draft.Regular_Set"
### 0.216s elapsed time, 0.462s cpu time, 0.033s GC time
Loading theory "Draft.Regular_Exp2" (required by "Draft.Equivalence_Checking2Templates" via "Draft.Equivalence_Checking2")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.539s elapsed time, 1.120s cpu time, 0.122s GC time
consts
  lang :: "'a rexp => 'a list set"
consts
  nullable :: "'a rexp => bool"
### theory "Draft.Regular_Exp2"
### 1.147s elapsed time, 1.639s cpu time, 0.188s GC time
Loading theory "Draft.Equivalence_Checking2" (required by "Draft.Equivalence_Checking2Templates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order:
  "(%p. size (fst p)) <*mlex*> (%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
consts
  norm :: "nat rexp => nat rexp"
consts
  nderiv :: "nat => nat rexp => nat rexp"
Proofs for coinductive predicate(s) "bisimilar"
  Proving monotonicity ...
Found termination order: "{}"
Found termination order: "{}"
consts
  add_atoms :: "nat rexp => nat list => nat list"
### theory "Draft.Equivalence_Checking2"
### 12.728s elapsed time, 18.446s cpu time, 3.563s GC time
Loading theory "Draft.Equivalence_Checking2Templates"
val templateLemmas =
   [("Equivalence_Checking2.atoms_norm",
     "atoms (Equivalence_Checking2.norm ?r) <= atoms ?r",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Equivalence_Checking2.atoms_nderiv",
     "atoms (nderiv ?a ?r) <= atoms ?r",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Equivalence_Checking2.lang_norm",
     "lang ?S (Equivalence_Checking2.norm ?r) = lang ?S ?r",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Equivalence_Checking2.set_add_atoms",
     "set (add_atoms ?r ?as) = atoms ?r Un set ?as",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Equivalence_Checking2.atoms_nPlus",
     "atoms (nPlus ?r ?s) = atoms ?r Un atoms ?s",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Equivalence_Checking2.atoms_nInter",
     "atoms (nInter ?r ?s) <= atoms ?r Un atoms ?s",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Equivalence_Checking2.atoms_nTimes",
     "atoms (nTimes ?r ?s) <= atoms ?r Un atoms ?s",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Equivalence_Checking2.lang_nInter",
     "lang ?S (nInter ?r ?s) = lang ?S (rexp.Inter ?r ?s)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Equivalence_Checking2.lang_nPlus",
     "lang ?S (nPlus ?r ?s) = lang ?S (Plus ?r ?s)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Equivalence_Checking2.lang_nTimes",
     "lang ?S (nTimes ?r ?s) = lang ?S (Times ?r ?s)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Equivalence_Checking2.soundness",
     "check_eqv ?as ?r ?s ==> lang (set ?as) ?r = lang (set ?as) ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0)))),
    ("Equivalence_Checking2.lang_nderiv",
     "?a : ?S ==> lang ?S (nderiv ?a ?r) = Deriv ?a (lang ?S ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))))),
    ("Equivalence_Checking2.equal_if_bisimilar",
     "[| ?K <= lists ?S; ?L <= lists ?S; bisimilar ?S ?K ?L |] ==> ?K = ?L",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 2, template_var 1)),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 2),
              template_var 0)
            )],
       template_equation (template_var 2, template_var 0))),
    ("Equivalence_Checking2.bisim_lang_eq",
     "[| is_bisimulation ?as ?ps; (?r, ?s) : set ?ps |]
      ==> lang (set ?as) ?r = lang (set ?as) ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)),
              template_app (template_hole 3, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 3)),
           template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 3)),
           template_var 0)))),
    ("Equivalence_Checking2.closure_sound",
     "[| closure ?as ([(?r, ?s)], []) = Some ([], ?ps);
         atoms ?r Un atoms ?s <= set ?as |]
      ==> lang (set ?as) ?r = lang (set ?as) ?s",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 11, template_var 3),
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 2),
                      template_var 1)),
                  template_hole 7)),
              template_hole 7)),
          template_app
           (template_hole 6,
            template_app
             (template_app (template_hole 10, template_hole 7),
              template_var 0))),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 2)),
            template_app (template_hole 3, template_var 1)),
          template_app (template_hole 2, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 3)),
           template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 3)),
           template_var 1)))),
    ("Equivalence_Checking2.language_coinduct",
     "[| !!K L. ?R K L ==> K <= lists ?S & L <= lists ?S; ?R ?K ?L;
         !!K L. ?R K L ==> ([] : K) = ([] : L);
         !!K L x. [| ?R K L; x : ?S |] ==> ?R (Deriv x K) (Deriv x L) |]
      ==> ?K = ?L",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 1), template_var 0)
            ),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_equation (template_var 1, template_var 0)))]:
   (string * thm * template) list
### theory "Draft.Equivalence_Checking2Templates"
### 0.379s elapsed time, 0.536s cpu time, 0.000s GC time
val it = (): unit
