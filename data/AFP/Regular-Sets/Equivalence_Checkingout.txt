Loading theory "Draft.Regular_Set" (required by "Draft.Equivalence_CheckingTemplates" via "Draft.Equivalence_Checking" via "Draft.NDerivative" via "Draft.Regular_Exp")
Loading theory "Draft.Templates" (required by "Draft.Equivalence_CheckingTemplates" via "Draft.ExtrEqs")
overloading
  lang_pow \<equiv> compow :: nat => 'a list set => 'a list set
consts
  lang_pow :: "nat => 'a list set => 'a list set"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.079s elapsed time, 0.182s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Equivalence_CheckingTemplates")
### theory "Draft.Regular_Set"
### 0.231s elapsed time, 0.491s cpu time, 0.033s GC time
Loading theory "Draft.Regular_Exp" (required by "Draft.Equivalence_CheckingTemplates" via "Draft.Equivalence_Checking" via "Draft.NDerivative")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.577s elapsed time, 1.183s cpu time, 0.101s GC time
consts
  lang :: "'a rexp => 'a list set"
consts
  nullable :: "'a rexp => bool"
consts
  rexp_empty :: "'a rexp => bool"
instantiation
  rexp :: (order) order
  less_eq_rexp == less_eq :: 'a rexp => 'a rexp => bool
  less_rexp == less :: 'a rexp => 'a rexp => bool
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  rexp :: (linorder) linorder
### theory "Draft.Regular_Exp"
### 1.645s elapsed time, 2.366s cpu time, 0.177s GC time
Loading theory "Draft.NDerivative" (required by "Draft.Equivalence_CheckingTemplates" via "Draft.Equivalence_Checking")
Found termination order:
  "(%p. size (fst p)) <*mlex*> (%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  norm :: "'a rexp => 'a rexp"
consts
  nderiv :: "'a => 'a rexp => 'a rexp"
### theory "Draft.NDerivative"
### 2.016s elapsed time, 2.927s cpu time, 0.566s GC time
Loading theory "Draft.Equivalence_Checking" (required by "Draft.Equivalence_CheckingTemplates")
Proofs for coinductive predicate(s) "bisimilar"
  Proving monotonicity ...
consts
  add_atoms :: "'a rexp => 'a list => 'a list"
### theory "Draft.Equivalence_Checking"
### 0.203s elapsed time, 0.243s cpu time, 0.052s GC time
Loading theory "Draft.Equivalence_CheckingTemplates"
val templateLemmas =
   [("Equivalence_Checking.equal_if_bisimilar",
     "bisimilar ?K ?L ==> ?K = ?L",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Equivalence_Checking.set_add_atoms",
     "set (add_atoms ?r ?as) = atoms ?r Un set ?as",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Equivalence_Checking.soundness",
     "check_eqv ?r ?s ==> lang ?r = lang ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Equivalence_Checking.nullable_nderivs",
     "nullable (foldl (%r a. nderiv a r) ?r ?w) = (?w : lang ?r)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app (template_hole 3, t_empty), template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Equivalence_Checking.bisim_lang_eq",
     "[| is_bisimulation ?as ?ps; (?r, ?s) : ?ps |] ==> lang ?r = lang ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)),
              template_var 2)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Equivalence_Checking.closure_sound",
     "[| closure ?as (?r, ?s) = Some ([], ?R);
         atoms ?r Un atoms ?s <= set ?as |]
      ==> lang ?r = lang ?s",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 10, template_var 3),
            template_app
             (template_app (template_hole 9, template_var 2),
              template_var 1)),
          template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 0))),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 2)),
            template_app (template_hole 3, template_var 1)),
          template_app (template_hole 2, template_var 3))],
       template_equation
        (template_app (template_hole 0, template_var 2),
         template_app (template_hole 0, template_var 1)))),
    ("Equivalence_Checking.closure_sound_complete",
     "[| closure ?as (?r, ?s) = Some (?ws, ?R);
         set ?as = atoms ?r Un atoms ?s |]
      ==> (?ws = []) = (lang ?r = lang ?s)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 12, template_var 4),
            template_app
             (template_app (template_hole 11, template_var 3),
              template_var 2)),
          template_app
           (template_hole 10,
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0))),
        template_equation
         (template_app (template_hole 7, template_var 4),
          template_app
           (template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 3)),
            template_app (template_hole 5, template_var 2)))],
       template_bimplication
        (template_equation (template_var 1, template_hole 2),
         template_equation
          (template_app (template_hole 0, template_var 3),
           template_app (template_hole 0, template_var 2))))),
    ("Equivalence_Checking.language_coinduct",
     "[| ?R ?K ?L; !!K L. ?R K L ==> ([] : K) = ([] : L);
         !!K L x. ?R K L ==> ?R (Deriv x K) (Deriv x L) |]
      ==> ?K = ?L",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 2, template_var 1), template_var 0)
            ),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Equivalence_Checking.rtrancl_nderiv_nderivs",
     "{((r, s), nderiv a r, nderiv a s) |r s a. a : ?A}^* =
      {((r, s), foldl (%r a. nderiv a r) r w,
        foldl (%r a. nderiv a r) s w) |
       r s w. w : lists ?A}",
     template_equation
      (template_app
        (template_hole 13, template_app (template_hole 12, t_empty)),
       template_app (template_hole 12, t_empty)))]:
   (string * thm * template) list
### theory "Draft.Equivalence_CheckingTemplates"
### 0.313s elapsed time, 0.389s cpu time, 0.000s GC time
val it = (): unit
