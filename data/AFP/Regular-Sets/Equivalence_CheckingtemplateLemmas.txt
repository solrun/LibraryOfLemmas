   [("Equivalence_Checking.equal_if_bisimilar",
     "bisimilar ?K ?L ==> ?K = ?L",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Equivalence_Checking.set_add_atoms",
     "set (add_atoms ?r ?as) = atoms ?r Un set ?as",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Equivalence_Checking.soundness",
     "check_eqv ?r ?s ==> lang ?r = lang ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Equivalence_Checking.nullable_nderivs",
     "nullable (foldl (%r a. nderiv a r) ?r ?w) = (?w : lang ?r)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app (template_hole 3, t_empty), template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Equivalence_Checking.bisim_lang_eq",
     "[| is_bisimulation ?as ?ps; (?r, ?s) : ?ps |] ==> lang ?r = lang ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)),
              template_var 2)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Equivalence_Checking.closure_sound",
     "[| closure ?as (?r, ?s) = Some ([], ?R);
         atoms ?r Un atoms ?s <= set ?as |]
      ==> lang ?r = lang ?s",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 10, template_var 3),
            template_app
             (template_app (template_hole 9, template_var 2),
              template_var 1)),
          template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 0))),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 2)),
            template_app (template_hole 3, template_var 1)),
          template_app (template_hole 2, template_var 3))],
       template_equation
        (template_app (template_hole 0, template_var 2),
         template_app (template_hole 0, template_var 1)))),
    ("Equivalence_Checking.closure_sound_complete",
     "[| closure ?as (?r, ?s) = Some (?ws, ?R);
         set ?as = atoms ?r Un atoms ?s |]
      ==> (?ws = []) = (lang ?r = lang ?s)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 12, template_var 4),
            template_app
             (template_app (template_hole 11, template_var 3),
              template_var 2)),
          template_app
           (template_hole 10,
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0))),
        template_equation
         (template_app (template_hole 7, template_var 4),
          template_app
           (template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 3)),
            template_app (template_hole 5, template_var 2)))],
       template_bimplication
        (template_equation (template_var 1, template_hole 2),
         template_equation
          (template_app (template_hole 0, template_var 3),
           template_app (template_hole 0, template_var 2))))),
    ("Equivalence_Checking.language_coinduct",
     "[| ?R ?K ?L; !!K L. ?R K L ==> ([] : K) = ([] : L);
         !!K L x. ?R K L ==> ?R (Deriv x K) (Deriv x L) |]
      ==> ?K = ?L",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 2, template_var 1), template_var 0)
            ),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Equivalence_Checking.rtrancl_nderiv_nderivs",
     "{((r, s), nderiv a r, nderiv a s) |r s a. a : ?A}^* =
      {((r, s), foldl (%r a. nderiv a r) r w,
        foldl (%r a. nderiv a r) s w) |
       r s w. w : lists ?A}",
     template_equation
      (template_app
        (template_hole 13, template_app (template_hole 12, t_empty)),
       template_app (template_hole 12, t_empty)))]
