   [("Pi_Transcendental_Polynomial_Library.algebraic_times_i_iff",
     "algebraic (\<i> * ?x) = algebraic ?x",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("Pi_Transcendental.map_of_rat_of_int_poly",
     "map_poly of_rat (of_int_poly ?p) = of_int_poly ?p",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Pi_Transcendental_Polynomial_Library.degree_higher_pderiv",
     "Polynomial.degree ((pderiv ^^ ?n) ?p) = Polynomial.degree ?p - ?n",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 3, template_var 0)),
         template_var 1))),
    ("Pi_Transcendental_Polynomial_Library.poly_cnj",
     "cnj (poly ?p ?z) = poly (map_poly cnj ?p) (cnj ?z)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_hole 2),
             template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Pi_Transcendental_Polynomial_Library.coeff_mult_0",
     "poly.coeff (?p * ?q) 0 = poly.coeff ?p 0 * poly.coeff ?q 0",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 1)),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 1)))),
    ("Pi_Transcendental_Polynomial_Library.mult_to_poly",
     "[:?c:] * [:?d:] = [:?c * ?d:]",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_hole 1))),
    ("Pi_Transcendental_Polynomial_Library.diff_to_poly",
     "[:?c:] - [:?d:] = [:?c - ?d:]",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_hole 1))),
    ("Pi_Transcendental_Polynomial_Library.image_prod_mset_multiplicity",
     "\<Prod>\<^sub># (image_mset ?f ?M) =
      (PROD x:set_mset ?M. ?f x ^ count ?M x)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 3, t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("Pi_Transcendental_Polynomial_Library.prod_to_poly",
     "(PROD x:?A. [:?f x:]) = [:prod ?f ?A:]",
     template_equation
      (template_app
        (template_app (template_hole 3, t_empty), template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0)),
         template_hole 1))),
    ("Pi_Transcendental_Polynomial_Library.sum_to_poly",
     "(SUM x:?A. [:?f x:]) = [:sum ?f ?A:]",
     template_equation
      (template_app
        (template_app (template_hole 3, t_empty), template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0)),
         template_hole 1))),
    ("Pi_Transcendental_Polynomial_Library.coeff_pCons'",
     "poly.coeff (pCons ?c ?p) ?n =
      (if ?n = 0 then ?c else poly.coeff ?p (?n - 1))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_dunno)),
    ("Pi_Transcendental_Polynomial_Library.prod_smult",
     "(PROD x:?A. Polynomial.smult (?c x) (?p x)) =
      Polynomial.smult (prod ?c ?A) (prod ?p ?A)",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty), template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Pi_Transcendental_Polynomial_Library.coeff_pcompose_linear",
     "poly.coeff (?p \<circ>\<^sub>p [:0::?'a, ?c:]) ?i =
      ?c ^ ?i * poly.coeff ?p ?i",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_hole 2)))),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 6, template_var 2),
           template_var 0)))),
    ("Pi_Transcendental_Polynomial_Library.complex_poly_decompose_multiset",
     "Polynomial.smult (Polynomial.lead_coeff ?p)
       (PROD x:#poly_roots_mset ?p. [:- x, 1:]) =
      ?p",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 0),
             template_app (template_hole 7, template_var 0))),
         template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, t_empty),
             template_app (template_hole 0, template_var 0)))),
       template_var 0)),
    ("Pi_Transcendental_Polynomial_Library.complex_poly_decompose",
     "Polynomial.smult (Polynomial.lead_coeff ?p)
       (PROD z:{z. poly ?p z = 0}. [:- z, 1:] ^ Polynomial.order z ?p) =
      ?p",
     template_equation
      (template_app
        (template_app
          (template_hole 13,
           template_app
            (template_app (template_hole 12, template_var 0),
             template_app (template_hole 11, template_var 0))),
         template_app
          (template_app (template_hole 10, t_empty),
           template_app (template_hole 3, t_empty))),
       template_var 0))]
