   [("Pi_Transcendental_Polynomial_Library.algebraic_times_i_iff",
     "algebraic (\<i> * ?x) = algebraic ?x",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("Pi_Transcendental.map_of_rat_of_int_poly",
     "map_poly of_rat (of_int_poly ?p) = of_int_poly ?p",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Pi_Transcendental_Polynomial_Library.algebraic_times_i",
     "algebraic ?x ==> algebraic (\<i> * ?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Pi_Transcendental_Polynomial_Library.algebraic_times_i",
     "algebraic ?x ==> algebraic (- \<i> * ?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0)),
               template_var 0))
           ))),
    ("Pi_Transcendental_Polynomial_Library.degree_higher_pderiv",
     "Polynomial.degree ((pderiv ^^ ?n) ?p) = Polynomial.degree ?p - ?n",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 3, template_var 0)),
         template_var 1))),
    ("Pi_Transcendental_Polynomial_Library.poly_cnj",
     "cnj (poly ?p ?z) = poly (map_poly cnj ?p) (cnj ?z)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_hole 2),
             template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Pi_Transcendental_Polynomial_Library.coeff_mult_0",
     "poly.coeff (?p * ?q) 0 = poly.coeff ?p 0 * poly.coeff ?q 0",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 1)),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 1)))),
    ("Pi_Transcendental_Polynomial_Library.mult_to_poly",
     "[:?c:] * [:?d:] = [:?c * ?d:]",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_hole 1))),
    ("Pi_Transcendental_Polynomial_Library.diff_to_poly",
     "[:?c:] - [:?d:] = [:?c - ?d:]",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_hole 1))),
    ("Pi_Transcendental_Polynomial_Library.count_poly_roots_mset",
     "?p ~= 0 ==> count (poly_roots_mset ?p) ?a = Polynomial.order ?a ?p",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Pi_Transcendental_Polynomial_Library.image_prod_mset_multiplicity",
     "\<Prod>\<^sub># (image_mset ?f ?M) =
      (PROD x:set_mset ?M. ?f x ^ count ?M x)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 3, t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("Pi_Transcendental_Polynomial_Library.prod_to_poly",
     "(PROD x:?A. [:?f x:]) = [:prod ?f ?A:]",
     template_equation
      (template_app
        (template_app (template_hole 3, t_empty), template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0)),
         template_hole 1))),
    ("Pi_Transcendental_Polynomial_Library.sum_to_poly",
     "(SUM x:?A. [:?f x:]) = [:sum ?f ?A:]",
     template_equation
      (template_app
        (template_app (template_hole 3, t_empty), template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0)),
         template_hole 1))),
    ("Pi_Transcendental_Polynomial_Library.coeff_pCons'",
     "poly.coeff (pCons ?c ?p) ?n =
      (if ?n = 0 then ?c else poly.coeff ?p (?n - 1))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_hole 2)),
               template_var 2),
             template_app
              (template_app (template_hole 6, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)))
           ))),
    ("Pi_Transcendental_Polynomial_Library.prod_smult",
     "(PROD x:?A. Polynomial.smult (?c x) (?p x)) =
      Polynomial.smult (prod ?c ?A) (prod ?p ?A)",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty), template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Pi_Transcendental_Polynomial_Library.coeff_pcompose_linear",
     "poly.coeff (?p \<circ>\<^sub>p [:0::?'a, ?c:]) ?i =
      ?c ^ ?i * poly.coeff ?p ?i",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_hole 2)))),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 6, template_var 2),
           template_var 0)))),
    ("Pi_Transcendental_Polynomial_Library.prod_zero_iff'",
     "finite ?A ==> (prod ?f ?A = (0::?'b)) = (EX x:?A. ?f x = (0::?'b))",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1), t_empty)))),
    ("Pi_Transcendental_Polynomial_Library.set_count_poly_roots_mset",
     "?p ~= 0 ==>
      set_mset (poly_roots_mset ?p) = {x. poly ?p x = (0::?'a)}",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 7))],
       template_equation
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_app (template_hole 3, t_empty)))),
    ("Pi_Transcendental_Polynomial_Library.order_pos_iff",
     "?p ~= 0 ==> (0 < Polynomial.order ?a ?p) = (poly ?p ?a = (0::?'a))",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 7))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_var 1))
              )],
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0)))),
    ("Pi_Transcendental_Polynomial_Library.card_poly_roots_bound",
     "?p ~= 0 ==> card {x. poly ?p x = (0::?'a)} <= Polynomial.degree ?p",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 7))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 5, template_app (template_hole 4, t_empty)),
         template_app (template_hole 0, template_var 0)))),
    ("Pi_Transcendental_Polynomial_Library.complex_poly_decompose_multiset",
     "Polynomial.smult (Polynomial.lead_coeff ?p)
       (PROD x:#poly_roots_mset ?p. [:- x, 1:]) =
      ?p",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 0),
             template_app (template_hole 7, template_var 0))),
         template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, t_empty),
             template_app (template_hole 0, template_var 0)))),
       template_var 0)),
    ("Pi_Transcendental_Polynomial_Library.poly_cnj_real",
     "(!!n. poly.coeff ?p n : \<real>) ==>
      cnj (poly ?p ?z) = poly ?p (cnj ?z)",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_hole 1, template_var 0))))),
    ("Pi_Transcendental_Polynomial_Library.Ints_sum",
     "(!!x. x : ?A ==> ?f x : \<int>) ==> sum ?f ?A : \<int>",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_hole 1)
           ))),
    ("Pi_Transcendental_Polynomial_Library.sum_in_Rats",
     "(!!x. x : ?A ==> ?f x : \<rat>) ==> sum ?f ?A : \<rat>",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_hole 1)
           ))),
    ("Pi_Transcendental_Polynomial_Library.prod_in_Rats",
     "(!!x. x : ?A ==> ?f x : \<rat>) ==> prod ?f ?A : \<rat>",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_hole 1)
           ))),
    ("Pi_Transcendental_Polynomial_Library.Ints_prod",
     "(!!x. x : ?A ==> ?f x : \<int>) ==> prod ?f ?A : \<int>",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_hole 1)
           ))),
    ("Pi_Transcendental_Polynomial_Library.real_poly_cnj_root_iff",
     "(!!n. poly.coeff ?p n : \<real>) ==>
      (poly ?p (cnj ?z) = 0) = (poly ?p ?z = 0)",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, template_var 0)),
           template_hole 0),
         template_equation
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0),
           template_hole 0)))),
    ("Pi_Transcendental_Polynomial_Library.ratpolyE",
     "[| ALL i. poly.coeff ?p i : \<rat>;
         !!q. ?p = map_poly of_rat q ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Pi_Transcendental_Polynomial_Library.rsquarefree_root_order",
     "[| rsquarefree ?p; poly ?p ?z = (0::?'a); ?p ~= 0 |]
      ==> Polynomial.order ?z ?p = 1",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 1), template_var 0),
          template_hole 6),
        template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("Pi_Transcendental_Polynomial_Library.degree_prod_eq",
     "(!!x. x : ?A ==> ?f x ~= 0) ==>
      Polynomial.degree (prod ?f ?A) =
      (SUM x:?A. Polynomial.degree (?f x))",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Pi_Transcendental_Polynomial_Library.complex_poly_decompose",
     "Polynomial.smult (Polynomial.lead_coeff ?p)
       (PROD z:{z. poly ?p z = 0}. [:- z, 1:] ^ Polynomial.order z ?p) =
      ?p",
     template_equation
      (template_app
        (template_app
          (template_hole 13,
           template_app
            (template_app (template_hole 12, template_var 0),
             template_app (template_hole 11, template_var 0))),
         template_app
          (template_app (template_hole 10, t_empty),
           template_app (template_hole 3, t_empty))),
       template_var 0)),
    ("Pi_Transcendental_Polynomial_Library.complex_poly_decompose_rsquarefree",
     "rsquarefree ?p ==>
      Polynomial.smult (Polynomial.lead_coeff ?p)
       (PROD z:{z. poly ?p z = 0}. [:- z, 1:]) =
      ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app (template_hole 10, template_var 0),
               template_app (template_hole 9, template_var 0))),
           template_app
            (template_app (template_hole 8, t_empty),
             template_app (template_hole 3, t_empty))),
         template_var 0))),
    ("Pi_Transcendental_Polynomial_Library.complex_poly_decompose'",
     "(!!root.
          Polynomial.smult (Polynomial.lead_coeff ?p)
           (PROD i<Polynomial.degree ?p. [:- root i, 1:]) =
          ?p ==>
          ?thesis) ==>
      ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate (template_var 0))),
    ("Pi_Transcendental_Polynomial_Library.pcompose_conjugates_integer",
     "(!!i. poly.coeff ?p i : \<int>) ==>
      poly.coeff
       (?p \<circ>\<^sub>p [:0, \<i>:] * ?p \<circ>\<^sub>p [:0, - \<i>:])
       ?i
      : \<int>",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 5, template_var 1),
                         template_app
                          (template_app (template_hole 4, template_hole 3),
                           template_app
                            (template_app
                              (template_hole 4, template_hole 2),
                             template_hole 1)))),
                     template_app
                      (template_app (template_hole 5, template_var 1),
                       template_app
                        (template_app (template_hole 4, template_hole 3),
                         template_app
                          (template_app
                            (template_hole 4,
                             template_app
                              (template_hole 0, template_hole 2)),
                           template_hole 1))))),
                 template_var 0)),
             template_hole 7)
           ))),
    ("Pi_Transcendental_Polynomial_Library.lead_coeff_prod",
     "(!!x. x : ?A ==> ?f x ~= 0) ==>
      Polynomial.lead_coeff (prod ?f ?A) =
      (PROD x:?A. Polynomial.lead_coeff (?f x))",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1))),
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Pi_Transcendental.ratpoly_to_intpoly",
     "[| ALL i. poly.coeff ?p i : \<rat>;
         !!q c.
            [| c ~= 0;
               ?p = Polynomial.smult (inverse (of_nat c)) (of_int_poly q) |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate (template_var 0))),
    ("Pi_Transcendental_Polynomial_Library.poly_eqI_degree",
     "[| !!x. x : ?A ==> poly ?p x = poly ?q x;
         Polynomial.degree ?p < card ?A; Polynomial.degree ?q < card ?A |]
      ==> ?p = ?q",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_inequation
         (less_than, template_app (template_hole 2, template_var 1),
          template_app (template_hole 1, template_var 2)),
        template_inequation
         (less_than, template_app (template_hole 2, template_var 0),
          template_app (template_hole 1, template_var 2))],
       template_equation (template_var 1, template_var 0))),
    ("Pi_Transcendental.symmetric_mpoly_symmetric_prod",
     "[| ?g permutes ?X;
         !!x \<pi>.
            [| x : ?X; \<pi> permutes ?A |]
            ==> mpoly_map_vars \<pi> (?f x) = ?f (?g x) |]
      ==> symmetric_mpoly ?A (prod ?f ?X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, t_empty), template_var 2))
           ))),
    ("Pi_Transcendental.symmetric_mpoly_symmetric_sum",
     "[| !!\<pi>. \<pi> permutes ?A ==> ?g \<pi> permutes ?X;
         !!x \<pi>.
            [| x : ?X; \<pi> permutes ?A |]
            ==> mpoly_map_vars \<pi> (?f x) = ?f (?g \<pi> x) |]
      ==> symmetric_mpoly ?A (sum ?f ?X)",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app (template_hole 0, t_empty), template_var 1))
           ))),
    ("Pi_Transcendental_Polynomial_Library.poly_root_order_induct",
     "[| ?P 0; !!p. (!!x. poly p x ~= (0::?'a)) ==> ?P p;
         !!p x n.
            [| 0 < n; poly p x ~= (0::?'a); ?P p |]
            ==> ?P ([:- x, 1::?'a:] ^ n * p) |]
      ==> ?P ?p",
     template_implication
      ([template_predicate
         (template_app (template_var 1, template_hole 14)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate
        (template_app (template_var 1, template_var 0))))]
