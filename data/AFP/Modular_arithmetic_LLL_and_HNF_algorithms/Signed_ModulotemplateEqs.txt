   [("Signed_Modulo.sym_mod_zero", "?n symmod 0 = ?n",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Signed_Modulo.sym_mod_sym_mod",
     "?x symmod ?y symmod ?y = ?x symmod ?y",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Signed_Modulo.of_int_mod_integer",
     "of_int (?x mod ?y) = of_int ?x mod of_int ?y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Signed_Modulo.sym_mod_diff_right_eq",
     "(?a - ?b symmod ?c) symmod ?c = (?a - ?b) symmod ?c",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Signed_Modulo.sym_mod_mult_right_eq",
     "?a * (?b symmod ?c) symmod ?c = ?a * ?b symmod ?c",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Signed_Modulo.sym_mod_diff_eq",
     "(?a symmod ?c - ?b symmod ?c) symmod ?c = (?a - ?b) symmod ?c",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1))),
         template_var 1),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("Signed_Modulo.sym_mod_code",
     "?x symmod ?y =
      (let m = ?x mod ?y in if m + m <= ?y then m else m - ?y)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         t_empty))),
    ("Signed_Modulo.sym_div_code",
     "?x symdiv ?y =
      (let yy = integer_of_int ?y
       in case divmod_integer (integer_of_int ?x) yy of
          (d, m) =>
            if m + m <= yy then int_of_integer d
            else int_of_integer (d + 1))",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 0)),
         t_empty)))]
