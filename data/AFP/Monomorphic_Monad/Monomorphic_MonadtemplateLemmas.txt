   [("Monomorphic_Monad.is_Done_return_resumption",
     "is_Done (return_resumption ?x)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Monomorphic_Monad.phantom_nondetT", "phantom_nondetT ?x = {}",
     template_equation
      (template_app (template_hole 1, template_var 0), template_hole 0)),
    ("Monomorphic_Monad.phantom_optionT", "phantom_optionT ?x = {}",
     template_equation
      (template_app (template_hole 1, template_var 0), template_hole 0)),
    ("Monomorphic_Monad.Mempty_parametric", "rel_mset ?A {#} {#}",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.result_return_resumption",
     "result (return_resumption ?x) = ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Monomorphic_Monad.run_fail_writer",
     "run_writer (fail_writer ?fail) = ?fail",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Monomorphic_Monad.map_nondetT'_phantom",
     "map_nondetT' ?f = map_nondetT' undefined",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("Monomorphic_Monad.map_optionT'_phantom",
     "map_optionT' ?f = map_optionT' undefined",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("Monomorphic_Monad.rel_nondetT'_phantom",
     "rel_nondetT' ?A = rel_nondetT' \<top>",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("Monomorphic_Monad.rel_optionT'_phantom",
     "rel_optionT' ?A = rel_optionT' \<top>",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("Monomorphic_Monad.monad_fail_contT",
     "monad_fail return_cont bind_cont (fail_cont ?fail)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_hole 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Monomorphic_Monad.return_id_parametric",
     "rel_fun ?R (rel_id ?R) return_id return_id",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 0),
               template_app (template_hole 2, template_var 0)),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.cr_id_prob_return",
     "rel_fun ?A (cr_id_prob ?A) return_id return_pmf",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 0),
               template_app (template_hole 2, template_var 0)),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.NondetT_parametric",
     "rel_fun ?M (rel_nondetT ?M) NondetT NondetT",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 0),
               template_app (template_hole 2, template_var 0)),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.OptionT_parametric",
     "rel_fun ?M (rel_optionT ?M) OptionT OptionT",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 0),
               template_app (template_hole 2, template_var 0)),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.run_nondet_parametric",
     "rel_fun (rel_nondetT ?M) ?M run_nondet run_nondet",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0)),
               template_var 0),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.run_option_parametric",
     "rel_fun (rel_optionT ?M) ?M run_option run_option",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0)),
               template_var 0),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.run_fail_option",
     "run_option (fail_option ?return) = ?return None",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_var 0, template_hole 0))),
    ("Monomorphic_Monad.run_fail_cont",
     "run_cont (fail_cont ?fail) ?k = ?fail",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_var 1)),
    ("Monomorphic_Monad.run_fail_env",
     "run_env (fail_env ?fail) ?r = ?fail",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_var 1)),
    ("Monomorphic_Monad.run_fail_state",
     "run_state (fail_state ?fail) ?s = ?fail",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_var 1)),
    ("Monomorphic_Monad.cUNION_cempty",
     "cUnion (cimage ?f cempty) = cempty",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_hole 0)),
    ("Monomorphic_Monad.cUnion_csingle", "cUnion (csingle ?x) = ?x",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_var 0)),
    ("Monomorphic_Monad.monad_unfold",
     "fail_option ?return = OptionT (?return None)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_var 0, template_hole 0)))),
    ("Monomorphic_Monad.cr_spmf_prob_optionT_fail_transfer",
     "cr_spmf_prob_optionT ?A (fail_option return_pmf) (return_pmf None)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 4, template_var 0),
             template_app (template_hole 3, template_hole 2)),
           template_app (template_hole 1, template_hole 0))
         )),
    ("Monomorphic_Monad.fail_env_parametric",
     "rel_fun ?M (Monomorphic_Monad.rel_envT ?R ?M) fail_env fail_env",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1)),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.cr_envT_stateT_fail",
     "rel_fun ?M (cr_envT_stateT ?s ?M) fail_env fail_state",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1)),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.fail_state_parametric",
     "rel_fun ?M (rel_stateT ?S ?M) fail_state fail_state",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1)),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.run_return_cont",
     "run_cont (return_cont ?x) ?k = ?k ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app (template_var 0, template_var 1))),
    ("Monomorphic_Monad.bind_nondet_cong",
     "nondetM_base.bind_nondet ?bind ?merge =
      nondetM_base.bind_nondet ?bind ?merge",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Monomorphic_Monad.fail_writer_parametric",
     "rel_fun ?M (rel_writerT ?W ?A ?M) fail_writer fail_writer",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0),
                 template_var 2)),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.cr_prod1_fst_transfer",
     "rel_fun (cr_prod1 ?c ?A) ?A (%a. a) fst",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0)),
               template_var 0),
             t_empty),
           template_hole 0)
         )),
    ("Monomorphic_Monad.run_return_option",
     "run_option (return_option ?return ?x) = ?return (Some ?x)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Monomorphic_Monad.run_return_env",
     "run_env (return_env ?return ?x) ?r = ?return ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_var 2, template_var 1))),
    ("Monomorphic_Monad.EnvT_parametric",
     "rel_fun (rel_fun ?R ?M) (Monomorphic_Monad.rel_envT ?R ?M) EnvT EnvT",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 0)),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.StateT_parametric",
     "rel_fun (rel_fun ?S ?M) (rel_stateT ?S ?M) StateT StateT",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 0)),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.fail_option_parametric",
     "rel_fun (rel_fun (rel_option ?A) ?M) (rel_optionT ?M) fail_option
       fail_option",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 1)),
                   template_var 0)),
               template_app (template_hole 2, template_var 0)),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.run_env_parametric",
     "rel_fun (Monomorphic_Monad.rel_envT ?R ?M) (rel_fun ?R ?M) run_env
       run_env",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 0)),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.run_state_parametric",
     "rel_fun (rel_stateT ?S ?M) (rel_fun ?S ?M) run_state run_state",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 0)),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.spmf_of_prob_optionT_transfer",
     "rel_fun (cr_spmf_prob_optionT ?A) (rel_spmf ?A) run_option (%x. x)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 0)),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0))),
             template_hole 0),
           t_empty)
         )),
    ("Monomorphic_Monad.prob_optionT_of_spmf_transfer",
     "rel_fun (rel_spmf ?A) (cr_spmf_prob_optionT ?A) OptionT (%x. x)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0))),
               template_app (template_hole 1, template_var 0)),
             template_hole 0),
           t_empty)
         )),
    ("Monomorphic_Monad.extract_bind",
     "extract (bind_id ?x ?f) = extract (?f (extract ?x))",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_var 0,
           template_app (template_hole 1, template_var 1))))),
    ("Monomorphic_Monad.run_ask_env",
     "run_env (ask_env ?f) ?r = run_env (?f ?r) ?r",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_var 1, template_var 0)),
         template_var 0))),
    ("Monomorphic_Monad.run_get_state",
     "run_state (get_state ?f) ?s = run_state (?f ?s) ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_var 1, template_var 0)),
         template_var 0))),
    ("Monomorphic_Monad.run_return_writer",
     "run_writer (return_writer ?return ?x) = ?return (?x, [])",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_var 1,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Monomorphic_Monad.run_put_state",
     "run_state (put_state ?s ?m) ?s' = run_state ?m ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 2))),
    ("Monomorphic_Monad.cUnion_cinsert",
     "cUnion (cinsert ?x ?A) = cUn ?x (cUnion ?A)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Monomorphic_Monad.cUNION_csingle",
     "cUnion (cimage ?f (csingle ?x)) = ?f ?x",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))),
       template_app (template_var 1, template_var 0))),
    ("Monomorphic_Monad.cUNION_csingle2", "cUnion (cimage csingle ?A) = ?A",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)),
       template_var 0)),
    ("Monomorphic_Monad.bernoulli_Not",
     "map_pmf Not (bernoulli_pmf ?r) = bernoulli_pmf (1 - ?r)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Monomorphic_Monad.cr_spmf_prob_optionT_return_transfer",
     "rel_fun ?A (cr_spmf_prob_optionT ?A) (return_option return_pmf)
       return_spmf",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 5, template_var 0),
               template_app (template_hole 4, template_var 0)),
             template_app (template_hole 3, template_hole 2)),
           t_empty)
         )),
    ("Monomorphic_Monad.fail_nondet_parametric",
     "rel_fun (rel_fun ?S ?M) (rel_fun ?S (rel_nondetT ?M))
       nondetM_base.fail_nondet nondetM_base.fail_nondet",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_var 0)),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app (template_hole 2, template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.case_nondetT_parametric",
     "rel_fun (rel_fun ?M ?X) (rel_fun (rel_nondetT ?M) ?X) case_nondetT
       case_nondetT",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 1)),
                 template_var 0)),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.rec_nondetT_parametric",
     "rel_fun (rel_fun ?M ?X) (rel_fun (rel_nondetT ?M) ?X) rec_nondetT
       rec_nondetT",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 1)),
                 template_var 0)),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.case_optionT_parametric",
     "rel_fun (rel_fun ?M ?X) (rel_fun (rel_optionT ?M) ?X) case_optionT
       case_optionT",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 1)),
                 template_var 0)),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.rec_optionT_parametric",
     "rel_fun (rel_fun ?M ?X) (rel_fun (rel_optionT ?M) ?X) rec_optionT
       rec_optionT",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 1)),
                 template_var 0)),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.plus_multiset_parametric",
     "rel_fun (rel_mset ?A) (rel_fun (rel_mset ?A) (rel_mset ?A)) (+) (+)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 0)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 3, template_var 0)),
                 template_app (template_hole 3, template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.run_ask_option",
     "run_option (ask_option ?ask ?f) = ?ask (%r. run_option (?f r))",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_var 1, t_empty))),
    ("Monomorphic_Monad.run_get_option",
     "run_option (get_option ?get ?f) = ?get (%s. run_option (?f s))",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_var 1, t_empty))),
    ("Monomorphic_Monad.run_ask_writer",
     "run_writer (ask_writer ?ask ?f) = ?ask (%r. run_writer (?f r))",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_var 1, t_empty))),
    ("Monomorphic_Monad.run_get_writer",
     "run_writer (get_writer ?get ?f) = ?get (%s. run_writer (?f s))",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_var 1, t_empty))),
    ("Monomorphic_Monad.run_put_option",
     "run_option (put_option ?put ?s ?m) = ?put ?s (run_option ?m)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_var 2, template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("Monomorphic_Monad.run_tell_option",
     "run_option (tell_option ?tell ?w ?m) = ?tell ?w (run_option ?m)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_var 2, template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("Monomorphic_Monad.run_return_state",
     "run_state (return_state ?return ?x) ?s = ?return (?x, ?s)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_var 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Monomorphic_Monad.run_put_writer",
     "run_writer (put_writer ?put ?s ?m) = ?put ?s (run_writer ?m)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_var 2, template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("Monomorphic_Monad.rel_stateT_Grp",
     "rel_stateT (=) (BNF_Def.Grp UNIV ?f) =
      BNF_Def.Grp UNIV (map_stateT ?f)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_hole 5),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("Monomorphic_Monad.rel_nondetT_distr",
     "rel_nondetT ?A OO rel_nondetT ?B = rel_nondetT (?A OO ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Monomorphic_Monad.rel_optionT_distr",
     "rel_optionT ?A OO rel_optionT ?B = rel_optionT (?A OO ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Monomorphic_Monad.cr_id_prob_simps",
     "cr_id_prob ?A (return_id ?x) (return_pmf ?y) = ?A ?x ?y",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_var 2, template_var 1), template_var 0))),
    ("Monomorphic_Monad.rel_nondetT_simps",
     "rel_nondetT ?M (NondetT ?m) (NondetT ?m') = ?M ?m ?m'",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_var 2, template_var 1), template_var 0))),
    ("Monomorphic_Monad.rel_optionT_simps",
     "rel_optionT ?M (OptionT ?m) (OptionT ?m') = ?M ?m ?m'",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_var 2, template_var 1), template_var 0))),
    ("Monomorphic_Monad.monad_unfold",
     "ask_option ?ask ?f = OptionT (?ask (%r. run_option (?f r)))",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_hole 1, template_app (template_var 1, t_empty)))),
    ("Monomorphic_Monad.monad_envT",
     "monad ?return ?bind ==> monad (return_env ?return) (bind_env ?bind)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_stateT",
     "monad ?return ?bind ==>
      monad (return_state ?return) (bind_state ?bind)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_commute_envT",
     "monad_commute ?return ?bind ==>
      monad_commute (return_env ?return) (bind_env ?bind)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_discard_envT",
     "monad_discard ?return ?bind ==>
      monad_discard (return_env ?return) (bind_env ?bind)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_duplicate_envT",
     "monad_duplicate ?return ?bind ==>
      monad_duplicate (return_env ?return) (bind_env ?bind)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.rel_nondetT_mono",
     "?A <= ?B ==> rel_nondetT ?A <= rel_nondetT ?B",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Monomorphic_Monad.rel_optionT_mono",
     "?A <= ?B ==> rel_optionT ?A <= rel_optionT ?B",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Monomorphic_Monad.put_state_parametric",
     "rel_fun ?S (rel_fun (rel_stateT ?S ?M) (rel_stateT ?S ?M)) put_state
       put_state",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.cr_ndi_prob_return",
     "rel_fun ?A (cr_prob_ndi ?A) return_pmf
       (nondetM_base.return_nondet return_id csingle)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 6, template_var 0),
               template_app (template_hole 5, template_var 0)),
             template_hole 4),
           template_app
            (template_app (template_hole 3, template_hole 2), t_empty))
         )),
    ("Monomorphic_Monad.cr_envT_stateT_StateT_EnvT",
     "rel_fun (rel_fun (eq_onp ((=) ?s)) ?M) (cr_envT_stateT ?s ?M) EnvT
       StateT",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_var 1))),
                   template_var 0)),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.return_env_parametric",
     "rel_fun (rel_fun ?A ?M)
       (rel_fun ?A (Monomorphic_Monad.rel_envT ?R ?M)) return_env
       return_env",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 1)),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 1))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.ask_env_parametric",
     "rel_fun (rel_fun ?R (Monomorphic_Monad.rel_envT ?R ?M))
       (Monomorphic_Monad.rel_envT ?R ?M) ask_env ask_env",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0))),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.get_state_parametric",
     "rel_fun (rel_fun ?S (rel_stateT ?S ?M)) (rel_stateT ?S ?M) get_state
       get_state",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0))),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.return_option_parametric",
     "rel_fun (rel_fun (rel_option ?A) ?M) (rel_fun ?A (rel_optionT ?M))
       return_option return_option",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 1)),
                   template_var 0)),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app (template_hole 2, template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.cr_envT_stateT_run",
     "rel_fun (cr_envT_stateT ?s ?M) (rel_fun (eq_onp ((=) ?s)) ?M) run_env
       run_state",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 1))),
                 template_var 0)),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.run_alt_option",
     "run_option (alt_option ?alt ?m1.0 ?m2.0) =
      ?alt (run_option ?m1.0) (run_option ?m2.0)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_var 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Monomorphic_Monad.run_alt_writer",
     "run_writer (alt_writer ?alt ?m ?m') =
      ?alt (run_writer ?m) (run_writer ?m')",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_var 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Monomorphic_Monad.extract_merge_id",
     "extract (merge_id ?A ?f) = cUnion (cimage (extract o ?f) ?A)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_hole 4),
               template_var 0)),
           template_var 1)))),
    ("Monomorphic_Monad.monad_reader_envT",
     "monad ?return ?bind ==>
      monad_reader (return_env ?return) (bind_env ?bind) ask_env",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 1)),
               template_app (template_hole 1, template_var 0)),
             template_hole 0)
           ))),
    ("Monomorphic_Monad.monad_optionT",
     "monad ?return ?bind ==>
      monad (return_option ?return) (bind_option ?return ?bind)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Monomorphic_Monad.monad_writerT",
     "monad ?return ?bind ==>
      monad (return_writer ?return) (bind_writer ?return ?bind)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Monomorphic_Monad.rel_id_expand",
     "?M (extract ?m) (extract ?m') ==> rel_id ?M ?m ?m'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_var 2,
                template_app (template_hole 2, template_var 1)),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Monomorphic_Monad.rel_nondetT_expand",
     "?M (run_nondet ?m) (run_nondet ?m') ==> rel_nondetT ?M ?m ?m'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_var 2,
                template_app (template_hole 2, template_var 1)),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Monomorphic_Monad.bind_id_parametric",
     "rel_fun (rel_id ?A) (rel_fun (rel_fun ?A (rel_id ?A)) (rel_id ?A))
       bind_id bind_id",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 0)),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_app (template_hole 4, template_var 0))),
                 template_app (template_hole 4, template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.cr_id_prob_bind",
     "rel_fun (cr_id_prob ?A)
       (rel_fun (rel_fun ?A (cr_id_prob ?B)) (cr_id_prob ?B)) bind_id
       (>>=)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 5, template_var 1)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_app (template_hole 2, template_var 0))),
                 template_app (template_hole 2, template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.cr_ndi_prob_sample",
     "rel_fun cr_pmf_cset
       (rel_fun (rel_fun (=) (cr_prob_ndi ?A)) (cr_prob_ndi ?A)) (>>=)
       (cset_nondetM_base.altc_nondet merge_id)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 8, template_hole 7),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_hole 4),
                     template_app (template_hole 3, template_var 0))),
                 template_app (template_hole 3, template_var 0))),
             template_hole 2),
           template_app (template_hole 1, template_hole 0))
         )),
    ("Monomorphic_Monad.run_get_cont",
     "run_cont (get_cont ?get ?f) ?k = ?get (%s. run_cont (?f s) ?k)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_var 2, t_empty))),
    ("Monomorphic_Monad.run_get_env",
     "run_env (get_env ?get ?f) ?r = ?get (%s. run_env (?f s) ?r)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_var 2, t_empty))),
    ("Monomorphic_Monad.run_altc_sample_option",
     "run_option (altc_sample_option ?altc_sample ?p ?f) =
      ?altc_sample ?p (%x. run_option (?f x))",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_var 2, template_var 1), t_empty))),
    ("Monomorphic_Monad.run_pause_option",
     "run_option (pause_option ?pause ?out ?c) =
      ?pause ?out (%i. run_option (?c i))",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_var 2, template_var 1), t_empty))),
    ("Monomorphic_Monad.run_ask_state",
     "run_state (ask_state ?ask ?f) ?s = ?ask (%r. run_state (?f r) ?s)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_var 2, t_empty))),
    ("Monomorphic_Monad.run_altc_sample_writer",
     "run_writer (altc_sample_writer ?altc_sample ?p ?f) =
      ?altc_sample ?p (%p. run_writer (?f p))",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_var 2, template_var 1), t_empty))),
    ("Monomorphic_Monad.run_pause_writer",
     "run_writer (pause_writer ?pause ?out ?c) =
      ?pause ?out (%input. run_writer (?c input))",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_var 2, template_var 1), t_empty))),
    ("Monomorphic_Monad.run_put_cont",
     "run_cont (put_cont ?put ?s ?m) ?k = ?put ?s (run_cont ?m ?k)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_var 3, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Monomorphic_Monad.run_put_env",
     "run_env (put_env ?put ?s ?m) ?r = ?put ?s (run_env ?m ?r)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_var 3, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Monomorphic_Monad.run_tell_env",
     "run_env (tell_env ?tell ?w ?m) ?r = ?tell ?w (run_env ?m ?r)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_var 3, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Monomorphic_Monad.run_tell_state",
     "run_state (tell_state ?tell ?w ?m) ?s = ?tell ?w (run_state ?m ?s)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_var 3, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Monomorphic_Monad.cr_prod1I",
     "?A ?a ?b ==> cr_prod1 ?c' ?A ?a (?b, ?c')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 2), template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Monomorphic_Monad.monad_state_stateT",
     "monad ?return ?bind ==>
      monad_state (return_state ?return) (bind_state ?bind) get_state
       put_state",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 1)),
                 template_app (template_hole 2, template_var 0)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Monomorphic_Monad.cr_spmf_prob_optionTD",
     "cr_spmf_prob_optionT ?A ?p ?q ==> rel_spmf ?A (run_option ?p) ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 2)),
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Monomorphic_Monad.cr_spmf_prob_optionTI",
     "rel_spmf ?A (run_option ?p) ?q ==> cr_spmf_prob_optionT ?A ?p ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 2)),
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Monomorphic_Monad.cr_prod1_Pair_transfer",
     "rel_fun ?A (rel_fun (eq_onp ((=) ?c)) (cr_prod1 ?c ?A)) (%a _. a)
       Pair",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 5, template_var 1),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0))),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 1))),
             t_empty),
           template_hole 0)
         )),
    ("Monomorphic_Monad.cr_envT_stateT_return",
     "rel_fun (rel_fun (cr_prod1 ?s ?A) ?M)
       (rel_fun ?A (cr_envT_stateT ?s ?M)) return_env return_state",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 2),
                       template_var 1)),
                   template_var 0)),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.cr_envT_stateT_ask_get",
     "rel_fun (rel_fun (eq_onp ((=) ?s)) (cr_envT_stateT ?s ?M))
       (cr_envT_stateT ?s ?M) ask_env get_state",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_var 1))),
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0))),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.case_envT_parametric",
     "rel_fun (rel_fun (rel_fun ?R ?M) ?X)
       (rel_fun (Monomorphic_Monad.rel_envT ?R ?M) ?X) case_envT case_envT",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 2),
                       template_var 1)),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 1)),
                 template_var 0)),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.rec_envT_parametric",
     "rel_fun (rel_fun (rel_fun ?R ?M) ?X)
       (rel_fun (Monomorphic_Monad.rel_envT ?R ?M) ?X) rec_envT rec_envT",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 2),
                       template_var 1)),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 1)),
                 template_var 0)),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.case_stateT_parametric",
     "rel_fun (rel_fun (rel_fun ?S ?M) ?A) (rel_fun (rel_stateT ?S ?M) ?A)
       case_stateT case_stateT",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 2),
                       template_var 1)),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 1)),
                 template_var 0)),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.rec_stateT_parametric",
     "rel_fun (rel_fun (rel_fun ?S ?M) ?A) (rel_fun (rel_stateT ?S ?M) ?A)
       rec_stateT rec_stateT",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 2),
                       template_var 1)),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 1)),
                 template_var 0)),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.return_state_parametric",
     "rel_fun (rel_fun (rel_prod ?A ?S) ?M) (rel_fun ?A (rel_stateT ?S ?M))
       return_state return_state",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 2),
                       template_var 1)),
                   template_var 0)),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.run_callcc_cont",
     "run_cont (callcc_cont ?f) ?k =
      run_cont (?f (%x. ContT (%_. ?k x))) ?k",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_var 1, t_empty)),
         template_var 0))),
    ("Monomorphic_Monad.run_bind_cont",
     "run_cont (bind_cont ?m ?f) ?k = run_cont ?m (%x. run_cont (?f x) ?k)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2), t_empty))),
    ("Monomorphic_Monad.cr_prod1_Grp",
     "cr_prod1 ?c (BNF_Def.Grp ?A ?f) = BNF_Def.Grp ?A (%b. (?f b, ?c))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), t_empty))),
    ("Monomorphic_Monad.rel_set_Grp",
     "rel_set (BNF_Def.Grp ?A ?f) = BNF_Def.Grp {X. X <= ?A} ((`) ?f)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, t_empty)),
         template_app (template_hole 0, template_var 0)))),
    ("Monomorphic_Monad.cr_envT_stateT_simps",
     "cr_envT_stateT ?s ?M (EnvT ?f) (StateT ?g) = ?M (?f ?s) (?g ?s)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app
          (template_var 2, template_app (template_var 1, template_var 3)),
         template_app (template_var 0, template_var 3)))),
    ("Monomorphic_Monad.rel_envT_simps",
     "Monomorphic_Monad.rel_envT ?R ?M (EnvT ?f) (EnvT ?g) =
      rel_fun ?R ?M ?f ?g",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("Monomorphic_Monad.monad_fail_optionT",
     "monad ?return ?bind ==>
      monad_fail (return_option ?return) (bind_option ?return ?bind)
       (fail_option ?return)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 1)),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Monomorphic_Monad.monad_alt_envT",
     "monad_alt ?return ?bind ?alt ==>
      monad_alt (return_env ?return) (bind_env ?bind) (alt_env ?alt)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_alt_stateT",
     "monad_alt ?return ?bind ?alt ==>
      monad_alt (return_state ?return) (bind_state ?bind) (alt_state ?alt)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_altc_envT",
     "monad_altc ?return ?bind ?altc ==>
      monad_altc (return_env ?return) (bind_env ?bind) (altc_env ?altc)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_altc_stateT",
     "monad_altc ?return ?bind ?altc ==>
      monad_altc (return_state ?return) (bind_state ?bind)
       (altc_state ?altc)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_altc3_envT",
     "monad_altc3 ?return ?bind ?altc ==>
      monad_altc3 (return_env ?return) (bind_env ?bind) (altc_env ?altc)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_altc3_stateT",
     "monad_altc3 ?return ?bind ?altc ==>
      monad_altc3 (return_state ?return) (bind_state ?bind)
       (altc_state ?altc)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_fail_envT",
     "monad_fail ?return ?bind ?fail ==>
      monad_fail (return_env ?return) (bind_env ?bind) (fail_env ?fail)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_fail_stateT",
     "monad_fail ?return ?bind ?fail ==>
      monad_fail (return_state ?return) (bind_state ?bind)
       (fail_state ?fail)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_prob_envT",
     "monad_prob ?return ?bind ?sample ==>
      monad_prob (return_env ?return) (bind_env ?bind)
       (sample_env ?sample)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_prob_stateT",
     "monad_prob ?return ?bind ?sample ==>
      monad_prob (return_state ?return) (bind_state ?bind)
       (sample_state ?sample)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_reader_stateT",
     "monad_reader ?return ?bind ?ask ==>
      monad_reader (return_state ?return) (bind_state ?bind)
       (ask_state ?ask)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_resumption_envT",
     "monad_resumption ?return ?bind ?pause ==>
      monad_resumption (return_env ?return) (bind_env ?bind)
       (pause_env ?pause)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_resumption_stateT",
     "monad_resumption ?return ?bind ?pause ==>
      monad_resumption (return_state ?return) (bind_state ?bind)
       (pause_state ?pause)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_writer_envT",
     "monad_writer ?return ?bind ?tell ==>
      monad_writer (return_env ?return) (bind_env ?bind) (tell_env ?tell)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_writer_stateT",
     "monad_writer ?return ?bind ?tell ==>
      monad_writer (return_state ?return) (bind_state ?bind)
       (tell_state ?tell)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.return_nondet_parametric",
     "rel_fun (rel_fun ?S ?M)
       (rel_fun (rel_fun ?A ?S) (rel_fun ?A (rel_nondetT ?M)))
       nondetM_base.return_nondet nondetM_base.return_nondet",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_var 1)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_app (template_hole 2, template_var 1)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.merge_id_parametric",
     "rel_fun (rel_cset ?A)
       (rel_fun (rel_fun ?A (rel_id (rel_cset ?A))) (rel_id (rel_cset ?A)))
       merge_id merge_id",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 5, template_var 0)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_app
                      (template_hole 2,
                       template_app (template_hole 5, template_var 0)))),
                 template_app
                  (template_hole 2,
                   template_app (template_hole 5, template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.cr_spmf_prob_optionT_bind_transfer",
     "rel_fun (cr_spmf_prob_optionT ?A)
       (rel_fun (rel_fun ?A (cr_spmf_prob_optionT ?A))
         (cr_spmf_prob_optionT ?A))
       (bind_option return_pmf (>>=)) (>>=)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app (template_hole 6, template_var 0)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_app (template_hole 6, template_var 0))),
                 template_app (template_hole 6, template_var 0))),
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_hole 1)),
           template_hole 0)
         )),
    ("Monomorphic_Monad.cr_ndi_prob_bind",
     "rel_fun (cr_prob_ndi ?A)
       (rel_fun (rel_fun ?A (cr_prob_ndi ?A)) (cr_prob_ndi ?A)) (>>=)
       (nondetM_base.bind_nondet bind_id merge_id)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app (template_hole 6, template_var 0)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_app (template_hole 6, template_var 0))),
                 template_app (template_hole 6, template_var 0))),
             template_hole 3),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0))
         )),
    ("Monomorphic_Monad.run_merge_env",
     "run_env (merge_env ?merge ?A ?f) ?r =
      ?merge ?A (%a. run_env (?f a) ?r)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_var 3, template_var 2), t_empty))),
    ("Monomorphic_Monad.run_alt_env",
     "run_env (alt_env ?alt ?m1.0 ?m2.0) ?r =
      ?alt (run_env ?m1.0 ?r) (run_env ?m2.0 ?r)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_var 3,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Monomorphic_Monad.run_altc_env",
     "run_env (altc_env ?altc ?C ?f) ?r = ?altc ?C (%c. run_env (?f c) ?r)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_var 3, template_var 2), t_empty))),
    ("Monomorphic_Monad.run_catch_env",
     "run_env (catch_env ?catch ?m1.0 ?m2.0) ?r =
      ?catch (run_env ?m1.0 ?r) (run_env ?m2.0 ?r)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_var 3,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Monomorphic_Monad.run_pause_env",
     "run_env (pause_env ?pause ?out ?c) ?r =
      ?pause ?out (%i. run_env (?c i) ?r)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_var 3, template_var 2), t_empty))),
    ("Monomorphic_Monad.run_sample_env",
     "run_env (sample_env ?sample ?p ?f) ?r =
      ?sample ?p (%x. run_env (?f x) ?r)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_var 3, template_var 2), t_empty))),
    ("Monomorphic_Monad.run_alt_state",
     "run_state (alt_state ?alt ?m1.0 ?m2.0) ?s =
      ?alt (run_state ?m1.0 ?s) (run_state ?m2.0 ?s)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_var 3,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Monomorphic_Monad.run_altc_sample_state",
     "run_state (altc_sample_state ?altc_sample ?p ?f) ?s =
      ?altc_sample ?p (%x. run_state (?f x) ?s)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_var 3, template_var 2), t_empty))),
    ("Monomorphic_Monad.run_pause_state",
     "run_state (pause_state ?pause ?out ?c) ?s =
      ?pause ?out (%i. run_state (?c i) ?s)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_var 3, template_var 2), t_empty))),
    ("Monomorphic_Monad.rel_nondetT_Grp",
     "rel_nondetT (BNF_Def.Grp ?A ?f) =
      BNF_Def.Grp {x. set_nondetT x <= ?A} (map_nondetT ?f)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app (template_hole 0, template_var 0)))),
    ("Monomorphic_Monad.rel_optionT_Grp",
     "rel_optionT (BNF_Def.Grp ?A ?f) =
      BNF_Def.Grp {x. set_optionT x <= ?A} (map_optionT ?f)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app (template_hole 0, template_var 0)))),
    ("Monomorphic_Monad.cUNION_cinsert",
     "cUnion (cimage ?f (cinsert ?x ?A)) =
      cUn (?f ?x) (cUnion (cimage ?f ?A))",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 2, template_var 1)),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0))))),
    ("Monomorphic_Monad.monad_writer_writerT",
     "monad ?return ?bind ==>
      monad_writer (return_writer ?return) (bind_writer ?return ?bind)
       (tell_writer ?return ?bind)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 1)),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Monomorphic_Monad.monad_alt_optionT",
     "monad_alt ?return ?bind ?alt ==>
      monad_alt (return_option ?return) (bind_option ?return ?bind)
       (alt_option ?alt)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_alt_writerT",
     "monad_alt ?return ?bind ?alt ==>
      monad_alt (return_writer ?return) (bind_writer ?return ?bind)
       (alt_writer ?alt)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_altc_optionT",
     "monad_altc ?return ?bind ?altc ==>
      monad_altc (return_option ?return) (bind_option ?return ?bind)
       (altc_option ?altc)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_altc_writerT",
     "monad_altc ?return ?bind ?altc ==>
      monad_altc (return_writer ?return) (bind_writer ?return ?bind)
       (altc_writer ?altc)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_altc3_optionT",
     "monad_altc3 ?return ?bind ?altc ==>
      monad_altc3 (return_option ?return) (bind_option ?return ?bind)
       (altc_option ?altc)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_altc3_writerT",
     "monad_altc3 ?return ?bind ?altc ==>
      monad_altc3 (return_writer ?return) (bind_writer ?return ?bind)
       (altc_writer ?altc)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_fail_writerT",
     "monad_fail ?return ?bind ?fail ==>
      monad_fail (return_writer ?return) (bind_writer ?return ?bind)
       (fail_writer ?fail)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_prob_optionT",
     "monad_prob ?return ?bind ?sample ==>
      monad_prob (return_option ?return) (bind_option ?return ?bind)
       (sample_option ?sample)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_prob_writerT",
     "monad_prob ?return ?bind ?sample ==>
      monad_prob (return_writer ?return) (bind_writer ?return ?bind)
       (sample_writer ?sample)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_reader_optionT",
     "monad_reader ?return ?bind ?ask ==>
      monad_reader (return_option ?return) (bind_option ?return ?bind)
       (ask_option ?ask)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_reader_writerT",
     "monad_reader ?return ?bind ?ask ==>
      monad_reader (return_writer ?return) (bind_writer ?return ?bind)
       (ask_writer ?ask)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_resumption_optionT",
     "monad_resumption ?return ?bind ?pause ==>
      monad_resumption (return_option ?return) (bind_option ?return ?bind)
       (pause_option ?pause)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_resumption_writerT",
     "monad_resumption ?return ?bind ?pause ==>
      monad_resumption (return_writer ?return) (bind_writer ?return ?bind)
       (pause_writer ?pause)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_writer_optionT",
     "monad_writer ?return ?bind ?tell ==>
      monad_writer (return_option ?return) (bind_option ?return ?bind)
       (tell_option ?tell)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.rel_envTI",
     "rel_fun ?R ?M ?f ?g ==>
      Monomorphic_Monad.rel_envT ?R ?M (EnvT ?f) (EnvT ?g)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.cr_envT_stateTD",
     "cr_envT_stateT ?s ?M ?m1.0 ?m2.0 ==>
      ?M (run_env ?m1.0 ?s) (run_state ?m2.0 ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_var 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 3)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3))
           ))),
    ("Monomorphic_Monad.monad_state_contT",
     "monad_state ?return' ?bind' ?get ?put ==>
      monad_state return_cont bind_cont (get_cont ?get) (put_cont ?put)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_hole 3),
                 template_hole 2),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.put_nondet_parametric",
     "rel_fun (rel_fun ?S (rel_fun ?M ?M))
       (rel_fun ?S (rel_fun (rel_nondetT ?M) (rel_nondetT ?M)))
       nondetM_base.put_nondet nondetM_base.put_nondet",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_var 0))),
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_app (template_hole 2, template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.put_option_parametric",
     "rel_fun (rel_fun ?S (rel_fun ?M ?M))
       (rel_fun ?S (rel_fun (rel_optionT ?M) (rel_optionT ?M))) put_option
       put_option",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_var 0))),
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_app (template_hole 2, template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.tell_option_parametric",
     "rel_fun (rel_fun ?W (rel_fun ?M ?M))
       (rel_fun ?W (rel_fun (rel_optionT ?M) (rel_optionT ?M))) tell_option
       tell_option",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_var 0))),
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_app (template_hole 2, template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.ask_nondet_parametric",
     "rel_fun (rel_fun (rel_fun ?R ?M) ?M)
       (rel_fun (rel_fun ?R (rel_nondetT ?M)) (rel_nondetT ?M))
       nondetM_base.ask_nondet nondetM_base.ask_nondet",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 1),
                       template_var 0)),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_app (template_hole 2, template_var 0))),
                 template_app (template_hole 2, template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.get_nondet_parametric",
     "rel_fun (rel_fun (rel_fun ?S ?M) ?M)
       (rel_fun (rel_fun ?S (rel_nondetT ?M)) (rel_nondetT ?M))
       nondetM_base.get_nondet nondetM_base.get_nondet",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 1),
                       template_var 0)),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_app (template_hole 2, template_var 0))),
                 template_app (template_hole 2, template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.ask_option_parametric",
     "rel_fun (rel_fun (rel_fun ?R ?M) ?M)
       (rel_fun (rel_fun ?R (rel_optionT ?M)) (rel_optionT ?M)) ask_option
       ask_option",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 1),
                       template_var 0)),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_app (template_hole 2, template_var 0))),
                 template_app (template_hole 2, template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.get_option_parametric",
     "rel_fun (rel_fun (rel_fun ?S ?M) ?M)
       (rel_fun (rel_fun ?S (rel_optionT ?M)) (rel_optionT ?M)) get_option
       get_option",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 1),
                       template_var 0)),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_app (template_hole 2, template_var 0))),
                 template_app (template_hole 2, template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.cr_envT_stateT_rec",
     "rel_fun (rel_fun (rel_fun (eq_onp ((=) ?s)) ?M) ?C)
       (rel_fun (cr_envT_stateT ?s ?M) ?C) rec_envT rec_stateT",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app
                          (template_hole 5,
                           template_app (template_hole 4, template_var 2))),
                       template_var 1)),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 1)),
                 template_var 0)),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.return_writer_parametric",
     "rel_fun (rel_fun (rel_prod ?A (list_all2 ?W)) ?M)
       (rel_fun ?A (rel_writerT ?W ?A ?M)) return_writer return_writer",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 2),
                       template_app (template_hole 4, template_var 1))),
                   template_var 0)),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 2),
                   template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.cr_prob_ndi_Grp",
     "cr_prob_ndi (BNF_Def.Grp UNIV ?f) =
      BNF_Def.Grp UNIV (NondetT o return_id o cimage ?f o cset_pmf)",
     template_equation
      (template_app
        (template_hole 11,
         template_app
          (template_app (template_hole 10, template_hole 9),
           template_var 0)),
       template_app
        (template_app (template_hole 8, template_hole 7),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_hole 2)),
               template_app (template_hole 1, template_var 0))),
           template_hole 0)))),
    ("Monomorphic_Monad.cr_prod1_simps",
     "cr_prod1 ?c' ?A ?a (?b, ?c) = (?A ?a ?b & ?c' = ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_var 3, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 0))
           ))),
    ("Monomorphic_Monad.monad_state_alt_stateT",
     "monad_alt ?return ?bind ?alt ==>
      monad_state_alt (return_state ?return) (bind_state ?bind) get_state
       put_state (alt_state ?alt)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 2)),
                   template_app (template_hole 3, template_var 1)),
                 template_hole 2),
               template_hole 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_state_altc_stateT",
     "monad_altc ?return ?bind ?altc ==>
      monad_state_altc (return_state ?return) (bind_state ?bind) get_state
       put_state (altc_state ?altc)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 2)),
                   template_app (template_hole 3, template_var 1)),
                 template_hole 2),
               template_hole 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_state_prob_stateT",
     "monad_prob ?return ?bind ?sample ==>
      monad_state_prob (return_state ?return) (bind_state ?bind) get_state
       put_state (sample_state ?sample)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 2)),
                   template_app (template_hole 3, template_var 1)),
                 template_hole 2),
               template_hole 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_reader_state_stateT",
     "monad_reader ?return ?bind ?ask ==>
      monad_reader_state (return_state ?return) (bind_state ?bind)
       (ask_state ?ask) get_state put_state",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 2)),
                   template_app (template_hole 3, template_var 1)),
                 template_app (template_hole 2, template_var 0)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Monomorphic_Monad.alt_option_parametric",
     "rel_fun (rel_fun ?M (rel_fun ?M ?M))
       (rel_fun (rel_optionT ?M)
         (rel_fun (rel_optionT ?M) (rel_optionT ?M)))
       alt_option alt_option",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 0),
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_var 0))),
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 3, template_var 0)),
                   template_app (template_hole 3, template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.run_bind_env",
     "run_env (bind_env ?bind ?x ?f) ?r =
      ?bind (run_env ?x ?r) (%y. run_env (?f y) ?r)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_var 3,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         t_empty))),
    ("Monomorphic_Monad.rel_id_unfold",
     "rel_id ?A ?m (return_id ?x') = (EX x. ?m = return_id x & ?A x ?x')",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("Monomorphic_Monad.rel_id_unfold",
     "rel_id ?A (return_id ?x) ?m' =
      (EX x'. ?m' = return_id x' & ?A ?x x')",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2),
           template_app (template_hole 4, template_var 1)),
         template_var 0),
       template_app (template_hole 3, t_empty))),
    ("Monomorphic_Monad.rel_nondetT_unfold",
     "rel_nondetT ?M (NondetT ?m) ?m' =
      (EX m''. ?m' = NondetT m'' & ?M ?m m'')",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2),
           template_app (template_hole 4, template_var 1)),
         template_var 0),
       template_app (template_hole 3, t_empty))),
    ("Monomorphic_Monad.rel_nondetT_unfold",
     "rel_nondetT ?M ?m (NondetT ?m') =
      (EX m''. ?m = NondetT m'' & ?M m'' ?m')",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("Monomorphic_Monad.cUNION_cUn",
     "cUnion (cimage ?f (cUn ?A ?B)) =
      cUn (cUnion (cimage ?f ?A)) (cUnion (cimage ?f ?B))",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1))),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0))))),
    ("Monomorphic_Monad.monad_catch_optionT",
     "monad ?return ?bind ==>
      monad_catch (return_option ?return) (bind_option ?return ?bind)
       (fail_option ?return) (catch_option ?return ?bind)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 1)),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0)),
               template_app (template_hole 1, template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Monomorphic_Monad.cset_nondetM_envT",
     "cset_nondetM ?return ?bind ?merge ?mergec ==>
      cset_nondetM (return_env ?return) (bind_env ?bind) (merge_env ?merge)
       (merge_env ?mergec)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 3)),
                 template_app (template_hole 2, template_var 2)),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_catch_envT",
     "monad_catch ?return ?bind ?fail ?catch ==>
      monad_catch (return_env ?return) (bind_env ?bind) (fail_env ?fail)
       (catch_env ?catch)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 3)),
                 template_app (template_hole 2, template_var 2)),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_fail_alt_envT",
     "monad_fail_alt ?return ?bind ?fail ?alt ==>
      monad_fail_alt (return_env ?return) (bind_env ?bind) (fail_env ?fail)
       (alt_env ?alt)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 3)),
                 template_app (template_hole 2, template_var 2)),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_fail_alt_stateT",
     "monad_fail_alt ?return ?bind ?fail ?alt ==>
      monad_fail_alt (return_state ?return) (bind_state ?bind)
       (fail_state ?fail) (alt_state ?alt)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 3)),
                 template_app (template_hole 2, template_var 2)),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_state_envT",
     "monad_state ?return ?bind ?get ?put ==>
      monad_state (return_env ?return) (bind_env ?bind) (get_env ?get)
       (put_env ?put)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 3)),
                 template_app (template_hole 2, template_var 2)),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.nondetM_lemmas",
     "nondetM ?return ?bind ?merge ?empty ?single ?union ==>
      monad (nondetM_base.return_nondet ?return ?single)
       (nondetM_base.bind_nondet ?bind ?merge)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 5),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3))
           ))),
    ("Monomorphic_Monad.monad_commute_optionT",
     "[| monad_commute ?return ?bind; monad_discard ?return ?bind |]
      ==> monad_commute (return_option ?return)
           (bind_option ?return ?bind)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Monomorphic_Monad.monad_duplicate_optionT",
     "[| monad_duplicate ?return ?bind; monad_discard ?return ?bind |]
      ==> monad_duplicate (return_option ?return)
           (bind_option ?return ?bind)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Monomorphic_Monad.put_env_parametric",
     "rel_fun (rel_fun ?S (rel_fun ?M ?M))
       (rel_fun ?S
         (rel_fun (Monomorphic_Monad.rel_envT ?R ?M)
           (Monomorphic_Monad.rel_envT ?R ?M)))
       put_env put_env",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_var 1))),
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 0),
                       template_var 1)),
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 1)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.tell_env_parametric",
     "rel_fun (rel_fun ?W (rel_fun ?M ?M))
       (rel_fun ?W
         (rel_fun (Monomorphic_Monad.rel_envT ?R ?M)
           (Monomorphic_Monad.rel_envT ?R ?M)))
       tell_env tell_env",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_var 1))),
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 0),
                       template_var 1)),
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 1)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.tell_state_parametric",
     "rel_fun (rel_fun ?W (rel_fun ?M ?M))
       (rel_fun ?W (rel_fun (rel_stateT ?S ?M) (rel_stateT ?S ?M)))
       tell_state tell_state",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_var 1))),
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 0),
                       template_var 1)),
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 1)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.get_env_parametric",
     "rel_fun (rel_fun (rel_fun ?S ?M) ?M)
       (rel_fun (rel_fun ?S (Monomorphic_Monad.rel_envT ?R ?M))
         (Monomorphic_Monad.rel_envT ?R ?M))
       get_env get_env",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 2),
                       template_var 1)),
                   template_var 1)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_app
                      (template_app (template_hole 2, template_var 0),
                       template_var 1))),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 1))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.ask_state_parametric",
     "rel_fun (rel_fun (rel_fun ?R ?M) ?M)
       (rel_fun (rel_fun ?R (rel_stateT ?S ?M)) (rel_stateT ?S ?M))
       ask_state ask_state",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 2),
                       template_var 1)),
                   template_var 1)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_app
                      (template_app (template_hole 2, template_var 0),
                       template_var 1))),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 1))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.cr_id_prob_Grp",
     "cr_id_prob (BNF_Def.Grp ?A ?f) =
      BNF_Def.Grp {x. set_id x <= ?A} (return_pmf o ?f o extract)",
     template_equation
      (template_app
        (template_hole 9,
         template_app
          (template_app (template_hole 8, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, t_empty)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 0)),
           template_hole 0)))),
    ("Monomorphic_Monad.cUNION_assoc",
     "cUnion (cimage ?g (cUnion (cimage ?f ?A))) =
      cUnion (cimage (%x. cUnion (cimage ?g (?f x))) ?A)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)))),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Monomorphic_Monad.list_nondetMs",
     "monad_commute ?return ?bind ==>
      monad (nondetM_base.return_nondet ?return (%x. [x]))
       (nondetM_base.bind_nondet ?bind (lmerge ?return ?bind))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1), t_empty)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Monomorphic_Monad.list_nondetM",
     "monad_commute ?return ?bind ==>
      nondetM ?return ?bind (lmerge ?return ?bind) [] (%x. [x]) (@)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 4, template_var 1),
                     template_var 0),
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 0)),
                 template_hole 2),
               t_empty),
             template_hole 0)
           ))),
    ("Monomorphic_Monad.mset_nondetMs",
     "monad_commute ?return ?bind ==>
      monad (nondetM_base.return_nondet ?return (%x. {#x#}))
       (nondetM_base.bind_nondet ?bind (mmerge ?return ?bind))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1), t_empty)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Monomorphic_Monad.mset_nondetM",
     "monad_commute ?return ?bind ==>
      nondetM ?return ?bind (mmerge ?return ?bind) {#} (%x. {#x#}) (+)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 4, template_var 1),
                     template_var 0),
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 0)),
                 template_hole 2),
               t_empty),
             template_hole 0)
           ))),
    ("Monomorphic_Monad.monad_fail_alt_writerT",
     "monad_fail_alt ?return ?bind ?fail ?alt ==>
      monad_fail_alt (return_writer ?return) (bind_writer ?return ?bind)
       (fail_writer ?fail) (alt_writer ?alt)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 3)),
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 2)),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_state_optionT",
     "monad_state ?return ?bind ?get ?put ==>
      monad_state (return_option ?return) (bind_option ?return ?bind)
       (get_option ?get) (put_option ?put)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 3)),
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 2)),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_state_writerT",
     "monad_state ?return ?bind ?get ?put ==>
      monad_state (return_writer ?return) (bind_writer ?return ?bind)
       (get_writer ?get) (put_writer ?put)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 3)),
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 2)),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.rel_envT_mono",
     "[| ?R <= ?R'; ?M <= ?M' |]
      ==> Monomorphic_Monad.rel_envT ?R' ?M
          <= Monomorphic_Monad.rel_envT ?R ?M'",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 0)))),
    ("Monomorphic_Monad.rel_stateT_mono",
     "[| ?S' <= ?S; ?M <= ?M' |]
      ==> rel_stateT ?S ?M <= rel_stateT ?S' ?M'",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 0)))),
    ("Monomorphic_Monad.run_bind_state",
     "run_state (bind_state ?bind ?x ?f) ?s =
      ?bind (run_state ?x ?s) (%(a, s'). run_state (?f a) s')",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_var 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app (template_hole 0, t_empty)))),
    ("Monomorphic_Monad.lunionM_return_empty2",
     "monad_commute ?return ?bind ==>
      ?bind ?x (%A. ?bind (?return []) (%B. ?return (A @ B))) = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_var 1, template_var 0), t_empty),
         template_var 0))),
    ("Monomorphic_Monad.lunionM_return_empty1",
     "monad_commute ?return ?bind ==>
      ?bind (?return []) (%A. ?bind ?x (%B. ?return (A @ B))) = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_var 1,
             template_app (template_var 2, template_hole 1)),
           t_empty),
         template_var 0))),
    ("Monomorphic_Monad.munionM_comp_fun_commute",
     "monad_commute ?return ?bind ==>
      comp_fun_commute
       (%m1 m2. ?bind m1 (%A. ?bind m2 (%B. ?return (A + B))))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Monomorphic_Monad.munionM_return_empty2",
     "monad_commute ?return ?bind ==>
      ?bind ?x (%A. ?bind (?return {#}) (%B. ?return (A + B))) = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_var 1, template_var 0), t_empty),
         template_var 0))),
    ("Monomorphic_Monad.munionM_return_empty1",
     "monad_commute ?return ?bind ==>
      ?bind (?return {#}) (%A. ?bind ?x (%B. ?return (A + B))) = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_var 1,
             template_app (template_var 2, template_hole 1)),
           t_empty),
         template_var 0))),
    ("Monomorphic_Monad.alt_env_parametric",
     "rel_fun (rel_fun ?M (rel_fun ?M ?M))
       (rel_fun (Monomorphic_Monad.rel_envT ?R ?M)
         (rel_fun (Monomorphic_Monad.rel_envT ?R ?M)
           (Monomorphic_Monad.rel_envT ?R ?M)))
       alt_env alt_env",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_var 1))),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_var 1)),
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_var 1)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.catch_env_parametric",
     "rel_fun (rel_fun ?M (rel_fun ?M ?M))
       (rel_fun (Monomorphic_Monad.rel_envT ?R ?M)
         (rel_fun (Monomorphic_Monad.rel_envT ?R ?M)
           (Monomorphic_Monad.rel_envT ?R ?M)))
       catch_env catch_env",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_var 1))),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_var 1)),
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_var 1)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.alt_state_parametric",
     "rel_fun (rel_fun ?M (rel_fun ?M ?M))
       (rel_fun (rel_stateT ?S ?M)
         (rel_fun (rel_stateT ?S ?M) (rel_stateT ?S ?M)))
       alt_state alt_state",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_var 1))),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_var 1)),
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_var 1)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.put_writer_parametric",
     "rel_fun (rel_fun ?S (rel_fun ?M ?M))
       (rel_fun ?S (rel_fun (rel_writerT ?W ?A ?M) (rel_writerT ?W ?A ?M)))
       put_writer put_writer",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 3),
                   template_app
                    (template_app (template_hole 5, template_var 2),
                     template_var 2))),
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_app (template_hole 2, template_var 1),
                         template_var 0),
                       template_var 2)),
                   template_app
                    (template_app
                      (template_app (template_hole 2, template_var 1),
                       template_var 0),
                     template_var 2)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.cr_prod1_case_prod_transfer",
     "rel_fun (rel_fun ?A (rel_fun (eq_onp ((=) ?c)) ?C))
       (rel_fun (cr_prod1 ?c ?A) ?C) (%f a. f a ?c) case_prod",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4,
                         template_app (template_hole 3, template_var 1))),
                     template_var 0))),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 2)),
                 template_var 0)),
             t_empty),
           template_hole 0)
         )),
    ("Monomorphic_Monad.sequence_parametric",
     "rel_fun (rel_fun ?M (rel_fun (rel_fun ?A ?M) ?M))
       (rel_fun (list_all2 ?M) (rel_fun (rel_fun (list_all2 ?A) ?M) ?M))
       monad_base.sequence monad_base.sequence",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app (template_hole 9, template_var 1),
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_app (template_hole 7, template_var 0),
                         template_var 1)),
                     template_var 1))),
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 1)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app (template_hole 2, template_var 0)),
                       template_var 1)),
                   template_var 1))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.altc_sample_option_parametric",
     "rel_fun (rel_fun ?A (rel_fun (rel_fun ?P ?M) ?M))
       (rel_fun ?A (rel_fun (rel_fun ?P (rel_optionT ?M)) (rel_optionT ?M)))
       altc_sample_option altc_sample_option",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 8, template_var 2),
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app (template_hole 6, template_var 1),
                         template_var 0)),
                     template_var 0))),
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 1),
                       template_app (template_hole 2, template_var 0))),
                   template_app (template_hole 2, template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.pause_option_parametric",
     "rel_fun (rel_fun ?Out (rel_fun (rel_fun ?In ?M) ?M))
       (rel_fun ?Out
         (rel_fun (rel_fun ?In (rel_optionT ?M)) (rel_optionT ?M)))
       pause_option pause_option",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 8, template_var 2),
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app (template_hole 6, template_var 1),
                         template_var 0)),
                     template_var 0))),
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 1),
                       template_app (template_hole 2, template_var 0))),
                   template_app (template_hole 2, template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.ask_writer_parametric",
     "rel_fun (rel_fun (rel_fun ?R ?M) ?M)
       (rel_fun (rel_fun ?R (rel_writerT ?W ?A ?M)) (rel_writerT ?W ?A ?M))
       ask_writer ask_writer",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 3),
                       template_var 2)),
                   template_var 2)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_app
                      (template_app
                        (template_app (template_hole 2, template_var 1),
                         template_var 0),
                       template_var 2))),
                 template_app
                  (template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0),
                   template_var 2))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.get_writer_parametric",
     "rel_fun (rel_fun (rel_fun ?S ?M) ?M)
       (rel_fun (rel_fun ?S (rel_writerT ?W ?A ?M)) (rel_writerT ?W ?A ?M))
       get_writer get_writer",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 3),
                       template_var 2)),
                   template_var 2)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_app
                      (template_app
                        (template_app (template_hole 2, template_var 1),
                         template_var 0),
                       template_var 2))),
                 template_app
                  (template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0),
                   template_var 2))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.run_bind_option",
     "run_option (bind_option ?return ?bind ?x ?f) =
      ?bind (run_option ?x)
       (%x. case x of None => ?return None | Some y => run_option (?f y))",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_var 2, template_app (template_hole 3, template_var 1)),
         t_empty))),
    ("Monomorphic_Monad.run_catch_option",
     "run_option (catch_option ?return ?bind ?m1.0 ?m2.0) =
      ?bind (run_option ?m1.0)
       (%x. if x = None then run_option ?m2.0 else ?return x)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_var 2, template_app (template_hole 4, template_var 1)),
         t_empty))),
    ("Monomorphic_Monad.run_tell_writer",
     "run_writer (tell_writer ?return ?bind ?w ?m) =
      ?bind (run_writer ?m) (%(a, ws). ?return (a, ?w # ws))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_var 2, template_app (template_hole 4, template_var 0)),
         template_app (template_hole 2, t_empty)))),
    ("Monomorphic_Monad.monad_unfold",
     "bind_option ?return ?bind (OptionT ?x) ?f =
      OptionT
       (?bind ?x
         (%x. case x of None => ?return None
              | Some y => run_option (?f y)))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2),
           template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_var 2, template_var 1), t_empty)))),
    ("Monomorphic_Monad.monad_state_alt_envT",
     "monad_state_alt ?return ?bind ?get ?put ?alt ==>
      monad_state_alt (return_env ?return) (bind_env ?bind) (get_env ?get)
       (put_env ?put) (alt_env ?alt)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 4)),
                   template_app (template_hole 3, template_var 3)),
                 template_app (template_hole 2, template_var 2)),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_state_altc_envT",
     "monad_state_altc ?return ?bind ?get ?put ?altc ==>
      monad_state_altc (return_env ?return) (bind_env ?bind) (get_env ?get)
       (put_env ?put) (altc_env ?altc)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 4)),
                   template_app (template_hole 3, template_var 3)),
                 template_app (template_hole 2, template_var 2)),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_state_prob_envT",
     "monad_state_prob ?return ?bind ?get ?put ?sample ==>
      monad_state_prob (return_env ?return) (bind_env ?bind) (get_env ?get)
       (put_env ?put) (sample_env ?sample)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 4)),
                   template_app (template_hole 3, template_var 3)),
                 template_app (template_hole 2, template_var 2)),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.nondetM_lemmas",
     "nondetM ?return ?bind ?merge ?empty ?single ?union ==>
      monad_fail (nondetM_base.return_nondet ?return ?single)
       (nondetM_base.bind_nondet ?bind ?merge)
       (nondetM_base.fail_nondet ?return ?empty)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 4, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 1)),
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3)),
             template_app
              (template_app (template_hole 0, template_var 5),
               template_var 2))
           ))),
    ("Monomorphic_Monad.nondetM_ask_lemmas",
     "nondetM_ask ?return ?bind ?ask ?merge ?empty ?single ?union ==>
      monad_reader (nondetM_base.return_nondet ?return ?single)
       (nondetM_base.bind_nondet ?bind ?merge)
       (nondetM_base.ask_nondet ?ask)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 4, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 6),
                   template_var 1)),
               template_app
                (template_app (template_hole 1, template_var 5),
                 template_var 3)),
             template_app (template_hole 0, template_var 4))
           ))),
    ("Monomorphic_Monad.list_nondetMs",
     "monad_commute ?return ?bind ==>
      monad_fail (nondetM_base.return_nondet ?return (%x. [x]))
       (nondetM_base.bind_nondet ?bind (lmerge ?return ?bind))
       (nondetM_base.fail_nondet ?return [])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   t_empty)),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0))),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_hole 3))
           ))),
    ("Monomorphic_Monad.mset_nondetMs",
     "monad_commute ?return ?bind ==>
      monad_fail (nondetM_base.return_nondet ?return (%x. {#x#}))
       (nondetM_base.bind_nondet ?bind (mmerge ?return ?bind))
       (nondetM_base.fail_nondet ?return {#})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   t_empty)),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0))),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_hole 3))
           ))),
    ("Monomorphic_Monad.monad_reader_state_writerT",
     "monad_reader_state ?return ?bind ?ask ?get ?put ==>
      monad_reader_state (return_writer ?return) (bind_writer ?return ?bind)
       (ask_writer ?ask) (get_writer ?get) (put_writer ?put)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 4)),
                   template_app
                    (template_app (template_hole 3, template_var 4),
                     template_var 3)),
                 template_app (template_hole 2, template_var 2)),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_state_alt_optionT",
     "monad_state_alt ?return ?bind ?get ?put ?alt ==>
      monad_state_alt (return_option ?return) (bind_option ?return ?bind)
       (get_option ?get) (put_option ?put) (alt_option ?alt)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 4)),
                   template_app
                    (template_app (template_hole 3, template_var 4),
                     template_var 3)),
                 template_app (template_hole 2, template_var 2)),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_state_alt_writerT",
     "monad_state_alt ?return ?bind ?get ?put ?alt ==>
      monad_state_alt (return_writer ?return) (bind_writer ?return ?bind)
       (get_writer ?get) (put_writer ?put) (alt_writer ?alt)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 4)),
                   template_app
                    (template_app (template_hole 3, template_var 4),
                     template_var 3)),
                 template_app (template_hole 2, template_var 2)),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_state_altc_optionT",
     "monad_state_altc ?return ?bind ?get ?put ?altc ==>
      monad_state_altc (return_option ?return) (bind_option ?return ?bind)
       (get_option ?get) (put_option ?put) (altc_option ?altc)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 4)),
                   template_app
                    (template_app (template_hole 3, template_var 4),
                     template_var 3)),
                 template_app (template_hole 2, template_var 2)),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_state_altc_writerT",
     "monad_state_altc ?return ?bind ?get ?put ?altc ==>
      monad_state_altc (return_writer ?return) (bind_writer ?return ?bind)
       (get_writer ?get) (put_writer ?put) (altc_writer ?altc)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 4)),
                   template_app
                    (template_app (template_hole 3, template_var 4),
                     template_var 3)),
                 template_app (template_hole 2, template_var 2)),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_state_prob_optionT",
     "monad_state_prob ?return ?bind ?get ?put ?sample ==>
      monad_state_prob (return_option ?return) (bind_option ?return ?bind)
       (get_option ?get) (put_option ?put) (sample_option ?sample)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 4)),
                   template_app
                    (template_app (template_hole 3, template_var 4),
                     template_var 3)),
                 template_app (template_hole 2, template_var 2)),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_state_prob_writerT",
     "monad_state_prob ?return ?bind ?get ?put ?sample ==>
      monad_state_prob (return_writer ?return) (bind_writer ?return ?bind)
       (get_writer ?get) (put_writer ?put) (sample_writer ?sample)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 4)),
                   template_app
                    (template_app (template_hole 3, template_var 4),
                     template_var 3)),
                 template_app (template_hole 2, template_var 2)),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.nondetM_lemmas",
     "nondetM ?return ?bind ?merge ?empty ?single ?union ==>
      monad_alt (nondetM_base.return_nondet ?return ?single)
       (nondetM_base.bind_nondet ?bind ?merge)
       (nondetM_base.alt_nondet ?return ?bind ?union)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 4, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 1)),
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 4),
               template_var 0))
           ))),
    ("Monomorphic_Monad.pmf_eqI_avoid",
     "(!!i. i ~= ?x ==> pmf ?p i = pmf ?q i) ==> ?p = ?q",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Monomorphic_Monad.lift_parametric",
     "rel_fun (rel_fun ?A ?M)
       (rel_fun (rel_fun ?M (rel_fun (rel_fun ?A ?M) ?M))
         (rel_fun (rel_fun ?A ?A) (rel_fun ?M ?M)))
       monad_base.lift monad_base.lift",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 8, template_var 1),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_app (template_hole 8, template_var 1),
                           template_var 0)),
                       template_var 0))),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 1),
                       template_var 1)),
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.pause_env_parametric",
     "rel_fun (rel_fun ?Out (rel_fun (rel_fun ?In ?M) ?M))
       (rel_fun ?Out
         (rel_fun (rel_fun ?In (Monomorphic_Monad.rel_envT ?R ?M))
           (Monomorphic_Monad.rel_envT ?R ?M)))
       pause_env pause_env",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 8, template_var 3),
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app (template_hole 6, template_var 2),
                         template_var 1)),
                     template_var 1))),
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 2),
                       template_app
                        (template_app (template_hole 2, template_var 0),
                         template_var 1))),
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 1)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.pause_state_parametric",
     "rel_fun (rel_fun ?Out (rel_fun (rel_fun ?In ?M) ?M))
       (rel_fun ?Out
         (rel_fun (rel_fun ?In (rel_stateT ?S ?M)) (rel_stateT ?S ?M)))
       pause_state pause_state",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 8, template_var 3),
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app (template_hole 6, template_var 2),
                         template_var 1)),
                     template_var 1))),
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 2),
                       template_app
                        (template_app (template_hole 2, template_var 0),
                         template_var 1))),
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 1)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.altc_sample_state_parametric",
     "rel_fun (rel_fun ?X (rel_fun (rel_fun ?P ?M) ?M))
       (rel_fun ?X
         (rel_fun (rel_fun ?P (rel_stateT ?S ?M)) (rel_stateT ?S ?M)))
       altc_sample_state altc_sample_state",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 8, template_var 3),
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app (template_hole 6, template_var 2),
                         template_var 1)),
                     template_var 1))),
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 2),
                       template_app
                        (template_app (template_hole 2, template_var 0),
                         template_var 1))),
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 1)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.update_parametric",
     "rel_fun (rel_fun (rel_fun ?S ?M) ?M)
       (rel_fun (rel_fun ?S (rel_fun ?M ?M))
         (rel_fun (rel_fun ?S ?S) (rel_fun ?M ?M)))
       monad_state_base.update monad_state_base.update",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 7, template_var 1),
                       template_var 0)),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_var 0))),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_var 1)),
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.list_nondetMs",
     "monad_commute ?return ?bind ==>
      monad_alt (nondetM_base.return_nondet ?return (%x. [x]))
       (nondetM_base.bind_nondet ?bind (lmerge ?return ?bind))
       (nondetM_base.alt_nondet ?return ?bind (@))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   t_empty)),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0))),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0),
               template_hole 0))
           ))),
    ("Monomorphic_Monad.mset_nondetMs",
     "monad_commute ?return ?bind ==>
      monad_alt (nondetM_base.return_nondet ?return (%x. {#x#}))
       (nondetM_base.bind_nondet ?bind (mmerge ?return ?bind))
       (nondetM_base.alt_nondet ?return ?bind (+))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   t_empty)),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0))),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0),
               template_hole 0))
           ))),
    ("Monomorphic_Monad.alt_writer_parametric",
     "rel_fun (rel_fun ?M (rel_fun ?M ?M))
       (rel_fun (rel_writerT ?W ?A ?M)
         (rel_fun (rel_writerT ?W ?A ?M) (rel_writerT ?W ?A ?M)))
       alt_writer alt_writer",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_app
                    (template_app (template_hole 5, template_var 2),
                     template_var 2))),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_app (template_hole 3, template_var 1),
                       template_var 0),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_app (template_hole 3, template_var 1),
                         template_var 0),
                       template_var 2)),
                   template_app
                    (template_app
                      (template_app (template_hole 3, template_var 1),
                       template_var 0),
                     template_var 2)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.cUNION_parametric",
     "rel_fun (rel_cset ?A)
       (rel_fun (rel_fun ?A (rel_cset ?B)) (rel_cset ?B))
       (%A f. cUnion (cimage f A)) (%A f. cUnion (cimage f A))",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app (template_hole 7, template_var 1)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_app (template_hole 4, template_var 0))),
                 template_app (template_hole 4, template_var 0))),
             t_empty),
           t_empty)
         )),
    ("Monomorphic_Monad.lunionM_return_return",
     "monad_commute ?return ?bind ==>
      ?bind (?return ?A) (%A. ?bind (?return ?B) (%B. ?return (A @ B))) =
      ?return (?A @ ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_var 2, template_app (template_var 3, template_var 1)),
           t_empty),
         template_app
          (template_var 3,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Monomorphic_Monad.munionM_return_return",
     "monad_commute ?return ?bind ==>
      ?bind (?return ?A) (%A. ?bind (?return ?B) (%B. ?return (A + B))) =
      ?return (?A + ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_var 2, template_app (template_var 3, template_var 1)),
           t_empty),
         template_app
          (template_var 3,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Monomorphic_Monad.monad_catch_state_optionT",
     "monad_state ?return ?bind ?get ?put ==>
      monad_catch_state (return_option ?return) (bind_option ?return ?bind)
       (fail_option ?return) (catch_option ?return ?bind) (get_option ?get)
       (put_option ?put)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 6,
                       template_app (template_hole 5, template_var 3)),
                     template_app
                      (template_app (template_hole 4, template_var 3),
                       template_var 2)),
                   template_app (template_hole 3, template_var 3)),
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 2)),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.fset_nondetMs",
     "[| monad_commute ?return ?bind; monad_duplicate ?return ?bind |]
      ==> monad (nondetM_base.return_nondet ?return (%x. {|x|}))
           (nondetM_base.bind_nondet ?bind (fmerge ?return ?bind))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1), t_empty)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Monomorphic_Monad.assert_parametric",
     "rel_fun (rel_fun ?A ?M)
       (rel_fun (rel_fun ?M (rel_fun (rel_fun ?A ?M) ?M))
         (rel_fun ?M (rel_fun (rel_fun ?A (=)) (rel_fun ?M ?M))))
       monad_fail_base.assert monad_fail_base.assert",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app (template_hole 10, template_var 1),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 8, template_var 0),
                     template_app
                      (template_app
                        (template_hole 7,
                         template_app
                          (template_app (template_hole 10, template_var 1),
                           template_var 0)),
                       template_var 0))),
                 template_app
                  (template_app (template_hole 6, template_var 0),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 4, template_var 1),
                         template_hole 3)),
                     template_app
                      (template_app (template_hole 2, template_var 0),
                       template_var 0))))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.bind_env_parametric",
     "rel_fun (rel_fun ?M (rel_fun (rel_fun ?A ?M) ?M))
       (rel_fun (Monomorphic_Monad.rel_envT ?R ?M)
         (rel_fun (rel_fun ?A (Monomorphic_Monad.rel_envT ?R ?M))
           (Monomorphic_Monad.rel_envT ?R ?M)))
       bind_env bind_env",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 8, template_var 2),
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app (template_hole 6, template_var 1),
                         template_var 2)),
                     template_var 2))),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_app
                        (template_app (template_hole 4, template_var 0),
                         template_var 2))),
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_var 2)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.pause_writer_parametric",
     "rel_fun (rel_fun ?Out (rel_fun (rel_fun ?In ?M) ?M))
       (rel_fun ?Out
         (rel_fun (rel_fun ?In (rel_writerT ?W ?A ?M))
           (rel_writerT ?W ?A ?M)))
       pause_writer pause_writer",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 8, template_var 4),
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app (template_hole 6, template_var 3),
                         template_var 2)),
                     template_var 2))),
               template_app
                (template_app (template_hole 5, template_var 4),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 3),
                       template_app
                        (template_app
                          (template_app (template_hole 2, template_var 1),
                           template_var 0),
                         template_var 2))),
                   template_app
                    (template_app
                      (template_app (template_hole 2, template_var 1),
                       template_var 0),
                     template_var 2)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.altc_sample_writer_parametric",
     "rel_fun (rel_fun ?X (rel_fun (rel_fun ?P ?M) ?M))
       (rel_fun ?X
         (rel_fun (rel_fun ?P (rel_writerT ?W ?A ?M))
           (rel_writerT ?W ?A ?M)))
       altc_sample_writer altc_sample_writer",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 8, template_var 4),
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app (template_hole 6, template_var 3),
                         template_var 2)),
                     template_var 2))),
               template_app
                (template_app (template_hole 5, template_var 4),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 3),
                       template_app
                        (template_app
                          (template_app (template_hole 2, template_var 1),
                           template_var 0),
                         template_var 2))),
                   template_app
                    (template_app
                      (template_app (template_hole 2, template_var 1),
                       template_var 0),
                     template_var 2)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.altc_env_parametric",
     "rel_fun (rel_fun (rel_cset ?C) (rel_fun (rel_fun ?C ?M) ?M))
       (rel_fun (rel_cset ?C)
         (rel_fun (rel_fun ?C (Monomorphic_Monad.rel_envT ?R ?M))
           (Monomorphic_Monad.rel_envT ?R ?M)))
       altc_env altc_env",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app (template_hole 8, template_var 2)),
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app (template_hole 6, template_var 2),
                         template_var 1)),
                     template_var 1))),
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 8, template_var 2)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 2),
                       template_app
                        (template_app (template_hole 2, template_var 0),
                         template_var 1))),
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 1)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.merge_env_parametric",
     "rel_fun (rel_fun (rel_cset ?C) (rel_fun (rel_fun ?C ?M) ?M))
       (rel_fun (rel_cset ?C)
         (rel_fun (rel_fun ?C (Monomorphic_Monad.rel_envT ?R ?M))
           (Monomorphic_Monad.rel_envT ?R ?M)))
       merge_env merge_env",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app (template_hole 8, template_var 2)),
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app (template_hole 6, template_var 2),
                         template_var 1)),
                     template_var 1))),
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 8, template_var 2)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 2),
                       template_app
                        (template_app (template_hole 2, template_var 0),
                         template_var 1))),
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 1)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.sample_env_parametric",
     "rel_fun (rel_fun (rel_pmf ?P) (rel_fun (rel_fun ?P ?M) ?M))
       (rel_fun (rel_pmf ?P)
         (rel_fun (rel_fun ?P (Monomorphic_Monad.rel_envT ?R ?M))
           (Monomorphic_Monad.rel_envT ?R ?M)))
       sample_env sample_env",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app (template_hole 8, template_var 2)),
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app (template_hole 6, template_var 2),
                         template_var 1)),
                     template_var 1))),
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 8, template_var 2)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 2),
                       template_app
                        (template_app (template_hole 2, template_var 0),
                         template_var 1))),
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 1)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.nondetM_lemmas",
     "nondetM ?return ?bind ?merge ?empty ?single ?union ==>
      monad_fail_alt (nondetM_base.return_nondet ?return ?single)
       (nondetM_base.bind_nondet ?bind ?merge)
       (nondetM_base.fail_nondet ?return ?empty)
       (nondetM_base.alt_nondet ?return ?bind ?union)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 5, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 5),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 2, template_var 4),
                   template_var 3)),
               template_app
                (template_app (template_hole 1, template_var 5),
                 template_var 2)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 4),
               template_var 0))
           ))),
    ("Monomorphic_Monad.funionM_comp_fun_commute",
     "[| monad_commute ?return ?bind; monad_duplicate ?return ?bind |]
      ==> comp_fun_commute
           (%m1 m2.
               ?bind m1 (%A. ?bind m2 (%B. ?return (A |\<union>| B))))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Monomorphic_Monad.funionM_comp_fun_idem",
     "[| monad_commute ?return ?bind; monad_duplicate ?return ?bind |]
      ==> comp_fun_idem
           (%m1 m2.
               ?bind m1 (%A. ?bind m2 (%B. ?return (A |\<union>| B))))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Monomorphic_Monad.funionM_return_empty2",
     "[| monad_commute ?return ?bind; monad_duplicate ?return ?bind |]
      ==> ?bind ?x
           (%A. ?bind (?return {||}) (%B. ?return (A |\<union>| B))) =
          ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_var 1, template_var 0), t_empty),
         template_var 0))),
    ("Monomorphic_Monad.funionM_return_empty1",
     "[| monad_commute ?return ?bind; monad_duplicate ?return ?bind |]
      ==> ?bind (?return {||})
           (%A. ?bind ?x (%B. ?return (A |\<union>| B))) =
          ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_var 1,
             template_app (template_var 2, template_hole 1)),
           t_empty),
         template_var 0))),
    ("Monomorphic_Monad.lmerge_parametric",
     "rel_fun (rel_fun (list_all2 ?A) ?M)
       (rel_fun (rel_fun ?M (rel_fun (rel_fun (list_all2 ?A) ?M) ?M))
         (rel_fun (list_all2 ?A) (rel_fun (rel_fun ?A ?M) ?M)))
       lmerge lmerge",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app (template_hole 8, template_var 1)),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_app
                            (template_hole 9,
                             template_app
                              (template_hole 8, template_var 1)),
                           template_var 0)),
                       template_var 0))),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 8, template_var 1)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 1),
                         template_var 0)),
                     template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.catch_option_parametric",
     "rel_fun (rel_fun (rel_option ?A) ?M)
       (rel_fun (rel_fun ?M (rel_fun (rel_fun (rel_option ?A) ?M) ?M))
         (rel_fun (rel_optionT ?M)
           (rel_fun (rel_optionT ?M) (rel_optionT ?M))))
       catch_option catch_option",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app (template_hole 8, template_var 1)),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_app
                            (template_hole 9,
                             template_app
                              (template_hole 8, template_var 1)),
                           template_var 0)),
                       template_var 0))),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 0)),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 3, template_var 0)),
                     template_app (template_hole 3, template_var 0))))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.lUnionM_empty",
     "monad_commute ?return ?bind ==>
      foldr (%m1 m2. ?bind m1 (%A. ?bind m2 (%B. ?return (A @ B)))) []
       (?return []) =
      ?return []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, t_empty), template_hole 1),
           template_app (template_var 1, template_hole 0)),
         template_app (template_var 1, template_hole 0)))),
    ("Monomorphic_Monad.list_nondetMs",
     "monad_commute ?return ?bind ==>
      monad_fail_alt (nondetM_base.return_nondet ?return (%x. [x]))
       (nondetM_base.bind_nondet ?bind (lmerge ?return ?bind))
       (nondetM_base.fail_nondet ?return [])
       (nondetM_base.alt_nondet ?return ?bind (@))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 1),
                     t_empty)),
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 0))),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 5)),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0),
               template_hole 0))
           ))),
    ("Monomorphic_Monad.mUnionM_empty",
     "monad_commute ?return ?bind ==>
      fold_mset (%m1 m2. ?bind m1 (%A. ?bind m2 (%B. ?return (A + B))))
       (?return {#}) {#} =
      ?return {#}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, t_empty),
             template_app (template_var 1, template_hole 1)),
           template_hole 0),
         template_app (template_var 1, template_hole 1)))),
    ("Monomorphic_Monad.mset_nondetMs",
     "monad_commute ?return ?bind ==>
      monad_fail_alt (nondetM_base.return_nondet ?return (%x. {#x#}))
       (nondetM_base.bind_nondet ?bind (mmerge ?return ?bind))
       (nondetM_base.fail_nondet ?return {#})
       (nondetM_base.alt_nondet ?return ?bind (+))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 1),
                     t_empty)),
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 0))),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 5)),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0),
               template_hole 0))
           ))),
    ("Monomorphic_Monad.list_nondetM_ask",
     "[| monad_commute ?return ?bind; monad_reader ?return ?bind ?ask |]
      ==> nondetM_ask ?return ?bind ?ask (lmerge ?return ?bind) [] (%x. [x])
           (@)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 4, template_var 2),
                       template_var 1),
                     template_var 0),
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 1)),
                 template_hole 2),
               t_empty),
             template_hole 0)
           ))),
    ("Monomorphic_Monad.mset_nondetM_ask",
     "[| monad_commute ?return ?bind; monad_reader ?return ?bind ?ask |]
      ==> nondetM_ask ?return ?bind ?ask (mmerge ?return ?bind) {#}
           (%x. {#x#}) (+)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 4, template_var 2),
                       template_var 1),
                     template_var 0),
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 1)),
                 template_hole 2),
               t_empty),
             template_hole 0)
           ))),
    ("Monomorphic_Monad.cr_envT_stateT_bind",
     "rel_fun (rel_fun ?M (rel_fun (rel_fun (cr_prod1 ?s ?A) ?M) ?M))
       (rel_fun (cr_envT_stateT ?s ?M)
         (rel_fun (rel_fun ?A (cr_envT_stateT ?s ?M))
           (cr_envT_stateT ?s ?M)))
       bind_env bind_state",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app (template_hole 9, template_var 2),
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_app
                          (template_hole 7,
                           template_app
                            (template_app (template_hole 6, template_var 1),
                             template_var 0)),
                         template_var 2)),
                     template_var 2))),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 0),
                       template_app
                        (template_app (template_hole 4, template_var 1),
                         template_var 2))),
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_var 2)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.bind_state_parametric",
     "rel_fun (rel_fun ?M (rel_fun (rel_fun (rel_prod ?A ?S) ?M) ?M))
       (rel_fun (rel_stateT ?S ?M)
         (rel_fun (rel_fun ?A (rel_stateT ?S ?M)) (rel_stateT ?S ?M)))
       bind_state bind_state",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app (template_hole 9, template_var 2),
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_app
                          (template_hole 7,
                           template_app
                            (template_app (template_hole 6, template_var 1),
                             template_var 0)),
                         template_var 2)),
                     template_var 2))),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_app
                        (template_app (template_hole 4, template_var 0),
                         template_var 2))),
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_var 2)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.fset_nondetMs",
     "[| monad_commute ?return ?bind; monad_duplicate ?return ?bind |]
      ==> monad_fail (nondetM_base.return_nondet ?return (%x. {|x|}))
           (nondetM_base.bind_nondet ?bind (fmerge ?return ?bind))
           (nondetM_base.fail_nondet ?return {||})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   t_empty)),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0))),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_hole 3))
           ))),
    ("Monomorphic_Monad.list_nondetMs",
     "[| monad_commute ?return ?bind; monad_reader ?return ?bind ?ask |]
      ==> monad_reader (nondetM_base.return_nondet ?return (%x. [x]))
           (nondetM_base.bind_nondet ?bind (lmerge ?return ?bind))
           (nondetM_base.ask_nondet ?ask)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   t_empty)),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1))),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.mset_nondetMs",
     "[| monad_commute ?return ?bind; monad_reader ?return ?bind ?ask |]
      ==> monad_reader (nondetM_base.return_nondet ?return (%x. {#x#}))
           (nondetM_base.bind_nondet ?bind (mmerge ?return ?bind))
           (nondetM_base.ask_nondet ?ask)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   t_empty)),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1))),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.bind_option_parametric",
     "rel_fun (rel_fun (rel_option ?A) ?M)
       (rel_fun (rel_fun ?M (rel_fun (rel_fun (rel_option ?A) ?M) ?M))
         (rel_fun (rel_optionT ?M)
           (rel_fun (rel_fun ?A (rel_optionT ?M)) (rel_optionT ?M))))
       bind_option bind_option",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app (template_hole 9, template_var 1)),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 0),
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app
                          (template_app
                            (template_hole 10,
                             template_app
                              (template_hole 9, template_var 1)),
                           template_var 0)),
                       template_var 0))),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 0)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 1),
                         template_app (template_hole 4, template_var 0))),
                     template_app (template_hole 4, template_var 0))))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.run_bind_writer",
     "run_writer (bind_writer ?return ?bind ?m ?f) =
      ?bind (run_writer ?m)
       (%(a, ws).
           ?bind (run_writer (?f a)) (%(b, ws'). ?return (b, ws @ ws')))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_var 2, template_app (template_hole 4, template_var 1)),
         template_app (template_hole 2, t_empty)))),
    ("Monomorphic_Monad.munionM_commute",
     "monad_commute ?return ?bind ==>
      ?bind ?x (%A. ?bind ?y (%B. ?return (A + B))) =
      ?bind ?y (%A. ?bind ?x (%B. ?return (A + B)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_var 2, template_var 1), t_empty),
         template_app
          (template_app (template_var 2, template_var 0), t_empty)))),
    ("Monomorphic_Monad.fset_nondetM",
     "[| monad_commute ?return ?bind; monad_duplicate ?return ?bind |]
      ==> nondetM ?return ?bind (fmerge ?return ?bind) {||} (%x. {|x|})
           (|\<union>|)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 4, template_var 1),
                     template_var 0),
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 0)),
                 template_hole 2),
               t_empty),
             t_empty)
           ))),
    ("Monomorphic_Monad.funionM_return_return",
     "[| monad_commute ?return ?bind; monad_duplicate ?return ?bind |]
      ==> ?bind (?return ?A)
           (%A. ?bind (?return ?B) (%B. ?return (A |\<union>| B))) =
          ?return (?A |\<union>| ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_var 2, template_app (template_var 3, template_var 1)),
           t_empty),
         template_app
          (template_var 3,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Monomorphic_Monad.nondetM_lemmas",
     "[| nondetM ?return ?bind ?merge ?empty ?single ?union;
         monad_state ?return ?bind ?get ?put |]
      ==> monad_state (nondetM_base.return_nondet ?return ?single)
           (nondetM_base.bind_nondet ?bind ?merge)
           (nondetM_base.get_nondet ?get) (nondetM_base.put_nondet ?put)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 6, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 7),
                  template_var 6),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 7),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 2, template_var 6),
                   template_var 5)),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.monad_commute_nondetT_fset",
     "[| monad_commute ?return ?bind; monad_duplicate ?return ?bind;
         monad_discard ?return ?bind |]
      ==> monad_commute (nondetM_base.return_nondet ?return (%x. {|x|}))
           (nondetM_base.bind_nondet ?bind (fmerge ?return ?bind))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1), t_empty)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Monomorphic_Monad.fold_mset_parametric",
     "[| rel_fun ?A (rel_fun ?B ?B) ?f1.0 ?f2.0; comp_fun_commute ?f1.0;
         comp_fun_commute ?f2.0 |]
      ==> rel_fun ?B (rel_fun (rel_mset ?A) ?B) (fold_mset ?f1.0)
           (fold_mset ?f2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 3),
                  template_app
                   (template_app (template_hole 7, template_var 2),
                    template_var 2)),
                template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 2),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 3)),
                   template_var 2)),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.ffold_parametric",
     "[| rel_fun ?A (rel_fun ?B ?B) ?f1.0 ?f2.0; comp_fun_idem ?f1.0;
         comp_fun_idem ?f2.0 |]
      ==> rel_fun ?B (rel_fun (rel_fset ?A) ?B) (ffold ?f1.0)
           (ffold ?f2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 3),
                  template_app
                   (template_app (template_hole 7, template_var 2),
                    template_var 2)),
                template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 2),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 3)),
                   template_var 2)),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.alt_nondet_parametric",
     "rel_fun (rel_fun ?S ?M)
       (rel_fun (rel_fun ?M (rel_fun (rel_fun ?S ?M) ?M))
         (rel_fun (rel_fun ?S (rel_fun ?S ?S))
           (rel_fun (rel_nondetT ?M)
             (rel_fun (rel_nondetT ?M) (rel_nondetT ?M)))))
       nondetM_base.alt_nondet nondetM_base.alt_nondet",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_app (template_hole 11, template_var 1),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app (template_hole 9, template_var 0),
                     template_app
                      (template_app
                        (template_hole 8,
                         template_app
                          (template_app (template_hole 11, template_var 1),
                           template_var 0)),
                       template_var 0))),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 6, template_var 1),
                       template_app
                        (template_app (template_hole 5, template_var 1),
                         template_var 1))),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_var 0)),
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app (template_hole 3, template_var 0)),
                       template_app (template_hole 3, template_var 0)))))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.bind_nondet_parametric",
     "rel_fun (rel_fun ?M (rel_fun (rel_fun ?S ?M) ?M))
       (rel_fun (rel_fun ?S (rel_fun (rel_fun ?A ?M) ?M))
         (rel_fun (rel_nondetT ?M)
           (rel_fun (rel_fun ?A (rel_nondetT ?M)) (rel_nondetT ?M))))
       nondetM_base.bind_nondet nondetM_base.bind_nondet",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_app (template_hole 12, template_var 2),
                   template_app
                    (template_app
                      (template_hole 11,
                       template_app
                        (template_app (template_hole 10, template_var 1),
                         template_var 2)),
                     template_var 2))),
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 8, template_var 1),
                     template_app
                      (template_app
                        (template_hole 7,
                         template_app
                          (template_app (template_hole 6, template_var 0),
                           template_var 2)),
                       template_var 2))),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 2)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 0),
                         template_app (template_hole 4, template_var 2))),
                     template_app (template_hole 4, template_var 2))))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.list_nondetMs",
     "[| monad_commute ?return ?bind; monad_state ?return ?bind ?get ?put |]
      ==> monad_state (nondetM_base.return_nondet ?return (%x. [x]))
           (nondetM_base.bind_nondet ?bind (lmerge ?return ?bind))
           (nondetM_base.get_nondet ?get) (nondetM_base.put_nondet ?put)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 3),
                     t_empty)),
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 2))),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.mset_nondetMs",
     "[| monad_commute ?return ?bind; monad_state ?return ?bind ?get ?put |]
      ==> monad_state (nondetM_base.return_nondet ?return (%x. {#x#}))
           (nondetM_base.bind_nondet ?bind (mmerge ?return ?bind))
           (nondetM_base.get_nondet ?get) (nondetM_base.put_nondet ?put)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 3),
                     t_empty)),
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 2))),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.fUnionM_empty",
     "[| monad_commute ?return ?bind; monad_duplicate ?return ?bind |]
      ==> ffold
           (%m1 m2. ?bind m1 (%A. ?bind m2 (%B. ?return (A |\<union>| B))))
           (?return {||}) {||} =
          ?return {||}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, t_empty),
             template_app (template_var 1, template_hole 1)),
           template_hole 0),
         template_app (template_var 1, template_hole 1)))),
    ("Monomorphic_Monad.lUnionM_return",
     "monad_commute ?return ?bind ==>
      foldr (%m1 m2. ?bind m1 (%A. ?bind m2 (%B. ?return (A @ B))))
       (map (%x. ?return [x]) ?A) (?return []) =
      ?return ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, t_empty),
             template_app
              (template_app (template_hole 2, t_empty), template_var 0)),
           template_app (template_var 2, template_hole 0)),
         template_app (template_var 2, template_var 0)))),
    ("Monomorphic_Monad.mUnionM_return",
     "monad_commute ?return ?bind ==>
      fold_mset (%m1 m2. ?bind m1 (%A. ?bind m2 (%B. ?return (A + B))))
       (?return {#}) {#?return {#x#}. x :# ?A#} =
      ?return ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, t_empty),
             template_app (template_var 2, template_hole 2)),
           template_app
            (template_app (template_hole 1, t_empty), template_var 0)),
         template_app (template_var 2, template_var 0)))),
    ("Monomorphic_Monad.fset_nondetMs",
     "[| monad_commute ?return ?bind; monad_duplicate ?return ?bind |]
      ==> monad_alt (nondetM_base.return_nondet ?return (%x. {|x|}))
           (nondetM_base.bind_nondet ?bind (fmerge ?return ?bind))
           (nondetM_base.alt_nondet ?return ?bind (|\<union>|))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   t_empty)),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0))),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0),
               t_empty))
           ))),
    ("Monomorphic_Monad.fset_nondetMs",
     "[| monad_commute ?return ?bind; monad_duplicate ?return ?bind;
         monad_reader ?return ?bind ?ask |]
      ==> monad_reader (nondetM_base.return_nondet ?return (%x. {|x|}))
           (nondetM_base.bind_nondet ?bind (fmerge ?return ?bind))
           (nondetM_base.ask_nondet ?ask)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   t_empty)),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1))),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.tell_writer_parametric",
     "rel_fun (rel_fun (rel_prod ?A (list_all2 ?W)) ?M)
       (rel_fun
         (rel_fun ?M (rel_fun (rel_fun (rel_prod ?A (list_all2 ?W)) ?M) ?M))
         (rel_fun ?W
           (rel_fun (rel_writerT ?W ?A ?M) (rel_writerT ?W ?A ?M))))
       tell_writer tell_writer",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app (template_hole 9, template_var 2),
                       template_app (template_hole 8, template_var 1))),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_app
                            (template_hole 10,
                             template_app
                              (template_app
                                (template_hole 9, template_var 2),
                               template_app
                                (template_hole 8, template_var 1))),
                           template_var 0)),
                       template_var 0))),
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_app (template_hole 2, template_var 1),
                           template_var 2),
                         template_var 0)),
                     template_app
                      (template_app
                        (template_app (template_hole 2, template_var 1),
                         template_var 2),
                       template_var 0))))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.funionM_commute",
     "[| monad_commute ?return ?bind; monad_duplicate ?return ?bind |]
      ==> ?bind ?x (%A. ?bind ?y (%B. ?return (A |\<union>| B))) =
          ?bind ?y (%A. ?bind ?x (%B. ?return (A |\<union>| B)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_var 2, template_var 1), t_empty),
         template_app
          (template_app (template_var 2, template_var 0), t_empty)))),
    ("Monomorphic_Monad.rel_nondetTE",
     "[| rel_nondetT ?M ?m ?m';
         !!x y. [| ?m = NondetT x; ?m' = NondetT y; ?M x y |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Monomorphic_Monad.rel_optionTE",
     "[| rel_optionT ?M ?m ?m';
         !!x y. [| ?m = OptionT x; ?m' = OptionT y; ?M x y |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Monomorphic_Monad.fUnionM_return_fempty",
     "[| monad_commute ?return ?bind; monad_duplicate ?return ?bind |]
      ==> ffold
           (%m1 m2. ?bind m1 (%A. ?bind m2 (%B. ?return (A |\<union>| B))))
           (?return {||}) ((%x. ?return {||}) |`| ?A) =
          ?return {||}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, t_empty),
             template_app (template_var 2, template_hole 1)),
           template_app
            (template_app (template_hole 0, t_empty), template_var 0)),
         template_app (template_var 2, template_hole 1)))),
    ("Monomorphic_Monad.fset_nondetMs",
     "[| monad_commute ?return ?bind; monad_duplicate ?return ?bind |]
      ==> monad_fail_alt (nondetM_base.return_nondet ?return (%x. {|x|}))
           (nondetM_base.bind_nondet ?bind (fmerge ?return ?bind))
           (nondetM_base.fail_nondet ?return {||})
           (nondetM_base.alt_nondet ?return ?bind (|\<union>|))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 1),
                     t_empty)),
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 0))),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 5)),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0),
               t_empty))
           ))),
    ("Monomorphic_Monad.fset_nondetM_ask",
     "[| monad_commute ?return ?bind; monad_duplicate ?return ?bind;
         monad_reader ?return ?bind ?ask |]
      ==> nondetM_ask ?return ?bind ?ask (fmerge ?return ?bind) {||}
           (%x. {|x|}) (|\<union>|)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 4, template_var 2),
                       template_var 1),
                     template_var 0),
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 1)),
                 template_hole 2),
               t_empty),
             t_empty)
           ))),
    ("Monomorphic_Monad.fset_nondetMs",
     "[| monad_commute ?return ?bind; monad_duplicate ?return ?bind;
         monad_state ?return ?bind ?get ?put |]
      ==> monad_state (nondetM_base.return_nondet ?return (%x. {|x|}))
           (nondetM_base.bind_nondet ?bind (fmerge ?return ?bind))
           (nondetM_base.get_nondet ?get) (nondetM_base.put_nondet ?put)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 3),
                     t_empty)),
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 2))),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Monomorphic_Monad.rel_envTE",
     "[| Monomorphic_Monad.rel_envT ?R ?M ?m ?m';
         !!f g.
            [| ?m = EnvT f; ?m' = EnvT g; rel_fun ?R ?M f g |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("Monomorphic_Monad.fUnionM_return",
     "[| monad_commute ?return ?bind; monad_duplicate ?return ?bind |]
      ==> ffold
           (%m1 m2. ?bind m1 (%A. ?bind m2 (%B. ?return (A |\<union>| B))))
           (?return {||}) ((%x. ?return {|x|}) |`| ?A) =
          ?return ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, t_empty),
             template_app (template_var 2, template_hole 2)),
           template_app
            (template_app (template_hole 1, t_empty), template_var 0)),
         template_app (template_var 2, template_var 0)))),
    ("Monomorphic_Monad.bind_writer_parametric",
     "rel_fun (rel_fun (rel_prod ?A (list_all2 ?W)) ?M)
       (rel_fun
         (rel_fun ?M (rel_fun (rel_fun (rel_prod ?A (list_all2 ?W)) ?M) ?M))
         (rel_fun (rel_writerT ?W ?A ?M)
           (rel_fun (rel_fun ?A (rel_writerT ?W ?A ?M))
             (rel_writerT ?W ?A ?M))))
       bind_writer bind_writer",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app
                      (template_app (template_hole 10, template_var 2),
                       template_app (template_hole 9, template_var 1))),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 0),
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app
                          (template_app
                            (template_hole 11,
                             template_app
                              (template_app
                                (template_hole 10, template_var 2),
                               template_app
                                (template_hole 9, template_var 1))),
                           template_var 0)),
                       template_var 0))),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_app (template_hole 4, template_var 1),
                         template_var 2),
                       template_var 0)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 2),
                         template_app
                          (template_app
                            (template_app (template_hole 4, template_var 1),
                             template_var 2),
                           template_var 0))),
                     template_app
                      (template_app
                        (template_app (template_hole 4, template_var 1),
                         template_var 2),
                       template_var 0))))),
             template_hole 1),
           template_hole 0)
         )),
    ("Monomorphic_Monad.cr_envT_stateTE",
     "[| cr_envT_stateT ?s ?M ?m1.0 ?m2.0;
         !!f g.
            [| ?m1.0 = EnvT f; ?m2.0 = StateT g;
               rel_fun (eq_onp ((=) ?s)) ?M f g |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0))),
    ("Monomorphic_Monad.funionM_bind",
     "[| monad_commute ?return ?bind; monad_duplicate ?return ?bind |]
      ==> ?bind (?bind ?m ?f)
           (%A. ?bind (?bind ?m ?g) (%B. ?return (A |\<union>| B))) =
          ?bind ?m
           (%x. ?bind (?f x)
                 (%A. ?bind (?g x) (%B. ?return (A |\<union>| B))))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_var 3,
             template_app
              (template_app (template_var 3, template_var 2),
               template_var 1)),
           t_empty),
         template_app
          (template_app (template_var 3, template_var 2), t_empty)))),
    ("Monomorphic_Monad.fmerge_commute",
     "[| monad_commute ?return ?bind; monad_duplicate ?return ?bind;
         monad_discard ?return ?bind |]
      ==> fmerge ?return ?bind ?A (%x. fmerge ?return ?bind ?B (?f x)) =
          fmerge ?return ?bind ?B
           (%y. fmerge ?return ?bind ?A (%x. ?f x y))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3),
             template_var 2),
           t_empty),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3),
             template_var 1),
           t_empty)))),
    ("Monomorphic_Monad.lunionM_assoc",
     "monad_commute ?return ?bind ==>
      ?bind (?bind ?x (%A. ?bind ?y (%B. ?return (A @ B))))
       (%A. ?bind ?z (%B. ?return (A @ B))) =
      ?bind ?x
       (%A. ?bind (?bind ?y (%A. ?bind ?z (%B. ?return (A @ B))))
             (%B. ?return (A @ B)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_var 3,
             template_app
              (template_app (template_var 3, template_var 2), t_empty)),
           t_empty),
         template_app
          (template_app (template_var 3, template_var 2), t_empty)))),
    ("Monomorphic_Monad.munionM_assoc",
     "monad_commute ?return ?bind ==>
      ?bind (?bind ?x (%A. ?bind ?y (%B. ?return (A + B))))
       (%A. ?bind ?z (%B. ?return (A + B))) =
      ?bind ?x
       (%A. ?bind (?bind ?y (%A. ?bind ?z (%B. ?return (A + B))))
             (%B. ?return (A + B)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_var 3,
             template_app
              (template_app (template_var 3, template_var 2), t_empty)),
           t_empty),
         template_app
          (template_app (template_var 3, template_var 2), t_empty)))),
    ("Monomorphic_Monad.fmerge_bind",
     "[| monad_commute ?return ?bind; monad_duplicate ?return ?bind;
         monad_discard ?return ?bind |]
      ==> fmerge ?return ?bind ?A
           (%x. ?bind ?m' (%A'. fmerge ?return ?bind A' (?f x))) =
          ?bind ?m'
           (%A'. fmerge ?return ?bind ?A
                  (%x. fmerge ?return ?bind A' (?f x)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3),
             template_var 2),
           t_empty),
         template_app
          (template_app (template_var 3, template_var 1), t_empty)))),
    ("Monomorphic_Monad.mmerge_parametric",
     "[| rel_fun (rel_mset ?A) ?M ?return1.0 ?return2.0;
         rel_fun ?M (rel_fun (rel_fun (rel_mset ?A) ?M) ?M) ?bind1.0
          ?bind2.0;
         monad_commute ?return1.0 ?bind1.0;
         monad_commute ?return2.0 ?bind2.0 |]
      ==> rel_fun (rel_mset ?A) (rel_fun (rel_fun ?A ?M) ?M)
           (mmerge ?return1.0 ?bind1.0) (mmerge ?return2.0 ?bind2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 10,
                    template_app (template_hole 9, template_var 5)),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 4),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app
                         (template_hole 10,
                          template_app (template_hole 9, template_var 5)),
                        template_var 4)),
                    template_var 4)),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 9, template_var 5)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 5),
                       template_var 4)),
                   template_var 4)),
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Monomorphic_Monad.lunionM_lUnionM1",
     "monad_commute ?return ?bind ==>
      ?bind
       (foldr (%m1 m2. ?bind m1 (%A. ?bind m2 (%B. ?return (A @ B)))) ?A
         (?return []))
       (%A. ?bind ?x (%B. ?return (A @ B))) =
      foldr (%m1 m2. ?bind m1 (%A. ?bind m2 (%B. ?return (A @ B)))) ?A ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_var 2,
             template_app
              (template_app
                (template_app (template_hole 2, t_empty), template_var 1),
               template_app (template_var 3, template_hole 0))),
           t_empty),
         template_app
          (template_app
            (template_app (template_hole 2, t_empty), template_var 1),
           template_var 0)))),
    ("Monomorphic_Monad.munionM_mUnionM2",
     "monad_commute ?return ?bind ==>
      ?bind ?x
       (%A. ?bind
             (fold_mset
               (%m1 m2. ?bind m1 (%A. ?bind m2 (%B. ?return (A + B))))
               (?return {#}) ?A)
             (%B. ?return (A + B))) =
      fold_mset (%m1 m2. ?bind m1 (%A. ?bind m2 (%B. ?return (A + B)))) ?x
       ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_var 2, template_var 1), t_empty),
         template_app
          (template_app
            (template_app (template_hole 2, t_empty), template_var 1),
           template_var 0)))),
    ("Monomorphic_Monad.munionM_mUnionM1",
     "monad_commute ?return ?bind ==>
      ?bind
       (fold_mset (%m1 m2. ?bind m1 (%A. ?bind m2 (%B. ?return (A + B))))
         (?return {#}) ?A)
       (%A. ?bind ?x (%B. ?return (A + B))) =
      fold_mset (%m1 m2. ?bind m1 (%A. ?bind m2 (%B. ?return (A + B)))) ?x
       ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_var 2,
             template_app
              (template_app
                (template_app (template_hole 2, t_empty),
                 template_app (template_var 3, template_hole 0)),
               template_var 1)),
           t_empty),
         template_app
          (template_app
            (template_app (template_hole 2, t_empty), template_var 0),
           template_var 1)))),
    ("Monomorphic_Monad.lUnionM_Cons",
     "monad_commute ?return ?bind ==>
      foldr (%m1 m2. ?bind m1 (%A. ?bind m2 (%B. ?return (A @ B))))
       (?x # ?M) (?return []) =
      ?bind ?x
       (%A. ?bind
             (foldr (%m1 m2. ?bind m1 (%A. ?bind m2 (%B. ?return (A @ B))))
               ?M (?return []))
             (%B. ?return (A @ B)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, t_empty),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app (template_var 3, template_hole 0)),
         template_app
          (template_app (template_var 2, template_var 1), t_empty)))),
    ("Monomorphic_Monad.mUnionM_add_mset",
     "monad_commute ?return ?bind ==>
      fold_mset (%m1 m2. ?bind m1 (%A. ?bind m2 (%B. ?return (A + B))))
       (?return {#}) (add_mset ?x ?M) =
      ?bind ?x
       (%A. ?bind
             (fold_mset
               (%m1 m2. ?bind m1 (%A. ?bind m2 (%B. ?return (A + B))))
               (?return {#}) ?M)
             (%B. ?return (A + B)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, t_empty),
             template_app (template_var 3, template_hole 1)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_var 2, template_var 1), t_empty)))),
    ("Monomorphic_Monad.funionM_assoc",
     "[| monad_commute ?return ?bind; monad_duplicate ?return ?bind |]
      ==> ?bind (?bind ?x (%A. ?bind ?y (%B. ?return (A |\<union>| B))))
           (%A. ?bind ?z (%B. ?return (A |\<union>| B))) =
          ?bind ?x
           (%A. ?bind
                 (?bind ?y (%A. ?bind ?z (%B. ?return (A |\<union>| B))))
                 (%B. ?return (A |\<union>| B)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_var 3,
             template_app
              (template_app (template_var 3, template_var 2), t_empty)),
           t_empty),
         template_app
          (template_app (template_var 3, template_var 2), t_empty)))),
    ("Monomorphic_Monad.funionM_fUnionM2",
     "[| monad_commute ?return ?bind; monad_duplicate ?return ?bind |]
      ==> ?bind ?x
           (%A. ?bind
                 (ffold
                   (%m1 m2.
                       ?bind m1
                        (%A. ?bind m2 (%B. ?return (A |\<union>| B))))
                   (?return {||}) ?A)
                 (%B. ?return (A |\<union>| B))) =
          ffold
           (%m1 m2. ?bind m1 (%A. ?bind m2 (%B. ?return (A |\<union>| B))))
           ?x ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_var 2, template_var 1), t_empty),
         template_app
          (template_app
            (template_app (template_hole 2, t_empty), template_var 1),
           template_var 0)))),
    ("Monomorphic_Monad.funionM_fUnionM1",
     "[| monad_commute ?return ?bind; monad_duplicate ?return ?bind |]
      ==> ?bind
           (ffold
             (%m1 m2.
                 ?bind m1 (%A. ?bind m2 (%B. ?return (A |\<union>| B))))
             (?return {||}) ?A)
           (%A. ?bind ?x (%B. ?return (A |\<union>| B))) =
          ffold
           (%m1 m2. ?bind m1 (%A. ?bind m2 (%B. ?return (A |\<union>| B))))
           ?x ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_var 2,
             template_app
              (template_app
                (template_app (template_hole 2, t_empty),
                 template_app (template_var 3, template_hole 0)),
               template_var 1)),
           t_empty),
         template_app
          (template_app
            (template_app (template_hole 2, t_empty), template_var 0),
           template_var 1)))),
    ("Monomorphic_Monad.fUnionM_finset",
     "[| monad_commute ?return ?bind; monad_duplicate ?return ?bind |]
      ==> ffold
           (%m1 m2. ?bind m1 (%A. ?bind m2 (%B. ?return (A |\<union>| B))))
           (?return {||}) (finsert ?x ?M) =
          ?bind ?x
           (%A. ?bind
                 (ffold
                   (%m1 m2.
                       ?bind m1
                        (%A. ?bind m2 (%B. ?return (A |\<union>| B))))
                   (?return {||}) ?M)
                 (%B. ?return (A |\<union>| B)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, t_empty),
             template_app (template_var 3, template_hole 1)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_var 2, template_var 1), t_empty)))),
    ("Monomorphic_Monad.fmerge_parametric",
     "[| rel_fun (rel_fset ?A) ?M ?return1.0 ?return2.0;
         rel_fun ?M (rel_fun (rel_fun (rel_fset ?A) ?M) ?M) ?bind1.0
          ?bind2.0;
         monad_commute ?return1.0 ?bind1.0;
         monad_duplicate ?return1.0 ?bind1.0;
         monad_commute ?return2.0 ?bind2.0;
         monad_duplicate ?return2.0 ?bind2.0 |]
      ==> rel_fun (rel_fset ?A) (rel_fun (rel_fun ?A ?M) ?M)
           (fmerge ?return1.0 ?bind1.0) (fmerge ?return2.0 ?bind2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 12,
                    template_app (template_hole 11, template_var 5)),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 4),
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_app
                         (template_hole 12,
                          template_app (template_hole 11, template_var 5)),
                        template_var 4)),
                    template_var 4)),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 11, template_var 5)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 5),
                       template_var 4)),
                   template_var 4)),
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Monomorphic_Monad.bind_lunionM",
     "[| monad_commute ?return ?bind;
         !!A B.
            ?f (A @ B) =
            ?bind (?f A) (%x. ?bind (?f B) (%y. ?return (x @ y))) |]
      ==> ?bind (?bind ?m (%A. ?bind ?m' (%B. ?return (A @ B)))) ?f =
          ?bind (?bind ?m ?f)
           (%A. ?bind (?bind ?m' ?f) (%B. ?return (A @ B)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_var 3,
             template_app
              (template_app (template_var 3, template_var 1), t_empty)),
           template_var 2),
         template_app
          (template_app
            (template_var 3,
             template_app
              (template_app (template_var 3, template_var 1),
               template_var 2)),
           t_empty)))),
    ("Monomorphic_Monad.bind_munionM",
     "[| monad_commute ?return ?bind;
         !!A B.
            ?f (A + B) =
            ?bind (?f A) (%x. ?bind (?f B) (%y. ?return (x + y))) |]
      ==> ?bind (?bind ?m (%A. ?bind ?m' (%B. ?return (A + B)))) ?f =
          ?bind (?bind ?m ?f)
           (%A. ?bind (?bind ?m' ?f) (%B. ?return (A + B)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_var 3,
             template_app
              (template_app (template_var 3, template_var 1), t_empty)),
           template_var 2),
         template_app
          (template_app
            (template_var 3,
             template_app
              (template_app (template_var 3, template_var 1),
               template_var 2)),
           t_empty)))),
    ("Monomorphic_Monad.rel_fset_induct",
     "[| rel_fset ?A ?X ?Y; ?P {||} {||};
         !!X Y x y.
            [| rel_fset ?A X Y; ?P X Y; ?A x y;
               x |\<notin>| X | y |\<notin>| Y |]
            ==> ?P (finsert x X) (finsert y Y) |]
      ==> ?P ?X ?Y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 12, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 0, template_hole 11),
              template_hole 10)
            ),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 2), template_var 1)
           ))),
    ("Monomorphic_Monad.bind_funionM",
     "[| monad_commute ?return ?bind; monad_duplicate ?return ?bind;
         !!A B.
            ?f (A |\<union>| B) =
            ?bind (?f A)
             (%x. ?bind (?f B) (%y. ?return (x |\<union>| y))) |]
      ==> ?bind (?bind ?m (%A. ?bind ?m' (%B. ?return (A |\<union>| B))))
           ?f =
          ?bind (?bind ?m ?f)
           (%A. ?bind (?bind ?m' ?f) (%B. ?return (A |\<union>| B)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_var 3,
             template_app
              (template_app (template_var 3, template_var 1), t_empty)),
           template_var 2),
         template_app
          (template_app
            (template_var 3,
             template_app
              (template_app (template_var 3, template_var 1),
               template_var 2)),
           t_empty)))),
    ("Monomorphic_Monad.lUnionM_append",
     "monad_commute ?return ?bind ==>
      foldr (%m1 m2. ?bind m1 (%A. ?bind m2 (%B. ?return (A @ B))))
       (?A @ ?B) (?return []) =
      ?bind
       (foldr (%m1 m2. ?bind m1 (%A. ?bind m2 (%B. ?return (A @ B)))) ?A
         (?return []))
       (%A. ?bind
             (foldr (%m1 m2. ?bind m1 (%A. ?bind m2 (%B. ?return (A @ B))))
               ?B (?return []))
             (%B. ?return (A @ B)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, t_empty),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app (template_var 3, template_hole 0)),
         template_app
          (template_app
            (template_var 2,
             template_app
              (template_app
                (template_app (template_hole 3, t_empty), template_var 1),
               template_app (template_var 3, template_hole 0))),
           t_empty)))),
    ("Monomorphic_Monad.mUnionM_add",
     "monad_commute ?return ?bind ==>
      fold_mset (%m1 m2. ?bind m1 (%A. ?bind m2 (%B. ?return (A + B))))
       (?return {#}) (?A + ?B) =
      ?bind
       (fold_mset (%m1 m2. ?bind m1 (%A. ?bind m2 (%B. ?return (A + B))))
         (?return {#}) ?A)
       (%A. ?bind
             (fold_mset
               (%m1 m2. ?bind m1 (%A. ?bind m2 (%B. ?return (A + B))))
               (?return {#}) ?B)
             (%B. ?return (A + B)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, t_empty),
             template_app (template_var 3, template_hole 1)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_var 2,
             template_app
              (template_app
                (template_app (template_hole 3, t_empty),
                 template_app (template_var 3, template_hole 1)),
               template_var 1)),
           t_empty)))),
    ("Monomorphic_Monad.fUnionM_funion",
     "[| monad_commute ?return ?bind; monad_duplicate ?return ?bind |]
      ==> ffold
           (%m1 m2. ?bind m1 (%A. ?bind m2 (%B. ?return (A |\<union>| B))))
           (?return {||}) (?A |\<union>| ?B) =
          ?bind
           (ffold
             (%m1 m2.
                 ?bind m1 (%A. ?bind m2 (%B. ?return (A |\<union>| B))))
             (?return {||}) ?A)
           (%A. ?bind
                 (ffold
                   (%m1 m2.
                       ?bind m1
                        (%A. ?bind m2 (%B. ?return (A |\<union>| B))))
                   (?return {||}) ?B)
                 (%B. ?return (A |\<union>| B)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, t_empty),
             template_app (template_var 3, template_hole 1)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_var 2,
             template_app
              (template_app
                (template_app (template_hole 3, t_empty),
                 template_app (template_var 3, template_hole 1)),
               template_var 1)),
           t_empty)))),
    ("Monomorphic_Monad.fUnionM_funionM",
     "[| monad_commute ?return ?bind; monad_duplicate ?return ?bind |]
      ==> ffold
           (%m1 m2. ?bind m1 (%A. ?bind m2 (%B. ?return (A |\<union>| B))))
           (?return {||})
           ((%y. ?bind (?f y)
                  (%A. ?bind (?g y) (%B. ?return (A |\<union>| B)))) |`|
            ?A) =
          ?bind
           (ffold
             (%m1 m2.
                 ?bind m1 (%A. ?bind m2 (%B. ?return (A |\<union>| B))))
             (?return {||}) (?f |`| ?A))
           (%A. ?bind
                 (ffold
                   (%m1 m2.
                       ?bind m1
                        (%A. ?bind m2 (%B. ?return (A |\<union>| B))))
                   (?return {||}) (?g |`| ?A))
                 (%B. ?return (A |\<union>| B)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, t_empty),
             template_app (template_var 4, template_hole 1)),
           template_app
            (template_app (template_hole 0, t_empty), template_var 0)),
         template_app
          (template_app
            (template_var 3,
             template_app
              (template_app
                (template_app (template_hole 3, t_empty),
                 template_app (template_var 4, template_hole 1)),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0))),
           t_empty))))]
