Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Just_Do_It_ExamplesTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Monomorphic_Monad" (required by "Draft.Just_Do_It_ExamplesTemplates" via "Draft.Just_Do_It_Examples")
Loading theory "Draft.Templates" (required by "Draft.Just_Do_It_ExamplesTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.078s elapsed time, 0.277s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.139s elapsed time, 0.412s cpu time, 0.058s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Just_Do_It_ExamplesTemplates" via "Draft.ExtrEqs")
Proofs for inductive predicate(s) "rel_itself"
  Proving monotonicity ...
### Ignoring duplicate rewrite rule:
### cUnion (cimage csingle ?y) == ?y
locale three
  fixes tytok :: "'a itself"
  assumes "three TYPE('a)"
Proofs for inductive predicate(s) "rel_12_23"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_12_21"
  Proving monotonicity ...
locale monad_base
  fixes return :: "'a => 'm"
    and bind :: "'m => ('a => 'm) => 'm"
consts
  sequence :: "'m list => ('a list => 'm) => 'm"
### theory "HOL-Library.BigO"
### 0.601s elapsed time, 1.226s cpu time, 0.051s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Just_Do_It_ExamplesTemplates")
locale monad
  fixes return :: "'a => 'm"
    and bind :: "'m => ('a => 'm) => 'm"
  assumes "monad return bind"
locale monad_state_base
  fixes return :: "'a => 'm"
    and bind :: "'m => ('a => 'm) => 'm"
    and get :: "('s => 'm) => 'm"
    and put :: "'s => 'm => 'm"
locale monad_state
  fixes return :: "'a => 'm"
    and bind :: "'m => ('a => 'm) => 'm"
    and get :: "('s => 'm) => 'm"
    and put :: "'s => 'm => 'm"
  assumes "monad_state return bind get put"
locale monad_fail_base
  fixes return :: "'a => 'm"
    and bind :: "'m => ('a => 'm) => 'm"
    and fail :: "'m"
locale monad_fail
  fixes return :: "'a => 'm"
    and bind :: "'m => ('a => 'm) => 'm"
    and fail :: "'m"
  assumes "monad_fail return bind fail"
locale monad_catch_base
  fixes return :: "'a => 'm"
    and bind :: "'m => ('a => 'm) => 'm"
    and fail :: "'m"
    and catch :: "'m => 'm => 'm"
locale monad_catch
  fixes return :: "'a => 'm"
    and bind :: "'m => ('a => 'm) => 'm"
    and fail :: "'m"
    and catch :: "'m => 'm => 'm"
  assumes "monad_catch return bind fail catch"
locale monad_catch_state
  fixes return :: "'a => 'm"
    and bind :: "'m => ('a => 'm) => 'm"
    and fail :: "'m"
    and catch :: "'m => 'm => 'm"
    and get :: "('s => 'm) => 'm"
    and put :: "'s => 'm => 'm"
  assumes "monad_catch_state return bind fail catch get put"
locale monad_reader_base
  fixes return :: "'a => 'm"
    and bind :: "'m => ('a => 'm) => 'm"
    and ask :: "('r => 'm) => 'm"
locale monad_reader
  fixes return :: "'a => 'm"
    and bind :: "'m => ('a => 'm) => 'm"
    and ask :: "('r => 'm) => 'm"
  assumes "monad_reader return bind ask"
locale monad_reader_state
  fixes return :: "'a => 'm"
    and bind :: "'m => ('a => 'm) => 'm"
    and ask :: "('r => 'm) => 'm"
    and get :: "('s => 'm) => 'm"
    and put :: "'s => 'm => 'm"
  assumes "monad_reader_state return bind ask get put"
locale monad_prob_base
  fixes return :: "'a => 'm"
    and bind :: "'m => ('a => 'm) => 'm"
    and sample :: "'p pmf => ('p => 'm) => 'm"
locale monad_prob
  fixes return :: "'a => 'm"
    and bind :: "'m => ('a => 'm) => 'm"
    and sample :: "'p pmf => ('p => 'm) => 'm"
  assumes "monad_prob return bind sample"
locale monad_prob3
  fixes return :: "'a => 'm"
    and bind :: "'m => ('a => 'm) => 'm"
    and sample :: "'p pmf => ('p => 'm) => 'm"
  assumes "monad_prob3 return bind sample"
locale monad_state_prob
  fixes return :: "'a => 'm"
    and bind :: "'m => ('a => 'm) => 'm"
    and get :: "('s => 'm) => 'm"
    and put :: "'s => 'm => 'm"
    and sample :: "'p pmf => ('p => 'm) => 'm"
  assumes "monad_state_prob return bind get put sample"
locale monad_alt_base
  fixes return :: "'a => 'm"
    and bind :: "'m => ('a => 'm) => 'm"
    and alt :: "'m => 'm => 'm"
locale monad_alt
  fixes return :: "'a => 'm"
    and bind :: "'m => ('a => 'm) => 'm"
    and alt :: "'m => 'm => 'm"
  assumes "monad_alt return bind alt"
locale monad_fail_alt
  fixes return :: "'a => 'm"
    and bind :: "'m => ('a => 'm) => 'm"
    and fail :: "'m"
    and alt :: "'m => 'm => 'm"
  assumes "monad_fail_alt return bind fail alt"
locale monad_state_alt
  fixes return :: "'a => 'm"
    and bind :: "'m => ('a => 'm) => 'm"
    and get :: "('s => 'm) => 'm"
    and put :: "'s => 'm => 'm"
    and alt :: "'m => 'm => 'm"
  assumes "monad_state_alt return bind get put alt"
locale monad_altc_base
  fixes return :: "'a => 'm"
    and bind :: "'m => ('a => 'm) => 'm"
    and altc :: "'c cset => ('c => 'm) => 'm"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.517s elapsed time, 1.070s cpu time, 0.105s GC time
locale monad_altc
  fixes return :: "'a => 'm"
    and bind :: "'m => ('a => 'm) => 'm"
    and altc :: "'c cset => ('c => 'm) => 'm"
  assumes "monad_altc return bind altc"
locale monad_altc3
  fixes return :: "'a => 'm"
    and bind :: "'m => ('a => 'm) => 'm"
    and altc :: "'c cset => ('c => 'm) => 'm"
  assumes "monad_altc3 return bind altc"
locale monad_state_altc
  fixes return :: "'a => 'm"
    and bind :: "'m => ('a => 'm) => 'm"
    and get :: "('s => 'm) => 'm"
    and put :: "'s => 'm => 'm"
    and altc :: "'c cset => ('c => 'm) => 'm"
  assumes "monad_state_altc return bind get put altc"
locale monad_writer_base
  fixes return :: "'a => 'm"
    and bind :: "'m => ('a => 'm) => 'm"
    and tell :: "'w => 'm => 'm"
locale monad_writer
  fixes return :: "'a => 'm"
    and bind :: "'m => ('a => 'm) => 'm"
    and tell :: "'w => 'm => 'm"
  assumes "monad_writer return bind tell"
locale monad_resumption_base
  fixes return :: "'a => 'm"
    and bind :: "'m => ('a => 'm) => 'm"
    and pause :: "'o => ('i => 'm) => 'm"
locale monad_resumption
  fixes return :: "'a => 'm"
    and bind :: "'m => ('a => 'm) => 'm"
    and pause :: "'o => ('i => 'm) => 'm"
  assumes "monad_resumption return bind pause"
locale monad_commute
  fixes return :: "'a => 'm"
    and bind :: "'m => ('a => 'm) => 'm"
  assumes "monad_commute return bind"
locale monad_discard
  fixes return :: "'a => 'm"
    and bind :: "'m => ('a => 'm) => 'm"
  assumes "monad_discard return bind"
locale monad_duplicate
  fixes return :: "'a => 'm"
    and bind :: "'m => ('a => 'm) => 'm"
  assumes "monad_duplicate return bind"
consts
  bind_id ::
    "'a Monomorphic_Monad.id
     => ('a => 'a Monomorphic_Monad.id) => 'a Monomorphic_Monad.id"
consts
  bind_resumption ::
    "('o, 'i, 'a) resumption
     => ('a => ('o, 'i, 'a) resumption) => ('o, 'i, 'a) resumption"
consts
  bind_option ::
    "('a, 'm) optionT => ('a => ('a, 'm) optionT) => ('a, 'm) optionT"
consts
  put_option :: "'s => ('a, 'm) optionT => ('a, 'm) optionT"
consts
  bind_env :: "('r, 'm) envT => ('a => ('r, 'm) envT) => ('r, 'm) envT"
locale nondetM_base
  fixes return :: "'s => 'm"
    and bind :: "'m => ('s => 'm) => 'm"
    and merge :: "'s => ('a => 'm) => 'm"
    and empty :: "'s"
    and single :: "'a => 's"
    and
    union :: "'s => 's => 's"  (infixl \<open>\<^bold>\<union>\<close> 65)
locale nondetM
  fixes return :: "'s => 'm"
    and bind :: "'m => ('s => 'm) => 'm"
    and merge :: "'s => ('a => 'm) => 'm"
    and empty :: "'s"
    and single :: "'a => 's"
    and
    union :: "'s => 's => 's"  (infixl \<open>\<^bold>\<union>\<close> 65)
  assumes "nondetM return bind merge empty single (\<^bold>\<union>)"
locale nondetM_ask
  fixes return :: "'s => 'm"
    and bind :: "'m => ('s => 'm) => 'm"
    and ask :: "('r => 'm) => 'm"
    and merge :: "'s => ('a => 'm) => 'm"
    and empty :: "'s"
    and single :: "'a => 's"
    and
    union :: "'s => 's => 's"  (infixl \<open>\<^bold>\<union>\<close> 65)
  assumes
    "nondetM_ask return bind ask merge empty single (\<^bold>\<union>)"
locale cset_nondetM_base
  fixes return :: "'a cset => 'm"
    and bind :: "'m => ('a cset => 'm) => 'm"
    and merge :: "'a cset => ('a => 'm) => 'm"
    and mergec :: "'c cset => ('c => 'm) => 'm"
locale cset_nondetM
  fixes return :: "'a cset => 'm"
    and bind :: "'m => ('a cset => 'm) => 'm"
    and merge :: "'a cset => ('a => 'm) => 'm"
    and mergec :: "'c cset => ('c => 'm) => 'm"
  assumes "cset_nondetM return bind merge mergec"
locale cset_nondetM3
  fixes return :: "'a cset => 'm"
    and bind :: "'m => ('a cset => 'm) => 'm"
    and merge :: "'a cset => ('a => 'm) => 'm"
    and mergec :: "'c cset => ('c => 'm) => 'm"
  assumes "cset_nondetM3 return bind merge mergec"
consts
  bind_state ::
    "('s, 'm) stateT => ('a => ('s, 'm) stateT) => ('s, 'm) stateT"
consts
  put_state :: "'s => ('s, 'm) stateT => ('s, 'm) stateT"
locale monad_hom
  fixes return1 :: "'a => 'm1"
    and bind1 :: "'m1 => ('a => 'm1) => 'm1"
    and return2 :: "'a => 'm2"
    and bind2 :: "'m2 => ('a => 'm2) => 'm2"
    and h :: "'m1 => 'm2"
  assumes "monad_hom return1 bind1 return2 bind2 h"
locale monad_state_hom
  fixes return1 :: "'a => 'm1"
    and bind1 :: "'m1 => ('a => 'm1) => 'm1"
    and get1 :: "('s => 'm1) => 'm1"
    and put1 :: "'s => 'm1 => 'm1"
    and return2 :: "'a => 'm2"
    and bind2 :: "'m2 => ('a => 'm2) => 'm2"
    and get2 :: "('s => 'm2) => 'm2"
    and put2 :: "'s => 'm2 => 'm2"
    and h :: "'m1 => 'm2"
  assumes
    "monad_state_hom return1 bind1 get1 put1 return2 bind2 get2 put2 h"
locale monad_fail_hom
  fixes return1 :: "'a => 'm1"
    and bind1 :: "'m1 => ('a => 'm1) => 'm1"
    and fail1 :: "'m1"
    and return2 :: "'a => 'm2"
    and bind2 :: "'m2 => ('a => 'm2) => 'm2"
    and fail2 :: "'m2"
    and h :: "'m1 => 'm2"
  assumes "monad_fail_hom return1 bind1 fail1 return2 bind2 fail2 h"
locale monad_catch_hom
  fixes return1 :: "'a => 'm1"
    and bind1 :: "'m1 => ('a => 'm1) => 'm1"
    and fail1 :: "'m1"
    and catch1 :: "'m1 => 'm1 => 'm1"
    and return2 :: "'a => 'm2"
    and bind2 :: "'m2 => ('a => 'm2) => 'm2"
    and fail2 :: "'m2"
    and catch2 :: "'m2 => 'm2 => 'm2"
    and h :: "'m1 => 'm2"
  assumes
    "monad_catch_hom return1 bind1 fail1 catch1 return2 bind2 fail2 catch2
      h"
locale monad_reader_hom
  fixes return1 :: "'a => 'm1"
    and bind1 :: "'m1 => ('a => 'm1) => 'm1"
    and ask1 :: "('r => 'm1) => 'm1"
    and return2 :: "'a => 'm2"
    and bind2 :: "'m2 => ('a => 'm2) => 'm2"
    and ask2 :: "('r => 'm2) => 'm2"
    and h :: "'m1 => 'm2"
  assumes "monad_reader_hom return1 bind1 ask1 return2 bind2 ask2 h"
locale monad_prob_hom
  fixes return1 :: "'a => 'm1"
    and bind1 :: "'m1 => ('a => 'm1) => 'm1"
    and sample1 :: "'p pmf => ('p => 'm1) => 'm1"
    and return2 :: "'a => 'm2"
    and bind2 :: "'m2 => ('a => 'm2) => 'm2"
    and sample2 :: "'p pmf => ('p => 'm2) => 'm2"
    and h :: "'m1 => 'm2"
  assumes "monad_prob_hom return1 bind1 sample1 return2 bind2 sample2 h"
locale monad_alt_hom
  fixes return1 :: "'a => 'm1"
    and bind1 :: "'m1 => ('a => 'm1) => 'm1"
    and alt1 :: "'m1 => 'm1 => 'm1"
    and return2 :: "'a => 'm2"
    and bind2 :: "'m2 => ('a => 'm2) => 'm2"
    and alt2 :: "'m2 => 'm2 => 'm2"
    and h :: "'m1 => 'm2"
  assumes "monad_alt_hom return1 bind1 alt1 return2 bind2 alt2 h"
locale monad_altc_hom
  fixes return1 :: "'a => 'm1"
    and bind1 :: "'m1 => ('a => 'm1) => 'm1"
    and altc1 :: "'c cset => ('c => 'm1) => 'm1"
    and return2 :: "'a => 'm2"
    and bind2 :: "'m2 => ('a => 'm2) => 'm2"
    and altc2 :: "'c cset => ('c => 'm2) => 'm2"
    and h :: "'m1 => 'm2"
  assumes "monad_altc_hom return1 bind1 altc1 return2 bind2 altc2 h"
locale monad_writer_hom
  fixes return1 :: "'a => 'm1"
    and bind1 :: "'m1 => ('a => 'm1) => 'm1"
    and tell1 :: "'w => 'm1 => 'm1"
    and return2 :: "'a => 'm2"
    and bind2 :: "'m2 => ('a => 'm2) => 'm2"
    and tell2 :: "'w => 'm2 => 'm2"
    and h :: "'m1 => 'm2"
  assumes "monad_writer_hom return1 bind1 tell1 return2 bind2 tell2 h"
locale monad_resumption_hom
  fixes return1 :: "'a => 'm1"
    and bind1 :: "'m1 => ('a => 'm1) => 'm1"
    and pause1 :: "'o => ('i => 'm1) => 'm1"
    and return2 :: "'a => 'm2"
    and bind2 :: "'m2 => ('a => 'm2) => 'm2"
    and pause2 :: "'o => ('i => 'm2) => 'm2"
    and h :: "'m1 => 'm2"
  assumes "monad_resumption_hom return1 bind1 pause1 return2 bind2 pause2 h"
Proofs for inductive predicate(s) "cr_id_prob"
  Proving monotonicity ...
Proofs for inductive predicate(s) "cr_pmf_cset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "cr_prob_ndi"
  Proving monotonicity ...
### theory "Draft.Monomorphic_Monad"
### 9.640s elapsed time, 12.069s cpu time, 1.887s GC time
Loading theory "Draft.Just_Do_It_Examples" (required by "Draft.Just_Do_It_ExamplesTemplates")
locale monad_count_base
  fixes return :: "'a => 'm"
    and bind :: "'m => ('a => 'm) => 'm"
    and tick :: "'m => 'm"
locale monad_count
  fixes return :: "'a => 'm"
    and bind :: "'m => ('a => 'm) => 'm"
    and tick :: "'m => 'm"
  assumes "monad_count return bind tick"
locale hanoi_base
  fixes return :: "unit => 'm"
    and bind :: "'m => (unit => 'm) => 'm"
    and tick :: "'m => 'm"
consts
  hanoi :: "nat => 'm"
consts
  repeat :: "nat => 'm => 'm"
locale hanoi
  fixes return :: "unit => 'm"
    and bind :: "'m => (unit => 'm) => 'm"
    and tick :: "'m => 'm"
  assumes "Just_Do_It_Examples.hanoi return bind tick"
locale fast_product_base
  fixes return :: "int => 'm"
    and bind :: "'m => (int => 'm) => 'm"
    and fail :: "'m"
    and catch :: "'m => 'm => 'm"
consts
  work :: "int list => 'm"
locale fast_product
  fixes return :: "int => 'm"
    and bind :: "'m => (int => 'm) => 'm"
    and fail :: "'m"
    and catch :: "'m => 'm => 'm"
  assumes "fast_product return bind fail catch"
### theory "Draft.Just_Do_It_Examples"
### 0.160s elapsed time, 0.200s cpu time, 0.038s GC time
Loading theory "Draft.Just_Do_It_ExamplesTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Just_Do_It_ExamplesTemplates"
### 1.329s elapsed time, 1.595s cpu time, 0.170s GC time
val it = (): unit
