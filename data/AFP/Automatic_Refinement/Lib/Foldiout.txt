Loading theory "Draft.Foldi" (required by "Draft.FoldiMoreTemplates")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.FoldiMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.FoldiMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.FoldiMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
consts
  foldli :: "'b list => ('a => bool) => ('b => 'a => 'a) => 'a => 'a"
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.151s elapsed time, 0.627s cpu time, 0.043s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.FoldiMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "Draft.Foldi"
### 0.159s elapsed time, 0.656s cpu time, 0.043s GC time
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.206s elapsed time, 0.792s cpu time, 0.043s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.FoldiMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.344s elapsed time, 1.225s cpu time, 0.153s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.FoldiMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.772s elapsed time, 2.374s cpu time, 0.350s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.791s elapsed time, 2.257s cpu time, 0.240s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.848s elapsed time, 4.110s cpu time, 0.891s GC time
Loading theory "Draft.Templates" (required by "Draft.FoldiMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.067s elapsed time, 0.115s cpu time, 0.037s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.FoldiMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.431s elapsed time, 0.437s cpu time, 0.000s GC time
Loading theory "Draft.FoldiMoreTemplates"
val templateLemmas =
   [("Foldi.foldri_code", "foldri [] ?c ?f ?\<sigma> = ?\<sigma>",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 2),
           template_var 1),
         template_var 0),
       template_var 0)),
    ("Foldi.foldri_cons_id", "foldri ?l (%_. True) (#) [] = ?l",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 0), t_empty),
           t_empty),
         template_hole 0),
       template_var 0)),
    ("Foldi.foldli_not_cond",
     "~ ?c ?\<sigma> ==> foldli ?xs ?c ?f ?\<sigma> = ?\<sigma>",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_var 3, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 3),
             template_var 0),
           template_var 2),
         template_var 2))),
    ("Foldi.foldri_not_cond",
     "~ ?c ?\<sigma> ==> foldri ?xs ?c ?f ?\<sigma> = ?\<sigma>",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_var 3, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 3),
             template_var 0),
           template_var 2),
         template_var 2))),
    ("Foldi.foldli_foldl",
     "foldli ?xs (%_. True) ?f ?\<sigma> =
      foldl (%\<sigma> x. ?f x \<sigma>) ?\<sigma> ?xs",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 2), t_empty),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, t_empty), template_var 0),
         template_var 2))),
    ("Foldi.foldri_foldr",
     "foldri ?xs (%_. True) ?f ?\<sigma> = foldr ?f ?xs ?\<sigma>",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 2), t_empty),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, t_empty), template_var 2),
         template_var 0))),
    ("Foldi.foldli_map",
     "foldli (map ?f1.0 ?xs) ?c ?f2.0 ?\<sigma> =
      foldli ?xs ?c (?f2.0 o ?f1.0) ?\<sigma>",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 3)),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 4)),
         template_var 0))),
    ("Foldi.foldri_map",
     "foldri (map ?f1.0 ?xs) ?c ?f2.0 ?\<sigma> =
      foldri ?xs ?c (?f2.0 o ?f1.0) ?\<sigma>",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 3)),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 4)),
         template_var 0))),
    ("Foldi.foldli_concat",
     "foldli (concat ?xs) ?c ?f ?\<sigma> =
      foldli ?xs ?c (%x. foldli x ?c ?f) ?\<sigma>",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           t_empty),
         template_var 0))),
    ("Foldi.foldri_concat",
     "foldri (concat ?xs) ?c ?f ?\<sigma> =
      foldri ?xs ?c (%x. foldri x ?c ?f) ?\<sigma>",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           t_empty),
         template_var 0))),
    ("Foldi.foldli_snoc_id",
     "foldli ?l (%_. True) (%x l. l @ [x]) ?l0.0 = ?l0.0 @ ?l",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 1), t_empty),
           t_empty),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 0), template_var 1))),
    ("Foldi.foldli_append",
     "foldli (?xs1.0 @ ?xs2.0) ?c ?f ?\<sigma> =
      foldli ?xs2.0 ?c ?f (foldli ?xs1.0 ?c ?f ?\<sigma>)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3)),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("Foldi.foldri_append",
     "foldri (?xs1.0 @ ?xs2.0) ?c ?f ?\<sigma> =
      foldri ?xs1.0 ?c ?f (foldri ?xs2.0 ?c ?f ?\<sigma>)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3)),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("Foldi.fold_fold_prod_conv",
     "fold (%i. fold (?f i) ?l1.0) ?l2.0 ?s =
      fold (%(i, j). ?f i j) (List.product ?l2.0 ?l1.0) ?s",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, t_empty), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2, template_app (template_hole 1, t_empty)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_var 0))),
    ("Foldi.foldri_simp",
     "foldri (?l @ [?x]) ?c ?f ?\<sigma> =
      (if ?c ?\<sigma> then foldri ?l ?c ?f (?f ?x ?\<sigma>)
       else ?\<sigma>)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 4),
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_hole 1))),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app (template_var 2, template_var 0)),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 4),
                 template_var 2),
               template_var 1),
             template_app
              (template_app (template_var 1, template_var 3),
               template_var 0))),
         template_var 0))),
    ("Foldi.foldri_code",
     "foldri (?x # ?l) ?c ?f ?\<sigma> =
      (let \<sigma>' = foldri ?l ?c ?f ?\<sigma>
       in if ?c \<sigma>' then ?f ?x \<sigma>' else \<sigma>')",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 3)),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)),
         t_empty))),
    ("Foldi.foldli_foldli_prod_conv",
     "foldli ?l2.0 ?ctd (%i. foldli ?l1.0 ?ctd (?f i)) ?s =
      foldli (List.product ?l2.0 ?l1.0) ?ctd (%(i, j). ?f i j) ?s",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 4),
             template_var 3),
           t_empty),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 2)),
             template_var 3),
           template_app (template_hole 0, t_empty)),
         template_var 0))),
    ("Foldi.foldri_simp_Cons",
     "foldri (?x # ?l) ?c ?f ?\<sigma> =
      (if ?c (foldri ?l ?c ?f ?\<sigma>)
       then ?f ?x (foldri ?l ?c ?f ?\<sigma>)
       else foldri ?l ?c ?f ?\<sigma>)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3)),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_var 2,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0))),
           template_app
            (template_app (template_var 1, template_var 4),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("Foldi.foldli_snoc",
     "foldli (?xs @ [?x]) ?c ?f ?\<sigma> =
      (if ?c (foldli ?xs ?c ?f ?\<sigma>)
       then ?f ?x (foldli ?xs ?c ?f ?\<sigma>)
       else foldli ?xs ?c ?f ?\<sigma>)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 4),
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_hole 1))),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_var 2,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 4, template_var 4),
                     template_var 2),
                   template_var 1),
                 template_var 0))),
           template_app
            (template_app (template_var 1, template_var 3),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_var 4),
                   template_var 2),
                 template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 4, template_var 4),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("Foldi.foldli_cong",
     "[| ?l = ?l'; ?\<sigma> = ?\<sigma>'; ?c = ?c';
         !!\<sigma> x.
            [| x : set ?l'; ?c' \<sigma> |]
            ==> ?f x \<sigma> = ?f' x \<sigma> |]
      ==> foldli ?l ?c ?f ?\<sigma> = foldli ?l' ?c' ?f' ?\<sigma>'",
     template_implication
      ([template_equation (template_var 7, template_var 6),
        template_equation (template_var 5, template_var 4),
        template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 7),
               template_var 3),
             template_var 1),
           template_var 5),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 6),
               template_var 2),
             template_var 0),
           template_var 4)))),
    ("Foldi.foldri_cong",
     "[| ?l = ?l'; ?\<sigma> = ?\<sigma>'; ?c = ?c';
         !!\<sigma> x.
            [| x : set ?l'; ?c' \<sigma> |]
            ==> ?f x \<sigma> = ?f' x \<sigma> |]
      ==> foldri ?l ?c ?f ?\<sigma> = foldri ?l' ?c' ?f' ?\<sigma>'",
     template_implication
      ([template_equation (template_var 7, template_var 6),
        template_equation (template_var 5, template_var 4),
        template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 7),
               template_var 3),
             template_var 1),
           template_var 5),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 6),
               template_var 2),
             template_var 0),
           template_var 4))))]:
   (string * thm * template) list
### theory "Draft.FoldiMoreTemplates"
### 0.283s elapsed time, 0.431s cpu time, 0.062s GC time
val it = (): unit
