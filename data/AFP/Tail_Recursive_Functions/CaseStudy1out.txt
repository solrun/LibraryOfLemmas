Loading theory "Draft.CaseStudy1" (required by "Draft.CaseStudy1MoreTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.CaseStudy1MoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.CaseStudy1MoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.CaseStudy1MoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.122s elapsed time, 0.506s cpu time, 0.039s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.CaseStudy1MoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order:
  "(%p. length (fst p)) <*mlex*> (%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.207s elapsed time, 0.846s cpu time, 0.039s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.CaseStudy1MoreTemplates" via "Draft.ExtrEqs")
Found termination order: "length <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.316s elapsed time, 1.261s cpu time, 0.116s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.CaseStudy1MoreTemplates" via "Draft.ExtrEqs")
Found termination order:
  "(%p. length (fst p)) <*mlex*> (%p. length (snd (snd p))) <*mlex*> {}"
Proofs for inductive predicate(s) "l_sort_setp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
### theory "Draft.CaseStudy1"
### 0.845s elapsed time, 3.353s cpu time, 0.319s GC time
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.027s elapsed time, 3.718s cpu time, 0.919s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.055s elapsed time, 3.577s cpu time, 0.843s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.892s elapsed time, 5.093s cpu time, 1.033s GC time
Loading theory "Draft.Templates" (required by "Draft.CaseStudy1MoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.049s elapsed time, 0.064s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.CaseStudy1MoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.471s elapsed time, 0.527s cpu time, 0.068s GC time
Loading theory "Draft.CaseStudy1MoreTemplates"
val templateLemmas =
   [("CaseStudy1.l_sort_form_aux_all", "l_sort_form (l_sort_aux ?X)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("CaseStudy1.l_sort_aux_set", "l_sort_aux ?X : l_sort_set ?X",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 0))
         )),
    ("CaseStudy1.l_sort_input_1", "l_sort_inv_1 (?xs, [], [])",
     template_predicate
      (
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_hole 0)))
         )),
    ("CaseStudy1.l_sort_form_aux", "l_sort_form (l_sort_aux (?xs, [], []))",
     template_predicate
      (
         template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_hole 0))))
         )),
    ("CaseStudy1.l_sort_intro_1",
     "l_sort_inv_1 ?X ==> l_sorted (l_sort_out ?X)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("CaseStudy1.l_sort_input_2", "l_sort_inv_2 ?x ?xs (?xs, [], [])",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_hole 0)))
         )),
    ("CaseStudy1.l_sort_setp_l_sort_set_eq",
     "l_sort_setp ?X = (%x. x : l_sort_set ?X)",
     template_equation
      (template_app (template_hole 2, template_var 0), t_empty)),
    ("CaseStudy1.l_sort_subset",
     "?Y : l_sort_set ?X ==> l_sort_set ?Y <= l_sort_set ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("CaseStudy1.l_sort_invariance_1",
     "[| ?Y : l_sort_set ?X; l_sort_inv_1 ?X |] ==> l_sort_inv_1 ?Y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            ),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("CaseStudy1.l_count_app",
     "l_count ?x (?ys @ ?zs) = l_count ?x ?ys + l_count ?x ?zs",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("CaseStudy1.l_count_cons",
     "l_count ?x (?y # ?ys) = l_count ?x [?y] + l_count ?x ?ys",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 0))),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0)))),
    ("CaseStudy1.l_sort_invariance_2",
     "[| ?Y : l_sort_set ?X; l_sort_inv_2 ?w ?ws ?X |]
      ==> l_sort_inv_2 ?w ?ws ?Y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app (template_hole 1, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 3)
           ))),
    ("CaseStudy1.l_sort_intro_2",
     "[| l_sort_inv_2 ?x ?xs ?X; l_sort_form ?X |]
      ==> l_count ?x (l_sort_out ?X) = l_count ?x ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app (template_hole 0, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 1)))),
    ("CaseStudy1.l_sorted_app",
     "[| l_sorted ?xs; l_sorted ?ys; last ?xs <= hd ?ys |]
      ==> l_sorted (?xs @ ?ys)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 4, template_var 0)),
        template_inequation
         (less_equals, template_app (template_hole 2, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           )))]:
   (string * thm * template) list
### theory "Draft.CaseStudy1MoreTemplates"
### 0.262s elapsed time, 0.356s cpu time, 0.000s GC time
val it = (): unit
