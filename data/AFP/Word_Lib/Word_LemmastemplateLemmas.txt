   [("Word_Lemmas.shiftl0", "?x << 0 = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Word_Lemmas.shiftr_x_0", "?x >> 0 = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Word_Lemmas.cast_simps",
     "SCAST(?'a signed \<rightarrow> ?'a) (word_of_nat ?x) =
      word_of_nat ?x",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Word_Lemmas.shiftr_mask", "mask ?m >> ?m = 0",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_var 0),
       template_hole 0)),
    ("Word_Lemmas.of_int_sint_scast",
     "word_of_int (sint ?x) = SCAST(?'a \<rightarrow> ?'b) ?x",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Word_Lemmas.of_int_uint_ucast",
     "word_of_int (uint ?x) = UCAST(?'a \<rightarrow> ?'b) ?x",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Word_Lemmas.scast_of_nat_to_signed",
     "SCAST(?'a \<rightarrow> ?'a signed) (word_of_nat ?x) =
      word_of_nat ?x",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Word_Lemmas.unat_ucast_le",
     "unat (UCAST(?'a \<rightarrow> ?'b) ?x) <= unat ?x",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Word_Lemmas.sshiftr_n1", "- 1 >>> ?n = - 1",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0)),
         template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("Word_Lemmas.mask_len_id", "and ?x (mask LENGTH(?'a)) = ?x",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))),
       template_var 0)),
    ("Word_Lemmas.cast_simps", "is_down ?c = (LENGTH(?'b) <= LENGTH(?'a))",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app (template_hole 3, template_hole 2)),
         template_app (template_hole 1, template_hole 0)))),
    ("Word_Lemmas.cast_simps", "is_up ?c = (LENGTH(?'a) <= LENGTH(?'b))",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app (template_hole 3, template_hole 2)),
         template_app (template_hole 1, template_hole 0)))),
    ("Word_Lemmas.mask_eq", "mask ?n = (1 << ?n) - 1",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)),
         template_hole 0))),
    ("Word_Lemmas.mul_not_mask_eq_neg_shiftl", "not (mask ?n) = - 1 << ?n",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0)),
         template_var 0))),
    ("Word_Lemmas.slice_shiftr",
     "slice ?n ?w = UCAST(?'b \<rightarrow> ?'a) (?w >> ?n)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Word_Lemmas.scast_bit_test",
     "SCAST(?'a signed \<rightarrow> ?'a) (1 << ?n) = 1 << ?n",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Word_Lemmas.shiftl_mask_is_0", "and (?x << ?n) (mask ?n) = 0",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Word_Lemmas.shiftr1_unfold", "?x div (2::?'a) = ?x >> 1",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_hole 2))),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Word_Lemmas.shiftl_rev",
     "?w << ?n = word_reverse (word_reverse ?w >> ?n)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 1)),
           template_var 0)))),
    ("Word_Lemmas.shiftl1_is_mult", "?x << 1 = ?x * 2",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 0), template_hole 4),
       template_app
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Word_Lemmas.shiftr_rev",
     "?w >> ?n = word_reverse (word_reverse ?w << ?n)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 1)),
           template_var 0)))),
    ("Word_Lemmas.shiftr1_is_div_2", "?x >> 1 = ?x div 2",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 0), template_hole 4),
       template_app
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Word_Lemmas.rev_shiftl",
     "word_reverse ?w << ?n = word_reverse (?w >> ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Word_Lemmas.rev_shiftr",
     "word_reverse ?w >> ?n = word_reverse (?w << ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Word_Lemmas.minus_one_shift", "- (1 << ?n) = - 1 << ?n",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app (template_hole 2, template_hole 0)),
         template_var 0))),
    ("Word_Lemmas.scast_ucast_add_one",
     "SCAST(?'a signed \<rightarrow> ?'a)
       (UCAST(?'a \<rightarrow> ?'a signed) ?x + 1) =
      ?x + 1",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)),
           template_hole 2)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Word_Lemmas.upto_enum_step_subset",
     "set [?x , ?y .e. ?z] <= {?x..?z}",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2), template_var 0))),
    ("Word_Lemmas.is_aligned_ucastI",
     "is_aligned ?w ?n ==> is_aligned (UCAST(?'a \<rightarrow> ?'b) ?w) ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Word_Lemmas.unat_ucast_eq_unat_and_mask",
     "unat (UCAST(?'b \<rightarrow> ?'a) ?w) =
      unat (and ?w (mask LENGTH(?'a)))",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Word_Lemmas.unat_ucast_mask",
     "unat (UCAST(?'aa \<rightarrow> ?'a) ?a) =
      unat (and ?a (mask LENGTH(?'a)))",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Word_Lemmas.of_nat_eq_signed_scast",
     "(word_of_nat ?x = ?y) =
      (word_of_nat ?x = SCAST(?'a signed \<rightarrow> ?'a) ?y)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.le_mask_iff", "(?w <= mask ?n) = (?w >> ?n = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Word_Lemmas.shiftr_1", "1 >> ?n = (if ?n = 0 then 1 else 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1)),
               template_hole 4),
             template_hole 0)
           ))),
    ("Word_Lemmas.of_bool_nth", "of_bool (bit ?x ?v) = and (?x >> ?v) 1",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Word_Lemmas.mask_of_mask",
     "and (mask ?n) (mask ?m) = mask (min ?m ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Word_Lemmas.ucast_minus",
     "UCAST(?'a \<rightarrow> ?'a signed) (?a - ?b) =
      UCAST(?'a \<rightarrow> ?'a signed) ?a -
      UCAST(?'a \<rightarrow> ?'a signed) ?b",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Word_Lemmas.ucast_add",
     "UCAST(?'a \<rightarrow> ?'a signed) (?a + ?b) =
      UCAST(?'a \<rightarrow> ?'a signed) ?a +
      UCAST(?'a \<rightarrow> ?'a signed) ?b",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Word_Lemmas.unat_plus_gt", "unat (?a + ?b) <= unat ?a + unat ?b",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Word_Lemmas.scast_down_wi",
     "is_down SCAST(?'a \<rightarrow> ?'b) ==>
      SCAST(?'a \<rightarrow> ?'b) (word_of_int ?x) = word_of_int ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.of_nat_ucast",
     "is_down UCAST(?'a \<rightarrow> ?'b) ==>
      word_of_nat ?n = UCAST(?'a \<rightarrow> ?'b) (word_of_nat ?n)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_hole 3,
           template_app (template_hole 0, template_var 0))))),
    ("Word_Lemmas.cast_simps",
     "is_down UCAST(?'a \<rightarrow> ?'b) ==>
      UCAST(?'a \<rightarrow> ?'b) (word_of_int ?x) = word_of_int ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.cast_simps",
     "is_down UCAST(?'a \<rightarrow> ?'b) ==>
      UCAST(?'a \<rightarrow> ?'b) (word_of_nat ?n) = word_of_nat ?n",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.scast_scast_a",
     "is_down SCAST(?'b \<rightarrow> ?'c) ==>
      SCAST(?'b \<rightarrow> ?'c) (SCAST(?'a \<rightarrow> ?'b) ?a) =
      SCAST(?'a \<rightarrow> ?'c) ?a",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.ucast_ucast_a",
     "is_down UCAST(?'b \<rightarrow> ?'c) ==>
      UCAST(?'b \<rightarrow> ?'c) (UCAST(?'a \<rightarrow> ?'b) ?a) =
      UCAST(?'a \<rightarrow> ?'c) ?a",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.cast_simps",
     "is_up SCAST(?'a \<rightarrow> ?'b) ==>
      sint (SCAST(?'a \<rightarrow> ?'b) ?w) = sint ?w",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 3, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.scast_scast_b",
     "is_up SCAST(?'a \<rightarrow> ?'b) ==>
      SCAST(?'b \<rightarrow> ?'c) (SCAST(?'a \<rightarrow> ?'b) ?a) =
      SCAST(?'a \<rightarrow> ?'c) ?a",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 3, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.cast_simps",
     "is_up UCAST(?'a \<rightarrow> ?'b) ==>
      uint (UCAST(?'a \<rightarrow> ?'b) ?w) = uint ?w",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 3, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.ucast_ucast_b",
     "is_up UCAST(?'a \<rightarrow> ?'b) ==>
      UCAST(?'b \<rightarrow> ?'c) (UCAST(?'a \<rightarrow> ?'b) ?a) =
      UCAST(?'a \<rightarrow> ?'c) ?a",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 3, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.less_diff_gt0", "?a < ?b ==> 0 < ?b - ?a",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation
        (less_than, template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Word_Lemmas.word_and_less'", "?b < ?c ==> and ?a ?b < ?c",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_var 1))),
    ("Word_Lemmas.shiftr_less", "?w < ?k ==> ?w >> ?n < ?k",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("Word_Lemmas.word_upto_Nil", "?y < ?x ==> [?x .e. ?y] = []",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("Word_Lemmas.mask_mono", "?sz' <= ?sz ==> mask ?sz' <= mask ?sz",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.word_and_le'", "?b <= ?c ==> and ?a ?b <= ?c",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_var 1))),
    ("Word_Lemmas.word_eq_zeroI", "?a <= ?a - 1 ==> ?a = 0",
     template_implication
      ([template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 3, template_var 0),
            template_hole 2))],
       template_equation (template_var 0, template_hole 0))),
    ("Word_Lemmas.is_aligned_neg_mask_eq'",
     "is_aligned ?ptr ?sz = (and ?ptr (not (mask ?sz)) = ?ptr)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))),
         template_var 1))),
    ("Word_Lemmas.bit_shiftr_word_iff",
     "bit (?w >> ?m) ?n = bit ?w (?m + ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Word_Lemmas.nth_shiftr", "bit (?w >> ?m) ?n = bit ?w (?n + ?m)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Word_Lemmas.shiftl_t2n", "?w << ?n = 2 ^ ?n * ?w",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 0)),
         template_var 1))),
    ("Word_Lemmas.shiftr_div_2n_w", "?w >> ?n = ?w div 2 ^ ?n",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("Word_Lemmas.and_not_mask", "and ?w (not (mask ?n)) = ?w >> ?n << ?n",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0))),
    ("Word_Lemmas.shiftl_shiftl", "?a << ?b << ?c = ?a << ?b + ?c",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Word_Lemmas.shiftr_shiftr", "?a >> ?b >> ?c = ?a >> ?b + ?c",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Word_Lemmas.mask_shift", "and ?x (not (mask ?y)) >> ?y = ?x >> ?y",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))),
         template_var 0),
       template_app
        (template_app (template_hole 3, template_var 1), template_var 0))),
    ("Word_Lemmas.shiftr_shiftl_shiftr", "?x >> ?a << ?a >> ?a = ?x >> ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_var 0)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Word_Lemmas.ucast_NOT",
     "UCAST(?'a \<rightarrow> ?'b) (not ?x) =
      and (not (UCAST(?'a \<rightarrow> ?'b) ?x)) (mask LENGTH(?'a))",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 6, template_var 0))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Word_Lemmas.ucast_NOT_down",
     "is_down UCAST(?'a \<rightarrow> ?'b) ==>
      UCAST(?'a \<rightarrow> ?'b) (not ?x) =
      not (UCAST(?'a \<rightarrow> ?'b) ?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 0,
           template_app (template_hole 3, template_var 0))))),
    ("Word_Lemmas.shiftr_mask_le", "?n <= ?m ==> mask ?n >> ?m = 0",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0),
         template_hole 0))),
    ("Word_Lemmas.shiftr1_lt", "?x ~= 0 ==> ?x >> 1 < ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0),
         template_var 0))),
    ("Word_Lemmas.shiftl_zero_size", "size ?x <= ?n ==> ?x << ?n = 0",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Word_Lemmas.shiftr_zero_size", "size ?x <= ?n ==> ?x >> ?n = 0",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Word_Lemmas.shiftr_eq_0", "LENGTH(?'a) <= ?n ==> ?w >> ?n = 0",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_hole 3),
          template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("Word_Lemmas.ucast_leq_mask",
     "LENGTH(?'a) <= ?n ==> UCAST(?'a \<rightarrow> ?'b) ?x <= mask ?n",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_hole 3),
          template_var 1)],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Word_Lemmas.ucast_le_maskI",
     "?a <= mask ?n ==> UCAST(?'a \<rightarrow> ?'b) ?a <= mask ?n",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 3, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.and_mask_eq_iff_shiftr_0",
     "(and ?w (mask ?n) = ?w) = (?w >> ?n = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0)),
         template_var 1),
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Word_Lemmas.mask_Suc", "mask (Suc ?n) = 2 ^ ?n + mask ?n",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 0)),
         template_app (template_hole 6, template_var 0)))),
    ("Word_Lemmas.word_add_format", "- 1 + ?b + ?c = ?b + (?c - 1)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_hole 1)))),
    ("Word_Lemmas.word_shift_by_2", "?x * 4 = ?x << 2",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 3, template_hole 2)))),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_hole 0,
           template_app (template_hole 3, template_hole 2))))),
    ("Word_Lemmas.scast_of_nat_signed_to_unsigned_add",
     "SCAST(?'a signed \<rightarrow> ?'a)
       (word_of_nat ?x + word_of_nat ?y) =
      word_of_nat ?x + word_of_nat ?y",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.scast_of_nat_unsigned_to_signed_add",
     "SCAST(?'a \<rightarrow> ?'a signed)
       (word_of_nat ?x + word_of_nat ?y) =
      word_of_nat ?x + word_of_nat ?y",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.word_and_le_plus_one", "0 < ?a ==> and ?x (?a - 1) < ?a",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_var 1))),
    ("Word_Lemmas.shift_alignment",
     "?b <= ?a ==> is_aligned (?p >> ?a << ?a) ?b",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 1)),
                 template_var 1)),
             template_var 2)
           ))),
    ("Word_Lemmas.le_shiftr", "?u <= ?v ==> ?u >> ?n <= ?v >> ?n",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Word_Lemmas.shiftl_1_not_0", "?n < LENGTH(?'a) ==> 1 << ?n ~= 0",
     template_implication
      ([template_inequation
         (less_than, template_var 0,
          template_app (template_hole 6, template_hole 5))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 0),
             template_hole 0)
           ))),
    ("Word_Lemmas.ucast_shiftl_eq_0",
     "LENGTH(?'b) <= ?n ==> UCAST(?'a \<rightarrow> ?'b) (?w << ?n) = 0",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 5, template_hole 4),
          template_var 1)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_hole 0))),
    ("Word_Lemmas.le_max_word_ucast_id",
     "?x <= UCAST(?'b \<rightarrow> ?'a) (- 1) ==>
      UCAST(?'b \<rightarrow> ?'a) (UCAST(?'a \<rightarrow> ?'b) ?x) = ?x",
     template_implication
      ([template_inequation
         (less_equals, template_var 0,
          template_app
           (template_hole 4,
            template_app (template_hole 3, template_hole 2)))],
       template_equation
        (template_app
          (template_hole 4, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Word_Lemmas.is_up_compose",
     "[| is_up ?uc; is_up ?uc' |] ==> is_up (?uc' o ?uc)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Word_Lemmas.shiftr1_irrelevant_lsb",
     "bit ?x 0 | ?x >> 1 = ?x + 1 >> 1",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 0),
               template_hole 5)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 2)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0)),
               template_hole 2)))
         )),
    ("Word_Lemmas.sshiftr_div_2n", "sint (?w >>> ?n) = sint ?w div 2 ^ ?n",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 6, template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("Word_Lemmas.shiftr_div_2n", "uint (?w >> ?n) = uint ?w div 2 ^ ?n",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 6, template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("Word_Lemmas.shiftr_div_2n'", "unat (?w >> ?n) = unat ?w div 2 ^ ?n",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 6, template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("Word_Lemmas.mask_shiftl_decompose",
     "mask ?m << ?n = and (mask (?m + ?n)) (not (mask ?n))",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_app
          (template_hole 0,
           template_app (template_hole 3, template_var 0))))),
    ("Word_Lemmas.of_nat_shiftl",
     "word_of_nat ?x << ?n = word_of_nat (?x * 2 ^ ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_var 0),
       template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 0))))),
    ("Word_Lemmas.shiftl_over_and_dist",
     "and ?a ?b << ?c = and (?a << ?c) (?b << ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Word_Lemmas.shiftl_over_or_dist",
     "or ?a ?b << ?c = or (?a << ?c) (?b << ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Word_Lemmas.word_shiftl_add_distrib",
     "?x + ?y << ?n = (?x << ?n) + (?y << ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Word_Lemmas.shiftr_over_and_dist",
     "and ?a ?b >> ?c = and (?a >> ?c) (?b >> ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Word_Lemmas.shiftr_over_or_dist",
     "or ?a ?b >> ?c = or (?a >> ?c) (?b >> ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Word_Lemmas.and_mask2",
     "?w << ?n >> ?n = and ?w (mask (size ?w - ?n))",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0))))),
    ("Word_Lemmas.sshiftr_over_and_dist",
     "and ?a ?b >>> ?c = and (?a >>> ?c) (?b >>> ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Word_Lemmas.sshiftr_over_or_dist",
     "or ?a ?b >>> ?c = or (?a >>> ?c) (?b >>> ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Word_Lemmas.word_shift_by_3", "?x * 8 = ?x << 3",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 0),
         template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_hole 4,
               template_app (template_hole 4, template_hole 3))))),
       template_app
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_hole 3))))),
    ("Word_Lemmas.mask_rshift_mult_eq_rshift_lshift",
     "(?a >> ?b) * (1 << ?c) = ?a >> ?b << ?c",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Word_Lemmas.shiftr_mask_eq",
     "and (?x >> ?n) (mask (size ?x - ?n)) = ?x >> ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0))),
       template_app
        (template_app (template_hole 3, template_var 1), template_var 0))),
    ("Word_Lemmas.word_shiftr_lt",
     "unat (?w >> ?n) < 2 ^ (LENGTH(?'a) - ?n)",
     template_inequation
      (less_than,
       template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_hole 3))),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           template_var 0)))),
    ("Word_Lemmas.unat_signed_ucast_less_ucast",
     "LENGTH(?'a) <= LENGTH(?'b) ==>
      unat (UCAST(?'a \<rightarrow> ?'b signed) ?x) = unat ?x",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 7, template_hole 6),
          template_app (template_hole 5, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.word_and_1_shiftls'",
     "and ?x (1 << 1) = (if bit ?x 1 then 1 << 1 else 0)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 0),
         template_app
          (template_app (template_hole 5, template_hole 4),
           template_hole 3)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 3)),
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_hole 3)),
         template_hole 0))),
    ("Word_Lemmas.word_and_1_shiftls'",
     "and ?x (1 << 0) = (if bit ?x 0 then 1 << 0 else 0)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 0),
         template_app
          (template_app (template_hole 5, template_hole 4),
           template_hole 3)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 3)),
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_hole 3)),
         template_hole 0))),
    ("Word_Lemmas.word_and_1_shiftl",
     "and ?x (1 << ?n) = (if bit ?x ?n then 1 << ?n else 0)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 0)),
         template_hole 0))),
    ("Word_Lemmas.shiftr_mul_not_mask_eq_and_not_mask",
     "(?x >> ?n) * not (mask ?n) = - and ?x (not (mask ?n))",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)))))),
    ("Word_Lemmas.NOT_mask_shifted_lenword",
     "not (mask ?len << LENGTH(?'a) - ?len) = mask (LENGTH(?'a) - ?len)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)),
             template_var 0))),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           template_var 0)))),
    ("Word_Lemmas.mask_shift_and_negate",
     "and (and ?w (mask ?n) << ?m) (not (mask ?n << ?m)) = 0",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_app (template_hole 2, template_var 1))),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_var 0))),
       template_hole 0)),
    ("Word_Lemmas.scast_down_minus",
     "is_down SCAST(?'a \<rightarrow> ?'b) ==>
      SCAST(?'a \<rightarrow> ?'b) (?a - ?b) =
      SCAST(?'a \<rightarrow> ?'b) ?a - SCAST(?'a \<rightarrow> ?'b) ?b",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 1)),
           template_app (template_hole 3, template_var 0))))),
    ("Word_Lemmas.scast_down_add",
     "is_down SCAST(?'a \<rightarrow> ?'b) ==>
      SCAST(?'a \<rightarrow> ?'b) (?a + ?b) =
      SCAST(?'a \<rightarrow> ?'b) ?a + SCAST(?'a \<rightarrow> ?'b) ?b",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 1)),
           template_app (template_hole 3, template_var 0))))),
    ("Word_Lemmas.scast_down_mult",
     "is_down SCAST(?'a \<rightarrow> ?'b) ==>
      SCAST(?'a \<rightarrow> ?'b) (?a * ?b) =
      SCAST(?'a \<rightarrow> ?'b) ?a * SCAST(?'a \<rightarrow> ?'b) ?b",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 1)),
           template_app (template_hole 3, template_var 0))))),
    ("Word_Lemmas.ucast_down_minus",
     "is_down UCAST(?'a \<rightarrow> ?'b) ==>
      UCAST(?'a \<rightarrow> ?'b) (?a - ?b) =
      UCAST(?'a \<rightarrow> ?'b) ?a - UCAST(?'a \<rightarrow> ?'b) ?b",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 1)),
           template_app (template_hole 3, template_var 0))))),
    ("Word_Lemmas.ucast_down_add",
     "is_down UCAST(?'a \<rightarrow> ?'b) ==>
      UCAST(?'a \<rightarrow> ?'b) (?a + ?b) =
      UCAST(?'a \<rightarrow> ?'b) ?a + UCAST(?'a \<rightarrow> ?'b) ?b",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 1)),
           template_app (template_hole 3, template_var 0))))),
    ("Word_Lemmas.ucast_down_mult",
     "is_down UCAST(?'a \<rightarrow> ?'b) ==>
      UCAST(?'a \<rightarrow> ?'b) (?a * ?b) =
      UCAST(?'a \<rightarrow> ?'b) ?a * UCAST(?'a \<rightarrow> ?'b) ?b",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 1)),
           template_app (template_hole 3, template_var 0))))),
    ("Word_Lemmas.ucast_ucast_mask2",
     "is_down UCAST(?'a \<rightarrow> ?'b) ==>
      UCAST(?'b \<rightarrow> ?'c) (UCAST(?'a \<rightarrow> ?'b) ?x) =
      UCAST(?'a \<rightarrow> ?'c) (and ?x (mask LENGTH(?'b)))",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_hole 7))],
       template_equation
        (template_app
          (template_hole 5, template_app (template_hole 7, template_var 0)),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))))))),
    ("Word_Lemmas.unat_pow_le_intro",
     "LENGTH(?'a) <= ?n ==> unat ?x < 2 ^ ?n",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 7, template_hole 6),
          template_var 1)],
       template_inequation
        (less_than, template_app (template_hole 4, template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 1)))),
    ("Word_Lemmas.leq_high_bits_shiftr_low_bits_leq_bits_mask",
     "?x <= mask ?high_bits ==>
      ?x << ?low_bits <= mask (?low_bits + ?high_bits)",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 2, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Word_Lemmas.shiftr1_0_or_1", "?x >> 1 = 0 ==> ?x = 0 | ?x = 1",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 0),
            template_hole 3),
          template_hole 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_hole 2)),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_hole 0))
           ))),
    ("Word_Lemmas.toEnum_of_ucast",
     "LENGTH(?'b) <= LENGTH(?'a) ==>
      toEnum (unat ?b) = word_of_nat (unat ?b)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 7, template_hole 6),
          template_app (template_hole 5, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 0,
           template_app (template_hole 1, template_var 0))))),
    ("Word_Lemmas.leq_mask_shift",
     "?x <= mask (?low_bits + ?high_bits) ==>
      ?x >> ?low_bits <= mask ?high_bits",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_hole 2,
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Word_Lemmas.ucast_scast_1",
     "[| is_down SCAST(?'a \<rightarrow> ?'b);
         is_down UCAST(?'b \<rightarrow> ?'c) |]
      ==> UCAST(?'b \<rightarrow> ?'c) (SCAST(?'a \<rightarrow> ?'b) ?a) =
          SCAST(?'a \<rightarrow> ?'c) ?a",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_hole 4)),
        template_predicate
         (template_app (template_hole 3, template_hole 2))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 4, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.scast_ucast_1",
     "[| is_down UCAST(?'a \<rightarrow> ?'b);
         is_down UCAST(?'b \<rightarrow> ?'c) |]
      ==> SCAST(?'b \<rightarrow> ?'c) (UCAST(?'a \<rightarrow> ?'b) ?a) =
          UCAST(?'a \<rightarrow> ?'c) ?a",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_hole 5)),
        template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 5, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.ucast_scast_3",
     "[| is_down SCAST(?'a \<rightarrow> ?'c);
         is_down UCAST(?'b \<rightarrow> ?'c) |]
      ==> UCAST(?'b \<rightarrow> ?'c) (SCAST(?'a \<rightarrow> ?'b) ?a) =
          SCAST(?'a \<rightarrow> ?'c) ?a",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_hole 4)),
        template_predicate
         (template_app (template_hole 3, template_hole 2))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 4, template_var 0)))),
    ("Word_Lemmas.scast_ucast_3",
     "[| is_down UCAST(?'a \<rightarrow> ?'c);
         is_down UCAST(?'b \<rightarrow> ?'c) |]
      ==> SCAST(?'b \<rightarrow> ?'c) (UCAST(?'a \<rightarrow> ?'b) ?a) =
          UCAST(?'a \<rightarrow> ?'c) ?a",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_hole 5)),
        template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 5, template_var 0)))),
    ("Word_Lemmas.ucast_scast_4",
     "[| is_up SCAST(?'a \<rightarrow> ?'b);
         is_down UCAST(?'b \<rightarrow> ?'c) |]
      ==> UCAST(?'b \<rightarrow> ?'c) (SCAST(?'a \<rightarrow> ?'b) ?a) =
          SCAST(?'a \<rightarrow> ?'c) ?a",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_hole 4)),
        template_predicate
         (template_app (template_hole 3, template_hole 2))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 4, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.scast_ucast_4",
     "[| is_up UCAST(?'a \<rightarrow> ?'b);
         is_down UCAST(?'b \<rightarrow> ?'c) |]
      ==> SCAST(?'b \<rightarrow> ?'c) (UCAST(?'a \<rightarrow> ?'b) ?a) =
          UCAST(?'a \<rightarrow> ?'c) ?a",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_hole 5)),
        template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 5, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.word_and_1_shiftls",
     "and ?x 1 = (if odd ?x then 1 << 0 else 0)",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 0), template_hole 9),
       template_app
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_hole 3))),
                 template_var 0))),
           template_app
            (template_app (template_hole 2, template_hole 9),
             template_hole 1)),
         template_hole 0))),
    ("Word_Lemmas.word_and_1_shiftls",
     "and ?x 2 = (if bit ?x (Suc 0) then 1 << 1 else 0)",
     template_equation
      (template_app
        (template_app (template_hole 11, template_var 0),
         template_app
          (template_hole 10,
           template_app (template_hole 9, template_hole 8))),
       template_app
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 0),
               template_app (template_hole 5, template_hole 4))),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_hole 1)),
         template_hole 0))),
    ("Word_Lemmas.word_and_mask_shiftl",
     "and ?x (mask ?n << ?m) = and (?x >> ?m) (mask ?n) << ?m",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app (template_hole 1, template_var 1))),
         template_var 0))),
    ("Word_Lemmas.shift_times_fold", "?x * 2 ^ ?n << ?m = ?x << ?m + ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))),
               template_var 1))),
         template_var 0),
       template_app
        (template_app (template_hole 6, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Word_Lemmas.word_le_mask_out_plus_2sz",
     "?x <= and ?x (not (mask ?sz)) + 2 ^ ?sz - 1",
     template_inequation
      (less_equals, template_var 1,
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 1),
                 template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 0)))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))),
               template_var 0))),
         template_hole 0))),
    ("Word_Lemmas.bitmagic_zeroLast_leq_or1Last",
     "and ?a (mask ?len << ?x - ?len) <= or ?a (mask (?y - ?len))",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 4, template_var 3),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 2)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2))),
       template_app
        (template_app (template_hole 0, template_var 3),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2))))),
    ("Word_Lemmas.mask_overlap_zero",
     "?a <= ?b ==> and (and ?p (mask ?a)) (not (mask ?b)) = 0",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app (template_hole 2, template_var 2))),
           template_app
            (template_hole 1,
             template_app (template_hole 2, template_var 1))),
         template_hole 0))),
    ("Word_Lemmas.mask_overlap_zero'",
     "?b <= ?a ==> and (and ?p (not (mask ?a))) (mask ?b) = 0",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)))),
           template_app (template_hole 1, template_var 2)),
         template_hole 0))),
    ("Word_Lemmas.shiftr1_irrelevant_lsb'",
     "~ bit ?x 0 ==> ?x >> 1 = ?x + 1 >> 1",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 0),
                  template_hole 5)
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0), template_hole 2),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)),
           template_hole 2)))),
    ("Word_Lemmas.shiftr_mask2",
     "?n <= LENGTH(?'a) ==> mask ?n >> ?m = mask (?n - ?m)",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 5, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Word_Lemmas.shiftr_le_0", "unat ?w < 2 ^ ?n ==> ?w >> ?n = 0",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 7, template_var 1),
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3))),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Word_Lemmas.aligned_sub_aligned_simple",
     "[| is_aligned ?a ?n; is_aligned ?b ?n |] ==> is_aligned (?a - ?b) ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("Word_Lemmas.ucast_zero_is_aligned",
     "[| UCAST(?'a \<rightarrow> ?'b) ?w = 0; ?n <= LENGTH(?'b) |]
      ==> is_aligned ?w ?n",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 1), template_hole 4),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 2, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Word_Lemmas.uint_sshiftr_eq",
     "uint (?w >>> ?n) = take_bit LENGTH(?'a) (sint ?w div 2 ^ ?n)",
     template_equation
      (template_app
        (template_hole 10,
         template_app
          (template_app (template_hole 9, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 8,
           template_app (template_hole 7, template_hole 6)),
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 0))))),
    ("Word_Lemmas.and_mask",
     "and ?w (mask ?n) = ?w << size ?w - ?n >> size ?w - ?n",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1)),
               template_var 0))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Word_Lemmas.rshift_sub_mask_eq",
     "and (?a >> size ?a - ?b) (mask ?b) = ?a >> size ?a - ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_var 0))),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0)))),
    ("Word_Lemmas.sdiv_word_min'",
     "- (2 ^ (LENGTH(?'a) - Suc 0)) <= sint ?a sdiv sint ?b",
     template_inequation
      (less_equals,
       template_app
        (template_hole 11,
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_hole 9,
               template_app (template_hole 8, template_hole 7))),
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_hole 4)),
             template_app (template_hole 3, template_hole 2)))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.mask_add_aligned_right",
     "is_aligned ?p ?n ==> and (?q + ?p) (mask ?n) = and ?q (mask ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)),
           template_app (template_hole 0, template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 0, template_var 1))))),
    ("Word_Lemmas.word_shiftr_shiftl_shiftr_eq_shiftr",
     "?b <= ?a ==> ?x >> ?a << ?b >> ?b = ?x >> ?a",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 1)),
               template_var 2)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("Word_Lemmas.mask_eq_n1_shiftr",
     "?n <= LENGTH(?'a) ==> mask ?n = - 1 >> LENGTH(?'a) - ?n",
     template_implication
      ([template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 7, template_hole 6))],
       template_equation
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1)),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 7, template_hole 6)),
             template_var 0))))),
    ("Word_Lemmas.ucast_shiftl",
     "LENGTH(?'b) <= LENGTH(?'a) ==>
      UCAST(?'a \<rightarrow> ?'b) ?x << ?n =
      UCAST(?'a \<rightarrow> ?'b) (?x << ?n)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 7, template_hole 6),
          template_app (template_hole 5, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Word_Lemmas.and_and_mask_simple_not",
     "and ?y (mask ?n) = (0::?'a) ==> and (and ?x ?y) (mask ?n) = (0::?'a)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 2),
            template_app (template_hole 1, template_var 1)),
          template_hole 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 2)),
           template_app (template_hole 1, template_var 1)),
         template_hole 0))),
    ("Word_Lemmas.word_enum_decomp_set",
     "[?x .e. ?y] = ?as @ ?a # ?bs ==> ?a ~: set ?as",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 4, template_var 2),
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app (template_hole 0, template_var 2))
               )
           ))),
    ("Word_Lemmas.aligned_mask_disjoint",
     "[| is_aligned ?a ?n; ?b <= mask ?n |] ==> and ?a ?b = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_hole 0))),
    ("Word_Lemmas.const_less", "[| ?a - 1 < ?b; ?a ~= ?b |] ==> ?a < ?b",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 3, template_var 1),
            template_hole 2),
          template_var 0),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_inequation (less_than, template_var 1, template_var 0))),
    ("Word_Lemmas.ucast_eq_mask",
     "(UCAST(?'a \<rightarrow> ?'b) ?x = UCAST(?'a \<rightarrow> ?'b) ?y) =
      (and ?x (mask LENGTH(?'b)) = and ?y (mask LENGTH(?'b)))",
     template_bimplication
      (template_equation
        (template_app (template_hole 5, template_var 1),
         template_app (template_hole 5, template_var 0)),
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0))),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Word_Lemmas.sshiftr_numeral",
     "numeral ?k >>> numeral ?n =
      word_of_int
       (signed_take_bit (LENGTH(?'a) - 1) (numeral ?k) >> numeral ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app (template_hole 9, template_var 1)),
         template_app (template_hole 8, template_var 0)),
       template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2)),
                   template_hole 1)),
               template_app (template_hole 0, template_var 1))),
           template_app (template_hole 8, template_var 0))))),
    ("Word_Lemmas.mask_shift_eq_mask_mask",
     "and ?p (mask ?a) >> ?b << ?b =
      and (and ?p (mask ?a)) (not (mask ?b))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app (template_hole 1, template_var 1))),
             template_var 0)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 1))),
         template_app
          (template_hole 0,
           template_app (template_hole 1, template_var 0))))),
    ("Word_Lemmas.mask_sub",
     "?n <= ?m ==> mask ?m - mask ?n = and (mask ?m) (not (mask ?n))",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app (template_hole 2, template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)))))),
    ("Word_Lemmas.sbintrunc_uint_ucast",
     "Suc ?n = LENGTH(?'b) ==>
      signed_take_bit ?n (uint (UCAST(?'a \<rightarrow> ?'b) ?w)) =
      signed_take_bit ?n (uint ?w)",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 1),
          template_app (template_hole 6, template_hole 5))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Word_Lemmas.and_eq_0_is_nth",
     "?y = 1 << ?n ==> (and ?x ?y = 0) = (~ bit ?x ?n)",
     template_implication
      ([template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 6, template_hole 5),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 2)),
           template_hole 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Word_Lemmas.unat_of_ucast_then_shift_eq_unat_of_shift",
     "LENGTH(?'a) <= LENGTH(?'b) ==>
      unat (UCAST(?'a \<rightarrow> ?'b) ?x >> ?n) = unat (?x >> ?n)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 9, template_hole 8),
          template_app (template_hole 7, template_hole 6))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Word_Lemmas.word_and_notzeroD",
     "and ?w ?w' ~= (0::?'a) ==> ?w ~= (0::?'a) & ?w' ~= (0::?'a)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_hole 1))),
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 1)))
           ))),
    ("Word_Lemmas.shiftr_not_mask_0",
     "LENGTH(?'a) <= ?n + ?m ==> and (?w >> ?n) (not (mask ?m)) = 0",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 8, template_hole 7),
          template_app
           (template_app (template_hole 6, template_var 2),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 2)),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1))),
         template_hole 0))),
    ("Word_Lemmas.sint_eq_uint_2pl",
     "?a < 2 ^ (LENGTH(?'a) - 1) ==> sint ?a = uint ?a",
     template_implication
      ([template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 10,
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_hole 7))),
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4)),
              template_hole 3)))],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.unat_2tp_if",
     "unat (2 ^ ?n) = (if ?n < LENGTH(?'a) then 2 ^ ?n else 0)",
     template_equation
      (template_app
        (template_hole 11,
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_hole 9,
               template_app (template_hole 8, template_hole 7))),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 0),
               template_app (template_hole 4, template_hole 3))),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 8, template_hole 7))),
             template_var 0)),
         template_hole 0))),
    ("Word_Lemmas.shiftr_mask_eq'",
     "?m = size ?x - ?n ==> and (?x >> ?n) (mask ?m) = ?x >> ?n",
     template_implication
      ([template_equation
         (template_var 2,
          template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 1)),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app (template_hole 0, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Word_Lemmas.shift_then_mask_eq_shift_low_bits",
     "?x <= mask (?low_bits + ?high_bits) ==>
      and (?x >> ?low_bits) (mask ?high_bits) = ?x >> ?low_bits",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_app (template_hole 4, template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("Word_Lemmas.ucast_down",
     "source_size REVCAST(?'b \<rightarrow> ?'a) =
      target_size REVCAST(?'b \<rightarrow> ?'a) + ?n ==>
      UCAST(?'b \<rightarrow> ?'a) ?w =
      word_reverse
       (UCAST(?'b \<rightarrow> ?'a) (drop_bit ?n (word_reverse ?w)))",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_hole 7),
          template_app
           (template_app
             (template_hole 6,
              template_app (template_hole 5, template_hole 7)),
            template_var 1))],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 0))))))),
    ("Word_Lemmas.ucast_up",
     "source_size REVCAST(?'b \<rightarrow> ?'a) + ?n =
      target_size REVCAST(?'b \<rightarrow> ?'a) ==>
      UCAST(?'b \<rightarrow> ?'a) ?w =
      word_reverse
       (push_bit ?n (UCAST(?'b \<rightarrow> ?'a) (word_reverse ?w)))",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 8,
              template_app (template_hole 7, template_hole 6)),
            template_var 1),
          template_app (template_hole 5, template_hole 6))],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_hole 3,
               template_app (template_hole 0, template_var 0))))))),
    ("Word_Lemmas.shiftr_and_eq_shiftl",
     "and (?w >> ?n) ?x = ?y ==> and ?w (?x << ?n) = ?y << ?n",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2)),
            template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Word_Lemmas.shiftr1_0_imp_only_lsb",
     "?x + 1 >> 1 = 0 ==> ?x = 0 | ?x + 1 = 0",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 0),
                template_hole 3)),
            template_hole 2),
          template_hole 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_hole 1)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_hole 3)),
               template_hole 1))
           ))),
    ("Word_Lemmas.ucast_ucast_eq_mask_shift",
     "?x <= mask (?low_bits + LENGTH(?'b)) ==>
      UCAST(?'b \<rightarrow> ?'a)
       (UCAST(?'a \<rightarrow> ?'b) (?x >> ?low_bits)) =
      ?x >> ?low_bits",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app (template_hole 5, template_hole 4))))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Word_Lemmas.word_enum_decomp_elem",
     "[?x .e. ?y] = ?as @ ?a # ?bs ==> ?x <= ?a & ?a <= ?y",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 3, template_var 2),
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 3))
           ))),
    ("Word_Lemmas.word_and_or_mask_aligned",
     "[| is_aligned ?a ?n; ?b <= mask ?n |] ==> ?a + ?b = or ?a ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Word_Lemmas.word_and_or_mask_aligned2",
     "[| is_aligned ?b ?n; ?a <= mask ?n |] ==> ?a + ?b = or ?a ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Word_Lemmas.of_nat_unat_le_mask_ucast",
     "[| word_of_nat (unat ?t) = ?w; ?t <= mask LENGTH(?'a) |]
      ==> ?t = UCAST(?'a \<rightarrow> ?'b) ?w",
     template_implication
      ([template_equation
         (template_app
           (template_hole 7,
            template_app (template_hole 6, template_var 1)),
          template_var 0),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_hole 4,
            template_app (template_hole 3, template_hole 2)))],
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.word_and_1_shiftls",
     "and ?x 4 = (if bit ?x 2 then 1 << 2 else 0)",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 0),
         template_app
          (template_hole 8,
           template_app
            (template_hole 7,
             template_app (template_hole 7, template_hole 6)))),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_hole 3,
                 template_app (template_hole 7, template_hole 6)))),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app
              (template_hole 3,
               template_app (template_hole 7, template_hole 6)))),
         template_hole 0))),
    ("Word_Lemmas.t2n_mask_eq_if",
     "and (2 ^ ?n) (mask ?m) = (if ?n < ?m then 2 ^ ?n else 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app (template_hole 5, template_hole 4))),
             template_var 1)),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app (template_hole 5, template_hole 4))),
             template_var 1)),
         template_hole 0))),
    ("Word_Lemmas.unat_of_ucast_then_mask_eq_unat_of_mask",
     "LENGTH(?'a) <= LENGTH(?'b) ==>
      unat (and (UCAST(?'a \<rightarrow> ?'b) ?x) (mask ?m)) =
      unat (and ?x (mask ?m))",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 11, template_hole 10),
          template_app (template_hole 9, template_hole 8))],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 1)),
             template_app (template_hole 3, template_var 0))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0)))))),
    ("Word_Lemmas.mask_shifl_overlap_zero",
     "?a + ?c <= ?b ==> and (and ?p (mask ?a) << ?c) (not (mask ?b)) = 0",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 6, template_var 3), template_var 2),
          template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_app (template_hole 2, template_var 3))),
               template_var 2)),
           template_app
            (template_hole 1,
             template_app (template_hole 2, template_var 1))),
         template_hole 0))),
    ("Word_Lemmas.plus_mask_AND_NOT_mask_eq",
     "and ?x (not (mask ?n)) = ?x ==>
      and (?x + mask ?n) (not (mask ?n)) = ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 1),
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 0))),
          template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_app (template_hole 1, template_var 0))),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0))),
         template_var 1))),
    ("Word_Lemmas.ucast_ucast_mask_eq",
     "[| UCAST(?'a \<rightarrow> ?'b) ?x = ?y;
         and ?x (mask LENGTH(?'b)) = ?x |]
      ==> ?x = UCAST(?'b \<rightarrow> ?'a) ?y",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 1), template_var 0),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 1),
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_hole 1))),
          template_var 1)],
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.le_mask_shiftl_le_mask",
     "[| ?s = ?m + ?n; ?x <= mask ?n |] ==> ?x << ?m <= mask ?s",
     template_implication
      ([template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 3, template_var 2),
            template_var 1)),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 1, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app (template_hole 1, template_var 3)))),
    ("Word_Lemmas.ucast_up_eq",
     "[| UCAST(?'c \<rightarrow> ?'b) ?x = UCAST(?'d \<rightarrow> ?'b) ?y;
         LENGTH(?'a) <= LENGTH(?'b) |]
      ==> UCAST(?'c \<rightarrow> ?'a) ?x =
          UCAST(?'d \<rightarrow> ?'a) ?y",
     template_implication
      ([template_equation
         (template_app (template_hole 9, template_var 1),
          template_app (template_hole 8, template_var 0)),
        template_inequation
         (less_equals, template_app (template_hole 6, template_hole 5),
          template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.mask_AND_less_0",
     "[| and ?x (mask ?n) = 0; ?m <= ?n |] ==> and ?x (mask ?m) = 0",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 2),
            template_app (template_hole 2, template_var 1)),
          template_hole 1),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app (template_hole 2, template_var 0)),
         template_hole 1))),
    ("Word_Lemmas.bit_shiftl_word_iff",
     "bit (?w << ?m) ?n = (?m <= ?n & ?n < LENGTH(?'a) & bit ?w (?n - ?m))",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app (template_hole 2, template_hole 1))),
           template_app
            (template_app (template_hole 7, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))))),
    ("Word_Lemmas.nth_shiftl'",
     "bit (?w << ?m) ?n = (?n < size ?w & ?m <= ?n & bit ?w (?n - ?m))",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app (template_hole 2, template_var 2))),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 6, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))))),
    ("Word_Lemmas.nth_shiftl",
     "bit (?w << ?m) ?n = (?n < LENGTH(?'a) & ?m <= ?n & bit ?w (?n - ?m))",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 0),
             template_app (template_hole 3, template_hole 2))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 7, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))))),
    ("Word_Lemmas.word_and_1_shiftls'",
     "and ?x (1 << 2) = (if bit ?x 2 then 1 << 2 else 0)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 0),
         template_app
          (template_app (template_hole 7, template_hole 6),
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_hole 3)))),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_hole 5,
                 template_app (template_hole 4, template_hole 3)))),
           template_app
            (template_app (template_hole 7, template_hole 6),
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3)))),
         template_hole 0))),
    ("Word_Lemmas.is_aligned_mask_out_add_eq",
     "is_aligned ?p ?n ==>
      and (?p + ?x) (not (mask ?n)) = ?p + and ?x (not (mask ?n))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1))))))),
    ("Word_Lemmas.aligned_bump_down",
     "is_aligned ?x ?n ==> and (?x - 1) (not (mask ?n)) = ?x - 2 ^ ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_var 1),
               template_hole 6)),
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0))),
         template_app
          (template_app (template_hole 7, template_var 1),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 0))))),
    ("Word_Lemmas.shiftr_shiftl2",
     "?b < ?c ==> ?a >> ?b << ?c = and (?a << ?c - ?b) (not (mask ?c))",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 2)),
           template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 5, template_var 0),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 2))),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)))))),
    ("Word_Lemmas.shiftr_shiftl1",
     "?c <= ?b ==> ?a >> ?b << ?c = and (?a >> ?b - ?c) (not (mask ?c))",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 2))),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)))))),
    ("Word_Lemmas.and_and_mask_simple",
     "and ?y (mask ?n) = mask ?n ==>
      and (and ?x ?y) (mask ?n) = and ?x (mask ?n)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 2),
            template_app (template_hole 0, template_var 1)),
          template_app (template_hole 0, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)),
           template_app (template_hole 0, template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 1))))),
    ("Word_Lemmas.shiftr_less_t2n",
     "?x < 2 ^ (?n + ?m) ==> ?x >> ?n < 2 ^ ?m",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2))),
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))),
           template_var 0)))),
    ("Word_Lemmas.mask_eq1_nochoice",
     "[| 1 < LENGTH(?'a); and ?x 1 = ?x |] ==> ?x = 0 | ?x = 1",
     template_implication
      ([template_inequation
         (less_than, template_hole 7,
          template_app (template_hole 6, template_hole 5)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 0),
            template_hole 2),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_hole 0)),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_hole 2))
           ))),
    ("Word_Lemmas.const_le_unat",
     "[| ?b < 2 ^ LENGTH(?'a); word_of_nat ?b <= ?a |] ==> ?b <= unat ?a",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 9,
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_hole 6))),
            template_app (template_hole 5, template_hole 4))),
        template_inequation
         (less_equals, template_app (template_hole 2, template_var 1),
          template_var 0)],
       template_inequation
        (less_equals, template_var 1,
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.sless_less_2pl",
     "[| ?b < 2 ^ (LENGTH(?'a) - 1); ?a < ?b |] ==> ?a <s ?b",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5))),
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2)),
              template_hole 1))),
        template_inequation (less_than, template_var 0, template_var 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Word_Lemmas.sle_le_2pl",
     "[| ?b < 2 ^ (LENGTH(?'a) - 1); ?a <= ?b |] ==> ?a \<le>s ?b",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 9,
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_hole 6))),
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3)),
              template_hole 2))),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Word_Lemmas.and_mask_cases",
     "?n < LENGTH(?'a) ==>
      and ?x (mask ?n) : word_of_nat ` set [0..<2 ^ ?n]",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 13, template_hole 12))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app (template_hole 10, template_var 0),
                 template_app (template_hole 9, template_var 1))),
             template_app
              (template_app (template_hole 8, template_hole 7),
               template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_hole 2,
                         template_app (template_hole 1, template_hole 0))),
                     template_var 1)))))
           ))),
    ("Word_Lemmas.neg_mask_mask_unat",
     "?sz < LENGTH(?'a) ==>
      unat (and ?ptr (not (mask ?sz))) + unat (and ?ptr (mask ?sz)) =
      unat ?ptr",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 7, template_hole 6))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1))))),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app (template_hole 0, template_var 1)))),
         template_app (template_hole 3, template_var 0)))),
    ("Word_Lemmas.upto_enum_inc_1_len",
     "?a < - 1 ==> [0 .e. 1 + ?a] = [0 .e. ?a] @ [1 + ?a]",
     template_implication
      ([template_inequation
         (less_than, template_var 0,
          template_app (template_hole 8, template_hole 7))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_hole 4),
           template_app
            (template_app (template_hole 3, template_hole 7),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_var 0)),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, template_hole 7),
                 template_var 0)),
             template_hole 0))))),
    ("Word_Lemmas.and_mask_shiftr_comm",
     "?m <= size ?w ==>
      and ?w (mask ?m) >> ?n = and (?w >> ?n) (mask (?m - ?n))",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 1, template_var 2))),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)))))),
    ("Word_Lemmas.ucast_add_mask_aligned",
     "[| ?a <= mask ?n; is_aligned ?b ?n |]
      ==> UCAST(?'a \<rightarrow> ?'b) (?a + ?b) =
          UCAST(?'a \<rightarrow> ?'b) ?a +
          UCAST(?'a \<rightarrow> ?'b) ?b",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 2)),
           template_app (template_hole 2, template_var 0))))),
    ("Word_Lemmas.ucast_up_neq",
     "[| UCAST(?'c \<rightarrow> ?'b) ?x ~= UCAST(?'d \<rightarrow> ?'b) ?y;
         LENGTH(?'b) <= LENGTH(?'a) |]
      ==> UCAST(?'c \<rightarrow> ?'a) ?x ~=
          UCAST(?'d \<rightarrow> ?'a) ?y",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 9, template_var 1),
              template_app (template_hole 8, template_var 0))
            ),
        template_inequation
         (less_equals, template_app (template_hole 6, template_hole 5),
          template_app (template_hole 4, template_hole 3))],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Word_Lemmas.scast_ucast_mask_compare",
     "(SCAST(?'b \<rightarrow> ?'a) (UCAST(?'a \<rightarrow> ?'b) ?w) =
       ?w) =
      (?w <= mask (LENGTH(?'b) - 1) | not (mask (LENGTH(?'b) - 1)) <= ?w)",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_hole 9,
             template_app (template_hole 8, template_var 0))),
         template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 0),
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2)),
                 template_hole 1)))),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 0,
               template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2)),
                   template_hole 1)))),
           template_var 0)))),
    ("Word_Lemmas.shiftl_shiftr2",
     "?b < ?c ==>
      ?a << ?b >> ?c = and (?a >> ?c - ?b) (mask (size ?a - ?c))",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 2)),
           template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 5, template_var 0),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 2))),
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 0, template_var 0)),
               template_var 1)))))),
    ("Word_Lemmas.shiftl_shiftr3",
     "?b <= ?c ==>
      ?a << ?b >> ?c = and (?a >> ?c - ?b) (mask (size ?a - ?c))",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 2)),
           template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 5, template_var 0),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 2))),
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 0, template_var 0)),
               template_var 1)))))),
    ("Word_Lemmas.shiftl_shiftr1",
     "?c <= ?b ==>
      ?a << ?b >> ?c = and ?a (mask (size ?a - ?b)) << ?b - ?c",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 0)),
                   template_var 1)))),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2))))),
    ("Word_Lemmas.word_two_power_neg_ineq",
     "2 ^ ?m ~= 0 ==> 2 ^ ?n <= - (2 ^ ?m)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_hole 3))),
                template_var 1),
              template_hole 2)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3))),
           template_var 0),
         template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app (template_hole 4, template_hole 3))),
             template_var 1))))),
    ("Word_Lemmas.unat_shiftr_less_t2n",
     "unat ?x < 2 ^ (?n + ?m) ==> unat (?x >> ?n) < 2 ^ ?m",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 6, template_var 2),
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2))),
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)))],
       template_inequation
        (less_than,
         template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))),
           template_var 0)))),
    ("Word_Lemmas.mask_eq_ucast_eq",
     "[| and ?x (mask LENGTH(?'a)) = ?x; LENGTH(?'a) <= LENGTH(?'b) |]
      ==> UCAST(?'a \<rightarrow> ?'b) (UCAST(?'c \<rightarrow> ?'a) ?x) =
          UCAST(?'c \<rightarrow> ?'b) ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 10, template_var 0),
            template_app
             (template_hole 9,
              template_app (template_hole 8, template_hole 7))),
          template_var 0),
        template_inequation
         (less_equals, template_app (template_hole 8, template_hole 7),
          template_app (template_hole 5, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.le_shiftr'",
     "[| ?u >> ?n <= ?v >> ?n; ?u >> ?n ~= ?v >> ?n |] ==> ?u <= ?v",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 2, template_var 0),
            template_var 1)),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_var 1))
            )],
       template_inequation (less_equals, template_var 2, template_var 0))),
    ("Word_Lemmas.shiftr_eqD",
     "[| ?x >> ?n = ?y >> ?n; is_aligned ?x ?n; is_aligned ?y ?n |]
      ==> ?x = ?y",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 1, template_var 0),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 1)
            )],
       template_equation (template_var 2, template_var 0))),
    ("Word_Lemmas.scast_ucast_high_bits",
     "(SCAST(?'b \<rightarrow> ?'a) (UCAST(?'a \<rightarrow> ?'b) ?w) =
       ?w) =
      (ALL i:{LENGTH(?'b)..<size ?w}. bit ?w i = bit ?w (LENGTH(?'b) - 1))",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_hole 9,
             template_app (template_hole 8, template_var 0))),
         template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_hole 4)),
             template_app (template_hole 3, template_var 0))),
         t_empty))),
    ("Word_Lemmas.neg_mask_add",
     "and ?y (mask ?n) = 0 ==>
      and (?x + ?y) (not (mask ?n)) = and ?x (not (mask ?n)) + ?y",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 2),
            template_app (template_hole 3, template_var 1)),
          template_hole 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)),
           template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 1))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_hole 0,
                 template_app (template_hole 3, template_var 1)))),
           template_var 2)))),
    ("Word_Lemmas.ucast_ucast_mask_shift",
     "?a <= LENGTH(?'a) + ?b ==>
      UCAST(?'a \<rightarrow> ?'b)
       (UCAST(?'b \<rightarrow> ?'a) (and ?p (mask ?a) >> ?b)) =
      and ?p (mask ?a) >> ?b",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app
             (template_hole 8,
              template_app (template_hole 7, template_hole 6)),
            template_var 1))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_app (template_hole 0, template_var 2))),
               template_var 1))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 2))),
           template_var 1)))),
    ("Word_Lemmas.and_mask_shiftl_comm",
     "?m + ?n <= size ?w ==>
      and ?w (mask ?m) << ?n = and (?w << ?n) (mask (?m + ?n))",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 2))),
           template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 1)))))),
    ("Word_Lemmas.word_enum_prefix",
     "[?x .e. ?y] = ?as @ ?a # ?bs ==>
      ?as = (if ?x < ?a then [?x .e. ?a - 1] else [])",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 6, template_var 2),
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)))],
       template_equation
        (template_var 2,
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 4),
                 template_var 1)),
             template_app
              (template_app (template_hole 7, template_var 4),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1))),
           template_hole 0)))),
    ("Word_Lemmas.upto_enum_word_nth",
     "[| ?i <= ?j; ?k <= unat (?j - ?i) |]
      ==> [?i .e. ?j] ! ?k = ?i + word_of_nat ?k",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_hole 6,
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 2)))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app (template_hole 0, template_var 0))))),
    ("Word_Lemmas.ucast_le_up_down_iff",
     "[| LENGTH(?'a) <= LENGTH(?'b);
         ?x <= UCAST(?'a \<rightarrow> ?'b) (- 1) |]
      ==> (UCAST(?'b \<rightarrow> ?'a) ?x <= ?y) =
          (?x <= UCAST(?'a \<rightarrow> ?'b) ?y)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 10, template_hole 9),
          template_app (template_hole 8, template_hole 7)),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_hole 5,
            template_app (template_hole 4, template_hole 3)))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 6, template_var 1),
           template_app (template_hole 5, template_var 0))))),
    ("Word_Lemmas.mask_out_eq_0",
     "[| ?idx < 2 ^ ?sz; ?sz < LENGTH(?'a) |]
      ==> and (word_of_nat ?idx) (not (mask ?sz)) = 0",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 11,
              template_app
               (template_hole 10,
                template_app (template_hole 9, template_hole 8))),
            template_var 0)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 7, template_hole 6))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0))),
         template_hole 0))),
    ("Word_Lemmas.is_aligned_mask_out_add_eq_sub",
     "is_aligned ?p ?n ==>
      and (?p + ?a - ?b) (not (mask ?n)) =
      ?p + and (?a - ?b) (not (mask ?n))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 1)),
               template_var 0)),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2))),
         template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0)),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2))))))),
    ("Word_Lemmas.test_bit_sbintrunc",
     "?i < LENGTH(?'a) ==>
      bit (word_of_int (signed_take_bit ?n (uint ?w))) ?i =
      (if ?n < ?i then bit ?w ?n else bit ?w ?i)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 7, template_hole 6))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app (template_hole 1, template_var 0)))),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 8, template_var 1),
                 template_var 2)),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_var 2))))),
    ("Word_Lemmas.unat_ucast_mask_shift",
     "?a <= LENGTH(?'a) + ?b ==>
      unat (UCAST(?'b \<rightarrow> ?'a) (and ?p (mask ?a) >> ?b)) =
      unat (and ?p (mask ?a) >> ?b)",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app
             (template_hole 9,
              template_app (template_hole 8, template_hole 7)),
            template_var 1))],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_app (template_hole 1, template_var 2))),
               template_var 1))),
         template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app (template_hole 1, template_var 2))),
             template_var 1))))),
    ("Word_Lemmas.of_nat_less_t2n",
     "word_of_nat ?i < 2 ^ ?n ==>
      ?n < LENGTH(?'a) & unat (word_of_nat ?i) < 2 ^ ?n",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 11, template_var 1),
          template_app
           (template_app
             (template_hole 10,
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_hole 7))),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_app (template_hole 4, template_hole 3))),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 11, template_var 1))),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_hole 0,
                     template_app (template_hole 8, template_hole 7))),
                 template_var 0)))
           ))),
    ("Word_Lemmas.unat_less_iff",
     "[| unat ?a = ?b; ?c < 2 ^ LENGTH(?'a) |]
      ==> (?a < word_of_nat ?c) = (?b < ?c)",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 2), template_var 1),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5))),
            template_app (template_hole 4, template_hole 3)))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app (template_hole 0, template_var 0)),
         template_app
          (template_app (template_hole 9, template_var 1),
           template_var 0)))),
    ("Word_Lemmas.shiftl_shiftr_id",
     "[| ?n < LENGTH(?'a); ?x < 2 ^ (LENGTH(?'a) - ?n) |]
      ==> ?x << ?n >> ?n = ?x",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 10, template_hole 9)),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4))),
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 10, template_hole 9)),
              template_var 1)))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 1),
         template_var 0))),
    ("Word_Lemmas.shiftr_less_t2n'",
     "[| and ?x (mask (?n + ?m)) = ?x; ?m < LENGTH(?'a) |]
      ==> ?x >> ?n < 2 ^ ?m",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 11, template_var 2),
            template_app
             (template_hole 10,
              template_app
               (template_app (template_hole 9, template_var 1),
                template_var 0))),
          template_var 2),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 7, template_hole 6))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("Word_Lemmas.unat_of_nat_minus_1",
     "[| ?n < 2 ^ LENGTH(?'a); ?n ~= 0 |]
      ==> unat (word_of_nat ?n - 1) = ?n - 1",
     template_implication
      ([template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 14,
              template_app
               (template_hole 13,
                template_app (template_hole 12, template_hole 11))),
            template_app (template_hole 10, template_hole 9))),
        template_negation
         (template_equation (template_var 0, template_hole 6))],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0)),
             template_hole 2)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Word_Lemmas.unat_shiftr_le_bound",
     "[| 2 ^ (LENGTH(?'a) - ?n) - 1 <= ?bnd; 0 < ?n |]
      ==> unat (?x >> ?n) <= ?bnd",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 11,
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_hole 9,
                    template_app (template_hole 8, template_hole 7))),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app (template_hole 6, template_hole 5)),
                  template_var 2))),
            template_hole 4),
          template_var 1),
        template_inequation (less_than, template_hole 2, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_var 1))),
    ("Word_Lemmas.mask_split_sum_twice",
     "?b <= ?a ==>
      and ?p (not (mask ?a)) + and (and ?p (mask ?a)) (not (mask ?b)) +
      and ?p (mask ?b) =
      ?p",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 1)))),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_app (template_hole 0, template_var 1))),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2))))),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app (template_hole 0, template_var 2))),
         template_var 0))),
    ("Word_Lemmas.t2p_shiftr",
     "[| ?b <= ?a; ?a < LENGTH(?'a) |] ==> 2 ^ ?a >> ?b = 2 ^ (?a - ?b)",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 8, template_hole 7))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))),
               template_var 0)),
           template_var 1),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Word_Lemmas.two_power_increasing_less_1",
     "[| ?n <= ?m; ?m <= LENGTH(?'a) |] ==> 2 ^ ?n - 1 <= 2 ^ ?m - 1",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 8, template_hole 7))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))),
               template_var 1)),
           template_hole 0),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))),
               template_var 0)),
           template_hole 0)))),
    ("Word_Lemmas.shiftr_less_t2n3",
     "[| 2 ^ (?n + ?m) = 0; ?m < LENGTH(?'a) |] ==> ?x >> ?n < 2 ^ ?m",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 10,
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_hole 7))),
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)),
          template_hole 5),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 3, template_hole 2))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_hole 9,
               template_app (template_hole 8, template_hole 7))),
           template_var 1)))),
    ("Word_Lemmas.shiftl_less_t2n",
     "[| ?x < 2 ^ (?m - ?n); ?m < LENGTH(?'a) |] ==> ?x << ?n < 2 ^ ?m",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5))),
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0))),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 2, template_hole 1))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app (template_hole 6, template_hole 5))),
           template_var 1)))),
    ("Word_Lemmas.upt_enum_offset_trivial",
     "[| ?x < 2 ^ LENGTH(?'a) - 1; ?n <= unat ?x |]
      ==> [0 .e. ?x] ! ?n = word_of_nat ?n",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 14,
              template_app
               (template_app
                 (template_hole 13,
                  template_app
                   (template_hole 12,
                    template_app (template_hole 11, template_hole 10))),
                template_app (template_hole 9, template_hole 8))),
            template_hole 7)),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1)),
           template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Word_Lemmas.word_sub_mono4",
     "[| ?y + ?x <= ?z + ?x; ?y <= ?y + ?x; ?z <= ?z + ?x |] ==> ?y <= ?z",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 0, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 0, template_var 0),
            template_var 1)),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 0, template_var 2),
            template_var 1)),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 0, template_var 0),
            template_var 1))],
       template_inequation (less_equals, template_var 2, template_var 0))),
    ("Word_Lemmas.shiftr_w2p",
     "?x < LENGTH(?'a) ==>
      2 ^ ?x = 2 ^ (LENGTH(?'a) - 1) >> LENGTH(?'a) - 1 - ?x",
     template_implication
      ([template_inequation
         (less_than, template_var 0,
          template_app (template_hole 9, template_hole 8))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3))),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_hole 3))),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 9, template_hole 8)),
                 template_hole 0))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 9, template_hole 8)),
                 template_hole 0)),
             template_var 0))))),
    ("Word_Lemmas.ucast_less_shiftl_helper'",
     "[| LENGTH(?'b) + ?a < LENGTH(?'a); 2 ^ (LENGTH(?'b) + ?a) <= ?n |]
      ==> UCAST(?'b \<rightarrow> ?'a) ?x << ?a < ?n",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 12,
              template_app (template_hole 11, template_hole 10)),
            template_var 2),
          template_app (template_hole 9, template_hole 8)),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3))),
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 11, template_hole 10)),
              template_var 2)),
          template_var 1)],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 2),
         template_var 1))),
    ("Word_Lemmas.leq_low_bits_iff_zero",
     "[| ?x <= mask (?low ?bits + ?high ?bits); ?x >> ?low_bits = 0 |]
      ==> (and ?x (mask ?low_bits) = 0) = (?x = 0)",
     template_implication
      ([template_inequation
         (less_equals, template_var 4,
          template_app
           (template_hole 6,
            template_app
             (template_app
               (template_hole 5,
                template_app (template_var 3, template_var 2)),
              template_app (template_var 1, template_var 2)))),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 4), template_var 0),
          template_hole 2)],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_app (template_hole 6, template_var 0)),
           template_hole 2),
         template_equation (template_var 4, template_hole 2)))),
    ("Word_Lemmas.word_plus_mono_right_split",
     "[| unat (and ?x (mask ?sz)) + unat ?z < 2 ^ ?sz; ?sz < LENGTH(?'a) |]
      ==> ?x <= ?x + ?z",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 11,
              template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_app (template_hole 8, template_var 1)))),
            template_app (template_hole 10, template_var 0)),
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4))),
            template_var 1)),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 3, template_hole 2))],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Word_Lemmas.word_shift_zero",
     "[| ?x << ?n = 0; ?x <= 2 ^ ?m; ?m + ?n < LENGTH(?'a) |] ==> ?x = 0",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 10, template_var 2),
            template_var 1),
          template_hole 9),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4))),
            template_var 0)),
        template_inequation
         (less_than,
          template_app
           (template_app (template_hole 2, template_var 0), template_var 1),
          template_app (template_hole 1, template_hole 0))],
       template_equation (template_var 2, template_hole 9))),
    ("Word_Lemmas.bitfield_op_twice",
     "and (or (and ?x (not (mask ?n << ?m))) (and ?y (mask ?n) << ?m))
       (not (mask ?n << ?m)) =
      and ?x (not (mask ?n << ?m))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app (template_hole 0, template_var 2)),
                     template_var 1)))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_app (template_hole 0, template_var 2))),
               template_var 1))),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 1))),
       template_app
        (template_app (template_hole 4, template_var 3),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 1))))),
    ("Word_Lemmas.neg_mask_diff_bound",
     "?sz' <= ?sz ==>
      and ?ptr (not (mask ?sz')) - and ?ptr (not (mask ?sz))
      <= 2 ^ ?sz - 2 ^ ?sz'",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 0),
               template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 2)))),
           template_app
            (template_app (template_hole 6, template_var 0),
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 1)))),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_hole 0))),
               template_var 1)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 2))))),
    ("Word_Lemmas.shiftl_less_t2n'",
     "[| ?x < 2 ^ ?m; ?m + ?n < LENGTH(?'a) |]
      ==> ?x << ?n < 2 ^ (?m + ?n)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5))),
            template_var 1)),
        template_inequation
         (less_than,
          template_app
           (template_app (template_hole 3, template_var 1), template_var 0),
          template_app (template_hole 2, template_hole 1))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app (template_hole 6, template_hole 5))),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))))),
    ("Word_Lemmas.unat_shiftr_shiftl_mask_zero",
     "[| LENGTH(?'a) + ?b <= ?c + ?a; ?c < LENGTH(?'a) |]
      ==> unat (and (?q >> ?a << ?b) (not (mask ?c))) = 0",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 11,
              template_app (template_hole 10, template_hole 9)),
            template_var 3),
          template_app
           (template_app (template_hole 11, template_var 2),
            template_var 1)),
        template_inequation
         (less_than, template_var 2,
          template_app (template_hole 10, template_hole 9))],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_var 1)),
                 template_var 3)),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)))),
         template_hole 0))),
    ("Word_Lemmas.unat_shiftl_less_t2n",
     "[| unat ?x < 2 ^ (?m - ?n); ?m < LENGTH(?'a) |]
      ==> unat (?x << ?n) < 2 ^ ?m",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 8, template_var 2),
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4))),
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0))),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 2, template_hole 1))],
       template_inequation
        (less_than,
         template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_hole 4))),
           template_var 1)))),
    ("Word_Lemmas.nth_sshiftr",
     "bit (?w >>> ?m) ?n =
      (?n < size ?w &
       (if size ?w <= ?n + ?m then bit ?w (size ?w - 1)
        else bit ?w (?n + ?m)))",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 0),
             template_app (template_hole 5, template_var 2))),
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 5, template_var 2)),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 1))),
             template_app
              (template_app (template_hole 9, template_var 2),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 5, template_var 2)),
                 template_hole 0))),
           template_app
            (template_app (template_hole 9, template_var 2),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)))))),
    ("Word_Lemmas.word_shift_nonzero",
     "[| ?x <= 2 ^ ?m; ?m + ?n < LENGTH(?'a); ?x ~= 0 |] ==> ?x << ?n ~= 0",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app
             (template_hole 11,
              template_app
               (template_hole 10,
                template_app (template_hole 9, template_hole 8))),
            template_var 1)),
        template_inequation
         (less_than,
          template_app
           (template_app (template_hole 6, template_var 1), template_var 0),
          template_app (template_hole 5, template_hole 4)),
        template_negation
         (template_equation (template_var 2, template_hole 1))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_hole 1)
           ))),
    ("Word_Lemmas.shiftl_inj",
     "[| ?x << ?n = ?y << ?n; ?x <= mask (LENGTH(?'a) - ?n);
         ?y <= mask (LENGTH(?'a) - ?n) |]
      ==> ?x = ?y",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 5, template_var 0),
            template_var 1)),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_hole 3,
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_hole 0)),
              template_var 1))),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_hole 3,
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_hole 0)),
              template_var 1)))],
       template_equation (template_var 2, template_var 0))),
    ("Word_Lemmas.bitfield_op_twice''",
     "[| not ?a = ?b << ?c; EX x. ?b = mask x |]
      ==> and (or (and ?x ?a) (and ?y ?b << ?c)) ?a = and ?x ?a",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 4),
          template_app
           (template_app (template_hole 4, template_var 3),
            template_var 2)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 4)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 3)),
                 template_var 2))),
           template_var 4),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 4)))),
    ("Word_Lemmas.word_aligned_add_no_wrap_bounded",
     "[| ?w + 2 ^ ?n <= ?x; ?w + 2 ^ ?n ~= 0; is_aligned ?w ?n |]
      ==> ?w < ?x",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 9, template_var 2),
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_hole 5))),
              template_var 1)),
          template_var 0),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 9, template_var 2),
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_hole 7,
                      template_app (template_hole 6, template_hole 5))),
                  template_var 1)),
              template_hole 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_inequation (less_than, template_var 2, template_var 0))),
    ("Word_Lemmas.word_aligned_0_sum",
     "[| ?a + ?b = 0; is_aligned ?a ?n; ?b <= mask ?n; ?n < LENGTH(?'a) |]
      ==> ?a = 0 & ?b = 0",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 8, template_var 2), template_var 1),
          template_hole 7),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 4, template_var 0)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 2, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 9, template_var 2),
                 template_hole 7)),
             template_app
              (template_app (template_hole 9, template_var 1),
               template_hole 7))
           ))),
    ("Word_Lemmas.test_bit_sbintrunc_ucast",
     "?i < LENGTH(?'a) ==>
      bit (word_of_int
            (signed_take_bit (LENGTH(?'b) - 1)
              (uint (UCAST(?'a \<rightarrow> ?'b) ?w))))
       ?i =
      (if LENGTH(?'b) <= ?i then bit ?w (LENGTH(?'b) - 1) else bit ?w ?i)",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 13, template_hole 12))],
       template_equation
        (template_app
          (template_app
            (template_hole 10,
             template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app (template_hole 6, template_hole 5)),
                     template_hole 4)),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0))))),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 6, template_hole 5)),
                 template_var 1)),
             template_app
              (template_app (template_hole 10, template_var 0),
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 6, template_hole 5)),
                 template_hole 4))),
           template_app
            (template_app (template_hole 10, template_var 0),
             template_var 1))))),
    ("Word_Lemmas.add_mult_aligned_neg_mask",
     "and ?m (2 ^ ?n - 1) = 0 ==>
      and (?x + ?y * ?m) (not (mask ?n)) =
      and ?x (not (mask ?n)) + ?y * ?m",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 11, template_var 3),
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_hole 8,
                      template_app (template_hole 7, template_hole 6))),
                  template_var 2)),
              template_hole 5)),
          template_hole 4)],
       template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 3))),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 11, template_var 1),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)))),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 3))))),
    ("Word_Lemmas.upto_enum_step_nth",
     "[| ?a <= ?c; ?n <= unat ((?c - ?a) div (?b - ?a)) |]
      ==> [?a , ?b .e. ?c] ! ?n = ?a + word_of_nat ?n * (?b - ?a)",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_hole 8,
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 3)),
              template_app
               (template_app (template_hole 6, template_var 0),
                template_var 3))))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 0),
               template_var 2)),
           template_var 1),
         template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_app
              (template_app (template_hole 6, template_var 0),
               template_var 3)))))),
    ("Word_Lemmas.mod_mask_drop",
     "[| ?m = 2 ^ ?n; 0 < ?m; and (mask ?n) ?msk = mask ?n |]
      ==> and (?x mod ?m) ?msk = ?x mod ?m",
     template_implication
      ([template_equation
         (template_var 3,
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5))),
            template_var 2)),
        template_inequation (less_than, template_hole 3, template_var 3),
        template_equation
         (template_app
           (template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 2)),
            template_var 1),
          template_app (template_hole 1, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3)),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 3)))),
    ("Word_Lemmas.sdiv_word_max",
     "(sint ?a sdiv sint ?b < 2 ^ (size ?a - 1)) =
      (?a ~= - (2 ^ (size ?a - 1)) | ?b ~= - 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app
                   (template_hole 15,
                    template_app (template_hole 14, template_var 1)),
                  template_app (template_hole 14, template_var 0))),
              template_app
               (template_app
                 (template_hole 13,
                  template_app
                   (template_hole 12,
                    template_app (template_hole 11, template_hole 10))),
                template_app
                 (template_app
                   (template_hole 9,
                    template_app (template_hole 8, template_var 1)),
                  template_hole 7)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_hole 1,
                           template_app
                            (template_hole 11, template_hole 10))),
                       template_app
                        (template_app
                          (template_hole 9,
                           template_app (template_hole 8, template_var 1)),
                         template_hole 7)))))),
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app (template_hole 3, template_hole 0))))
           ))),
    ("Word_Lemmas.zero_base_lsb_imp_set_eq_as_bit_operation",
     "and (mask (LENGTH(?'a) - ?len)) ?base = 0 ==>
      (?base = and (not (mask (LENGTH(?'a) - ?len))) ?a) =
      (?a : {?base..or ?base (mask (LENGTH(?'a) - ?len))})",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 10,
              template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app (template_hole 7, template_hole 6)),
                  template_var 2))),
            template_var 1),
          template_hole 5)],
       template_equation
        (template_app
          (template_app (template_hole 11, template_var 1),
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 9,
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app (template_hole 7, template_hole 6)),
                     template_var 2)))),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app (template_hole 7, template_hole 6)),
                   template_var 2)))))))),
    ("Word_Lemmas.ucast_less_shiftl_helper",
     "[| LENGTH(?'b) + 2 < LENGTH(?'a); 2 ^ (LENGTH(?'b) + 2) <= ?n |]
      ==> UCAST(?'b \<rightarrow> ?'a) ?x << 2 < ?n",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 13,
              template_app (template_hole 12, template_hole 11)),
            template_app
             (template_hole 10,
              template_app (template_hole 9, template_hole 8))),
          template_app (template_hole 7, template_hole 6)),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_hole 3,
                template_app (template_hole 9, template_hole 8))),
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 12, template_hole 11)),
              template_app
               (template_hole 10,
                template_app (template_hole 9, template_hole 8)))),
          template_var 1)],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_app
            (template_hole 10,
             template_app (template_hole 9, template_hole 8))),
         template_var 1))),
    ("Word_Lemmas.ucast_le_ucast_eq",
     "[| ?x < 2 ^ ?n; ?y < 2 ^ ?n; ?n = LENGTH(?'b) |]
      ==> (UCAST(?'a \<rightarrow> ?'b) ?x
           <= UCAST(?'a \<rightarrow> ?'b) ?y) =
          (?x <= ?y)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app
             (template_hole 10,
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_hole 7))),
            template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 10,
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_hole 7))),
            template_var 1)),
        template_equation
         (template_var 1, template_app (template_hole 5, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Word_Lemmas.sdiv_word_max'",
     "(sint ?a sdiv sint ?b < 2 ^ (LENGTH(?'a) - Suc 0)) =
      (?a = - (2 ^ (LENGTH(?'a) - Suc 0)) --> ?b ~= - 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app
                 (template_app
                   (template_hole 17,
                    template_app (template_hole 16, template_var 1)),
                  template_app (template_hole 16, template_var 0))),
              template_app
               (template_app
                 (template_hole 15,
                  template_app
                   (template_hole 14,
                    template_app (template_hole 13, template_hole 12))),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app (template_hole 10, template_hole 9)),
                  template_app (template_hole 8, template_hole 7))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 13, template_hole 12))),
                     template_app
                      (template_app
                        (template_hole 11,
                         template_app (template_hole 10, template_hole 9)),
                       template_app (template_hole 8, template_hole 7)))))),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_app (template_hole 4, template_hole 0))))
           ))),
    ("Word_Lemmas.unat_shiftl_absorb",
     "[| ?x <= 2 ^ ?p; ?p + ?k < LENGTH(?'a) |]
      ==> unat ?x * 2 ^ ?k = unat (?x * 2 ^ ?k)",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app
             (template_hole 13,
              template_app
               (template_hole 12,
                template_app (template_hole 11, template_hole 10))),
            template_var 1)),
        template_inequation
         (less_than,
          template_app
           (template_app (template_hole 8, template_var 1), template_var 0),
          template_app (template_hole 7, template_hole 6))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 2)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 11, template_hole 10))),
             template_var 0)),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_hole 12,
                   template_app (template_hole 11, template_hole 10))),
               template_var 0)))))),
    ("Word_Lemmas.cast_chunk_scast_assemble_id",
     "[| ?n = LENGTH(?'a); ?m = LENGTH(?'b); ?n * 2 = ?m |]
      ==> or (UCAST(?'a \<rightarrow> ?'b)
               (SCAST(?'b \<rightarrow> ?'a) ?x))
           (UCAST(?'a \<rightarrow> ?'b)
             (SCAST(?'b \<rightarrow> ?'a) (?x >> ?n)) <<
            ?n) =
          ?x",
     template_implication
      ([template_equation
         (template_var 2,
          template_app (template_hole 13, template_hole 12)),
        template_equation
         (template_var 1,
          template_app (template_hole 11, template_hole 10)),
        template_equation
         (template_app
           (template_app (template_hole 9, template_var 2),
            template_app
             (template_hole 8,
              template_app (template_hole 7, template_hole 6))),
          template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 2)))),
             template_var 2)),
         template_var 0))),
    ("Word_Lemmas.cast_chunk_assemble_id",
     "[| ?n = LENGTH(?'a); ?m = LENGTH(?'b); ?n * 2 = ?m |]
      ==> or (UCAST(?'a \<rightarrow> ?'b)
               (UCAST(?'b \<rightarrow> ?'a) ?x))
           (UCAST(?'a \<rightarrow> ?'b)
             (UCAST(?'b \<rightarrow> ?'a) (?x >> ?n)) <<
            ?n) =
          ?x",
     template_implication
      ([template_equation
         (template_var 2,
          template_app (template_hole 13, template_hole 12)),
        template_equation
         (template_var 1,
          template_app (template_hole 11, template_hole 10)),
        template_equation
         (template_app
           (template_app (template_hole 9, template_var 2),
            template_app
             (template_hole 8,
              template_app (template_hole 7, template_hole 6))),
          template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 2)))),
             template_var 2)),
         template_var 0))),
    ("Word_Lemmas.sub_right_shift",
     "[| and ?x (mask ?n) = 0; and ?y (mask ?n) = 0; ?y <= ?x |]
      ==> ?x - ?y >> ?n = (?x >> ?n) - (?y >> ?n)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 2),
            template_app (template_hole 4, template_var 1)),
          template_hole 3),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 0),
            template_app (template_hole 4, template_var 1)),
          template_hole 3),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1))))),
    ("Word_Lemmas.mask_shift_sum",
     "[| ?b <= ?a; unat ?n = unat (and ?p (mask ?b)) |]
      ==> and ?p (not (mask ?a)) + (and ?p (mask ?a) >> ?b) * (1 << ?b) +
          ?n =
          ?p",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_equation
         (template_app (template_hole 9, template_var 1),
          template_app
           (template_hole 9,
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app (template_hole 7, template_var 3))))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 8, template_var 0),
                   template_app
                    (template_hole 4,
                     template_app (template_hole 7, template_var 2)))),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 8, template_var 0),
                         template_app (template_hole 7, template_var 2))),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 3)))),
           template_var 1),
         template_var 0))),
    ("Word_Lemmas.signed_arith_ineq_checks_to_eq",
     "(- (2 ^ (size ?a - 1)) <= - sint ?a &
       - sint ?a <= 2 ^ (size ?a - 1) - 1) =
      (- sint ?a = sint (- ?a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_hole 12,
                      template_app
                       (template_app
                         (template_hole 11,
                          template_app
                           (template_hole 10,
                            template_app
                             (template_hole 9, template_hole 8))),
                        template_app
                         (template_app
                           (template_hole 7,
                            template_app (template_hole 6, template_var 0)),
                          template_hole 5)))),
                  template_app
                   (template_hole 12,
                    template_app (template_hole 4, template_var 0)))),
              template_app
               (template_app
                 (template_hole 13,
                  template_app
                   (template_hole 12,
                    template_app (template_hole 4, template_var 0))),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app
                       (template_hole 11,
                        template_app
                         (template_hole 10,
                          template_app (template_hole 9, template_hole 8))),
                      template_app
                       (template_app
                         (template_hole 7,
                          template_app (template_hole 6, template_var 0)),
                        template_hole 5))),
                  template_hole 2)))
            )],
       template_equation
        (template_app
          (template_hole 12,
           template_app (template_hole 4, template_var 0)),
         template_app
          (template_hole 4,
           template_app (template_hole 0, template_var 0))))),
    ("Word_Lemmas.word_enum_decomp",
     "[?x .e. ?y] = ?as @ ?a # ?bs ==>
      ?x <= ?a &
      ?a <= ?y & ?a ~: set ?as & (ALL z:set ?as. ?x <= z & z <= ?y)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 8, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 7, template_var 2),
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 4),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_var 3)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_app (template_hole 1, template_var 2)))),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 1, template_var 2)),
                   t_empty))))
           ))),
    ("Word_Lemmas.pow_sub_less",
     "[| ?a + ?b <= LENGTH(?'a); unat ?x = 2 ^ ?a |]
      ==> unat (?x * 2 ^ ?b - 1) < 2 ^ (?a + ?b)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 14, template_var 2),
            template_var 1),
          template_app (template_hole 13, template_hole 12)),
        template_equation
         (template_app (template_hole 10, template_var 0),
          template_app
           (template_app
             (template_hole 9,
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_hole 6))),
            template_var 2))],
       template_inequation
        (less_than,
         template_app
          (template_hole 10,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_hole 1,
                       template_app (template_hole 7, template_hole 6))),
                   template_var 1))),
             template_hole 0)),
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_hole 8,
               template_app (template_hole 7, template_hole 6))),
           template_app
            (template_app (template_hole 14, template_var 2),
             template_var 1))))),
    ("Word_Lemmas.eq_or_less_helperD",
     "[| ?n = unat (2 ^ ?m - 1) | ?n < unat (2 ^ ?m - 1);
         ?m < LENGTH(?'a) |]
      ==> ?n < 2 ^ ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app (template_hole 12, template_var 1),
                  template_app
                   (template_hole 11,
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app
                         (template_app
                           (template_hole 9,
                            template_app
                             (template_hole 8,
                              template_app
                               (template_hole 7, template_hole 6))),
                          template_var 0)),
                      template_hole 5)))),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_app
                 (template_hole 11,
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app
                         (template_hole 9,
                          template_app
                           (template_hole 8,
                            template_app
                             (template_hole 7, template_hole 6))),
                        template_var 0)),
                    template_hole 5))))
            ),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 3, template_hole 2))],
       template_inequation
        (less_than, template_var 1,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app (template_hole 7, template_hole 6))),
           template_var 0)))),
    ("Word_Lemmas.add_mask_lower_bits'",
     "[| ?len = LENGTH(?'a); is_aligned ?x ?n;
         ALL n'>=?n. n' < ?len --> ~ bit ?p n' |]
      ==> and (?x + ?p) (not (mask ?n)) = ?x",
     template_implication
      ([template_equation
         (template_var 3,
          template_app (template_hole 13, template_hole 12)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))),
         template_var 2))),
    ("Word_Lemmas.add_right_shift",
     "[| and ?x (mask ?n) = 0; and ?y (mask ?n) = 0; ?x <= ?x + ?y |]
      ==> ?x + ?y >> ?n = (?x >> ?n) + (?y >> ?n)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 2),
            template_app (template_hole 4, template_var 1)),
          template_hole 3),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 0),
            template_app (template_hole 4, template_var 1)),
          template_hole 3),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 1, template_var 2),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Word_Lemmas.signed_arith_sint",
     "- (2 ^ (size ?a - 1)) <= - sint ?a &
      - sint ?a <= 2 ^ (size ?a - 1) - 1 ==>
      sint (- ?a) = - sint ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_hole 12,
                      template_app
                       (template_app
                         (template_hole 11,
                          template_app
                           (template_hole 10,
                            template_app
                             (template_hole 9, template_hole 8))),
                        template_app
                         (template_app
                           (template_hole 7,
                            template_app (template_hole 6, template_var 0)),
                          template_hole 5)))),
                  template_app
                   (template_hole 12,
                    template_app (template_hole 4, template_var 0)))),
              template_app
               (template_app
                 (template_hole 13,
                  template_app
                   (template_hole 12,
                    template_app (template_hole 4, template_var 0))),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app
                       (template_hole 11,
                        template_app
                         (template_hole 10,
                          template_app (template_hole 9, template_hole 8))),
                      template_app
                       (template_app
                         (template_hole 7,
                          template_app (template_hole 6, template_var 0)),
                        template_hole 5))),
                  template_hole 2)))
            )],
       template_equation
        (template_app
          (template_hole 4, template_app (template_hole 0, template_var 0)),
         template_app
          (template_hole 12,
           template_app (template_hole 4, template_var 0))))),
    ("Word_Lemmas.unat_is_aligned_add",
     "[| is_aligned ?p ?n; unat ?d < 2 ^ ?n |]
      ==> unat (and (?p + ?d) (mask ?n)) = unat ?d &
          unat (and (?p + ?d) (not (mask ?n))) = unat ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_than, template_app (template_hole 10, template_var 0),
          template_app
           (template_app
             (template_hole 9,
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_hole 6))),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 10,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_app (template_hole 2, template_var 2),
                           template_var 0)),
                       template_app (template_hole 1, template_var 1)))),
                 template_app (template_hole 10, template_var 0))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 10,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 2),
                         template_var 0)),
                     template_app
                      (template_hole 0,
                       template_app (template_hole 1, template_var 1))))),
               template_app (template_hole 10, template_var 2)))
           ))),
    ("Word_Lemmas.signed_shift_guard_to_word",
     "[| ?n < LENGTH(?'a); 0 < ?n |]
      ==> (unat ?x * 2 ^ ?y < 2 ^ ?n) = (?x = 0 | ?x < 1 << ?n >> ?y)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 16, template_hole 15)),
        template_inequation (less_than, template_hole 14, template_var 2)],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 17,
                  template_app
                   (template_app
                     (template_hole 12,
                      template_app (template_hole 11, template_var 1)),
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app
                         (template_hole 9,
                          template_app (template_hole 8, template_hole 7))),
                      template_var 0))),
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_hole 9,
                      template_app (template_hole 8, template_hole 7))),
                  template_var 2))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_hole 4)),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_hole 0),
                       template_var 2)),
                   template_var 0)))
             )))),
    ("Word_Lemmas.upto_enum_step_shift",
     "is_aligned ?p ?n ==>
      [?p , ?p + 2 ^ ?m .e. ?p + 2 ^ ?n - 1] =
      map ((+) ?p) [0 , 2 ^ ?m .e. 2 ^ ?n - 1]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 9, template_var 2),
             template_app
              (template_app (template_hole 8, template_var 2),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_hole 4))),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 8, template_var 2),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_hole 6,
                       template_app (template_hole 5, template_hole 4))),
                   template_var 1))),
             template_hole 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 8, template_var 2)),
           template_app
            (template_app
              (template_app (template_hole 9, template_hole 0),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_hole 4))),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_hole 6,
                       template_app (template_hole 5, template_hole 4))),
                   template_var 1)),
               template_hole 2)))))),
    ("Word_Lemmas.signed_arith_ineq_checks_to_eq",
     "(- (2 ^ (size ?a - 1)) <= sint ?a - sint ?b &
       sint ?a - sint ?b <= 2 ^ (size ?a - 1) - 1) =
      (sint ?a - sint ?b = sint (?a - ?b))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_hole 12,
                      template_app
                       (template_app
                         (template_hole 11,
                          template_app
                           (template_hole 10,
                            template_app
                             (template_hole 9, template_hole 8))),
                        template_app
                         (template_app
                           (template_hole 7,
                            template_app (template_hole 6, template_var 1)),
                          template_hole 5)))),
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_var 1)),
                    template_app (template_hole 3, template_var 0)))),
              template_app
               (template_app
                 (template_hole 13,
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_var 1)),
                    template_app (template_hole 3, template_var 0))),
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app
                       (template_hole 11,
                        template_app
                         (template_hole 10,
                          template_app (template_hole 9, template_hole 8))),
                      template_app
                       (template_app
                         (template_hole 7,
                          template_app (template_hole 6, template_var 1)),
                        template_hole 5))),
                  template_hole 2)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_app (template_hole 3, template_var 0)),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Word_Lemmas.signed_arith_ineq_checks_to_eq",
     "(- (2 ^ (size ?a - 1)) <= sint ?a + sint ?b &
       sint ?a + sint ?b <= 2 ^ (size ?a - 1) - 1) =
      (sint ?a + sint ?b = sint (?a + ?b))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_hole 13,
                      template_app
                       (template_app
                         (template_hole 12,
                          template_app
                           (template_hole 11,
                            template_app
                             (template_hole 10, template_hole 9))),
                        template_app
                         (template_app
                           (template_hole 8,
                            template_app (template_hole 7, template_var 1)),
                          template_hole 6)))),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 1)),
                    template_app (template_hole 4, template_var 0)))),
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 1)),
                    template_app (template_hole 4, template_var 0))),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app
                       (template_hole 12,
                        template_app
                         (template_hole 11,
                          template_app
                           (template_hole 10, template_hole 9))),
                      template_app
                       (template_app
                         (template_hole 8,
                          template_app (template_hole 7, template_var 1)),
                        template_hole 6))),
                  template_hole 2)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_app (template_hole 4, template_var 0)),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Word_Lemmas.signed_arith_ineq_checks_to_eq",
     "(- (2 ^ (size ?a - 1)) <= sint ?a * sint ?b &
       sint ?a * sint ?b <= 2 ^ (size ?a - 1) - 1) =
      (sint ?a * sint ?b = sint (?a * ?b))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_hole 13,
                      template_app
                       (template_app
                         (template_hole 12,
                          template_app
                           (template_hole 11,
                            template_app
                             (template_hole 10, template_hole 9))),
                        template_app
                         (template_app
                           (template_hole 8,
                            template_app (template_hole 7, template_var 1)),
                          template_hole 6)))),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 1)),
                    template_app (template_hole 4, template_var 0)))),
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 1)),
                    template_app (template_hole 4, template_var 0))),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app
                       (template_hole 12,
                        template_app
                         (template_hole 11,
                          template_app
                           (template_hole 10, template_hole 9))),
                      template_app
                       (template_app
                         (template_hole 8,
                          template_app (template_hole 7, template_var 1)),
                        template_hole 6))),
                  template_hole 2)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_app (template_hole 4, template_var 0)),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Word_Lemmas.signed_arith_ineq_checks_to_eq",
     "(- (2 ^ (size ?a - 1)) <= sint ?a sdiv sint ?b &
       sint ?a sdiv sint ?b <= 2 ^ (size ?a - 1) - 1) =
      (sint ?a sdiv sint ?b = sint (?a sdiv ?b))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_hole 13,
                      template_app
                       (template_app
                         (template_hole 12,
                          template_app
                           (template_hole 11,
                            template_app
                             (template_hole 10, template_hole 9))),
                        template_app
                         (template_app
                           (template_hole 8,
                            template_app (template_hole 7, template_var 1)),
                          template_hole 6)))),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 1)),
                    template_app (template_hole 4, template_var 0)))),
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 1)),
                    template_app (template_hole 4, template_var 0))),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app
                       (template_hole 12,
                        template_app
                         (template_hole 11,
                          template_app
                           (template_hole 10, template_hole 9))),
                      template_app
                       (template_app
                         (template_hole 8,
                          template_app (template_hole 7, template_var 1)),
                        template_hole 6))),
                  template_hole 2)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_app (template_hole 4, template_var 0)),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Word_Lemmas.signed_arith_ineq_checks_to_eq",
     "(- (2 ^ (size ?a - 1)) <= sint ?a smod sint ?b &
       sint ?a smod sint ?b <= 2 ^ (size ?a - 1) - 1) =
      (sint ?a smod sint ?b = sint (?a smod ?b))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_hole 13,
                      template_app
                       (template_app
                         (template_hole 12,
                          template_app
                           (template_hole 11,
                            template_app
                             (template_hole 10, template_hole 9))),
                        template_app
                         (template_app
                           (template_hole 8,
                            template_app (template_hole 7, template_var 1)),
                          template_hole 6)))),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 1)),
                    template_app (template_hole 4, template_var 0)))),
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 1)),
                    template_app (template_hole 4, template_var 0))),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app
                       (template_hole 12,
                        template_app
                         (template_hole 11,
                          template_app
                           (template_hole 10, template_hole 9))),
                      template_app
                       (template_app
                         (template_hole 8,
                          template_app (template_hole 7, template_var 1)),
                        template_hole 6))),
                  template_hole 2)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_app (template_hole 4, template_var 0)),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Word_Lemmas.is_aligned_no_overflow3",
     "[| is_aligned ?a ?n; ?n < LENGTH(?'a); ?b < 2 ^ ?n; ?c <= 2 ^ ?n;
         ?b < ?c |]
      ==> ?a + ?b <= ?a + (?c - 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_than, template_var 2,
          template_app (template_hole 10, template_hole 9)),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4))),
            template_var 2)),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4))),
            template_var 2)),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 2, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("Word_Lemmas.signed_arith_sint",
     "- (2 ^ (size ?a - 1)) <= sint ?a - sint ?b &
      sint ?a - sint ?b <= 2 ^ (size ?a - 1) - 1 ==>
      sint (?a - ?b) = sint ?a - sint ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_hole 12,
                      template_app
                       (template_app
                         (template_hole 11,
                          template_app
                           (template_hole 10,
                            template_app
                             (template_hole 9, template_hole 8))),
                        template_app
                         (template_app
                           (template_hole 7,
                            template_app (template_hole 6, template_var 1)),
                          template_hole 5)))),
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_var 1)),
                    template_app (template_hole 3, template_var 0)))),
              template_app
               (template_app
                 (template_hole 13,
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_var 1)),
                    template_app (template_hole 3, template_var 0))),
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app
                       (template_hole 11,
                        template_app
                         (template_hole 10,
                          template_app (template_hole 9, template_hole 8))),
                      template_app
                       (template_app
                         (template_hole 7,
                          template_app (template_hole 6, template_var 1)),
                        template_hole 5))),
                  template_hole 2)))
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_app (template_hole 3, template_var 0))))),
    ("Word_Lemmas.signed_arith_sint",
     "- (2 ^ (size ?a - 1)) <= sint ?a + sint ?b &
      sint ?a + sint ?b <= 2 ^ (size ?a - 1) - 1 ==>
      sint (?a + ?b) = sint ?a + sint ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_hole 13,
                      template_app
                       (template_app
                         (template_hole 12,
                          template_app
                           (template_hole 11,
                            template_app
                             (template_hole 10, template_hole 9))),
                        template_app
                         (template_app
                           (template_hole 8,
                            template_app (template_hole 7, template_var 1)),
                          template_hole 6)))),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 1)),
                    template_app (template_hole 4, template_var 0)))),
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 1)),
                    template_app (template_hole 4, template_var 0))),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app
                       (template_hole 12,
                        template_app
                         (template_hole 11,
                          template_app
                           (template_hole 10, template_hole 9))),
                      template_app
                       (template_app
                         (template_hole 8,
                          template_app (template_hole 7, template_var 1)),
                        template_hole 6))),
                  template_hole 2)))
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_app (template_hole 4, template_var 0))))),
    ("Word_Lemmas.signed_arith_sint",
     "- (2 ^ (size ?a - 1)) <= sint ?a * sint ?b &
      sint ?a * sint ?b <= 2 ^ (size ?a - 1) - 1 ==>
      sint (?a * ?b) = sint ?a * sint ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_hole 13,
                      template_app
                       (template_app
                         (template_hole 12,
                          template_app
                           (template_hole 11,
                            template_app
                             (template_hole 10, template_hole 9))),
                        template_app
                         (template_app
                           (template_hole 8,
                            template_app (template_hole 7, template_var 1)),
                          template_hole 6)))),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 1)),
                    template_app (template_hole 4, template_var 0)))),
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 1)),
                    template_app (template_hole 4, template_var 0))),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app
                       (template_hole 12,
                        template_app
                         (template_hole 11,
                          template_app
                           (template_hole 10, template_hole 9))),
                      template_app
                       (template_app
                         (template_hole 8,
                          template_app (template_hole 7, template_var 1)),
                        template_hole 6))),
                  template_hole 2)))
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_app (template_hole 4, template_var 0))))),
    ("Word_Lemmas.signed_arith_sint",
     "- (2 ^ (size ?a - 1)) <= sint ?a sdiv sint ?b &
      sint ?a sdiv sint ?b <= 2 ^ (size ?a - 1) - 1 ==>
      sint (?a sdiv ?b) = sint ?a sdiv sint ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_hole 13,
                      template_app
                       (template_app
                         (template_hole 12,
                          template_app
                           (template_hole 11,
                            template_app
                             (template_hole 10, template_hole 9))),
                        template_app
                         (template_app
                           (template_hole 8,
                            template_app (template_hole 7, template_var 1)),
                          template_hole 6)))),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 1)),
                    template_app (template_hole 4, template_var 0)))),
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 1)),
                    template_app (template_hole 4, template_var 0))),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app
                       (template_hole 12,
                        template_app
                         (template_hole 11,
                          template_app
                           (template_hole 10, template_hole 9))),
                      template_app
                       (template_app
                         (template_hole 8,
                          template_app (template_hole 7, template_var 1)),
                        template_hole 6))),
                  template_hole 2)))
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_app (template_hole 4, template_var 0))))),
    ("Word_Lemmas.signed_arith_sint",
     "- (2 ^ (size ?a - 1)) <= sint ?a smod sint ?b &
      sint ?a smod sint ?b <= 2 ^ (size ?a - 1) - 1 ==>
      sint (?a smod ?b) = sint ?a smod sint ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_hole 13,
                      template_app
                       (template_app
                         (template_hole 12,
                          template_app
                           (template_hole 11,
                            template_app
                             (template_hole 10, template_hole 9))),
                        template_app
                         (template_app
                           (template_hole 8,
                            template_app (template_hole 7, template_var 1)),
                          template_hole 6)))),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 1)),
                    template_app (template_hole 4, template_var 0)))),
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 1)),
                    template_app (template_hole 4, template_var 0))),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app
                       (template_hole 12,
                        template_app
                         (template_hole 11,
                          template_app
                           (template_hole 10, template_hole 9))),
                      template_app
                       (template_app
                         (template_hole 8,
                          template_app (template_hole 7, template_var 1)),
                        template_hole 6))),
                  template_hole 2)))
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_app (template_hole 4, template_var 0))))),
    ("Word_Lemmas.nasty_split_lt",
     "[| ?x < 2 ^ (?m - ?n); ?n <= ?m; ?m < LENGTH(?'a) |]
      ==> ?x * 2 ^ ?n + (2 ^ ?n - 1) <= 2 ^ ?m - 1",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app
             (template_hole 13,
              template_app
               (template_hole 12,
                template_app (template_hole 11, template_hole 10))),
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0))),
        template_inequation (less_equals, template_var 0, template_var 1),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 6, template_hole 5))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_hole 12,
                     template_app (template_hole 11, template_hole 10))),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_hole 12,
                     template_app (template_hole 11, template_hole 10))),
                 template_var 0)),
             template_hole 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_hole 12,
                   template_app (template_hole 11, template_hole 10))),
               template_var 1)),
           template_hole 0)))),
    ("Word_Lemmas.distinct_word_add_ucast_shift_inj",
     "[| ?p + (UCAST(?'a \<rightarrow> ?'b) ?off << ?n) =
         ?p' + (UCAST(?'a \<rightarrow> ?'b) ?off' << ?n);
         is_aligned ?p ?n'; is_aligned ?p' ?n'; ?n' = ?n + LENGTH(?'a);
         ?n' < LENGTH(?'b) |]
      ==> ?p' = ?p & ?off' = ?off",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 12, template_var 5),
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 4)),
              template_var 3)),
          template_app
           (template_app (template_hole 12, template_var 2),
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 1)),
              template_var 3))),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 5),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_var 0)
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 7, template_var 3),
            template_app (template_hole 6, template_hole 5))),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 3, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 13, template_var 2),
                 template_var 5)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 4))
           ))),
    ("Word_Lemmas.nasty_split_less",
     "[| ?m <= ?n; ?n <= ?nm; ?nm < LENGTH(?'a); ?x < 2 ^ (?nm - ?n) |]
      ==> ?x * 2 ^ ?n + (2 ^ ?m - 1) < 2 ^ ?nm",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 11, template_hole 10)),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5))),
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 2)))],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_hole 5))),
                 template_var 2))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_hole 5))),
                 template_var 3)),
             template_hole 0)),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app (template_hole 6, template_hole 5))),
           template_var 1)))),
    ("Word_Lemmas.upto_enum_step_shift_red",
     "[| is_aligned ?p ?sz; ?sz < LENGTH(?'a); ?us <= ?sz |]
      ==> [?p , ?p + 2 ^ ?us .e. ?p + 2 ^ ?sz - 1] =
          map (%x. ?p + word_of_nat x * 2 ^ ?us) [0..<2 ^ (?sz - ?us)]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 21, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 19, template_hole 18)),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 15, template_var 2),
             template_app
              (template_app (template_hole 14, template_var 2),
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_hole 12,
                     template_app (template_hole 11, template_hole 10))),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 14, template_var 2),
                 template_app
                  (template_app
                    (template_hole 13,
                     template_app
                      (template_hole 12,
                       template_app (template_hole 11, template_hole 10))),
                   template_var 1))),
             template_hole 8)),
         template_app
          (template_app (template_hole 7, t_empty),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 11, template_hole 10))),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))))))),
    ("Word_Lemmas.scast_distrib",
     "[| !!x y. uint (?M x y) = ?L (uint x) (uint y) mod 2 ^ LENGTH(?'a);
         !!x y. uint (?M' x y) = ?L (uint x) (uint y) mod 2 ^ LENGTH(?'b);
         !!x y.
            ?L (x mod 2 ^ LENGTH(?'b)) (y mod 2 ^ LENGTH(?'b)) mod
            2 ^ LENGTH(?'b) =
            ?L x y mod 2 ^ LENGTH(?'b);
         is_down SCAST(?'a \<rightarrow> ?'b) |]
      ==> SCAST(?'a \<rightarrow> ?'b) (?M ?a ?b) =
          ?M' (SCAST(?'a \<rightarrow> ?'b) ?a)
           (SCAST(?'a \<rightarrow> ?'b) ?b)",
     template_implication
      ([template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate
         (template_app (template_hole 2, template_hole 1))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_var 4, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_var 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0))))),
    ("Word_Lemmas.ucast_distrib",
     "[| !!x y. uint (?M x y) = ?L (uint x) (uint y) mod 2 ^ LENGTH(?'a);
         !!x y. uint (?M' x y) = ?L (uint x) (uint y) mod 2 ^ LENGTH(?'b);
         !!x y.
            ?L (x mod 2 ^ LENGTH(?'b)) (y mod 2 ^ LENGTH(?'b)) mod
            2 ^ LENGTH(?'b) =
            ?L x y mod 2 ^ LENGTH(?'b);
         is_down UCAST(?'a \<rightarrow> ?'b) |]
      ==> UCAST(?'a \<rightarrow> ?'b) (?M ?a ?b) =
          ?M' (UCAST(?'a \<rightarrow> ?'b) ?a)
           (UCAST(?'a \<rightarrow> ?'b) ?b)",
     template_implication
      ([template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate
         (template_app (template_hole 2, template_hole 1))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_var 4, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_var 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0)))))]
