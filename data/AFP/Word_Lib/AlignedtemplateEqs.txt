   [("Aligned.is_aligned_iff_take_bit_eq_0",
     "is_aligned ?w ?n = (take_bit ?n ?w = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("Aligned.is_aligned_mask", "is_aligned ?w ?n = (and ?w (mask ?n) = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Aligned.is_aligned_iff_udvd", "is_aligned ?w ?n = (2 ^ ?n udvd ?w)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 0)),
         template_var 1))),
    ("Aligned.is_aligned_iff_dvd_int",
     "is_aligned ?ptr ?n = (2 ^ ?n dvd uint ?ptr)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1))),
             template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("Aligned.is_aligned_iff_dvd_nat",
     "is_aligned ?ptr ?n = (2 ^ ?n dvd unat ?ptr)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1))),
             template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("Aligned.is_aligned_nth", "is_aligned ?p ?m = (ALL n<?m. ~ bit ?p n)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app (template_hole 4, t_empty))),
    ("Aligned.neg_mask_le_high_bits",
     "(not (mask ?n) <= ?w) = (ALL i:{?n..<size ?w}. bit ?w i)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, template_var 0))),
         t_empty))),
    ("Aligned.and_neg_mask_eq_iff_not_mask_le",
     "(and ?w (not (mask ?n)) = not (mask ?n)) = (not (mask ?n) <= ?w)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0))),
         template_var 1))),
    ("Aligned.mask_inner_mask",
     "and (and ?a (mask ?n) + ?b) (mask ?n) = and (?a + ?b) (mask ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app (template_hole 0, template_var 1))),
             template_var 0)),
         template_app (template_hole 0, template_var 1)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("Aligned.unat_minus",
     "unat (- ?x) = (if ?x = 0 then 0 else 2 ^ size ?x - unat ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 0))
            )],
       template_dunno)),
    ("Aligned.range_inter",
     "({?a..?b} Int {?c..?d} = {}) =
      (ALL x. ~ (?a <= x & x <= ?b & ?c <= x & x <= ?d))",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0))),
         template_hole 4),
       template_app (template_hole 3, t_empty)))]
