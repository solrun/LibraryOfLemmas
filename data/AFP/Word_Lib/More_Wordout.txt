Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.More_WordTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.More_WordTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Phantom_Type" (required by "Draft.More_WordTemplates" via "Draft.More_Word" via "HOL-Library.Word" via "HOL-Library.Type_Length" via "HOL-Library.Numeral_Type" via "HOL-Library.Cardinality")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.More_WordTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.151s elapsed time, 0.624s cpu time, 0.042s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.More_WordTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.238s elapsed time, 0.971s cpu time, 0.042s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.More_WordTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.361s elapsed time, 1.437s cpu time, 0.132s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.More_WordTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Phantom_Type"
### 0.560s elapsed time, 2.234s cpu time, 0.208s GC time
Loading theory "HOL-Library.Cardinality" (required by "Draft.More_WordTemplates" via "Draft.More_Word" via "HOL-Library.Word" via "HOL-Library.Type_Length" via "HOL-Library.Numeral_Type")
### Additional type variable(s) in locale specification "CARD_1": 'a
class CARD_1 = type +
  assumes "CARD_1": "CARD('a) = 1"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### Additional type variable(s) in locale specification "card2": 'a
Found termination order: "size <*mlex*> {}"
class card2 = finite +
  assumes "two_le_card": "2 <= CARD('a)"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class finite_UNIV = type +
  fixes finite_UNIV :: "('a, bool) phantom"
  assumes "finite_UNIV": "finite_UNIV = Phantom('a) (finite UNIV)"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
class card_UNIV = finite_UNIV +
  fixes card_UNIV :: "('a, nat) phantom"
  assumes "card_UNIV": "card_UNIV_class.card_UNIV = Phantom('a) CARD('a)"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
instantiation
  nat :: card_UNIV
  card_UNIV_nat == card_UNIV_class.card_UNIV :: (nat, nat) phantom
  finite_UNIV_nat == finite_UNIV :: (nat, bool) phantom
instantiation
  int :: card_UNIV
  card_UNIV_int == card_UNIV_class.card_UNIV :: (int, nat) phantom
  finite_UNIV_int == finite_UNIV :: (int, bool) phantom
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
instantiation
  natural :: card_UNIV
  card_UNIV_natural == card_UNIV_class.card_UNIV :: (natural, nat) phantom
  finite_UNIV_natural == finite_UNIV :: (natural, bool) phantom
instantiation
  integer :: card_UNIV
  card_UNIV_integer == card_UNIV_class.card_UNIV :: (integer, nat) phantom
  finite_UNIV_integer == finite_UNIV :: (integer, bool) phantom
instantiation
  list :: (type) card_UNIV
  card_UNIV_list == card_UNIV_class.card_UNIV :: ('a list, nat) phantom
  finite_UNIV_list == finite_UNIV :: ('a list, bool) phantom
instantiation
  unit :: card_UNIV
  card_UNIV_unit == card_UNIV_class.card_UNIV :: (unit, nat) phantom
  finite_UNIV_unit == finite_UNIV :: (unit, bool) phantom
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
instantiation
  bool :: card_UNIV
  card_UNIV_bool == card_UNIV_class.card_UNIV :: (bool, nat) phantom
  finite_UNIV_bool == finite_UNIV :: (bool, bool) phantom
### theory "HOL-Library.BigO"
### 0.893s elapsed time, 3.400s cpu time, 0.749s GC time
Found termination order: "size <*mlex*> {}"
instantiation
  char :: card_UNIV
  card_UNIV_char == card_UNIV_class.card_UNIV :: (char, nat) phantom
  finite_UNIV_char == finite_UNIV :: (char, bool) phantom
instantiation
  prod :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_prod == finite_UNIV :: ('a * 'b, bool) phantom
instantiation
  prod :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_prod == card_UNIV_class.card_UNIV :: ('a * 'b, nat) phantom
instantiation
  sum :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_sum == finite_UNIV :: ('a + 'b, bool) phantom
consts
  flat :: "'a list stream => 'a stream"
instantiation
  sum :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_sum == card_UNIV_class.card_UNIV :: ('a + 'b, nat) phantom
instantiation
  fun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_fun == finite_UNIV :: ('a => 'b, bool) phantom
instantiation
  fun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_fun == card_UNIV_class.card_UNIV :: ('a => 'b, nat) phantom
instantiation
  option :: (finite_UNIV) finite_UNIV
  finite_UNIV_option == finite_UNIV :: ('a option, bool) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  option :: (card_UNIV) card_UNIV
  card_UNIV_option == card_UNIV_class.card_UNIV :: ('a option, nat) phantom
instantiation
  String.literal :: card_UNIV
  card_UNIV_literal == card_UNIV_class.card_UNIV ::
    (String.literal, nat) phantom
  finite_UNIV_literal == finite_UNIV :: (String.literal, bool) phantom
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
instantiation
  set :: (finite_UNIV) finite_UNIV
  finite_UNIV_set == finite_UNIV :: ('a set, bool) phantom
instantiation
  set :: (card_UNIV) card_UNIV
  card_UNIV_set == card_UNIV_class.card_UNIV :: ('a set, nat) phantom
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
instantiation
  Enum.finite_1 :: card_UNIV
  card_UNIV_finite_1 == card_UNIV_class.card_UNIV ::
    (Enum.finite_1, nat) phantom
  finite_UNIV_finite_1 == finite_UNIV :: (Enum.finite_1, bool) phantom
instantiation
  Enum.finite_2 :: card_UNIV
  card_UNIV_finite_2 == card_UNIV_class.card_UNIV ::
    (Enum.finite_2, nat) phantom
  finite_UNIV_finite_2 == finite_UNIV :: (Enum.finite_2, bool) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  Enum.finite_3 :: card_UNIV
  card_UNIV_finite_3 == card_UNIV_class.card_UNIV ::
    (Enum.finite_3, nat) phantom
  finite_UNIV_finite_3 == finite_UNIV :: (Enum.finite_3, bool) phantom
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
instantiation
  Enum.finite_4 :: card_UNIV
  card_UNIV_finite_4 == card_UNIV_class.card_UNIV ::
    (Enum.finite_4, nat) phantom
  finite_UNIV_finite_4 == finite_UNIV :: (Enum.finite_4, bool) phantom
instantiation
  Enum.finite_5 :: card_UNIV
  card_UNIV_finite_5 == card_UNIV_class.card_UNIV ::
    (Enum.finite_5, nat) phantom
  finite_UNIV_finite_5 == finite_UNIV :: (Enum.finite_5, bool) phantom
### theory "HOL-Library.Stream"
### 0.965s elapsed time, 3.515s cpu time, 0.694s GC time
### theory "HOL-Library.Cardinality"
### 0.787s elapsed time, 2.798s cpu time, 0.618s GC time
Loading theory "HOL-Library.Numeral_Type" (required by "Draft.More_WordTemplates" via "Draft.More_Word" via "HOL-Library.Word" via "HOL-Library.Type_Length")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  num1 :: CARD_1
Found termination order: "size <*mlex*> {}"
instantiation
  num1 :: {comm_monoid_mult,numeral,comm_ring}
  uminus_num1 == uminus :: num1 => num1
  zero_num1 == zero_class.zero :: num1
  minus_num1 == minus :: num1 => num1 => num1
  plus_num1 == plus :: num1 => num1 => num1
  one_num1 == one_class.one :: num1
  times_num1 == times :: num1 => num1 => num1
instantiation
  num1 :: linorder
  less_eq_num1 == less_eq :: num1 => num1 => bool
  less_num1 == less :: num1 => num1 => bool
locale mod_type
  fixes n :: "int"
    and Rep :: "'a => int"
    and Abs :: "int => 'a"
  assumes "mod_type n Rep Abs"
locale mod_ring
  fixes n :: "int"
    and Rep :: "'a => int"
    and Abs :: "int => 'a"
  assumes "mod_ring n Rep Abs"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
instantiation
  bit0 :: (finite) {minus,one,plus,times,uminus,zero}
  bit1 :: (finite) {minus,one,plus,times,uminus,zero}
  zero_bit0 == zero_class.zero :: 'a bit0
  uminus_bit0 == uminus :: 'a bit0 => 'a bit0
  times_bit0 == times :: 'a bit0 => 'a bit0 => 'a bit0
  plus_bit0 == plus :: 'a bit0 => 'a bit0 => 'a bit0
  one_bit0 == one_class.one :: 'a bit0
  minus_bit0 == minus :: 'a bit0 => 'a bit0 => 'a bit0
  zero_bit1 == zero_class.zero :: 'a bit1
  uminus_bit1 == uminus :: 'a bit1 => 'a bit1
  times_bit1 == times :: 'a bit1 => 'a bit1 => 'a bit1
  plus_bit1 == plus :: 'a bit1 => 'a bit1 => 'a bit1
  one_bit1 == one_class.one :: 'a bit1
  minus_bit1 == minus :: 'a bit1 => 'a bit1 => 'a bit1
Found termination order: "size <*mlex*> {}"
instantiation
  bit0 :: (finite) linorder
  bit1 :: (finite) linorder
  less_eq_bit0 == less_eq :: 'a bit0 => 'a bit0 => bool
  less_bit0 == less :: 'a bit0 => 'a bit0 => bool
  less_eq_bit1 == less_eq :: 'a bit1 => 'a bit1 => bool
  less_bit1 == less :: 'a bit1 => 'a bit1 => bool
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  num0 :: equal
  equal_num0 == equal_class.equal :: num0 => num0 => bool
instantiation
  num1 :: equal
  equal_num1 == equal_class.equal :: num1 => num1 => bool
instantiation
  num1 :: enum
  enum_num1 == enum_class.enum :: num1 list
  enum_all_num1 == enum_class.enum_all :: (num1 => bool) => bool
  enum_ex_num1 == enum_class.enum_ex :: (num1 => bool) => bool
instantiation
  num0 :: card_UNIV
  num1 :: card_UNIV
  card_UNIV_num0 == card_UNIV_class.card_UNIV :: (num0, nat) phantom
  finite_UNIV_num0 == finite_UNIV :: (num0, bool) phantom
  card_UNIV_num1 == card_UNIV_class.card_UNIV :: (num1, nat) phantom
  finite_UNIV_num1 == finite_UNIV :: (num1, bool) phantom
instantiation
  bit0 :: (finite) equal
  bit1 :: (finite) equal
  equal_bit0 == equal_class.equal :: 'a bit0 => 'a bit0 => bool
  equal_bit1 == equal_class.equal :: 'a bit1 => 'a bit1 => bool
instantiation
  bit0 :: (finite) enum
  enum_bit0 == enum_class.enum :: 'a bit0 list
  enum_all_bit0 == enum_class.enum_all :: ('a bit0 => bool) => bool
  enum_ex_bit0 == enum_class.enum_ex :: ('a bit0 => bool) => bool
instantiation
  bit1 :: (finite) enum
  enum_bit1 == enum_class.enum :: 'a bit1 list
  enum_all_bit1 == enum_class.enum_all :: ('a bit1 => bool) => bool
  enum_ex_bit1 == enum_class.enum_ex :: ('a bit1 => bool) => bool
Found termination order: "size <*mlex*> {}"
instantiation
  bit0 :: (finite) finite_UNIV
  bit1 :: (finite) finite_UNIV
  finite_UNIV_bit0 == finite_UNIV :: ('a bit0, bool) phantom
  finite_UNIV_bit1 == finite_UNIV :: ('a bit1, bool) phantom
instantiation
  bit0 :: ({card_UNIV,finite}) card_UNIV
  bit1 :: ({card_UNIV,finite}) card_UNIV
  card_UNIV_bit0 == card_UNIV_class.card_UNIV :: ('a bit0, nat) phantom
  card_UNIV_bit1 == card_UNIV_class.card_UNIV :: ('a bit1, nat) phantom
### theory "HOL-Library.Numeral_Type"
### 0.615s elapsed time, 1.292s cpu time, 0.123s GC time
Loading theory "HOL-Library.Type_Length" (required by "Draft.More_WordTemplates" via "Draft.More_Word" via "HOL-Library.Word")
class len0 = type +
  fixes len_of :: "'a itself => nat"
### theory "HOL-Library.Tree"
### 1.918s elapsed time, 5.937s cpu time, 0.951s GC time
Loading theory "Draft.Templates" (required by "Draft.More_WordTemplates" via "Draft.ExtrEqs")
class len = len0 +
  assumes "len_gt_0": "0 < LENGTH('a)"
instantiation
  0 :: len0
  1 :: len0
  len_of_num0 == len_of :: 0 itself => nat
  len_of_num1 == len_of :: 1 itself => nat
instantiation
  bit0 :: (len0) len0
  bit1 :: (len0) len0
  len_of_bit0 == len_of :: 'a bit0 itself => nat
  len_of_bit1 == len_of :: 'a bit1 itself => nat
instantiation
  Enum.finite_1 :: len
  len_of_finite_1 == len_of :: Enum.finite_1 itself => nat
instantiation
  Enum.finite_2 :: len
  len_of_finite_2 == len_of :: Enum.finite_2 itself => nat
instantiation
  Enum.finite_3 :: len
  len_of_finite_3 == len_of :: Enum.finite_3 itself => nat
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.057s elapsed time, 0.117s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.More_WordTemplates")
class linordered_idom = ring_char_0 + idom_abs_sgn +
  linordered_ring_strict + linordered_semidom +
  linordered_semiring_1_strict + ordered_comm_ring + ordered_ring_abs +
  assumes
    "sgn_if":
      "!!x. sgn x =
            (if x = (0::'a) then 0::'a
             else if (0::'a) < x then 1::'a else - (1::'a))"
### theory "HOL-Library.Type_Length"
### 0.443s elapsed time, 0.932s cpu time, 0.095s GC time
Loading theory "Word_Lib.More_Arithmetic" (required by "Draft.More_WordTemplates" via "Draft.More_Word")
Loading theory "HOL-Library.Word" (required by "Draft.More_WordTemplates" via "Draft.More_Word")
### theory "Word_Lib.More_Arithmetic"
### 0.075s elapsed time, 0.219s cpu time, 0.000s GC time
instantiation
  word :: (len) comm_ring_1
  uminus_word == uminus :: 'a word => 'a word
  one_word == one_class.one :: 'a word
  times_word == times :: 'a word => 'a word => 'a word
  zero_word == zero_class.zero :: 'a word
  minus_word == minus :: 'a word => 'a word => 'a word
  plus_word == plus :: 'a word => 'a word => 'a word
signature WORD_LIB =
  sig
    val dest_binT: typ -> int
    val dest_wordT: typ -> int
    val is_wordT: typ -> bool
    val mk_wordT: int -> typ
  end
structure Word_Lib: WORD_LIB
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.577s elapsed time, 1.277s cpu time, 0.113s GC time
instantiation
  word :: (len) equal
  equal_word == equal_class.equal :: 'a word => 'a word => bool
class semiring_char_0 = semiring_1 +
  assumes "inj_of_nat": "inj of_nat"
instantiation
  word :: (len) linorder
  less_eq_word == less_eq :: 'a word => 'a word => bool
  less_word == less :: 'a word => 'a word => bool
instantiation
  word :: (len) enum
  enum_word == enum_class.enum :: 'a word list
  enum_all_word == enum_class.enum_all :: ('a word => bool) => bool
  enum_ex_word == enum_class.enum_ex :: ('a word => bool) => bool
instantiation
  word :: (len) semiring_modulo
  modulo_word == modulo :: 'a word => 'a word => 'a word
  divide_word == divide :: 'a word => 'a word => 'a word
instantiation
  word :: (len) semiring_bits
  bit_word == bit :: 'a word => nat => bool
instantiation
  word :: (len) ring_bit_operations
  not_word == not :: 'a word => 'a word
  and_word == and :: 'a word => 'a word => 'a word
  or_word == or :: 'a word => 'a word => 'a word
  xor_word == xor :: 'a word => 'a word => 'a word
  mask_word == mask :: nat => 'a word
  set_bit_word == set_bit :: nat => 'a word => 'a word
  unset_bit_word == unset_bit :: nat => 'a word => 'a word
  flip_bit_word == flip_bit :: nat => 'a word => 'a word
  push_bit_word == push_bit :: nat => 'a word => 'a word
  drop_bit_word == drop_bit :: nat => 'a word => 'a word
  take_bit_word == take_bit :: nat => 'a word => 'a word
class semiring_bits = semiring_parity +
  fixes bit :: "'a => nat => bool"
  assumes
    "bits_induct":
      "!!P a.
          [| !!a. a div (2::'a) = a ==> P a;
             !!a b.
                [| P a; (of_bool b + (2::'a) * a) div (2::'a) = a |]
                ==> P (of_bool b + (2::'a) * a) |]
          ==> P a"
  assumes "bits_div_0": "!!a. (0::'a) div a = (0::'a)"
    and "bits_div_by_1": "!!a. a div (1::'a) = a"
    and "bits_mod_div_trivial": "!!a b. a mod b div b = (0::'a)"
    and
    "even_succ_div_2":
      "!!a. even a ==> ((1::'a) + a) div (2::'a) = a div (2::'a)"
    and
    "even_mask_div_iff":
      "!!m n.
          even (((2::'a) ^ m - (1::'a)) div (2::'a) ^ n) =
          ((2::'a) ^ n = (0::'a) | m <= n)"
    and
    "exp_div_exp_eq":
      "!!m n.
          (2::'a) ^ m div (2::'a) ^ n =
          of_bool ((2::'a) ^ m ~= (0::'a) & n <= m) * (2::'a) ^ (m - n)"
    and
    "div_exp_eq":
      "!!a m n. a div (2::'a) ^ m div (2::'a) ^ n = a div (2::'a) ^ (m + n)"
    and
    "mod_exp_eq":
      "!!a m n. a mod (2::'a) ^ m mod (2::'a) ^ n = a mod (2::'a) ^ min m n"
    and
    "mult_exp_mod_exp_eq":
      "!!m n a.
          m <= n ==>
          a * (2::'a) ^ m mod (2::'a) ^ n =
          a mod (2::'a) ^ (n - m) * (2::'a) ^ m"
    and
    "div_exp_mod_exp_eq":
      "!!a n m.
          a div (2::'a) ^ n mod (2::'a) ^ m =
          a mod (2::'a) ^ (n + m) div (2::'a) ^ n"
    and
    "even_mult_exp_div_exp_iff":
      "!!a m n.
          even (a * (2::'a) ^ m div (2::'a) ^ n) =
          (n < m |
           (2::'a) ^ n = (0::'a) | m <= n & even (a div (2::'a) ^ (n - m)))"
  assumes "bit_iff_odd": "!!a n. bit a n = odd (a div (2::'a) ^ n)"
class semiring_bit_operations = semiring_bits +
  fixes "and" :: "'a => 'a => 'a"
    and or :: "'a => 'a => 'a"
    and xor :: "'a => 'a => 'a"
    and mask :: "nat => 'a"
    and set_bit :: "nat => 'a => 'a"
    and unset_bit :: "nat => 'a => 'a"
    and flip_bit :: "nat => 'a => 'a"
    and push_bit :: "nat => 'a => 'a"
    and drop_bit :: "nat => 'a => 'a"
    and take_bit :: "nat => 'a => 'a"
  assumes "bit_and_iff": "!!a b n. bit (and a b) n = (bit a n & bit b n)"
    and "bit_or_iff": "!!a b n. bit (or a b) n = (bit a n | bit b n)"
    and "bit_xor_iff": "!!a b n. bit (xor a b) n = (bit a n ~= bit b n)"
    and "mask_eq_exp_minus_1": "!!n. mask n = (2::'a) ^ n - (1::'a)"
    and "set_bit_eq_or": "!!n a. set_bit n a = or a (push_bit n (1::'a))"
    and
    "bit_unset_bit_iff":
      "!!m a n. bit (unset_bit m a) n = (bit a n & m ~= n)"
    and
    "flip_bit_eq_xor": "!!n a. flip_bit n a = xor a (push_bit n (1::'a))"
    and "push_bit_eq_mult": "!!n a. push_bit n a = a * (2::'a) ^ n"
    and "drop_bit_eq_div": "!!n a. drop_bit n a = a div (2::'a) ^ n"
    and "take_bit_eq_mod": "!!n a. take_bit n a = a mod (2::'a) ^ n"
class semiring_bit_operations = semiring_bits +
  fixes "and" :: "'a => 'a => 'a"
    and or :: "'a => 'a => 'a"
    and xor :: "'a => 'a => 'a"
    and mask :: "nat => 'a"
    and set_bit :: "nat => 'a => 'a"
    and unset_bit :: "nat => 'a => 'a"
    and flip_bit :: "nat => 'a => 'a"
    and push_bit :: "nat => 'a => 'a"
    and drop_bit :: "nat => 'a => 'a"
    and take_bit :: "nat => 'a => 'a"
  assumes "bit_and_iff": "!!a b n. bit (and a b) n = (bit a n & bit b n)"
    and "bit_or_iff": "!!a b n. bit (or a b) n = (bit a n | bit b n)"
    and "bit_xor_iff": "!!a b n. bit (xor a b) n = (bit a n ~= bit b n)"
    and "mask_eq_exp_minus_1": "!!n. mask n = (2::'a) ^ n - (1::'a)"
    and "set_bit_eq_or": "!!n a. set_bit n a = or a (push_bit n (1::'a))"
    and
    "bit_unset_bit_iff":
      "!!m a n. bit (unset_bit m a) n = (bit a n & m ~= n)"
    and
    "flip_bit_eq_xor": "!!n a. flip_bit n a = xor a (push_bit n (1::'a))"
    and "push_bit_eq_mult": "!!n a. push_bit n a = a * (2::'a) ^ n"
    and "drop_bit_eq_div": "!!n a. drop_bit n a = a div (2::'a) ^ n"
    and "take_bit_eq_mod": "!!n a. take_bit n a = a mod (2::'a) ^ n"
class ring_bit_operations = semiring_bit_operations + ring_parity +
  fixes not :: "'a => 'a"
  assumes
    "bit_not_iff_eq":
      "!!a n. bit (not a) n = ((2::'a) ^ n ~= (0::'a) & ~ bit a n)"
  assumes "minus_eq_not_minus_1": "!!a. - a = not (a - (1::'a))"
class unique_euclidean_semiring_numeral =
  unique_euclidean_semiring_with_nat + linordered_semidom +
  fixes divmod :: "num => num => 'a * 'a"
    and divmod_step :: "num => 'a * 'a => 'a * 'a"
  assumes
    "div_less": "!!a b. [| (0::'a) <= a; a < b |] ==> a div b = (0::'a)"
    and "mod_less": "!!a b. [| (0::'a) <= a; a < b |] ==> a mod b = a"
    and
    "div_positive": "!!b a. [| (0::'a) < b; b <= a |] ==> (0::'a) < a div b"
    and "mod_less_eq_dividend": "!!a b. (0::'a) <= a ==> a mod b <= a"
    and "pos_mod_bound": "!!b a. (0::'a) < b ==> a mod b < b"
    and "pos_mod_sign": "!!b a. (0::'a) < b ==> (0::'a) <= a mod b"
    and
    "mod_mult2_eq":
      "!!c a b.
          (0::'a) <= c ==> a mod (b * c) = b * (a div b mod c) + a mod b"
    and
    "div_mult2_eq":
      "!!c a b. (0::'a) <= c ==> a div (b * c) = a div b div c"
  assumes "discrete": "!!a b. (a < b) = (a + (1::'a) <= b)"
  assumes
    "divmod_def":
      "!!m n.
          divmod m n = (numeral m div numeral n, numeral m mod numeral n)"
    and
    "divmod_step_def":
      "!!l qr.
          divmod_step l qr =
          (let (q, r) = qr
           in if numeral l <= r then ((2::'a) * q + (1::'a), r - numeral l)
              else ((2::'a) * q, r))"
class linordered_semidom = linordered_comm_semiring_strict +
  linordered_nonzero_semiring + semidom +
  assumes "le_add_diff_inverse2": "!!b a. b <= a ==> a - b + b = a"
class ring_bit_operations = semiring_bit_operations + ring_parity +
  fixes not :: "'a => 'a"
  assumes
    "bit_not_iff_eq":
      "!!a n. bit (not a) n = ((2::'a) ^ n ~= (0::'a) & ~ bit a n)"
  assumes "minus_eq_not_minus_1": "!!a. - a = not (a - (1::'a))"
class semiring_bit_operations = semiring_bits +
  fixes "and" :: "'a => 'a => 'a"
    and or :: "'a => 'a => 'a"
    and xor :: "'a => 'a => 'a"
    and mask :: "nat => 'a"
    and set_bit :: "nat => 'a => 'a"
    and unset_bit :: "nat => 'a => 'a"
    and flip_bit :: "nat => 'a => 'a"
    and push_bit :: "nat => 'a => 'a"
    and drop_bit :: "nat => 'a => 'a"
    and take_bit :: "nat => 'a => 'a"
  assumes "bit_and_iff": "!!a b n. bit (and a b) n = (bit a n & bit b n)"
    and "bit_or_iff": "!!a b n. bit (or a b) n = (bit a n | bit b n)"
    and "bit_xor_iff": "!!a b n. bit (xor a b) n = (bit a n ~= bit b n)"
    and "mask_eq_exp_minus_1": "!!n. mask n = (2::'a) ^ n - (1::'a)"
    and "set_bit_eq_or": "!!n a. set_bit n a = or a (push_bit n (1::'a))"
    and
    "bit_unset_bit_iff":
      "!!m a n. bit (unset_bit m a) n = (bit a n & m ~= n)"
    and
    "flip_bit_eq_xor": "!!n a. flip_bit n a = xor a (push_bit n (1::'a))"
    and "push_bit_eq_mult": "!!n a. push_bit n a = a * (2::'a) ^ n"
    and "drop_bit_eq_div": "!!n a. drop_bit n a = a div (2::'a) ^ n"
    and "take_bit_eq_mod": "!!n a. take_bit n a = a mod (2::'a) ^ n"
class ring_bit_operations = semiring_bit_operations + ring_parity +
  fixes not :: "'a => 'a"
  assumes
    "bit_not_iff_eq":
      "!!a n. bit (not a) n = ((2::'a) ^ n ~= (0::'a) & ~ bit a n)"
  assumes "minus_eq_not_minus_1": "!!a. - a = not (a - (1::'a))"
instantiation
  word :: (len) size
  size_word == size :: 'a word => nat
### Partially applied constant "Word.word_sle" on left hand side of equation, in theorem:
### linorder.Min (\<le>s) (set (?x # ?xs)) == fold signed.min ?xs ?x
### Partially applied constant "Word.word_sle" on left hand side of equation, in theorem:
### linorder.Max (\<le>s) (set (?x # ?xs)) == fold signed.max ?xs ?x
### Partially applied constant "Word.word_sle" on left hand side of equation, in theorem:
### signed.sorted [] == True
### Partially applied constant "Word.word_sle" on left hand side of equation, in theorem:
### signed.sorted [?x] == True
### Partially applied constant "Word.word_sle" on left hand side of equation, in theorem:
### signed.sorted (?x # ?y # ?zs) == ?x \<le>s ?y & signed.sorted (?y # ?zs)
### Partially applied constant "Word.word_sle" on left hand side of equation, in theorem:
### signed.sorted_list_of_set (set ?xs) == signed.sort (remdups ?xs)
val unat_arith_simpset =
   Simpset
    ({depth = (0, ref false), prems = [], rules =
      Net {atoms =
           {("Int.Pos",
              Leaf
               [{elhs = "Int.Pos", extra = false, fo = true, lhs =
                 Const ("Int.Pos", "num => int"), name = "Int.Pos_def",
                 perm = false, thm = "Int.Pos == numeral"}]),
             ("Word.Word",
               Leaf
                [{elhs = "Word.Word", extra = false, fo = true, lhs =
                  Const ("Word.Word", "int => ?'a1 word"), name =
                  "Word.Word_eq_word_of_int", perm = false, thm =
                  "Word.Word == word_of_int"}]),
             ("Word.cast",
               Leaf
                [{elhs = "Word.cast", extra = false, fo = true, lhs =
                  Const ("Word.cast", "?'a1 word => ?'b1 word"), name =
                  "??.unknown", perm = false, thm = "Word.cast == ucast"}]),
             ("Word.of_int",
               Leaf
                [{elhs = "Word.of_int", extra = false, fo = true, lhs =
                  Const ("Word.of_int", "int => ?'a1 word"), name =
                  "??.unknown", perm = false, thm =
                  "Word.of_int == word_of_int"}]),
             ("Word.of_nat",
               Leaf
                [{elhs = "Word.of_nat", extra = false, fo = true, lhs =
                  Const ("Word.of_nat", "nat => ?'a1 word"), name =
                  "??.unknown", perm = false, thm =
                  "Word.of_nat == word_of_nat"}]),
             ("Word.the_int",
               Leaf
                [{elhs = "Word.the_int", extra = false, fo = true, lhs =
                  Const ("Word.the_int", "?'a1 word => int"), name =
                  "??.unknown", perm = false, thm =
                  "Word.the_int == uint"}]),
             ("Word.the_nat",
               Leaf
                [{elhs = "Word.the_nat", extra = false, fo = true, lhs =
                  Const ("Word.the_nat", "?'a1 word ... nat"), name =
                  "??.unknown", perm = false, thm =
                  "Word.the_nat == unat"}]),
             ("String.Literal'",
               Leaf
                [{elhs = "String.Literal'", extra = false, fo = true, lhs =
                  Const ("String.Literal'", "... ... ..."), name =
                  "String.Literal'_def", perm = false, thm =
                  "String.Literal' ... String.Literal"}]),
             ("Code_Numeral.Pos",
               Leaf
                [{elhs = "Code_Numeral.Pos", extra = false, fo = true, lhs =
                  Const ("Code_Numeral.Pos", "..."), name =
                  "Code_Numeral.Pos_def", perm = false, thm =
                  "... ... ..."}]),
             ("Word.signed_cast",
               Leaf
                [{elhs = "Word.signed_cast", extra = false, fo = true, lhs =
                  Const ("Word.signed_cast", "..."), name = "??.unknown",
                  ...}]),
             ("Word.the_signed_int",
               Leaf
                [{elhs = "...", extra = false, fo = true, lhs =
                  Const ("...", ...), ...}]),
             ("Groups.abs_class.abs",
               Leaf [{elhs = "...", extra = false, fo = true, ...}]),
             ("Groups.one_class.one",
               Leaf [{elhs = ..., extra = false, ...}, ...]),
             ("Groups.sgn_class.sgn", Leaf [...]),
             ("Code_Numeral.negative", ...), ...},
           comb =
           Net {atoms =
                {("Fun.id",
                   Net {atoms = {}, comb = Leaf [], var =
                        Leaf
                         [{elhs = "id ?y", extra = false, fo = true, lhs =
                           Const ("Fun.id", "?'a => ?'a") $
                             Var (("y", 0), "?'a"),
                           name = "Fun.id_apply", perm = false, thm =
                           "id ?y == ?y"}]}),
                  ("HOL.Ex",
                    Net {atoms = {}, comb =
                         Net {atoms =
                              {("HOL.eq",
                                 Net {atoms = {}, comb = Leaf [], var =
Leaf
 [{elhs = "...", extra = false, fo = true, lhs =
   Const ("...", "(?'d1 => bool) => bool") $ ..., ...}]})},
                              comb = Leaf [], var = Leaf []},
                         var =
                         Leaf
                          [{elhs = "Ex ?P1", extra = false, fo = true, lhs =
                            Const ("HOL.Ex", "(...) ... bool") $
                              Abs ("x", "1",
                                Var ((...), "1 => bool") $ ...),
                            name = "Numeral_Type.ex_1", perm = false, thm =
                            "EX x. ?P1 x == ?P1 1"},
                           {elhs = "Ex ?P1", extra = false, fo = true, lhs =
                            Const ("HOL.Ex", "... ... ...") $
                              Abs ("x", "...", ... $ ...),
                            name = "Product_Type.split_paired_Ex", perm =
                            false, thm =
                            "... x... ... ... == ... a b... ... ..."},
                           {elhs = "EX x y. ?p1 ... ......... ......",
                            extra = false, fo = true, lhs =
                            Const ("HOL.Ex", "...") $ Abs ("x", "...", ...),
                            name = "Product_Type.surj_pair", perm = false,
                            thm = "... ... ...... ... ... True"},
                           {elhs = "... x... ... ... ...", extra = false,
                            fo = false, lhs =
                            Const ("HOL.Ex", "...") $ Abs ("x", ..., ...),
                            name = "Set.ex_image_cong_iff_2", perm = false,
                            thm = "... ... ..."},
                           {elhs = "... ...... ...", extra = false, fo =
                            true, lhs =
                            Const ("...", ...) $ Abs ("...", "?'a1", ...),
                            name = "Set.ex_image_cong_iff_1", ...},
                           {elhs = "...", extra = false, fo = false, lhs =
                            Const ("...", "(?'d1 => bool) => bool") $ ...,
                            ...},
                           {elhs = "...", extra = false, fo = false, ...},
                           {elhs = ..., extra = false, ...}, ...]}),
                  ("HOL.All",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [{elhs = "All ?P1", extra = false, fo = true,
                            lhs =
                            Const ("HOL.All", "... ... ...") $
                              Abs ("i", "...", ... $ ...),
                            name = "Numeral_Type.forall_1", perm = false,
                            thm = "... i... ... ... == ?P1 ..."},
                           {elhs = "ALL y. ?x1 ... ... ...", extra = false,
                            fo = true, lhs =
                            Const ("HOL.All", "...") $
                              Abs ("y", "...", ...),
                            name = "Option.not_Some_eq", perm = false, thm =
                            "... ...... ... ... ... ... ..."},
                           {elhs = "All ?P1", extra = false, fo = true,
                            lhs =
                            Const ("HOL.All", "...") $ Abs ("x", ..., ...),
                            name = "Product_Type.split_paired_All", perm =
                            false, thm = "... ... ..."},
                           {elhs = "... ...... ...", extra = false, fo =
                            true, lhs =
                            Const ("...", ...) $ Abs ("...", "?'a1", ...),
                            name = "Set.all_not_in_conv", ...},
                           {elhs = "...", extra = false, fo = true, lhs =
                            Const ("...", "(?'d1 => bool) => bool") $ ...,
                            ...},
                           {elhs = "...", extra = false, fo = true, ...},
                           {elhs = ..., extra = false, ...}, ...]}),
                  ("HOL.Ex1",
                    Net {atoms = {}, comb =
                         Net {atoms =
                              {("HOL.eq",
                                 Net {atoms = {}, comb = Leaf [], var =
Leaf [{elhs = ..., extra = false, ...}]})},
                              comb = Leaf [], var = Leaf []},
                         var =
                         Leaf
                          [{elhs = "EX! x. x ... ?t1", extra = false, fo =
                            true, lhs =
                            Const ("HOL.Ex1", "...") $
                              Abs ("x", "...", ...),
                            name = "HOL.ex1_eq_1", perm = false, thm =
                            "... ...... ... ... True"}]}),
                  ("HOL.Not",
                    Net {atoms =
                         {("HOL.True",
                            Leaf
                             [{elhs = "... True", extra = false, fo = true,
                               lhs =
                               Const ("...", ...) $ Const ("...", "bool"),
                               name = "HOL.simp_thms_7", ...}]),
                           ("HOL.False",
                             Leaf
                              [{elhs = "... ...", extra = false, fo = true,
                                lhs = Const ("...", "bool => bool") $ ...,
                                ...}])},
                         comb =
                         Net {atoms =
                              {("HOL.Ex",
                                 Net {atoms = {}, comb = Leaf [...], var =
Leaf [...]}),
                                ("HOL.All",
                                  Net {atoms = {}, comb = ..., var = ...}),
                                ("HOL.Not", Net {atoms = {}, ...}),
                                ("Finite_Set.finite", ...)},
                              comb =
                              Net {atoms =
                                   {("HOL.eq", Net {atoms = {...}, ...}),
                                     ("Set.Bex", ...), ...},
                                   comb = Leaf [], var = Leaf []},
                              var = Leaf []},
                         var = Leaf []}),
                  ("HOL.The",
                    Net {atoms = {}, comb =
                         Net {atoms =
                              {("HOL.eq",
                                 Net {atoms = {}, comb = ..., var = ...}),
                                ("Product_Type.prod.case_prod",
                                  Net {atoms = {}, ...})},
                              comb = Leaf [], var = Leaf []},
                         var =
                         Leaf
                          [{elhs = "... ...... ...", extra = false, fo =
                            true, lhs =
                            Const ("...", ...) $ Abs ("...", "?'a", ...),
                            name = "HOL.the_eq_trivial", ...}]}),
                  ("Int.Neg",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [{elhs = "...", extra = false, fo = true, lhs =
                            Const ("...", "num => int") $ ..., ...}]}),
                  ("Int.dup",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [{elhs = "...", extra = false, fo = true, ...}]}),
                  ("Int.nat",
                    Net {atoms =
                         {("Groups.one_class.one", Leaf [...]),
                           ("Groups.zero_class.zero", ...)},
                         comb = Net {atoms = {...}, comb = ..., var = ...},
                         var = Leaf [{elhs = ..., extra = false, ...}]}),
                  ("Map.dom",
                    Net {atoms = {}, comb = Net {atoms = {...}, ...}, var =
                         Leaf [...]}),
                  ("Map.ran", Net {atoms = {}, comb = ..., var = ...}),
                  ("Nat.Suc", Net {atoms = {...}, ...}), ("Num.inc", ...),
                  ...},
                comb =
                Net {atoms =
                     {("HOL.eq",
                        Net {atoms =
                             {("HOL.True",
                                Net {atoms =
                                     {("HOL.False",
  Leaf
   [{elhs = "...", extra = false, fo = true, lhs =
     Const ("...", "bool => bool => bool") $ ... $ ..., ...}])},
                                     comb = Leaf [], var =
                                     Leaf
[{elhs = "... ... ...", extra = false, fo = true, lhs =
  Const ("...", ...) $ Const ("...", "bool") $ ..., name =
  "HOL.simp_thms_11", ...}]}),
                               ("HOL.False",
                                 Net {atoms =
{("HOL.True", Leaf [{elhs = "...", extra = false, fo = true, ...}])}, comb =
Leaf [], var =
Leaf
 [{elhs = "...", extra = false, fo = true, lhs =
   Const ("...", "bool => bool => bool") $ ... $ ..., ...}]}),
                               ("Num.num.One",
                                 Net {atoms = {}, comb =
Net {atoms = {("Num.num.Bit0", ...), ...}, comb = Leaf [...], var =
     Leaf [...]},
var = Leaf []}),
                               ("Filter.at_bot",
                                 Net {atoms =
{("Orderings.bot_class.bot", Leaf [...])}, comb = Leaf [], var = Leaf []}),
                               ("Filter.at_top",
                                 Net {atoms =
{("Orderings.bot_class.bot", ...)}, comb = Leaf [...], var = Leaf [...]}),
                               ("List.list.Nil",
                                 Net {atoms = {}, comb = ..., var = ...}),
                               ("Filter.cofinite",
                                 Net {atoms = {...}, ...}),
                               ("Option.option.None", ...), ...},
                             comb =
                             Net {atoms =
                                  {("HOL.Not",
                                     Net
{atoms = {}, comb = Leaf [], var =
 Net {atoms = {}, comb = Net {atoms = {...}, ...}, var = Leaf [...]}}),
                                    ("Int.nat",
Net {atoms = {}, comb = Leaf [], var =
     Net {atoms = {...}, comb = ..., var = ...}}),
                                    ("Map.dom",
Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {...}, ...}}),
                                    ("Nat.Suc",
Net {atoms = {...}, comb = ..., var = ...}),
                                    ("Set.Pow", Net {atoms = {}, ...}),
                                    ("List.rev", ...), ...},
                                  comb =
                                  Net {atoms =
 {("List.upt",
    Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}}),
   ("List.zip", Net {atoms = {}, comb = ..., var = ...}),
   ("List.drop", Net {atoms = {}, ...}), ("List.take", ...), ...},
 comb =
 Net {atoms =
      {("Fun.fun_upd", Net {atoms = {}, ...}), ("Map.map_add", ...), ...},
      comb = Net {atoms = {...}, comb = ..., var = ...}, var = Leaf []},
 var = Leaf []},
                                  var = Leaf []},
                             var =
                             Net {atoms =
                                  {("HOL.True",
                                     Leaf
[{elhs = "... ... ...", extra = false, fo = true, lhs =
  Const ("...", ...) $ Var ((...), "bool") $ ..., name = "HOL.simp_thms_12",
  ...}]),
                                    ("HOL.False",
Leaf
 [{elhs = "...", extra = false, fo = true, lhs =
   Const ("...", "bool => bool => bool") $ ... $ ..., ...}]),
                                    ("Groups.one_class.one",
Leaf [{elhs = "...", extra = false, fo = true, ...}])},
                                  comb =
                                  Net {atoms =
 {("HOL.Not", Net {atoms = {}, comb = Leaf [...], var = Leaf [...]}),
   ("Map.map_of", Net {atoms = {}, comb = ..., var = ...}),
   ("Groups.uminus_class.uminus", Net {atoms = {}, ...})},
 comb =
 Net {atoms =
      {("List.append", Net {atoms = {}, ...}), ("Map.map_add", ...), ...},
      comb = Leaf [], var = Leaf []},
 var = Leaf []},
                                  var =
                                  Leaf
                                   [{elhs = "?v1 ... ?w1", extra = false,
                                     fo = true, lhs =
                                     Const ("HOL.eq", "...") $
 Var (("...", 1), ...) $ Var ((...), "?'a1 word"),
                                     name = "local.unat_arith_simps_3",
                                     perm = false, thm = "... ... ..."},
                                    {elhs = "... ... ...", extra = false,
                                     fo = true, lhs =
                                     Const ("...", ...) $
 Var ((...), "?'a1") $ ...,
                                     name = "HOL.simp_thms_6", ...}]}}),
                       ("HOL.Let",
                         Net {atoms =
                              {("Groups.one_class.one",
                                 Net {atoms = {}, comb = Leaf [], var =
Leaf
 [{elhs = "...", extra = false, fo = true, lhs =
   Const ("...", "?'b1 => (?'b1 => ?'a) => ?'a") $ ... $ ..., ...}]}),
                                ("Groups.zero_class.zero",
                                  Net {atoms = {}, comb = Leaf [], var =
 Leaf [{elhs = "...", extra = false, fo = true, ...}]})},
                              comb =
                              Net {atoms =
                                   {("Nat.Suc",
Net {atoms = {}, comb = Leaf [], var =
     Net {atoms = {}, comb = ..., var = ...}}),
                                     ("Num.numeral_class.numeral",
 Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}}),
                                     ("Groups.uminus_class.uminus",
 Net {atoms = {}, comb = ..., var = ...})},
                                   comb = Leaf [], var = Leaf []},
                              var = Leaf []}),
                       ("Int.sub",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {}, comb = Leaf [], var =
                                   Leaf
                                    [{elhs = "...", extra = false, fo =
true, lhs = Const ("...", "num => num => int") $ ... $ ..., ...}]}}),
                       ("Num.pow",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms =
                                   {("Num.num.One",
Leaf [{elhs = ..., extra = false, ...}])},
                                   comb =
                                   Net {atoms =
  {("Num.num.Bit0", ...), ...}, comb = Leaf [...], var = Leaf [...]},
                                   var = Leaf []}}),
                       ("Set.Bex",
                         Net {atoms =
                              {("Orderings.bot_class.bot",
                                 Net {atoms = {}, comb = Leaf [...], var =
Leaf [...]}),
                                ("Orderings.top_class.top",
                                  Net {atoms = {}, comb = ..., var = ...})},
                              comb =
                              Net {atoms =
                                   {("Set.Collect", Net {atoms = {}, ...}),
                                     ("List.list.set", ...), ...},
                                   comb =
                                   Net {atoms = {...}, comb = ..., var =
  ...},
                                   var = Leaf []},
                              var =
                              Net {atoms = {}, comb =
                                   Net {atoms = {...}, comb = ..., var =
  ...},
                                   var =
                                   Leaf
                                    [{elhs = ..., extra = false, ...},
                                     ...]}}),
                       ("Fun.comp",
                         Net {atoms =
                              {("Fun.id",
                                 Net {atoms = {}, comb = ..., var = ...}),
                                ("Option.option.the",
                                  Net {atoms = {...}, ...}),
                                ("Product_Type.prod.fst", ...), ...},
                              comb =
                              Net {atoms = {("List.list.map", ...), ...},
                                   comb = Net {atoms = {...}, ...}, var =
                                   Leaf [...]},
                              var =
                              Net {atoms = {("Fun.id", ...)}, comb =
                                   Leaf [...], var = Leaf [...]}}),
                       ("GCD.bezw",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {...}, comb = ..., var = ...}}),
                       ("HOL.conj",
                         Net {atoms = {("HOL.True", ...), ...}, comb =
                              Net {atoms = {...}, ...}, var =
                              Net {atoms = {...}, ...}}),
                       ("HOL.disj",
                         Net {atoms = {...}, comb = ..., var = ...}),
                       ("List.nth", Net {atoms = {}, ...}),
                       ("List.upt", ...), ...},
                     comb =
                     Net {atoms =
                          {("HOL.If",
                             Net {atoms =
                                  {("HOL.True",
                                     Net
{atoms = {}, comb = Leaf [], var =
 Net {atoms = {}, comb = Leaf [...], var = Leaf [...]}}),
                                    ("HOL.False",
Net {atoms = {}, comb = Leaf [], var =
     Net {atoms = {}, comb = ..., var = ...}})},
                                  comb =
                                  Net {atoms = {}, comb =
 Net {atoms = {("HOL.eq", Net {atoms = {}, ...})}, comb = Leaf [], var =
      Leaf []},
 var = Leaf []},
                                  var =
                                  Net {atoms = {}, comb = Leaf [], var =
 Net {atoms = {}, comb = Leaf [], var =
      Leaf [{elhs = ..., extra = false, ...}]}}}),
                            ("Fun.comp",
                              Net {atoms = {}, comb = Leaf [], var =
                                   Net {atoms = {}, comb = Leaf [], var =
  Net {atoms = {}, comb = Leaf [...], var = Leaf [...]}}}),
                            ("Fun.fcomp",
                              Net {atoms = {}, comb = Leaf [], var =
                                   Net {atoms = {}, comb = Leaf [], var =
  Net {atoms = {}, comb = ..., var = ...}}}),
                            ("List.foldl",
                              Net {atoms = {}, comb = Leaf [], var =
                                   Net {atoms = {}, comb = Leaf [...], var =
  Net {atoms = {...}, ...}}}),
                            ("List.foldr",
                              Net {atoms = {}, comb = Leaf [], var =
                                   Net {atoms = {}, comb = ..., var =
  ...}}),
                            ("Nat.compow",
                              Net {atoms =
                                   {("Groups.zero_class.zero", ...)}, comb =
                                   Leaf [...], var = Leaf [...]}),
                            ("Fun.fun_upd",
                              Net {atoms = {}, comb = ..., var = ...}),
                            ("Map.map_add", Net {atoms = {}, ...}),
                            ("Fun.bij_betw", ...), ...},
                          comb =
                          Net {atoms =
                               {("Fun.fun_upd",
                                  Net {atoms = {}, comb = Leaf [], var =
 Net {atoms = {}, comb = Leaf [], var =
      Net {atoms = {}, comb = ..., var = ...}}}),
                                 ("Fun.map_fun",
                                   Net {atoms = {}, comb = Leaf [], var =
  Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}}}),
                                 ("Map.map_upds",
                                   Net {atoms = {}, comb = Leaf [], var =
  Net {atoms = {}, comb = ..., var = ...}}),
                                 ("BNF_Def.rel_sum",
                                   Net {atoms = {}, comb = Leaf [...], var =
  Net {atoms = {}, ...}}),
                                 ("Fun.override_on",
                                   Net {atoms = {}, comb = ..., var = ...}),
                                 ("Num.num.rec_num", Net {atoms = {}, ...}),
                                 ("Num.num.case_num", ...), ...},
                               comb =
                               Net {atoms =
                                    {("Enum.finite_4.rec_finite_4",
 Net {atoms = {}, comb = Leaf [], var =
      Net {atoms = {}, comb = ..., var = ...}}),
("Enum.finite_4.case_finite_4",
  Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}})},
                                    comb =
                                    Net {atoms =
   {("Enum.finite_5.rec_finite_5", Net {atoms = {}, comb = ..., var = ...}),
     ("Enum.finite_5.case_finite_5", Net {atoms = {}, ...})},
   comb =
   Net {atoms = {}, comb = Net {atoms = {...}, ...}, var = Leaf [...]},
   var = Leaf []},
                                    var = Leaf []},
                               var = Leaf []},
                          var = Leaf []},
                     var = Leaf []},
                var = Leaf []},
           var =
           Leaf
            [{elhs = "%u. EX x y. u = (x, y) & ?P1 x y", extra = false, fo =
              false, lhs =
              Abs ("u", "?'a1 * ?'b1",
                Const ("HOL.Ex", "(?'a1 => bool) => bool") $
                  Abs ("x", "?'a1",
                    Const ("HOL.Ex", "...") $ Abs ("y", "...", ...))),
              name = "Product_Type.split_eta_SetCompr2", perm = false, thm =
              "%u. EX x y. u = (x, y) & ?P1 x y == %(x, y). ?P1 x y"},
             {elhs = "%u. EX x y. u = (x, y) & ?y (x, y)", extra = false,
              fo = true, lhs =
              Abs ("u", "?'a1 * ?'b1",
                Const ("HOL.Ex", "(?'a1 ... bool) => bool") $
                  Abs ("x", "?'a1",
                    Const ("HOL.Ex", "...") $ Abs ("y", ..., ...))),
              name = "Product_Type.split_eta_SetCompr", perm = false, thm =
              "%u. EX x y. u = (x, y) & ?y (x, y) == ?y"},
             {elhs = "%a. ?y ()", extra = false, fo = true, lhs =
              Abs ("", "unit",
                Var (("y", 0), "unit => ?'a1") $
                  Const ("Product_Type.Unity", "unit")),
              name = "Product_Type.unit_abs_eta_conv", perm = false, thm =
              "%a. ?y () == ?y"},
             {elhs = "%A f. Inf (f ` A)", extra = false, fo = true, lhs =
              Abs ("A", "?'a1 set",
                Abs ("f", "?'a1 => bool",
                  Const ("Complete_Lattices.Inf_class.Inf", "...") $
                    (Const ("...",
                            "(?'a1 => bool) => ?'a1 set => bool set") $
                      ... $ ...))),
              name = "Complete_Lattices.INF_bool_eq", perm = false, thm =
              "%A f. Inf (f ` A) == Ball"},
             {elhs = "%A f. Sup (f ` A)", extra = false, fo = true, lhs =
              Abs ("A", "?'a1 set",
                Abs ("f", "?'a1 ... bool",
                  Const ("...", ...) $ (... $ ... $ ...))),
              name = "Complete_Lattices.SUP_bool_eq", perm = false, thm =
              "%A f. Sup (f ... A) == Bex"}]}},
     {congs =
      ({((true, "HOL.If"),
          "?b == ?c ==> if ?b then ?x else ?y == if ?c then ?x else ?y"),
         ((true, "Set.Bex"),
           "[| ?A == ?B; !!x. x : ?B =simp=> ?P x == ?Q x |]
            ==> EX x:?A. ?P x == EX x:?B. ?Q x"),
         ((true, "Set.Ball"),
           "[| ?A == ?B; !!x. x : ?B =simp=> ?P x == ?Q x |]
            ==> ALL x:?A. ?P x == ALL x:?B. ?Q x"),
         ((true, "Set.image"),
           "[| ?M == ?N; !!x. x : ?N =simp=> ?f x == ?g x |]
            ==> ?f ` ?M == ?g ` ?N"),
         ((true, "HOL.implies"),
           "[| ?P == ?P'; ?P' ==> ?Q == ?Q' |]
            ==> ?P --> ?Q == ?P' --> ?Q'"),
         ((true, "HOL.NO_MATCH"),
           "NO_MATCH ?pat ?val == NO_MATCH ?pat ?val"),
         ((true, "HOL.ASSUMPTION"), "ASSUMPTION ?A == ASSUMPTION ?A"),
         ((true, "HOL.simp_implies"),
           "[| PROP ?P == PROP ?P'; PROP ?P' ==> PROP ?Q ... PROP ?Q' |]
            ==> (PROP ?P ... PROP ?Q) == (PROP ?P' ... PROP ?Q')"),
         ((true, "Nat.nat.case_nat"),
           "?M == ?M' ==>
            case ?M of ... ... ... | ... ... ... ==
            case ?M' of ... ... ... | ... ... ..."),
         ((true, "Num.num.case_num"),
           "?num ... ?num' ==>
            ... ... ... ... ... ... ... ... ...
            ... ... ... ... ... ... ... ..."),
         ((true, "List.successively"),
           "... ...... ... ... ==> ... ... ..."),
         ((true, "List.list.case_list"), "... ... ..."),
         ((true, "String.char.case_char"), "..."),
         ((true, "Sum_Type.sum.case_sum"), "..."),
         ((true, "Nitpick.word.case_word"), ...), ((true, "..."), ...),
         ...},
       [(true, "Power.power_class.power"),
        (true, "Phantom_Type.phantom.case_phantom"),
        (true, "Nitpick.word.case_word"),
        (true, "Nitpick.pair_box.case_pair_box"),
        (true, "Nitpick.fun_box.case_fun_box"),
        (true, "Record.tuple_isomorphism.case_tuple_isomorphism"),
        (true, "Extraction.sumbool.case_sumbool"),
        (true, "Quickcheck_Exhaustive.three_valued.case_three_valued"),
        (true, "Quickcheck_Exhaustive.unknown.case_unknown"),
        (true, "Quickcheck_Narrowing.cfun.case_cfun"),
        (true, "Quickcheck_Narrowing.ffun.case_ffun"),
        (true, "Quickcheck_Narrowing.property.case_property"),
        (true, "Quickcheck_Narrowing.narrowing_cons.case_narrowing_cons"),
        (true, "Quickcheck_Narrowing.narrowing_term.case_narrowing_term"),
        (true, "Quickcheck_Narrowing.narrowing_type.case_narrowing_type"),
        (true, "..."), ...]),
      loop_tacs =
      [("split asm HOL.If :: (HOL.bool, (_, (_, _)fun)fun)fun", fn),
       ("split asm Rings.zero_neq_one_class.of_bool :: (HOL.bool, _)fun",
        fn),
       ("split Rings.zero_neq_one_class.of_bool :: (HOL.bool, _)fun", fn),
       ("split HOL.If :: (HOL.bool, (_, (_, _)fun)fun)fun", fn)],
      mk_rews =
      {mk = fn, mk_cong = fn, mk_eq_True = fn, mk_sym = fn, reorient = fn},
      procs =
      Net {atoms = {}, comb =
           Net {atoms =
                {("HOL.Ex",
                   Net {atoms = {}, comb = Leaf [], var =
                        Leaf
                         [Proc
                           {lhs =
                            Const ("HOL.Ex", "(...) ... bool") $
                              Abs ("x", "?'a",
                                Var ((...), "?'a => bool") $ ...),
                            name = "HOL.defined_Ex", proc = fn, stamp =
                            Stamp 91198}]}),
                  ("HOL.All",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [Proc
                            {lhs =
                             Const ("HOL.All", "... ... ...") $
                               Abs ("x", "...", ... $ ...),
                             name = "HOL.defined_All", proc = fn, stamp =
                             Stamp 91244}]}),
                  ("HOL.Not",
                    Net {atoms = {}, comb =
                         Net {atoms = {}, comb =
                              Net {atoms =
                                   {("Orderings.ord_class.less",
Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}})},
                                   comb = Leaf [], var = Leaf []},
                              var = Leaf []},
                         var = Leaf []}),
                  ("Nat.Suc",
                    Net {atoms = {}, comb =
                         Net {atoms = {}, comb =
                              Net {atoms =
                                   {("Groups.plus_class.plus",
Net {atoms = {}, comb = ..., var = ...})},
                                   comb = Leaf [], var = Leaf []},
                              var = Leaf []},
                         var = Leaf []}),
                  ("Pure.all",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [Proc
                            {lhs =
                             Const ("...", ...) $ Abs ("...", "?'a", ...),
                             name = "HOL.defined_all", proc = fn, stamp =
                             Stamp 91290}]}),
                  ("Set.Collect",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [Proc
                            {lhs =
                             Const ("...", "(?'a => bool) => ?'a set") $
                               ...,
                             name = "Product_Type.Collect_mem", proc = fn,
                             stamp = Stamp 616364},
                           Proc
                            {lhs = ... $ ..., name = "Set.defined_Collect",
                             proc = fn, stamp = Stamp 299868}]}),
                  ("List.list.set",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [Proc
                            {lhs = ... $ ..., name =
                             "List.list_to_set_comprehension", proc = fn,
                             stamp = Stamp 2625594}]}),
                  ("Product_Type.prod.case_prod",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf [Proc {lhs = ..., name = "...", ...}]})},
                comb =
                Net {atoms =
                     {("HOL.eq",
                        Net {atoms =
                             {("Groups.one_class.one",
                                Net {atoms = {}, comb = Leaf [], var =
                                     Leaf
[Proc
  {lhs = Const ("...", "?'a => ?'a => bool") $ ... $ ..., name =
   "Groups.reorient_one", proc = fn, stamp = Stamp 171260}]}),
                               ("Groups.zero_class.zero",
                                 Net {atoms = {}, comb = Leaf [], var =
Leaf
 [Proc
   {lhs = ... $ ... $ ..., name = "Groups.reorient_zero", proc = fn, stamp =
    Stamp 171216}]})},
                             comb =
                             Net {atoms =
                                  {("Nat.Suc",
                                     Net
{atoms = {}, comb = Leaf [], var =
 Net {atoms = {}, comb = Leaf [...], var = Leaf [...]}}),
                                    ("Num.numeral_class.numeral",
Net {atoms = {}, comb = Leaf [], var =
     Net {atoms = {}, comb = ..., var = ...}}),
                                    ("Groups.uminus_class.uminus",
Net {atoms = {}, comb = Net {atoms = {...}, ...}, var =
     Net {atoms = {}, ...}})},
                                  comb =
                                  Net {atoms =
 {("Groups.plus_class.plus",
    Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}}),
   ("Groups.minus_class.minus", Net {atoms = {}, comb = ..., var = ...}),
   ("Groups.times_class.times", Net {atoms = {}, ...})},
 comb = Leaf [], var = Leaf []},
                                  var = Leaf []},
                             var =
                             Net {atoms = {}, comb =
                                  Net {atoms =
 {("Nat.Suc", Net {atoms = {}, comb = Leaf [...], var = Leaf [...]}),
   ("Groups.uminus_class.uminus", Net {atoms = {}, comb = ..., var = ...})},
 comb =
 Net {atoms =
      {("Groups.plus_class.plus", Net {atoms = {}, ...}),
        ("Groups.minus_class.minus", ...), ...},
      comb = Leaf [], var = Leaf []},
 var = Leaf []},
                                  var =
                                  Leaf
                                   [Proc
                                     {lhs =
Const ("...", ...) $ Var ((...), "?'a") $ ..., name = "record_eq", proc =
fn, stamp = Stamp 4153886},
                                    Proc
                                     {lhs =
Const ("...", "?'a list => ?'a list => bool") $ ... $ ..., name =
"List.list_neq", proc = fn, stamp = Stamp 2645062},
                                    Proc
                                     {lhs = ... $ ... $ ..., name =
"List.list_eq", proc = fn, stamp = Stamp 2633172},
                                    Proc {lhs = ..., name = "...", ...},
                                    Proc {lhs = ..., ...}, ...]}}),
                       ("HOL.Let",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {}, comb = Leaf [], var =
                                   Leaf
                                    [Proc
{lhs = Const ("...", "?'a => (?'a => ?'b) => ?'b") $ ... $ ..., name =
 "HOL.let_simp", proc = fn, stamp = Stamp 91526}]}}),
                       ("Set.Bex",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {}, comb = Leaf [], var =
                                   Leaf
                                    [Proc
{lhs = ... $ ... $ ..., name = "Set.defined_Bex", proc = fn, stamp =
 Stamp 303020}]}}),
                       ("Pure.imp",
                         Net {atoms = {}, comb =
                              Net {atoms =
                                   {("HOL.Trueprop",
Net {atoms = {...}, comb = ..., var = ...})},
                                   comb = Leaf [], var = Leaf []},
                              var = Leaf []}),
                       ("Set.Ball",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {}, comb = Leaf [], var =
                                   Leaf [Proc {lhs = ..., ...}]}}),
                       ("HOL.NO_MATCH",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {}, comb = Leaf [...], var =
                                   Leaf [...]}}),
                       ("Rings.dvd_class.dvd",
                         Net {atoms = {}, comb =
                              Net {atoms = {}, comb = ..., var = ...}, var =
                              Net {atoms = {}, comb = ..., var = ...}}),
                       ("Groups.plus_class.plus",
                         Net {atoms = {}, comb = Leaf [...], var =
                              Net {atoms = {}, ...}}),
                       ("Lattices.inf_class.inf",
                         Net {atoms = {}, comb = ..., var = ...}),
                       ("Lattices.sup_class.sup", Net {atoms = {}, ...}),
                       ("Groups.minus_class.minus", ...), ...},
                     comb =
                     Net {atoms =
                          {("Fun.fun_upd",
                             Net {atoms = {}, comb =
                                  Net {atoms = {}, comb =
 Net {atoms = {}, comb = Net {atoms = {...}, comb = ..., var = ...}, var =
      Leaf []},
 var = Leaf []},
                                  var = Leaf []})},
                          comb = Leaf [], var = Leaf []},
                     var = Leaf []},
                var = Leaf []},
           var =
           Leaf
            [Proc
              {lhs = Var (("x", 0), "?'a"), name = "record", proc = fn,
               stamp = Stamp 4153844},
             Proc
              {lhs = Var (("x", 0), "?'a"), name = "record_upd", proc = fn,
               stamp = Stamp 4153854},
             Proc
              {lhs = Var (("x", 0), "unit"), name = "Product_Type.unit_eq",
               proc = fn, stamp = Stamp 562196}]},
      solvers =
      ([Solver {id = Stamp 1038750, name = "Rtranclp", solver = fn},
        Solver {id = Stamp 1038748, name = "Tranclp", solver = fn},
        Solver {id = Stamp 1038746, name = "Rtrancl", solver = fn},
        Solver {id = Stamp 1038744, name = "Trancl", solver = fn},
        Solver {id = Stamp 781564, name = "lin_arith", solver = fn},
        Solver {id = Stamp 132670, name = "Transitivity", solver = fn},
        Solver {id = Stamp 102528, name = "ASSUMPTION", solver = fn},
        Solver {id = Stamp 90936, name = "HOL unsafe", solver = fn}],
       [Solver {id = Stamp 90938, name = "HOL safe", solver = fn}]),
      subgoal_tac = fn, term_ord = fn}):
   simpset
val unat_arith_tacs = fn: Proof.context -> tactic list
val unat_arith_tac = fn: Proof.context -> int -> tactic
val uint_arith_simpset =
   Simpset
    ({depth = (0, ref false), prems = [], rules =
      Net {atoms =
           {("Int.Pos",
              Leaf
               [{elhs = "Int.Pos", extra = false, fo = true, lhs =
                 Const ("Int.Pos", "num => int"), name = "Int.Pos_def",
                 perm = false, thm = "Int.Pos == numeral"}]),
             ("Word.Word",
               Leaf
                [{elhs = "Word.Word", extra = false, fo = true, lhs =
                  Const ("Word.Word", "int => ?'a1 word"), name =
                  "Word.Word_eq_word_of_int", perm = false, thm =
                  "Word.Word == word_of_int"}]),
             ("Word.cast",
               Leaf
                [{elhs = "Word.cast", extra = false, fo = true, lhs =
                  Const ("Word.cast", "?'a1 word => ?'b1 word"), name =
                  "??.unknown", perm = false, thm = "Word.cast == ucast"}]),
             ("Word.of_int",
               Leaf
                [{elhs = "Word.of_int", extra = false, fo = true, lhs =
                  Const ("Word.of_int", "int => ?'a1 word"), name =
                  "??.unknown", perm = false, thm =
                  "Word.of_int == word_of_int"}]),
             ("Word.of_nat",
               Leaf
                [{elhs = "Word.of_nat", extra = false, fo = true, lhs =
                  Const ("Word.of_nat", "nat => ?'a1 word"), name =
                  "??.unknown", perm = false, thm =
                  "Word.of_nat == word_of_nat"}]),
             ("Word.the_int",
               Leaf
                [{elhs = "Word.the_int", extra = false, fo = true, lhs =
                  Const ("Word.the_int", "?'a1 word => int"), name =
                  "??.unknown", perm = false, thm =
                  "Word.the_int == uint"}]),
             ("Word.the_nat",
               Leaf
                [{elhs = "Word.the_nat", extra = false, fo = true, lhs =
                  Const ("Word.the_nat", "?'a1 word ... nat"), name =
                  "??.unknown", perm = false, thm =
                  "Word.the_nat == unat"}]),
             ("String.Literal'",
               Leaf
                [{elhs = "String.Literal'", extra = false, fo = true, lhs =
                  Const ("String.Literal'", "... ... ..."), name =
                  "String.Literal'_def", perm = false, thm =
                  "String.Literal' ... String.Literal"}]),
             ("Code_Numeral.Pos",
               Leaf
                [{elhs = "Code_Numeral.Pos", extra = false, fo = true, lhs =
                  Const ("Code_Numeral.Pos", "..."), name =
                  "Code_Numeral.Pos_def", perm = false, thm =
                  "... ... ..."}]),
             ("Word.signed_cast",
               Leaf
                [{elhs = "Word.signed_cast", extra = false, fo = true, lhs =
                  Const ("Word.signed_cast", "..."), name = "??.unknown",
                  ...}]),
             ("Word.the_signed_int",
               Leaf
                [{elhs = "...", extra = false, fo = true, lhs =
                  Const ("...", ...), ...}]),
             ("Groups.abs_class.abs",
               Leaf [{elhs = "...", extra = false, fo = true, ...}]),
             ("Groups.one_class.one",
               Leaf [{elhs = ..., extra = false, ...}, ...]),
             ("Groups.sgn_class.sgn", Leaf [...]),
             ("Code_Numeral.negative", ...), ...},
           comb =
           Net {atoms =
                {("Fun.id",
                   Net {atoms = {}, comb = Leaf [], var =
                        Leaf
                         [{elhs = "id ?y", extra = false, fo = true, lhs =
                           Const ("Fun.id", "?'a => ?'a") $
                             Var (("y", 0), "?'a"),
                           name = "Fun.id_apply", perm = false, thm =
                           "id ?y == ?y"}]}),
                  ("HOL.Ex",
                    Net {atoms = {}, comb =
                         Net {atoms =
                              {("HOL.eq",
                                 Net {atoms = {}, comb = Leaf [], var =
Leaf
 [{elhs = "...", extra = false, fo = true, lhs =
   Const ("...", "(?'d1 => bool) => bool") $ ..., ...}]})},
                              comb = Leaf [], var = Leaf []},
                         var =
                         Leaf
                          [{elhs = "Ex ?P1", extra = false, fo = true, lhs =
                            Const ("HOL.Ex", "(...) ... bool") $
                              Abs ("x", "1",
                                Var ((...), "1 => bool") $ ...),
                            name = "Numeral_Type.ex_1", perm = false, thm =
                            "EX x. ?P1 x == ?P1 1"},
                           {elhs = "Ex ?P1", extra = false, fo = true, lhs =
                            Const ("HOL.Ex", "... ... ...") $
                              Abs ("x", "...", ... $ ...),
                            name = "Product_Type.split_paired_Ex", perm =
                            false, thm =
                            "... x... ... ... == ... a b... ... ..."},
                           {elhs = "EX x y. ?p1 ... ......... ......",
                            extra = false, fo = true, lhs =
                            Const ("HOL.Ex", "...") $ Abs ("x", "...", ...),
                            name = "Product_Type.surj_pair", perm = false,
                            thm = "... ... ...... ... ... True"},
                           {elhs = "... x... ... ... ...", extra = false,
                            fo = false, lhs =
                            Const ("HOL.Ex", "...") $ Abs ("x", ..., ...),
                            name = "Set.ex_image_cong_iff_2", perm = false,
                            thm = "... ... ..."},
                           {elhs = "... ...... ...", extra = false, fo =
                            true, lhs =
                            Const ("...", ...) $ Abs ("...", "?'a1", ...),
                            name = "Set.ex_image_cong_iff_1", ...},
                           {elhs = "...", extra = false, fo = false, lhs =
                            Const ("...", "(?'d1 => bool) => bool") $ ...,
                            ...},
                           {elhs = "...", extra = false, fo = false, ...},
                           {elhs = ..., extra = false, ...}, ...]}),
                  ("HOL.All",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [{elhs = "All ?P1", extra = false, fo = true,
                            lhs =
                            Const ("HOL.All", "... ... ...") $
                              Abs ("i", "...", ... $ ...),
                            name = "Numeral_Type.forall_1", perm = false,
                            thm = "... i... ... ... == ?P1 ..."},
                           {elhs = "ALL y. ?x1 ... ... ...", extra = false,
                            fo = true, lhs =
                            Const ("HOL.All", "...") $
                              Abs ("y", "...", ...),
                            name = "Option.not_Some_eq", perm = false, thm =
                            "... ...... ... ... ... ... ..."},
                           {elhs = "All ?P1", extra = false, fo = true,
                            lhs =
                            Const ("HOL.All", "...") $ Abs ("x", ..., ...),
                            name = "Product_Type.split_paired_All", perm =
                            false, thm = "... ... ..."},
                           {elhs = "... ...... ...", extra = false, fo =
                            true, lhs =
                            Const ("...", ...) $ Abs ("...", "?'a1", ...),
                            name = "Set.all_not_in_conv", ...},
                           {elhs = "...", extra = false, fo = true, lhs =
                            Const ("...", "(?'d1 => bool) => bool") $ ...,
                            ...},
                           {elhs = "...", extra = false, fo = true, ...},
                           {elhs = ..., extra = false, ...}, ...]}),
                  ("HOL.Ex1",
                    Net {atoms = {}, comb =
                         Net {atoms =
                              {("HOL.eq",
                                 Net {atoms = {}, comb = Leaf [], var =
Leaf [{elhs = ..., extra = false, ...}]})},
                              comb = Leaf [], var = Leaf []},
                         var =
                         Leaf
                          [{elhs = "EX! x. x ... ?t1", extra = false, fo =
                            true, lhs =
                            Const ("HOL.Ex1", "...") $
                              Abs ("x", "...", ...),
                            name = "HOL.ex1_eq_1", perm = false, thm =
                            "... ...... ... ... True"}]}),
                  ("HOL.Not",
                    Net {atoms =
                         {("HOL.True",
                            Leaf
                             [{elhs = "... True", extra = false, fo = true,
                               lhs =
                               Const ("...", ...) $ Const ("...", "bool"),
                               name = "HOL.simp_thms_7", ...}]),
                           ("HOL.False",
                             Leaf
                              [{elhs = "... ...", extra = false, fo = true,
                                lhs = Const ("...", "bool => bool") $ ...,
                                ...}])},
                         comb =
                         Net {atoms =
                              {("HOL.Ex",
                                 Net {atoms = {}, comb = Leaf [...], var =
Leaf [...]}),
                                ("HOL.All",
                                  Net {atoms = {}, comb = ..., var = ...}),
                                ("HOL.Not", Net {atoms = {}, ...}),
                                ("Finite_Set.finite", ...)},
                              comb =
                              Net {atoms =
                                   {("HOL.eq", Net {atoms = {...}, ...}),
                                     ("Set.Bex", ...), ...},
                                   comb = Leaf [], var = Leaf []},
                              var = Leaf []},
                         var = Leaf []}),
                  ("HOL.The",
                    Net {atoms = {}, comb =
                         Net {atoms =
                              {("HOL.eq",
                                 Net {atoms = {}, comb = ..., var = ...}),
                                ("Product_Type.prod.case_prod",
                                  Net {atoms = {}, ...})},
                              comb = Leaf [], var = Leaf []},
                         var =
                         Leaf
                          [{elhs = "... ...... ...", extra = false, fo =
                            true, lhs =
                            Const ("...", ...) $ Abs ("...", "?'a", ...),
                            name = "HOL.the_eq_trivial", ...}]}),
                  ("Int.Neg",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [{elhs = "...", extra = false, fo = true, lhs =
                            Const ("...", "num => int") $ ..., ...}]}),
                  ("Int.dup",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [{elhs = "...", extra = false, fo = true, ...}]}),
                  ("Int.nat",
                    Net {atoms =
                         {("Groups.one_class.one", Leaf [...]),
                           ("Groups.zero_class.zero", ...)},
                         comb = Net {atoms = {...}, comb = ..., var = ...},
                         var = Leaf [{elhs = ..., extra = false, ...}]}),
                  ("Map.dom",
                    Net {atoms = {}, comb = Net {atoms = {...}, ...}, var =
                         Leaf [...]}),
                  ("Map.ran", Net {atoms = {}, comb = ..., var = ...}),
                  ("Nat.Suc", Net {atoms = {...}, ...}), ("Num.inc", ...),
                  ...},
                comb =
                Net {atoms =
                     {("HOL.eq",
                        Net {atoms =
                             {("HOL.True",
                                Net {atoms =
                                     {("HOL.False",
  Leaf
   [{elhs = "...", extra = false, fo = true, lhs =
     Const ("...", "bool => bool => bool") $ ... $ ..., ...}])},
                                     comb = Leaf [], var =
                                     Leaf
[{elhs = "... ... ...", extra = false, fo = true, lhs =
  Const ("...", ...) $ Const ("...", "bool") $ ..., name =
  "HOL.simp_thms_11", ...}]}),
                               ("HOL.False",
                                 Net {atoms =
{("HOL.True", Leaf [{elhs = "...", extra = false, fo = true, ...}])}, comb =
Leaf [], var =
Leaf
 [{elhs = "...", extra = false, fo = true, lhs =
   Const ("...", "bool => bool => bool") $ ... $ ..., ...}]}),
                               ("Num.num.One",
                                 Net {atoms = {}, comb =
Net {atoms = {("Num.num.Bit0", ...), ...}, comb = Leaf [...], var =
     Leaf [...]},
var = Leaf []}),
                               ("Filter.at_bot",
                                 Net {atoms =
{("Orderings.bot_class.bot", Leaf [...])}, comb = Leaf [], var = Leaf []}),
                               ("Filter.at_top",
                                 Net {atoms =
{("Orderings.bot_class.bot", ...)}, comb = Leaf [...], var = Leaf [...]}),
                               ("List.list.Nil",
                                 Net {atoms = {}, comb = ..., var = ...}),
                               ("Filter.cofinite",
                                 Net {atoms = {...}, ...}),
                               ("Option.option.None", ...), ...},
                             comb =
                             Net {atoms =
                                  {("HOL.Not",
                                     Net
{atoms = {}, comb = Leaf [], var =
 Net {atoms = {}, comb = Net {atoms = {...}, ...}, var = Leaf [...]}}),
                                    ("Int.nat",
Net {atoms = {}, comb = Leaf [], var =
     Net {atoms = {...}, comb = ..., var = ...}}),
                                    ("Map.dom",
Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {...}, ...}}),
                                    ("Nat.Suc",
Net {atoms = {...}, comb = ..., var = ...}),
                                    ("Set.Pow", Net {atoms = {}, ...}),
                                    ("List.rev", ...), ...},
                                  comb =
                                  Net {atoms =
 {("List.upt",
    Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}}),
   ("List.zip", Net {atoms = {}, comb = ..., var = ...}),
   ("List.drop", Net {atoms = {}, ...}), ("List.take", ...), ...},
 comb =
 Net {atoms =
      {("Fun.fun_upd", Net {atoms = {}, ...}), ("Map.map_add", ...), ...},
      comb = Net {atoms = {...}, comb = ..., var = ...}, var = Leaf []},
 var = Leaf []},
                                  var = Leaf []},
                             var =
                             Net {atoms =
                                  {("HOL.True",
                                     Leaf
[{elhs = "... ... ...", extra = false, fo = true, lhs =
  Const ("...", ...) $ Var ((...), "bool") $ ..., name = "HOL.simp_thms_12",
  ...}]),
                                    ("HOL.False",
Leaf
 [{elhs = "...", extra = false, fo = true, lhs =
   Const ("...", "bool => bool => bool") $ ... $ ..., ...}]),
                                    ("Groups.one_class.one",
Leaf [{elhs = "...", extra = false, fo = true, ...}])},
                                  comb =
                                  Net {atoms =
 {("HOL.Not", Net {atoms = {}, comb = Leaf [...], var = Leaf [...]}),
   ("Map.map_of", Net {atoms = {}, comb = ..., var = ...}),
   ("Groups.uminus_class.uminus", Net {atoms = {}, ...})},
 comb =
 Net {atoms =
      {("List.append", Net {atoms = {}, ...}), ("Map.map_add", ...), ...},
      comb = Leaf [], var = Leaf []},
 var = Leaf []},
                                  var =
                                  Leaf
                                   [{elhs = "?a1 ... ?b1", extra = false,
                                     fo = true, lhs =
                                     Const ("HOL.eq", "...") $
 Var (("...", 1), ...) $ Var ((...), "?'a1 word"),
                                     name = "local.uint_arith_simps_3",
                                     perm = false, thm = "... ... ..."},
                                    {elhs = "... ... ...", extra = false,
                                     fo = true, lhs =
                                     Const ("...", ...) $
 Var ((...), "?'a1") $ ...,
                                     name = "HOL.simp_thms_6", ...}]}}),
                       ("HOL.Let",
                         Net {atoms =
                              {("Groups.one_class.one",
                                 Net {atoms = {}, comb = Leaf [], var =
Leaf
 [{elhs = "...", extra = false, fo = true, lhs =
   Const ("...", "?'b1 => (?'b1 => ?'a) => ?'a") $ ... $ ..., ...}]}),
                                ("Groups.zero_class.zero",
                                  Net {atoms = {}, comb = Leaf [], var =
 Leaf [{elhs = "...", extra = false, fo = true, ...}]})},
                              comb =
                              Net {atoms =
                                   {("Nat.Suc",
Net {atoms = {}, comb = Leaf [], var =
     Net {atoms = {}, comb = ..., var = ...}}),
                                     ("Num.numeral_class.numeral",
 Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}}),
                                     ("Groups.uminus_class.uminus",
 Net {atoms = {}, comb = ..., var = ...})},
                                   comb = Leaf [], var = Leaf []},
                              var = Leaf []}),
                       ("Int.sub",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {}, comb = Leaf [], var =
                                   Leaf
                                    [{elhs = "...", extra = false, fo =
true, lhs = Const ("...", "num => num => int") $ ... $ ..., ...}]}}),
                       ("Num.pow",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms =
                                   {("Num.num.One",
Leaf [{elhs = ..., extra = false, ...}])},
                                   comb =
                                   Net {atoms =
  {("Num.num.Bit0", ...), ...}, comb = Leaf [...], var = Leaf [...]},
                                   var = Leaf []}}),
                       ("Set.Bex",
                         Net {atoms =
                              {("Orderings.bot_class.bot",
                                 Net {atoms = {}, comb = Leaf [...], var =
Leaf [...]}),
                                ("Orderings.top_class.top",
                                  Net {atoms = {}, comb = ..., var = ...})},
                              comb =
                              Net {atoms =
                                   {("Set.Collect", Net {atoms = {}, ...}),
                                     ("List.list.set", ...), ...},
                                   comb =
                                   Net {atoms = {...}, comb = ..., var =
  ...},
                                   var = Leaf []},
                              var =
                              Net {atoms = {}, comb =
                                   Net {atoms = {...}, comb = ..., var =
  ...},
                                   var =
                                   Leaf
                                    [{elhs = ..., extra = false, ...},
                                     ...]}}),
                       ("Fun.comp",
                         Net {atoms =
                              {("Fun.id",
                                 Net {atoms = {}, comb = ..., var = ...}),
                                ("Option.option.the",
                                  Net {atoms = {...}, ...}),
                                ("Product_Type.prod.fst", ...), ...},
                              comb =
                              Net {atoms = {("List.list.map", ...), ...},
                                   comb = Net {atoms = {...}, ...}, var =
                                   Leaf [...]},
                              var =
                              Net {atoms = {("Fun.id", ...)}, comb =
                                   Leaf [...], var = Leaf [...]}}),
                       ("GCD.bezw",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {...}, comb = ..., var = ...}}),
                       ("HOL.conj",
                         Net {atoms = {("HOL.True", ...), ...}, comb =
                              Net {atoms = {...}, ...}, var =
                              Net {atoms = {...}, ...}}),
                       ("HOL.disj",
                         Net {atoms = {...}, comb = ..., var = ...}),
                       ("List.nth", Net {atoms = {}, ...}),
                       ("List.upt", ...), ...},
                     comb =
                     Net {atoms =
                          {("HOL.If",
                             Net {atoms =
                                  {("HOL.True",
                                     Net
{atoms = {}, comb = Leaf [], var =
 Net {atoms = {}, comb = Leaf [...], var = Leaf [...]}}),
                                    ("HOL.False",
Net {atoms = {}, comb = Leaf [], var =
     Net {atoms = {}, comb = ..., var = ...}})},
                                  comb =
                                  Net {atoms = {}, comb =
 Net {atoms = {("HOL.eq", Net {atoms = {}, ...})}, comb = Leaf [], var =
      Leaf []},
 var = Leaf []},
                                  var =
                                  Net {atoms = {}, comb = Leaf [], var =
 Net {atoms = {}, comb = Leaf [], var =
      Leaf [{elhs = ..., extra = false, ...}]}}}),
                            ("Fun.comp",
                              Net {atoms = {}, comb = Leaf [], var =
                                   Net {atoms = {}, comb = Leaf [], var =
  Net {atoms = {}, comb = Leaf [...], var = Leaf [...]}}}),
                            ("Fun.fcomp",
                              Net {atoms = {}, comb = Leaf [], var =
                                   Net {atoms = {}, comb = Leaf [], var =
  Net {atoms = {}, comb = ..., var = ...}}}),
                            ("List.foldl",
                              Net {atoms = {}, comb = Leaf [], var =
                                   Net {atoms = {}, comb = Leaf [...], var =
  Net {atoms = {...}, ...}}}),
                            ("List.foldr",
                              Net {atoms = {}, comb = Leaf [], var =
                                   Net {atoms = {}, comb = ..., var =
  ...}}),
                            ("Nat.compow",
                              Net {atoms =
                                   {("Groups.zero_class.zero", ...)}, comb =
                                   Leaf [...], var = Leaf [...]}),
                            ("Fun.fun_upd",
                              Net {atoms = {}, comb = ..., var = ...}),
                            ("Map.map_add", Net {atoms = {}, ...}),
                            ("Fun.bij_betw", ...), ...},
                          comb =
                          Net {atoms =
                               {("Fun.fun_upd",
                                  Net {atoms = {}, comb = Leaf [], var =
 Net {atoms = {}, comb = Leaf [], var =
      Net {atoms = {}, comb = ..., var = ...}}}),
                                 ("Fun.map_fun",
                                   Net {atoms = {}, comb = Leaf [], var =
  Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}}}),
                                 ("Map.map_upds",
                                   Net {atoms = {}, comb = Leaf [], var =
  Net {atoms = {}, comb = ..., var = ...}}),
                                 ("BNF_Def.rel_sum",
                                   Net {atoms = {}, comb = Leaf [...], var =
  Net {atoms = {}, ...}}),
                                 ("Fun.override_on",
                                   Net {atoms = {}, comb = ..., var = ...}),
                                 ("Num.num.rec_num", Net {atoms = {}, ...}),
                                 ("Num.num.case_num", ...), ...},
                               comb =
                               Net {atoms =
                                    {("Enum.finite_4.rec_finite_4",
 Net {atoms = {}, comb = Leaf [], var =
      Net {atoms = {}, comb = ..., var = ...}}),
("Enum.finite_4.case_finite_4",
  Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}})},
                                    comb =
                                    Net {atoms =
   {("Enum.finite_5.rec_finite_5", Net {atoms = {}, comb = ..., var = ...}),
     ("Enum.finite_5.case_finite_5", Net {atoms = {}, ...})},
   comb =
   Net {atoms = {}, comb = Net {atoms = {...}, ...}, var = Leaf [...]},
   var = Leaf []},
                                    var = Leaf []},
                               var = Leaf []},
                          var = Leaf []},
                     var = Leaf []},
                var = Leaf []},
           var =
           Leaf
            [{elhs = "%u. EX x y. u = (x, y) & ?P1 x y", extra = false, fo =
              false, lhs =
              Abs ("u", "?'a1 * ?'b1",
                Const ("HOL.Ex", "(?'a1 => bool) => bool") $
                  Abs ("x", "?'a1",
                    Const ("HOL.Ex", "...") $ Abs ("y", "...", ...))),
              name = "Product_Type.split_eta_SetCompr2", perm = false, thm =
              "%u. EX x y. u = (x, y) & ?P1 x y == %(x, y). ?P1 x y"},
             {elhs = "%u. EX x y. u = (x, y) & ?y (x, y)", extra = false,
              fo = true, lhs =
              Abs ("u", "?'a1 * ?'b1",
                Const ("HOL.Ex", "(?'a1 ... bool) => bool") $
                  Abs ("x", "?'a1",
                    Const ("HOL.Ex", "...") $ Abs ("y", ..., ...))),
              name = "Product_Type.split_eta_SetCompr", perm = false, thm =
              "%u. EX x y. u = (x, y) & ?y (x, y) == ?y"},
             {elhs = "%a. ?y ()", extra = false, fo = true, lhs =
              Abs ("", "unit",
                Var (("y", 0), "unit => ?'a1") $
                  Const ("Product_Type.Unity", "unit")),
              name = "Product_Type.unit_abs_eta_conv", perm = false, thm =
              "%a. ?y () == ?y"},
             {elhs = "%A f. Inf (f ` A)", extra = false, fo = true, lhs =
              Abs ("A", "?'a1 set",
                Abs ("f", "?'a1 => bool",
                  Const ("Complete_Lattices.Inf_class.Inf", "...") $
                    (Const ("...",
                            "(?'a1 => bool) => ?'a1 set => bool set") $
                      ... $ ...))),
              name = "Complete_Lattices.INF_bool_eq", perm = false, thm =
              "%A f. Inf (f ` A) == Ball"},
             {elhs = "%A f. Sup (f ` A)", extra = false, fo = true, lhs =
              Abs ("A", "?'a1 set",
                Abs ("f", "?'a1 ... bool",
                  Const ("...", ...) $ (... $ ... $ ...))),
              name = "Complete_Lattices.SUP_bool_eq", perm = false, thm =
              "%A f. Sup (f ... A) == Bex"}]}},
     {congs =
      ({((true, "HOL.If"),
          "?b == ?c ==> if ?b then ?x else ?y == if ?c then ?x else ?y"),
         ((true, "Set.Bex"),
           "[| ?A == ?B; !!x. x : ?B =simp=> ?P x == ?Q x |]
            ==> EX x:?A. ?P x == EX x:?B. ?Q x"),
         ((true, "Set.Ball"),
           "[| ?A == ?B; !!x. x : ?B =simp=> ?P x == ?Q x |]
            ==> ALL x:?A. ?P x == ALL x:?B. ?Q x"),
         ((true, "Set.image"),
           "[| ?M == ?N; !!x. x : ?N =simp=> ?f x == ?g x |]
            ==> ?f ` ?M == ?g ` ?N"),
         ((true, "HOL.implies"),
           "[| ?P == ?P'; ?P' ==> ?Q == ?Q' |]
            ==> ?P --> ?Q == ?P' --> ?Q'"),
         ((true, "HOL.NO_MATCH"),
           "NO_MATCH ?pat ?val == NO_MATCH ?pat ?val"),
         ((true, "HOL.ASSUMPTION"), "ASSUMPTION ?A == ASSUMPTION ?A"),
         ((true, "HOL.simp_implies"),
           "[| PROP ?P == PROP ?P'; PROP ?P' ==> PROP ?Q ... PROP ?Q' |]
            ==> (PROP ?P ... PROP ?Q) == (PROP ?P' ... PROP ?Q')"),
         ((true, "Nat.nat.case_nat"),
           "?M == ?M' ==>
            case ?M of ... ... ... | ... ... ... ==
            case ?M' of ... ... ... | ... ... ..."),
         ((true, "Num.num.case_num"),
           "?num ... ?num' ==>
            ... ... ... ... ... ... ... ... ...
            ... ... ... ... ... ... ... ..."),
         ((true, "List.successively"),
           "... ...... ... ... ==> ... ... ..."),
         ((true, "List.list.case_list"), "... ... ..."),
         ((true, "String.char.case_char"), "..."),
         ((true, "Sum_Type.sum.case_sum"), "..."),
         ((true, "Nitpick.word.case_word"), ...), ((true, "..."), ...),
         ...},
       [(true, "Power.power_class.power"),
        (true, "Phantom_Type.phantom.case_phantom"),
        (true, "Nitpick.word.case_word"),
        (true, "Nitpick.pair_box.case_pair_box"),
        (true, "Nitpick.fun_box.case_fun_box"),
        (true, "Record.tuple_isomorphism.case_tuple_isomorphism"),
        (true, "Extraction.sumbool.case_sumbool"),
        (true, "Quickcheck_Exhaustive.three_valued.case_three_valued"),
        (true, "Quickcheck_Exhaustive.unknown.case_unknown"),
        (true, "Quickcheck_Narrowing.cfun.case_cfun"),
        (true, "Quickcheck_Narrowing.ffun.case_ffun"),
        (true, "Quickcheck_Narrowing.property.case_property"),
        (true, "Quickcheck_Narrowing.narrowing_cons.case_narrowing_cons"),
        (true, "Quickcheck_Narrowing.narrowing_term.case_narrowing_term"),
        (true, "Quickcheck_Narrowing.narrowing_type.case_narrowing_type"),
        (true, "..."), ...]),
      loop_tacs =
      [("split asm HOL.If :: (HOL.bool, (_, (_, _)fun)fun)fun", fn),
       ("split asm Rings.zero_neq_one_class.of_bool :: (HOL.bool, _)fun",
        fn),
       ("split Rings.zero_neq_one_class.of_bool :: (HOL.bool, _)fun", fn),
       ("split HOL.If :: (HOL.bool, (_, (_, _)fun)fun)fun", fn)],
      mk_rews =
      {mk = fn, mk_cong = fn, mk_eq_True = fn, mk_sym = fn, reorient = fn},
      procs =
      Net {atoms = {}, comb =
           Net {atoms =
                {("HOL.Ex",
                   Net {atoms = {}, comb = Leaf [], var =
                        Leaf
                         [Proc
                           {lhs =
                            Const ("HOL.Ex", "(...) ... bool") $
                              Abs ("x", "?'a",
                                Var ((...), "?'a => bool") $ ...),
                            name = "HOL.defined_Ex", proc = fn, stamp =
                            Stamp 91198}]}),
                  ("HOL.All",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [Proc
                            {lhs =
                             Const ("HOL.All", "... ... ...") $
                               Abs ("x", "...", ... $ ...),
                             name = "HOL.defined_All", proc = fn, stamp =
                             Stamp 91244}]}),
                  ("HOL.Not",
                    Net {atoms = {}, comb =
                         Net {atoms = {}, comb =
                              Net {atoms =
                                   {("Orderings.ord_class.less",
Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}})},
                                   comb = Leaf [], var = Leaf []},
                              var = Leaf []},
                         var = Leaf []}),
                  ("Nat.Suc",
                    Net {atoms = {}, comb =
                         Net {atoms = {}, comb =
                              Net {atoms =
                                   {("Groups.plus_class.plus",
Net {atoms = {}, comb = ..., var = ...})},
                                   comb = Leaf [], var = Leaf []},
                              var = Leaf []},
                         var = Leaf []}),
                  ("Pure.all",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [Proc
                            {lhs =
                             Const ("...", ...) $ Abs ("...", "?'a", ...),
                             name = "HOL.defined_all", proc = fn, stamp =
                             Stamp 91290}]}),
                  ("Set.Collect",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [Proc
                            {lhs =
                             Const ("...", "(?'a => bool) => ?'a set") $
                               ...,
                             name = "Product_Type.Collect_mem", proc = fn,
                             stamp = Stamp 616364},
                           Proc
                            {lhs = ... $ ..., name = "Set.defined_Collect",
                             proc = fn, stamp = Stamp 299868}]}),
                  ("List.list.set",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [Proc
                            {lhs = ... $ ..., name =
                             "List.list_to_set_comprehension", proc = fn,
                             stamp = Stamp 2625594}]}),
                  ("Product_Type.prod.case_prod",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf [Proc {lhs = ..., name = "...", ...}]})},
                comb =
                Net {atoms =
                     {("HOL.eq",
                        Net {atoms =
                             {("Groups.one_class.one",
                                Net {atoms = {}, comb = Leaf [], var =
                                     Leaf
[Proc
  {lhs = Const ("...", "?'a => ?'a => bool") $ ... $ ..., name =
   "Groups.reorient_one", proc = fn, stamp = Stamp 171260}]}),
                               ("Groups.zero_class.zero",
                                 Net {atoms = {}, comb = Leaf [], var =
Leaf
 [Proc
   {lhs = ... $ ... $ ..., name = "Groups.reorient_zero", proc = fn, stamp =
    Stamp 171216}]})},
                             comb =
                             Net {atoms =
                                  {("Nat.Suc",
                                     Net
{atoms = {}, comb = Leaf [], var =
 Net {atoms = {}, comb = Leaf [...], var = Leaf [...]}}),
                                    ("Num.numeral_class.numeral",
Net {atoms = {}, comb = Leaf [], var =
     Net {atoms = {}, comb = ..., var = ...}}),
                                    ("Groups.uminus_class.uminus",
Net {atoms = {}, comb = Net {atoms = {...}, ...}, var =
     Net {atoms = {}, ...}})},
                                  comb =
                                  Net {atoms =
 {("Groups.plus_class.plus",
    Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}}),
   ("Groups.minus_class.minus", Net {atoms = {}, comb = ..., var = ...}),
   ("Groups.times_class.times", Net {atoms = {}, ...})},
 comb = Leaf [], var = Leaf []},
                                  var = Leaf []},
                             var =
                             Net {atoms = {}, comb =
                                  Net {atoms =
 {("Nat.Suc", Net {atoms = {}, comb = Leaf [...], var = Leaf [...]}),
   ("Groups.uminus_class.uminus", Net {atoms = {}, comb = ..., var = ...})},
 comb =
 Net {atoms =
      {("Groups.plus_class.plus", Net {atoms = {}, ...}),
        ("Groups.minus_class.minus", ...), ...},
      comb = Leaf [], var = Leaf []},
 var = Leaf []},
                                  var =
                                  Leaf
                                   [Proc
                                     {lhs =
Const ("...", ...) $ Var ((...), "?'a") $ ..., name = "record_eq", proc =
fn, stamp = Stamp 4153886},
                                    Proc
                                     {lhs =
Const ("...", "?'a list => ?'a list => bool") $ ... $ ..., name =
"List.list_neq", proc = fn, stamp = Stamp 2645062},
                                    Proc
                                     {lhs = ... $ ... $ ..., name =
"List.list_eq", proc = fn, stamp = Stamp 2633172},
                                    Proc {lhs = ..., name = "...", ...},
                                    Proc {lhs = ..., ...}, ...]}}),
                       ("HOL.Let",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {}, comb = Leaf [], var =
                                   Leaf
                                    [Proc
{lhs = Const ("...", "?'a => (?'a => ?'b) => ?'b") $ ... $ ..., name =
 "HOL.let_simp", proc = fn, stamp = Stamp 91526}]}}),
                       ("Set.Bex",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {}, comb = Leaf [], var =
                                   Leaf
                                    [Proc
{lhs = ... $ ... $ ..., name = "Set.defined_Bex", proc = fn, stamp =
 Stamp 303020}]}}),
                       ("Pure.imp",
                         Net {atoms = {}, comb =
                              Net {atoms =
                                   {("HOL.Trueprop",
Net {atoms = {...}, comb = ..., var = ...})},
                                   comb = Leaf [], var = Leaf []},
                              var = Leaf []}),
                       ("Set.Ball",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {}, comb = Leaf [], var =
                                   Leaf [Proc {lhs = ..., ...}]}}),
                       ("HOL.NO_MATCH",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {}, comb = Leaf [...], var =
                                   Leaf [...]}}),
                       ("Rings.dvd_class.dvd",
                         Net {atoms = {}, comb =
                              Net {atoms = {}, comb = ..., var = ...}, var =
                              Net {atoms = {}, comb = ..., var = ...}}),
                       ("Groups.plus_class.plus",
                         Net {atoms = {}, comb = Leaf [...], var =
                              Net {atoms = {}, ...}}),
                       ("Lattices.inf_class.inf",
                         Net {atoms = {}, comb = ..., var = ...}),
                       ("Lattices.sup_class.sup", Net {atoms = {}, ...}),
                       ("Groups.minus_class.minus", ...), ...},
                     comb =
                     Net {atoms =
                          {("Fun.fun_upd",
                             Net {atoms = {}, comb =
                                  Net {atoms = {}, comb =
 Net {atoms = {}, comb = Net {atoms = {...}, comb = ..., var = ...}, var =
      Leaf []},
 var = Leaf []},
                                  var = Leaf []})},
                          comb = Leaf [], var = Leaf []},
                     var = Leaf []},
                var = Leaf []},
           var =
           Leaf
            [Proc
              {lhs = Var (("x", 0), "?'a"), name = "record", proc = fn,
               stamp = Stamp 4153844},
             Proc
              {lhs = Var (("x", 0), "?'a"), name = "record_upd", proc = fn,
               stamp = Stamp 4153854},
             Proc
              {lhs = Var (("x", 0), "unit"), name = "Product_Type.unit_eq",
               proc = fn, stamp = Stamp 562196}]},
      solvers =
      ([Solver {id = Stamp 1038750, name = "Rtranclp", solver = fn},
        Solver {id = Stamp 1038748, name = "Tranclp", solver = fn},
        Solver {id = Stamp 1038746, name = "Rtrancl", solver = fn},
        Solver {id = Stamp 1038744, name = "Trancl", solver = fn},
        Solver {id = Stamp 781564, name = "lin_arith", solver = fn},
        Solver {id = Stamp 132670, name = "Transitivity", solver = fn},
        Solver {id = Stamp 102528, name = "ASSUMPTION", solver = fn},
        Solver {id = Stamp 90936, name = "HOL unsafe", solver = fn}],
       [Solver {id = Stamp 90938, name = "HOL safe", solver = fn}]),
      subgoal_tac = fn, term_ord = fn}):
   simpset
val uint_arith_tacs = fn: Proof.context -> tactic list
val uint_arith_tac = fn: Proof.context -> int -> tactic
locale word_rotate
signature SMT_WORD =
  sig
    val add_word_shift': term * string -> Context.generic -> Context.generic
  end
structure SMT_Word: SMT_WORD
### theory "HOL-Library.Word"
### 4.112s elapsed time, 4.669s cpu time, 0.454s GC time
Loading theory "Word_Lib.More_Divides" (required by "Draft.More_WordTemplates" via "Draft.More_Word")
### theory "Word_Lib.More_Divides"
### 0.120s elapsed time, 0.189s cpu time, 0.000s GC time
Loading theory "Draft.More_Word" (required by "Draft.More_WordTemplates")
### theory "Draft.More_Word"
### 1.302s elapsed time, 2.005s cpu time, 0.995s GC time
Loading theory "Draft.More_WordTemplates"
val templateLemmas =
   [("More_Word.finite_word", "finite ?A",
     template_predicate (template_app (template_hole 0, template_var 0))),
    ("More_Word.nth_0", "~ bit 0 ?n",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0)
             )
         )),
    ("More_Word.max_word_not_less", "~ - 1 < ?x",
     template_negation
      (
         template_inequation
          (less_than, template_app (template_hole 1, template_hole 0),
           template_var 0)
         )),
    ("More_Word.of_int_sint", "word_of_int (sint ?a) = ?a",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("More_Word.of_int_uint", "word_of_int (uint ?x) = ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("More_Word.div_of_0_id", "0 div ?n = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("More_Word.word_div_1", "?n div 1 = ?n",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("More_Word.div_by_0_word", "?x div 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("More_Word.word_mod_by_0", "?k mod 0 = ?k",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("More_Word.test_bit_1", "bit 1 ?n = (?n = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 0)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("More_Word.NOT_eq", "not ?x = - ?x - 1",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("More_Word.word_and_full_mask_simp", "and ?x (mask LENGTH(?'a)) = ?x",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))),
       template_var 0)),
    ("More_Word.lt1_neq0", "(1 <= ?x) = (?x ~= 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 0)
            )],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("More_Word.unat_1_0", "(1 <= ?x) = (0 < unat ?x)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3), template_var 0),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("More_Word.word_le_not_less", "(?b <= ?a) = (~ ?a < ?b)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("More_Word.word_not_le", "(~ ?x <= ?y) = (?y < ?x)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("More_Word.sint_0", "(sint ?x = 0) = (?x = 0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("More_Word.and_and_not", "and (and ?a ?b) (not ?b) = 0",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("More_Word.word_gt_a_gt_0", "?a < ?n ==> 0 < ?n",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation (less_than, template_hole 0, template_var 0))),
    ("More_Word.AND_twice", "and (and ?w ?m) ?m = and ?w ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("More_Word.unat_mask_eq", "unat (mask ?n) = mask (min LENGTH(?'a) ?n)",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           template_var 0)))),
    ("More_Word.gt0_iff_gem1", "(0 < ?x) = (?x - 1 < ?x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2), template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)),
         template_var 0))),
    ("More_Word.nth_minus1", "bit (- 1) ?n = (?n < LENGTH(?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app (template_hole 4, template_hole 3)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)))),
    ("More_Word.max_word_less_eq_iff", "(- 1 <= ?w) = (?w = - 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_hole 1)),
              template_var 0)
            )],
       template_equation
        (template_var 0, template_app (template_hole 2, template_hole 1)))),
    ("More_Word.word_minus_one_le", "(- 1 <= ?x) = (?x = - 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_hole 1)),
              template_var 0)
            )],
       template_equation
        (template_var 0, template_app (template_hole 2, template_hole 1)))),
    ("More_Word.test_bit_eq_iff", "(bit ?u = bit ?v) = (?u = ?v)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("More_Word.unat_eq_1", "(unat ?x = Suc 0) = (?x = 1)",
     template_bimplication
      (template_equation
        (template_app (template_hole 4, template_var 0),
         template_app (template_hole 3, template_hole 2)),
       template_equation (template_var 0, template_hole 0))),
    ("More_Word.word_unat_Rep_inject1", "(unat ?x = unat 1) = (?x = 1)",
     template_bimplication
      (template_equation
        (template_app (template_hole 4, template_var 0),
         template_app (template_hole 3, template_hole 2)),
       template_equation (template_var 0, template_hole 0))),
    ("More_Word.map_nth_0",
     "map (bit 0) ?xs = replicate (length ?xs) False",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app (template_hole 4, template_hole 3)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("More_Word.ucast_ucast_mask",
     "ucast (ucast ?x) = and ?x (mask LENGTH(?'a))",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("More_Word.unat_lt2p", "unat ?x < 2 ^ LENGTH(?'a)",
     template_inequation
      (less_than, template_app (template_hole 6, template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2))),
         template_app (template_hole 1, template_hole 0)))),
    ("More_Word.test_bit_size", "bit ?w ?n ==> ?n < size ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_than, template_var 0,
         template_app (template_hole 0, template_var 1)))),
    ("More_Word.ucast_0_I", "?x = 0 ==> ucast ?x = 0",
     template_implication
      ([template_equation (template_var 0, template_hole 3)],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("More_Word.NOT_mask_AND_mask",
     "and (and ?w (mask ?n)) (not (mask ?n)) = (0::?'a)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app (template_hole 2, template_var 0))),
         template_app
          (template_hole 1,
           template_app (template_hole 2, template_var 0))),
       template_hole 0)),
    ("More_Word.less_eq_mask_iff_take_bit_eq_self",
     "(?w <= mask ?n) = (take_bit ?n ?w = ?w)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("More_Word.sint_minus1", "(sint ?x = - 1) = (?x = - 1)",
     template_bimplication
      (template_equation
        (template_app (template_hole 5, template_var 0),
         template_app (template_hole 4, template_hole 3)),
       template_equation
        (template_var 0, template_app (template_hole 1, template_hole 0)))),
    ("More_Word.overflow_plus_one_self", "(1 + ?p <= ?p) = (?p = - 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_var 0)),
              template_var 0)
            )],
       template_equation
        (template_var 0, template_app (template_hole 0, template_hole 2)))),
    ("More_Word.plus_1_less", "(?x + 1 <= ?x) = (?x = - 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_hole 2)),
              template_var 0)
            )],
       template_equation
        (template_var 0, template_app (template_hole 0, template_hole 2)))),
    ("More_Word.mask_2pm1", "mask ?n = 2 ^ ?n - 1",
     template_equation
      (template_app (template_hole 6, template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1))),
             template_var 0)),
         template_hole 0))),
    ("More_Word.NOT_mask", "not (mask ?n) = - (2 ^ ?n)",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("More_Word.mask_plus_1", "mask ?n + 1 = 2 ^ ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 0)),
         template_hole 4),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0))),
         template_var 0))),
    ("More_Word.mask_and_mask",
     "and (mask ?a) (mask ?b) = mask (min ?a ?b)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("More_Word.mask_AND_NOT_mask",
     "and (and ?w (not (mask ?n))) (mask ?n) = 0",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)))),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("More_Word.word_plus_and_or_coroll2",
     "and ?x ?w + and ?x (not ?w) = ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))),
       template_var 1)),
    ("More_Word.word_and_1", "and ?n 1 = (if bit ?n 0 then 1 else 0)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 0), template_hole 4),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)),
           template_hole 4),
         template_hole 0))),
    ("More_Word.ucast_or_distrib",
     "ucast (or ?x ?y) = or (ucast ?x) (ucast ?y)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("More_Word.ucast_of_nat",
     "is_down ucast ==> ucast (word_of_nat ?n) = word_of_nat ?n",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("More_Word.unat_ucast_upcast",
     "is_up ucast ==> unat (ucast ?x) = unat ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 3, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("More_Word.word_div_less", "?w < ?v ==> ?w div ?v = 0",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("More_Word.word_div_lt_eq_0", "?x < ?y ==> ?x div ?y = 0",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("More_Word.word_less_sub_1", "?x < ?y ==> ?x <= ?y - 1",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_var 1,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("More_Word.less_1_helper", "?n <= ?m ==> ?n - 1 < ?m",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 1, template_var 1), template_hole 0),
         template_var 0))),
    ("More_Word.not_switch", "not ?a = ?x ==> ?a = not ?x",
     template_implication
      ([template_equation
         (template_app (template_hole 0, template_var 1), template_var 0)],
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("More_Word.word_of_nat_less", "?n < unat ?x ==> word_of_nat ?n < ?x",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 1),
         template_var 0))),
    ("More_Word.unat_less_helper", "?x < word_of_nat ?n ==> unat ?x < ?n",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 1),
         template_var 0))),
    ("More_Word.word_of_nat_le", "?n <= unat ?x ==> word_of_nat ?n <= ?x",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_var 0))),
    ("More_Word.word_unat_less_le",
     "?a <= word_of_nat ?b ==> unat ?a <= ?b",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_var 0))),
    ("More_Word.le_ucast_ucast_le", "?x <= ucast ?y ==> ucast ?x <= ?y",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_var 0))),
    ("More_Word.word_eq_unatI", "unat ?v = unat ?w ==> ?v = ?w",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("More_Word.overflow_imp_lsb", "?x + 1 = 0 ==> bit ?x 0",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 0),
            template_hole 3),
          template_hole 2)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("More_Word.plus_one_helper", "?x < ?n + 1 ==> ?x <= ?n",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_app (template_hole 2, template_var 0),
            template_hole 1))],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("More_Word.word_minus_one_le_leq", "?x - 1 < ?y ==> ?x <= ?y",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 2, template_var 1),
            template_hole 1),
          template_var 0)],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("More_Word.word_overflow", "?x < ?x + 1 | ?x + 1 = 0",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 2))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 2)),
             template_hole 0))
         )),
    ("More_Word.extra_sle_sless_unfolds",
     "(1 \<le>s numeral ?n) = (sint 1 <= sint (numeral ?n))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app (template_hole 0, template_hole 3)),
         template_app
          (template_hole 0,
           template_app (template_hole 2, template_var 0))))),
    ("More_Word.extra_sle_sless_unfolds",
     "(0 \<le>s numeral ?n) = (sint 0 <= sint (numeral ?n))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app (template_hole 0, template_hole 3)),
         template_app
          (template_hole 0,
           template_app (template_hole 2, template_var 0))))),
    ("More_Word.extra_sle_sless_unfolds",
     "(numeral ?n \<le>s 1) = (sint (numeral ?n) <= sint 1)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 0))),
         template_app (template_hole 0, template_hole 2)))),
    ("More_Word.extra_sle_sless_unfolds",
     "(numeral ?n \<le>s 0) = (sint (numeral ?n) <= sint 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 0))),
         template_app (template_hole 0, template_hole 2)))),
    ("More_Word.extra_sle_sless_unfolds",
     "(1 <s numeral ?n) = (sint 1 < sint (numeral ?n))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app (template_hole 0, template_hole 3)),
         template_app
          (template_hole 0,
           template_app (template_hole 2, template_var 0))))),
    ("More_Word.extra_sle_sless_unfolds",
     "(0 <s numeral ?n) = (sint 0 < sint (numeral ?n))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app (template_hole 0, template_hole 3)),
         template_app
          (template_hole 0,
           template_app (template_hole 2, template_var 0))))),
    ("More_Word.extra_sle_sless_unfolds",
     "(numeral ?n <s 1) = (sint (numeral ?n) < sint 1)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 0))),
         template_app (template_hole 0, template_hole 2)))),
    ("More_Word.extra_sle_sless_unfolds",
     "(numeral ?n <s 0) = (sint (numeral ?n) < sint 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 0))),
         template_app (template_hole 0, template_hole 2)))),
    ("More_Word.and_mask_eq_iff_le_mask",
     "(and ?w (mask ?n) = ?w) = (?w <= mask ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, template_var 0))),
         template_var 1),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("More_Word.odd_iff_lsb", "odd (unat ?x) = bit ?x 0",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3))),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("More_Word.p2_eq_1", "(2 ^ ?n = 1) = (?n = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3))),
           template_var 0),
         template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("More_Word.ucast_and_mask",
     "ucast (and ?x (mask ?n)) = and (ucast ?x) (mask ?n)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 4, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("More_Word.sint_ucast_eq_uint",
     "~ is_down ucast ==> sint (ucast ?x) = uint ?x",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_hole 3))
            )],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 3, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("More_Word.less_is_non_zero_p1", "?a < ?k ==> ?a + 1 ~= 0",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1),
             template_hole 0)
           ))),
    ("More_Word.word_exists_nth", "?w ~= 0 ==> EX i. bit ?w i",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("More_Word.word_sub_1_le", "?x ~= 0 ==> ?x - 1 <= ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0),
         template_var 0))),
    ("More_Word.word_and_max_word", "?x = - 1 ==> and ?a ?x = ?a",
     template_implication
      ([template_equation
         (template_var 1, template_app (template_hole 2, template_hole 1))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 0))),
    ("More_Word.word_add_no_overflow", "?x < - 1 ==> ?x < ?x + 1",
     template_implication
      ([template_inequation
         (less_than, template_var 0,
          template_app (template_hole 2, template_hole 1))],
       template_inequation
        (less_than, template_var 0,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_hole 1)))),
    ("More_Word.no_plus_overflow_neg", "?x < - ?y ==> ?x <= ?x + ?y",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_equals, template_var 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("More_Word.test_bit_over", "size ?x <= ?n ==> bit ?x ?n = False",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("More_Word.mask_over_length", "LENGTH(?'a) <= ?n ==> mask ?n = - 1",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 5, template_hole 4),
          template_var 0)],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)))),
    ("More_Word.lsb_this_or_next", "~ bit (?x + 1) 0 ==> bit ?x 0",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 0),
                      template_hole 1)),
                  template_hole 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 0),
             template_hole 0)
           ))),
    ("More_Word.test_bit_1'", "bit 1 ?n = (0 < LENGTH(?'a) & ?n = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_app (template_hole 2, template_hole 1))),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_hole 3))
           ))),
    ("More_Word.mask_eq_0_eq_x", "(and ?x ?w = 0) = (and ?x (not ?w) = ?x)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 0, template_var 0)),
         template_var 1))),
    ("More_Word.mask_eq_x_eq_0", "(and ?x ?w = ?x) = (and ?x (not ?w) = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_var 1),
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("More_Word.nth_w2p_same", "bit (2 ^ ?n) ?n = (?n < LENGTH(?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app (template_hole 4, template_hole 3))),
             template_var 0)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)))),
    ("More_Word.and_mask_0_iff_le_mask",
     "(and ?w (not (mask ?n)) = 0) = (?w <= mask ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)))),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("More_Word.p2_eq_0", "(2 ^ ?n = 0) = (LENGTH(?'a) <= ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app (template_hole 5, template_hole 4))),
             template_var 0)),
         template_hole 3),
       template_app
        (template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0)),
         template_var 0))),
    ("More_Word.p2_gt_0", "(0 < 2 ^ ?n) = (?n < LENGTH(?'a))",
     template_equation
      (template_app
        (template_app (template_hole 8, template_hole 7),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3))),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)))),
    ("More_Word.test_bit_conj_lt",
     "(bit ?x ?m & ?m < LENGTH(?'a)) = bit ?x ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_hole 0))),
       template_app
        (template_app (template_hole 3, template_var 1), template_var 0))),
    ("More_Word.mask_out_sub_mask",
     "and ?x (not (mask ?n)) = ?x - and ?x (mask ?n)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 1, template_var 0))))),
    ("More_Word.word_unat_power", "2 ^ ?n = word_of_nat (2 ^ ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_hole 3))),
         template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app (template_hole 4, template_hole 3))),
           template_var 0)))),
    ("More_Word.subtract_mask",
     "?p - and ?p (mask ?n) = and ?p (not (mask ?n))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_hole 0,
           template_app (template_hole 1, template_var 0))))),
    ("More_Word.subtract_mask",
     "?p - and ?p (not (mask ?n)) = and ?p (mask ?n)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("More_Word.mask_or_not_mask",
     "or (and ?x (mask ?n)) (and ?x (not (mask ?n))) = ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 0)))),
       template_var 1)),
    ("More_Word.AND_NOT_mask_plus_AND_mask_eq",
     "and ?w (not (mask ?n)) + and ?w (mask ?n) = ?w",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 0, template_var 0))),
       template_var 1)),
    ("More_Word.word_and_mask_le_2pm1", "and ?w (mask ?n) <= 2 ^ ?n - 1",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 7, template_var 1),
         template_app (template_hole 6, template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1))),
             template_var 0)),
         template_hole 0))),
    ("More_Word.bang_is_le", "bit ?x ?m ==> 2 ^ ?m <= ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0),
         template_var 1))),
    ("More_Word.test_bit_cong", "?xa = ?y ==> bit ?xa ?x = bit ?y ?x",
     template_implication
      ([template_equation (template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("More_Word.word_eqD", "?u = ?v ==> bit ?u ?x = bit ?v ?x",
     template_implication
      ([template_equation (template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("More_Word.word_gr0_conv_Suc", "0 < ?m ==> EX n. ?m = n + 1",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 0)],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("More_Word.word_sless_sint_le", "?x <s ?y ==> sint ?x <= sint ?y - 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 2, template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 2, template_var 0)),
           template_hole 0)))),
    ("More_Word.le_mask_imp_and_mask",
     "?x <= mask ?n ==> and ?x (mask ?n) = ?x",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_hole 2, template_var 0)),
         template_var 1))),
    ("More_Word.ucast_ucast_id",
     "LENGTH(?'a) < LENGTH(?'b) ==> ucast (ucast ?x) = ?x",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 6, template_hole 5),
          template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("More_Word.div_to_mult_word_lt", "?x <= ?y div ?z ==> ?x * ?z <= ?y",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("More_Word.unat_ucast",
     "unat (ucast ?x) = unat ?x mod 2 ^ LENGTH(?'a)",
     template_equation
      (template_app
        (template_hole 9, template_app (template_hole 8, template_var 0)),
       template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 0)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))),
           template_app (template_hole 1, template_hole 0))))),
    ("More_Word.test_bit_bin'",
     "bit ?w ?n = (?n < size ?w & bit (uint ?w) ?n)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app (template_hole 2, template_var 1))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("More_Word.test_bit_bin",
     "bit ?w ?n = (?n < LENGTH(?'a) & bit (uint ?w) ?n)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 0),
             template_app (template_hole 3, template_hole 2))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("More_Word.bang_eq", "(?x = ?y) = (ALL n. bit ?x n = bit ?y n)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app (template_hole 1, t_empty))),
    ("More_Word.le_m1_iff_lt", "(0 < ?x) = ((?y <= ?x - 1) = (?y < ?x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_var 1)))),
    ("More_Word.test_bit_wi",
     "bit (word_of_int ?x) ?n = (?n < LENGTH(?'a) & bit ?x ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app (template_hole 2, template_hole 1))),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("More_Word.nth_ucast",
     "bit (ucast ?w) ?n = (bit ?w ?n & ?n < LENGTH(?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_hole 0))))),
    ("More_Word.word_and_nth",
     "bit (and ?x ?y) ?n = (bit ?x ?n & bit ?y ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("More_Word.word_or_nth", "bit (or ?x ?y) ?n = (bit ?x ?n | bit ?y ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("More_Word.word_or_zero", "(or ?a ?b = 0) = (?a = 0 & ?b = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 1))
           ))),
    ("More_Word.ucast_and_neg_mask",
     "ucast (and ?x (not (mask ?n))) = and (ucast ?x) (not (mask ?n))",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)))),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 6, template_var 1)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("More_Word.neg_mask_combine",
     "and (not (mask ?a)) (not (mask ?b)) = not (mask (max ?a ?b))",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("More_Word.or_not_mask_nop",
     "and (or ?x (not (mask ?n))) (mask ?n) = and ?x (mask ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("More_Word.Suc_unat_diff_1",
     "1 <= ?x ==> Suc (unat (?x - 1)) = unat ?x",
     template_implication
      ([template_inequation (less_equals, template_hole 4, template_var 0)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_hole 4))),
         template_app (template_hole 1, template_var 0)))),
    ("More_Word.word_le_add", "?x <= ?y ==> EX n. ?y = ?x + word_of_nat n",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("More_Word.degenerate_word", "LENGTH(?'a) = 1 ==> ?x = 0 | ?x = 1",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_hole 5),
          template_hole 4)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 0))
           ))),
    ("More_Word.word_1_le_power", "?n < LENGTH(?'a) ==> 1 <= 2 ^ ?n",
     template_implication
      ([template_inequation
         (less_than, template_var 0,
          template_app (template_hole 7, template_hole 6))],
       template_inequation
        (less_equals, template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("More_Word.mask_exceed",
     "LENGTH(?'a) <= ?n ==> and ?x (not (mask ?n)) = 0",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 6, template_hole 5),
          template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1))),
         template_hole 0))),
    ("More_Word.power_overflow", "LENGTH(?'a) <= ?n ==> 2 ^ ?n = 0",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 7, template_hole 6),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_var 0),
         template_hole 0))),
    ("More_Word.unat_ucast_up_simp",
     "LENGTH(?'a) <= LENGTH(?'b) ==> unat (ucast ?x) = unat ?x",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 7, template_hole 6),
          template_app (template_hole 5, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("More_Word.uint_range'", "0 <= uint ?x & uint ?x < 2 ^ LENGTH(?'a)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_hole 8),
               template_app (template_hole 7, template_var 0))),
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 7, template_var 0)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2))),
               template_app (template_hole 1, template_hole 0))))
         )),
    ("More_Word.unat_mask", "unat (mask ?n) = 2 ^ min ?n LENGTH(?'a) - 1",
     template_equation
      (template_app
        (template_hole 10, template_app (template_hole 9, template_var 0)),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app (template_hole 5, template_hole 4))),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app (template_hole 2, template_hole 1)))),
         template_hole 0))),
    ("More_Word.nth_is_and_neq_0", "bit ?x ?n = (and ?x (2 ^ ?n) ~= 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 5, template_var 1),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1))),
                 template_var 0)),
             template_hole 0)
           ))),
    ("More_Word.neg_test_bit",
     "bit (not ?x) ?n = (~ bit ?x ?n & ?n < LENGTH(?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 6, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_hole 0))))),
    ("More_Word.nth_mask",
     "bit (mask ?n) ?i = (?i < ?n & ?i < size (mask ?n))",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 1)))))),
    ("More_Word.neg_mask_test_bit",
     "bit (not (mask ?n)) ?m = (?n <= ?m & ?m < LENGTH(?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_hole 0))))),
    ("More_Word.word_xor_nth",
     "bit (xor ?x ?y) ?n = (bit ?x ?n ~= bit ?y ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))
           ))),
    ("More_Word.less_1_simp", "(?n - 1 < ?m) = (?n <= ?m & ?n ~= 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_hole 5)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0)),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0)))
           ))),
    ("More_Word.mask_twice",
     "and (and ?x (mask ?n)) (mask ?m) = and ?x (mask (min ?m ?n))",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 1))),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("More_Word.add_mask_fold", "?x + 2 ^ ?n - 1 = ?x + mask ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 1),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2))),
               template_var 0))),
         template_hole 1),
       template_app
        (template_app (template_hole 6, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("More_Word.Suc_unat_minus_one",
     "?x ~= 0 ==> Suc (unat (?x - 1)) = unat ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))),
         template_app (template_hole 2, template_var 0)))),
    ("More_Word.power_not_zero", "?n < LENGTH(?'a) ==> 2 ^ ?n ~= 0",
     template_implication
      ([template_inequation
         (less_than, template_var 0,
          template_app (template_hole 8, template_hole 7))],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))),
               template_var 0),
             template_hole 0)
           ))),
    ("More_Word.mask_lt_2pn", "?n < LENGTH(?'a) ==> mask ?n < 2 ^ ?n",
     template_implication
      ([template_inequation
         (less_than, template_var 0,
          template_app (template_hole 7, template_hole 6))],
       template_inequation
        (less_than, template_app (template_hole 4, template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("More_Word.of_nat_n_less_equal_power_2",
     "?n < LENGTH(?'a) ==> word_of_nat ?n < 2 ^ ?n",
     template_implication
      ([template_inequation
         (less_than, template_var 0,
          template_app (template_hole 7, template_hole 6))],
       template_inequation
        (less_than, template_app (template_hole 4, template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("More_Word.card_map_elide2",
     "?n <= CARD(?'a word) ==> card (word_of_nat ` {0..<?n}) = ?n",
     template_implication
      ([template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 6, template_hole 5))],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))),
         template_var 0))),
    ("More_Word.ucast_mask_drop",
     "LENGTH(?'a) <= ?n ==> ucast (and ?x (mask ?n)) = ucast ?x",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 5, template_hole 4),
          template_var 1)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))),
         template_app (template_hole 2, template_var 0)))),
    ("More_Word.word_lessThan_Suc_atMost",
     "?k ~= - 1 ==> {..<?k + 1} = {..?k}",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 0,
              template_app (template_hole 5, template_hole 4))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 4)),
         template_app (template_hole 0, template_var 0)))),
    ("More_Word.word_plus_and_or_coroll",
     "and ?x ?y = 0 ==> ?x + ?y = or ?x ?y",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 1), template_var 0),
          template_hole 2)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("More_Word.word_less_div", "?x div ?y = 0 ==> ?y = 0 | ?x < ?y",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 1), template_var 0),
          template_hole 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_hole 2)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("More_Word.word_overflow_unat",
     "unat (?x + 1) = unat ?x + 1 | ?x + 1 = 0",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_hole 4))),
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 6, template_var 0)),
                 template_hole 2))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_hole 4)),
             template_hole 0))
         )),
    ("More_Word.le_mask_high_bits",
     "(?w <= mask ?n) = (ALL i:{?n..<size ?w}. ~ bit ?w i)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1),
         template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app (template_hole 2, template_var 1))),
         t_empty))),
    ("More_Word.drop_bit_numeral_bit0_1",
     "drop_bit (Suc 0) (numeral ?k) =
      word_of_int (drop_bit (Suc 0) (take_bit LENGTH(?'a) (numeral ?k)))",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app (template_hole 8, template_hole 7)),
         template_app (template_hole 6, template_var 0)),
       template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 8, template_hole 7)),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1)),
             template_app (template_hole 0, template_var 0)))))),
    ("More_Word.word_range_minus_1'",
     "?a ~= 0 ==> {?a - 1<..?b} = {?a..?b}",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1)),
           template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("More_Word.word_range_minus_1", "?b ~= 0 ==> {?a..?b - 1} = {?a..<?b}",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("More_Word.unat_Suc2", "?n ~= - 1 ==> unat (?n + 1) = Suc (unat ?n)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 0,
              template_app (template_hole 5, template_hole 4))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 4)),
         template_app
          (template_hole 0,
           template_app (template_hole 2, template_var 0))))),
    ("More_Word.less_Suc_unat_less_bound",
     "?n < Suc (unat ?x) ==> ?n < 2 ^ LENGTH(?'a)",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_var 0)))],
       template_inequation
        (less_than, template_var 1,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))),
           template_app (template_hole 1, template_hole 0))))),
    ("More_Word.unat_of_nat_eq",
     "?x < 2 ^ LENGTH(?'a) ==> unat (word_of_nat ?x) = ?x",
     template_implication
      ([template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5))),
            template_app (template_hole 4, template_hole 3)))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("More_Word.ucast_ucast_len",
     "?x < 2 ^ LENGTH(?'b) ==> ucast (ucast ?x) = ?x",
     template_implication
      ([template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5))),
            template_app (template_hole 4, template_hole 3)))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("More_Word.word_0_sle_from_less",
     "?x < 2 ^ (LENGTH(?'a) - 1) ==> 0 \<le>s ?x",
     template_implication
      ([template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 9,
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_hole 6))),
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3)),
              template_hole 2)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)
           ))),
    ("More_Word.unat_of_nat_less",
     "[| ?a < ?b; unat ?b = ?c |] ==> ?a < word_of_nat ?c",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_equation
         (template_app (template_hole 1, template_var 1), template_var 0)],
       template_inequation
        (less_than, template_var 2,
         template_app (template_hole 0, template_var 0)))),
    ("More_Word.word_less_imp_diff_less",
     "[| ?k <= ?n; ?n < ?m |] ==> ?n - ?k < ?m",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_var 0))),
    ("More_Word.word_le_imp_diff_le",
     "[| ?k <= ?n; ?n <= ?m |] ==> ?n - ?k <= ?m",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_var 0))),
    ("More_Word.word_must_wrap", "[| ?x <= ?n - 1; ?n <= ?x |] ==> ?n = 0",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 3, template_var 0),
            template_hole 2)),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_equation (template_var 0, template_hole 0))),
    ("More_Word.nth_slice",
     "bit (slice ?n ?w) ?m = (bit ?w (?m + ?n) & ?m < LENGTH(?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 2))),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_hole 0))))),
    ("More_Word.nth_w2p", "bit (2 ^ ?n) ?m = (?m = ?n & ?m < LENGTH(?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_hole 7,
                      template_app (template_hole 6, template_hole 5))),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 1)),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app (template_hole 1, template_hole 0)))
           ))),
    ("More_Word.word_less_cases", "?x < ?y ==> ?x = ?y - 1 | ?x < ?y - 1",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0))),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)))
           ))),
    ("More_Word.word_Suc_leq", "?k ~= - 1 ==> (?x < ?k + 1) = (?x <= ?k)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 5, template_hole 4))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 4)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("More_Word.word_atLeastAtMost_Suc_greaterThanAtMost",
     "?m ~= - 1 ==> {?m<..?u} = {?m + 1..?u}",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 5, template_hole 4))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_hole 4)),
           template_var 0)))),
    ("More_Word.word_atLeastLessThan_Suc_atLeastAtMost",
     "?u ~= - 1 ==> {?l..<?u + 1} = {?l..?u}",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 5, template_hole 4))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 4)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("More_Word.word_Suc_le", "?x ~= - 1 ==> (?x + 1 <= ?k) = (?x < ?k)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 5, template_hole 4))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 4)),
           template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("More_Word.word_le_make_less",
     "?y ~= - 1 ==> (?x <= ?y) = (?x < ?y + 1)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 5, template_hole 4))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_hole 4))))),
    ("More_Word.ucast_less_ucast_weak",
     "LENGTH(?'a) < LENGTH(?'b) ==> (ucast ?x < ucast ?y) = (?x < ?y)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 7, template_hole 6),
          template_app (template_hole 5, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("More_Word.ucast_less",
     "LENGTH(?'b) < LENGTH(?'a) ==> ucast ?x < 2 ^ LENGTH(?'b)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 9, template_hole 8),
          template_app (template_hole 7, template_hole 6))],
       template_inequation
        (less_than, template_app (template_hole 4, template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_app (template_hole 9, template_hole 8))))),
    ("More_Word.up_scast_inj_eq",
     "LENGTH(?'a) <= LENGTH(?'b) ==> (scast ?x = scast ?y) = (?x = ?y)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 7, template_hole 6),
          template_app (template_hole 5, template_hole 4))],
       template_bimplication
        (template_equation
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 1, template_var 0)),
         template_equation (template_var 1, template_var 0)))),
    ("More_Word.up_ucast_inj_eq",
     "LENGTH(?'a) <= LENGTH(?'b) ==> (ucast ?x = ucast ?y) = (?x = ?y)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 7, template_hole 6),
          template_app (template_hole 5, template_hole 4))],
       template_bimplication
        (template_equation
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 1, template_var 0)),
         template_equation (template_var 1, template_var 0)))),
    ("More_Word.ucast_less_ucast",
     "LENGTH(?'a) <= LENGTH(?'b) ==> (ucast ?x < ucast ?y) = (?x < ?y)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 7, template_hole 6),
          template_app (template_hole 5, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("More_Word.ucast_le_ucast",
     "LENGTH(?'a) <= LENGTH(?'b) ==> (ucast ?x <= ucast ?y) = (?x <= ?y)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 7, template_hole 6),
          template_app (template_hole 5, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("More_Word.unatSuc2", "?n + 1 ~= 0 ==> unat (?n + 1) = Suc (unat ?n)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 5, template_var 0),
                template_hole 4),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 5, template_var 0),
             template_hole 4)),
         template_app
          (template_hole 0,
           template_app (template_hole 1, template_var 0))))),
    ("More_Word.revcast_down_su",
     "source_size revcast = target_size revcast + ?n ==>
      revcast ?w = scast (drop_bit ?n ?w)",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_hole 5),
          template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 3, template_hole 5)),
            template_var 1))],
       template_equation
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("More_Word.revcast_down_ss",
     "source_size revcast = target_size revcast + ?n ==>
      revcast ?w = scast (signed_drop_bit ?n ?w)",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_hole 5),
          template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 3, template_hole 5)),
            template_var 1))],
       template_equation
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("More_Word.revcast_down_uu",
     "source_size revcast = target_size revcast + ?n ==>
      revcast ?w = ucast (drop_bit ?n ?w)",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_hole 5),
          template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 3, template_hole 5)),
            template_var 1))],
       template_equation
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("More_Word.revcast_down_us",
     "source_size revcast = target_size revcast + ?n ==>
      revcast ?w = ucast (signed_drop_bit ?n ?w)",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_hole 5),
          template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 3, template_hole 5)),
            template_var 1))],
       template_equation
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("More_Word.cast_down_rev",
     "source_size ucast = target_size ucast + ?n ==>
      ucast ?w = revcast (push_bit ?n ?w)",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_hole 5),
          template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 3, template_hole 5)),
            template_var 1))],
       template_equation
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("More_Word.revcast_up",
     "source_size revcast + ?n = target_size revcast ==>
      revcast ?w = push_bit ?n (ucast ?w)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app (template_hole 5, template_hole 4)),
            template_var 1),
          template_app (template_hole 3, template_hole 4))],
       template_equation
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("More_Word.enum_word_nth_eq",
     "?n < 2 ^ LENGTH(?'a) ==> enum_class.enum ! ?n = word_of_nat ?n",
     template_implication
      ([template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 9,
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_hole 6))),
            template_app (template_hole 5, template_hole 4)))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("More_Word.ucast_of_nat_small",
     "?x < 2 ^ LENGTH(?'a) ==> ucast (word_of_nat ?x) = word_of_nat ?x",
     template_implication
      ([template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 9,
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_hole 6))),
            template_app (template_hole 5, template_hole 4)))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("More_Word.word_leq_le_minus_one",
     "[| ?x <= ?y; ?x ~= 0 |] ==> ?x - 1 < ?y",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 1, template_var 1), template_hole 0),
         template_var 0))),
    ("More_Word.le_step_down_word_2",
     "[| ?x <= ?y; ?x ~= ?y |] ==> ?x <= ?y - 1",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_inequation
        (less_equals, template_var 1,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("More_Word.word_leq_minus_one_le",
     "[| ?y ~= 0; ?x <= ?y - 1 |] ==> ?x < ?y",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 2, template_var 1),
            template_hole 1))],
       template_inequation (less_than, template_var 0, template_var 1))),
    ("More_Word.word_1_0",
     "[| ?a + 1 <= ?b; ?a < word_of_nat ?x |] ==> ?a < ?b",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 3, template_var 2),
            template_hole 2),
          template_var 1),
        template_inequation
         (less_than, template_var 2,
          template_app (template_hole 0, template_var 0))],
       template_inequation (less_than, template_var 2, template_var 1))),
    ("More_Word.le_mask_iff_lt_2n",
     "(?n < LENGTH(?'a)) = ((?w <= mask ?n) = (?w < 2 ^ ?n))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app (template_hole 8, template_hole 7))
            )],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 0),
           template_app (template_hole 5, template_var 1)),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 1))))),
    ("More_Word.test_bit_2p",
     "bit (word_of_int (2 ^ ?n)) ?m = (?m = ?n & ?m < LENGTH(?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_hole 9,
                  template_app
                   (template_app
                     (template_hole 8,
                      template_app
                       (template_hole 7,
                        template_app (template_hole 6, template_hole 5))),
                    template_var 1))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 1)),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app (template_hole 1, template_hole 0)))
           ))),
    ("More_Word.neg_mask_twice",
     "and ?x (and (not (mask ?n)) (not (mask ?m))) =
      and ?x (not (mask (max ?n ?m)))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1))),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)))),
       template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("More_Word.mask_lower_twice2",
     "and (and ?a (not (mask ?n))) (not (mask ?m)) =
      and ?a (not (mask (max ?n ?m)))",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("More_Word.and_not_mask_twice",
     "and (and ?w (not (mask ?n))) (not (mask ?m)) =
      and ?w (not (mask (max ?m ?n)))",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))))),
    ("More_Word.bit_twiddle_max",
     "xor ?x (and (xor ?x ?y) (if ?x < ?y then - 1 else 0)) = max ?x ?y",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 7, template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_var 0)),
               template_app (template_hole 3, template_hole 2)),
             template_hole 1))),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("More_Word.bit_twiddle_min",
     "xor ?y (and (xor ?x ?y) (if ?x < ?y then - 1 else 0)) = min ?x ?y",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 7, template_var 0),
               template_var 1)),
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_var 1)),
               template_app (template_hole 3, template_hole 2)),
             template_hole 1))),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("More_Word.bin_nth_minus_Bit0",
     "0 < ?n ==>
      bit (numeral (num.Bit0 ?w)) ?n = bit (numeral ?w) (?n - 1)",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0))),
           template_var 1),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0))))),
    ("More_Word.bin_nth_minus_Bit1",
     "0 < ?n ==>
      bit (numeral (num.Bit1 ?w)) ?n = bit (numeral ?w) (?n - 1)",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0))),
           template_var 1),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0))))),
    ("More_Word.mask_twice2",
     "?n <= ?m ==> and (and ?x (mask ?m)) (mask ?n) = and ?x (mask ?n)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 1))),
           template_app (template_hole 0, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 2))))),
    ("More_Word.lt_plus_1_le_word",
     "?n < unat ?maxBound ==>
      (?x < 1 + word_of_nat ?n) = (?x <= word_of_nat ?n)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app (template_hole 1, template_var 2))),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app (template_hole 1, template_var 2))))),
    ("More_Word.word_unat_mask_lt",
     "?m <= size ?w ==> unat (and ?w (mask ?m)) < 2 ^ ?m",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 8, template_var 0))],
       template_inequation
        (less_than,
         template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 0),
             template_app (template_hole 4, template_var 1))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 1)))),
    ("More_Word.card_map_elide",
     "?n <= CARD(?'a word) ==>
      card (word_of_nat ` {0..<?n}) = card {0..<?n}",
     template_implication
      ([template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 7, template_hole 6))],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 0))),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0))))),
    ("More_Word.ucast_ucast_add",
     "LENGTH(?'a) <= LENGTH(?'b) ==> ucast (ucast ?x + ?y) = ?x + ucast ?y",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 8, template_hole 7),
          template_app (template_hole 6, template_hole 5))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_hole 3, template_var 0))))),
    ("More_Word.word_unat_and_lt",
     "unat ?x < ?n | unat ?y < ?n ==> unat (and ?x ?y) < ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 2)),
                  template_var 1)),
              template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 0)),
                template_var 1))
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("More_Word.sint_of_nat_ge_zero",
     "?x < 2 ^ (LENGTH(?'a) - 1) ==> 0 <= sint (word_of_nat ?x)",
     template_implication
      ([template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 11,
              template_app
               (template_hole 10,
                template_app (template_hole 9, template_hole 8))),
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5)),
              template_hole 4)))],
       template_inequation
        (less_equals, template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("More_Word.pos_mult_pos_ge",
     "[| 0 < ?x; 0 <= ?n |] ==> ?n * 1 <= ?n * ?x",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1),
        template_inequation (less_equals, template_hole 3, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("More_Word.word_div_mult",
     "[| 0 < ?c; ?a < ?b * ?c |] ==> ?a div ?c < ?b",
     template_implication
      ([template_inequation (less_than, template_hole 2, template_var 2),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app (template_hole 1, template_var 0),
            template_var 2))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_var 0))),
    ("More_Word.div_less_dividend_word",
     "[| ?x ~= 0; ?n ~= 1 |] ==> ?x div ?n < ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3)),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 1))),
    ("More_Word.nat_uint_less_helper",
     "[| nat (uint ?y) = ?z; ?x < ?y |] ==> nat (uint ?x) < ?z",
     template_implication
      ([template_equation
         (template_app
           (template_hole 3,
            template_app (template_hole 2, template_var 2)),
          template_var 1),
        template_inequation (less_than, template_var 0, template_var 2)],
       template_inequation
        (less_than,
         template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_var 1))),
    ("More_Word.up_scast_inj",
     "[| scast ?x = scast ?y; size ?x <= LENGTH(?'b) |] ==> ?x = ?y",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 1),
          template_app (template_hole 5, template_var 0)),
        template_inequation
         (less_equals, template_app (template_hole 3, template_var 1),
          template_app (template_hole 2, template_hole 1))],
       template_equation (template_var 1, template_var 0))),
    ("More_Word.ucast_up_inj",
     "[| ucast ?x = ucast ?y; LENGTH(?'a) <= LENGTH(?'b) |] ==> ?x = ?y",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 1),
          template_app (template_hole 6, template_var 0)),
        template_inequation
         (less_equals, template_app (template_hole 4, template_hole 3),
          template_app (template_hole 2, template_hole 1))],
       template_equation (template_var 1, template_var 0))),
    ("More_Word.word_le_plus",
     "[| ?a < ?a + ?b; ?c < ?b |] ==> ?a <= ?a + ?c",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app (template_hole 1, template_var 2),
            template_var 1)),
        template_inequation (less_than, template_var 0, template_var 1)],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("More_Word.word_l_diffs",
     "[| ?w < ?z - ?x; ?x <= ?z |] ==> ?w + ?x < ?z",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0)),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("More_Word.word_diff_ls'",
     "[| ?y < ?w + ?x; ?x <= ?y |] ==> ?y - ?x < ?w",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0)),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("More_Word.ucast_up_mono",
     "[| LENGTH(?'a) <= LENGTH(?'b); ?x < ?y |] ==> ucast ?x < ucast ?y",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 6, template_hole 5),
          template_app (template_hole 4, template_hole 3)),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("More_Word.ucast_up_mono_le",
     "[| LENGTH(?'a) <= LENGTH(?'b); ?x <= ?y |] ==> ucast ?x <= ucast ?y",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 6, template_hole 5),
          template_app (template_hole 4, template_hole 3)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("More_Word.eq_ucast_ucast_eq",
     "[| LENGTH(?'b) <= LENGTH(?'a); ?x = ucast ?y |] ==> ucast ?x = ?y",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 7, template_hole 6),
          template_app (template_hole 5, template_hole 4)),
        template_equation
         (template_var 1, template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("More_Word.less_ucast_ucast_less",
     "[| LENGTH(?'b) <= LENGTH(?'a); ?x < ucast ?y |] ==> ucast ?x < ?y",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 7, template_hole 6),
          template_app (template_hole 5, template_hole 4)),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 1),
         template_var 0))),
    ("More_Word.word_random",
     "[| ?p <= ?p + ?x'; ?x <= ?x' |] ==> ?p <= ?p + ?x",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 0, template_var 2),
            template_var 1)),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("More_Word.word_l_diffs",
     "[| ?w <= ?z - ?x; ?x <= ?z |] ==> ?w + ?x <= ?z",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0)),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("More_Word.word_diff_ls'",
     "[| ?y <= ?w + ?x; ?x <= ?y |] ==> ?y - ?x <= ?w",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0)),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("More_Word.word_add_increasing",
     "[| ?p + ?w <= ?x; ?p <= ?p + ?w |] ==> ?p <= ?x",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 0, template_var 2), template_var 1),
          template_var 0),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 0, template_var 2),
            template_var 1))],
       template_inequation (less_equals, template_var 2, template_var 0))),
    ("More_Word.word_eq_iff",
     "(?x = ?y) = (ALL n<LENGTH(?'a). bit ?x n = bit ?y n)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app (template_hole 5, t_empty))),
    ("More_Word.take_bit_word_eq_self_iff",
     "(take_bit ?n ?w = ?w) = (LENGTH(?'a) <= ?n | ?w < 2 ^ ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 6, template_hole 5)),
             template_var 1)),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 1))))),
    ("More_Word.power_2_ge_iff",
     "(2 ^ ?n - 1 < 2 ^ ?n) = (?n < LENGTH(?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_hole 4))),
                 template_var 0)),
             template_hole 3)),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_hole 4))),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)))),
    ("More_Word.neg_mask_add_mask",
     "and ?x (not (mask ?n)) + (2 ^ ?n - 1) = or ?x (mask ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_var 1),
             template_app
              (template_hole 8,
               template_app (template_hole 7, template_var 0)))),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2))),
               template_var 0)),
           template_hole 1)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 7, template_var 0)))),
    ("More_Word.uint_2p_alt", "?n < LENGTH(?'a) ==> uint (2 ^ ?n) = 2 ^ ?n",
     template_implication
      ([template_inequation
         (less_than, template_var 0,
          template_app (template_hole 9, template_hole 8))],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2))),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app (template_hole 3, template_hole 2))),
           template_var 0)))),
    ("More_Word.unat_p2", "?n < LENGTH(?'a) ==> unat (2 ^ ?n) = 2 ^ ?n",
     template_implication
      ([template_inequation
         (less_than, template_var 0,
          template_app (template_hole 9, template_hole 8))],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2))),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app (template_hole 3, template_hole 2))),
           template_var 0)))),
    ("More_Word.rc2",
     "source_size revcast = target_size revcast + ?n ==>
      ucast ?w = word_reverse (ucast (drop_bit ?n (word_reverse ?w)))",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_hole 7),
          template_app
           (template_app
             (template_hole 6,
              template_app (template_hole 5, template_hole 7)),
            template_var 1))],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 0))))))),
    ("More_Word.rc1",
     "source_size revcast + ?n = target_size revcast ==>
      ucast ?w = word_reverse (push_bit ?n (ucast (word_reverse ?w)))",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 8,
              template_app (template_hole 7, template_hole 6)),
            template_var 1),
          template_app (template_hole 5, template_hole 6))],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_hole 3,
               template_app (template_hole 0, template_var 0))))))),
    ("More_Word.int_eq_sint",
     "?x < 2 ^ (LENGTH(?'a) - 1) ==> sint (word_of_nat ?x) = int ?x",
     template_implication
      ([template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 11,
              template_app
               (template_hole 10,
                template_app (template_hole 9, template_hole 8))),
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5)),
              template_hole 4)))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("More_Word.plus_one_helper2",
     "[| ?x <= ?n; ?n + 1 ~= 0 |] ==> ?x < ?n + 1",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 3, template_var 0),
                template_hole 2),
              template_hole 1)
            )],
       template_inequation
        (less_than, template_var 1,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)))),
    ("More_Word.word_div_eq_1_iff",
     "(?n div ?m = 1) = (?m <= ?n & unat ?n < 2 * unat ?m)",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_var 1),
             template_var 0)),
         template_hole 8),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_app (template_hole 4, template_var 0)))))),
    ("More_Word.constraint_expand",
     "(?x : {y. ?lower <= y & y <= ?upper}) =
      (?lower <= ?x & ?x <= ?upper)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app (template_hole 2, t_empty)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("More_Word.neg_mask_is_div",
     "and ?w (not (mask ?n)) = ?w div 2 ^ ?n * 2 ^ ?n",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1),
         template_app
          (template_hole 7,
           template_app (template_hole 6, template_var 0))),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_hole 0))),
               template_var 0))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("More_Word.complement_nth_w2p",
     "?n' < LENGTH(?'a) ==> bit (not (2 ^ ?n)) ?n' = (?n' ~= ?n)",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 10, template_hole 9))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_hole 6,
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app
                         (template_hole 4,
                          template_app (template_hole 3, template_hole 2))),
                      template_var 0))),
                template_var 1)
              )],
         template_negation
          (template_equation (template_var 1, template_var 0))))),
    ("More_Word.word_power_less_1",
     "?sz < LENGTH(?'a) ==> 2 ^ ?sz - 1 < 2 ^ ?sz",
     template_implication
      ([template_inequation
         (less_than, template_var 0,
          template_app (template_hole 8, template_hole 7))],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))),
               template_var 0)),
           template_hole 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_var 0)))),
    ("More_Word.bool_mask'",
     "2 < LENGTH(?'a) ==> (0 < and ?x 1) = (and ?x 1 = 1)",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 10,
            template_app (template_hole 9, template_hole 8)),
          template_app (template_hole 7, template_hole 6))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_hole 1))
              )],
         template_equation
          (template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1),
           template_hole 1)))),
    ("More_Word.and_neq_0_is_nth",
     "?y = 2 ^ ?n ==> (and ?x ?y ~= 0) = bit ?x ?n",
     template_implication
      ([template_equation
         (template_var 2,
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5))),
            template_var 1))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 2)),
             template_hole 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("More_Word.unat_eq_of_nat",
     "?n < 2 ^ LENGTH(?'a) ==> (unat ?x = ?n) = (?x = word_of_nat ?n)",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 10,
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_hole 7))),
            template_app (template_hole 6, template_hole 5)))],
       template_bimplication
        (template_equation
          (template_app (template_hole 2, template_var 0), template_var 1),
         template_equation
          (template_var 0,
           template_app (template_hole 0, template_var 1))))),
    ("More_Word.unat_ucast_less_no_overflow_simp",
     "?n < 2 ^ LENGTH(?'a) ==> (unat ?f < ?n) = (?f < word_of_nat ?n)",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 9,
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_hole 6))),
            template_app (template_hole 5, template_hole 4)))],
       template_equation
        (template_app
          (template_app
            (template_hole 10,
             template_app (template_hole 2, template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 1))))),
    ("More_Word.word_eqI",
     "(!!n. n < size ?u --> bit ?u n = bit ?v n) ==> ?u = ?v",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("More_Word.word_plus_strict_mono_right",
     "[| ?y < ?z; ?x <= ?x + ?z |] ==> ?x + ?y < ?x + ?z",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 0, template_var 0),
            template_var 1))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("More_Word.word_sub_plus_one_nonzero",
     "[| ?n' <= ?n; ?n' ~= 0 |] ==> ?n - ?n' + 1 ~= 0",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 1)),
               template_hole 0),
             template_hole 3)
           ))),
    ("More_Word.word_plus_mcs_3",
     "[| ?v <= ?w; ?x <= ?w + ?x |] ==> ?v + ?x <= ?w + ?x",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 0, template_var 1),
            template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("More_Word.word_plus_mono_left",
     "[| ?y <= ?z; ?x <= ?x + ?z |] ==> ?y + ?x <= ?z + ?x",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 0, template_var 0),
            template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("More_Word.of_nat_0",
     "[| word_of_nat ?n = 0; ?n < 2 ^ LENGTH(?'a) |] ==> ?n = 0",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 0), template_hole 9),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4))),
            template_app (template_hole 3, template_hole 2)))],
       template_equation (template_var 0, template_hole 0))),
    ("More_Word.word_diff_ls'",
     "[| ?y - ?x < ?w; ?x <= ?w + ?x |] ==> ?y < ?w + ?x",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_var 0),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 0, template_var 0),
            template_var 1))],
       template_inequation
        (less_than, template_var 2,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("More_Word.word_l_diffs",
     "[| ?w + ?x < ?z; ?x <= ?w + ?x |] ==> ?w < ?z - ?x",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_var 0),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 1))],
       template_inequation
        (less_than, template_var 2,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("More_Word.neq_0_no_wrap",
     "[| ?x <= ?x + ?y; ?x ~= 0 |] ==> ?x + ?y ~= 0",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0)),
        template_negation
         (template_equation (template_var 1, template_hole 0))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0),
             template_hole 0)
           ))),
    ("More_Word.word_plus_one_nonzero",
     "[| ?x <= ?x + ?y; ?y ~= 0 |] ==> ?x + 1 ~= 0",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 4, template_var 1),
               template_hole 0),
             template_hole 1)
           ))),
    ("More_Word.word_diff_ls'",
     "[| ?y - ?x <= ?w; ?x <= ?w + ?x |] ==> ?y <= ?w + ?x",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          template_var 0),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 0, template_var 0),
            template_var 1))],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("More_Word.word_l_diffs",
     "[| ?w + ?x <= ?z; ?x <= ?w + ?x |] ==> ?w <= ?z - ?x",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          template_var 0),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 1, template_var 2),
            template_var 1))],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("More_Word.word_plus_mcs_4",
     "[| ?v + ?x <= ?w + ?x; ?x <= ?v + ?x |] ==> ?v <= ?w",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 0, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 0, template_var 0),
            template_var 1)),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 0, template_var 2),
            template_var 1))],
       template_inequation (less_equals, template_var 2, template_var 0))),
    ("More_Word.word_plus_mcs_4'",
     "[| ?x + ?v <= ?x + ?w; ?x <= ?x + ?v |] ==> ?v <= ?w",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 0, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 0, template_var 2),
            template_var 0)),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 0, template_var 2),
            template_var 1))],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("More_Word.mask_lower_twice",
     "?n <= ?m ==>
      and (and ?x (not (mask ?n))) (not (mask ?m)) =
      and ?x (not (mask ?m))",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)))),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)))))),
    ("More_Word.less_x_plus_1",
     "?x ~= - 1 ==> (?y < ?x + 1) = (?y < ?x | ?y = ?x)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 5, template_hole 4))
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 2, template_var 0),
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_hole 4))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 1)),
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_var 1))
             )))),
    ("More_Word.ucast_mono",
     "[| ?x < ?y; ?y < 2 ^ LENGTH(?'a) |] ==> ucast ?x < ucast ?y",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4))),
            template_app (template_hole 3, template_hole 2)))],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("More_Word.ucast_mono_le",
     "[| ?x <= ?y; ?y < 2 ^ LENGTH(?'b) |] ==> ucast ?x <= ucast ?y",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4))),
            template_app (template_hole 3, template_hole 2)))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("More_Word.unat_ucast_less_no_overflow",
     "[| ?n < 2 ^ LENGTH(?'a); unat ?f < ?n |] ==> ?f < word_of_nat ?n",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5))),
            template_app (template_hole 4, template_hole 3))),
        template_inequation
         (less_than, template_app (template_hole 2, template_var 0),
          template_var 1)],
       template_inequation
        (less_than, template_var 0,
         template_app (template_hole 0, template_var 1)))),
    ("More_Word.of_nat_mono_maybe",
     "[| ?x < 2 ^ LENGTH(?'a); ?y < ?x |]
      ==> word_of_nat ?y < word_of_nat ?x",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4))),
            template_app (template_hole 3, template_hole 2))),
        template_inequation (less_than, template_var 0, template_var 1)],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("More_Word.word_diff_less",
     "[| 0 < ?n; 0 < ?m; ?n <= ?m |] ==> ?m - ?n < ?m",
     template_implication
      ([template_inequation (less_than, template_hole 2, template_var 1),
        template_inequation (less_than, template_hole 2, template_var 0),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 0))),
    ("More_Word.split_word_eq_on_mask",
     "(?x = ?y) =
      (and ?x ?m = and ?y ?m & and ?x (not ?m) = and ?y (not ?m))",
     template_bimplication
      (template_equation (template_var 2, template_var 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_app (template_hole 0, template_var 0))),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("More_Word.nth_sint",
     "bit (sint ?w) ?n =
      (if ?n < LENGTH(?'a) - 1 then bit ?w ?n
       else bit ?w (LENGTH(?'a) - 1))",
     template_equation
      (template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 0),
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2)),
                 template_hole 1))),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2)),
             template_hole 1))))),
    ("More_Word.mask_subsume",
     "?n <= ?m ==>
      and (or ?x (and ?y (mask ?n))) (not (mask ?m)) =
      and ?x (not (mask ?m))",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app (template_hole 1, template_var 3)))),
           template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 2))),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 2)))))),
    ("More_Word.word_count_from_top",
     "?n ~= 0 ==> {0..<?n} = {0..<?n - 1} Un {?n - 1}",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 7))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_hole 7), template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 5, template_hole 7),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 2))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 2)),
             template_hole 0))))),
    ("More_Word.word_leI",
     "(!!n. [| n < size ?u; bit ?u n |] ==> bit ?v n) ==> ?u <= ?v",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("More_Word.word_div_sub",
     "[| ?y <= ?x; 0 < ?y |] ==> (?x - ?y) div ?y = ?x div ?y - 1",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_inequation (less_than, template_hole 4, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_hole 0)))),
    ("More_Word.x_less_2_0_1'",
     "[| LENGTH(?'a) ~= 1; ?x < 2 |] ==> ?x = 0 | ?x = 1",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 10, template_hole 9),
              template_hole 8)
            ),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_hole 4)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 0))
           ))),
    ("More_Word.word_diff_ls''",
     "[| ?y < ?w + ?x; ?x <= ?y |] ==> ?y - ?x < ?w + ?x - ?x",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0)),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_var 0)))),
    ("More_Word.word_le_plus_1",
     "[| ?y < ?y + ?n; ?a < ?n |] ==> ?y + ?a <= ?y + ?a + 1",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 1)),
        template_inequation (less_than, template_var 0, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 2, template_var 2), template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)),
           template_hole 0)))),
    ("More_Word.word_diff_ls''",
     "[| ?y <= ?w + ?x; ?x <= ?y |] ==> ?y - ?x <= ?w + ?x - ?x",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0)),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_var 0)))),
    ("More_Word.eq_mask_less",
     "[| ?w = and ?w (mask ?n); ?n < LENGTH(?'a) |] ==> ?w < 2 ^ ?n",
     template_implication
      ([template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 9, template_var 1),
            template_app (template_hole 8, template_var 0))),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 6, template_hole 5))],
       template_inequation
        (less_than, template_var 1,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("More_Word.word_l_diffs'",
     "[| ?w + ?x - ?x < ?z - ?x; ?x <= ?z |] ==> ?w + ?x < ?z",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1)),
            template_var 1),
          template_app
           (template_app (template_hole 2, template_var 0),
            template_var 1)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0))),
    ("More_Word.word_l_diffs'",
     "[| ?w + ?x - ?x <= ?z - ?x; ?x <= ?z |] ==> ?w + ?x <= ?z",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1)),
            template_var 1),
          template_app
           (template_app (template_hole 1, template_var 0),
            template_var 1)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("More_Word.two_power_increasing",
     "[| ?n <= ?m; ?m < LENGTH(?'a) |] ==> 2 ^ ?n <= 2 ^ ?m",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 6, template_hole 5))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("More_Word.ucast_sub_ucast",
     "[| ?y <= ?x; LENGTH(?'a) <= LENGTH(?'b) |]
      ==> ucast (?x - ?y) = ucast ?x - ucast ?y",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_inequation
         (less_equals, template_app (template_hole 7, template_hole 6),
          template_app (template_hole 5, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)),
           template_app (template_hole 2, template_var 1))))),
    ("More_Word.is_aligned_AND_less_0",
     "[| and ?u (mask ?n) = 0; ?v < 2 ^ ?n |] ==> and ?u ?v = 0",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 2),
            template_app (template_hole 6, template_var 1)),
          template_hole 5),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 3,
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_hole 0))),
            template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 7, template_var 2), template_var 0),
         template_hole 5))),
    ("More_Word.le_step_down_word",
     "[| ?i <= ?n; ?i = ?n --> ?P; ?i <= ?n - 1 --> ?P |] ==> ?P",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_app
                   (template_app (template_hole 1, template_var 1),
                    template_hole 0))),
              template_var 0)
            )],
       template_predicate (template_var 0))),
    ("More_Word.word_le_minus_mono_right",
     "[| ?z <= ?y; ?y <= ?x; ?z <= ?x |] ==> ?x - ?y <= ?x - ?z",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("More_Word.word_less_nowrapI'",
     "[| ?x <= ?z - ?k; ?k <= ?z; 0 < ?k |] ==> ?x < ?x + ?k",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0)),
        template_inequation (less_equals, template_var 0, template_var 1),
        template_inequation (less_than, template_hole 1, template_var 0)],
       template_inequation
        (less_than, template_var 2,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("More_Word.word_less_sub_le",
     "?n < LENGTH(?'a) ==> (?x <= 2 ^ ?n - 1) = (?x < 2 ^ ?n)",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 10, template_hole 9))],
       template_equation
        (template_app
          (template_app (template_hole 7, template_var 0),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2))),
                 template_var 1)),
             template_hole 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2))),
             template_var 1))))),
    ("More_Word.even_word_imp_odd_next",
     "even (unat ?x) ==> ?x + 1 = 0 | odd (unat (?x + 1))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_hole 9,
                  template_app (template_hole 8, template_hole 7))),
              template_app (template_hole 6, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_hole 2)),
                 template_hole 1)),
             template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_hole 9,
                     template_app (template_hole 8, template_hole 7))),
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_hole 2)))))
           ))),
    ("More_Word.odd_word_imp_even_next",
     "odd (unat ?x) ==> ?x + 1 = 0 | even (unat (?x + 1))",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_hole 8,
                      template_app (template_hole 7, template_hole 6))),
                  template_app (template_hole 5, template_var 0))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_hole 1)),
                 template_hole 0)),
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_hole 6))),
               template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1))))
           ))),
    ("More_Word.upper_trivial",
     "?x ~= 2 ^ LENGTH(?'a) - 1 ==> ?x < 2 ^ LENGTH(?'a) - 1",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 0,
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_hole 6,
                        template_app (template_hole 5, template_hole 4))),
                    template_app (template_hole 3, template_hole 2))),
                template_hole 1))
            )],
       template_inequation
        (less_than, template_var 0,
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_hole 4))),
               template_app (template_hole 3, template_hole 2))),
           template_hole 1)))),
    ("More_Word.unat_less_power",
     "[| ?sz < LENGTH(?'a); ?k < 2 ^ ?sz |] ==> unat ?k < 2 ^ ?sz",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 9, template_hole 8)),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3))),
            template_var 1))],
       template_inequation
        (less_than, template_app (template_hole 2, template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app (template_hole 4, template_hole 3))),
           template_var 1)))),
    ("More_Word.word_combine_masks",
     "[| and ?w ?m = ?z; and ?w ?m' = ?z' |]
      ==> and ?w (or ?m ?m') = or ?z ?z'",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 4), template_var 3),
          template_var 2),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 4), template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 4),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("More_Word.word_l_diffs'",
     "[| ?w + ?x < ?z; ?x <= ?w + ?x |] ==> ?w + ?x - ?x < ?z - ?x",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_var 0),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 1))],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("More_Word.word_l_diffs'",
     "[| ?w + ?x <= ?z; ?x <= ?w + ?x |] ==> ?w + ?x - ?x <= ?z - ?x",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          template_var 0),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 1, template_var 2),
            template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("More_Word.of_nat_power",
     "[| ?p < 2 ^ ?x; ?x < LENGTH(?'a) |] ==> word_of_nat ?p < 2 ^ ?x",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 9,
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_hole 6))),
            template_var 0)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 5, template_hole 4))],
       template_inequation
        (less_than, template_app (template_hole 2, template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app (template_hole 7, template_hole 6))),
           template_var 0)))),
    ("More_Word.word_diff_ls''",
     "[| ?y - ?x < ?w + ?x - ?x; ?x <= ?w + ?x |] ==> ?y < ?w + ?x",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 1)),
            template_var 1)),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 1, template_var 0),
            template_var 1))],
       template_inequation
        (less_than, template_var 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("More_Word.word_diff_ls''",
     "[| ?y - ?x <= ?w + ?x - ?x; ?x <= ?w + ?x |] ==> ?y <= ?w + ?x",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          template_app
           (template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 0),
                template_var 1)),
            template_var 1)),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 0, template_var 0),
            template_var 1))],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("More_Word.nth_bounded",
     "[| bit ?x ?n; ?x < 2 ^ ?m; ?m <= LENGTH(?'a) |] ==> ?n < ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_than, template_var 2,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4))),
            template_var 0)),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 2, template_hole 1))],
       template_inequation (less_than, template_var 1, template_var 0))),
    ("More_Word.and_mask_arith",
     "and ?w (mask ?n) = ?w * 2 ^ (size ?w - ?n) div 2 ^ (size ?w - ?n)",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 1),
         template_app (template_hole 8, template_var 0)),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 1),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2))),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1)),
                 template_var 0)))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0))))),
    ("More_Word.unat_add_lem'",
     "unat ?x + unat ?y < 2 ^ LENGTH(?'a) ==>
      unat (?x + ?y) = unat ?x + unat ?y",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 1)),
            template_app (template_hole 8, template_var 0)),
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4))),
            template_app (template_hole 3, template_hole 2)))],
       template_equation
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 9,
             template_app (template_hole 8, template_var 1)),
           template_app (template_hole 8, template_var 0))))),
    ("More_Word.sint_of_nat_le",
     "[| ?b < 2 ^ (LENGTH(?'a) - 1); ?a <= ?b |]
      ==> sint (word_of_nat ?a) <= sint (word_of_nat ?b)",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 11,
              template_app
               (template_hole 10,
                template_app (template_hole 9, template_hole 8))),
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5)),
              template_hole 4))),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 1))))),
    ("More_Word.multiple_mask_trivia",
     "?m <= ?n ==>
      and ?x (not (mask ?n)) + and ?x (and (mask ?n) (not (mask ?m))) =
      and ?x (not (mask ?m))",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1)))),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 0, template_var 1)),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2))))),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)))))),
    ("More_Word.neg_mask_is_div'",
     "?n < size ?w ==> and ?w (not (mask ?n)) = ?w div 2 ^ ?n * 2 ^ ?n",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 10, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 8, template_var 0),
           template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 1))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_hole 0))),
                 template_var 1))),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 1))))),
    ("More_Word.word_cat_inj",
     "LENGTH(?'a) + LENGTH(?'b) <= LENGTH(?'c) ==>
      (word_cat ?a ?b = word_cat ?c ?d) = (?a = ?c & ?b = ?d)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 12,
              template_app (template_hole 11, template_hole 10)),
            template_app (template_hole 9, template_hole 8)),
          template_app (template_hole 7, template_hole 6))],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0))
             )))),
    ("More_Word.word_add_le_iff2",
     "[| ?i <= ?i + ?k; ?j <= ?j + ?k |]
      ==> (?i + ?k <= ?j + ?k) = (?i <= ?j)",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 1, template_var 2),
            template_var 1)),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 1, template_var 0),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("More_Word.mask_out_first_mask_some",
     "[| and ?x (not (mask ?n)) = ?y; ?n <= ?m |]
      ==> and ?x (not (mask ?m)) = and ?y (not (mask ?m))",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 3),
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 2))),
          template_var 1),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)))))),
    ("More_Word.range_subset_card",
     "[| {?a..?b} <= {?c..?d}; ?a <= ?b |]
      ==> ?c <= ?d & ?b - ?a <= ?d - ?c",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 3, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0)),
        template_inequation (less_equals, template_var 3, template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 3)),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("More_Word.le2p_bits_unset",
     "?p <= 2 ^ ?n - 1 ==> ALL n'>=?n. n' < LENGTH(?'a) --> ~ bit ?p n'",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app
             (template_hole 13,
              template_app
               (template_app
                 (template_hole 12,
                  template_app
                   (template_hole 11,
                    template_app (template_hole 10, template_hole 9))),
                template_var 0)),
            template_hole 8))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("More_Word.word_add_less_mono1",
     "[| ?i < ?j; unat ?j + unat ?k < 2 ^ LENGTH(?'a) |]
      ==> ?i + ?k < ?j + ?k",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 1)),
            template_app (template_hole 7, template_var 0)),
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3))),
            template_app (template_hole 2, template_hole 1)))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("More_Word.word_add_le_mono1",
     "[| ?i <= ?j; unat ?j + unat ?k < 2 ^ LENGTH(?'a) |]
      ==> ?i + ?k <= ?j + ?k",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 1)),
            template_app (template_hole 7, template_var 0)),
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3))),
            template_app (template_hole 2, template_hole 1)))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("More_Word.word_add_le_mono2",
     "[| ?i <= ?j; unat ?j + unat ?k < 2 ^ LENGTH(?'a) |]
      ==> ?k + ?i <= ?k + ?j",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 1)),
            template_app (template_hole 7, template_var 0)),
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3))),
            template_app (template_hole 2, template_hole 1)))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("More_Word.ucast_ucast_eq",
     "[| ucast ?x = ucast (ucast ?y); LENGTH(?'a) <= LENGTH(?'b);
         LENGTH(?'b) <= LENGTH(?'c) |]
      ==> ?x = ucast ?y",
     template_implication
      ([template_equation
         (template_app (template_hole 9, template_var 1),
          template_app
           (template_hole 9,
            template_app (template_hole 8, template_var 0))),
        template_inequation
         (less_equals, template_app (template_hole 6, template_hole 5),
          template_app (template_hole 4, template_hole 3)),
        template_inequation
         (less_equals, template_app (template_hole 4, template_hole 3),
          template_app (template_hole 2, template_hole 1))],
       template_equation
        (template_var 1, template_app (template_hole 8, template_var 0)))),
    ("More_Word.word_ao_nth",
     "bit (or ?x ?y) ?n = (bit ?x ?n | bit ?y ?n) &
      bit (and ?x ?y) ?n = (bit ?x ?n & bit ?y ?n)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 2),
                       template_var 1)),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 0)))),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 1)),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 0)),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0))))
         )),
    ("More_Word.test_bit_cat",
     "bit (word_cat ?a ?b) ?n =
      (?n < size (word_cat ?a ?b) &
       (if ?n < size ?b then bit ?b ?n else bit ?a (?n - size ?b)))",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 0),
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 8, template_var 2),
                 template_var 1)))),
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_app (template_hole 3, template_var 1))),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app (template_hole 3, template_var 1))))))),
    ("More_Word.two_power_eq",
     "[| ?n < LENGTH(?'a); ?m < LENGTH(?'a) |]
      ==> (2 ^ ?n = 2 ^ ?m) = (?n = ?m)",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 8, template_hole 7)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 8, template_hole 7))],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1))),
             template_var 1),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1))),
             template_var 0)),
         template_equation (template_var 1, template_var 0)))),
    ("More_Word.mask_eqI",
     "[| and ?x (mask ?n) = and ?y (mask ?n);
         and ?x (not (mask ?n)) = and ?y (not (mask ?n)) |]
      ==> ?x = ?y",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 2),
            template_app (template_hole 1, template_var 1)),
          template_app
           (template_app (template_hole 2, template_var 0),
            template_app (template_hole 1, template_var 1))),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 2),
            template_app
             (template_hole 0,
              template_app (template_hole 1, template_var 1))),
          template_app
           (template_app (template_hole 2, template_var 0),
            template_app
             (template_hole 0,
              template_app (template_hole 1, template_var 1))))],
       template_equation (template_var 2, template_var 0))),
    ("More_Word.less_2p_is_upper_bits_unset",
     "(?p < 2 ^ ?n) =
      (?n < LENGTH(?'a) & (ALL n'>=?n. n' < LENGTH(?'a) --> ~ bit ?p n'))",
     template_equation
      (template_app
        (template_app (template_hole 13, template_var 1),
         template_app
          (template_app
            (template_hole 12,
             template_app
              (template_hole 11,
               template_app (template_hole 10, template_hole 9))),
           template_var 0)),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 0),
             template_app (template_hole 6, template_hole 5))),
         template_app (template_hole 4, t_empty)))),
    ("More_Word.Suc_2p_unat_mask",
     "?n < LENGTH(?'a) ==>
      Suc (2 ^ ?n * ?k + unat (mask ?n)) = 2 ^ ?n * (?k + 1)",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 12, template_hole 11))],
       template_equation
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_hole 5,
                         template_app (template_hole 4, template_hole 3))),
                     template_var 1)),
                 template_var 0)),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)))),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_hole 3))),
               template_var 1)),
           template_app
            (template_app (template_hole 8, template_var 0),
             template_hole 0))))),
    ("More_Word.word_less_two_pow_divD",
     "?x < 2 ^ ?n div 2 ^ ?m ==> ?m <= ?n & ?x < 2 ^ (?n - ?m)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_hole 3))),
                template_var 1)),
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_hole 3))),
              template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)),
             template_app
              (template_app (template_hole 8, template_var 2),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_hole 3))),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))))
           ))),
    ("More_Word.unat_ucast_no_overflow_le",
     "[| unat ?b < 2 ^ LENGTH(?'a); LENGTH(?'a) < LENGTH(?'b) |]
      ==> (ucast ?f < ?b) = (unat ?f < unat ?b)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 12, template_var 1),
          template_app
           (template_app
             (template_hole 11,
              template_app
               (template_hole 10,
                template_app (template_hole 9, template_hole 8))),
            template_app (template_hole 7, template_hole 6))),
        template_inequation
         (less_than, template_app (template_hole 7, template_hole 6),
          template_app (template_hole 5, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_var 1),
         template_app
          (template_app
            (template_hole 13,
             template_app (template_hole 0, template_var 0)),
           template_app (template_hole 12, template_var 1))))),
    ("More_Word.swap_with_xor",
     "[| ?x = xor ?a ?b; ?y = xor ?b ?x; ?z = xor ?x ?y |]
      ==> ?z = ?b & ?y = ?a",
     template_implication
      ([template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 1, template_var 3),
            template_var 2)),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 1, template_var 2),
            template_var 4)),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 1, template_var 4),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 3))
           ))),
    ("More_Word.ucast_mono_le'",
     "[| unat ?y < 2 ^ LENGTH(?'b); LENGTH(?'b) < LENGTH(?'a); ?x <= ?y |]
      ==> ucast ?x <= ucast ?y",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 11, template_var 1),
          template_app
           (template_app
             (template_hole 10,
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_hole 7))),
            template_app (template_hole 6, template_hole 5))),
        template_inequation
         (less_than, template_app (template_hole 6, template_hole 5),
          template_app (template_hole 4, template_hole 3)),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("More_Word.word_power_increasing",
     "[| 2 ^ ?x < 2 ^ ?y; ?x < LENGTH(?'a); ?y < LENGTH(?'a) |]
      ==> ?x < ?y",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3))),
            template_var 1),
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3))),
            template_var 0)),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 1, template_hole 0)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 1, template_hole 0))],
       template_inequation (less_than, template_var 1, template_var 0))),
    ("More_Word.power_le_mono",
     "[| 2 ^ ?n <= 2 ^ ?m; ?n < LENGTH(?'a); ?m < LENGTH(?'a) |]
      ==> ?n <= ?m",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4))),
            template_var 1),
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4))),
            template_var 0)),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 2, template_hole 1)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 2, template_hole 1))],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("More_Word.sofl_test",
     "(sint ?x + sint ?y = sint (?x + ?y)) =
      (drop_bit (size ?x - 1) (and (xor (?x + ?y) ?x) (xor (?x + ?y) ?y)) =
       0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 10,
             template_app (template_hole 9, template_var 1)),
           template_app (template_hole 9, template_var 0)),
         template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 1),
             template_var 0))),
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 1)),
               template_hole 3)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 8, template_var 1),
                     template_var 0)),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 8, template_var 1),
                   template_var 0)),
               template_var 0))),
         template_hole 0))),
    ("More_Word.and_mask_arith'",
     "0 < ?n ==>
      and ?w (mask ?n) = ?w * 2 ^ (size ?w - ?n) div 2 ^ (size ?w - ?n)",
     template_implication
      ([template_inequation (less_than, template_hole 11, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 9, template_var 0),
           template_app (template_hole 8, template_var 1)),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 0),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2))),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 0)),
                   template_var 1)))),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2))),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_var 1)))))),
    ("More_Word.upper_bits_unset_is_l2p",
     "?n < LENGTH(?'a) ==>
      (ALL n'>=?n. n' < LENGTH(?'a) --> ~ bit ?p n') = (?p < 2 ^ ?n)",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 12, template_hole 11))],
       template_equation
        (template_app (template_hole 9, t_empty),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 1))))),
    ("More_Word.unat_mult_power_lem",
     "?k < 2 ^ (LENGTH(?'a) - ?sz) ==>
      unat (2 ^ ?sz * word_of_nat ?k) = 2 ^ ?sz * ?k",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 13,
              template_app
               (template_hole 12,
                template_app (template_hole 11, template_hole 10))),
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_hole 7)),
              template_var 0)))],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app (template_hole 11, template_hole 10))),
                 template_var 0)),
             template_app (template_hole 1, template_var 1))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_hole 12,
                   template_app (template_hole 11, template_hole 10))),
               template_var 0)),
           template_var 1)))),
    ("More_Word.of_nat_mono_maybe'",
     "[| ?x < 2 ^ LENGTH(?'a); ?y < 2 ^ LENGTH(?'a) |]
      ==> (?y < ?x) = (word_of_nat ?y < word_of_nat ?x)",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5))),
            template_app (template_hole 4, template_hole 3))),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5))),
            template_app (template_hole 4, template_hole 3)))],
       template_equation
        (template_app
          (template_app (template_hole 9, template_var 0), template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_app (template_hole 0, template_var 1))))),
    ("More_Word.of_nat_mono_maybe_le",
     "[| ?x < 2 ^ LENGTH(?'a); ?y < 2 ^ LENGTH(?'a) |]
      ==> (?y <= ?x) = (word_of_nat ?y <= word_of_nat ?x)",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 9,
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_hole 6))),
            template_app (template_hole 5, template_hole 4))),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 9,
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_hole 6))),
            template_app (template_hole 5, template_hole 4)))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_app (template_hole 0, template_var 1))))),
    ("More_Word.of_nat_inj",
     "[| ?x < 2 ^ LENGTH(?'a); ?y < 2 ^ LENGTH(?'a) |]
      ==> (word_of_nat ?x = word_of_nat ?y) = (?x = ?y)",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 9,
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_hole 6))),
            template_app (template_hole 5, template_hole 4))),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 9,
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_hole 6))),
            template_app (template_hole 5, template_hole 4)))],
       template_bimplication
        (template_equation
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 1, template_var 0)),
         template_equation (template_var 1, template_var 0)))),
    ("More_Word.push_bit_word_eq_nonzero",
     "[| ?w < 2 ^ ?m; ?m + ?n < LENGTH(?'a); ?w ~= 0 |]
      ==> push_bit ?n ?w ~= 0",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app
             (template_hole 11,
              template_app
               (template_hole 10,
                template_app (template_hole 9, template_hole 8))),
            template_var 1)),
        template_inequation
         (less_than,
          template_app
           (template_app (template_hole 6, template_var 1), template_var 0),
          template_app (template_hole 5, template_hole 4)),
        template_negation
         (template_equation (template_var 2, template_hole 1))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_hole 1)
           ))),
    ("More_Word.sint_of_int_eq",
     "[| - (2 ^ (LENGTH(?'a) - 1)) <= ?x; ?x < 2 ^ (LENGTH(?'a) - 1) |]
      ==> sint (word_of_int ?x) = ?x",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 12,
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_hole 8))),
              template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_hole 5)),
                template_hole 4))),
          template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 11,
              template_app
               (template_hole 10,
                template_app (template_hole 9, template_hole 8))),
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5)),
              template_hole 4)))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("More_Word.word_atLeastLessThan_Suc_atLeastAtMost_union",
     "[| ?m ~= - 1; ?l <= ?m; ?m <= ?u |]
      ==> {?l..?m} Un {?m + 1..?u} = {?l..?u}",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 2,
              template_app (template_hole 6, template_hole 5))
            ),
        template_inequation (less_equals, template_var 1, template_var 2),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_hole 5)),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("More_Word.word_of_nat_inj",
     "[| ?x < 2 ^ LENGTH(?'a); ?y < 2 ^ LENGTH(?'a);
         word_of_nat ?x = word_of_nat ?y |]
      ==> ?x = ?y",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5))),
            template_app (template_hole 4, template_hole 3))),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5))),
            template_app (template_hole 4, template_hole 3))),
        template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("More_Word.of_nat_neq_iff_word",
     "?x mod 2 ^ LENGTH(?'a) ~= ?y mod 2 ^ LENGTH(?'a) ==>
      (word_of_nat ?x ~= word_of_nat ?y) = (?x ~= ?y)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 9, template_var 1),
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_hole 7,
                      template_app (template_hole 6, template_hole 5))),
                  template_app (template_hole 4, template_hole 3))),
              template_app
               (template_app (template_hole 9, template_var 0),
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_hole 7,
                      template_app (template_hole 6, template_hole 5))),
                  template_app (template_hole 4, template_hole 3))))
            )],
       template_bimplication
        (template_negation
          (
             template_equation
              (template_app (template_hole 0, template_var 1),
               template_app (template_hole 0, template_var 0))
             ),
         template_negation
          (template_equation (template_var 1, template_var 0))))),
    ("More_Word.word_mult_less_mono1",
     "[| ?i < ?j; 0 < ?k; unat ?j * unat ?k < 2 ^ LENGTH(?'a) |]
      ==> ?i * ?k < ?j * ?k",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_inequation (less_than, template_hole 10, template_var 0),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 1)),
            template_app (template_hole 7, template_var 0)),
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3))),
            template_app (template_hole 2, template_hole 1)))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("More_Word.word_mult_le_mono1",
     "[| ?i <= ?j; 0 < ?k; unat ?j * unat ?k < 2 ^ LENGTH(?'a) |]
      ==> ?i * ?k <= ?j * ?k",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_than, template_hole 10, template_var 0),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 1)),
            template_app (template_hole 7, template_var 0)),
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3))),
            template_app (template_hole 2, template_hole 1)))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("More_Word.word_sub_mono",
     "[| ?a <= ?c; ?d <= ?b; ?a - ?b <= ?a; ?c - ?d <= ?c |]
      ==> ?a - ?b <= ?c - ?d",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_equals, template_var 1, template_var 0),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 0, template_var 3), template_var 0),
          template_var 3),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 0, template_var 2), template_var 1),
          template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("More_Word.word_sub_mono2",
     "[| ?a + ?b <= ?c + ?d; ?c <= ?a; ?b <= ?a + ?b; ?d <= ?c + ?d |]
      ==> ?b <= ?d",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 0, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 0, template_var 1),
            template_var 0)),
        template_inequation (less_equals, template_var 1, template_var 3),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 0, template_var 3),
            template_var 2)),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 0, template_var 1),
            template_var 0))],
       template_inequation (less_equals, template_var 2, template_var 0))),
    ("More_Word.le_2p_upper_bits",
     "[| ?p <= 2 ^ ?n - 1; ?n < LENGTH(?'a) |]
      ==> ALL n'>=?n. n' < LENGTH(?'a) --> ~ bit ?p n'",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app
             (template_hole 13,
              template_app
               (template_app
                 (template_hole 12,
                  template_app
                   (template_hole 11,
                    template_app (template_hole 10, template_hole 9))),
                template_var 0)),
            template_hole 8)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 6, template_hole 5))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("More_Word.div_power_helper",
     "[| ?x <= ?y; ?y < LENGTH(?'a) |]
      ==> (2 ^ ?y - 1) div 2 ^ ?x = 2 ^ (?y - ?x) - 1",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 10, template_hole 9))],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_hole 2))),
                   template_var 0)),
               template_hole 1)),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2))),
             template_var 1)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2))),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1))),
           template_hole 1)))),
    ("More_Word.Suc_div_unat_helper",
     "[| ?sz < LENGTH(?'a); ?us <= ?sz |]
      ==> 2 ^ (?sz - ?us) = Suc (unat ((2 ^ ?sz - 1) div 2 ^ ?us))",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 15, template_hole 14)),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_hole 10,
               template_app (template_hole 9, template_hole 8))),
           template_app
            (template_app (template_hole 7, template_var 1),
             template_var 0)),
         template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_hole 1,
                           template_app
                            (template_hole 9, template_hole 8))),
                       template_var 1)),
                   template_hole 0)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app (template_hole 9, template_hole 8))),
                 template_var 0))))))),
    ("More_Word.word_power_nonzero",
     "[| ?x < 2 ^ (LENGTH(?'a) - ?n); ?n < LENGTH(?'a); ?x ~= 0 |]
      ==> ?x * 2 ^ ?n ~= 0",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 11,
              template_app
               (template_hole 10,
                template_app (template_hole 9, template_hole 8))),
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5)),
              template_var 0))),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 6, template_hole 5)),
        template_negation
         (template_equation (template_var 1, template_hole 1))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_hole 10,
                     template_app (template_hole 9, template_hole 8))),
                 template_var 0)),
             template_hole 1)
           ))),
    ("More_Word.word_of_int_bin_cat_eq_iff",
     "LENGTH(?'a) + LENGTH(?'b) <= LENGTH(?'c) ==>
      (word_of_int (concat_bit LENGTH(?'b) (uint ?b) (uint ?a)) =
       word_of_int (concat_bit LENGTH(?'b) (uint ?d) (uint ?c))) =
      (?b = ?d & ?a = ?c)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 15,
              template_app (template_hole 14, template_hole 13)),
            template_app (template_hole 12, template_hole 11)),
          template_app (template_hole 10, template_hole 9))],
       template_bimplication
        (template_equation
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 12, template_hole 11)),
                 template_app (template_hole 4, template_var 3)),
               template_app (template_hole 3, template_var 2))),
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 12, template_hole 11)),
                 template_app (template_hole 4, template_var 1)),
               template_app (template_hole 3, template_var 0)))),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0))
             )))),
    ("More_Word.word_less_power_trans2",
     "[| ?n < 2 ^ (?m - ?k); ?k <= ?m; ?m < LENGTH(?'a) |]
      ==> ?n * 2 ^ ?k < 2 ^ ?m",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app
             (template_hole 9,
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_hole 6))),
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0))),
        template_inequation (less_equals, template_var 0, template_var 1),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 2, template_hole 1))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_hole 8,
                 template_app (template_hole 7, template_hole 6))),
             template_var 0)),
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_hole 8,
               template_app (template_hole 7, template_hole 6))),
           template_var 1)))),
    ("More_Word.word_less_power_trans",
     "[| ?n < 2 ^ (?m - ?k); ?k <= ?m; ?m < LENGTH(?'a) |]
      ==> 2 ^ ?k * ?n < 2 ^ ?m",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app
             (template_hole 9,
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_hole 6))),
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0))),
        template_inequation (less_equals, template_var 0, template_var 1),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 2, template_hole 1))],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_hole 6))),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_hole 8,
               template_app (template_hole 7, template_hole 6))),
           template_var 1)))),
    ("More_Word.word_less_two_pow_divI",
     "[| ?x < 2 ^ (?n - ?m); ?m <= ?n; ?n < LENGTH(?'a) |]
      ==> ?x < 2 ^ ?n div 2 ^ ?m",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app
             (template_hole 9,
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_hole 6))),
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0))),
        template_inequation (less_equals, template_var 0, template_var 1),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 2, template_hole 1))],
       template_inequation
        (less_than, template_var 2,
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_hole 6))),
               template_var 1)),
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_hole 8,
                 template_app (template_hole 7, template_hole 6))),
             template_var 0))))),
    ("More_Word.word_power_less_diff",
     "[| 2 ^ ?n * ?q < 2 ^ ?m; ?q < 2 ^ (LENGTH(?'a) - ?n) |]
      ==> ?q < 2 ^ (?m - ?n)",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_hole 3))),
                template_var 2)),
            template_var 1),
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3))),
            template_var 0)),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3))),
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_hole 0)),
              template_var 2)))],
       template_inequation
        (less_than, template_var 1,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3))),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 2))))),
    ("More_Word.word_less_power_trans_ofnat",
     "[| ?n < 2 ^ (?m - ?k); ?k <= ?m; ?m < LENGTH(?'a) |]
      ==> word_of_nat ?n * 2 ^ ?k < 2 ^ ?m",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app
             (template_hole 12,
              template_app
               (template_hole 11,
                template_app (template_hole 10, template_hole 9))),
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0))),
        template_inequation (less_equals, template_var 0, template_var 1),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 6, template_hole 5))],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 2)),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 0,
                 template_app (template_hole 10, template_hole 9))),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app (template_hole 10, template_hole 9))),
           template_var 1)))),
    ("More_Word.test_bit_split_eq",
     "(word_split ?c = (?a, ?b)) =
      ((ALL n. bit ?b n = (n < size ?b & bit ?c n)) &
       (ALL m. bit ?a m = (m < size ?a & bit ?c (m + size ?b))))",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app (template_hole 10, template_var 2)),
         template_app
          (template_app (template_hole 9, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, t_empty)),
         template_app (template_hole 7, t_empty)))),
    ("More_Word.test_bit_split'",
     "word_split ?c = (?a, ?b) -->
      (ALL n m.
          bit ?b n = (n < size ?b & bit ?c n) &
          bit ?a m = (m < size ?a & bit ?c (m + size ?b)))",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 13,
             template_app
              (template_app
                (template_hole 12,
                 template_app (template_hole 11, template_var 2)),
               template_app
                (template_app (template_hole 10, template_var 1),
                 template_var 0))),
           template_app (template_hole 9, t_empty))
         )),
    ("More_Word.of_nat_less_two_pow_div_set",
     "?n < LENGTH(?'a) ==>
      {x. x < 2 ^ ?n div 2 ^ ?m} =
      word_of_nat ` {k. k < 2 ^ ?n div 2 ^ ?m}",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 15, template_hole 14))],
       template_equation
        (template_app (template_hole 12, t_empty),
         template_app
          (template_app (template_hole 5, template_hole 4),
           template_app (template_hole 3, t_empty))))),
    ("More_Word.test_bit_rcat",
     "[| ?sw = size (hd ?wl); ?rc = word_rcat ?wl |]
      ==> bit ?rc ?n =
          (?n < size ?rc &
           ?n div ?sw < length ?wl &
           bit (rev ?wl ! (?n div ?sw)) (?n mod ?sw))",
     template_implication
      ([template_equation
         (template_var 3,
          template_app
           (template_hole 14,
            template_app (template_hole 13, template_var 2))),
        template_equation
         (template_var 1, template_app (template_hole 11, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 9, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_var 0),
               template_app (template_hole 6, template_var 1))),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_var 3)),
                 template_app (template_hole 4, template_var 2))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 2)),
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_var 3))),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3))))))),
    ("More_Word.word_add_less_iff",
     "[| unat ?i + unat ?k < 2 ^ LENGTH(?'a);
         unat ?j + unat ?k < 2 ^ LENGTH(?'a) |]
      ==> (?i + ?k < ?j + ?k) = (?i < ?j)",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 2)),
            template_app (template_hole 9, template_var 1)),
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5))),
            template_app (template_hole 4, template_hole 3))),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 0)),
            template_app (template_hole 9, template_var 1)),
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5))),
            template_app (template_hole 4, template_hole 3)))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("More_Word.word_add_le_iff",
     "[| unat ?i + unat ?k < 2 ^ LENGTH(?'a);
         unat ?j + unat ?k < 2 ^ LENGTH(?'a) |]
      ==> (?i + ?k <= ?j + ?k) = (?i <= ?j)",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 2)),
            template_app (template_hole 9, template_var 1)),
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5))),
            template_app (template_hole 4, template_hole 3))),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 0)),
            template_app (template_hole 9, template_var 1)),
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5))),
            template_app (template_hole 4, template_hole 3)))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("More_Word.word_2p_mult_inc",
     "[| 2 * 2 ^ ?n < 2 * 2 ^ ?m; Suc ?n < LENGTH(?'a) |]
      ==> 2 ^ ?n < 2 ^ ?m",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5))),
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_hole 5))),
              template_var 1)),
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5))),
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_hole 5))),
              template_var 0))),
        template_inequation
         (less_than, template_app (template_hole 2, template_var 1),
          template_app (template_hole 1, template_hole 0))],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 7,
               template_app (template_hole 6, template_hole 5))),
           template_var 1),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 7,
               template_app (template_hole 6, template_hole 5))),
           template_var 0)))),
    ("More_Word.test_bit_split",
     "word_split ?c = (?a, ?b) ==>
      (ALL n. bit ?b n = (n < size ?b & bit ?c n)) &
      (ALL m. bit ?a m = (m < size ?a & bit ?c (m + size ?b)))",
     template_implication
      ([template_equation
         (template_app (template_hole 11, template_var 2),
          template_app
           (template_app (template_hole 10, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9, template_app (template_hole 8, t_empty)),
             template_app (template_hole 8, t_empty))
           ))),
    ("More_Word.word_add_less_dest",
     "[| ?i + ?k < ?j + ?k; unat ?i + unat ?k < 2 ^ LENGTH(?'a);
         unat ?j + unat ?k < 2 ^ LENGTH(?'a) |]
      ==> ?i < ?j",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 9, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 9, template_var 0),
            template_var 1)),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 2)),
            template_app (template_hole 6, template_var 1)),
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2))),
            template_app (template_hole 1, template_hole 0))),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 0)),
            template_app (template_hole 6, template_var 1)),
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2))),
            template_app (template_hole 1, template_hole 0)))],
       template_inequation (less_than, template_var 2, template_var 0))),
    ("More_Word.word_mult_less_dest",
     "[| ?i * ?k < ?j * ?k; unat ?i * unat ?k < 2 ^ LENGTH(?'a);
         unat ?j * unat ?k < 2 ^ LENGTH(?'a) |]
      ==> ?i < ?j",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 9, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 9, template_var 0),
            template_var 1)),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 2)),
            template_app (template_hole 6, template_var 1)),
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2))),
            template_app (template_hole 1, template_hole 0))),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 0)),
            template_app (template_hole 6, template_var 1)),
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2))),
            template_app (template_hole 1, template_hole 0)))],
       template_inequation (less_than, template_var 2, template_var 0))),
    ("More_Word.word_add_le_dest",
     "[| ?i + ?k <= ?j + ?k; unat ?i + unat ?k < 2 ^ LENGTH(?'a);
         unat ?j + unat ?k < 2 ^ LENGTH(?'a) |]
      ==> ?i <= ?j",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 9, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 9, template_var 0),
            template_var 1)),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 2)),
            template_app (template_hole 6, template_var 1)),
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2))),
            template_app (template_hole 1, template_hole 0))),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 0)),
            template_app (template_hole 6, template_var 1)),
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2))),
            template_app (template_hole 1, template_hole 0)))],
       template_inequation (less_equals, template_var 2, template_var 0))),
    ("More_Word.mult_pow2_inj",
     "[| ?m + ?n <= LENGTH(?'a); ?x <= mask ?m; ?y <= mask ?m;
         ?x * 2 ^ ?n = ?y * 2 ^ ?n |]
      ==> ?x = ?y",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 10, template_var 3),
            template_var 2),
          template_app (template_hole 9, template_hole 8)),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 6, template_var 3)),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 6, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 1),
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_hole 0))),
              template_var 2)),
          template_app
           (template_app (template_hole 4, template_var 0),
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_hole 0))),
              template_var 2)))],
       template_equation (template_var 1, template_var 0))),
    ("More_Word.word_power_mod_div",
     "[| ?n < LENGTH(?'a); ?m < LENGTH(?'a) |]
      ==> ?x mod 2 ^ ?n div 2 ^ ?m = ?x div 2 ^ ?m mod 2 ^ (?n - ?m)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 9, template_hole 8)),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 9, template_hole 8))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 0),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1))),
                 template_var 2))),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1))),
             template_var 1)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 6, template_var 0),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1))),
                 template_var 1))),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1))),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)))))),
    ("More_Word.word_mult_less_iff",
     "[| 0 < ?k; unat ?i * unat ?k < 2 ^ LENGTH(?'a);
         unat ?j * unat ?k < 2 ^ LENGTH(?'a) |]
      ==> (?i * ?k < ?j * ?k) = (?i < ?j)",
     template_implication
      ([template_inequation (less_than, template_hole 11, template_var 2),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 1)),
            template_app (template_hole 8, template_var 2)),
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4))),
            template_app (template_hole 3, template_hole 2))),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 0)),
            template_app (template_hole 8, template_var 2)),
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4))),
            template_app (template_hole 3, template_hole 2)))],
       template_equation
        (template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 12, template_var 1),
           template_var 0)))),
    ("More_Word.word_mult_le_iff",
     "[| 0 < ?k; unat ?i * unat ?k < 2 ^ LENGTH(?'a);
         unat ?j * unat ?k < 2 ^ LENGTH(?'a) |]
      ==> (?i * ?k <= ?j * ?k) = (?i <= ?j)",
     template_implication
      ([template_inequation (less_than, template_hole 12, template_var 2),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 1)),
            template_app (template_hole 9, template_var 2)),
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5))),
            template_app (template_hole 4, template_hole 3))),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 0)),
            template_app (template_hole 9, template_var 2)),
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5))),
            template_app (template_hole 4, template_hole 3)))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("More_Word.word_subset_less",
     "[| {?x..?x + ?r - 1} <= {?y..?y + ?s - 1}; ?x <= ?x + ?r - 1;
         ?y <= ?y + ?s - 1; ?s ~= 0 |]
      ==> ?r <= ?s",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 7, template_var 3),
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)),
              template_hole 4)),
          template_app
           (template_app (template_hole 7, template_var 1),
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0)),
              template_hole 4))),
        template_inequation
         (less_equals, template_var 3,
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2)),
            template_hole 4)),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0)),
            template_hole 4)),
        template_negation
         (template_equation (template_var 0, template_hole 0))],
       template_inequation (less_equals, template_var 2, template_var 0))),
    ("More_Word.lsb0",
     "bit (or ?x ?y) 0 = (bit ?x 0 | bit ?y 0) &
      bit (and ?x ?y) 0 = (bit ?x 0 & bit ?y 0) &
      bit (xor ?x ?y) 0 = (bit ?x 0 ~= bit ?y 0) &
      bit (not ?x) 0 = (~ bit ?x 0)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 6, template_var 1),
                       template_var 0)),
                   template_hole 5)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 7, template_var 1),
                     template_hole 5)),
                 template_app
                  (template_app (template_hole 7, template_var 0),
                   template_hole 5)))),
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app (template_hole 3, template_var 1),
                         template_var 0)),
                     template_hole 5)),
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app (template_hole 7, template_var 1),
                       template_hole 5)),
                   template_app
                    (template_app (template_hole 7, template_var 0),
                     template_hole 5)))),
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app
                        (template_hole 7,
                         template_app
                          (template_app (template_hole 2, template_var 1),
                           template_var 0)),
                       template_hole 5)),
                   template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_hole 8,
                         template_app
                          (template_app (template_hole 7, template_var 1),
                           template_hole 5)),
                       template_app
                        (template_app (template_hole 7, template_var 0),
                         template_hole 5))))),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app (template_hole 0, template_var 1)),
                     template_hole 5)),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 7, template_var 1),
                     template_hole 5))))))
         )),
    ("More_Word.sint_1_cases",
     "[| [| LENGTH(?'a) = 1; ?a = 0; sint ?a = 0 |] ==> ?P;
         [| LENGTH(?'a) = 1; ?a = 1; sint 1 = - 1 |] ==> ?P;
         [| 1 < LENGTH(?'a); sint 1 = 1 |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_implication
         ([template_equation
            (template_app (template_hole 11, template_hole 10),
             template_hole 9)],
          template_implication
           ([template_equation (template_var 1, template_hole 7)],
            template_implication
             ([template_equation
                (template_app (template_hole 5, template_var 1),
                 template_hole 4)],
              template_predicate (template_var 0)))),
        template_implication
         ([template_equation
            (template_app (template_hole 11, template_hole 10),
             template_hole 9)],
          template_implication
           ([template_equation (template_var 1, template_hole 3)],
            template_implication
             ([template_equation
                (template_app (template_hole 5, template_hole 3),
                 template_app (template_hole 2, template_hole 1))],
              template_predicate (template_var 0)))),
        template_implication
         ([template_inequation
            (less_than, template_hole 9,
             template_app (template_hole 11, template_hole 10))],
          template_implication
           ([template_equation
              (template_app (template_hole 5, template_hole 3),
               template_hole 1)],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("More_Word.alignUp_div_helper",
     "[| ?k < 2 ^ (LENGTH(?'a) - ?n); ?x = 2 ^ ?n * word_of_nat ?k;
         ?a <= ?x; ?n < LENGTH(?'a); ?a mod 2 ^ ?n ~= 0 |]
      ==> ?a div 2 ^ ?n < word_of_nat ?k",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app
           (template_app
             (template_hole 17,
              template_app
               (template_hole 16,
                template_app (template_hole 15, template_hole 14))),
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 12, template_hole 11)),
              template_var 2))),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_hole 9,
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_hole 7,
                    template_app (template_hole 15, template_hole 14))),
                template_var 2)),
            template_app (template_hole 6, template_var 3))),
        template_inequation (less_equals, template_var 0, template_var 1),
        template_inequation
         (less_than, template_var 2,
          template_app (template_hole 12, template_hole 11)),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 3, template_var 0),
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_hole 7,
                      template_app (template_hole 15, template_hole 14))),
                  template_var 2)),
              template_hole 2)
            )],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_hole 7,
                 template_app (template_hole 15, template_hole 14))),
             template_var 2)),
         template_app (template_hole 6, template_var 3)))),
    ("More_Word.word_ops_nth_size",
     "?n < size ?x ==>
      bit (or ?x ?y) ?n = (bit ?x ?n | bit ?y ?n) &
      bit (and ?x ?y) ?n = (bit ?x ?n & bit ?y ?n) &
      bit (xor ?x ?y) ?n = (bit ?x ?n ~= bit ?y ?n) &
      bit (not ?x) ?n = (~ bit ?x ?n)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 9, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 5, template_var 1),
                         template_var 0)),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 6, template_var 1),
                       template_var 2)),
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_var 2)))),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app
                          (template_app (template_hole 3, template_var 1),
                           template_var 0)),
                       template_var 2)),
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_app (template_hole 6, template_var 1),
                         template_var 2)),
                     template_app
                      (template_app (template_hole 6, template_var 0),
                       template_var 2)))),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app
                          (template_hole 6,
                           template_app
                            (template_app (template_hole 2, template_var 1),
                             template_var 0)),
                         template_var 2)),
                     template_app
                      (template_hole 1,
                       template_app
                        (template_app
                          (template_hole 7,
                           template_app
                            (template_app (template_hole 6, template_var 1),
                             template_var 2)),
                         template_app
                          (template_app (template_hole 6, template_var 0),
                           template_var 2))))),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app (template_hole 0, template_var 1)),
                       template_var 2)),
                   template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 6, template_var 1),
                       template_var 2))))))
           ))),
    ("More_Word.word_add_offset_less",
     "[| ?y < 2 ^ ?n; ?x < 2 ^ ?m; ?sz < LENGTH(?'a);
         ?x < 2 ^ (LENGTH(?'a) - ?n); ?sz = ?m + ?n |]
      ==> ?x * 2 ^ ?n + ?y < 2 ^ ?sz",
     template_implication
      ([template_inequation
         (less_than, template_var 4,
          template_app
           (template_app
             (template_hole 11,
              template_app
               (template_hole 10,
                template_app (template_hole 9, template_hole 8))),
            template_var 3)),
        template_inequation
         (less_than, template_var 2,
          template_app
           (template_app
             (template_hole 11,
              template_app
               (template_hole 10,
                template_app (template_hole 9, template_hole 8))),
            template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 6, template_hole 5)),
        template_inequation
         (less_than, template_var 2,
          template_app
           (template_app
             (template_hole 11,
              template_app
               (template_hole 10,
                template_app (template_hole 9, template_hole 8))),
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 6, template_hole 5)),
              template_var 3))),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 3))],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_hole 10,
                     template_app (template_hole 9, template_hole 8))),
                 template_var 3))),
           template_var 4),
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_hole 10,
               template_app (template_hole 9, template_hole 8))),
           template_var 0)))),
    ("More_Word.msb1",
     "bit (or ?x ?y) (LENGTH(?'a) - Suc 0) =
      (bit ?x (LENGTH(?'a) - Suc 0) | bit ?y (LENGTH(?'a) - Suc 0)) &
      bit (and ?x ?y) (LENGTH(?'a) - Suc 0) =
      (bit ?x (LENGTH(?'a) - Suc 0) & bit ?y (LENGTH(?'a) - Suc 0)) &
      bit (xor ?x ?y) (LENGTH(?'a) - Suc 0) =
      (bit ?x (LENGTH(?'a) - Suc 0) ~= bit ?y (LENGTH(?'a) - Suc 0)) &
      bit (not ?x) (LENGTH(?'a) - Suc 0) =
      (~ bit ?x (LENGTH(?'a) - Suc 0))",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 13,
             template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app
                      (template_app (template_hole 10, template_var 1),
                       template_var 0)),
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app (template_hole 8, template_hole 7)),
                     template_app (template_hole 6, template_hole 5)))),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 11, template_var 1),
                     template_app
                      (template_app
                        (template_hole 9,
                         template_app (template_hole 8, template_hole 7)),
                       template_app (template_hole 6, template_hole 5)))),
                 template_app
                  (template_app (template_hole 11, template_var 0),
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app (template_hole 8, template_hole 7)),
                     template_app (template_hole 6, template_hole 5)))))),
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app
                      (template_hole 11,
                       template_app
                        (template_app (template_hole 3, template_var 1),
                         template_var 0)),
                     template_app
                      (template_app
                        (template_hole 9,
                         template_app (template_hole 8, template_hole 7)),
                       template_app (template_hole 6, template_hole 5)))),
                 template_app
                  (template_app
                    (template_hole 13,
                     template_app
                      (template_app (template_hole 11, template_var 1),
                       template_app
                        (template_app
                          (template_hole 9,
                           template_app (template_hole 8, template_hole 7)),
                         template_app (template_hole 6, template_hole 5)))),
                   template_app
                    (template_app (template_hole 11, template_var 0),
                     template_app
                      (template_app
                        (template_hole 9,
                         template_app (template_hole 8, template_hole 7)),
                       template_app (template_hole 6, template_hole 5)))))),
             template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_app
                    (template_hole 12,
                     template_app
                      (template_app
                        (template_hole 11,
                         template_app
                          (template_app (template_hole 2, template_var 1),
                           template_var 0)),
                       template_app
                        (template_app
                          (template_hole 9,
                           template_app (template_hole 8, template_hole 7)),
                         template_app (template_hole 6, template_hole 5)))),
                   template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_hole 12,
                         template_app
                          (template_app (template_hole 11, template_var 1),
                           template_app
                            (template_app
                              (template_hole 9,
                               template_app
                                (template_hole 8, template_hole 7)),
                             template_app
                              (template_hole 6, template_hole 5)))),
                       template_app
                        (template_app (template_hole 11, template_var 0),
                         template_app
                          (template_app
                            (template_hole 9,
                             template_app
                              (template_hole 8, template_hole 7)),
                           template_app
                            (template_hole 6, template_hole 5))))))),
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app
                      (template_hole 11,
                       template_app (template_hole 0, template_var 1)),
                     template_app
                      (template_app
                        (template_hole 9,
                         template_app (template_hole 8, template_hole 7)),
                       template_app (template_hole 6, template_hole 5)))),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 11, template_var 1),
                     template_app
                      (template_app
                        (template_hole 9,
                         template_app (template_hole 8, template_hole 7)),
                       template_app
                        (template_hole 6, template_hole 5))))))))
         )),
    ("More_Word.msb0",
     "bit (or ?x ?y) (LENGTH(?'a) - Suc ?i) =
      (bit ?x (LENGTH(?'a) - Suc ?i) | bit ?y (LENGTH(?'a) - Suc ?i)) &
      bit (and ?x ?y) (LENGTH(?'a) - Suc ?i) =
      (bit ?x (LENGTH(?'a) - Suc ?i) & bit ?y (LENGTH(?'a) - Suc ?i)) &
      bit (xor ?x ?y) (LENGTH(?'a) - Suc ?i) =
      (bit ?x (LENGTH(?'a) - Suc ?i) ~= bit ?y (LENGTH(?'a) - Suc ?i)) &
      bit (not ?x) (LENGTH(?'a) - Suc ?i) =
      (~ bit ?x (LENGTH(?'a) - Suc ?i))",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app (template_hole 9, template_var 2),
                       template_var 1)),
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app (template_hole 7, template_hole 6)),
                     template_app (template_hole 5, template_var 0)))),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 10, template_var 2),
                     template_app
                      (template_app
                        (template_hole 8,
                         template_app (template_hole 7, template_hole 6)),
                       template_app (template_hole 5, template_var 0)))),
                 template_app
                  (template_app (template_hole 10, template_var 1),
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app (template_hole 7, template_hole 6)),
                     template_app (template_hole 5, template_var 0)))))),
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app
                      (template_hole 10,
                       template_app
                        (template_app (template_hole 3, template_var 2),
                         template_var 1)),
                     template_app
                      (template_app
                        (template_hole 8,
                         template_app (template_hole 7, template_hole 6)),
                       template_app (template_hole 5, template_var 0)))),
                 template_app
                  (template_app
                    (template_hole 12,
                     template_app
                      (template_app (template_hole 10, template_var 2),
                       template_app
                        (template_app
                          (template_hole 8,
                           template_app (template_hole 7, template_hole 6)),
                         template_app (template_hole 5, template_var 0)))),
                   template_app
                    (template_app (template_hole 10, template_var 1),
                     template_app
                      (template_app
                        (template_hole 8,
                         template_app (template_hole 7, template_hole 6)),
                       template_app (template_hole 5, template_var 0)))))),
             template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app
                      (template_app
                        (template_hole 10,
                         template_app
                          (template_app (template_hole 2, template_var 2),
                           template_var 1)),
                       template_app
                        (template_app
                          (template_hole 8,
                           template_app (template_hole 7, template_hole 6)),
                         template_app (template_hole 5, template_var 0)))),
                   template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_hole 11,
                         template_app
                          (template_app (template_hole 10, template_var 2),
                           template_app
                            (template_app
                              (template_hole 8,
                               template_app
                                (template_hole 7, template_hole 6)),
                             template_app
                              (template_hole 5, template_var 0)))),
                       template_app
                        (template_app (template_hole 10, template_var 1),
                         template_app
                          (template_app
                            (template_hole 8,
                             template_app
                              (template_hole 7, template_hole 6)),
                           template_app
                            (template_hole 5, template_var 0))))))),
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app
                      (template_hole 10,
                       template_app (template_hole 0, template_var 2)),
                     template_app
                      (template_app
                        (template_hole 8,
                         template_app (template_hole 7, template_hole 6)),
                       template_app (template_hole 5, template_var 0)))),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 10, template_var 2),
                     template_app
                      (template_app
                        (template_hole 8,
                         template_app (template_hole 7, template_hole 6)),
                       template_app (template_hole 5, template_var 0))))))))
         ))]:
   (string * thm * template) list
### theory "Draft.More_WordTemplates"
### 0.554s elapsed time, 0.690s cpu time, 0.036s GC time
val it = (): unit
