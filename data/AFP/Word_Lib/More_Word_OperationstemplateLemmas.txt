   [("More_Word_Operations.limited_and_from_bool",
     "limited_and (from_bool ?b) 1",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("More_Word_Operations.is_aligned_alignUp",
     "is_aligned (alignUp ?p ?n) ?n",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 0)
         )),
    ("More_Word_Operations.to_bool_from_bool",
     "to_bool (from_bool ?r) = ?r",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("More_Word_Operations.ptr_add_0", "ptr_add ?ref 0 = ?ref",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("More_Word_Operations.sign_extended_sign_extend",
     "sign_extended ?n (sign_extend ?n ?w)",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("More_Word_Operations.word_log2_max", "word_log2 ?w < size ?w",
     template_inequation
      (less_than, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("More_Word_Operations.word_clz_max", "word_clz ?w <= size ?w",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("More_Word_Operations.word_ctz_le", "word_ctz ?w <= LENGTH(?'a)",
     template_inequation
      (less_equals, template_app (template_hole 2, template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("More_Word_Operations.from_bool_1", "(from_bool ?P = 1) = ?P",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_var 0)),
    ("More_Word_Operations.ge_0_from_bool", "(0 < from_bool ?P) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("More_Word_Operations.unat_of_nat_ctz_mw",
     "unat (word_of_nat (word_ctz ?w)) = word_ctz ?w",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app (template_hole 0, template_var 0))),
    ("More_Word_Operations.unat_of_nat_ctz_smw",
     "unat (word_of_nat (word_ctz ?w)) = word_ctz ?w",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app (template_hole 0, template_var 0))),
    ("More_Word_Operations.to_bool_neq_0", "to_bool ?x = (?x ~= 0)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("More_Word_Operations.to_bool_eq_0", "(~ to_bool ?x) = (?x = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 0))
            )],
       template_equation (template_var 0, template_hole 0))),
    ("More_Word_Operations.fold_eq_0_to_bool", "(?v = 0) = (~ to_bool ?v)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("More_Word_Operations.from_bool_0", "(from_bool ?x = 0) = (~ ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("More_Word_Operations.from_bool_neq_0", "(from_bool ?b ~= 0) = ?b",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)),
       template_var 0)),
    ("More_Word_Operations.from_bool_mask_simp",
     "and (from_bool ?r) 1 = from_bool ?r",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_app (template_hole 1, template_var 0))),
    ("More_Word_Operations.take_bit_word_ctz_eq",
     "take_bit LENGTH(?'a) (word_ctz ?w) = word_ctz ?w",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app (template_hole 2, template_hole 1)),
         template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("More_Word_Operations.pop_count_0_imp_0",
     "(pop_count ?w = 0) = (?w = 0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("More_Word_Operations.to_bool_and_1", "to_bool (and ?x 1) = bit ?x 0",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("More_Word_Operations.alignUp_distance",
     "alignUp ?q ?sz - ?q <= mask ?sz",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_var 1),
       template_app (template_hole 0, template_var 0))),
    ("More_Word_Operations.sign_extended_iff_sign_extend",
     "sign_extended ?n ?w = (sign_extend ?n ?w = ?w)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 0))),
    ("More_Word_Operations.from_to_bool_last_bit",
     "from_bool (to_bool (and ?x 1)) = and ?x 1",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("More_Word_Operations.word_log2_highest",
     "bit ?w ?i ==> ?i <= word_log2 ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_var 0,
         template_app (template_hole 0, template_var 1)))),
    ("More_Word_Operations.word_log2_maximum",
     "bit ?w ?n ==> ?n <= word_log2 ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_var 0,
         template_app (template_hole 0, template_var 1)))),
    ("More_Word_Operations.bit_word_log2",
     "?w ~= 0 ==> bit ?w (word_log2 ?w)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 0))
           ))),
    ("More_Word_Operations.from_bool_eqI",
     "from_bool ?x = from_bool ?y ==> ?x = ?y",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("More_Word_Operations.from_bool_eq_if",
     "(from_bool ?Q = (if ?P then 1 else 0)) = (?P = ?Q)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1),
           template_hole 0)),
       template_equation (template_var 0, template_var 1))),
    ("More_Word_Operations.from_bool_eq_if'",
     "((if ?P then 1 else 0) = from_bool ?Q) = (?P = ?Q)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 2),
           template_hole 1),
         template_app (template_hole 0, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("More_Word_Operations.sign_extend_sign_extend_eq",
     "sign_extend ?m (sign_extend ?n ?w) = sign_extend (min ?m ?n) ?w",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("More_Word_Operations.word_clz_nonzero_max",
     "?w ~= 0 ==> word_clz ?w < size ?w",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_inequation
        (less_than, template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("More_Word_Operations.word_ctz_less",
     "?w ~= 0 ==> word_ctz ?w < LENGTH(?'a)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_inequation
        (less_than, template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)))),
    ("More_Word_Operations.word_ctz_unfold'",
     "word_ctz ?w = Min (insert LENGTH(?'a) {n. bit ?w n})",
     template_equation
      (template_app (template_hole 6, template_var 0),
       template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2)),
           template_app (template_hole 1, t_empty))))),
    ("More_Word_Operations.alignUp_unfold",
     "alignUp ?w ?n = and (?w + mask ?n) (not (mask ?n))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_hole 0,
           template_app (template_hole 1, template_var 0))))),
    ("More_Word_Operations.lshift_limited_and",
     "limited_and ?x ?z ==> limited_and (?x << ?n) (?z << ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("More_Word_Operations.rshift_limited_and",
     "limited_and ?x ?z ==> limited_and (?x >> ?n) (?z >> ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("More_Word_Operations.word_ctz_unfold",
     "word_ctz ?w = length (takeWhile (Not o bit ?w) [0..<LENGTH(?'a)])",
     template_equation
      (template_app (template_hole 9, template_var 0),
       template_app
        (template_hole 8,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_app (template_hole 4, template_var 0))),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app (template_hole 1, template_hole 0)))))),
    ("More_Word_Operations.alignUp_le", "alignUp ?p ?n <= ?p + 2 ^ ?n - 1",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))),
               template_var 0))),
         template_hole 0))),
    ("More_Word_Operations.word_ctz_not_minus_1",
     "1 < LENGTH(?'a) ==> word_of_nat (word_ctz ?w) ~= - 1",
     template_implication
      ([template_inequation
         (less_than, template_hole 8,
          template_app (template_hole 7, template_hole 6))],
       template_negation
        (
           template_equation
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_app (template_hole 1, template_hole 0))
           ))),
    ("More_Word_Operations.sign_extended_weaken",
     "[| sign_extended ?n ?w; ?n <= ?m |] ==> sign_extended ?m ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0), template_var 1)
           ))),
    ("More_Word_Operations.word_log2_unfold",
     "word_log2 ?w = (if ?w = 0 then 0 else Max {n. bit ?w n})",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_hole 4)),
               template_hole 3),
             template_app
              (template_hole 2, template_app (template_hole 1, t_empty)))
           ))),
    ("More_Word_Operations.is_aligned_limited_and",
     "is_aligned ?p ?n ==> limited_and ?p (not (2 ^ ?n - 1))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 1),
             template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_hole 3,
                         template_app (template_hole 2, template_hole 1))),
                     template_var 0)),
                 template_hole 0)))
           ))),
    ("More_Word_Operations.alignUp_plus",
     "is_aligned ?w ?us ==> alignUp (?w + ?a) ?us = ?w + alignUp ?a ?us",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1))))),
    ("More_Word_Operations.word_clz_sint_upper",
     "3 <= LENGTH(?'a) ==>
      sint (word_of_nat (word_clz ?w)) <= int LENGTH(?'a)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 9,
            template_app (template_hole 8, template_hole 7)),
          template_app (template_hole 6, template_hole 5))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_hole 0,
           template_app (template_hole 6, template_hole 5))))),
    ("More_Word_Operations.alignUp_idem",
     "[| is_aligned ?a ?n; ?n < LENGTH(?'a) |] ==> alignUp ?a ?n = ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 3, template_hole 2))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 1))),
    ("More_Word_Operations.word_log2_nth_not_set",
     "[| word_log2 ?w < ?i; ?i < size ?w |] ==> ~ bit ?w ?i",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 3, template_var 1),
          template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 2, template_var 1))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)
               )
           ))),
    ("More_Word_Operations.from_bool_to_bool_iff",
     "(?w = from_bool ?b) = (to_bool ?w = ?b & (?w = 0 | ?w = 1))",
     template_bimplication
      (template_equation
        (template_var 1, template_app (template_hole 5, template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 3, template_var 1)),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_hole 1)),
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_hole 0)))
           ))),
    ("More_Word_Operations.bin_sign_extend_iff",
     "?i < LENGTH(?'a) ==> bit (sign_extend ?e ?w) ?i = bit ?w (min ?e ?i)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 5, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2))))),
    ("More_Word_Operations.word_clz_sint_lower",
     "3 <= LENGTH(?'a) ==>
      - sint (word_of_nat (word_clz ?w)) <= int LENGTH(?'a)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 10,
            template_app (template_hole 9, template_hole 8)),
          template_app (template_hole 7, template_hole 6))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)))),
         template_app
          (template_hole 0,
           template_app (template_hole 7, template_hole 6))))),
    ("More_Word_Operations.limited_and_eq_id",
     "[| limited_and ?x ?z; and ?y ?z = ?z |] ==> and ?x ?y = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 0), template_var 1),
          template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 2))),
    ("More_Word_Operations.sign_extended_neq_mask",
     "[| sign_extended ?n ?ptr; ?m <= ?n |]
      ==> sign_extended ?n (and ?ptr (not (mask ?m)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("More_Word_Operations.unat_of_nat_word_log2",
     "LENGTH(?'a) < 2 ^ LENGTH(?'b) ==>
      unat (word_of_nat (word_log2 ?n)) = word_log2 ?n",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 11, template_hole 10),
          template_app
           (template_app
             (template_hole 9,
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_hole 6))),
            template_app (template_hole 5, template_hole 4)))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))),
         template_app (template_hole 0, template_var 0)))),
    ("More_Word_Operations.limited_and_eq_0",
     "[| limited_and ?x ?z; and ?y (not ?z) = ?y |] ==> and ?x ?y = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 0),
            template_app (template_hole 1, template_var 1)),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 0),
         template_hole 0))),
    ("More_Word_Operations.alignUp_ge",
     "[| ?n < LENGTH(?'a); alignUp ?a ?n ~= 0 |] ==> ?a <= alignUp ?a ?n",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 6, template_hole 5)),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 2, template_var 0),
                template_var 1),
              template_hole 1)
            )],
       template_inequation
        (less_equals, template_var 0,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_var 1)))),
    ("More_Word_Operations.sign_extend_eq",
     "and ?w (mask (Suc ?n)) = and ?v (mask (Suc ?n)) ==>
      sign_extend ?n ?w = sign_extend ?n ?v",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 2),
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 1))),
          template_app
           (template_app (template_hole 3, template_var 0),
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 1))))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("More_Word_Operations.neg_mask_in_mask_range",
     "is_aligned ?ptr ?bits ==>
      (and ?ptr' (not (mask ?bits)) = ?ptr) =
      (?ptr' : mask_range ?ptr ?bits)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 0),
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 1)))),
           template_var 2),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_app (template_hole 3, template_var 1))))))),
    ("More_Word_Operations.alignUp_le_greater_al",
     "[| ?a <= ?x; ?n < LENGTH(?'a); is_aligned ?x ?n |]
      ==> alignUp ?a ?n <= ?x",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 3, template_hole 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("More_Word_Operations.from_bool_all_helper",
     "(ALL bool. from_bool bool = ?val --> ?P bool) =
      ((EX bool. from_bool bool = ?val) --> ?P (?val ~= 0))",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5, template_app (template_hole 2, t_empty)),
             template_app
              (template_var 0,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_hole 0))))
           ))),
    ("More_Word_Operations.is_aligned_diff_neg_mask",
     "is_aligned ?p ?sz ==>
      and (?p - ?q) (not (mask ?sz)) =
      ?p - and (alignUp ?q ?sz) (not (mask ?sz))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0)),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1))),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1))))))),
    ("More_Word_Operations.sign_extend_bitwise_if",
     "?i < size ?w ==>
      bit (sign_extend ?e ?w) ?i =
      (if ?i < ?e then bit ?w ?i else bit ?w ?e)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))))),
    ("More_Word_Operations.sign_extend_bitwise_if'",
     "?i < LENGTH(?'a) ==>
      bit (sign_extend ?e ?w) ?i =
      (if ?i < ?e then bit ?w ?i else bit ?w ?e)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 5, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 6, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1))))),
    ("More_Word_Operations.limited_and_simps",
     "[| limited_and ?x ?z; and ?y (not (?z << ?n)) = ?y |]
      ==> and (?x << ?n) ?y = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 1),
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 0))),
          template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0)),
           template_var 1),
         template_hole 0))),
    ("More_Word_Operations.limited_and_simps",
     "[| limited_and ?x ?z; and ?y (not (?z >> ?n)) = ?y |]
      ==> and (?x >> ?n) ?y = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 1),
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 0))),
          template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0)),
           template_var 1),
         template_hole 0))),
    ("More_Word_Operations.sint_ctz",
     "2 < LENGTH(?'a) ==>
      0 <= sint (word_of_nat (word_ctz ?x)) &
      sint (word_of_nat (word_ctz ?x)) <= int LENGTH(?'a)",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 11,
            template_app (template_hole 10, template_hole 9)),
          template_app (template_hole 8, template_hole 7))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 0))))),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 0)))),
               template_app
                (template_hole 0,
                 template_app (template_hole 8, template_hole 7))))
           ))),
    ("More_Word_Operations.limited_and_simps",
     "[| is_aligned ?x ?n; and ?y (not (not (2 ^ ?n - 1))) = ?y |]
      ==> and ?x ?y = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app
           (template_app (template_hole 8, template_var 0),
            template_app
             (template_hole 7,
              template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app
                         (template_hole 4,
                          template_app (template_hole 3, template_hole 2))),
                      template_var 1)),
                  template_hole 1)))),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 8, template_var 2), template_var 0),
         template_hole 0))),
    ("More_Word_Operations.limited_and_simps",
     "[| limited_and ?x ?z; and ?y (?z << ?n) = ?z << ?n |]
      ==> and (?x << ?n) ?y = ?x << ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 1),
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 0)),
          template_app
           (template_app (template_hole 0, template_var 2),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 0)))),
    ("More_Word_Operations.limited_and_simps",
     "[| limited_and ?x ?z; and ?y (?z >> ?n) = ?z >> ?n |]
      ==> and (?x >> ?n) ?y = ?x >> ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 1),
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 0)),
          template_app
           (template_app (template_hole 0, template_var 2),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 0)))),
    ("More_Word_Operations.sign_extend_bitwise_cases",
     "?i < size ?w ==>
      bit (sign_extend ?e ?w) ?i =
      ((?i <= ?e --> bit ?w ?i) & (?e <= ?i --> bit ?w ?e))",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0)),
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 2))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0)))))),
    ("More_Word_Operations.sign_extend_bitwise_disj",
     "?i < size ?w ==>
      bit (sign_extend ?e ?w) ?i =
      (?i <= ?e & bit ?w ?i | ?e <= ?i & bit ?w ?e)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0)),
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 2))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0)))))),
    ("More_Word_Operations.sign_extend_bitwise_cases'",
     "?i < LENGTH(?'a) ==>
      bit (sign_extend ?e ?w) ?i =
      ((?i <= ?e --> bit ?w ?i) & (?e <= ?i --> bit ?w ?e))",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 7, template_hole 6))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_var 2))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 1)))))),
    ("More_Word_Operations.sign_extend_bitwise_disj'",
     "?i < LENGTH(?'a) ==>
      bit (sign_extend ?e ?w) ?i =
      (?i <= ?e & bit ?w ?i | ?e <= ?i & bit ?w ?e)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 7, template_hole 6))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_var 2))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 1)))))),
    ("More_Word_Operations.word_log2_eqI",
     "[| ?w ~= 0; bit ?w ?n; !!m. bit ?w m ==> m <= ?n |]
      ==> word_log2 ?w = ?n",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("More_Word_Operations.alignUp_is_aligned_nz",
     "[| is_aligned ?x ?n; ?n < LENGTH(?'a); ?a <= ?x; ?a ~= 0 |]
      ==> alignUp ?a ?n ~= 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 6, template_hole 5)),
        template_inequation (less_equals, template_var 0, template_var 2),
        template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1),
             template_hole 1)
           ))),
    ("More_Word_Operations.sign_extended_high_bits",
     "[| sign_extended ?e ?p; ?j < size ?p; ?e <= ?i; ?i < ?j |]
      ==> bit ?p ?i = bit ?p ?j",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 3, template_var 2)),
        template_inequation (less_equals, template_var 3, template_var 0),
        template_inequation (less_than, template_var 0, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("More_Word_Operations.mask_range_to_bl",
     "is_aligned ?ptr ?bits ==>
      mask_range ?ptr ?bits =
      {x. take (LENGTH(?'a) - ?bits) (to_bl x) =
          take (LENGTH(?'a) - ?bits) (to_bl ?ptr)}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 9, template_var 1),
           template_app
            (template_app (template_hole 8, template_var 1),
             template_app (template_hole 7, template_var 0))),
         template_app (template_hole 6, t_empty)))),
    ("More_Word_Operations.limited_and_simps",
     "[| is_aligned ?x ?na; and ?y (not (not (2 ^ ?na - 1) >> ?n)) = ?y |]
      ==> and (?x >> ?n) ?y = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 9, template_var 1),
            template_app
             (template_hole 8,
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_hole 8,
                    template_app
                     (template_app
                       (template_hole 6,
                        template_app
                         (template_app
                           (template_hole 5,
                            template_app
                             (template_hole 4,
                              template_app
                               (template_hole 3, template_hole 2))),
                          template_var 2)),
                      template_hole 1))),
                template_var 0))),
          template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 7, template_var 3),
               template_var 0)),
           template_var 1),
         template_hole 0))),
    ("More_Word_Operations.sign_extended_add",
     "[| is_aligned ?p ?n; ?f < 2 ^ ?n; ?n <= ?e; sign_extended ?e ?p |]
      ==> sign_extended ?e (?p + ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3))),
            template_var 2)),
        template_inequation (less_equals, template_var 2, template_var 0),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1))
           ))),
    ("More_Word_Operations.limited_and_simps",
     "[| is_aligned ?x ?n; and ?y (not (2 ^ ?n - 1)) = not (2 ^ ?n - 1) |]
      ==> and ?x ?y = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 0),
            template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app
                       (template_hole 3,
                        template_app (template_hole 2, template_hole 1))),
                    template_var 1)),
                template_hole 0))),
          template_app
           (template_hole 6,
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_hole 3,
                      template_app (template_hole 2, template_hole 1))),
                  template_var 1)),
              template_hole 0)))],
       template_equation
        (template_app
          (template_app (template_hole 7, template_var 2), template_var 0),
         template_var 2))),
    ("More_Word_Operations.alignUp_not_aligned_eq",
     "[| ~ is_aligned ?a ?n; ?n < LENGTH(?'a) |]
      ==> alignUp ?a ?n = (?a div 2 ^ ?n + 1) * 2 ^ ?n",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 13, template_var 1),
                  template_var 0)
                )
            ),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 11, template_hole 10))],
       template_equation
        (template_app
          (template_app (template_hole 8, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_hole 3,
                         template_app (template_hole 2, template_hole 1))),
                     template_var 0))),
               template_hole 0)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1))),
             template_var 0))))),
    ("More_Word_Operations.aligned_mask_diff",
     "[| is_aligned ?dest ?bits; is_aligned ?ptr ?sz; ?bits <= ?sz;
         ?sz < LENGTH(?'a); ?dest < ?ptr |]
      ==> mask ?bits + ?dest < ?ptr",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            ),
        template_inequation (less_equals, template_var 2, template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 4, template_hole 3)),
        template_inequation (less_than, template_var 3, template_var 1)],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 3),
         template_var 1))),
    ("More_Word_Operations.mask_range_to_bl'",
     "[| is_aligned ?ptr ?bits; ?bits < LENGTH(?'a) |]
      ==> mask_range ?ptr ?bits =
          {x. take (LENGTH(?'a) - ?bits) (to_bl x) =
              take (LENGTH(?'a) - ?bits) (to_bl ?ptr)}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 1),
              template_var 0)
            ),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 10, template_hole 9))],
       template_equation
        (template_app
          (template_app (template_hole 7, template_var 1),
           template_app
            (template_app (template_hole 6, template_var 1),
             template_app (template_hole 5, template_var 0))),
         template_app (template_hole 4, t_empty)))),
    ("More_Word_Operations.limited_and_simps",
     "[| is_aligned ?x ?na;
         and ?y (not (2 ^ ?na - 1) >> ?n) = not (2 ^ ?na - 1) >> ?n |]
      ==> and (?x >> ?n) ?y = ?x >> ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 8, template_var 1),
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_hole 6,
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_app
                         (template_hole 4,
                          template_app
                           (template_hole 3,
                            template_app
                             (template_hole 2, template_hole 1))),
                        template_var 2)),
                    template_hole 0))),
              template_var 0)),
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app
                       (template_hole 4,
                        template_app
                         (template_hole 3,
                          template_app (template_hole 2, template_hole 1))),
                      template_var 2)),
                  template_hole 0))),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_var 3),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 7, template_var 3),
           template_var 0)))),
    ("More_Word_Operations.aligned_mask_range_offset_subset",
     "[| is_aligned ?ptr ?sz; is_aligned ?x ?sz'; ?sz' <= ?sz;
         ?x < 2 ^ ?sz |]
      ==> mask_range (?ptr + ?x) ?sz' <= mask_range ?ptr ?sz",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_var 0)
            ),
        template_inequation (less_equals, template_var 0, template_var 2),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4))),
            template_var 2))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1)),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))),
         template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app (template_hole 0, template_var 2)))))),
    ("More_Word_Operations.add_mult_in_mask_range",
     "[| is_aligned ?base ?n; ?n < LENGTH(?'a); ?bits <= ?n;
         ?x < 2 ^ (?n - ?bits) |]
      ==> ?base + ?x * 2 ^ ?bits : mask_range ?base ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_than, template_var 2,
          template_app (template_hole 13, template_hole 12)),
        template_inequation (less_equals, template_var 1, template_var 2),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 9,
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_hole 6))),
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app
                        (template_hole 8,
                         template_app (template_hole 7, template_hole 6))),
                     template_var 1)))),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_app (template_hole 0, template_var 2))))
           ))),
    ("More_Word_Operations.mask_range_subsetD",
     "[| ?p' : mask_range ?p ?n; ?x' : mask_range ?p' ?n'; ?n' <= ?n;
         is_aligned ?p ?n; is_aligned ?p' ?n' |]
      ==> ?x' : mask_range ?p ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_app
               (template_app (template_hole 4, template_var 3),
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_app (template_hole 2, template_var 2))))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 4, template_var 4),
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_app (template_hole 2, template_var 0))))
            ),
        template_inequation (less_equals, template_var 0, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 4),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app
              (template_app (template_hole 4, template_var 3),
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_app (template_hole 2, template_var 2))))
           ))),
    ("More_Word_Operations.aligned_mask_ranges_disjoint",
     "[| is_aligned ?p ?n; is_aligned ?p' ?n';
         and ?p (not (mask ?n')) ~= ?p'; and ?p' (not (mask ?n)) ~= ?p |]
      ==> mask_range ?p ?n Int mask_range ?p' ?n' = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 7, template_var 3),
                template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_var 0))),
              template_var 1)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 7, template_var 1),
                template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_var 2))),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_app (template_hole 5, template_var 2)))),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 5, template_var 0)))),
         template_hole 0))),
    ("More_Word_Operations.aligned_offset_in_range",
     "[| is_aligned ?x ?m; ?y < 2 ^ ?m; is_aligned ?p ?n; ?m <= ?n;
         ?n < LENGTH(?'a) |]
      ==> (?x + ?y : mask_range ?p ?n) = (?x : mask_range ?p ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 4),
              template_var 3)
            ),
        template_inequation
         (less_than, template_var 2,
          template_app
           (template_app
             (template_hole 12,
              template_app
               (template_hole 11,
                template_app (template_hole 10, template_hole 9))),
            template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 1),
              template_var 0)
            ),
        template_inequation (less_equals, template_var 3, template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 6, template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 4),
               template_var 2)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 0, template_var 0)))),
         template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 0, template_var 0))))))),
    ("More_Word_Operations.aligned_mask_range_cases",
     "[| is_aligned ?p ?n; is_aligned ?p' ?n' |]
      ==> mask_range ?p ?n Int mask_range ?p' ?n' = {} |
          mask_range ?p ?n <= mask_range ?p' ?n' |
          mask_range ?p' ?n' <= mask_range ?p ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 4, template_var 3),
                         template_app
                          (template_app (template_hole 3, template_var 3),
                           template_app
                            (template_hole 2, template_var 2)))),
                     template_app
                      (template_app (template_hole 4, template_var 1),
                       template_app
                        (template_app (template_hole 3, template_var 1),
                         template_app (template_hole 2, template_var 0))))),
                 template_hole 1)),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_app (template_hole 4, template_var 3),
                       template_app
                        (template_app (template_hole 3, template_var 3),
                         template_app (template_hole 2, template_var 2)))),
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_app
                      (template_app (template_hole 3, template_var 1),
                       template_app (template_hole 2, template_var 0))))),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_app
                      (template_app (template_hole 3, template_var 1),
                       template_app (template_hole 2, template_var 0)))),
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_app (template_hole 2, template_var 2))))))
           ))),
    ("More_Word_Operations.alignUp_ar_helper",
     "[| is_aligned ?x ?n; ?n < LENGTH(?'a);
         {?x..?x + 2 ^ ?n - 1} <= {?a..?b}; ?a ~= 0 |]
      ==> ?a <= alignUp ?a ?n & alignUp ?a ?n + 2 ^ ?n - 1 <= ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_than, template_var 2,
          template_app (template_hole 16, template_hole 15)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 13, template_var 3),
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 3),
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_hole 9,
                        template_app (template_hole 8, template_hole 7))),
                    template_var 2))),
              template_hole 6)),
          template_app
           (template_app (template_hole 13, template_var 1),
            template_var 0)),
        template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 2))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 12,
                     template_app
                      (template_app
                        (template_hole 11,
                         template_app
                          (template_app (template_hole 0, template_var 1),
                           template_var 2)),
                       template_app
                        (template_app
                          (template_hole 10,
                           template_app
                            (template_hole 9,
                             template_app
                              (template_hole 8, template_hole 7))),
                         template_var 2))),
                   template_hole 6)),
               template_var 0))
           ))),
    ("More_Word_Operations.aligned_mask_ranges_disjoint2",
     "[| is_aligned ?p ?n; is_aligned ?ptr ?bits; ?m <= ?n; ?n < size ?p;
         ?m <= ?bits;
         ALL y<2 ^ (?n - ?m). ?p + (y << ?m) ~: mask_range ?ptr ?bits |]
      ==> mask_range ?p ?n Int mask_range ?ptr ?bits = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 20, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 20, template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 0, template_var 3),
        template_inequation
         (less_than, template_var 3,
          template_app (template_hole 17, template_var 4)),
        template_inequation (less_equals, template_var 0, template_var 1),
        template_predicate (template_app (template_hole 16, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 4, template_var 4),
               template_app
                (template_app (template_hole 6, template_var 4),
                 template_app (template_hole 3, template_var 3)))),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app (template_hole 6, template_var 2),
               template_app (template_hole 3, template_var 1)))),
         template_hole 0)))]
