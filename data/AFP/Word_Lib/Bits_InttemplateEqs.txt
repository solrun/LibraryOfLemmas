   [("Bits_Int.int_not_not", "not (not ?x) = ?x",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Bits_Int.sbintrunc_n_0", "signed_take_bit ?n 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Bits_Int.int_and_0", "and 0 ?x = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Bits_Int.bin_log_esimps", "and ?w 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Bits_Int.bin_ops_same", "and ?x ?x = ?x",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("Bits_Int.int_0shiftr", "drop_bit ?x 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Bits_Int.int_or_zero", "or 0 ?x = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Bits_Int.bin_log_esimps", "or ?w 0 = ?w",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Bits_Int.bin_ops_same", "or ?x ?x = ?x",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("Bits_Int.int_0_shiftl", "push_bit ?n 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Bits_Int.bintrunc_n_0", "take_bit ?n 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Bits_Int.int_xor_zero", "xor 0 ?x = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Bits_Int.bin_log_esimps", "xor ?w 0 = ?w",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Bits_Int.bin_ops_same", "xor ?x ?x = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_var 0),
       template_hole 0)),
    ("Bits_Int.int_shiftl0", "?x << 0 = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Bits_Int.bin_sign_mask", "bin_sign (mask ?n) = 0",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Bits_Int.bin_sign_simps", "bin_sign (numeral ?k) = 0",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Bits_Int.sign_uint_Pls", "bin_sign (uint ?x) = 0",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Bits_Int.sbintrunc_Sucs", "signed_take_bit (Suc ?n) 1 = 1",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_hole 0)),
    ("Bits_Int.sbintrunc_numeral_simps",
     "signed_take_bit (numeral ?k) 1 = 1",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_hole 0)),
    ("Bits_Int.bin_log_esimps", "and ?w (- 1) = ?w",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)),
       template_var 0)),
    ("Bits_Int.int_nand_same", "and ?x (not ?x) = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Bits_Int.int_and_m1", "and (- 1) ?x = ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0)),
         template_var 0),
       template_var 0)),
    ("Bits_Int.int_shiftr_numeral", "drop_bit (numeral ?w') 1 = 0",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Bits_Int.bintrunc_Suc_numeral", "take_bit (Suc ?n) 1 = 1",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_hole 0)),
    ("Bits_Int.bintrunc_numeral_simps", "take_bit (numeral ?k) 1 = 1",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_hole 0)),
    ("Bits_Int.sign_bintr", "bin_sign (take_bit ?n ?w) = 0",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Bits_Int.bin_sc_FP", "set_bit_class.set_bit 0 ?n False = 0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 0),
         template_hole 0),
       template_hole 1)),
    ("Bits_Int.int_and_comm", "and ?x ?y = and ?y ?x",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Bits_Int.int_or_comm", "or ?x ?y = or ?y ?x",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Bits_Int.int_xor_comm", "xor ?x ?y = xor ?y ?x",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Bits_Int.sbintrunc_n_minus1", "signed_take_bit ?n (- 1) = - 1",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)),
       template_app (template_hole 1, template_hole 0))),
    ("Bits_Int.int_minus1_shiftr", "drop_bit ?x (- 1) = - 1",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)),
       template_app (template_hole 1, template_hole 0))),
    ("Bits_Int.bin_log_esimps", "or ?w (- 1) = - 1",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)),
       template_app (template_hole 1, template_hole 0))),
    ("Bits_Int.int_or_minus1", "or (- 1) ?x = - 1",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0)),
         template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("Bits_Int.bin_log_esimps", "xor ?w (- 1) = not ?w",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0),
         template_app (template_hole 2, template_hole 1)),
       template_app (template_hole 0, template_var 0))),
    ("Bits_Int.int_xor_minus1", "xor (- 1) ?x = not ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app (template_hole 2, template_hole 1)),
         template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Bits_Int.bin_sign_simps", "bin_sign (- numeral ?k) = - 1",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app (template_hole 2, template_hole 0))),
    ("Bits_Int.bin_add_not", "?x + not ?x = - 1",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0),
         template_app (template_hole 2, template_var 0)),
       template_app (template_hole 1, template_hole 0))),
    ("Bits_Int.sbintrunc_0_numeral",
     "signed_take_bit 0 (numeral (num.Bit0 ?w)) = 0",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_hole 0)),
    ("Bits_Int.int_shiftr_numeral", "drop_bit (numeral ?w') Numeral1 = 0",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_app (template_hole 2, template_hole 1)),
       template_hole 0)),
    ("Bits_Int.bin_nth_1", "bit 1 ?n = (?n = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 0)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("Bits_Int.bin_split_zero", "bin_split ?n 0 = (0, 0)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app
        (template_app (template_hole 0, template_hole 1),
         template_hole 1))),
    ("Bits_Int.bin_sc_eq",
     "(%i. set_bit_class.set_bit i ?n False) = unset_bit ?n",
     template_equation
      (t_empty, template_app (template_hole 0, template_var 0))),
    ("Bits_Int.bin_sc_eq",
     "(%i. set_bit_class.set_bit i ?n True) =
      semiring_bit_operations_class.set_bit ?n",
     template_equation
      (t_empty, template_app (template_hole 0, template_var 0))),
    ("Bits_Int.bin_cat_zero", "concat_bit ?n ?w 0 = take_bit ?n ?w",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Bits_Int.int_not_neg_numeral",
     "not (- numeral ?n) = neg_numeral_class.sub ?n num.One",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Bits_Int.bin_mask_p1_conv_shift", "mask ?n + 1 = push_bit ?n 1",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 0), template_hole 1))),
    ("Bits_Int.sbintrunc_0_numeral",
     "signed_take_bit 0 (numeral (num.Bit1 ?w)) = - 1",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app (template_hole 1, template_hole 0))),
    ("Bits_Int.bin_sign_cat",
     "bin_sign (concat_bit ?n ?y ?x) = bin_sign ?x",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Bits_Int.bin_sign_sc",
     "bin_sign (set_bit_class.set_bit ?w ?n ?b) = bin_sign ?w",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 2))),
    ("Bits_Int.bin_sc_TM", "set_bit_class.set_bit (- 1) ?n True = - 1",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1)),
           template_var 0),
         template_hole 0),
       template_app (template_hole 2, template_hole 1))),
    ("Bits_Int.sbintrunc_0_numeral",
     "signed_take_bit 0 (- numeral (num.Bit0 ?w)) = 0",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)))),
       template_hole 0)),
    ("Bits_Int.int_nand_same_middle", "and ?x (and ?y (not ?x)) = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 1))),
       template_hole 0)),
    ("Bits_Int.drop_bit_bin_cat_eq",
     "drop_bit ?n (concat_bit ?n ?w ?v) = ?v",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_var 0)),
    ("Bits_Int.bin_sc_nth", "set_bit_class.set_bit ?w ?n (bit ?w ?n) = ?w",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("Bits_Int.msb_conv_bin_sign", "msb ?x = (bin_sign ?x = - 1)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)))),
    ("Bits_Int.nat_non0_gr", "(~ iszero ?z) = (?z ~= (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 0))
            )],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("Bits_Int.bin_nth_mask", "bit (mask ?n) ?i = (?i < ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Bits_Int.sign_Pls_ge_0", "(bin_sign ?bin = 0) = (0 <= ?bin)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_hole 1), template_var 0))),
    ("Bits_Int.not_int_cmp_0", "(not ?i < 0) = (0 <= ?i)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_hole 1), template_var 0))),
    ("Bits_Int.not_int_cmp_0", "(0 <= not ?i) = (?i < 0)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_hole 2))),
    ("Bits_Int.msb_bin_sc", "msb (set_bit_class.set_bit ?x ?n ?b) = msb ?x",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 2))),
    ("Bits_Int.bin_nth_sc", "bit (set_bit_class.set_bit ?w ?n ?b) ?n = ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)),
         template_var 1),
       template_var 0)),
    ("Bits_Int.int_not_simps",
     "not (numeral ?w) = - numeral (?w + num.One)",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("Bits_Int.int_1_and", "and 1 ?x = ?x mod 2",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4), template_var 0),
       template_app
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Bits_Int.int_and_1", "and ?x 1 = ?x mod 2",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 0), template_hole 4),
       template_app
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Bits_Int.int_not_simps",
     "not (- numeral (num.Bit0 ?w)) = numeral (Num.BitM ?w)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)))),
       template_app
        (template_hole 2, template_app (template_hole 0, template_var 0)))),
    ("Bits_Int.int_not_simps",
     "not (- numeral (num.Bit1 ?w)) = numeral (num.Bit0 ?w)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)))),
       template_app
        (template_hole 2, template_app (template_hole 0, template_var 0)))),
    ("Bits_Int.sbintrunc_sbintrunc",
     "signed_take_bit ?m (signed_take_bit ?m ?w) = signed_take_bit ?m ?w",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Bits_Int.bintrunc_bintrunc",
     "take_bit ?m (take_bit ?m ?w) = take_bit ?m ?w",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Bits_Int.int_neg_numeral_pOne_conv_not",
     "- numeral (?n + num.One) = not (numeral ?n)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1))),
       template_app
        (template_hole 0, template_app (template_hole 3, template_var 0)))),
    ("Bits_Int.sbintrunc_0_numeral",
     "signed_take_bit 0 (- numeral (num.Bit1 ?w)) = - 1",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)))),
       template_app (template_hole 3, template_hole 0))),
    ("Bits_Int.int_shiftr_numeral_Suc0",
     "drop_bit (Suc 0) (numeral (num.Bit0 ?w)) = numeral ?w",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app (template_hole 3, template_hole 2)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app (template_hole 1, template_var 0))),
    ("Bits_Int.int_shiftr_numeral_Suc0",
     "drop_bit (Suc 0) (numeral (num.Bit1 ?w)) = numeral ?w",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app (template_hole 3, template_hole 2)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app (template_hole 1, template_var 0))),
    ("Bits_Int.bin_sign_rest", "bin_sign (?w div 2) = bin_sign ?w",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))),
       template_app (template_hole 4, template_var 0))),
    ("Bits_Int.bin_nth_ops", "bit (not ?x) ?n = (~ bit ?x ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Bits_Int.not_int_cmp_0", "(0 < not ?i) = (?i < - 1)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 4, template_var 0),
         template_app (template_hole 1, template_hole 0)))),
    ("Bits_Int.not_int_cmp_0", "(not ?i <= 0) = (- 1 <= ?i)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_app
          (template_hole 4,
           template_app (template_hole 1, template_hole 0)),
         template_var 0))),
    ("Bits_Int.bin_nth_eq_iff", "(bit ?x = bit ?y) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Bits_Int.sign_Min_lt_0", "(bin_sign ?bin = - 1) = (?bin < 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_app (template_hole 3, template_hole 2)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Bits_Int.int_shiftr_lt_0", "(drop_bit ?n ?i < 0) = (?i < 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0),
       template_app
        (template_app (template_hole 2, template_var 0), template_hole 0))),
    ("Bits_Int.shiftl_lt_0", "(push_bit ?n ?i < 0) = (?i < 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0),
       template_app
        (template_app (template_hole 2, template_var 0), template_hole 0))),
    ("Bits_Int.int_shiftr_ge_0", "(0 <= drop_bit ?n ?i) = (0 <= ?i)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1), template_var 0))),
    ("Bits_Int.shiftl_ge_0", "(0 <= push_bit ?n ?i) = (0 <= ?i)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1), template_var 0))),
    ("Bits_Int.bin_mask_conv_pow2", "mask ?n = 2 ^ ?n - 1",
     template_equation
      (template_app (template_hole 6, template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1))),
             template_var 0)),
         template_hole 0))),
    ("Bits_Int.bbw_not_dist", "not (and ?x ?y) = or (not ?x) (not ?y)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Bits_Int.bbw_not_dist", "not (or ?x ?y) = and (not ?x) (not ?y)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Bits_Int.bin_set_conv_OR",
     "set_bit_class.set_bit ?i ?n True = or ?i (push_bit ?n 1)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 1), template_var 0),
         template_hole 3),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Bits_Int.sbintrunc_bintrunc",
     "signed_take_bit ?n (take_bit (Suc ?n) ?w) = signed_take_bit ?n ?w",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("Bits_Int.bintr_cat_same",
     "take_bit ?n (concat_bit ?n ?b ?a) = take_bit ?n ?b",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2), template_var 1))),
    ("Bits_Int.take_bit_bin_cat_eq",
     "take_bit ?n (concat_bit ?n ?w ?v) = take_bit ?n ?w",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2), template_var 1))),
    ("Bits_Int.bin_rest_numeral_simps",
     "numeral (num.Bit0 ?w) div 2 = numeral ?w",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))),
       template_app (template_hole 2, template_var 0))),
    ("Bits_Int.bin_rest_numeral_simps",
     "numeral (num.Bit1 ?w) div 2 = numeral ?w",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0))),
         template_app
          (template_hole 3,
           template_app (template_hole 1, template_hole 0))),
       template_app (template_hole 3, template_var 0))),
    ("Bits_Int.bin_nth_simps", "bit ?a 0 = odd ?a",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 0), template_hole 5),
       template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("Bits_Int.word_set_bit_1",
     "set_bit_class.set_bit 1 ?n ?b =
      word_of_int (set_bit_class.set_bit 1 ?n ?b)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_hole 3), template_var 1),
         template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1),
           template_var 0)))),
    ("Bits_Int.word_set_bit_0",
     "set_bit_class.set_bit 0 ?n ?b =
      word_of_int (set_bit_class.set_bit 0 ?n ?b)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_hole 3), template_var 1),
         template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1),
           template_var 0)))),
    ("Bits_Int.word_rcat_eq",
     "word_rcat ?ws = word_of_int (bin_rcat LENGTH(?'a) (map uint ?ws))",
     template_equation
      (template_app (template_hole 6, template_var 0),
       template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2)),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))))),
    ("Bits_Int.no_bintr_alt1", "take_bit ?n = (%w. w mod 2 ^ ?n)",
     template_equation
      (template_app (template_hole 5, template_var 0), t_empty)),
    ("Bits_Int.bin_rcat_eq_foldl",
     "bin_rcat ?n = foldl (%u v. concat_bit ?n v u) 0",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app (template_hole 2, t_empty), template_hole 0))),
    ("Bits_Int.bintrunc_mod2p", "take_bit ?n ?w = ?w mod 2 ^ ?n",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 1)))),
    ("Bits_Int.int_shiftl_One_numeral",
     "push_bit (numeral ?w) 1 = push_bit (pred_numeral ?w) 2",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 0)),
         template_hole 4),
       template_app
        (template_app
          (template_hole 6, template_app (template_hole 3, template_var 0)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Bits_Int.bin_sign_and",
     "bin_sign (and ?i ?j) = - (bin_sign ?i * bin_sign ?j)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 1)),
           template_app (template_hole 3, template_var 0))))),
    ("Bits_Int.bin_clr_conv_NAND",
     "set_bit_class.set_bit ?i ?n False = and ?i (not (push_bit ?n 1))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 1), template_var 0),
         template_hole 4),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("Bits_Int.sbintrunc_sbintrunc_min",
     "signed_take_bit ?m (signed_take_bit ?n ?w) =
      signed_take_bit (min ?m ?n) ?w",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Bits_Int.bbw_lcs", "and ?y (and ?x ?z) = and ?x (and ?y ?z)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Bits_Int.int_and_assoc", "and (and ?x ?y) ?z = and ?x (and ?y ?z)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Bits_Int.bbw_lcs", "or ?y (or ?x ?z) = or ?x (or ?y ?z)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Bits_Int.int_or_assoc", "or (or ?x ?y) ?z = or ?x (or ?y ?z)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Bits_Int.bintrunc_bintrunc_min",
     "take_bit ?m (take_bit ?n ?w) = take_bit (min ?m ?n) ?w",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Bits_Int.bbw_lcs", "xor ?y (xor ?x ?z) = xor ?x (xor ?y ?z)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Bits_Int.int_xor_assoc", "xor (xor ?x ?y) ?z = xor ?x (xor ?y ?z)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Bits_Int.cat_bintr",
     "concat_bit ?n (take_bit ?n ?b) ?a = concat_bit ?n ?b ?a",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0))),
    ("Bits_Int.bin_trunc_not",
     "take_bit ?n (not (take_bit ?n ?x)) = take_bit ?n (not ?x)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Bits_Int.bintrunc_sbintrunc",
     "take_bit (Suc ?n) (signed_take_bit ?n ?w) = take_bit (Suc ?n) ?w",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0))),
    ("Bits_Int.sbintrunc_sbintrunc_l'",
     "signed_take_bit (?n + ?m) (signed_take_bit ?n ?w) =
      signed_take_bit ?n ?w",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2), template_var 0))),
    ("Bits_Int.int_shiftr_numeral_Suc0",
     "drop_bit (Suc 0) (- numeral (num.Bit0 ?w)) = - numeral ?w",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app (template_hole 4, template_hole 3)),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))),
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)))),
    ("Bits_Int.bintrunc_bintrunc_l'",
     "take_bit (?n + ?m) (take_bit ?n ?w) = take_bit ?n ?w",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2), template_var 0))),
    ("Bits_Int.bitval_bin_last", "of_bool (odd ?i) = and ?i 1",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2))),
             template_var 0))),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Bits_Int.bin_nth_drop_bit_iff",
     "bit (drop_bit ?n ?c) ?k = bit ?c (?n + ?k)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Bits_Int.bin_nth_shiftr",
     "bit (drop_bit ?n ?x) ?m = bit ?x (?n + ?m)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Bits_Int.even_conv_AND", "even ?i = (and ?i 1 = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_hole 4))),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_hole 1),
         template_hole 0))),
    ("Bits_Int.nth_2p_bin", "bit (2 ^ ?n) ?m = (?m = ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_hole 3,
                      template_app (template_hole 2, template_hole 1))),
                  template_var 1)),
              template_var 0)
            )],
       template_equation (template_var 0, template_var 1))),
    ("Bits_Int.bin_sign_lem",
     "(bin_sign (signed_take_bit ?n ?bin) = - 1) = bit ?bin ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0))),
         template_app (template_hole 2, template_hole 1)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Bits_Int.bin_rest_gt_0", "(0 < ?x div 2) = (1 < ?x)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_hole 5),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1)))),
       template_app
        (template_app (template_hole 6, template_hole 0), template_var 0))),
    ("Bits_Int.bin_rest_lt0", "(?i div 2 < 0) = (?i < 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 0),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1)))),
         template_hole 0),
       template_app
        (template_app (template_hole 5, template_var 0), template_hole 0))),
    ("Bits_Int.bin_rest_ge_0", "(0 <= ?i div 2) = (0 <= ?i)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))),
       template_app
        (template_app (template_hole 5, template_hole 4), template_var 0))),
    ("Bits_Int.setBit_no",
     "semiring_bit_operations_class.set_bit ?n (numeral ?bin) =
      word_of_int (set_bit_class.set_bit (numeral ?bin) ?n True)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_var 1),
           template_hole 0)))),
    ("Bits_Int.clearBit_no",
     "unset_bit ?n (numeral ?bin) =
      word_of_int (set_bit_class.set_bit (numeral ?bin) ?n False)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_var 1),
           template_hole 0)))),
    ("Bits_Int.set_bit_word_of_int",
     "set_bit_class.set_bit (word_of_int ?x) ?n ?b =
      word_of_int (set_bit_class.set_bit ?x ?n ?b)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Bits_Int.bin_cat_eq_push_bit_add_take_bit",
     "concat_bit ?n ?l ?k = push_bit ?n ?k + take_bit ?n ?l",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("Bits_Int.and_bin_mask_conv_mod", "and ?x (mask ?n) = ?x mod 2 ^ ?n",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1),
         template_app (template_hole 5, template_var 0)),
       template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("Bits_Int.bintr_Min", "take_bit ?n (- 1) = 2 ^ ?n - 1",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 0),
         template_app (template_hole 6, template_hole 5)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 0)),
         template_hole 5))),
    ("Bits_Int.int_shiftl_Suc", "?x << Suc ?n = 2 * ?x << ?n",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 1)),
         template_var 0))),
    ("Bits_Int.uint_shiftl",
     "uint (push_bit ?i ?n) = take_bit (size ?n) (push_bit ?i (uint ?n))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_hole 4, template_var 0))))),
    ("Bits_Int.int_shiftl_numeral",
     "push_bit (numeral ?w') (numeral ?w) =
      push_bit (pred_numeral ?w') (numeral (num.Bit0 ?w))",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 1, template_var 1)),
         template_app
          (template_hole 2,
           template_app (template_hole 0, template_var 0))))),
    ("Bits_Int.int_shiftr_numeral",
     "drop_bit (numeral ?w') (numeral (num.Bit0 ?w)) =
      drop_bit (pred_numeral ?w') (numeral ?w)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Bits_Int.int_shiftr_numeral",
     "drop_bit (numeral ?w') (numeral (num.Bit1 ?w)) =
      drop_bit (pred_numeral ?w') (numeral ?w)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Bits_Int.int_shiftr_numeral_Suc0",
     "drop_bit (Suc 0) (- numeral (num.Bit1 ?w)) = - numeral (Num.inc ?w)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app (template_hole 5, template_hole 4)),
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)))),
       template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 0, template_var 0))))),
    ("Bits_Int.bin_sc_sc_same",
     "set_bit_class.set_bit (set_bit_class.set_bit ?w ?n ?b) ?n ?c =
      set_bit_class.set_bit ?w ?n ?c",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 2),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 2),
         template_var 0))),
    ("Bits_Int.bin_rest_shiftr",
     "drop_bit ?n ?x div 2 = drop_bit (Suc ?n) ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_hole 1))),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Bits_Int.bin_rest_neg_numeral_BitM",
     "- numeral (Num.BitM ?w) div 2 = - numeral ?w",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)))),
         template_app
          (template_hole 3,
           template_app (template_hole 1, template_hole 0))),
       template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)))),
    ("Bits_Int.bin_rest_numeral_simps",
     "- numeral (num.Bit0 ?w) div 2 = - numeral ?w",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))),
       template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)))),
    ("Bits_Int.bin_nth_conv_AND",
     "bit ?x ?n = (and ?x (push_bit ?n 1) ~= 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_hole 0)
           ))),
    ("Bits_Int.bin_nth_simps", "bit ?a (Suc ?n) = bit (?a div (2::?'a)) ?n",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)))),
         template_var 0))),
    ("Bits_Int.sbintrunc_eq_in_range",
     "(?x = signed_take_bit ?n ?x) = (?x : range (signed_take_bit ?n))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_app (template_hole 3, template_var 0), template_var 1)),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 0)),
           template_hole 0)))),
    ("Bits_Int.sbintrunc_eq_in_range",
     "(signed_take_bit ?n ?x = ?x) = (?x : range (signed_take_bit ?n))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 1)),
           template_hole 0)))),
    ("Bits_Int.bin_last_shiftr", "odd (drop_bit ?n ?x) = bit ?x ?n",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Bits_Int.word_set_numeral",
     "set_bit_class.set_bit (numeral ?bin) ?n ?b =
      word_of_int (set_bit_class.set_bit (numeral ?bin) ?n ?b)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 1),
           template_var 0)))),
    ("Bits_Int.bin_split_minus1",
     "bin_split ?n (- 1) = (- 1, take_bit ?n (- 1))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 0),
         template_app (template_hole 3, template_hole 2)),
       template_app
        (template_app
          (template_hole 1,
           template_app (template_hole 3, template_hole 2)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app (template_hole 3, template_hole 2))))),
    ("Bits_Int.bin_split_cat",
     "bin_split ?n (concat_bit ?n ?w ?v) = (?v, take_bit ?n ?w)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("Bits_Int.bin_mask_numeral",
     "mask (numeral ?n) = 1 + 2 * mask (pred_numeral ?n)",
     template_equation
      (template_app
        (template_hole 8, template_app (template_hole 7, template_var 0)),
       template_app
        (template_app (template_hole 6, template_hole 5),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_app
            (template_hole 8,
             template_app (template_hole 0, template_var 0)))))),
    ("Bits_Int.bbw_ao_dist2",
     "and ?x (or ?y ?z) = or (and ?x ?y) (and ?x ?z)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Bits_Int.and_xor_dist",
     "and ?x (xor ?y ?z) = xor (and ?x ?y) (and ?x ?z)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Bits_Int.bbw_ao_dist",
     "and (or ?x ?y) ?z = or (and ?x ?z) (and ?y ?z)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Bits_Int.bbw_oa_dist",
     "or (and ?x ?y) ?z = and (or ?x ?z) (or ?y ?z)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Bits_Int.bintrunc_shiftl",
     "take_bit ?n (push_bit ?i ?m) = push_bit ?i (take_bit (?n - ?i) ?m)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Bits_Int.bin_rest_NOT", "not ?x div 2 = not (?x div 2)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Bits_Int.bin_trunc_ao",
     "and (take_bit ?n ?x) (take_bit ?n ?y) = take_bit ?n (and ?x ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Bits_Int.bin_trunc_ao",
     "or (take_bit ?n ?x) (take_bit ?n ?y) = take_bit ?n (or ?x ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Bits_Int.bin_eq_iff", "(?x = ?y) = (ALL n. bit ?x n = bit ?y n)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app (template_hole 1, t_empty))),
    ("Bits_Int.bin_nth_ops", "bit (and ?x ?y) ?n = (bit ?x ?n & bit ?y ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Bits_Int.bin_nth_ops", "bit (or ?x ?y) ?n = (bit ?x ?n | bit ?y ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Bits_Int.nth_bintr",
     "bit (take_bit ?m ?w) ?n = (?n < ?m & bit ?w ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 0)))),
    ("Bits_Int.bin_nth_take_bit_iff",
     "bit (take_bit ?n ?c) ?k = (?k < ?n & bit ?c ?k)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 0)))),
    ("Bits_Int.int_and_lt0", "(and ?x ?y < 0) = (?x < 0 & ?y < 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 1)),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 1)))),
    ("Bits_Int.int_or_lt0", "(or ?x ?y < 0) = (?x < 0 | ?y < 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 1)),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 1)))),
    ("Bits_Int.int_and_ge0", "(0 <= and ?x ?y) = (0 <= ?x | 0 <= ?y)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)))),
    ("Bits_Int.int_or_ge0", "(0 <= or ?x ?y) = (0 <= ?x & 0 <= ?y)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)))),
    ("Bits_Int.int_xor_ge0", "(0 <= xor ?x ?y) = ((0 <= ?x) = (0 <= ?y))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 1),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)))),
    ("Bits_Int.bin_last_conv_AND", "odd ?i = (and ?i 1 ~= 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_hole 4))),
                template_var 0))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1),
             template_hole 0)
           ))),
    ("Bits_Int.rsplit_aux_alts",
     "bin_rsplit_aux ?n ?m ?c ?cs = bin_rsplit_aux ?n ?m ?c [] @ ?cs",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 1),
             template_hole 0)),
         template_var 0))),
    ("Bits_Int.bin_rsplit_l",
     "bin_rsplitl ?n (?m, ?bin) = bin_rsplit ?n (?m, take_bit ?m ?bin)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Bits_Int.rsplit_aux_alts",
     "bin_rsplitl_aux ?n ?m ?c ?cs = bin_rsplitl_aux ?n ?m ?c [] @ ?cs",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 1),
             template_hole 0)),
         template_var 0))),
    ("Bits_Int.int_shiftl_numeral",
     "push_bit (numeral ?w') (- numeral ?w) =
      push_bit (pred_numeral ?w') (- numeral (num.Bit0 ?w))",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 1, template_var 1)),
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 0)))))),
    ("Bits_Int.int_shiftr_numeral",
     "drop_bit (numeral ?w') (- numeral (num.Bit0 ?w)) =
      drop_bit (pred_numeral ?w') (- numeral ?w)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)))),
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 0, template_var 1)),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))))),
    ("Bits_Int.bin_rest_numeral_simps",
     "- numeral (num.Bit1 ?w) div 2 = - numeral (?w + num.One)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0)))),
         template_app
          (template_hole 4,
           template_app (template_hole 2, template_hole 1))),
       template_app
        (template_hole 5,
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_hole 1))))),
    ("Bits_Int.bin_nth_ops",
     "bit (xor ?x ?y) ?n = (bit ?x ?n ~= bit ?y ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))
           ))),
    ("Bits_Int.int_xor_lt0", "(xor ?x ?y < 0) = ((?x < 0) ~= (?y < 0))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)),
              template_hole 1)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 3, template_var 1),
               template_hole 1),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 1))
           ))),
    ("Bits_Int.word_set_neg_numeral",
     "set_bit_class.set_bit (- numeral ?bin) ?n ?b =
      word_of_int (set_bit_class.set_bit (- numeral ?bin) ?n ?b)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 2))),
           template_var 1),
         template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2))),
             template_var 1),
           template_var 0)))),
    ("Bits_Int.sbintrunc_Sucs",
     "signed_take_bit (Suc ?n) (numeral (num.Bit0 ?w)) =
      2 * signed_take_bit ?n (numeral ?w)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 0))),
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app (template_hole 3, template_var 0))))),
    ("Bits_Int.bintrunc_Suc_numeral",
     "take_bit (Suc ?n) (numeral (num.Bit0 ?w)) =
      2 * take_bit ?n (numeral ?w)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 0))),
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app (template_hole 3, template_var 0))))),
    ("Bits_Int.int_shiftr_numeral",
     "drop_bit (numeral ?w') (- numeral (num.Bit1 ?w)) =
      drop_bit (pred_numeral ?w') (- numeral (Num.inc ?w))",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)))),
       template_app
        (template_app
          (template_hole 6, template_app (template_hole 1, template_var 1)),
         template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 0, template_var 0)))))),
    ("Bits_Int.bin_sc_bintr",
     "take_bit ?m (set_bit_class.set_bit (take_bit ?m ?w) ?n ?x) =
      take_bit ?m (set_bit_class.set_bit ?w ?n ?x)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 3),
         template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Bits_Int.bintr_cat1",
     "take_bit (?k + ?n) (concat_bit ?n ?b ?a) =
      concat_bit ?n ?b (take_bit ?k ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 2, template_var 3),
           template_var 0)))),
    ("Bits_Int.bin_trunc_and",
     "take_bit ?n (and (take_bit ?n ?x) (take_bit ?n ?y)) =
      take_bit ?n (and ?x ?y)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Bits_Int.bin_trunc_or",
     "take_bit ?n (or (take_bit ?n ?x) (take_bit ?n ?y)) =
      take_bit ?n (or ?x ?y)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Bits_Int.bin_trunc_xor",
     "take_bit ?n (xor (take_bit ?n ?x) (take_bit ?n ?y)) =
      take_bit ?n (xor ?x ?y)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Bits_Int.int_shiftl_test_bit",
     "bit (push_bit ?i ?n) ?m = (?i <= ?m & bit ?n (?m - ?i))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("Bits_Int.bin_nth_shiftl",
     "bit (push_bit ?n ?x) ?m = (?n <= ?m & bit ?x (?m - ?n))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("Bits_Int.bin_nth_sc_gen",
     "bit (set_bit_class.set_bit ?w ?n ?b) ?m =
      (if ?m = ?n then ?b else bit ?w ?m)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_dunno)),
    ("Bits_Int.bin_last_NOT", "odd (not ?x) = (~ odd ?x)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_hole 5,
         template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1))),
             template_var 0))))),
    ("Bits_Int.rsplit_aux_apps",
     "bin_rsplit_aux ?n ?m ?c ([] @ ?cs) =
      bin_rsplit_aux ?n ?m ?c [] @ ?cs",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 1),
             template_hole 0)),
         template_var 0))),
    ("Bits_Int.bin_rsplit_aux_append",
     "bin_rsplit_aux ?n ?m ?c (?bs @ ?cs) =
      bin_rsplit_aux ?n ?m ?c ?bs @ ?cs",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0))),
    ("Bits_Int.rsplit_aux_apps",
     "bin_rsplitl_aux ?n ?m ?c ([] @ ?cs) =
      bin_rsplitl_aux ?n ?m ?c [] @ ?cs",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 1),
             template_hole 0)),
         template_var 0))),
    ("Bits_Int.bin_rsplitl_aux_append",
     "bin_rsplitl_aux ?n ?m ?c (?bs @ ?cs) =
      bin_rsplitl_aux ?n ?m ?c ?bs @ ?cs",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0))),
    ("Bits_Int.bin_cat_num",
     "concat_bit ?n ?b ?a = ?a * 2 ^ ?n + take_bit ?n ?b",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 7, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 0),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))),
               template_var 2))),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("Bits_Int.bintrunc_Suc_numeral",
     "take_bit (Suc ?n) (- 1) = 1 + 2 * take_bit ?n (- 1)",
     template_equation
      (template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 0)),
         template_app (template_hole 6, template_hole 5)),
       template_app
        (template_app (template_hole 4, template_hole 5),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_app
            (template_app (template_hole 8, template_var 0),
             template_app (template_hole 6, template_hole 5)))))),
    ("Bits_Int.sbintrunc_numeral_simps",
     "signed_take_bit (numeral ?k) (numeral (num.Bit0 ?w)) =
      2 * signed_take_bit (pred_numeral ?k) (numeral ?w)",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_var 0))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 1))),
         template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 4, template_var 0))))),
    ("Bits_Int.bintrunc_numeral_simps",
     "take_bit (numeral ?k) (numeral (num.Bit0 ?w)) =
      2 * take_bit (pred_numeral ?k) (numeral ?w)",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_var 0))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 1))),
         template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 4, template_var 0))))),
    ("Bits_Int.bin_rest_trunc_i",
     "take_bit ?n (?bin div 2) = take_bit (Suc ?n) ?bin div 2",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1)))),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 0, template_var 1)),
             template_var 0)),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_hole 1))))),
    ("Bits_Int.bin_rest_strunc",
     "signed_take_bit (Suc ?n) ?bin div 2 =
      signed_take_bit ?n (?bin div 2)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1)),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))),
       template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_app (template_hole 5, template_var 0),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Bits_Int.nth_sbintr",
     "bit (signed_take_bit ?m ?w) ?n =
      (if ?n < ?m then bit ?w ?n else bit ?w ?m)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 2)))),
    ("Bits_Int.bin_nth_numeral_unfold",
     "bit (numeral (num.Bit0 ?x)) ?n =
      (0 < ?n & bit (numeral ?x) (?n - 1))",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("Bits_Int.bin_nth_numeral_unfold",
     "bit (numeral (num.Bit1 ?x)) ?n =
      (0 < ?n --> bit (numeral ?x) (?n - 1))",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("Bits_Int.bin_nth_numeral_simps",
     "bit (- numeral (num.Bit1 ?w)) (numeral ?n) =
      bit (- numeral (?w + num.One)) (pred_numeral ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 1)))),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1)))),
         template_app (template_hole 0, template_var 0)))),
    ("Bits_Int.signed_arith_eq_checks_to_ord",
     "(- sint ?a = sint (- ?a)) = ((0 \<le>s - ?a) = (?a \<le>s 0))",
     template_bimplication
      (template_equation
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_equation
        (template_app
          (template_app (template_hole 1, template_hole 0),
           template_app (template_hole 2, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Bits_Int.bin_sc_0",
     "set_bit_class.set_bit ?w 0 ?b = of_bool ?b + 2 * (?w div 2)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 8, template_var 1), template_hole 7),
         template_var 0),
       template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 0)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))))))),
    ("Bits_Int.int_set_bit_0",
     "set_bit_class.set_bit ?x 0 ?b = of_bool ?b + 2 * (?x div 2)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 8, template_var 1), template_hole 7),
         template_var 0),
       template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 0)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))))))),
    ("Bits_Int.sbintrunc_Sucs",
     "signed_take_bit (Suc ?n) (numeral (num.Bit1 ?w)) =
      1 + 2 * signed_take_bit ?n (numeral ?w)",
     template_equation
      (template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 1)),
         template_app
          (template_hole 6,
           template_app (template_hole 5, template_var 0))),
       template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 6,
               template_app (template_hole 1, template_hole 0))),
           template_app
            (template_app (template_hole 8, template_var 1),
             template_app (template_hole 6, template_var 0)))))),
    ("Bits_Int.bintrunc_Suc_numeral",
     "take_bit (Suc ?n) (numeral (num.Bit1 ?w)) =
      1 + 2 * take_bit ?n (numeral ?w)",
     template_equation
      (template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 1)),
         template_app
          (template_hole 6,
           template_app (template_hole 5, template_var 0))),
       template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 6,
               template_app (template_hole 1, template_hole 0))),
           template_app
            (template_app (template_hole 8, template_var 1),
             template_app (template_hole 6, template_var 0)))))),
    ("Bits_Int.bin_cat_assoc",
     "concat_bit ?n ?z (concat_bit ?m ?y ?x) =
      concat_bit (?m + ?n) (concat_bit ?n ?z ?y) ?x",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 4), template_var 3),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 4)),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 3),
             template_var 1)),
         template_var 0))),
    ("Bits_Int.sbintrunc_Sucs",
     "signed_take_bit (Suc ?n) (- numeral (num.Bit0 ?w)) =
      2 * signed_take_bit ?n (- numeral ?w)",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)))),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 0))),
         template_app
          (template_app (template_hole 6, template_var 1),
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)))))),
    ("Bits_Int.bintrunc_Suc_numeral",
     "take_bit (Suc ?n) (- numeral (num.Bit0 ?w)) =
      2 * take_bit ?n (- numeral ?w)",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)))),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 0))),
         template_app
          (template_app (template_hole 6, template_var 1),
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)))))),
    ("Bits_Int.bin_rest_trunc",
     "take_bit ?n ?bin div 2 = take_bit (?n - 1) (?bin div 2)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_hole 2))),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_app
          (template_app (template_hole 6, template_var 0),
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2)))))),
    ("Bits_Int.sbintrunc_rest",
     "signed_take_bit ?n (signed_take_bit ?n ?bin div 2) =
      signed_take_bit ?n ?bin div 2",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0)),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Bits_Int.AND_mod", "and ?x (2 ^ ?n - 1) = ?x mod 2 ^ ?n",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2))),
               template_var 0)),
           template_hole 1)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))),
           template_var 0)))),
    ("Bits_Int.bintrunc_rest",
     "take_bit ?n (take_bit ?n ?bin div 2) = take_bit ?n ?bin div 2",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0)),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Bits_Int.bin_nth_Bit0",
     "bit (numeral (num.Bit0 ?w)) ?n =
      (EX m. ?n = Suc m & bit (numeral ?w) m)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1))),
         template_var 0),
       template_app (template_hole 3, t_empty))),
    ("Bits_Int.bin_sbin_eq_iff",
     "(take_bit (Suc ?n) ?x = take_bit (Suc ?n) ?y) =
      (signed_take_bit ?n ?x = signed_take_bit ?n ?y)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_var 0)),
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Bits_Int.nth_rest_power_bin",
     "bit (((%k. k div 2) ^^ ?k) ?w) ?n = bit ?w (?n + ?k)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app (template_hole 5, template_var 2), t_empty),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 6, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Bits_Int.sbintrunc_Suc_Pls",
     "signed_take_bit (Suc ?n) 0 = 0 mod 2 + 2 * signed_take_bit ?n 0",
     template_equation
      (template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 0)),
         template_hole 6),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 6),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1)))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_app
            (template_app (template_hole 8, template_var 0),
             template_hole 6))))),
    ("Bits_Int.sbintrunc_numeral_simps",
     "signed_take_bit (numeral ?k) (numeral (num.Bit1 ?w)) =
      1 + 2 * signed_take_bit (pred_numeral ?k) (numeral ?w)",
     template_equation
      (template_app
        (template_app
          (template_hole 9, template_app (template_hole 8, template_var 1)),
         template_app
          (template_hole 7,
           template_app (template_hole 6, template_var 0))),
       template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 7,
               template_app (template_hole 2, template_hole 1))),
           template_app
            (template_app
              (template_hole 9,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 7, template_var 0)))))),
    ("Bits_Int.bintrunc_numeral_simps",
     "take_bit (numeral ?k) (numeral (num.Bit1 ?w)) =
      1 + 2 * take_bit (pred_numeral ?k) (numeral ?w)",
     template_equation
      (template_app
        (template_app
          (template_hole 9, template_app (template_hole 8, template_var 1)),
         template_app
          (template_hole 7,
           template_app (template_hole 6, template_var 0))),
       template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 7,
               template_app (template_hole 2, template_hole 1))),
           template_app
            (template_app
              (template_hole 9,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 7, template_var 0)))))),
    ("Bits_Int.sbintrunc_numeral_simps",
     "signed_take_bit (numeral ?k) (- numeral (num.Bit0 ?w)) =
      2 * signed_take_bit (pred_numeral ?k) (- numeral ?w)",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 1)),
         template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 1))),
         template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 0, template_var 1)),
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0)))))),
    ("Bits_Int.bintrunc_numeral_simps",
     "take_bit (numeral ?k) (- numeral (num.Bit0 ?w)) =
      2 * take_bit (pred_numeral ?k) (- numeral ?w)",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 1)),
         template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 1))),
         template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 0, template_var 1)),
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0)))))),
    ("Bits_Int.range_bintrunc",
     "range (take_bit ?n) = {i. 0 <= i & i < 2 ^ ?n}",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app (template_hole 10, template_var 0)),
         template_hole 9),
       template_app (template_hole 8, t_empty))),
    ("Bits_Int.bintr_cat",
     "take_bit ?m (concat_bit ?n ?b ?a) =
      concat_bit ?n (take_bit (min ?m ?n) ?b) (take_bit (?m - ?n) ?a)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_var 0)))),
    ("Bits_Int.bin_cat_assoc_sym",
     "concat_bit ?m (concat_bit ?n ?z ?y) ?x =
      concat_bit (min ?m ?n) ?z (concat_bit (?m - ?n) ?y ?x)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 4),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 4),
               template_var 3)),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3)),
             template_var 1),
           template_var 0)))),
    ("Bits_Int.bin_rest_AND", "and ?x ?y div 2 = and (?x div 2) (?y div 2)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)))),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Bits_Int.bin_rest_OR", "or ?x ?y div 2 = or (?x div 2) (?y div 2)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)))),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Bits_Int.bin_rest_XOR", "xor ?x ?y div 2 = xor (?x div 2) (?y div 2)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)))),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Bits_Int.bin_nth_cat",
     "bit (concat_bit ?k ?y ?x) ?n =
      (if ?n < ?k then bit ?y ?n else bit ?x (?n - ?k))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 3)),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 3))))),
    ("Bits_Int.bin_last_shiftl", "odd (push_bit ?n ?x) = (?n = 0 & odd ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_hole 4))),
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)))
            )],
       template_dunno)),
    ("Bits_Int.bin_split_num",
     "bin_split ?n ?b = (?b div 2 ^ ?n, ?b mod 2 ^ ?n)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 0),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))),
               template_var 1))),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1))),
             template_var 1))))),
    ("Bits_Int.sbintrunc_eq_take_bit",
     "signed_take_bit ?n ?k = take_bit (Suc ?n) (?k + 2 ^ ?n) - 2 ^ ?n",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 1)),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_hole 0))),
                 template_var 1)))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 1)))),
    ("Bits_Int.signed_arith_eq_checks_to_ord",
     "(sint ?a - sint ?b = sint (?a - ?b)) =
      ((0 \<le>s ?a - ?b) = (?b \<le>s ?a))",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_app (template_hole 3, template_var 0)),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))),
       template_equation
        (template_app
          (template_app (template_hole 1, template_hole 0),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("Bits_Int.signed_arith_eq_checks_to_ord",
     "(sint ?a + sint ?b = sint (?a + ?b)) =
      ((?a \<le>s ?a + ?b) = (0 \<le>s ?b))",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_app (template_hole 3, template_var 0)),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))),
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Bits_Int.sbintrunc_Suc_Min",
     "signed_take_bit (Suc ?n) (- 1) =
      - 1 mod 2 + 2 * signed_take_bit ?n (- 1)",
     template_equation
      (template_app
        (template_app
          (template_hole 9, template_app (template_hole 8, template_var 0)),
         template_app (template_hole 7, template_hole 6)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 7, template_hole 6)),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1)))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_app
            (template_app (template_hole 9, template_var 0),
             template_app (template_hole 7, template_hole 6)))))),
    ("Bits_Int.sbintrunc_Sucs",
     "signed_take_bit (Suc ?n) (- numeral (num.Bit1 ?w)) =
      1 + 2 * signed_take_bit ?n (- numeral (?w + num.One))",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app (template_hole 9, template_var 1)),
         template_app
          (template_hole 8,
           template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 0)))),
       template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 7,
               template_app (template_hole 2, template_hole 1))),
           template_app
            (template_app (template_hole 10, template_var 1),
             template_app
              (template_hole 8,
               template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_hole 1)))))))),
    ("Bits_Int.bintrunc_Suc_numeral",
     "take_bit (Suc ?n) (- numeral (num.Bit1 ?w)) =
      1 + 2 * take_bit ?n (- numeral (?w + num.One))",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app (template_hole 9, template_var 1)),
         template_app
          (template_hole 8,
           template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 0)))),
       template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 7,
               template_app (template_hole 2, template_hole 1))),
           template_app
            (template_app (template_hole 10, template_var 1),
             template_app
              (template_hole 8,
               template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_hole 1)))))))),
    ("Bits_Int.bin_nth_Bit1",
     "bit (numeral (num.Bit1 ?w)) ?n =
      (?n = 0 | (EX m. ?n = Suc m & bit (numeral ?w) m))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 1))),
              template_var 0)
            )],
       template_dunno)),
    ("Bits_Int.bin_last_set_bit",
     "odd (set_bit_class.set_bit ?x ?n ?b) =
      (if 0 < ?n then odd ?x else ?b)",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_hole 4))),
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)),
           template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_hole 4))),
               template_var 2))),
         template_var 0))),
    ("Bits_Int.bin_cat_inj",
     "(concat_bit ?n ?b ?a = concat_bit ?n ?d ?c) =
      (?a = ?c & take_bit ?n ?b = take_bit ?n ?d)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 4),
             template_var 1),
           template_var 0)),
       template_dunno)),
    ("Bits_Int.sbintrunc_rest'",
     "signed_take_bit ?n o (%k. k div 2) o signed_take_bit ?n =
      (%k. k div 2) o signed_take_bit ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0)),
             t_empty)),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app (template_hole 5, t_empty),
         template_app (template_hole 4, template_var 0)))),
    ("Bits_Int.bintrunc_rest'",
     "take_bit ?n o (%k. k div 2) o take_bit ?n =
      (%k. k div 2) o take_bit ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0)),
             t_empty)),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app (template_hole 5, t_empty),
         template_app (template_hole 4, template_var 0)))),
    ("Bits_Int.sbintrunc_numeral_simps",
     "signed_take_bit (numeral ?k) (- numeral (num.Bit1 ?w)) =
      1 + 2 * signed_take_bit (pred_numeral ?k) (- numeral (?w + num.One))",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app (template_hole 10, template_var 1)),
         template_app
          (template_hole 9,
           template_app
            (template_hole 8,
             template_app (template_hole 7, template_var 0)))),
       template_app
        (template_app (template_hole 6, template_hole 5),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 8,
               template_app (template_hole 3, template_hole 2))),
           template_app
            (template_app
              (template_hole 11,
               template_app (template_hole 1, template_var 1)),
             template_app
              (template_hole 9,
               template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_hole 2)))))))),
    ("Bits_Int.bintrunc_numeral_simps",
     "take_bit (numeral ?k) (- numeral (num.Bit1 ?w)) =
      1 + 2 * take_bit (pred_numeral ?k) (- numeral (?w + num.One))",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app (template_hole 10, template_var 1)),
         template_app
          (template_hole 9,
           template_app
            (template_hole 8,
             template_app (template_hole 7, template_var 0)))),
       template_app
        (template_app (template_hole 6, template_hole 5),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 8,
               template_app (template_hole 3, template_hole 2))),
           template_app
            (template_app
              (template_hole 11,
               template_app (template_hole 1, template_var 1)),
             template_app
              (template_hole 9,
               template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_hole 2)))))))),
    ("Bits_Int.bin_rest_shiftl",
     "push_bit ?n ?x div 2 =
      (if 0 < ?n then push_bit (?n - 1) ?x else ?x div 2)",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 1),
             template_var 0)),
         template_app
          (template_hole 7,
           template_app (template_hole 6, template_hole 5))),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 1)),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0)),
             template_var 0)),
         template_app
          (template_app (template_hole 9, template_var 0),
           template_app
            (template_hole 7,
             template_app (template_hole 6, template_hole 5)))))),
    ("Bits_Int.bin_last_AND", "odd (and ?x ?y) = (odd ?x & odd ?y)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2))),
               template_var 1))),
         template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2))),
             template_var 0))))),
    ("Bits_Int.bin_last_OR", "odd (or ?x ?y) = (odd ?x | odd ?y)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2))),
               template_var 1))),
         template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2))),
             template_var 0))))),
    ("Bits_Int.range_sbintrunc",
     "range (signed_take_bit ?n) = {i. - (2 ^ ?n) <= i & i < 2 ^ ?n}",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app (template_hole 10, template_var 0)),
         template_hole 9),
       template_app (template_hole 8, t_empty))),
    ("Bits_Int.no_sbintr_alt2",
     "signed_take_bit ?n = (%w. (w + 2 ^ ?n) mod 2 ^ Suc ?n - 2 ^ ?n)",
     template_equation
      (template_app (template_hole 8, template_var 0), t_empty)),
    ("Bits_Int.sbintrunc_mod2p",
     "signed_take_bit ?n ?w = (?w + 2 ^ ?n) mod 2 ^ Suc ?n - 2 ^ ?n",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_hole 1))),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))),
               template_app (template_hole 0, template_var 1)))),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_var 1)))),
    ("Bits_Int.sbintrunc_numeral",
     "signed_take_bit (numeral ?k) ?x =
      of_bool (odd ?x) + 2 * signed_take_bit (pred_numeral ?k) (?x div 2)",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app (template_hole 10, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_hole 3))),
                 template_var 0)))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3))),
           template_app
            (template_app
              (template_hole 11,
               template_app (template_hole 1, template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app
                (template_hole 5,
                 template_app (template_hole 4, template_hole 3)))))))),
    ("Bits_Int.bintrunc_numeral",
     "take_bit (numeral ?k) ?x =
      of_bool (odd ?x) + 2 * take_bit (pred_numeral ?k) (?x div 2)",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app (template_hole 10, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_hole 3))),
                 template_var 0)))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3))),
           template_app
            (template_app
              (template_hole 11,
               template_app (template_hole 1, template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app
                (template_hole 5,
                 template_app (template_hole 4, template_hole 3)))))))),
    ("Bits_Int.bin_rest_power_trunc",
     "((%k. k div 2) ^^ ?k) (take_bit ?n ?bin) =
      take_bit (?n - ?k) (((%k. k div 2) ^^ ?k) ?bin)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, template_var 2), t_empty),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_app
          (template_app
            (template_app (template_hole 6, template_var 2), t_empty),
           template_var 0)))),
    ("Bits_Int.rco_sbintr",
     "signed_take_bit ?na (((%x. signed_take_bit ?na x div 2) ^^ ?n) ?x) =
      ((%k. k div 2) ^^ ?n) (signed_take_bit ?na ?x)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app
            (template_app (template_hole 4, template_var 1), t_empty),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 4, template_var 1), t_empty),
         template_app
          (template_app (template_hole 5, template_var 2),
           template_var 0)))),
    ("Bits_Int.rco_bintr",
     "take_bit ?na (((%x. take_bit ?na x div 2) ^^ ?n) ?x) =
      ((%k. k div 2) ^^ ?n) (take_bit ?na ?x)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app
            (template_app (template_hole 4, template_var 1), t_empty),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 4, template_var 1), t_empty),
         template_app
          (template_app (template_hole 5, template_var 2),
           template_var 0)))),
    ("Bits_Int.int_set_bit_numerals",
     "set_bit_class.set_bit 1 (Suc ?n) ?b =
      of_bool (~ is_unit 2) + 2 * set_bit_class.set_bit (1 div 2) ?n ?b",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 11, template_hole 10),
           template_app (template_hole 9, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2))),
                 template_hole 10)))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))),
           template_app
            (template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app (template_hole 0, template_hole 10),
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2)))),
               template_var 1),
             template_var 0))))),
    ("Bits_Int.int_set_bit_numerals",
     "set_bit_class.set_bit 0 (Suc ?n) ?b =
      of_bool (odd 0) + 2 * set_bit_class.set_bit (0 div 2) ?n ?b",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 11, template_hole 10),
           template_app (template_hole 9, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2))),
                 template_hole 10)))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))),
           template_app
            (template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app (template_hole 0, template_hole 10),
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2)))),
               template_var 1),
             template_var 0))))),
    ("Bits_Int.bin_sc_Suc",
     "set_bit_class.set_bit ?w (Suc ?n) ?b =
      of_bool (odd ?w) + 2 * set_bit_class.set_bit (?w div 2) ?n ?b",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 10, template_var 2),
           template_app (template_hole 9, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2))),
                 template_var 2)))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))),
           template_app
            (template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2)))),
               template_var 1),
             template_var 0))))),
    ("Bits_Int.int_set_bit_Suc",
     "set_bit_class.set_bit ?x (Suc ?n) ?b =
      of_bool (odd ?x) + 2 * set_bit_class.set_bit (?x div 2) ?n ?b",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 10, template_var 2),
           template_app (template_hole 9, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2))),
                 template_var 2)))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))),
           template_app
            (template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2)))),
               template_var 1),
             template_var 0))))),
    ("Bits_Int.int_set_bit_numerals",
     "set_bit_class.set_bit 1 (numeral ?w) ?b =
      of_bool (~ is_unit 2) +
      2 * set_bit_class.set_bit (1 div 2) (pred_numeral ?w) ?b",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 12, template_hole 11),
           template_app (template_hole 10, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_hole 3))),
                 template_hole 11)))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3))),
           template_app
            (template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_app (template_hole 1, template_hole 11),
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_hole 3)))),
               template_app (template_hole 0, template_var 1)),
             template_var 0))))),
    ("Bits_Int.int_set_bit_numerals",
     "set_bit_class.set_bit 0 (numeral ?w) ?b =
      of_bool (odd 0) +
      2 * set_bit_class.set_bit (0 div 2) (pred_numeral ?w) ?b",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 12, template_hole 11),
           template_app (template_hole 10, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_hole 3))),
                 template_hole 11)))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3))),
           template_app
            (template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_app (template_hole 1, template_hole 11),
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_hole 3)))),
               template_app (template_hole 0, template_var 1)),
             template_var 0))))),
    ("Bits_Int.bin_sc_numeral",
     "set_bit_class.set_bit ?w (numeral ?k) ?b =
      of_bool (odd ?w) +
      2 * set_bit_class.set_bit (?w div 2) (pred_numeral ?k) ?b",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 11, template_var 2),
           template_app (template_hole 10, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_hole 3))),
                 template_var 2)))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3))),
           template_app
            (template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_hole 3)))),
               template_app (template_hole 0, template_var 1)),
             template_var 0))))),
    ("Bits_Int.int_set_bit_numeral",
     "set_bit_class.set_bit ?x (numeral ?w) ?b =
      of_bool (odd ?x) +
      2 * set_bit_class.set_bit (?x div 2) (pred_numeral ?w) ?b",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 11, template_var 2),
           template_app (template_hole 10, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_hole 3))),
                 template_var 2)))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3))),
           template_app
            (template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_hole 3)))),
               template_app (template_hole 0, template_var 1)),
             template_var 0))))),
    ("Bits_Int.bin_rest_set_bit",
     "set_bit_class.set_bit ?x ?n ?b div 2 =
      (if 0 < ?n then set_bit_class.set_bit (?x div 2) (?n - 1) ?b
       else ?x div 2)",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_app (template_hole 8, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_hole 7,
           template_app (template_hole 6, template_hole 5))),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 1)),
           template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 9, template_var 2),
                   template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_hole 5)))),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0)),
             template_var 0)),
         template_app
          (template_app (template_hole 9, template_var 2),
           template_app
            (template_hole 7,
             template_app (template_hole 6, template_hole 5)))))),
    ("Bits_Int.int_set_bit_numerals",
     "set_bit_class.set_bit Numeral1 (Suc ?n) ?b =
      of_bool (odd Numeral1) +
      2 * set_bit_class.set_bit (Numeral1 div 2) ?n ?b",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 10,
             template_app (template_hole 9, template_hole 8)),
           template_app (template_hole 7, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 9,
                     template_app (template_hole 2, template_hole 8))),
                 template_app (template_hole 9, template_hole 8))))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 9,
               template_app (template_hole 2, template_hole 8))),
           template_app
            (template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 9, template_hole 8)),
                   template_app
                    (template_hole 9,
                     template_app (template_hole 2, template_hole 8)))),
               template_var 1),
             template_var 0))))),
    ("Bits_Int.int_set_bit_numerals",
     "set_bit_class.set_bit (numeral ?w') (Suc ?n) ?b =
      of_bool (odd (numeral ?w')) +
      2 * set_bit_class.set_bit (numeral ?w' div 2) ?n ?b",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 10,
             template_app (template_hole 9, template_var 2)),
           template_app (template_hole 8, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 9,
                     template_app (template_hole 3, template_hole 2))),
                 template_app (template_hole 9, template_var 2))))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 9,
               template_app (template_hole 3, template_hole 2))),
           template_app
            (template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 9, template_var 2)),
                   template_app
                    (template_hole 9,
                     template_app (template_hole 3, template_hole 2)))),
               template_var 1),
             template_var 0))))),
    ("Bits_Int.int_set_bit_numerals",
     "set_bit_class.set_bit Numeral1 (numeral ?w) ?b =
      of_bool (odd Numeral1) +
      2 * set_bit_class.set_bit (Numeral1 div 2) (pred_numeral ?w) ?b",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 11,
             template_app (template_hole 10, template_hole 9)),
           template_app (template_hole 8, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 10,
                     template_app (template_hole 3, template_hole 9))),
                 template_app (template_hole 10, template_hole 9))))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 10,
               template_app (template_hole 3, template_hole 9))),
           template_app
            (template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 10, template_hole 9)),
                   template_app
                    (template_hole 10,
                     template_app (template_hole 3, template_hole 9)))),
               template_app (template_hole 0, template_var 1)),
             template_var 0))))),
    ("Bits_Int.int_set_bit_numerals",
     "set_bit_class.set_bit (numeral ?w') (numeral ?w) ?b =
      of_bool (odd (numeral ?w')) +
      2 * set_bit_class.set_bit (numeral ?w' div 2) (pred_numeral ?w) ?b",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 11,
             template_app (template_hole 10, template_var 2)),
           template_app (template_hole 9, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 10,
                     template_app (template_hole 4, template_hole 3))),
                 template_app (template_hole 10, template_var 2))))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 10,
               template_app (template_hole 4, template_hole 3))),
           template_app
            (template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 10, template_var 2)),
                   template_app
                    (template_hole 10,
                     template_app (template_hole 4, template_hole 3)))),
               template_app (template_hole 0, template_var 1)),
             template_var 0))))),
    ("Bits_Int.rsplit_aux_simps",
     "bin_rsplit_aux ?n ?m ?c ?bs =
      (if ?m = 0 | ?n = 0 then ?bs
       else let (a, b) = bin_split ?n ?c
            in bin_rsplit_aux ?n (?m - ?n) a (b # ?bs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_dunno)),
    ("Bits_Int.int_set_bit_numerals",
     "set_bit_class.set_bit (- numeral ?w') (Suc ?n) ?b =
      of_bool (odd (- numeral ?w')) +
      2 * set_bit_class.set_bit (- numeral ?w' div 2) ?n ?b",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_hole 10,
               template_app (template_hole 9, template_var 2))),
           template_app (template_hole 8, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 9,
                     template_app (template_hole 3, template_hole 2))),
                 template_app
                  (template_hole 10,
                   template_app (template_hole 9, template_var 2)))))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 9,
               template_app (template_hole 3, template_hole 2))),
           template_app
            (template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_hole 10,
                       template_app (template_hole 9, template_var 2))),
                   template_app
                    (template_hole 9,
                     template_app (template_hole 3, template_hole 2)))),
               template_var 1),
             template_var 0))))),
    ("Bits_Int.int_set_bit_numerals",
     "set_bit_class.set_bit (- numeral ?w') (numeral ?w) ?b =
      of_bool (odd (- numeral ?w')) +
      2 * set_bit_class.set_bit (- numeral ?w' div 2) (pred_numeral ?w) ?b",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 12,
             template_app
              (template_hole 11,
               template_app (template_hole 10, template_var 2))),
           template_app (template_hole 9, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 10,
                     template_app (template_hole 4, template_hole 3))),
                 template_app
                  (template_hole 11,
                   template_app (template_hole 10, template_var 2)))))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 10,
               template_app (template_hole 4, template_hole 3))),
           template_app
            (template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_hole 11,
                       template_app (template_hole 10, template_var 2))),
                   template_app
                    (template_hole 10,
                     template_app (template_hole 4, template_hole 3)))),
               template_app (template_hole 0, template_var 1)),
             template_var 0))))),
    ("Bits_Int.bin_rsplit_aux_simp_alt",
     "bin_rsplit_aux ?n ?m ?c ?bs =
      (if ?m = 0 | ?n = 0 then ?bs
       else let (a, b) = bin_split ?n ?c
            in bin_rsplit ?n (?m - ?n, a) @ b # ?bs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 12, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_dunno)),
    ("Bits_Int.rsplit_aux_simps",
     "bin_rsplitl_aux ?n ?m ?c ?bs =
      (if ?m = 0 | ?n = 0 then ?bs
       else let (a, b) = bin_split (min ?m ?n) ?c
            in bin_rsplitl_aux ?n (?m - ?n) a (b # ?bs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_dunno)),
    ("Bits_Int.bin_rsplit_simp_alt",
     "bin_rsplit ?n ?w =
      (if fst ?w = 0 | ?n = 0 then []
       else let (a, b) = bin_split ?n (snd ?w)
            in bin_rsplit ?n (fst ?w - ?n, a) @ [b])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 1),
              template_var 0)
            )],
       template_dunno)),
    ("Bits_Int.bin_last_XOR",
     "odd (xor ?x ?y) = ((odd ?x | odd ?y) & ~ (odd ?x & odd ?y))",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3))),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_hole 5,
                       template_app (template_hole 4, template_hole 3))),
                   template_var 1))),
             template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_hole 3))),
                 template_var 0)))),
         template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_hole 5,
                       template_app (template_hole 4, template_hole 3))),
                   template_var 1))),
             template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_hole 3))),
                 template_var 0)))))))]
