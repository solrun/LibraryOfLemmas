   [("Ancient_Numeral.int_shiftr0", "drop_bit 0 ?x = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Ancient_Numeral.int_lsb_BIT", "lsb (?x BIT ?b) = ?b",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("Ancient_Numeral.Bit_B0", "?k BIT False = ?k + ?k",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 0))),
    ("Ancient_Numeral.bin_sign_simps", "bin_sign (?w BIT ?b) = bin_sign ?w",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("Ancient_Numeral.msb_BIT", "msb (?x BIT ?b) = msb ?x",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("Ancient_Numeral.bin_nth_0_BIT", "bit (?w BIT ?b) 0 = ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0),
       template_var 0)),
    ("Ancient_Numeral.expand_BIT",
     "numeral (num.Bit0 ?w) = numeral ?w BIT False",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 3, template_var 0)),
         template_hole 0))),
    ("Ancient_Numeral.expand_BIT",
     "numeral (num.Bit1 ?w) = numeral ?w BIT True",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 3, template_var 0)),
         template_hole 0))),
    ("Ancient_Numeral.BIT_bin_simps",
     "numeral ?k BIT False = numeral (num.Bit0 ?k)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app
        (template_hole 2, template_app (template_hole 0, template_var 0)))),
    ("Ancient_Numeral.BIT_bin_simps",
     "numeral ?k BIT True = numeral (num.Bit1 ?k)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app
        (template_hole 2, template_app (template_hole 0, template_var 0)))),
    ("Ancient_Numeral.bin_ex_rl", "EX w b. w BIT b = ?bin",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("Ancient_Numeral.Bit_B0_2t", "?k BIT False = 2 * ?k",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 0), template_hole 4),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0))),
         template_var 0))),
    ("Ancient_Numeral.Bit_B1", "?k BIT True = ?k + ?k + 1",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 0)),
         template_hole 0))),
    ("Ancient_Numeral.pred_BIT_simps", "?x BIT True - 1 = ?x BIT False",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_hole 2)),
         template_hole 1),
       template_app
        (template_app (template_hole 3, template_var 0), template_hole 0))),
    ("Ancient_Numeral.succ_BIT_simps", "?x BIT False + 1 = ?x BIT True",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_hole 2)),
         template_hole 1),
       template_app
        (template_app (template_hole 3, template_var 0), template_hole 0))),
    ("Ancient_Numeral.twice_conv_BIT", "2 * ?x = ?x BIT False",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2))),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Ancient_Numeral.Bit_div2", "?w BIT ?b div 2 = ?w",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))),
       template_var 1)),
    ("Ancient_Numeral.bin_rest_BIT", "?x BIT ?b div 2 = ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))),
       template_var 1)),
    ("Ancient_Numeral.BIT_lt0", "(?x BIT ?b < 0) = (?x < 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0),
       template_app
        (template_app (template_hole 2, template_var 1), template_hole 0))),
    ("Ancient_Numeral.BIT_ge0", "(0 <= ?x BIT ?b) = (0 <= ?x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1), template_var 1))),
    ("Ancient_Numeral.int_not_BIT", "not (?w BIT ?b) = not ?w BIT (~ ?b)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Ancient_Numeral.expand_BIT",
     "- numeral (num.Bit0 ?w) = (- numeral ?w) BIT False",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0))),
         template_hole 0))),
    ("Ancient_Numeral.BIT_bin_simps",
     "(- numeral ?k) BIT False = - numeral (num.Bit0 ?k)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0))),
         template_hole 1),
       template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 0, template_var 0))))),
    ("Ancient_Numeral.BIT_bin_simps",
     "(- numeral ?k) BIT True = - numeral (Num.BitM ?k)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0))),
         template_hole 1),
       template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 0, template_var 0))))),
    ("Ancient_Numeral.int_shiftr_Suc",
     "drop_bit (Suc ?n) (?x BIT ?b) = drop_bit ?n ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 2), template_var 1))),
    ("Ancient_Numeral.bin_nth_Suc_BIT",
     "bit (?w BIT ?b) (Suc ?n) = bit ?w ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 2), template_var 0))),
    ("Ancient_Numeral.even_BIT", "even (?x BIT ?b) = (~ ?b)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2))),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Ancient_Numeral.bin_last_BIT", "odd (?x BIT ?b) = ?b",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_var 0)),
    ("Ancient_Numeral.Bit_B1_2t", "?k BIT True = 2 * ?k + 1",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 0), template_hole 6),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1))),
             template_var 0)),
         template_hole 0))),
    ("Ancient_Numeral.bl_to_bin_BIT",
     "bl_to_bin ?bs BIT ?b = bl_to_bin (?bs @ [?b])",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("Ancient_Numeral.pred_BIT_simps",
     "?x BIT False - 1 = (?x - 1) BIT True",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_hole 2)),
         template_hole 1),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 4, template_var 0),
             template_hole 1)),
         template_hole 0))),
    ("Ancient_Numeral.succ_BIT_simps",
     "?x BIT True + 1 = (?x + 1) BIT False",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_hole 2)),
         template_hole 1),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 4, template_var 0),
             template_hole 1)),
         template_hole 0))),
    ("Ancient_Numeral.mult_BIT_simps",
     "?x * ?y BIT False = (?x * ?y) BIT False",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Ancient_Numeral.mult_BIT_simps",
     "?x BIT False * ?y = (?x * ?y) BIT False",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Ancient_Numeral.uminus_Bit_eq",
     "- ?k BIT ?b = (- ?k - of_bool ?b) BIT ?b",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 3, template_var 1)),
             template_app (template_hole 0, template_var 0))),
         template_var 0))),
    ("Ancient_Numeral.expand_BIT",
     "- numeral (num.Bit1 ?w) = (- numeral (?w + num.One)) BIT True",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_hole 5,
           template_app (template_hole 4, template_var 0))),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)))),
         template_hole 0))),
    ("Ancient_Numeral.Bit_eq_0_iff", "(?w BIT ?b = 0) = (?w = 0 & ~ ?b)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_hole 2),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_hole 2)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Ancient_Numeral.mult_BIT_simps",
     "?x BIT True * ?y = (?x * ?y) BIT False + ?y",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 2)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0)),
             template_hole 0)),
         template_var 0))),
    ("Ancient_Numeral.minus_BIT_0",
     "?x BIT ?b - ?y BIT False = (?x - ?y) BIT ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_var 1))),
    ("Ancient_Numeral.add_BIT_simps",
     "?x BIT False + ?y BIT False = (?x + ?y) BIT False",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Ancient_Numeral.add_BIT_simps",
     "?x BIT False + ?y BIT True = (?x + ?y) BIT True",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Ancient_Numeral.add_BIT_simps",
     "?x BIT True + ?y BIT False = (?x + ?y) BIT True",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_hole 1))),
    ("Ancient_Numeral.Bit_eq_m1_iff", "(?w BIT ?b = - 1) = (?w = - 1 & ?b)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_app (template_hole 2, template_hole 1)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_app (template_hole 2, template_hole 1))),
             template_var 0)
           ))),
    ("Ancient_Numeral.sbintrunc_0_BIT_B0",
     "signed_take_bit 0 (?w BIT False) = - (?w BIT False mod 2)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_hole 7),
         template_app
          (template_app (template_hole 6, template_var 0),
           template_hole 5)),
       template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 6, template_var 0),
               template_hole 5)),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Ancient_Numeral.sbintrunc_0_BIT_B1",
     "signed_take_bit 0 (?w BIT True) = - (?w BIT True mod 2)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_hole 7),
         template_app
          (template_app (template_hole 6, template_var 0),
           template_hole 5)),
       template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 6, template_var 0),
               template_hole 5)),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Ancient_Numeral.bin_cat_Suc_Bit",
     "concat_bit (Suc ?n) (?v BIT ?b) ?w = concat_bit ?n ?v ?w BIT ?b",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 3)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 0)),
         template_var 1))),
    ("Ancient_Numeral.bin_rl_simp", "(?w div 2) BIT odd ?w = ?w",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 0),
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2)))),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2))),
             template_var 0))),
       template_var 0)),
    ("Ancient_Numeral.int_and_Bits",
     "and (?x BIT ?b) (?y BIT ?c) = and ?x ?y BIT (?b & ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Ancient_Numeral.int_or_Bits",
     "or (?x BIT ?b) (?y BIT ?c) = or ?x ?y BIT (?b | ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Ancient_Numeral.add_BIT_simps",
     "?x BIT True + ?y BIT True = (?x + ?y + 1) BIT False",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 2)),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0)),
             template_hole 1)),
         template_hole 0))),
    ("Ancient_Numeral.BIT_eq_iff",
     "(?u BIT ?b = ?v BIT ?c) = (?u = ?v & ?b = ?c)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0))
           ))),
    ("Ancient_Numeral.bin_exhaust", "(!!x b. ?bin = x BIT b ==> ?Q) ==> ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Ancient_Numeral.bin_nth_minus",
     "0 < ?n ==> bit (?w BIT ?b) ?n = bit ?w (?n - 1)",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_hole 0))))),
    ("Ancient_Numeral.power_BIT", "2 ^ Suc ?n - 1 = (2 ^ ?n - 1) BIT True",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app (template_hole 5, template_hole 4))),
             template_app (template_hole 3, template_var 0))),
         template_hole 2),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_hole 4))),
                 template_var 0)),
             template_hole 2)),
         template_hole 0))),
    ("Ancient_Numeral.int_xor_Bits",
     "xor (?x BIT ?b) (?y BIT ?c) =
      xor ?x ?y BIT ((?b | ?c) & ~ (?b & ?c))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)))))),
    ("Ancient_Numeral.mod_BIT",
     "?bin BIT ?bit mod 2 ^ Suc ?n = (?bin mod 2 ^ ?n) BIT ?bit",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))),
               template_var 0))),
         template_var 1))),
    ("Ancient_Numeral.less_Bits",
     "(?v BIT ?b < ?w BIT ?c) = (?v < ?w | ?v <= ?w & ~ ?b & ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 5, template_var 3),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 2)),
             template_var 0))))),
    ("Ancient_Numeral.le_Bits",
     "(?v BIT ?b <= ?w BIT ?c) = (?v < ?w | ?v <= ?w & (~ ?b | ?c))",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 5, template_var 3),
               template_var 1)),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 0, template_var 2)),
             template_var 0))))),
    ("Ancient_Numeral.bin_to_bl_aux_Bit_minus_simp",
     "0 < ?n ==>
      bin_to_bl_aux ?n (?w BIT ?b) ?bl =
      bin_to_bl_aux (?n - 1) ?w (?b # ?bl)",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 3),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_hole 1)),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Ancient_Numeral.sbintrunc_Suc_BIT",
     "signed_take_bit (Suc ?n) (?w BIT ?b) =
      ?w BIT ?b mod 2 + 2 * signed_take_bit ?n ?w",
     template_equation
      (template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 2)),
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_var 0)),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1)))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_app
            (template_app (template_hole 8, template_var 2),
             template_var 1))))),
    ("Ancient_Numeral.bin_nth_Bit",
     "bit (?w BIT ?b) ?n = (?n = 0 & ?b | (EX m. ?n = Suc m & bit ?w m))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_hole 2)),
                 template_var 1)),
             template_app (template_hole 1, t_empty))
           ))),
    ("Ancient_Numeral.B_mod_2'",
     "?X = 2 ==> ?w BIT True mod ?X = 1 & ?w BIT False mod ?X = 0",
     template_implication
      ([template_equation
         (template_var 1,
          template_app
           (template_hole 9,
            template_app (template_hole 8, template_hole 7)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 4, template_var 0),
                         template_hole 3)),
                     template_var 1)),
                 template_hole 2)),
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_hole 1)),
                   template_var 1)),
               template_hole 0))
           ))),
    ("Ancient_Numeral.sbintrunc_Suc_minus_Is",
     "[| 0 < ?n; signed_take_bit (?n - 1) ?w = ?y |]
      ==> signed_take_bit ?n (?w BIT ?b) = ?y BIT ?b",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 3),
        template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 3),
                template_hole 1)),
            template_var 2),
          template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Ancient_Numeral.bin_abs_lem",
     "?bin = ?w BIT ?b ==>
      ?bin ~= - 1 -->
      ?bin ~= 0 --> nat \<bar>?w\<bar> < nat \<bar>?bin\<bar>",
     template_implication
      ([template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 8, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 9, template_var 2),
                   template_app (template_hole 5, template_hole 4)))),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 9, template_var 2),
                     template_hole 3))),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 1))),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2)))))
           ))),
    ("Ancient_Numeral.bin_induct",
     "[| ?P 0; ?P (- 1); !!bin bit. ?P bin ==> ?P (bin BIT bit) |]
      ==> ?P ?bin",
     template_implication
      ([template_predicate (template_app (template_var 1, template_hole 5)),
        template_predicate
         (
            template_app
             (template_var 1,
              template_app (template_hole 4, template_hole 3))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (template_app (template_var 1, template_var 0))))]
