Loading theory "HOL-Eisbach.Eisbach" (required by "Draft.Word_8Templates" via "Draft.Word_8" via "Word_Lib.Word_Lemmas" via "Word_Lib.Word_EqI" via "HOL-Eisbach.Eisbach_Tools")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Word_8Templates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Word_8Templates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Phantom_Type" (required by "Draft.Word_8Templates" via "Draft.Word_8" via "Word_Lib.More_Word" via "HOL-Library.Word" via "HOL-Library.Type_Length" via "HOL-Library.Numeral_Type" via "HOL-Library.Cardinality")
signature PARSE_TOOLS =
  sig
    val is_real_val: ('a, 'b) parse_val -> bool
    val name_term: (term, string) parse_val parser
    val parse_term_val: 'a parser -> (term, 'a) parse_val parser
    val parse_thm_val: 'a parser -> (thm, 'a) parse_val parser
    datatype ('a, 'b) parse_val
    = Parse_Val of 'b * ('a -> unit) | Real_Val of 'a
    val parse_val_cases:
       ('a -> 'b) -> ('b, 'a) parse_val -> 'b * ('b -> unit)
    val the_parse_fun: ('a, 'b) parse_val -> 'a -> unit
    val the_parse_val: ('a, 'b) parse_val -> 'b
    val the_real_val: ('a, 'b) parse_val -> 'a
  end
structure Parse_Tools: PARSE_TOOLS
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
signature METHOD_CLOSURE =
  sig
    val apply_method:
       Proof.context ->
         string ->
           term list ->
             thm list list ->
               (Proof.context -> Method.method) list ->
                 Proof.context -> thm list -> context_tactic
    val method:
       binding ->
         (binding * typ option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
    val method_cmd:
       binding ->
         (binding * string option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
  end
structure Method_Closure: METHOD_CLOSURE
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.137s elapsed time, 0.525s cpu time, 0.034s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Word_8Templates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
structure Eisbach_Rule_Insts: sig end
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.221s elapsed time, 0.875s cpu time, 0.081s GC time
Loading theory "HOL-Library.Signed_Division" (required by "Draft.Word_8Templates" via "Draft.Word_8" via "Word_Lib.Word_Lemmas" via "Word_Lib.Signed_Division_Word")
### theory "HOL-Library.Nat_Bijection"
### 0.360s elapsed time, 1.408s cpu time, 0.115s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Word_8Templates" via "Draft.ExtrEqs")
### ML warning (line 170 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 187 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 309 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
signature MATCH_METHOD =
  sig
    val focus_params: Proof.context -> term list
    val focus_schematics: Proof.context -> Envir.tenv
  end
structure Match_Method: MATCH_METHOD
val method_evaluate = fn: Method.text -> Proof.context -> thm list -> tactic
class signed_division = type +
  fixes signed_divide :: "'a => 'a => 'a"
    and signed_modulo :: "'a => 'a => 'a"
instantiation
  int :: signed_division
  signed_divide_int == signed_divide :: int => int => int
  signed_modulo_int == signed_modulo :: int => int => int
### theory "HOL-Eisbach.Eisbach"
### 0.469s elapsed time, 1.832s cpu time, 0.185s GC time
Loading theory "HOL-Eisbach.Eisbach_Tools" (required by "Draft.Word_8Templates" via "Draft.Word_8" via "Word_Lib.Word_Lemmas" via "Word_Lib.Word_EqI")
val try_map = fn: 'a Seq.seq -> 'a Seq.seq -> 'a Seq.seq
### theory "HOL-Library.Signed_Division"
### 0.127s elapsed time, 0.500s cpu time, 0.069s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Word_8Templates" via "Draft.ExtrEqs" via "Draft.Templates")
val uncurry_rule = fn: thm -> thm
val curry_rule = fn: thm -> thm
### theory "HOL-Eisbach.Eisbach_Tools"
### 0.032s elapsed time, 0.126s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Word_8Templates" via "Draft.ExtrEqs")
### theory "HOL-Library.Phantom_Type"
### 0.565s elapsed time, 2.257s cpu time, 0.185s GC time
Loading theory "HOL-Library.Cardinality" (required by "Draft.Word_8Templates" via "Draft.Word_8" via "Word_Lib.More_Word" via "HOL-Library.Word" via "HOL-Library.Type_Length" via "HOL-Library.Numeral_Type")
### Additional type variable(s) in locale specification "CARD_1": 'a
class CARD_1 = type +
  assumes "CARD_1": "CARD('a) = 1"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### Additional type variable(s) in locale specification "card2": 'a
class card2 = finite +
  assumes "two_le_card": "2 <= CARD('a)"
consts
  snth :: "'a stream => nat => 'a"
class finite_UNIV = type +
  fixes finite_UNIV :: "('a, bool) phantom"
  assumes "finite_UNIV": "finite_UNIV = Phantom('a) (finite UNIV)"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class card_UNIV = finite_UNIV +
  fixes card_UNIV :: "('a, nat) phantom"
  assumes "card_UNIV": "card_UNIV_class.card_UNIV = Phantom('a) CARD('a)"
instantiation
  nat :: card_UNIV
  card_UNIV_nat == card_UNIV_class.card_UNIV :: (nat, nat) phantom
  finite_UNIV_nat == finite_UNIV :: (nat, bool) phantom
instantiation
  int :: card_UNIV
  card_UNIV_int == card_UNIV_class.card_UNIV :: (int, nat) phantom
  finite_UNIV_int == finite_UNIV :: (int, bool) phantom
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
instantiation
  natural :: card_UNIV
  card_UNIV_natural == card_UNIV_class.card_UNIV :: (natural, nat) phantom
  finite_UNIV_natural == finite_UNIV :: (natural, bool) phantom
instantiation
  integer :: card_UNIV
  card_UNIV_integer == card_UNIV_class.card_UNIV :: (integer, nat) phantom
  finite_UNIV_integer == finite_UNIV :: (integer, bool) phantom
consts
  cycle :: "'a list => 'a stream"
instantiation
  list :: (type) card_UNIV
  card_UNIV_list == card_UNIV_class.card_UNIV :: ('a list, nat) phantom
  finite_UNIV_list == finite_UNIV :: ('a list, bool) phantom
instantiation
  unit :: card_UNIV
  card_UNIV_unit == card_UNIV_class.card_UNIV :: (unit, nat) phantom
  finite_UNIV_unit == finite_UNIV :: (unit, bool) phantom
instantiation
  bool :: card_UNIV
  card_UNIV_bool == card_UNIV_class.card_UNIV :: (bool, nat) phantom
  finite_UNIV_bool == finite_UNIV :: (bool, bool) phantom
consts
  left :: "'a tree => 'a tree"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  right :: "'a tree => 'a tree"
instantiation
  char :: card_UNIV
  card_UNIV_char == card_UNIV_class.card_UNIV :: (char, nat) phantom
  finite_UNIV_char == finite_UNIV :: (char, bool) phantom
instantiation
  prod :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_prod == finite_UNIV :: ('a * 'b, bool) phantom
instantiation
  prod :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_prod == card_UNIV_class.card_UNIV :: ('a * 'b, nat) phantom
instantiation
  sum :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_sum == finite_UNIV :: ('a + 'b, bool) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  sum :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_sum == card_UNIV_class.card_UNIV :: ('a + 'b, nat) phantom
consts
  flat :: "'a list stream => 'a stream"
instantiation
  fun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_fun == finite_UNIV :: ('a => 'b, bool) phantom
instantiation
  fun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_fun == card_UNIV_class.card_UNIV :: ('a => 'b, nat) phantom
instantiation
  option :: (finite_UNIV) finite_UNIV
  finite_UNIV_option == finite_UNIV :: ('a option, bool) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  option :: (card_UNIV) card_UNIV
  card_UNIV_option == card_UNIV_class.card_UNIV :: ('a option, nat) phantom
instantiation
  String.literal :: card_UNIV
  card_UNIV_literal == card_UNIV_class.card_UNIV ::
    (String.literal, nat) phantom
  finite_UNIV_literal == finite_UNIV :: (String.literal, bool) phantom
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
instantiation
  set :: (finite_UNIV) finite_UNIV
  finite_UNIV_set == finite_UNIV :: ('a set, bool) phantom
instantiation
  set :: (card_UNIV) card_UNIV
  card_UNIV_set == card_UNIV_class.card_UNIV :: ('a set, nat) phantom
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
instantiation
  Enum.finite_1 :: card_UNIV
  card_UNIV_finite_1 == card_UNIV_class.card_UNIV ::
    (Enum.finite_1, nat) phantom
  finite_UNIV_finite_1 == finite_UNIV :: (Enum.finite_1, bool) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  Enum.finite_2 :: card_UNIV
  card_UNIV_finite_2 == card_UNIV_class.card_UNIV ::
    (Enum.finite_2, nat) phantom
  finite_UNIV_finite_2 == finite_UNIV :: (Enum.finite_2, bool) phantom
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
instantiation
  Enum.finite_3 :: card_UNIV
  card_UNIV_finite_3 == card_UNIV_class.card_UNIV ::
    (Enum.finite_3, nat) phantom
  finite_UNIV_finite_3 == finite_UNIV :: (Enum.finite_3, bool) phantom
instantiation
  Enum.finite_4 :: card_UNIV
  card_UNIV_finite_4 == card_UNIV_class.card_UNIV ::
    (Enum.finite_4, nat) phantom
  finite_UNIV_finite_4 == finite_UNIV :: (Enum.finite_4, bool) phantom
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### theory "HOL-Library.Stream"
### 1.200s elapsed time, 4.568s cpu time, 0.916s GC time
Loading theory "Word_Lib.Enumeration" (required by "Draft.Word_8Templates" via "Draft.Word_8" via "Word_Lib.Enumeration_Word")
instantiation
  Enum.finite_5 :: card_UNIV
  card_UNIV_finite_5 == card_UNIV_class.card_UNIV ::
    (Enum.finite_5, nat) phantom
  finite_UNIV_finite_5 == finite_UNIV :: (Enum.finite_5, bool) phantom
### theory "HOL-Library.Cardinality"
### 1.018s elapsed time, 3.814s cpu time, 0.847s GC time
Loading theory "HOL-Library.Numeral_Type" (required by "Draft.Word_8Templates" via "Draft.Word_8" via "Word_Lib.More_Word" via "HOL-Library.Word" via "HOL-Library.Type_Length")
### theory "HOL-Library.BigO"
### 1.085s elapsed time, 4.104s cpu time, 0.847s GC time
Loading theory "Word_Lib.Even_More_List" (required by "Draft.Word_8Templates" via "Draft.Word_8" via "Word_Lib.Enumeration_Word")
consts
  the_index :: "'a list => 'a => nat"
class enum = finite +
  fixes enum :: "'a list"
    and enum_all :: "('a => bool) => bool"
    and enum_ex :: "('a => bool) => bool"
  assumes "UNIV_enum": "UNIV = set enum_class.enum"
    and "enum_distinct": "distinct enum_class.enum"
  assumes "enum_all_UNIV": "!!P. enum_class.enum_all P = Ball UNIV P"
  assumes "enum_ex_UNIV": "!!P. enum_class.enum_ex P = Bex UNIV P"
Found termination order: "size <*mlex*> {}"
### theory "Word_Lib.Even_More_List"
### 0.047s elapsed time, 0.193s cpu time, 0.000s GC time
Found termination order: "size <*mlex*> {}"
class enum_alt = type +
  fixes enum_alt :: "nat => 'a option"
instantiation
  num1 :: CARD_1
instantiation
  num1 :: {comm_monoid_mult,numeral,comm_ring}
  uminus_num1 == uminus :: num1 => num1
  zero_num1 == zero_class.zero :: num1
  minus_num1 == minus :: num1 => num1 => num1
  plus_num1 == plus :: num1 => num1 => num1
  one_num1 == one_class.one :: num1
  times_num1 == times :: num1 => num1 => num1
instantiation
  num1 :: linorder
  less_eq_num1 == less_eq :: num1 => num1 => bool
  less_num1 == less :: num1 => num1 => bool
Found termination order: "size <*mlex*> {}"
class enumeration_alt = enum_alt +
  assumes
    "enum_alt_one_bound":
      "!!x. enum_alt x = None ==> enum_alt (Suc x) = None"
  assumes "enum_alt_surj": "range enum_alt Un {None} = UNIV"
  assumes
    "enum_alt_inj":
      "!!x y. enum_alt x = enum_alt y ==> x = y | enum_alt x = None"
locale mod_type
  fixes n :: "int"
    and Rep :: "'a => int"
    and Abs :: "int => 'a"
  assumes "mod_type n Rep Abs"
locale mod_ring
  fixes n :: "int"
    and Rep :: "'a => int"
    and Abs :: "int => 'a"
  assumes "mod_ring n Rep Abs"
instantiation
  bit0 :: (finite) {minus,one,plus,times,uminus,zero}
  bit1 :: (finite) {minus,one,plus,times,uminus,zero}
  zero_bit0 == zero_class.zero :: 'a bit0
  uminus_bit0 == uminus :: 'a bit0 => 'a bit0
  times_bit0 == times :: 'a bit0 => 'a bit0 => 'a bit0
  plus_bit0 == plus :: 'a bit0 => 'a bit0 => 'a bit0
  one_bit0 == one_class.one :: 'a bit0
  minus_bit0 == minus :: 'a bit0 => 'a bit0 => 'a bit0
  zero_bit1 == zero_class.zero :: 'a bit1
  uminus_bit1 == uminus :: 'a bit1 => 'a bit1
  times_bit1 == times :: 'a bit1 => 'a bit1 => 'a bit1
  plus_bit1 == plus :: 'a bit1 => 'a bit1 => 'a bit1
  one_bit1 == one_class.one :: 'a bit1
  minus_bit1 == minus :: 'a bit1 => 'a bit1 => 'a bit1
Found termination order: "size <*mlex*> {}"
class enumeration_both = enum + enum_alt +
  assumes "enum_alt_rel": "enum_alt = alt_from_ord enum_class.enum"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  bit0 :: (finite) linorder
  bit1 :: (finite) linorder
  less_eq_bit0 == less_eq :: 'a bit0 => 'a bit0 => bool
  less_bit0 == less :: 'a bit0 => 'a bit0 => bool
  less_eq_bit1 == less_eq :: 'a bit1 => 'a bit1 => bool
  less_bit1 == less :: 'a bit1 => 'a bit1 => bool
instantiation
  bool :: enumeration_both
  enum_alt_bool == enum_alt :: nat => bool option
instantiation
  nat :: enumeration_alt
  enum_alt_nat == enum_alt :: nat => nat option
Found termination order: "size <*mlex*> {}"
instantiation
  num0 :: equal
  equal_num0 == equal_class.equal :: num0 => num0 => bool
instantiation
  num1 :: equal
  equal_num1 == equal_class.equal :: num1 => num1 => bool
### theory "Word_Lib.Enumeration"
### 0.504s elapsed time, 1.622s cpu time, 0.160s GC time
instantiation
  num1 :: enum
  enum_num1 == enum_class.enum :: num1 list
  enum_all_num1 == enum_class.enum_all :: (num1 => bool) => bool
  enum_ex_num1 == enum_class.enum_ex :: (num1 => bool) => bool
instantiation
  num0 :: card_UNIV
  num1 :: card_UNIV
  card_UNIV_num0 == card_UNIV_class.card_UNIV :: (num0, nat) phantom
  finite_UNIV_num0 == finite_UNIV :: (num0, bool) phantom
  card_UNIV_num1 == card_UNIV_class.card_UNIV :: (num1, nat) phantom
  finite_UNIV_num1 == finite_UNIV :: (num1, bool) phantom
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
instantiation
  bit0 :: (finite) equal
  bit1 :: (finite) equal
  equal_bit0 == equal_class.equal :: 'a bit0 => 'a bit0 => bool
  equal_bit1 == equal_class.equal :: 'a bit1 => 'a bit1 => bool
Found termination order: "size <*mlex*> {}"
instantiation
  bit0 :: (finite) enum
  enum_bit0 == enum_class.enum :: 'a bit0 list
  enum_all_bit0 == enum_class.enum_all :: ('a bit0 => bool) => bool
  enum_ex_bit0 == enum_class.enum_ex :: ('a bit0 => bool) => bool
instantiation
  bit1 :: (finite) enum
  enum_bit1 == enum_class.enum :: 'a bit1 list
  enum_all_bit1 == enum_class.enum_all :: ('a bit1 => bool) => bool
  enum_ex_bit1 == enum_class.enum_ex :: ('a bit1 => bool) => bool
instantiation
  bit0 :: (finite) finite_UNIV
  bit1 :: (finite) finite_UNIV
  finite_UNIV_bit0 == finite_UNIV :: ('a bit0, bool) phantom
  finite_UNIV_bit1 == finite_UNIV :: ('a bit1, bool) phantom
instantiation
  bit0 :: ({card_UNIV,finite}) card_UNIV
  bit1 :: ({card_UNIV,finite}) card_UNIV
  card_UNIV_bit0 == card_UNIV_class.card_UNIV :: ('a bit0, nat) phantom
  card_UNIV_bit1 == card_UNIV_class.card_UNIV :: ('a bit1, nat) phantom
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Numeral_Type"
### 0.664s elapsed time, 1.911s cpu time, 0.160s GC time
Loading theory "HOL-Library.Type_Length" (required by "Draft.Word_8Templates" via "Draft.Word_8" via "Word_Lib.More_Word" via "HOL-Library.Word")
class len0 = type +
  fixes len_of :: "'a itself => nat"
class len = len0 +
  assumes "len_gt_0": "0 < LENGTH('a)"
instantiation
  0 :: len0
  1 :: len0
  len_of_num0 == len_of :: 0 itself => nat
  len_of_num1 == len_of :: 1 itself => nat
instantiation
  bit0 :: (len0) len0
  bit1 :: (len0) len0
  len_of_bit0 == len_of :: 'a bit0 itself => nat
  len_of_bit1 == len_of :: 'a bit1 itself => nat
instantiation
  Enum.finite_1 :: len
  len_of_finite_1 == len_of :: Enum.finite_1 itself => nat
instantiation
  Enum.finite_2 :: len
  len_of_finite_2 == len_of :: Enum.finite_2 itself => nat
instantiation
  Enum.finite_3 :: len
  len_of_finite_3 == len_of :: Enum.finite_3 itself => nat
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.130s elapsed time, 6.868s cpu time, 1.114s GC time
Loading theory "Draft.Templates" (required by "Draft.Word_8Templates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.107s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Word_8Templates")
class linordered_idom = ring_char_0 + idom_abs_sgn +
  linordered_ring_strict + linordered_semidom +
  linordered_semiring_1_strict + ordered_comm_ring + ordered_ring_abs +
  assumes
    "sgn_if":
      "!!x. sgn x =
            (if x = (0::'a) then 0::'a
             else if (0::'a) < x then 1::'a else - (1::'a))"
### theory "HOL-Library.Type_Length"
### 0.482s elapsed time, 1.036s cpu time, 0.149s GC time
Loading theory "HOL-Library.Word" (required by "Draft.Word_8Templates" via "Draft.Word_8" via "Word_Lib.More_Word")
Loading theory "Word_Lib.More_Arithmetic" (required by "Draft.Word_8Templates" via "Draft.Word_8" via "Word_Lib.More_Word")
### theory "Word_Lib.More_Arithmetic"
### 0.074s elapsed time, 0.225s cpu time, 0.000s GC time
instantiation
  word :: (len) comm_ring_1
  uminus_word == uminus :: 'a word => 'a word
  one_word == one_class.one :: 'a word
  times_word == times :: 'a word => 'a word => 'a word
  zero_word == zero_class.zero :: 'a word
  minus_word == minus :: 'a word => 'a word => 'a word
  plus_word == plus :: 'a word => 'a word => 'a word
signature WORD_LIB =
  sig
    val dest_binT: typ -> int
    val dest_wordT: typ -> int
    val is_wordT: typ -> bool
    val mk_wordT: int -> typ
  end
structure Word_Lib: WORD_LIB
instantiation
  word :: (len) equal
  equal_word == equal_class.equal :: 'a word => 'a word => bool
class semiring_char_0 = semiring_1 +
  assumes "inj_of_nat": "inj of_nat"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.590s elapsed time, 1.334s cpu time, 0.176s GC time
instantiation
  word :: (len) linorder
  less_eq_word == less_eq :: 'a word => 'a word => bool
  less_word == less :: 'a word => 'a word => bool
instantiation
  word :: (len) enum
  enum_word == enum_class.enum :: 'a word list
  enum_all_word == enum_class.enum_all :: ('a word => bool) => bool
  enum_ex_word == enum_class.enum_ex :: ('a word => bool) => bool
instantiation
  word :: (len) semiring_modulo
  modulo_word == modulo :: 'a word => 'a word => 'a word
  divide_word == divide :: 'a word => 'a word => 'a word
instantiation
  word :: (len) semiring_bits
  bit_word == bit :: 'a word => nat => bool
instantiation
  word :: (len) ring_bit_operations
  not_word == not :: 'a word => 'a word
  and_word == and :: 'a word => 'a word => 'a word
  or_word == or :: 'a word => 'a word => 'a word
  xor_word == xor :: 'a word => 'a word => 'a word
  mask_word == mask :: nat => 'a word
  set_bit_word == set_bit :: nat => 'a word => 'a word
  unset_bit_word == unset_bit :: nat => 'a word => 'a word
  flip_bit_word == flip_bit :: nat => 'a word => 'a word
  push_bit_word == push_bit :: nat => 'a word => 'a word
  drop_bit_word == drop_bit :: nat => 'a word => 'a word
  take_bit_word == take_bit :: nat => 'a word => 'a word
class semiring_bits = semiring_parity +
  fixes bit :: "'a => nat => bool"
  assumes
    "bits_induct":
      "!!P a.
          [| !!a. a div (2::'a) = a ==> P a;
             !!a b.
                [| P a; (of_bool b + (2::'a) * a) div (2::'a) = a |]
                ==> P (of_bool b + (2::'a) * a) |]
          ==> P a"
  assumes "bits_div_0": "!!a. (0::'a) div a = (0::'a)"
    and "bits_div_by_1": "!!a. a div (1::'a) = a"
    and "bits_mod_div_trivial": "!!a b. a mod b div b = (0::'a)"
    and
    "even_succ_div_2":
      "!!a. even a ==> ((1::'a) + a) div (2::'a) = a div (2::'a)"
    and
    "even_mask_div_iff":
      "!!m n.
          even (((2::'a) ^ m - (1::'a)) div (2::'a) ^ n) =
          ((2::'a) ^ n = (0::'a) | m <= n)"
    and
    "exp_div_exp_eq":
      "!!m n.
          (2::'a) ^ m div (2::'a) ^ n =
          of_bool ((2::'a) ^ m ~= (0::'a) & n <= m) * (2::'a) ^ (m - n)"
    and
    "div_exp_eq":
      "!!a m n. a div (2::'a) ^ m div (2::'a) ^ n = a div (2::'a) ^ (m + n)"
    and
    "mod_exp_eq":
      "!!a m n. a mod (2::'a) ^ m mod (2::'a) ^ n = a mod (2::'a) ^ min m n"
    and
    "mult_exp_mod_exp_eq":
      "!!m n a.
          m <= n ==>
          a * (2::'a) ^ m mod (2::'a) ^ n =
          a mod (2::'a) ^ (n - m) * (2::'a) ^ m"
    and
    "div_exp_mod_exp_eq":
      "!!a n m.
          a div (2::'a) ^ n mod (2::'a) ^ m =
          a mod (2::'a) ^ (n + m) div (2::'a) ^ n"
    and
    "even_mult_exp_div_exp_iff":
      "!!a m n.
          even (a * (2::'a) ^ m div (2::'a) ^ n) =
          (n < m |
           (2::'a) ^ n = (0::'a) | m <= n & even (a div (2::'a) ^ (n - m)))"
  assumes "bit_iff_odd": "!!a n. bit a n = odd (a div (2::'a) ^ n)"
class semiring_bit_operations = semiring_bits +
  fixes "and" :: "'a => 'a => 'a"
    and or :: "'a => 'a => 'a"
    and xor :: "'a => 'a => 'a"
    and mask :: "nat => 'a"
    and set_bit :: "nat => 'a => 'a"
    and unset_bit :: "nat => 'a => 'a"
    and flip_bit :: "nat => 'a => 'a"
    and push_bit :: "nat => 'a => 'a"
    and drop_bit :: "nat => 'a => 'a"
    and take_bit :: "nat => 'a => 'a"
  assumes "bit_and_iff": "!!a b n. bit (and a b) n = (bit a n & bit b n)"
    and "bit_or_iff": "!!a b n. bit (or a b) n = (bit a n | bit b n)"
    and "bit_xor_iff": "!!a b n. bit (xor a b) n = (bit a n ~= bit b n)"
    and "mask_eq_exp_minus_1": "!!n. mask n = (2::'a) ^ n - (1::'a)"
    and "set_bit_eq_or": "!!n a. set_bit n a = or a (push_bit n (1::'a))"
    and
    "bit_unset_bit_iff":
      "!!m a n. bit (unset_bit m a) n = (bit a n & m ~= n)"
    and
    "flip_bit_eq_xor": "!!n a. flip_bit n a = xor a (push_bit n (1::'a))"
    and "push_bit_eq_mult": "!!n a. push_bit n a = a * (2::'a) ^ n"
    and "drop_bit_eq_div": "!!n a. drop_bit n a = a div (2::'a) ^ n"
    and "take_bit_eq_mod": "!!n a. take_bit n a = a mod (2::'a) ^ n"
class semiring_bit_operations = semiring_bits +
  fixes "and" :: "'a => 'a => 'a"
    and or :: "'a => 'a => 'a"
    and xor :: "'a => 'a => 'a"
    and mask :: "nat => 'a"
    and set_bit :: "nat => 'a => 'a"
    and unset_bit :: "nat => 'a => 'a"
    and flip_bit :: "nat => 'a => 'a"
    and push_bit :: "nat => 'a => 'a"
    and drop_bit :: "nat => 'a => 'a"
    and take_bit :: "nat => 'a => 'a"
  assumes "bit_and_iff": "!!a b n. bit (and a b) n = (bit a n & bit b n)"
    and "bit_or_iff": "!!a b n. bit (or a b) n = (bit a n | bit b n)"
    and "bit_xor_iff": "!!a b n. bit (xor a b) n = (bit a n ~= bit b n)"
    and "mask_eq_exp_minus_1": "!!n. mask n = (2::'a) ^ n - (1::'a)"
    and "set_bit_eq_or": "!!n a. set_bit n a = or a (push_bit n (1::'a))"
    and
    "bit_unset_bit_iff":
      "!!m a n. bit (unset_bit m a) n = (bit a n & m ~= n)"
    and
    "flip_bit_eq_xor": "!!n a. flip_bit n a = xor a (push_bit n (1::'a))"
    and "push_bit_eq_mult": "!!n a. push_bit n a = a * (2::'a) ^ n"
    and "drop_bit_eq_div": "!!n a. drop_bit n a = a div (2::'a) ^ n"
    and "take_bit_eq_mod": "!!n a. take_bit n a = a mod (2::'a) ^ n"
class ring_bit_operations = semiring_bit_operations + ring_parity +
  fixes not :: "'a => 'a"
  assumes
    "bit_not_iff_eq":
      "!!a n. bit (not a) n = ((2::'a) ^ n ~= (0::'a) & ~ bit a n)"
  assumes "minus_eq_not_minus_1": "!!a. - a = not (a - (1::'a))"
class unique_euclidean_semiring_numeral =
  unique_euclidean_semiring_with_nat + linordered_semidom +
  fixes divmod :: "num => num => 'a * 'a"
    and divmod_step :: "num => 'a * 'a => 'a * 'a"
  assumes
    "div_less": "!!a b. [| (0::'a) <= a; a < b |] ==> a div b = (0::'a)"
    and "mod_less": "!!a b. [| (0::'a) <= a; a < b |] ==> a mod b = a"
    and
    "div_positive": "!!b a. [| (0::'a) < b; b <= a |] ==> (0::'a) < a div b"
    and "mod_less_eq_dividend": "!!a b. (0::'a) <= a ==> a mod b <= a"
    and "pos_mod_bound": "!!b a. (0::'a) < b ==> a mod b < b"
    and "pos_mod_sign": "!!b a. (0::'a) < b ==> (0::'a) <= a mod b"
    and
    "mod_mult2_eq":
      "!!c a b.
          (0::'a) <= c ==> a mod (b * c) = b * (a div b mod c) + a mod b"
    and
    "div_mult2_eq":
      "!!c a b. (0::'a) <= c ==> a div (b * c) = a div b div c"
  assumes "discrete": "!!a b. (a < b) = (a + (1::'a) <= b)"
  assumes
    "divmod_def":
      "!!m n.
          divmod m n = (numeral m div numeral n, numeral m mod numeral n)"
    and
    "divmod_step_def":
      "!!l qr.
          divmod_step l qr =
          (let (q, r) = qr
           in if numeral l <= r then ((2::'a) * q + (1::'a), r - numeral l)
              else ((2::'a) * q, r))"
class linordered_semidom = linordered_comm_semiring_strict +
  linordered_nonzero_semiring + semidom +
  assumes "le_add_diff_inverse2": "!!b a. b <= a ==> a - b + b = a"
class ring_bit_operations = semiring_bit_operations + ring_parity +
  fixes not :: "'a => 'a"
  assumes
    "bit_not_iff_eq":
      "!!a n. bit (not a) n = ((2::'a) ^ n ~= (0::'a) & ~ bit a n)"
  assumes "minus_eq_not_minus_1": "!!a. - a = not (a - (1::'a))"
class semiring_bit_operations = semiring_bits +
  fixes "and" :: "'a => 'a => 'a"
    and or :: "'a => 'a => 'a"
    and xor :: "'a => 'a => 'a"
    and mask :: "nat => 'a"
    and set_bit :: "nat => 'a => 'a"
    and unset_bit :: "nat => 'a => 'a"
    and flip_bit :: "nat => 'a => 'a"
    and push_bit :: "nat => 'a => 'a"
    and drop_bit :: "nat => 'a => 'a"
    and take_bit :: "nat => 'a => 'a"
  assumes "bit_and_iff": "!!a b n. bit (and a b) n = (bit a n & bit b n)"
    and "bit_or_iff": "!!a b n. bit (or a b) n = (bit a n | bit b n)"
    and "bit_xor_iff": "!!a b n. bit (xor a b) n = (bit a n ~= bit b n)"
    and "mask_eq_exp_minus_1": "!!n. mask n = (2::'a) ^ n - (1::'a)"
    and "set_bit_eq_or": "!!n a. set_bit n a = or a (push_bit n (1::'a))"
    and
    "bit_unset_bit_iff":
      "!!m a n. bit (unset_bit m a) n = (bit a n & m ~= n)"
    and
    "flip_bit_eq_xor": "!!n a. flip_bit n a = xor a (push_bit n (1::'a))"
    and "push_bit_eq_mult": "!!n a. push_bit n a = a * (2::'a) ^ n"
    and "drop_bit_eq_div": "!!n a. drop_bit n a = a div (2::'a) ^ n"
    and "take_bit_eq_mod": "!!n a. take_bit n a = a mod (2::'a) ^ n"
class ring_bit_operations = semiring_bit_operations + ring_parity +
  fixes not :: "'a => 'a"
  assumes
    "bit_not_iff_eq":
      "!!a n. bit (not a) n = ((2::'a) ^ n ~= (0::'a) & ~ bit a n)"
  assumes "minus_eq_not_minus_1": "!!a. - a = not (a - (1::'a))"
instantiation
  word :: (len) size
  size_word == size :: 'a word => nat
### Partially applied constant "Word.word_sle" on left hand side of equation, in theorem:
### linorder.Min (\<le>s) (set (?x # ?xs)) == fold signed.min ?xs ?x
### Partially applied constant "Word.word_sle" on left hand side of equation, in theorem:
### linorder.Max (\<le>s) (set (?x # ?xs)) == fold signed.max ?xs ?x
### Partially applied constant "Word.word_sle" on left hand side of equation, in theorem:
### signed.sorted [] == True
### Partially applied constant "Word.word_sle" on left hand side of equation, in theorem:
### signed.sorted [?x] == True
### Partially applied constant "Word.word_sle" on left hand side of equation, in theorem:
### signed.sorted (?x # ?y # ?zs) == ?x \<le>s ?y & signed.sorted (?y # ?zs)
### Partially applied constant "Word.word_sle" on left hand side of equation, in theorem:
### signed.sorted_list_of_set (set ?xs) == signed.sort (remdups ?xs)
val unat_arith_simpset =
   Simpset
    ({depth = (0, ref false), prems = [], rules =
      Net {atoms =
           {("Int.Pos",
              Leaf
               [{elhs = "Int.Pos", extra = false, fo = true, lhs =
                 Const ("Int.Pos", "num => int"), name = "Int.Pos_def",
                 perm = false, thm = "Int.Pos == numeral"}]),
             ("Word.Word",
               Leaf
                [{elhs = "Word.Word", extra = false, fo = true, lhs =
                  Const ("Word.Word", "int => ?'a1 word"), name =
                  "Word.Word_eq_word_of_int", perm = false, thm =
                  "Word.Word == word_of_int"}]),
             ("Word.cast",
               Leaf
                [{elhs = "Word.cast", extra = false, fo = true, lhs =
                  Const ("Word.cast", "?'a1 word => ?'b1 word"), name =
                  "??.unknown", perm = false, thm = "Word.cast == ucast"}]),
             ("Word.of_int",
               Leaf
                [{elhs = "Word.of_int", extra = false, fo = true, lhs =
                  Const ("Word.of_int", "int => ?'a1 word"), name =
                  "??.unknown", perm = false, thm =
                  "Word.of_int == word_of_int"}]),
             ("Word.of_nat",
               Leaf
                [{elhs = "Word.of_nat", extra = false, fo = true, lhs =
                  Const ("Word.of_nat", "nat => ?'a1 word"), name =
                  "??.unknown", perm = false, thm =
                  "Word.of_nat == word_of_nat"}]),
             ("Word.the_int",
               Leaf
                [{elhs = "Word.the_int", extra = false, fo = true, lhs =
                  Const ("Word.the_int", "?'a1 word => int"), name =
                  "??.unknown", perm = false, thm =
                  "Word.the_int == uint"}]),
             ("Word.the_nat",
               Leaf
                [{elhs = "Word.the_nat", extra = false, fo = true, lhs =
                  Const ("Word.the_nat", "?'a1 word ... nat"), name =
                  "??.unknown", perm = false, thm =
                  "Word.the_nat == unat"}]),
             ("String.Literal'",
               Leaf
                [{elhs = "String.Literal'", extra = false, fo = true, lhs =
                  Const ("String.Literal'", "... ... ..."), name =
                  "String.Literal'_def", perm = false, thm =
                  "String.Literal' ... String.Literal"}]),
             ("Code_Numeral.Pos",
               Leaf
                [{elhs = "Code_Numeral.Pos", extra = false, fo = true, lhs =
                  Const ("Code_Numeral.Pos", "..."), name =
                  "Code_Numeral.Pos_def", perm = false, thm =
                  "... ... ..."}]),
             ("Word.signed_cast",
               Leaf
                [{elhs = "Word.signed_cast", extra = false, fo = true, lhs =
                  Const ("Word.signed_cast", "..."), name = "??.unknown",
                  ...}]),
             ("Word.the_signed_int",
               Leaf
                [{elhs = "...", extra = false, fo = true, lhs =
                  Const ("...", ...), ...}]),
             ("Groups.abs_class.abs",
               Leaf [{elhs = "...", extra = false, fo = true, ...}]),
             ("Groups.one_class.one",
               Leaf [{elhs = ..., extra = false, ...}, ...]),
             ("Groups.sgn_class.sgn", Leaf [...]),
             ("Code_Numeral.negative", ...), ...},
           comb =
           Net {atoms =
                {("Fun.id",
                   Net {atoms = {}, comb = Leaf [], var =
                        Leaf
                         [{elhs = "id ?y", extra = false, fo = true, lhs =
                           Const ("Fun.id", "?'a => ?'a") $
                             Var (("y", 0), "?'a"),
                           name = "Fun.id_apply", perm = false, thm =
                           "id ?y == ?y"}]}),
                  ("HOL.Ex",
                    Net {atoms = {}, comb =
                         Net {atoms =
                              {("HOL.eq",
                                 Net {atoms = {}, comb = Leaf [], var =
Leaf
 [{elhs = "...", extra = false, fo = true, lhs =
   Const ("...", "(?'d1 => bool) => bool") $ ..., ...}]})},
                              comb = Leaf [], var = Leaf []},
                         var =
                         Leaf
                          [{elhs = "Ex ?P1", extra = false, fo = true, lhs =
                            Const ("HOL.Ex", "(...) ... bool") $
                              Abs ("x", "1",
                                Var ((...), "1 => bool") $ ...),
                            name = "Numeral_Type.ex_1", perm = false, thm =
                            "EX x. ?P1 x == ?P1 1"},
                           {elhs = "Ex ?P1", extra = false, fo = true, lhs =
                            Const ("HOL.Ex", "... ... ...") $
                              Abs ("x", "...", ... $ ...),
                            name = "Product_Type.split_paired_Ex", perm =
                            false, thm =
                            "... x... ... ... == ... a b... ... ..."},
                           {elhs = "EX x y. ?p1 ... ......... ......",
                            extra = false, fo = true, lhs =
                            Const ("HOL.Ex", "...") $ Abs ("x", "...", ...),
                            name = "Product_Type.surj_pair", perm = false,
                            thm = "... ... ...... ... ... True"},
                           {elhs = "... x... ... ... ...", extra = false,
                            fo = false, lhs =
                            Const ("HOL.Ex", "...") $ Abs ("x", ..., ...),
                            name = "Set.ex_image_cong_iff_2", perm = false,
                            thm = "... ... ..."},
                           {elhs = "... ...... ...", extra = false, fo =
                            true, lhs =
                            Const ("...", ...) $ Abs ("...", "?'a1", ...),
                            name = "Set.ex_image_cong_iff_1", ...},
                           {elhs = "...", extra = false, fo = false, lhs =
                            Const ("...", "(?'d1 => bool) => bool") $ ...,
                            ...},
                           {elhs = "...", extra = false, fo = false, ...},
                           {elhs = ..., extra = false, ...}, ...]}),
                  ("HOL.All",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [{elhs = "All ?P1", extra = false, fo = true,
                            lhs =
                            Const ("HOL.All", "... ... ...") $
                              Abs ("i", "...", ... $ ...),
                            name = "Numeral_Type.forall_1", perm = false,
                            thm = "... i... ... ... == ?P1 ..."},
                           {elhs = "ALL y. ?x1 ... ... ...", extra = false,
                            fo = true, lhs =
                            Const ("HOL.All", "...") $
                              Abs ("y", "...", ...),
                            name = "Option.not_Some_eq", perm = false, thm =
                            "... ...... ... ... ... ... ..."},
                           {elhs = "All ?P1", extra = false, fo = true,
                            lhs =
                            Const ("HOL.All", "...") $ Abs ("x", ..., ...),
                            name = "Product_Type.split_paired_All", perm =
                            false, thm = "... ... ..."},
                           {elhs = "... ...... ...", extra = false, fo =
                            true, lhs =
                            Const ("...", ...) $ Abs ("...", "?'a1", ...),
                            name = "Set.all_not_in_conv", ...},
                           {elhs = "...", extra = false, fo = true, lhs =
                            Const ("...", "(?'d1 => bool) => bool") $ ...,
                            ...},
                           {elhs = "...", extra = false, fo = true, ...},
                           {elhs = ..., extra = false, ...}, ...]}),
                  ("HOL.Ex1",
                    Net {atoms = {}, comb =
                         Net {atoms =
                              {("HOL.eq",
                                 Net {atoms = {}, comb = Leaf [], var =
Leaf [{elhs = ..., extra = false, ...}]})},
                              comb = Leaf [], var = Leaf []},
                         var =
                         Leaf
                          [{elhs = "EX! x. x ... ?t1", extra = false, fo =
                            true, lhs =
                            Const ("HOL.Ex1", "...") $
                              Abs ("x", "...", ...),
                            name = "HOL.ex1_eq_1", perm = false, thm =
                            "... ...... ... ... True"}]}),
                  ("HOL.Not",
                    Net {atoms =
                         {("HOL.True",
                            Leaf
                             [{elhs = "... True", extra = false, fo = true,
                               lhs =
                               Const ("...", ...) $ Const ("...", "bool"),
                               name = "HOL.simp_thms_7", ...}]),
                           ("HOL.False",
                             Leaf
                              [{elhs = "... ...", extra = false, fo = true,
                                lhs = Const ("...", "bool => bool") $ ...,
                                ...}])},
                         comb =
                         Net {atoms =
                              {("HOL.Ex",
                                 Net {atoms = {}, comb = Leaf [...], var =
Leaf [...]}),
                                ("HOL.All",
                                  Net {atoms = {}, comb = ..., var = ...}),
                                ("HOL.Not", Net {atoms = {}, ...}),
                                ("Finite_Set.finite", ...)},
                              comb =
                              Net {atoms =
                                   {("HOL.eq", Net {atoms = {...}, ...}),
                                     ("Set.Bex", ...), ...},
                                   comb = Leaf [], var = Leaf []},
                              var = Leaf []},
                         var = Leaf []}),
                  ("HOL.The",
                    Net {atoms = {}, comb =
                         Net {atoms =
                              {("HOL.eq",
                                 Net {atoms = {}, comb = ..., var = ...}),
                                ("Product_Type.prod.case_prod",
                                  Net {atoms = {}, ...})},
                              comb = Leaf [], var = Leaf []},
                         var =
                         Leaf
                          [{elhs = "... ...... ...", extra = false, fo =
                            true, lhs =
                            Const ("...", ...) $ Abs ("...", "?'a", ...),
                            name = "HOL.the_eq_trivial", ...}]}),
                  ("Int.Neg",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [{elhs = "...", extra = false, fo = true, lhs =
                            Const ("...", "num => int") $ ..., ...}]}),
                  ("Int.dup",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [{elhs = "...", extra = false, fo = true, ...}]}),
                  ("Int.nat",
                    Net {atoms =
                         {("Groups.one_class.one", Leaf [...]),
                           ("Groups.zero_class.zero", ...)},
                         comb = Net {atoms = {...}, comb = ..., var = ...},
                         var = Leaf [{elhs = ..., extra = false, ...}]}),
                  ("Map.dom",
                    Net {atoms = {}, comb = Net {atoms = {...}, ...}, var =
                         Leaf [...]}),
                  ("Map.ran", Net {atoms = {}, comb = ..., var = ...}),
                  ("Nat.Suc", Net {atoms = {...}, ...}), ("Num.inc", ...),
                  ...},
                comb =
                Net {atoms =
                     {("HOL.eq",
                        Net {atoms =
                             {("HOL.True",
                                Net {atoms =
                                     {("HOL.False",
  Leaf
   [{elhs = "...", extra = false, fo = true, lhs =
     Const ("...", "bool => bool => bool") $ ... $ ..., ...}])},
                                     comb = Leaf [], var =
                                     Leaf
[{elhs = "... ... ...", extra = false, fo = true, lhs =
  Const ("...", ...) $ Const ("...", "bool") $ ..., name =
  "HOL.simp_thms_11", ...}]}),
                               ("HOL.False",
                                 Net {atoms =
{("HOL.True", Leaf [{elhs = "...", extra = false, fo = true, ...}])}, comb =
Leaf [], var =
Leaf
 [{elhs = "...", extra = false, fo = true, lhs =
   Const ("...", "bool => bool => bool") $ ... $ ..., ...}]}),
                               ("Num.num.One",
                                 Net {atoms = {}, comb =
Net {atoms = {("Num.num.Bit0", ...), ...}, comb = Leaf [...], var =
     Leaf [...]},
var = Leaf []}),
                               ("Filter.at_bot",
                                 Net {atoms =
{("Orderings.bot_class.bot", Leaf [...])}, comb = Leaf [], var = Leaf []}),
                               ("Filter.at_top",
                                 Net {atoms =
{("Orderings.bot_class.bot", ...)}, comb = Leaf [...], var = Leaf [...]}),
                               ("List.list.Nil",
                                 Net {atoms = {}, comb = ..., var = ...}),
                               ("Filter.cofinite",
                                 Net {atoms = {...}, ...}),
                               ("Option.option.None", ...), ...},
                             comb =
                             Net {atoms =
                                  {("HOL.Not",
                                     Net
{atoms = {}, comb = Leaf [], var =
 Net {atoms = {}, comb = Net {atoms = {...}, ...}, var = Leaf [...]}}),
                                    ("Int.nat",
Net {atoms = {}, comb = Leaf [], var =
     Net {atoms = {...}, comb = ..., var = ...}}),
                                    ("Map.dom",
Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {...}, ...}}),
                                    ("Nat.Suc",
Net {atoms = {...}, comb = ..., var = ...}),
                                    ("Set.Pow", Net {atoms = {}, ...}),
                                    ("List.rev", ...), ...},
                                  comb =
                                  Net {atoms =
 {("List.upt",
    Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}}),
   ("List.zip", Net {atoms = {}, comb = ..., var = ...}),
   ("List.drop", Net {atoms = {}, ...}), ("List.take", ...), ...},
 comb =
 Net {atoms =
      {("Fun.fun_upd", Net {atoms = {}, ...}), ("Map.map_add", ...), ...},
      comb = Net {atoms = {...}, comb = ..., var = ...}, var = Leaf []},
 var = Leaf []},
                                  var = Leaf []},
                             var =
                             Net {atoms =
                                  {("HOL.True",
                                     Leaf
[{elhs = "... ... ...", extra = false, fo = true, lhs =
  Const ("...", ...) $ Var ((...), "bool") $ ..., name = "HOL.simp_thms_12",
  ...}]),
                                    ("HOL.False",
Leaf
 [{elhs = "...", extra = false, fo = true, lhs =
   Const ("...", "bool => bool => bool") $ ... $ ..., ...}]),
                                    ("Groups.one_class.one",
Leaf [{elhs = "...", extra = false, fo = true, ...}])},
                                  comb =
                                  Net {atoms =
 {("HOL.Not", Net {atoms = {}, comb = Leaf [...], var = Leaf [...]}),
   ("Map.map_of", Net {atoms = {}, comb = ..., var = ...}),
   ("Groups.uminus_class.uminus", Net {atoms = {}, ...})},
 comb =
 Net {atoms =
      {("List.append", Net {atoms = {}, ...}), ("Map.map_add", ...), ...},
      comb = Leaf [], var = Leaf []},
 var = Leaf []},
                                  var =
                                  Leaf
                                   [{elhs = "?v1 ... ?w1", extra = false,
                                     fo = true, lhs =
                                     Const ("HOL.eq", "...") $
 Var (("...", 1), ...) $ Var ((...), "?'a1 word"),
                                     name = "local.unat_arith_simps_3",
                                     perm = false, thm = "... ... ..."},
                                    {elhs = "... ... ...", extra = false,
                                     fo = true, lhs =
                                     Const ("...", ...) $
 Var ((...), "?'a1") $ ...,
                                     name = "HOL.simp_thms_6", ...}]}}),
                       ("HOL.Let",
                         Net {atoms =
                              {("Groups.one_class.one",
                                 Net {atoms = {}, comb = Leaf [], var =
Leaf
 [{elhs = "...", extra = false, fo = true, lhs =
   Const ("...", "?'b1 => (?'b1 => ?'a) => ?'a") $ ... $ ..., ...}]}),
                                ("Groups.zero_class.zero",
                                  Net {atoms = {}, comb = Leaf [], var =
 Leaf [{elhs = "...", extra = false, fo = true, ...}]})},
                              comb =
                              Net {atoms =
                                   {("Nat.Suc",
Net {atoms = {}, comb = Leaf [], var =
     Net {atoms = {}, comb = ..., var = ...}}),
                                     ("Num.numeral_class.numeral",
 Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}}),
                                     ("Groups.uminus_class.uminus",
 Net {atoms = {}, comb = ..., var = ...})},
                                   comb = Leaf [], var = Leaf []},
                              var = Leaf []}),
                       ("Int.sub",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {}, comb = Leaf [], var =
                                   Leaf
                                    [{elhs = "...", extra = false, fo =
true, lhs = Const ("...", "num => num => int") $ ... $ ..., ...}]}}),
                       ("Num.pow",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms =
                                   {("Num.num.One",
Leaf [{elhs = ..., extra = false, ...}])},
                                   comb =
                                   Net {atoms =
  {("Num.num.Bit0", ...), ...}, comb = Leaf [...], var = Leaf [...]},
                                   var = Leaf []}}),
                       ("Set.Bex",
                         Net {atoms =
                              {("Orderings.bot_class.bot",
                                 Net {atoms = {}, comb = Leaf [...], var =
Leaf [...]}),
                                ("Orderings.top_class.top",
                                  Net {atoms = {}, comb = ..., var = ...})},
                              comb =
                              Net {atoms =
                                   {("Set.Collect", Net {atoms = {}, ...}),
                                     ("List.list.set", ...), ...},
                                   comb =
                                   Net {atoms = {...}, comb = ..., var =
  ...},
                                   var = Leaf []},
                              var =
                              Net {atoms = {}, comb =
                                   Net {atoms = {...}, comb = ..., var =
  ...},
                                   var =
                                   Leaf
                                    [{elhs = ..., extra = false, ...},
                                     ...]}}),
                       ("Fun.comp",
                         Net {atoms =
                              {("Fun.id",
                                 Net {atoms = {}, comb = ..., var = ...}),
                                ("Option.option.the",
                                  Net {atoms = {...}, ...}),
                                ("Product_Type.prod.fst", ...), ...},
                              comb =
                              Net {atoms = {("List.list.map", ...), ...},
                                   comb = Net {atoms = {...}, ...}, var =
                                   Leaf [...]},
                              var =
                              Net {atoms = {("Fun.id", ...)}, comb =
                                   Leaf [...], var = Leaf [...]}}),
                       ("GCD.bezw",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {...}, comb = ..., var = ...}}),
                       ("HOL.conj",
                         Net {atoms = {("HOL.True", ...), ...}, comb =
                              Net {atoms = {...}, ...}, var =
                              Net {atoms = {...}, ...}}),
                       ("HOL.disj",
                         Net {atoms = {...}, comb = ..., var = ...}),
                       ("List.nth", Net {atoms = {}, ...}),
                       ("List.upt", ...), ...},
                     comb =
                     Net {atoms =
                          {("HOL.If",
                             Net {atoms =
                                  {("HOL.True",
                                     Net
{atoms = {}, comb = Leaf [], var =
 Net {atoms = {}, comb = Leaf [...], var = Leaf [...]}}),
                                    ("HOL.False",
Net {atoms = {}, comb = Leaf [], var =
     Net {atoms = {}, comb = ..., var = ...}})},
                                  comb =
                                  Net {atoms = {}, comb =
 Net {atoms = {("HOL.eq", Net {atoms = {}, ...})}, comb = Leaf [], var =
      Leaf []},
 var = Leaf []},
                                  var =
                                  Net {atoms = {}, comb = Leaf [], var =
 Net {atoms = {}, comb = Leaf [], var =
      Leaf [{elhs = ..., extra = false, ...}]}}}),
                            ("Fun.comp",
                              Net {atoms = {}, comb = Leaf [], var =
                                   Net {atoms = {}, comb = Leaf [], var =
  Net {atoms = {}, comb = Leaf [...], var = Leaf [...]}}}),
                            ("Fun.fcomp",
                              Net {atoms = {}, comb = Leaf [], var =
                                   Net {atoms = {}, comb = Leaf [], var =
  Net {atoms = {}, comb = ..., var = ...}}}),
                            ("List.foldl",
                              Net {atoms = {}, comb = Leaf [], var =
                                   Net {atoms = {}, comb = Leaf [...], var =
  Net {atoms = {...}, ...}}}),
                            ("List.foldr",
                              Net {atoms = {}, comb = Leaf [], var =
                                   Net {atoms = {}, comb = ..., var =
  ...}}),
                            ("Nat.compow",
                              Net {atoms =
                                   {("Groups.zero_class.zero", ...)}, comb =
                                   Leaf [...], var = Leaf [...]}),
                            ("Fun.fun_upd",
                              Net {atoms = {}, comb = ..., var = ...}),
                            ("Map.map_add", Net {atoms = {}, ...}),
                            ("Fun.bij_betw", ...), ...},
                          comb =
                          Net {atoms =
                               {("Fun.fun_upd",
                                  Net {atoms = {}, comb = Leaf [], var =
 Net {atoms = {}, comb = Leaf [], var =
      Net {atoms = {}, comb = ..., var = ...}}}),
                                 ("Fun.map_fun",
                                   Net {atoms = {}, comb = Leaf [], var =
  Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}}}),
                                 ("Map.map_upds",
                                   Net {atoms = {}, comb = Leaf [], var =
  Net {atoms = {}, comb = ..., var = ...}}),
                                 ("BNF_Def.rel_sum",
                                   Net {atoms = {}, comb = Leaf [...], var =
  Net {atoms = {}, ...}}),
                                 ("Fun.override_on",
                                   Net {atoms = {}, comb = ..., var = ...}),
                                 ("Num.num.rec_num", Net {atoms = {}, ...}),
                                 ("Num.num.case_num", ...), ...},
                               comb =
                               Net {atoms =
                                    {("Enum.finite_4.rec_finite_4",
 Net {atoms = {}, comb = Leaf [], var =
      Net {atoms = {}, comb = ..., var = ...}}),
("Enum.finite_4.case_finite_4",
  Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}})},
                                    comb =
                                    Net {atoms =
   {("Enum.finite_5.rec_finite_5", Net {atoms = {}, comb = ..., var = ...}),
     ("Enum.finite_5.case_finite_5", Net {atoms = {}, ...})},
   comb =
   Net {atoms = {}, comb = Net {atoms = {...}, ...}, var = Leaf [...]},
   var = Leaf []},
                                    var = Leaf []},
                               var = Leaf []},
                          var = Leaf []},
                     var = Leaf []},
                var = Leaf []},
           var =
           Leaf
            [{elhs = "%u. EX x y. u = (x, y) & ?P1 x y", extra = false, fo =
              false, lhs =
              Abs ("u", "?'a1 * ?'b1",
                Const ("HOL.Ex", "(?'a1 => bool) => bool") $
                  Abs ("x", "?'a1",
                    Const ("HOL.Ex", "...") $ Abs ("y", "...", ...))),
              name = "Product_Type.split_eta_SetCompr2", perm = false, thm =
              "%u. EX x y. u = (x, y) & ?P1 x y == %(x, y). ?P1 x y"},
             {elhs = "%u. EX x y. u = (x, y) & ?y (x, y)", extra = false,
              fo = true, lhs =
              Abs ("u", "?'a1 * ?'b1",
                Const ("HOL.Ex", "(?'a1 ... bool) => bool") $
                  Abs ("x", "?'a1",
                    Const ("HOL.Ex", "...") $ Abs ("y", ..., ...))),
              name = "Product_Type.split_eta_SetCompr", perm = false, thm =
              "%u. EX x y. u = (x, y) & ?y (x, y) == ?y"},
             {elhs = "%a. ?y ()", extra = false, fo = true, lhs =
              Abs ("", "unit",
                Var (("y", 0), "unit => ?'a1") $
                  Const ("Product_Type.Unity", "unit")),
              name = "Product_Type.unit_abs_eta_conv", perm = false, thm =
              "%a. ?y () == ?y"},
             {elhs = "%A f. Inf (f ` A)", extra = false, fo = true, lhs =
              Abs ("A", "?'a1 set",
                Abs ("f", "?'a1 => bool",
                  Const ("Complete_Lattices.Inf_class.Inf", "...") $
                    (Const ("...",
                            "(?'a1 => bool) => ?'a1 set => bool set") $
                      ... $ ...))),
              name = "Complete_Lattices.INF_bool_eq", perm = false, thm =
              "%A f. Inf (f ` A) == Ball"},
             {elhs = "%A f. Sup (f ` A)", extra = false, fo = true, lhs =
              Abs ("A", "?'a1 set",
                Abs ("f", "?'a1 ... bool",
                  Const ("...", ...) $ (... $ ... $ ...))),
              name = "Complete_Lattices.SUP_bool_eq", perm = false, thm =
              "%A f. Sup (f ... A) == Bex"}]}},
     {congs =
      ({((true, "HOL.If"),
          "?b == ?c ==> if ?b then ?x else ?y == if ?c then ?x else ?y"),
         ((true, "Set.Bex"),
           "[| ?A == ?B; !!x. x : ?B =simp=> ?P x == ?Q x |]
            ==> EX x:?A. ?P x == EX x:?B. ?Q x"),
         ((true, "Set.Ball"),
           "[| ?A == ?B; !!x. x : ?B =simp=> ?P x == ?Q x |]
            ==> ALL x:?A. ?P x == ALL x:?B. ?Q x"),
         ((true, "Set.image"),
           "[| ?M == ?N; !!x. x : ?N =simp=> ?f x == ?g x |]
            ==> ?f ` ?M == ?g ` ?N"),
         ((true, "HOL.implies"),
           "[| ?P == ?P'; ?P' ==> ?Q == ?Q' |]
            ==> ?P --> ?Q == ?P' --> ?Q'"),
         ((true, "HOL.NO_MATCH"),
           "NO_MATCH ?pat ?val == NO_MATCH ?pat ?val"),
         ((true, "HOL.ASSUMPTION"), "ASSUMPTION ?A == ASSUMPTION ?A"),
         ((true, "HOL.simp_implies"),
           "[| PROP ?P == PROP ?P'; PROP ?P' ==> PROP ?Q ... PROP ?Q' |]
            ==> (PROP ?P ... PROP ?Q) == (PROP ?P' ... PROP ?Q')"),
         ((true, "Nat.nat.case_nat"),
           "?M == ?M' ==>
            case ?M of ... ... ... | ... ... ... ==
            case ?M' of ... ... ... | ... ... ..."),
         ((true, "Num.num.case_num"),
           "?num ... ?num' ==>
            ... ... ... ... ... ... ... ... ...
            ... ... ... ... ... ... ... ..."),
         ((true, "List.successively"),
           "... ...... ... ... ==> ... ... ..."),
         ((true, "List.list.case_list"), "... ... ..."),
         ((true, "String.char.case_char"), "..."),
         ((true, "Sum_Type.sum.case_sum"), "..."),
         ((true, "Nitpick.word.case_word"), ...), ((true, "..."), ...),
         ...},
       [(true, "Power.power_class.power"),
        (true, "Phantom_Type.phantom.case_phantom"),
        (true, "Nitpick.word.case_word"),
        (true, "Nitpick.pair_box.case_pair_box"),
        (true, "Nitpick.fun_box.case_fun_box"),
        (true, "Record.tuple_isomorphism.case_tuple_isomorphism"),
        (true, "Extraction.sumbool.case_sumbool"),
        (true, "Quickcheck_Exhaustive.three_valued.case_three_valued"),
        (true, "Quickcheck_Exhaustive.unknown.case_unknown"),
        (true, "Quickcheck_Narrowing.cfun.case_cfun"),
        (true, "Quickcheck_Narrowing.ffun.case_ffun"),
        (true, "Quickcheck_Narrowing.property.case_property"),
        (true, "Quickcheck_Narrowing.narrowing_cons.case_narrowing_cons"),
        (true, "Quickcheck_Narrowing.narrowing_term.case_narrowing_term"),
        (true, "Quickcheck_Narrowing.narrowing_type.case_narrowing_type"),
        (true, "..."), ...]),
      loop_tacs =
      [("split asm HOL.If :: (HOL.bool, (_, (_, _)fun)fun)fun", fn),
       ("split asm Rings.zero_neq_one_class.of_bool :: (HOL.bool, _)fun",
        fn),
       ("split Rings.zero_neq_one_class.of_bool :: (HOL.bool, _)fun", fn),
       ("split HOL.If :: (HOL.bool, (_, (_, _)fun)fun)fun", fn)],
      mk_rews =
      {mk = fn, mk_cong = fn, mk_eq_True = fn, mk_sym = fn, reorient = fn},
      procs =
      Net {atoms = {}, comb =
           Net {atoms =
                {("HOL.Ex",
                   Net {atoms = {}, comb = Leaf [], var =
                        Leaf
                         [Proc
                           {lhs =
                            Const ("HOL.Ex", "(...) ... bool") $
                              Abs ("x", "?'a",
                                Var ((...), "?'a => bool") $ ...),
                            name = "HOL.defined_Ex", proc = fn, stamp =
                            Stamp 91198}]}),
                  ("HOL.All",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [Proc
                            {lhs =
                             Const ("HOL.All", "... ... ...") $
                               Abs ("x", "...", ... $ ...),
                             name = "HOL.defined_All", proc = fn, stamp =
                             Stamp 91244}]}),
                  ("HOL.Not",
                    Net {atoms = {}, comb =
                         Net {atoms = {}, comb =
                              Net {atoms =
                                   {("Orderings.ord_class.less",
Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}})},
                                   comb = Leaf [], var = Leaf []},
                              var = Leaf []},
                         var = Leaf []}),
                  ("Nat.Suc",
                    Net {atoms = {}, comb =
                         Net {atoms = {}, comb =
                              Net {atoms =
                                   {("Groups.plus_class.plus",
Net {atoms = {}, comb = ..., var = ...})},
                                   comb = Leaf [], var = Leaf []},
                              var = Leaf []},
                         var = Leaf []}),
                  ("Pure.all",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [Proc
                            {lhs =
                             Const ("...", ...) $ Abs ("...", "?'a", ...),
                             name = "HOL.defined_all", proc = fn, stamp =
                             Stamp 91290}]}),
                  ("Set.Collect",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [Proc
                            {lhs =
                             Const ("...", "(?'a => bool) => ?'a set") $
                               ...,
                             name = "Product_Type.Collect_mem", proc = fn,
                             stamp = Stamp 616364},
                           Proc
                            {lhs = ... $ ..., name = "Set.defined_Collect",
                             proc = fn, stamp = Stamp 299868}]}),
                  ("List.list.set",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [Proc
                            {lhs = ... $ ..., name =
                             "List.list_to_set_comprehension", proc = fn,
                             stamp = Stamp 2625594}]}),
                  ("Product_Type.prod.case_prod",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf [Proc {lhs = ..., name = "...", ...}]})},
                comb =
                Net {atoms =
                     {("HOL.eq",
                        Net {atoms =
                             {("Groups.one_class.one",
                                Net {atoms = {}, comb = Leaf [], var =
                                     Leaf
[Proc
  {lhs = Const ("...", "?'a => ?'a => bool") $ ... $ ..., name =
   "Groups.reorient_one", proc = fn, stamp = Stamp 171260}]}),
                               ("Groups.zero_class.zero",
                                 Net {atoms = {}, comb = Leaf [], var =
Leaf
 [Proc
   {lhs = ... $ ... $ ..., name = "Groups.reorient_zero", proc = fn, stamp =
    Stamp 171216}]})},
                             comb =
                             Net {atoms =
                                  {("Nat.Suc",
                                     Net
{atoms = {}, comb = Leaf [], var =
 Net {atoms = {}, comb = Leaf [...], var = Leaf [...]}}),
                                    ("Num.numeral_class.numeral",
Net {atoms = {}, comb = Leaf [], var =
     Net {atoms = {}, comb = ..., var = ...}}),
                                    ("Groups.uminus_class.uminus",
Net {atoms = {}, comb = Net {atoms = {...}, ...}, var =
     Net {atoms = {}, ...}})},
                                  comb =
                                  Net {atoms =
 {("Groups.plus_class.plus",
    Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}}),
   ("Groups.minus_class.minus", Net {atoms = {}, comb = ..., var = ...}),
   ("Groups.times_class.times", Net {atoms = {}, ...})},
 comb = Leaf [], var = Leaf []},
                                  var = Leaf []},
                             var =
                             Net {atoms = {}, comb =
                                  Net {atoms =
 {("Nat.Suc", Net {atoms = {}, comb = Leaf [...], var = Leaf [...]}),
   ("Groups.uminus_class.uminus", Net {atoms = {}, comb = ..., var = ...})},
 comb =
 Net {atoms =
      {("Groups.plus_class.plus", Net {atoms = {}, ...}),
        ("Groups.minus_class.minus", ...), ...},
      comb = Leaf [], var = Leaf []},
 var = Leaf []},
                                  var =
                                  Leaf
                                   [Proc
                                     {lhs =
Const ("...", ...) $ Var ((...), "?'a") $ ..., name = "record_eq", proc =
fn, stamp = Stamp 4153886},
                                    Proc
                                     {lhs =
Const ("...", "?'a list => ?'a list => bool") $ ... $ ..., name =
"List.list_neq", proc = fn, stamp = Stamp 2645062},
                                    Proc
                                     {lhs = ... $ ... $ ..., name =
"List.list_eq", proc = fn, stamp = Stamp 2633172},
                                    Proc {lhs = ..., name = "...", ...},
                                    Proc {lhs = ..., ...}, ...]}}),
                       ("HOL.Let",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {}, comb = Leaf [], var =
                                   Leaf
                                    [Proc
{lhs = Const ("...", "?'a => (?'a => ?'b) => ?'b") $ ... $ ..., name =
 "HOL.let_simp", proc = fn, stamp = Stamp 91526}]}}),
                       ("Set.Bex",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {}, comb = Leaf [], var =
                                   Leaf
                                    [Proc
{lhs = ... $ ... $ ..., name = "Set.defined_Bex", proc = fn, stamp =
 Stamp 303020}]}}),
                       ("Pure.imp",
                         Net {atoms = {}, comb =
                              Net {atoms =
                                   {("HOL.Trueprop",
Net {atoms = {...}, comb = ..., var = ...})},
                                   comb = Leaf [], var = Leaf []},
                              var = Leaf []}),
                       ("Set.Ball",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {}, comb = Leaf [], var =
                                   Leaf [Proc {lhs = ..., ...}]}}),
                       ("HOL.NO_MATCH",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {}, comb = Leaf [...], var =
                                   Leaf [...]}}),
                       ("Rings.dvd_class.dvd",
                         Net {atoms = {}, comb =
                              Net {atoms = {}, comb = ..., var = ...}, var =
                              Net {atoms = {}, comb = ..., var = ...}}),
                       ("Groups.plus_class.plus",
                         Net {atoms = {}, comb = Leaf [...], var =
                              Net {atoms = {}, ...}}),
                       ("Lattices.inf_class.inf",
                         Net {atoms = {}, comb = ..., var = ...}),
                       ("Lattices.sup_class.sup", Net {atoms = {}, ...}),
                       ("Groups.minus_class.minus", ...), ...},
                     comb =
                     Net {atoms =
                          {("Fun.fun_upd",
                             Net {atoms = {}, comb =
                                  Net {atoms = {}, comb =
 Net {atoms = {}, comb = Net {atoms = {...}, comb = ..., var = ...}, var =
      Leaf []},
 var = Leaf []},
                                  var = Leaf []})},
                          comb = Leaf [], var = Leaf []},
                     var = Leaf []},
                var = Leaf []},
           var =
           Leaf
            [Proc
              {lhs = Var (("x", 0), "?'a"), name = "record", proc = fn,
               stamp = Stamp 4153844},
             Proc
              {lhs = Var (("x", 0), "?'a"), name = "record_upd", proc = fn,
               stamp = Stamp 4153854},
             Proc
              {lhs = Var (("x", 0), "unit"), name = "Product_Type.unit_eq",
               proc = fn, stamp = Stamp 562196}]},
      solvers =
      ([Solver {id = Stamp 1038750, name = "Rtranclp", solver = fn},
        Solver {id = Stamp 1038748, name = "Tranclp", solver = fn},
        Solver {id = Stamp 1038746, name = "Rtrancl", solver = fn},
        Solver {id = Stamp 1038744, name = "Trancl", solver = fn},
        Solver {id = Stamp 781564, name = "lin_arith", solver = fn},
        Solver {id = Stamp 132670, name = "Transitivity", solver = fn},
        Solver {id = Stamp 102528, name = "ASSUMPTION", solver = fn},
        Solver {id = Stamp 90936, name = "HOL unsafe", solver = fn}],
       [Solver {id = Stamp 90938, name = "HOL safe", solver = fn}]),
      subgoal_tac = fn, term_ord = fn}):
   simpset
val unat_arith_tacs = fn: Proof.context -> tactic list
val unat_arith_tac = fn: Proof.context -> int -> tactic
val uint_arith_simpset =
   Simpset
    ({depth = (0, ref false), prems = [], rules =
      Net {atoms =
           {("Int.Pos",
              Leaf
               [{elhs = "Int.Pos", extra = false, fo = true, lhs =
                 Const ("Int.Pos", "num => int"), name = "Int.Pos_def",
                 perm = false, thm = "Int.Pos == numeral"}]),
             ("Word.Word",
               Leaf
                [{elhs = "Word.Word", extra = false, fo = true, lhs =
                  Const ("Word.Word", "int => ?'a1 word"), name =
                  "Word.Word_eq_word_of_int", perm = false, thm =
                  "Word.Word == word_of_int"}]),
             ("Word.cast",
               Leaf
                [{elhs = "Word.cast", extra = false, fo = true, lhs =
                  Const ("Word.cast", "?'a1 word => ?'b1 word"), name =
                  "??.unknown", perm = false, thm = "Word.cast == ucast"}]),
             ("Word.of_int",
               Leaf
                [{elhs = "Word.of_int", extra = false, fo = true, lhs =
                  Const ("Word.of_int", "int => ?'a1 word"), name =
                  "??.unknown", perm = false, thm =
                  "Word.of_int == word_of_int"}]),
             ("Word.of_nat",
               Leaf
                [{elhs = "Word.of_nat", extra = false, fo = true, lhs =
                  Const ("Word.of_nat", "nat => ?'a1 word"), name =
                  "??.unknown", perm = false, thm =
                  "Word.of_nat == word_of_nat"}]),
             ("Word.the_int",
               Leaf
                [{elhs = "Word.the_int", extra = false, fo = true, lhs =
                  Const ("Word.the_int", "?'a1 word => int"), name =
                  "??.unknown", perm = false, thm =
                  "Word.the_int == uint"}]),
             ("Word.the_nat",
               Leaf
                [{elhs = "Word.the_nat", extra = false, fo = true, lhs =
                  Const ("Word.the_nat", "?'a1 word ... nat"), name =
                  "??.unknown", perm = false, thm =
                  "Word.the_nat == unat"}]),
             ("String.Literal'",
               Leaf
                [{elhs = "String.Literal'", extra = false, fo = true, lhs =
                  Const ("String.Literal'", "... ... ..."), name =
                  "String.Literal'_def", perm = false, thm =
                  "String.Literal' ... String.Literal"}]),
             ("Code_Numeral.Pos",
               Leaf
                [{elhs = "Code_Numeral.Pos", extra = false, fo = true, lhs =
                  Const ("Code_Numeral.Pos", "..."), name =
                  "Code_Numeral.Pos_def", perm = false, thm =
                  "... ... ..."}]),
             ("Word.signed_cast",
               Leaf
                [{elhs = "Word.signed_cast", extra = false, fo = true, lhs =
                  Const ("Word.signed_cast", "..."), name = "??.unknown",
                  ...}]),
             ("Word.the_signed_int",
               Leaf
                [{elhs = "...", extra = false, fo = true, lhs =
                  Const ("...", ...), ...}]),
             ("Groups.abs_class.abs",
               Leaf [{elhs = "...", extra = false, fo = true, ...}]),
             ("Groups.one_class.one",
               Leaf [{elhs = ..., extra = false, ...}, ...]),
             ("Groups.sgn_class.sgn", Leaf [...]),
             ("Code_Numeral.negative", ...), ...},
           comb =
           Net {atoms =
                {("Fun.id",
                   Net {atoms = {}, comb = Leaf [], var =
                        Leaf
                         [{elhs = "id ?y", extra = false, fo = true, lhs =
                           Const ("Fun.id", "?'a => ?'a") $
                             Var (("y", 0), "?'a"),
                           name = "Fun.id_apply", perm = false, thm =
                           "id ?y == ?y"}]}),
                  ("HOL.Ex",
                    Net {atoms = {}, comb =
                         Net {atoms =
                              {("HOL.eq",
                                 Net {atoms = {}, comb = Leaf [], var =
Leaf
 [{elhs = "...", extra = false, fo = true, lhs =
   Const ("...", "(?'d1 => bool) => bool") $ ..., ...}]})},
                              comb = Leaf [], var = Leaf []},
                         var =
                         Leaf
                          [{elhs = "Ex ?P1", extra = false, fo = true, lhs =
                            Const ("HOL.Ex", "(...) ... bool") $
                              Abs ("x", "1",
                                Var ((...), "1 => bool") $ ...),
                            name = "Numeral_Type.ex_1", perm = false, thm =
                            "EX x. ?P1 x == ?P1 1"},
                           {elhs = "Ex ?P1", extra = false, fo = true, lhs =
                            Const ("HOL.Ex", "... ... ...") $
                              Abs ("x", "...", ... $ ...),
                            name = "Product_Type.split_paired_Ex", perm =
                            false, thm =
                            "... x... ... ... == ... a b... ... ..."},
                           {elhs = "EX x y. ?p1 ... ......... ......",
                            extra = false, fo = true, lhs =
                            Const ("HOL.Ex", "...") $ Abs ("x", "...", ...),
                            name = "Product_Type.surj_pair", perm = false,
                            thm = "... ... ...... ... ... True"},
                           {elhs = "... x... ... ... ...", extra = false,
                            fo = false, lhs =
                            Const ("HOL.Ex", "...") $ Abs ("x", ..., ...),
                            name = "Set.ex_image_cong_iff_2", perm = false,
                            thm = "... ... ..."},
                           {elhs = "... ...... ...", extra = false, fo =
                            true, lhs =
                            Const ("...", ...) $ Abs ("...", "?'a1", ...),
                            name = "Set.ex_image_cong_iff_1", ...},
                           {elhs = "...", extra = false, fo = false, lhs =
                            Const ("...", "(?'d1 => bool) => bool") $ ...,
                            ...},
                           {elhs = "...", extra = false, fo = false, ...},
                           {elhs = ..., extra = false, ...}, ...]}),
                  ("HOL.All",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [{elhs = "All ?P1", extra = false, fo = true,
                            lhs =
                            Const ("HOL.All", "... ... ...") $
                              Abs ("i", "...", ... $ ...),
                            name = "Numeral_Type.forall_1", perm = false,
                            thm = "... i... ... ... == ?P1 ..."},
                           {elhs = "ALL y. ?x1 ... ... ...", extra = false,
                            fo = true, lhs =
                            Const ("HOL.All", "...") $
                              Abs ("y", "...", ...),
                            name = "Option.not_Some_eq", perm = false, thm =
                            "... ...... ... ... ... ... ..."},
                           {elhs = "All ?P1", extra = false, fo = true,
                            lhs =
                            Const ("HOL.All", "...") $ Abs ("x", ..., ...),
                            name = "Product_Type.split_paired_All", perm =
                            false, thm = "... ... ..."},
                           {elhs = "... ...... ...", extra = false, fo =
                            true, lhs =
                            Const ("...", ...) $ Abs ("...", "?'a1", ...),
                            name = "Set.all_not_in_conv", ...},
                           {elhs = "...", extra = false, fo = true, lhs =
                            Const ("...", "(?'d1 => bool) => bool") $ ...,
                            ...},
                           {elhs = "...", extra = false, fo = true, ...},
                           {elhs = ..., extra = false, ...}, ...]}),
                  ("HOL.Ex1",
                    Net {atoms = {}, comb =
                         Net {atoms =
                              {("HOL.eq",
                                 Net {atoms = {}, comb = Leaf [], var =
Leaf [{elhs = ..., extra = false, ...}]})},
                              comb = Leaf [], var = Leaf []},
                         var =
                         Leaf
                          [{elhs = "EX! x. x ... ?t1", extra = false, fo =
                            true, lhs =
                            Const ("HOL.Ex1", "...") $
                              Abs ("x", "...", ...),
                            name = "HOL.ex1_eq_1", perm = false, thm =
                            "... ...... ... ... True"}]}),
                  ("HOL.Not",
                    Net {atoms =
                         {("HOL.True",
                            Leaf
                             [{elhs = "... True", extra = false, fo = true,
                               lhs =
                               Const ("...", ...) $ Const ("...", "bool"),
                               name = "HOL.simp_thms_7", ...}]),
                           ("HOL.False",
                             Leaf
                              [{elhs = "... ...", extra = false, fo = true,
                                lhs = Const ("...", "bool => bool") $ ...,
                                ...}])},
                         comb =
                         Net {atoms =
                              {("HOL.Ex",
                                 Net {atoms = {}, comb = Leaf [...], var =
Leaf [...]}),
                                ("HOL.All",
                                  Net {atoms = {}, comb = ..., var = ...}),
                                ("HOL.Not", Net {atoms = {}, ...}),
                                ("Finite_Set.finite", ...)},
                              comb =
                              Net {atoms =
                                   {("HOL.eq", Net {atoms = {...}, ...}),
                                     ("Set.Bex", ...), ...},
                                   comb = Leaf [], var = Leaf []},
                              var = Leaf []},
                         var = Leaf []}),
                  ("HOL.The",
                    Net {atoms = {}, comb =
                         Net {atoms =
                              {("HOL.eq",
                                 Net {atoms = {}, comb = ..., var = ...}),
                                ("Product_Type.prod.case_prod",
                                  Net {atoms = {}, ...})},
                              comb = Leaf [], var = Leaf []},
                         var =
                         Leaf
                          [{elhs = "... ...... ...", extra = false, fo =
                            true, lhs =
                            Const ("...", ...) $ Abs ("...", "?'a", ...),
                            name = "HOL.the_eq_trivial", ...}]}),
                  ("Int.Neg",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [{elhs = "...", extra = false, fo = true, lhs =
                            Const ("...", "num => int") $ ..., ...}]}),
                  ("Int.dup",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [{elhs = "...", extra = false, fo = true, ...}]}),
                  ("Int.nat",
                    Net {atoms =
                         {("Groups.one_class.one", Leaf [...]),
                           ("Groups.zero_class.zero", ...)},
                         comb = Net {atoms = {...}, comb = ..., var = ...},
                         var = Leaf [{elhs = ..., extra = false, ...}]}),
                  ("Map.dom",
                    Net {atoms = {}, comb = Net {atoms = {...}, ...}, var =
                         Leaf [...]}),
                  ("Map.ran", Net {atoms = {}, comb = ..., var = ...}),
                  ("Nat.Suc", Net {atoms = {...}, ...}), ("Num.inc", ...),
                  ...},
                comb =
                Net {atoms =
                     {("HOL.eq",
                        Net {atoms =
                             {("HOL.True",
                                Net {atoms =
                                     {("HOL.False",
  Leaf
   [{elhs = "...", extra = false, fo = true, lhs =
     Const ("...", "bool => bool => bool") $ ... $ ..., ...}])},
                                     comb = Leaf [], var =
                                     Leaf
[{elhs = "... ... ...", extra = false, fo = true, lhs =
  Const ("...", ...) $ Const ("...", "bool") $ ..., name =
  "HOL.simp_thms_11", ...}]}),
                               ("HOL.False",
                                 Net {atoms =
{("HOL.True", Leaf [{elhs = "...", extra = false, fo = true, ...}])}, comb =
Leaf [], var =
Leaf
 [{elhs = "...", extra = false, fo = true, lhs =
   Const ("...", "bool => bool => bool") $ ... $ ..., ...}]}),
                               ("Num.num.One",
                                 Net {atoms = {}, comb =
Net {atoms = {("Num.num.Bit0", ...), ...}, comb = Leaf [...], var =
     Leaf [...]},
var = Leaf []}),
                               ("Filter.at_bot",
                                 Net {atoms =
{("Orderings.bot_class.bot", Leaf [...])}, comb = Leaf [], var = Leaf []}),
                               ("Filter.at_top",
                                 Net {atoms =
{("Orderings.bot_class.bot", ...)}, comb = Leaf [...], var = Leaf [...]}),
                               ("List.list.Nil",
                                 Net {atoms = {}, comb = ..., var = ...}),
                               ("Filter.cofinite",
                                 Net {atoms = {...}, ...}),
                               ("Option.option.None", ...), ...},
                             comb =
                             Net {atoms =
                                  {("HOL.Not",
                                     Net
{atoms = {}, comb = Leaf [], var =
 Net {atoms = {}, comb = Net {atoms = {...}, ...}, var = Leaf [...]}}),
                                    ("Int.nat",
Net {atoms = {}, comb = Leaf [], var =
     Net {atoms = {...}, comb = ..., var = ...}}),
                                    ("Map.dom",
Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {...}, ...}}),
                                    ("Nat.Suc",
Net {atoms = {...}, comb = ..., var = ...}),
                                    ("Set.Pow", Net {atoms = {}, ...}),
                                    ("List.rev", ...), ...},
                                  comb =
                                  Net {atoms =
 {("List.upt",
    Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}}),
   ("List.zip", Net {atoms = {}, comb = ..., var = ...}),
   ("List.drop", Net {atoms = {}, ...}), ("List.take", ...), ...},
 comb =
 Net {atoms =
      {("Fun.fun_upd", Net {atoms = {}, ...}), ("Map.map_add", ...), ...},
      comb = Net {atoms = {...}, comb = ..., var = ...}, var = Leaf []},
 var = Leaf []},
                                  var = Leaf []},
                             var =
                             Net {atoms =
                                  {("HOL.True",
                                     Leaf
[{elhs = "... ... ...", extra = false, fo = true, lhs =
  Const ("...", ...) $ Var ((...), "bool") $ ..., name = "HOL.simp_thms_12",
  ...}]),
                                    ("HOL.False",
Leaf
 [{elhs = "...", extra = false, fo = true, lhs =
   Const ("...", "bool => bool => bool") $ ... $ ..., ...}]),
                                    ("Groups.one_class.one",
Leaf [{elhs = "...", extra = false, fo = true, ...}])},
                                  comb =
                                  Net {atoms =
 {("HOL.Not", Net {atoms = {}, comb = Leaf [...], var = Leaf [...]}),
   ("Map.map_of", Net {atoms = {}, comb = ..., var = ...}),
   ("Groups.uminus_class.uminus", Net {atoms = {}, ...})},
 comb =
 Net {atoms =
      {("List.append", Net {atoms = {}, ...}), ("Map.map_add", ...), ...},
      comb = Leaf [], var = Leaf []},
 var = Leaf []},
                                  var =
                                  Leaf
                                   [{elhs = "?a1 ... ?b1", extra = false,
                                     fo = true, lhs =
                                     Const ("HOL.eq", "...") $
 Var (("...", 1), ...) $ Var ((...), "?'a1 word"),
                                     name = "local.uint_arith_simps_3",
                                     perm = false, thm = "... ... ..."},
                                    {elhs = "... ... ...", extra = false,
                                     fo = true, lhs =
                                     Const ("...", ...) $
 Var ((...), "?'a1") $ ...,
                                     name = "HOL.simp_thms_6", ...}]}}),
                       ("HOL.Let",
                         Net {atoms =
                              {("Groups.one_class.one",
                                 Net {atoms = {}, comb = Leaf [], var =
Leaf
 [{elhs = "...", extra = false, fo = true, lhs =
   Const ("...", "?'b1 => (?'b1 => ?'a) => ?'a") $ ... $ ..., ...}]}),
                                ("Groups.zero_class.zero",
                                  Net {atoms = {}, comb = Leaf [], var =
 Leaf [{elhs = "...", extra = false, fo = true, ...}]})},
                              comb =
                              Net {atoms =
                                   {("Nat.Suc",
Net {atoms = {}, comb = Leaf [], var =
     Net {atoms = {}, comb = ..., var = ...}}),
                                     ("Num.numeral_class.numeral",
 Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}}),
                                     ("Groups.uminus_class.uminus",
 Net {atoms = {}, comb = ..., var = ...})},
                                   comb = Leaf [], var = Leaf []},
                              var = Leaf []}),
                       ("Int.sub",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {}, comb = Leaf [], var =
                                   Leaf
                                    [{elhs = "...", extra = false, fo =
true, lhs = Const ("...", "num => num => int") $ ... $ ..., ...}]}}),
                       ("Num.pow",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms =
                                   {("Num.num.One",
Leaf [{elhs = ..., extra = false, ...}])},
                                   comb =
                                   Net {atoms =
  {("Num.num.Bit0", ...), ...}, comb = Leaf [...], var = Leaf [...]},
                                   var = Leaf []}}),
                       ("Set.Bex",
                         Net {atoms =
                              {("Orderings.bot_class.bot",
                                 Net {atoms = {}, comb = Leaf [...], var =
Leaf [...]}),
                                ("Orderings.top_class.top",
                                  Net {atoms = {}, comb = ..., var = ...})},
                              comb =
                              Net {atoms =
                                   {("Set.Collect", Net {atoms = {}, ...}),
                                     ("List.list.set", ...), ...},
                                   comb =
                                   Net {atoms = {...}, comb = ..., var =
  ...},
                                   var = Leaf []},
                              var =
                              Net {atoms = {}, comb =
                                   Net {atoms = {...}, comb = ..., var =
  ...},
                                   var =
                                   Leaf
                                    [{elhs = ..., extra = false, ...},
                                     ...]}}),
                       ("Fun.comp",
                         Net {atoms =
                              {("Fun.id",
                                 Net {atoms = {}, comb = ..., var = ...}),
                                ("Option.option.the",
                                  Net {atoms = {...}, ...}),
                                ("Product_Type.prod.fst", ...), ...},
                              comb =
                              Net {atoms = {("List.list.map", ...), ...},
                                   comb = Net {atoms = {...}, ...}, var =
                                   Leaf [...]},
                              var =
                              Net {atoms = {("Fun.id", ...)}, comb =
                                   Leaf [...], var = Leaf [...]}}),
                       ("GCD.bezw",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {...}, comb = ..., var = ...}}),
                       ("HOL.conj",
                         Net {atoms = {("HOL.True", ...), ...}, comb =
                              Net {atoms = {...}, ...}, var =
                              Net {atoms = {...}, ...}}),
                       ("HOL.disj",
                         Net {atoms = {...}, comb = ..., var = ...}),
                       ("List.nth", Net {atoms = {}, ...}),
                       ("List.upt", ...), ...},
                     comb =
                     Net {atoms =
                          {("HOL.If",
                             Net {atoms =
                                  {("HOL.True",
                                     Net
{atoms = {}, comb = Leaf [], var =
 Net {atoms = {}, comb = Leaf [...], var = Leaf [...]}}),
                                    ("HOL.False",
Net {atoms = {}, comb = Leaf [], var =
     Net {atoms = {}, comb = ..., var = ...}})},
                                  comb =
                                  Net {atoms = {}, comb =
 Net {atoms = {("HOL.eq", Net {atoms = {}, ...})}, comb = Leaf [], var =
      Leaf []},
 var = Leaf []},
                                  var =
                                  Net {atoms = {}, comb = Leaf [], var =
 Net {atoms = {}, comb = Leaf [], var =
      Leaf [{elhs = ..., extra = false, ...}]}}}),
                            ("Fun.comp",
                              Net {atoms = {}, comb = Leaf [], var =
                                   Net {atoms = {}, comb = Leaf [], var =
  Net {atoms = {}, comb = Leaf [...], var = Leaf [...]}}}),
                            ("Fun.fcomp",
                              Net {atoms = {}, comb = Leaf [], var =
                                   Net {atoms = {}, comb = Leaf [], var =
  Net {atoms = {}, comb = ..., var = ...}}}),
                            ("List.foldl",
                              Net {atoms = {}, comb = Leaf [], var =
                                   Net {atoms = {}, comb = Leaf [...], var =
  Net {atoms = {...}, ...}}}),
                            ("List.foldr",
                              Net {atoms = {}, comb = Leaf [], var =
                                   Net {atoms = {}, comb = ..., var =
  ...}}),
                            ("Nat.compow",
                              Net {atoms =
                                   {("Groups.zero_class.zero", ...)}, comb =
                                   Leaf [...], var = Leaf [...]}),
                            ("Fun.fun_upd",
                              Net {atoms = {}, comb = ..., var = ...}),
                            ("Map.map_add", Net {atoms = {}, ...}),
                            ("Fun.bij_betw", ...), ...},
                          comb =
                          Net {atoms =
                               {("Fun.fun_upd",
                                  Net {atoms = {}, comb = Leaf [], var =
 Net {atoms = {}, comb = Leaf [], var =
      Net {atoms = {}, comb = ..., var = ...}}}),
                                 ("Fun.map_fun",
                                   Net {atoms = {}, comb = Leaf [], var =
  Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}}}),
                                 ("Map.map_upds",
                                   Net {atoms = {}, comb = Leaf [], var =
  Net {atoms = {}, comb = ..., var = ...}}),
                                 ("BNF_Def.rel_sum",
                                   Net {atoms = {}, comb = Leaf [...], var =
  Net {atoms = {}, ...}}),
                                 ("Fun.override_on",
                                   Net {atoms = {}, comb = ..., var = ...}),
                                 ("Num.num.rec_num", Net {atoms = {}, ...}),
                                 ("Num.num.case_num", ...), ...},
                               comb =
                               Net {atoms =
                                    {("Enum.finite_4.rec_finite_4",
 Net {atoms = {}, comb = Leaf [], var =
      Net {atoms = {}, comb = ..., var = ...}}),
("Enum.finite_4.case_finite_4",
  Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}})},
                                    comb =
                                    Net {atoms =
   {("Enum.finite_5.rec_finite_5", Net {atoms = {}, comb = ..., var = ...}),
     ("Enum.finite_5.case_finite_5", Net {atoms = {}, ...})},
   comb =
   Net {atoms = {}, comb = Net {atoms = {...}, ...}, var = Leaf [...]},
   var = Leaf []},
                                    var = Leaf []},
                               var = Leaf []},
                          var = Leaf []},
                     var = Leaf []},
                var = Leaf []},
           var =
           Leaf
            [{elhs = "%u. EX x y. u = (x, y) & ?P1 x y", extra = false, fo =
              false, lhs =
              Abs ("u", "?'a1 * ?'b1",
                Const ("HOL.Ex", "(?'a1 => bool) => bool") $
                  Abs ("x", "?'a1",
                    Const ("HOL.Ex", "...") $ Abs ("y", "...", ...))),
              name = "Product_Type.split_eta_SetCompr2", perm = false, thm =
              "%u. EX x y. u = (x, y) & ?P1 x y == %(x, y). ?P1 x y"},
             {elhs = "%u. EX x y. u = (x, y) & ?y (x, y)", extra = false,
              fo = true, lhs =
              Abs ("u", "?'a1 * ?'b1",
                Const ("HOL.Ex", "(?'a1 ... bool) => bool") $
                  Abs ("x", "?'a1",
                    Const ("HOL.Ex", "...") $ Abs ("y", ..., ...))),
              name = "Product_Type.split_eta_SetCompr", perm = false, thm =
              "%u. EX x y. u = (x, y) & ?y (x, y) == ?y"},
             {elhs = "%a. ?y ()", extra = false, fo = true, lhs =
              Abs ("", "unit",
                Var (("y", 0), "unit => ?'a1") $
                  Const ("Product_Type.Unity", "unit")),
              name = "Product_Type.unit_abs_eta_conv", perm = false, thm =
              "%a. ?y () == ?y"},
             {elhs = "%A f. Inf (f ` A)", extra = false, fo = true, lhs =
              Abs ("A", "?'a1 set",
                Abs ("f", "?'a1 => bool",
                  Const ("Complete_Lattices.Inf_class.Inf", "...") $
                    (Const ("...",
                            "(?'a1 => bool) => ?'a1 set => bool set") $
                      ... $ ...))),
              name = "Complete_Lattices.INF_bool_eq", perm = false, thm =
              "%A f. Inf (f ` A) == Ball"},
             {elhs = "%A f. Sup (f ` A)", extra = false, fo = true, lhs =
              Abs ("A", "?'a1 set",
                Abs ("f", "?'a1 ... bool",
                  Const ("...", ...) $ (... $ ... $ ...))),
              name = "Complete_Lattices.SUP_bool_eq", perm = false, thm =
              "%A f. Sup (f ... A) == Bex"}]}},
     {congs =
      ({((true, "HOL.If"),
          "?b == ?c ==> if ?b then ?x else ?y == if ?c then ?x else ?y"),
         ((true, "Set.Bex"),
           "[| ?A == ?B; !!x. x : ?B =simp=> ?P x == ?Q x |]
            ==> EX x:?A. ?P x == EX x:?B. ?Q x"),
         ((true, "Set.Ball"),
           "[| ?A == ?B; !!x. x : ?B =simp=> ?P x == ?Q x |]
            ==> ALL x:?A. ?P x == ALL x:?B. ?Q x"),
         ((true, "Set.image"),
           "[| ?M == ?N; !!x. x : ?N =simp=> ?f x == ?g x |]
            ==> ?f ` ?M == ?g ` ?N"),
         ((true, "HOL.implies"),
           "[| ?P == ?P'; ?P' ==> ?Q == ?Q' |]
            ==> ?P --> ?Q == ?P' --> ?Q'"),
         ((true, "HOL.NO_MATCH"),
           "NO_MATCH ?pat ?val == NO_MATCH ?pat ?val"),
         ((true, "HOL.ASSUMPTION"), "ASSUMPTION ?A == ASSUMPTION ?A"),
         ((true, "HOL.simp_implies"),
           "[| PROP ?P == PROP ?P'; PROP ?P' ==> PROP ?Q ... PROP ?Q' |]
            ==> (PROP ?P ... PROP ?Q) == (PROP ?P' ... PROP ?Q')"),
         ((true, "Nat.nat.case_nat"),
           "?M == ?M' ==>
            case ?M of ... ... ... | ... ... ... ==
            case ?M' of ... ... ... | ... ... ..."),
         ((true, "Num.num.case_num"),
           "?num ... ?num' ==>
            ... ... ... ... ... ... ... ... ...
            ... ... ... ... ... ... ... ..."),
         ((true, "List.successively"),
           "... ...... ... ... ==> ... ... ..."),
         ((true, "List.list.case_list"), "... ... ..."),
         ((true, "String.char.case_char"), "..."),
         ((true, "Sum_Type.sum.case_sum"), "..."),
         ((true, "Nitpick.word.case_word"), ...), ((true, "..."), ...),
         ...},
       [(true, "Power.power_class.power"),
        (true, "Phantom_Type.phantom.case_phantom"),
        (true, "Nitpick.word.case_word"),
        (true, "Nitpick.pair_box.case_pair_box"),
        (true, "Nitpick.fun_box.case_fun_box"),
        (true, "Record.tuple_isomorphism.case_tuple_isomorphism"),
        (true, "Extraction.sumbool.case_sumbool"),
        (true, "Quickcheck_Exhaustive.three_valued.case_three_valued"),
        (true, "Quickcheck_Exhaustive.unknown.case_unknown"),
        (true, "Quickcheck_Narrowing.cfun.case_cfun"),
        (true, "Quickcheck_Narrowing.ffun.case_ffun"),
        (true, "Quickcheck_Narrowing.property.case_property"),
        (true, "Quickcheck_Narrowing.narrowing_cons.case_narrowing_cons"),
        (true, "Quickcheck_Narrowing.narrowing_term.case_narrowing_term"),
        (true, "Quickcheck_Narrowing.narrowing_type.case_narrowing_type"),
        (true, "..."), ...]),
      loop_tacs =
      [("split asm HOL.If :: (HOL.bool, (_, (_, _)fun)fun)fun", fn),
       ("split asm Rings.zero_neq_one_class.of_bool :: (HOL.bool, _)fun",
        fn),
       ("split Rings.zero_neq_one_class.of_bool :: (HOL.bool, _)fun", fn),
       ("split HOL.If :: (HOL.bool, (_, (_, _)fun)fun)fun", fn)],
      mk_rews =
      {mk = fn, mk_cong = fn, mk_eq_True = fn, mk_sym = fn, reorient = fn},
      procs =
      Net {atoms = {}, comb =
           Net {atoms =
                {("HOL.Ex",
                   Net {atoms = {}, comb = Leaf [], var =
                        Leaf
                         [Proc
                           {lhs =
                            Const ("HOL.Ex", "(...) ... bool") $
                              Abs ("x", "?'a",
                                Var ((...), "?'a => bool") $ ...),
                            name = "HOL.defined_Ex", proc = fn, stamp =
                            Stamp 91198}]}),
                  ("HOL.All",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [Proc
                            {lhs =
                             Const ("HOL.All", "... ... ...") $
                               Abs ("x", "...", ... $ ...),
                             name = "HOL.defined_All", proc = fn, stamp =
                             Stamp 91244}]}),
                  ("HOL.Not",
                    Net {atoms = {}, comb =
                         Net {atoms = {}, comb =
                              Net {atoms =
                                   {("Orderings.ord_class.less",
Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}})},
                                   comb = Leaf [], var = Leaf []},
                              var = Leaf []},
                         var = Leaf []}),
                  ("Nat.Suc",
                    Net {atoms = {}, comb =
                         Net {atoms = {}, comb =
                              Net {atoms =
                                   {("Groups.plus_class.plus",
Net {atoms = {}, comb = ..., var = ...})},
                                   comb = Leaf [], var = Leaf []},
                              var = Leaf []},
                         var = Leaf []}),
                  ("Pure.all",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [Proc
                            {lhs =
                             Const ("...", ...) $ Abs ("...", "?'a", ...),
                             name = "HOL.defined_all", proc = fn, stamp =
                             Stamp 91290}]}),
                  ("Set.Collect",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [Proc
                            {lhs =
                             Const ("...", "(?'a => bool) => ?'a set") $
                               ...,
                             name = "Product_Type.Collect_mem", proc = fn,
                             stamp = Stamp 616364},
                           Proc
                            {lhs = ... $ ..., name = "Set.defined_Collect",
                             proc = fn, stamp = Stamp 299868}]}),
                  ("List.list.set",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [Proc
                            {lhs = ... $ ..., name =
                             "List.list_to_set_comprehension", proc = fn,
                             stamp = Stamp 2625594}]}),
                  ("Product_Type.prod.case_prod",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf [Proc {lhs = ..., name = "...", ...}]})},
                comb =
                Net {atoms =
                     {("HOL.eq",
                        Net {atoms =
                             {("Groups.one_class.one",
                                Net {atoms = {}, comb = Leaf [], var =
                                     Leaf
[Proc
  {lhs = Const ("...", "?'a => ?'a => bool") $ ... $ ..., name =
   "Groups.reorient_one", proc = fn, stamp = Stamp 171260}]}),
                               ("Groups.zero_class.zero",
                                 Net {atoms = {}, comb = Leaf [], var =
Leaf
 [Proc
   {lhs = ... $ ... $ ..., name = "Groups.reorient_zero", proc = fn, stamp =
    Stamp 171216}]})},
                             comb =
                             Net {atoms =
                                  {("Nat.Suc",
                                     Net
{atoms = {}, comb = Leaf [], var =
 Net {atoms = {}, comb = Leaf [...], var = Leaf [...]}}),
                                    ("Num.numeral_class.numeral",
Net {atoms = {}, comb = Leaf [], var =
     Net {atoms = {}, comb = ..., var = ...}}),
                                    ("Groups.uminus_class.uminus",
Net {atoms = {}, comb = Net {atoms = {...}, ...}, var =
     Net {atoms = {}, ...}})},
                                  comb =
                                  Net {atoms =
 {("Groups.plus_class.plus",
    Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}}),
   ("Groups.minus_class.minus", Net {atoms = {}, comb = ..., var = ...}),
   ("Groups.times_class.times", Net {atoms = {}, ...})},
 comb = Leaf [], var = Leaf []},
                                  var = Leaf []},
                             var =
                             Net {atoms = {}, comb =
                                  Net {atoms =
 {("Nat.Suc", Net {atoms = {}, comb = Leaf [...], var = Leaf [...]}),
   ("Groups.uminus_class.uminus", Net {atoms = {}, comb = ..., var = ...})},
 comb =
 Net {atoms =
      {("Groups.plus_class.plus", Net {atoms = {}, ...}),
        ("Groups.minus_class.minus", ...), ...},
      comb = Leaf [], var = Leaf []},
 var = Leaf []},
                                  var =
                                  Leaf
                                   [Proc
                                     {lhs =
Const ("...", ...) $ Var ((...), "?'a") $ ..., name = "record_eq", proc =
fn, stamp = Stamp 4153886},
                                    Proc
                                     {lhs =
Const ("...", "?'a list => ?'a list => bool") $ ... $ ..., name =
"List.list_neq", proc = fn, stamp = Stamp 2645062},
                                    Proc
                                     {lhs = ... $ ... $ ..., name =
"List.list_eq", proc = fn, stamp = Stamp 2633172},
                                    Proc {lhs = ..., name = "...", ...},
                                    Proc {lhs = ..., ...}, ...]}}),
                       ("HOL.Let",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {}, comb = Leaf [], var =
                                   Leaf
                                    [Proc
{lhs = Const ("...", "?'a => (?'a => ?'b) => ?'b") $ ... $ ..., name =
 "HOL.let_simp", proc = fn, stamp = Stamp 91526}]}}),
                       ("Set.Bex",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {}, comb = Leaf [], var =
                                   Leaf
                                    [Proc
{lhs = ... $ ... $ ..., name = "Set.defined_Bex", proc = fn, stamp =
 Stamp 303020}]}}),
                       ("Pure.imp",
                         Net {atoms = {}, comb =
                              Net {atoms =
                                   {("HOL.Trueprop",
Net {atoms = {...}, comb = ..., var = ...})},
                                   comb = Leaf [], var = Leaf []},
                              var = Leaf []}),
                       ("Set.Ball",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {}, comb = Leaf [], var =
                                   Leaf [Proc {lhs = ..., ...}]}}),
                       ("HOL.NO_MATCH",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {}, comb = Leaf [...], var =
                                   Leaf [...]}}),
                       ("Rings.dvd_class.dvd",
                         Net {atoms = {}, comb =
                              Net {atoms = {}, comb = ..., var = ...}, var =
                              Net {atoms = {}, comb = ..., var = ...}}),
                       ("Groups.plus_class.plus",
                         Net {atoms = {}, comb = Leaf [...], var =
                              Net {atoms = {}, ...}}),
                       ("Lattices.inf_class.inf",
                         Net {atoms = {}, comb = ..., var = ...}),
                       ("Lattices.sup_class.sup", Net {atoms = {}, ...}),
                       ("Groups.minus_class.minus", ...), ...},
                     comb =
                     Net {atoms =
                          {("Fun.fun_upd",
                             Net {atoms = {}, comb =
                                  Net {atoms = {}, comb =
 Net {atoms = {}, comb = Net {atoms = {...}, comb = ..., var = ...}, var =
      Leaf []},
 var = Leaf []},
                                  var = Leaf []})},
                          comb = Leaf [], var = Leaf []},
                     var = Leaf []},
                var = Leaf []},
           var =
           Leaf
            [Proc
              {lhs = Var (("x", 0), "?'a"), name = "record", proc = fn,
               stamp = Stamp 4153844},
             Proc
              {lhs = Var (("x", 0), "?'a"), name = "record_upd", proc = fn,
               stamp = Stamp 4153854},
             Proc
              {lhs = Var (("x", 0), "unit"), name = "Product_Type.unit_eq",
               proc = fn, stamp = Stamp 562196}]},
      solvers =
      ([Solver {id = Stamp 1038750, name = "Rtranclp", solver = fn},
        Solver {id = Stamp 1038748, name = "Tranclp", solver = fn},
        Solver {id = Stamp 1038746, name = "Rtrancl", solver = fn},
        Solver {id = Stamp 1038744, name = "Trancl", solver = fn},
        Solver {id = Stamp 781564, name = "lin_arith", solver = fn},
        Solver {id = Stamp 132670, name = "Transitivity", solver = fn},
        Solver {id = Stamp 102528, name = "ASSUMPTION", solver = fn},
        Solver {id = Stamp 90936, name = "HOL unsafe", solver = fn}],
       [Solver {id = Stamp 90938, name = "HOL safe", solver = fn}]),
      subgoal_tac = fn, term_ord = fn}):
   simpset
val uint_arith_tacs = fn: Proof.context -> tactic list
val uint_arith_tac = fn: Proof.context -> int -> tactic
locale word_rotate
signature SMT_WORD =
  sig
    val add_word_shift': term * string -> Context.generic -> Context.generic
  end
structure SMT_Word: SMT_WORD
### theory "HOL-Library.Word"
### 4.421s elapsed time, 5.905s cpu time, 1.392s GC time
Loading theory "Word_Lib.More_Divides" (required by "Draft.Word_8Templates" via "Draft.Word_8" via "Word_Lib.More_Word")
Loading theory "Word_Lib.Signed_Words" (required by "Draft.Word_8Templates" via "Draft.Word_8")
Loading theory "Word_Lib.Signed_Division_Word" (required by "Draft.Word_8Templates" via "Draft.Word_8" via "Word_Lib.Word_Lemmas")
Loading theory "Word_Lib.Type_Syntax" (required by "Draft.Word_8Templates" via "Draft.Word_8" via "Word_Lib.Word_Lemmas")
structure Word_Syntax:
  sig
    val show_word_types: bool Config.T
    val tr': string -> Proof.context -> typ -> term list -> term
  end
### theory "Word_Lib.Type_Syntax"
### 0.056s elapsed time, 0.252s cpu time, 0.056s GC time
instantiation
  signed :: (len0) len0
  len_of_signed == len_of :: 'a signed itself => nat
### theory "Word_Lib.Signed_Words"
### 0.112s elapsed time, 0.449s cpu time, 0.056s GC time
### theory "Word_Lib.More_Divides"
### 0.148s elapsed time, 0.513s cpu time, 0.056s GC time
Loading theory "Word_Lib.More_Word" (required by "Draft.Word_8Templates" via "Draft.Word_8")
instantiation
  word :: (len) signed_division
  signed_divide_word == signed_divide :: 'a word => 'a word => 'a word
  signed_modulo_word == signed_modulo :: 'a word => 'a word => 'a word
### theory "Word_Lib.Signed_Division_Word"
### 0.353s elapsed time, 0.980s cpu time, 0.153s GC time
### theory "Word_Lib.More_Word"
### 1.256s elapsed time, 2.318s cpu time, 1.232s GC time
Loading theory "Word_Lib.Bit_Shifts_Infix_Syntax" (required by "Draft.Word_8Templates" via "Draft.Word_8" via "Word_Lib.Word_Lemmas" via "Word_Lib.Most_significant_bit")
Loading theory "Word_Lib.Enumeration_Word" (required by "Draft.Word_8Templates" via "Draft.Word_8")
class semiring_bit_operations = semiring_bits +
  fixes "and" :: "'a => 'a => 'a"
    and or :: "'a => 'a => 'a"
    and xor :: "'a => 'a => 'a"
    and mask :: "nat => 'a"
    and set_bit :: "nat => 'a => 'a"
    and unset_bit :: "nat => 'a => 'a"
    and flip_bit :: "nat => 'a => 'a"
    and push_bit :: "nat => 'a => 'a"
    and drop_bit :: "nat => 'a => 'a"
    and take_bit :: "nat => 'a => 'a"
  assumes "bit_and_iff": "!!a b n. bit (and a b) n = (bit a n & bit b n)"
    and "bit_or_iff": "!!a b n. bit (or a b) n = (bit a n | bit b n)"
    and "bit_xor_iff": "!!a b n. bit (xor a b) n = (bit a n ~= bit b n)"
    and "mask_eq_exp_minus_1": "!!n. mask n = (2::'a) ^ n - (1::'a)"
    and "set_bit_eq_or": "!!n a. set_bit n a = or a (push_bit n (1::'a))"
    and
    "bit_unset_bit_iff":
      "!!m a n. bit (unset_bit m a) n = (bit a n & m ~= n)"
    and
    "flip_bit_eq_xor": "!!n a. flip_bit n a = xor a (push_bit n (1::'a))"
    and "push_bit_eq_mult": "!!n a. push_bit n a = a * (2::'a) ^ n"
    and "drop_bit_eq_div": "!!n a. drop_bit n a = a div (2::'a) ^ n"
    and "take_bit_eq_mod": "!!n a. take_bit n a = a mod (2::'a) ^ n"
instantiation
  word :: (len) enumeration_both
  enum_alt_word == enum_alt :: nat => 'a word option
class semiring_bit_operations = semiring_bits +
  fixes "and" :: "'a => 'a => 'a"
    and or :: "'a => 'a => 'a"
    and xor :: "'a => 'a => 'a"
    and mask :: "nat => 'a"
    and set_bit :: "nat => 'a => 'a"
    and unset_bit :: "nat => 'a => 'a"
    and flip_bit :: "nat => 'a => 'a"
    and push_bit :: "nat => 'a => 'a"
    and drop_bit :: "nat => 'a => 'a"
    and take_bit :: "nat => 'a => 'a"
  assumes "bit_and_iff": "!!a b n. bit (and a b) n = (bit a n & bit b n)"
    and "bit_or_iff": "!!a b n. bit (or a b) n = (bit a n | bit b n)"
    and "bit_xor_iff": "!!a b n. bit (xor a b) n = (bit a n ~= bit b n)"
    and "mask_eq_exp_minus_1": "!!n. mask n = (2::'a) ^ n - (1::'a)"
    and "set_bit_eq_or": "!!n a. set_bit n a = or a (push_bit n (1::'a))"
    and
    "bit_unset_bit_iff":
      "!!m a n. bit (unset_bit m a) n = (bit a n & m ~= n)"
    and
    "flip_bit_eq_xor": "!!n a. flip_bit n a = xor a (push_bit n (1::'a))"
    and "push_bit_eq_mult": "!!n a. push_bit n a = a * (2::'a) ^ n"
    and "drop_bit_eq_div": "!!n a. drop_bit n a = a div (2::'a) ^ n"
    and "take_bit_eq_mod": "!!n a. take_bit n a = a mod (2::'a) ^ n"
### theory "Word_Lib.Enumeration_Word"
### 0.377s elapsed time, 0.798s cpu time, 0.100s GC time
class ring_bit_operations = semiring_bit_operations + ring_parity +
  fixes not :: "'a => 'a"
  assumes
    "bit_not_iff_eq":
      "!!a n. bit (not a) n = ((2::'a) ^ n ~= (0::'a) & ~ bit a n)"
  assumes "minus_eq_not_minus_1": "!!a. - a = not (a - (1::'a))"
class ring_bit_operations = semiring_bit_operations + ring_parity +
  fixes not :: "'a => 'a"
  assumes
    "bit_not_iff_eq":
      "!!a n. bit (not a) n = ((2::'a) ^ n ~= (0::'a) & ~ bit a n)"
  assumes "minus_eq_not_minus_1": "!!a. - a = not (a - (1::'a))"
### theory "Word_Lib.Bit_Shifts_Infix_Syntax"
### 0.779s elapsed time, 1.233s cpu time, 0.142s GC time
Loading theory "Word_Lib.Aligned" (required by "Draft.Word_8Templates" via "Draft.Word_8" via "Word_Lib.Word_Lemmas")
Loading theory "Word_Lib.Most_significant_bit" (required by "Draft.Word_8Templates" via "Draft.Word_8" via "Word_Lib.Word_Lemmas")
class msb = type +
  fixes msb :: "'a => bool"
instantiation
  int :: msb
  msb_int == msb :: int => bool
instantiation
  word :: (len) msb
  msb_word == msb :: 'a word => bool
### theory "Word_Lib.Most_significant_bit"
### 0.113s elapsed time, 0.249s cpu time, 0.051s GC time
### theory "Word_Lib.Aligned"
### 0.231s elapsed time, 0.360s cpu time, 0.051s GC time
Loading theory "Word_Lib.Word_EqI" (required by "Draft.Word_8Templates" via "Draft.Word_8" via "Word_Lib.Word_Lemmas")
### theory "Word_Lib.Word_EqI"
### 1.188s elapsed time, 1.212s cpu time, 0.034s GC time
Loading theory "Word_Lib.Word_Lemmas" (required by "Draft.Word_8Templates" via "Draft.Word_8")
### theory "Word_Lib.Word_Lemmas"
### 1.096s elapsed time, 1.160s cpu time, 0.090s GC time
Loading theory "Draft.Word_8" (required by "Draft.Word_8Templates")
### theory "Draft.Word_8"
### 0.436s elapsed time, 0.457s cpu time, 0.028s GC time
Loading theory "Draft.Word_8Templates"
val templateLemmas =
   [("Word_8.len8", "len_of ?x = 8",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_hole 1,
             template_app (template_hole 1, template_hole 0)))))),
    ("Word_8.word8_and_max_simp", "and ?x 255 = ?x",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_hole 1,
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_hole 1,
                       template_app
                        (template_hole 1, template_hole 0))))))))),
       template_var 0)),
    ("Word_8.set_strip_insert",
     "[| ?x : insert ?a ?S; ?x ~= ?a |] ==> ?x : ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            ),
        template_negation
         (template_equation (template_var 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2), template_var 0)
           ))),
    ("Word_8.word8_exhaust",
     "[| ?x ~= 0; ?x ~= 1; ?x ~= 2; ?x ~= 3; ?x ~= 4; ?x ~= 5; ?x ~= 6;
         ?x ~= 7; ?x ~= 8; ?x ~= 9; ?x ~= 10; ?x ~= 11; ?x ~= 12; ?x ~= 13;
         ?x ~= 14; ?x ~= 15; ?x ~= 16; ?x ~= 17; ?x ~= 18; ?x ~= 19;
         ?x ~= 20; ?x ~= 21; ?x ~= 22; ?x ~= 23; ?x ~= 24; ?x ~= 25;
         ?x ~= 26; ?x ~= 27; ?x ~= 28; ?x ~= 29; ?x ~= 30; ?x ~= 31;
         ?x ~= 32; ?x ~= 33; ?x ~= 34; ?x ~= 35; ?x ~= 36; ?x ~= 37;
         ?x ~= 38; ?x ~= 39; ?x ~= 40; ?x ~= 41; ?x ~= 42; ?x ~= 43;
         ?x ~= 44; ?x ~= 45; ?x ~= 46; ?x ~= 47; ?x ~= 48; ?x ~= 49;
         ?x ~= 50; ?x ~= 51; ?x ~= 52; ?x ~= 53; ?x ~= 54; ?x ~= 55;
         ?x ~= 56; ?x ~= 57; ?x ~= 58; ?x ~= 59; ?x ~= 60; ?x ~= 61;
         ?x ~= 62; ?x ~= 63; ?x ~= 64; ?x ~= 65; ?x ~= 66; ?x ~= 67;
         ?x ~= 68; ?x ~= 69; ?x ~= 70; ?x ~= 71; ?x ~= 72; ?x ~= 73;
         ?x ~= 74; ?x ~= 75; ?x ~= 76; ?x ~= 77; ?x ~= 78; ?x ~= 79;
         ?x ~= 80; ?x ~= 81; ?x ~= 82; ?x ~= 83; ?x ~= 84; ?x ~= 85;
         ?x ~= 86; ?x ~= 87; ?x ~= 88; ?x ~= 89; ?x ~= 90; ?x ~= 91;
         ?x ~= 92; ?x ~= 93; ?x ~= 94; ?x ~= 95; ?x ~= 96; ?x ~= 97;
         ?x ~= 98; ?x ~= 99; ?x ~= 100; ?x ~= 101; ?x ~= 102; ?x ~= 103;
         ?x ~= 104; ?x ~= 105; ?x ~= 106; ?x ~= 107; ?x ~= 108; ?x ~= 109;
         ?x ~= 110; ?x ~= 111; ?x ~= 112; ?x ~= 113; ?x ~= 114; ?x ~= 115;
         ?x ~= 116; ?x ~= 117; ?x ~= 118; ?x ~= 119; ?x ~= 120; ?x ~= 121;
         ?x ~= 122; ?x ~= 123; ?x ~= 124; ?x ~= 125; ?x ~= 126; ?x ~= 127;
         ?x ~= 128; ?x ~= 129; ?x ~= 130; ?x ~= 131; ?x ~= 132; ?x ~= 133;
         ?x ~= 134; ?x ~= 135; ?x ~= 136; ?x ~= 137; ?x ~= 138; ?x ~= 139;
         ?x ~= 140; ?x ~= 141; ?x ~= 142; ?x ~= 143; ?x ~= 144; ?x ~= 145;
         ?x ~= 146; ?x ~= 147; ?x ~= 148; ?x ~= 149; ?x ~= 150; ?x ~= 151;
         ?x ~= 152; ?x ~= 153; ?x ~= 154; ?x ~= 155; ?x ~= 156; ?x ~= 157;
         ?x ~= 158; ?x ~= 159; ?x ~= 160; ?x ~= 161; ?x ~= 162; ?x ~= 163;
         ?x ~= 164; ?x ~= 165; ?x ~= 166; ?x ~= 167; ?x ~= 168; ?x ~= 169;
         ?x ~= 170; ?x ~= 171; ?x ~= 172; ?x ~= 173; ?x ~= 174; ?x ~= 175;
         ?x ~= 176; ?x ~= 177; ?x ~= 178; ?x ~= 179; ?x ~= 180; ?x ~= 181;
         ?x ~= 182; ?x ~= 183; ?x ~= 184; ?x ~= 185; ?x ~= 186; ?x ~= 187;
         ?x ~= 188; ?x ~= 189; ?x ~= 190; ?x ~= 191; ?x ~= 192; ?x ~= 193;
         ?x ~= 194; ?x ~= 195; ?x ~= 196; ?x ~= 197; ?x ~= 198; ?x ~= 199;
         ?x ~= 200; ?x ~= 201; ?x ~= 202; ?x ~= 203; ?x ~= 204; ?x ~= 205;
         ?x ~= 206; ?x ~= 207; ?x ~= 208; ?x ~= 209; ?x ~= 210; ?x ~= 211;
         ?x ~= 212; ?x ~= 213; ?x ~= 214; ?x ~= 215; ?x ~= 216; ?x ~= 217;
         ?x ~= 218; ?x ~= 219; ?x ~= 220; ?x ~= 221; ?x ~= 222; ?x ~= 223;
         ?x ~= 224; ?x ~= 225; ?x ~= 226; ?x ~= 227; ?x ~= 228; ?x ~= 229;
         ?x ~= 230; ?x ~= 231; ?x ~= 232; ?x ~= 233; ?x ~= 234; ?x ~= 235;
         ?x ~= 236; ?x ~= 237; ?x ~= 238; ?x ~= 239; ?x ~= 240; ?x ~= 241;
         ?x ~= 242; ?x ~= 243; ?x ~= 244; ?x ~= 245; ?x ~= 246; ?x ~= 247;
         ?x ~= 248; ?x ~= 249; ?x ~= 250; ?x ~= 251; ?x ~= 252; ?x ~= 253;
         ?x ~= 254; ?x ~= 255 |]
      ==> ?P",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5)),
        template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_hole 1)))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app (template_hole 0, template_hole 1)))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app (template_hole 2, template_hole 1))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app (template_hole 2, template_hole 1))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app (template_hole 0, template_hole 1))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app (template_hole 0, template_hole 1))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app (template_hole 2, template_hole 1)))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app (template_hole 2, template_hole 1)))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app (template_hole 2, template_hole 1)))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app (template_hole 2, template_hole 1)))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app (template_hole 0, template_hole 1)))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app (template_hole 0, template_hole 1)))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app (template_hole 0, template_hole 1)))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app (template_hole 0, template_hole 1)))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app (template_hole 2, template_hole 1))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app (template_hole 2, template_hole 1))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app (template_hole 2, template_hole 1))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app (template_hole 2, template_hole 1))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app (template_hole 2, template_hole 1))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app (template_hole 2, template_hole 1))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app (template_hole 2, template_hole 1))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app (template_hole 2, template_hole 1))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app (template_hole 0, template_hole 1))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app (template_hole 0, template_hole 1))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app (template_hole 0, template_hole 1))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app (template_hole 0, template_hole 1))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app (template_hole 0, template_hole 1))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app (template_hole 0, template_hole 1))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app (template_hole 0, template_hole 1))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app (template_hole 0, template_hole 1))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2, template_hole 1)))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2, template_hole 1)))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2, template_hole 1)))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2, template_hole 1)))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2, template_hole 1)))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2, template_hole 1)))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2, template_hole 1)))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2, template_hole 1)))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2, template_hole 1)))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2, template_hole 1)))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2, template_hole 1)))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2, template_hole 1)))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2, template_hole 1)))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2, template_hole 1)))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2, template_hole 1)))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2, template_hole 1)))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0, template_hole 1)))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0, template_hole 1)))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0, template_hole 1)))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0, template_hole 1)))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0, template_hole 1)))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0, template_hole 1)))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0, template_hole 1)))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0, template_hole 1)))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0, template_hole 1)))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0, template_hole 1)))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0, template_hole 1)))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0, template_hole 1)))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0, template_hole 1)))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0, template_hole 1)))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0, template_hole 1)))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0, template_hole 1)))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0, template_hole 1))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 2, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 2,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 3,
                template_app
                 (template_hole 0,
                  template_app
                   (template_hole 0,
                    template_app
                     (template_hole 0,
                      template_app
                       (template_hole 0,
                        template_app
                         (template_hole 0,
                          template_app
                           (template_hole 0,
                            template_app
                             (template_hole 0, template_hole 1)))))))))
            )],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.Word_8Templates"
### 1.011s elapsed time, 1.176s cpu time, 0.050s GC time
val it = (): unit
