Loading theory "Draft.Enumeration" (required by "Draft.EnumerationTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.EnumerationTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.EnumerationTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.EnumerationTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
consts
  the_index :: "'a list => 'a => nat"
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
class enum = finite +
  fixes enum :: "'a list"
    and enum_all :: "('a => bool) => bool"
    and enum_ex :: "('a => bool) => bool"
  assumes "UNIV_enum": "UNIV = set enum_class.enum"
    and "enum_distinct": "distinct enum_class.enum"
  assumes "enum_all_UNIV": "!!P. enum_class.enum_all P = Ball UNIV P"
  assumes "enum_ex_UNIV": "!!P. enum_class.enum_ex P = Bex UNIV P"
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.124s elapsed time, 0.513s cpu time, 0.042s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.EnumerationTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
class enum_alt = type +
  fixes enum_alt :: "nat => 'a option"
Found termination order: "size_list size <*mlex*> {}"
class enumeration_alt = enum_alt +
  assumes
    "enum_alt_one_bound":
      "!!x. enum_alt x = None ==> enum_alt (Suc x) = None"
  assumes "enum_alt_surj": "range enum_alt Un {None} = UNIV"
  assumes
    "enum_alt_inj":
      "!!x y. enum_alt x = enum_alt y ==> x = y | enum_alt x = None"
### theory "HOL-Library.Set_Algebras"
### 0.229s elapsed time, 0.933s cpu time, 0.042s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.EnumerationTemplates" via "Draft.ExtrEqs")
class enumeration_both = enum + enum_alt +
  assumes "enum_alt_rel": "enum_alt = alt_from_ord enum_class.enum"
### theory "HOL-Library.Nat_Bijection"
### 0.328s elapsed time, 1.308s cpu time, 0.128s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.EnumerationTemplates" via "Draft.ExtrEqs")
instantiation
  bool :: enumeration_both
  enum_alt_bool == enum_alt :: nat => bool option
instantiation
  nat :: enumeration_alt
  enum_alt_nat == enum_alt :: nat => nat option
### theory "Draft.Enumeration"
### 0.480s elapsed time, 1.917s cpu time, 0.128s GC time
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.744s elapsed time, 2.497s cpu time, 0.273s GC time
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.907s elapsed time, 2.821s cpu time, 0.675s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.820s elapsed time, 4.406s cpu time, 0.834s GC time
Loading theory "Draft.Templates" (required by "Draft.EnumerationTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.048s elapsed time, 0.064s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.EnumerationTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.462s elapsed time, 0.511s cpu time, 0.059s GC time
Loading theory "Draft.EnumerationTemplates"
val templateLemmas =
   [("Enumeration.to_from_enum_alt", "toEnumAlt (fromEnumAlt ?x) = ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Enumeration.upto_enum_triv", "[?x .e. ?x] = [?x]",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Enumeration.upto_enum_nat", "[?n .e. ?m] = [?n..<Suc ?m]",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Enumeration.length_upto_enum_le_maxBound",
     "length [?start .e. ?end] <= Suc (fromEnum maxBound)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_hole 2,
         template_app (template_hole 1, template_hole 0)))),
    ("Enumeration.fromEnum_eq_iff",
     "(fromEnum ?e = fromEnum ?f) = (?e = ?f)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Enumeration.le_imp_diff_le", "?j <= ?k ==> ?j - ?n <= ?k",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("Enumeration.maxBound_is_bound'",
     "?i = fromEnum ?e ==> ?i <= fromEnum maxBound",
     template_implication
      ([template_equation
         (template_var 1, template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_equals, template_var 1,
         template_app (template_hole 2, template_hole 0)))),
    ("Enumeration.upto_enum_red",
     "[?n .e. ?m] = map toEnum [fromEnum ?n..<Suc (fromEnum ?m)]",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 0)))))),
    ("Enumeration.the_index_bounded",
     "?x : set ?xs ==> the_index ?xs ?x < length ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Enumeration.less_length_upto_enum_maxBoundD",
     "?n < length [?start .e. ?end] ==> ?n <= fromEnum maxBound",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)))],
       template_inequation
        (less_equals, template_var 2,
         template_app (template_hole 1, template_hole 0)))),
    ("Enumeration.nth_the_index",
     "?x : set ?xs ==> ?xs ! the_index ?xs ?x = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 1))),
    ("Enumeration.handy_if_lemma",
     "((if ?P then Some ?A else None) = Some ?B) = (?P & ?A = ?B)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_app (template_hole 3, template_var 1)),
           template_hole 2),
         template_app (template_hole 3, template_var 0)),
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Enumeration.toEnum_eq_to_fromEnum_eq",
     "?n <= fromEnum maxBound ==> (toEnum ?n = ?v) = (?n = fromEnum ?v)",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 5, template_hole 4))],
       template_bimplication
        (template_equation
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_equation
          (template_var 1,
           template_app (template_hole 5, template_var 0))))),
    ("Enumeration.distinct_the_index_is_index",
     "[| distinct ?xs; ?n < length ?xs |]
      ==> the_index ?xs (?xs ! ?n) = ?n",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0))),
    ("Enumeration.the_index_last_distinct",
     "distinct ?xs & ?xs ~= [] ==>
      the_index ?xs (last ?xs) = length ?xs - 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 0)),
              template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 0),
                  template_hole 6)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 0),
           template_app (template_hole 3, template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)))),
    ("Enumeration.fromEnum_upto_nth",
     "?n < length [?start .e. ?end] ==>
      fromEnum ([?start .e. ?end] ! ?n) = fromEnum ?start + ?n",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0)),
             template_var 2)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_var 2))))]:
   (string * thm * template) list
### theory "Draft.EnumerationTemplates"
### 0.298s elapsed time, 0.417s cpu time, 0.000s GC time
val it = (): unit
