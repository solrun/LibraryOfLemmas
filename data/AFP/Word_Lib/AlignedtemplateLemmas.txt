   [("Aligned.is_aligned_0", "is_aligned 0 ?n",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Aligned.is_aligned_at_0", "is_aligned ?w 0",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Aligned.is_aligned_shift", "is_aligned (?k << ?m) ?m",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 0)
         )),
    ("Aligned.is_aligned_shiftl_self", "is_aligned (?p << ?n) ?n",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 0)
         )),
    ("Aligned.is_aligned_neg_mask2",
     "is_aligned (and ?a (not (mask ?n))) ?n",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)))),
           template_var 0)
         )),
    ("Aligned.is_aligned_triv", "is_aligned (2 ^ ?n) ?n",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_hole 0))),
               template_var 0)),
           template_var 0)
         )),
    ("Aligned.is_aligned_mult_triv2", "is_aligned (?x * 2 ^ ?n) ?n",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_hole 0))),
                 template_var 0))),
           template_var 0)
         )),
    ("Aligned.is_aligned_mult_triv1", "is_aligned (2 ^ ?n * ?x) ?n",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_hole 0))),
                   template_var 1)),
               template_var 0)),
           template_var 1)
         )),
    ("Aligned.is_aligned_iff_take_bit_eq_0",
     "is_aligned ?w ?n = (take_bit ?n ?w = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("Aligned.is_aligned_minus",
     "is_aligned ?p ?n ==> is_aligned (- ?p) ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Aligned.is_aligned_mask", "is_aligned ?w ?n = (and ?w (mask ?n) = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Aligned.and_neg_mask_plus_mask_mono",
     "?p <= and ?p (not (mask ?n)) + mask ?n",
     template_inequation
      (less_equals, template_var 1,
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))),
         template_app (template_hole 0, template_var 0)))),
    ("Aligned.is_aligned_andI1",
     "is_aligned ?x ?n ==> is_aligned (and ?x ?y) ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("Aligned.is_aligned_andI2",
     "is_aligned ?y ?n ==> is_aligned (and ?x ?y) ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_var 1)
           ))),
    ("Aligned.word_power_less_0_is_0", "?x < ?a ^ 0 ==> ?x = 0",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_app (template_hole 3, template_var 0),
            template_hole 2))],
       template_equation (template_var 1, template_hole 0))),
    ("Aligned.is_aligned_iff_udvd", "is_aligned ?w ?n = (2 ^ ?n udvd ?w)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 0)),
         template_var 1))),
    ("Aligned.mask_zero", "is_aligned ?x ?a ==> and ?x (mask ?a) = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Aligned.is_aligned_no_overflow_mask",
     "is_aligned ?x ?n ==> ?x <= ?x + mask ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_var 1,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Aligned.is_aligned_iff_dvd_int",
     "is_aligned ?ptr ?n = (2 ^ ?n dvd uint ?ptr)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1))),
             template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("Aligned.is_aligned_iff_dvd_nat",
     "is_aligned ?ptr ?n = (2 ^ ?n dvd unat ?ptr)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1))),
             template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("Aligned.is_aligned_neg_mask_eq",
     "is_aligned ?p ?n ==> and ?p (not (mask ?n)) = ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))),
         template_var 1))),
    ("Aligned.is_aligned_shiftr_shiftl",
     "is_aligned ?w ?n ==> ?w >> ?n << ?n = ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 0),
         template_var 1))),
    ("Aligned.is_aligned_power2", "?b <= ?a ==> is_aligned (2 ^ ?a) ?b",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_hole 0))),
                 template_var 0)),
             template_var 1)
           ))),
    ("Aligned.is_aligned_neg_mask",
     "?m <= ?n ==> is_aligned (and ?x (not (mask ?n))) ?m",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1)))),
             template_var 2)
           ))),
    ("Aligned.is_aligned_shiftl",
     "is_aligned ?w (?n - ?m) ==> is_aligned (?w << ?m) ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("Aligned.is_aligned_shiftr",
     "is_aligned ?w (?n + ?m) ==> is_aligned (?w >> ?m) ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("Aligned.replicate_not_True",
     "?xs = replicate ?n False ==> True ~: set ?xs",
     template_implication
      ([template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 5, template_var 0),
            template_hole 4))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_app (template_hole 0, template_var 1))
               )
           ))),
    ("Aligned.is_aligned_beyond_length",
     "LENGTH(?'a) <= ?n ==> is_aligned ?w ?n = (?w = 0)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 5, template_hole 4),
          template_var 1)],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 2, template_var 0),
                template_var 1)
              )],
         template_equation (template_var 0, template_hole 0)))),
    ("Aligned.is_aligned_weaken",
     "[| is_aligned ?w ?x; ?y <= ?x |] ==> is_aligned ?w ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("Aligned.is_aligned_nth", "is_aligned ?p ?m = (ALL n<?m. ~ bit ?p n)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app (template_hole 4, t_empty))),
    ("Aligned.aligned_mod_eq_0", "is_aligned ?p ?sz ==> ?p mod 2 ^ ?sz = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1))),
             template_var 0)),
         template_hole 0))),
    ("Aligned.le_or_mask",
     "?w <= ?w' ==> or ?w (mask ?x) <= or ?w' (mask ?x)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app (template_hole 0, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Aligned.is_alignedI", "?x = 2 ^ ?n * ?k ==> is_aligned ?x ?n",
     template_implication
      ([template_equation
         (template_var 2,
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_hole 1))),
                template_var 1)),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 1)
           ))),
    ("Aligned.is_aligned_over_length",
     "[| is_aligned ?p ?n; LENGTH(?'a) <= ?n |] ==> ?p = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_app (template_hole 3, template_hole 2),
          template_var 0)],
       template_equation (template_var 1, template_hole 0))),
    ("Aligned.is_aligned_imp_not_bit",
     "[| is_aligned ?w ?n; ?m < ?n |] ==> ~ bit ?w ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_inequation (less_than, template_var 0, template_var 1)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)
               )
           ))),
    ("Aligned.neg_mask_le_high_bits",
     "(not (mask ?n) <= ?w) = (ALL i:{?n..<size ?w}. bit ?w i)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, template_var 0))),
         t_empty))),
    ("Aligned.and_neg_mask_eq_iff_not_mask_le",
     "(and ?w (not (mask ?n)) = not (mask ?n)) = (not (mask ?n) <= ?w)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0))),
         template_var 1))),
    ("Aligned.word_neg_and_le",
     "?ptr <= and ?ptr (not (mask ?n)) + (2 ^ ?n - 1)",
     template_inequation
      (less_equals, template_var 1,
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 1),
             template_app
              (template_hole 7,
               template_app (template_hole 6, template_var 0)))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))),
               template_var 0)),
           template_hole 0)))),
    ("Aligned.is_aligned_add",
     "[| is_aligned ?p ?n; is_aligned ?q ?n |] ==> is_aligned (?p + ?q) ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("Aligned.aligned_less_plus_1",
     "[| is_aligned ?x ?n; 0 < ?n |] ==> ?x < ?x + 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_inequation (less_than, template_hole 3, template_var 0)],
       template_inequation
        (less_than, template_var 1,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0)))),
    ("Aligned.is_aligned_addD1",
     "[| is_aligned (?x + ?y) ?n; is_aligned ?x ?n |] ==> is_aligned ?y ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), template_var 0)
           ))),
    ("Aligned.is_aligned_addD2",
     "[| is_aligned (?y + ?x) ?n; is_aligned ?x ?n |] ==> is_aligned ?y ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("Aligned.mask_inner_mask",
     "and (and ?a (mask ?n) + ?b) (mask ?n) = and (?a + ?b) (mask ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app (template_hole 0, template_var 1))),
             template_var 0)),
         template_app (template_hole 0, template_var 1)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("Aligned.mask_add_aligned",
     "is_aligned ?p ?n ==> and (?p + ?q) (mask ?n) = and ?q (mask ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_app (template_hole 0, template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 0, template_var 1))))),
    ("Aligned.is_aligned_no_overflow'",
     "is_aligned ?p ?n ==> ?p <= ?p + (2 ^ ?n - 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_var 1,
         template_app
          (template_app (template_hole 6, template_var 1),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1))),
                 template_var 0)),
             template_hole 0))))),
    ("Aligned.is_aligned_no_overflow",
     "is_aligned ?ptr ?sz ==> ?ptr <= ?ptr + 2 ^ ?sz - 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_var 1,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1))),
                 template_var 0))),
           template_hole 0)))),
    ("Aligned.neg_mask_mono_le",
     "?x <= ?y ==> and ?x (not (mask ?n)) <= and ?y (not (mask ?n))",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("Aligned.not_aligned_mod_nz",
     "~ is_aligned ?a ?n ==> ?a mod 2 ^ ?n ~= 0",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_var 0)
                )
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 5, template_var 1),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1))),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Aligned.is_aligned_and_2_to_k",
     "and ?n (2 ^ ?k - 1) = 0 ==> is_aligned ?n ?k",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 8, template_var 1),
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_hole 3))),
                  template_var 0)),
              template_hole 2)),
          template_hole 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Aligned.is_aligned_bitI",
     "(!!n. n < ?m ==> ~ bit ?p n) ==> is_aligned ?p ?m",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Aligned.is_aligned_after_mask",
     "[| is_aligned ?k ?m; ?m <= ?n |]
      ==> is_aligned (and ?k (mask ?n)) ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_app (template_hole 0, template_var 0))),
             template_var 1)
           ))),
    ("Aligned.aligned_add_mask_lessD",
     "[| ?x + mask ?n < ?y; is_aligned ?x ?n |] ==> ?x < ?y",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 2, template_var 2),
            template_app (template_hole 1, template_var 1)),
          template_var 0),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            )],
       template_inequation (less_than, template_var 2, template_var 0))),
    ("Aligned.is_aligned_neg_mask_weaken",
     "[| is_aligned ?p ?n; ?m <= ?n |] ==> and ?p (not (mask ?m)) = ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))),
         template_var 2))),
    ("Aligned.is_aligned_add_not_aligned",
     "[| is_aligned ?p ?n; ~ is_aligned ?q ?n |]
      ==> ~ is_aligned (?p + ?q) ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_var 1)
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0)),
                 template_var 1)
               )
           ))),
    ("Aligned.aligned_small_is_0",
     "[| is_aligned ?x ?n; ?x < 2 ^ ?n |] ==> ?x = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            ),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2))),
            template_var 0))],
       template_equation (template_var 1, template_hole 0))),
    ("Aligned.unat_minus",
     "unat (- ?x) = (if ?x = 0 then 0 else 2 ^ size ?x - unat ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 8, template_var 0),
                   template_hole 7)),
               template_hole 6),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_hole 1))),
                   template_app (template_hole 0, template_var 0))),
               template_app (template_hole 11, template_var 0)))
           ))),
    ("Aligned.is_aligned_and_not_zero",
     "[| is_aligned ?n ?k; ?n ~= 0 |] ==> 2 ^ ?k <= ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0),
         template_var 1))),
    ("Aligned.is_aligned_less_sz",
     "[| is_aligned ?a ?sz; ?a ~= 0 |] ==> ~ ?a < 2 ^ ?sz",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_negation
        (
           template_inequation
            (less_than, template_var 1,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_hole 0))),
               template_var 0))
           ))),
    ("Aligned.is_aligned_no_wrap'",
     "[| is_aligned ?ptr ?sz; ?off < 2 ^ ?sz |] ==> ?ptr <= ?ptr + ?off",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2))),
            template_var 1))],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Aligned.mask_out_add_aligned",
     "is_aligned ?p ?n ==>
      ?p + and ?q (not (mask ?n)) = and (?p + ?q) (not (mask ?n))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0)),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)))))),
    ("Aligned.aligned_shiftr_mask_shiftl",
     "is_aligned ?x ?n ==>
      and (?x >> ?n) (mask ?v) << ?n = and ?x (mask (?v + ?n))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1)),
               template_app (template_hole 1, template_var 0))),
           template_var 1),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))))),
    ("Aligned.aligned_sub_aligned",
     "[| is_aligned ?x ?n; is_aligned ?y ?m; ?m <= ?n |]
      ==> is_aligned (?x - ?y) ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_var 0)
           ))),
    ("Aligned.aligned_add_aligned",
     "[| is_aligned ?x ?n; is_aligned ?y ?m; ?m <= ?n |]
      ==> is_aligned (?x + ?y) ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_var 0)
           ))),
    ("Aligned.map_zip_replicate_False_xor",
     "?n = length ?xs ==>
      map2 (%x y. x = (~ y)) ?xs (replicate ?n False) = ?xs",
     template_implication
      ([template_equation
         (template_var 1, template_app (template_hole 8, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 6, template_app (template_hole 5, t_empty)),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))),
         template_var 0))),
    ("Aligned.is_aligned_add_or",
     "[| is_aligned ?p ?n; ?d < 2 ^ ?n |] ==> ?p + ?d = or ?p ?d",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3))),
            template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Aligned.is_aligned_neg_mask_eq_concrete",
     "[| is_aligned ?p ?n; and ?msk (not (mask ?n)) = not (mask ?n) |]
      ==> and ?p ?msk = ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 0),
            template_app
             (template_hole 1,
              template_app (template_hole 0, template_var 1))),
          template_app
           (template_hole 1,
            template_app (template_hole 0, template_var 1)))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 0),
         template_var 2))),
    ("Aligned.aligned_sub_aligned'",
     "[| is_aligned ?a ?n; is_aligned ?b ?n; ?n < LENGTH(?'a) |]
      ==> is_aligned (?a - ?b) ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 1)
            ),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 2, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("Aligned.is_aligned_mask_offset_unat",
     "[| is_aligned ?x ?sz; ?off <= mask ?sz |]
      ==> unat ?x + unat ?off < 2 ^ LENGTH(?'a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 9, template_var 1))],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 2)),
           template_app (template_hole 6, template_var 0)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))),
           template_app (template_hole 1, template_hole 0))))),
    ("Aligned.aligned_at_least_t2n_diff",
     "[| is_aligned ?x ?n; is_aligned ?y ?n; ?x < ?y |]
      ==> ?x <= ?y - 2 ^ ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_var 1)
            ),
        template_inequation (less_than, template_var 2, template_var 0)],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 1))))),
    ("Aligned.is_aligned_add_step_le",
     "[| is_aligned ?a ?n; is_aligned ?b ?n; ?a < ?b; ?b <= ?a + mask ?n |]
      ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_var 1)
            ),
        template_inequation (less_than, template_var 2, template_var 0),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 2, template_var 2),
            template_app (template_hole 1, template_var 1)))],
       template_predicate (template_hole 0))),
    ("Aligned.aligned_add_xor",
     "[| is_aligned ?x ?n'; ?n < ?n' |]
      ==> xor (?x + 2 ^ ?n) (2 ^ ?n) = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 1)
            ),
        template_inequation (less_than, template_var 0, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_hole 0))),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 0)),
         template_var 2))),
    ("Aligned.aligned_add_offset_mod",
     "[| is_aligned ?x ?sz; ?k < 2 ^ ?sz |] ==> (?x + ?k) mod 2 ^ ?sz = ?k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3))),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app (template_hole 4, template_hole 3))),
             template_var 1)),
         template_var 0))),
    ("Aligned.not_greatest_aligned",
     "[| ?x < ?y; is_aligned ?x ?n; is_aligned ?y ?n |]
      ==> ?x + 2 ^ ?n ~= 0",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 5, template_var 2),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1))),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Aligned.is_aligned_no_wrap",
     "[| is_aligned ?ptr ?sz; ?off < 2 ^ ?sz |]
      ==> unat ?ptr + unat ?off < 2 ^ LENGTH(?'a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 10,
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_hole 7))),
            template_var 1))],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 2)),
           template_app (template_hole 4, template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 8, template_hole 7))),
           template_app (template_hole 1, template_hole 0))))),
    ("Aligned.is_aligned_no_overflow''",
     "[| is_aligned ?x ?n; ?x + 2 ^ ?n ~= 0 |] ==> ?x <= ?x + 2 ^ ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 6, template_var 1),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_hole 2))),
                  template_var 0)),
              template_hole 1)
            )],
       template_inequation
        (less_equals, template_var 1,
         template_app
          (template_app (template_hole 6, template_var 1),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2))),
             template_var 0))))),
    ("Aligned.aligned_add_offset_no_wrap",
     "[| is_aligned ?x ?sz; ?off < 2 ^ ?sz |]
      ==> unat ?x + unat ?off < 2 ^ LENGTH(?'a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 10,
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_hole 7))),
            template_var 1))],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 2)),
           template_app (template_hole 4, template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 8, template_hole 7))),
           template_app (template_hole 1, template_hole 0))))),
    ("Aligned.is_aligned_add_multI",
     "[| is_aligned ?p ?m; ?n <= ?m; ?n' = ?n |]
      ==> is_aligned (?p + ?x * 2 ^ ?n) ?n'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_var 3)
            ),
        template_inequation (less_equals, template_var 2, template_var 3),
        template_equation (template_var 1, template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 5, template_var 4),
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_hole 2,
                         template_app (template_hole 1, template_hole 0))),
                     template_var 2)))),
             template_var 1)
           ))),
    ("Aligned.aligned_add_mask_less_eq",
     "[| is_aligned ?x ?n; is_aligned ?y ?n; ?n < LENGTH(?'a) |]
      ==> (?x + mask ?n < ?y) = (?x < ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_var 1)
            ),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 5, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, template_var 1))),
           template_var 0),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Aligned.aligned_offset_non_zero",
     "[| is_aligned ?x ?n; ?y < 2 ^ ?n; ?x ~= 0 |] ==> ?x + ?y ~= 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4))),
            template_var 1)),
        template_negation
         (template_equation (template_var 2, template_hole 1))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_hole 1)
           ))),
    ("Aligned.neg_mask_add_aligned",
     "[| is_aligned ?p ?n; ?q < 2 ^ ?n |]
      ==> and (?p + ?q) (not (mask ?n)) = and ?p (not (mask ?n))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5))),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)))))),
    ("Aligned.range_inter",
     "({?a..?b} Int {?c..?d} = {}) =
      (ALL x. ~ (?a <= x & x <= ?b & ?c <= x & x <= ?d))",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0))),
         template_hole 4),
       template_app (template_hole 3, t_empty))),
    ("Aligned.rl",
     "is_aligned ?w ?n ==>
      EX q. ?w = 2 ^ ?n * word_of_nat q & q < 2 ^ (LENGTH(?'a) - ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 14, t_empty)))),
    ("Aligned.is_aligned_add_mult_multI",
     "[| is_aligned ?p ?m; ?n <= ?m; ?n' = ?n |]
      ==> is_aligned (?p + ?x * 2 ^ ?n * ?z) ?n'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 5),
              template_var 4)
            ),
        template_inequation (less_equals, template_var 3, template_var 4),
        template_equation (template_var 2, template_var 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 5, template_var 5),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 4, template_var 1),
                       template_app
                        (template_app
                          (template_hole 3,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 1, template_hole 0))),
                         template_var 3))),
                   template_var 0))),
             template_var 2)
           ))),
    ("Aligned.drop_minus",
     "[| ?n < length ?xs; ?n' = length ?xs |]
      ==> drop (?n' - Suc ?n) ?xs = rev ?xs ! ?n # drop (?n' - ?n) ?xs",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 8, template_var 1)),
        template_equation
         (template_var 0, template_app (template_hole 8, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app (template_hole 3, template_var 2))),
           template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1)),
               template_var 2)),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_var 2)),
             template_var 1))))),
    ("Aligned.aligned_shift",
     "[| ?x < 2 ^ ?n; is_aligned ?y ?n; ?n <= LENGTH(?'a) |]
      ==> ?x + ?y >> ?n = ?y >> ?n",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app
             (template_hole 10,
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_hole 7))),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("Aligned.aligned_shift'",
     "[| ?x < 2 ^ ?n; is_aligned ?y ?n; ?n <= LENGTH(?'a) |]
      ==> ?y + ?x >> ?n = ?y >> ?n",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app
             (template_hole 10,
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_hole 7))),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("Aligned.aligned_add_offset_less",
     "[| is_aligned ?x ?n; is_aligned ?y ?n; ?x < ?y; ?z < 2 ^ ?n |]
      ==> ?x + ?z < ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 2)
            ),
        template_inequation (less_than, template_var 3, template_var 1),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_hole 1))),
            template_var 2))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 0),
         template_var 1))),
    ("Aligned.is_alignedE'",
     "[| is_aligned ?w ?n;
         !!q. [| ?w = push_bit ?n (word_of_nat q);
                 q < 2 ^ (LENGTH(?'a) - ?n) |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate (template_var 0))),
    ("Aligned.add_mask_lower_bits",
     "[| is_aligned ?x ?n; ALL n'>=?n. n' < LENGTH(?'a) --> ~ bit ?p n' |]
      ==> and (?x + ?p) (not (mask ?n)) = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))),
         template_var 2))),
    ("Aligned.is_aligned_no_wrap'''",
     "[| is_aligned ?ptr ?sz; ?sz < LENGTH(?'a); ?off < 2 ^ ?sz |]
      ==> unat ?ptr + ?off < 2 ^ LENGTH(?'a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 7, template_hole 6)),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2))),
            template_var 1))],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))),
           template_app (template_hole 7, template_hole 6))))),
    ("Aligned.is_aligned_no_wrap_le",
     "[| is_aligned ?ptr ?sz; ?sz < LENGTH(?'a); ?off <= 2 ^ ?sz |]
      ==> unat ?ptr + ?off <= 2 ^ LENGTH(?'a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 8, template_hole 7)),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2))),
            template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))),
           template_app (template_hole 8, template_hole 7))))),
    ("Aligned.is_aligned_add_helper",
     "[| is_aligned ?p ?n; ?d < 2 ^ ?n |]
      ==> and (?p + ?d) (mask ?n) = ?d &
          and (?p + ?d) (not (mask ?n)) = ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 9,
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_hole 6))),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 2),
                         template_var 0)),
                     template_app (template_hole 1, template_var 1))),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 2),
                       template_var 0)),
                   template_app
                    (template_hole 0,
                     template_app (template_hole 1, template_var 1)))),
               template_var 2))
           ))),
    ("Aligned.is_aligned_sub_helper",
     "[| is_aligned (?p - ?d) ?n; ?d < 2 ^ ?n |]
      ==> and ?p (mask ?n) = ?d & and ?p (not (mask ?n)) = ?p - ?d",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5))),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_app (template_hole 1, template_var 0))),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_app
                    (template_hole 0,
                     template_app (template_hole 1, template_var 0)))),
               template_app
                (template_app (template_hole 10, template_var 2),
                 template_var 1)))
           ))),
    ("Aligned.and_mask_plus",
     "[| is_aligned ?ptr ?m; ?m <= ?n; ?a < 2 ^ ?m |]
      ==> and (?ptr + ?a) (mask ?n) = and ?ptr (mask ?n) + ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_var 2)
            ),
        template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4))),
            template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0)),
           template_app (template_hole 0, template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_app (template_hole 0, template_var 1))),
           template_var 0)))),
    ("Aligned.offset_not_aligned",
     "[| is_aligned ?p ?n; 0 < ?i; ?i < 2 ^ ?n; ?n < LENGTH(?'a) |]
      ==> ~ is_aligned (?p + word_of_nat ?i) ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_var 1)
            ),
        template_inequation (less_than, template_hole 9, template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5))),
            template_var 1)),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 4, template_hole 3))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_app (template_hole 0, template_var 0))),
                 template_var 1)
               )
           ))),
    ("Aligned.gap_between_aligned",
     "[| ?a < ?b; is_aligned ?a ?n; is_aligned ?b ?n; ?n < LENGTH(?'a) |]
      ==> ?a + (2 ^ ?n - 1) < ?b",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_var 0)
            ),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 8, template_hole 7))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 6, template_var 2),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1))),
                 template_var 0)),
             template_hole 0)),
         template_var 1))),
    ("Aligned.aligned_mask_step",
     "[| ?n' <= ?n; ?p' <= ?p + mask ?n; is_aligned ?p ?n;
         is_aligned ?p' ?n' |]
      ==> ?p' + mask ?n' <= ?p + mask ?n",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 2, template_var 0),
            template_app (template_hole 1, template_var 2))),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 3)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 3)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 2))))),
    ("Aligned.is_aligned_get_word_bits",
     "[| is_aligned ?p ?n; [| is_aligned ?p ?n; ?n < LENGTH(?'a) |] ==> ?P;
         [| ?p = 0; LENGTH(?'a) <= ?n |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 6, template_var 2),
                 template_var 1)
               )],
          template_implication
           ([template_inequation
              (less_than, template_var 1,
               template_app (template_hole 4, template_hole 3))],
            template_predicate (template_var 0))),
        template_implication
         ([template_equation (template_var 2, template_hole 1)],
          template_implication
           ([template_inequation
              (less_equals, template_app (template_hole 4, template_hole 3),
               template_var 1)],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Aligned.is_alignedE",
     "[| is_aligned ?w ?n;
         !!q. [| ?w = 2 ^ ?n * word_of_nat q; q < 2 ^ (LENGTH(?'a) - ?n) |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate (template_var 0))),
    ("Aligned.drop_minus_lem",
     "[| ?n <= length ?xs; 0 < ?n; ?n' = length ?xs |]
      ==> drop (?n' - ?n) ?xs =
          rev ?xs ! (?n - 1) # drop (Suc (?n' - ?n)) ?xs",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 11, template_var 1)),
        template_inequation (less_than, template_hole 9, template_var 2),
        template_equation
         (template_var 0, template_app (template_hole 11, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 0),
               template_var 2)),
           template_var 1),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 1)),
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_hole 1))),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_var 2))),
             template_var 1))))),
    ("Aligned.is_aligned_add_less_t2n",
     "[| is_aligned ?p ?n; ?d < 2 ^ ?n; ?n <= ?m; ?p < 2 ^ ?m |]
      ==> ?p + ?d < 2 ^ ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2))),
            template_var 2)),
        template_inequation (less_equals, template_var 2, template_var 0),
        template_inequation
         (less_than, template_var 3,
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2))),
            template_var 0))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))),
           template_var 0)))),
    ("Aligned.aligned_inter_non_empty",
     "[| {?p..?p + (2 ^ ?n - 1)} Int {?p..?p + 2 ^ ?m - 1} = {};
         is_aligned ?p ?n; is_aligned ?p ?m |]
      ==> False",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 11,
              template_app
               (template_app (template_hole 10, template_var 2),
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_app
                   (template_app
                     (template_hole 8,
                      template_app
                       (template_app
                         (template_hole 7,
                          template_app
                           (template_hole 6,
                            template_app
                             (template_hole 5, template_hole 4))),
                        template_var 1)),
                    template_hole 3)))),
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 9, template_var 2),
                    template_app
                     (template_app
                       (template_hole 7,
                        template_app
                         (template_hole 6,
                          template_app (template_hole 5, template_hole 4))),
                      template_var 0))),
                template_hole 3))),
          template_hole 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate (template_hole 0))),
    ("Aligned.nat_add_offset_le",
     "[| ?y <= 2 ^ ?n; ?x < 2 ^ ?m; ?sz = ?m + ?n |]
      ==> ?x * 2 ^ ?n + ?y <= 2 ^ ?sz",
     template_implication
      ([template_inequation
         (less_equals, template_var 4,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4))),
            template_var 3)),
        template_inequation
         (less_than, template_var 2,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4))),
            template_var 1)),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 3))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_hole 4))),
                 template_var 3))),
           template_var 4),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_hole 4))),
           template_var 0)))),
    ("Aligned.aligned_neq_into_no_overlap",
     "[| ?x ~= ?y; is_aligned ?x ?sz; is_aligned ?y ?sz |]
      ==> {?x..?x + (2 ^ ?sz - 1)} Int {?y..?y + (2 ^ ?sz - 1)} = {}",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_var 2),
               template_app
                (template_app (template_hole 7, template_var 2),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_hole 4,
                           template_app
                            (template_hole 3, template_hole 2))),
                       template_var 0)),
                   template_hole 1)))),
           template_app
            (template_app (template_hole 8, template_var 1),
             template_app
              (template_app (template_hole 7, template_var 1),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4,
                         template_app (template_hole 3, template_hole 2))),
                     template_var 0)),
                 template_hole 1)))),
         template_hole 0))),
    ("Aligned.word_add_power_off",
     "[| ?a < ?k; ?k < 2 ^ (LENGTH(?'a) - ?m); ?m < LENGTH(?'a);
         ?off < 2 ^ ?m |]
      ==> ?a * 2 ^ ?m + ?off < ?k * 2 ^ ?m",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_inequation
         (less_than, template_var 2,
          template_app
           (template_app
             (template_hole 9,
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_hole 6))),
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3)),
              template_var 1))),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 4, template_hole 3)),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 9,
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_hole 6))),
            template_var 1))],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_hole 8,
                     template_app (template_hole 7, template_hole 6))),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_hole 8,
                 template_app (template_hole 7, template_hole 6))),
             template_var 1))))),
    ("Aligned.is_aligned_diff",
     "[| is_aligned ?m ?s1.0; is_aligned ?n ?s2.0; ?s2.0 < LENGTH(?'a);
         ?m : {?n..?n + (2 ^ ?s2.0 - 1)}; ?s1.0 <= ?s2.0; 0 < ?s1.0 |]
      ==> EX q. ?m - ?n = word_of_nat q * 2 ^ ?s1.0 &
                q < 2 ^ (?s2.0 - ?s1.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 22, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 22, template_var 1),
              template_var 0)
            ),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 20, template_hole 19)),
        template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 3),
              template_app
               (template_app (template_hole 17, template_var 1),
                template_app
                 (template_app (template_hole 16, template_var 1),
                  template_app
                   (template_app
                     (template_hole 15,
                      template_app
                       (template_app
                         (template_hole 14,
                          template_app
                           (template_hole 13,
                            template_app
                             (template_hole 12, template_hole 11))),
                        template_var 0)),
                    template_hole 10))))
            ),
        template_inequation (less_equals, template_var 2, template_var 0),
        template_inequation (less_than, template_hole 8, template_var 2)],
       template_predicate (template_app (template_hole 7, t_empty))))]
