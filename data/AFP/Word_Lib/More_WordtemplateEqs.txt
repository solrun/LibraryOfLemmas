   [("More_Word.of_int_sint", "word_of_int (sint ?a) = ?a",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("More_Word.of_int_uint", "word_of_int (uint ?x) = ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("More_Word.div_of_0_id", "0 div ?n = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("More_Word.word_div_1", "?n div 1 = ?n",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("More_Word.div_by_0_word", "?x div 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("More_Word.word_mod_by_0", "?k mod 0 = ?k",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("More_Word.test_bit_1", "bit 1 ?n = (?n = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 0)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("More_Word.NOT_eq", "not ?x = - ?x - 1",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("More_Word.word_and_full_mask_simp", "and ?x (mask LENGTH(?'a)) = ?x",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))),
       template_var 0)),
    ("More_Word.lt1_neq0", "(1 <= ?x) = (?x ~= 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 0)
            )],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("More_Word.unat_1_0", "(1 <= ?x) = (0 < unat ?x)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3), template_var 0),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("More_Word.word_le_not_less", "(?b <= ?a) = (~ ?a < ?b)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("More_Word.word_not_le", "(~ ?x <= ?y) = (?y < ?x)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("More_Word.sint_0", "(sint ?x = 0) = (?x = 0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("More_Word.and_and_not", "and (and ?a ?b) (not ?b) = 0",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("More_Word.AND_twice", "and (and ?w ?m) ?m = and ?w ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("More_Word.unat_mask_eq", "unat (mask ?n) = mask (min LENGTH(?'a) ?n)",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           template_var 0)))),
    ("More_Word.gt0_iff_gem1", "(0 < ?x) = (?x - 1 < ?x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2), template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)),
         template_var 0))),
    ("More_Word.nth_minus1", "bit (- 1) ?n = (?n < LENGTH(?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app (template_hole 4, template_hole 3)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)))),
    ("More_Word.max_word_less_eq_iff", "(- 1 <= ?w) = (?w = - 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_hole 1)),
              template_var 0)
            )],
       template_equation
        (template_var 0, template_app (template_hole 2, template_hole 1)))),
    ("More_Word.word_minus_one_le", "(- 1 <= ?x) = (?x = - 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_hole 1)),
              template_var 0)
            )],
       template_equation
        (template_var 0, template_app (template_hole 2, template_hole 1)))),
    ("More_Word.test_bit_eq_iff", "(bit ?u = bit ?v) = (?u = ?v)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("More_Word.unat_eq_1", "(unat ?x = Suc 0) = (?x = 1)",
     template_bimplication
      (template_equation
        (template_app (template_hole 4, template_var 0),
         template_app (template_hole 3, template_hole 2)),
       template_equation (template_var 0, template_hole 0))),
    ("More_Word.word_unat_Rep_inject1", "(unat ?x = unat 1) = (?x = 1)",
     template_bimplication
      (template_equation
        (template_app (template_hole 4, template_var 0),
         template_app (template_hole 3, template_hole 2)),
       template_equation (template_var 0, template_hole 0))),
    ("More_Word.map_nth_0",
     "map (bit 0) ?xs = replicate (length ?xs) False",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app (template_hole 4, template_hole 3)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("More_Word.ucast_ucast_mask",
     "ucast (ucast ?x) = and ?x (mask LENGTH(?'a))",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("More_Word.NOT_mask_AND_mask",
     "and (and ?w (mask ?n)) (not (mask ?n)) = (0::?'a)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app (template_hole 2, template_var 0))),
         template_app
          (template_hole 1,
           template_app (template_hole 2, template_var 0))),
       template_hole 0)),
    ("More_Word.less_eq_mask_iff_take_bit_eq_self",
     "(?w <= mask ?n) = (take_bit ?n ?w = ?w)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("More_Word.sint_minus1", "(sint ?x = - 1) = (?x = - 1)",
     template_bimplication
      (template_equation
        (template_app (template_hole 5, template_var 0),
         template_app (template_hole 4, template_hole 3)),
       template_equation
        (template_var 0, template_app (template_hole 1, template_hole 0)))),
    ("More_Word.overflow_plus_one_self", "(1 + ?p <= ?p) = (?p = - 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_var 0)),
              template_var 0)
            )],
       template_equation
        (template_var 0, template_app (template_hole 0, template_hole 2)))),
    ("More_Word.plus_1_less", "(?x + 1 <= ?x) = (?x = - 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_hole 2)),
              template_var 0)
            )],
       template_equation
        (template_var 0, template_app (template_hole 0, template_hole 2)))),
    ("More_Word.mask_2pm1", "mask ?n = 2 ^ ?n - 1",
     template_equation
      (template_app (template_hole 6, template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1))),
             template_var 0)),
         template_hole 0))),
    ("More_Word.NOT_mask", "not (mask ?n) = - (2 ^ ?n)",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("More_Word.mask_plus_1", "mask ?n + 1 = 2 ^ ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 0)),
         template_hole 4),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0))),
         template_var 0))),
    ("More_Word.mask_and_mask",
     "and (mask ?a) (mask ?b) = mask (min ?a ?b)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("More_Word.mask_AND_NOT_mask",
     "and (and ?w (not (mask ?n))) (mask ?n) = 0",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)))),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("More_Word.word_plus_and_or_coroll2",
     "and ?x ?w + and ?x (not ?w) = ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))),
       template_var 1)),
    ("More_Word.word_and_1", "and ?n 1 = (if bit ?n 0 then 1 else 0)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 0), template_hole 4),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)),
           template_hole 4),
         template_hole 0))),
    ("More_Word.ucast_or_distrib",
     "ucast (or ?x ?y) = or (ucast ?x) (ucast ?y)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("More_Word.extra_sle_sless_unfolds",
     "(1 \<le>s numeral ?n) = (sint 1 <= sint (numeral ?n))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app (template_hole 0, template_hole 3)),
         template_app
          (template_hole 0,
           template_app (template_hole 2, template_var 0))))),
    ("More_Word.extra_sle_sless_unfolds",
     "(0 \<le>s numeral ?n) = (sint 0 <= sint (numeral ?n))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app (template_hole 0, template_hole 3)),
         template_app
          (template_hole 0,
           template_app (template_hole 2, template_var 0))))),
    ("More_Word.extra_sle_sless_unfolds",
     "(numeral ?n \<le>s 1) = (sint (numeral ?n) <= sint 1)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 0))),
         template_app (template_hole 0, template_hole 2)))),
    ("More_Word.extra_sle_sless_unfolds",
     "(numeral ?n \<le>s 0) = (sint (numeral ?n) <= sint 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 0))),
         template_app (template_hole 0, template_hole 2)))),
    ("More_Word.extra_sle_sless_unfolds",
     "(1 <s numeral ?n) = (sint 1 < sint (numeral ?n))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app (template_hole 0, template_hole 3)),
         template_app
          (template_hole 0,
           template_app (template_hole 2, template_var 0))))),
    ("More_Word.extra_sle_sless_unfolds",
     "(0 <s numeral ?n) = (sint 0 < sint (numeral ?n))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app (template_hole 0, template_hole 3)),
         template_app
          (template_hole 0,
           template_app (template_hole 2, template_var 0))))),
    ("More_Word.extra_sle_sless_unfolds",
     "(numeral ?n <s 1) = (sint (numeral ?n) < sint 1)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 0))),
         template_app (template_hole 0, template_hole 2)))),
    ("More_Word.extra_sle_sless_unfolds",
     "(numeral ?n <s 0) = (sint (numeral ?n) < sint 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 0))),
         template_app (template_hole 0, template_hole 2)))),
    ("More_Word.and_mask_eq_iff_le_mask",
     "(and ?w (mask ?n) = ?w) = (?w <= mask ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, template_var 0))),
         template_var 1),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("More_Word.odd_iff_lsb", "odd (unat ?x) = bit ?x 0",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3))),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("More_Word.p2_eq_1", "(2 ^ ?n = 1) = (?n = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3))),
           template_var 0),
         template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("More_Word.ucast_and_mask",
     "ucast (and ?x (mask ?n)) = and (ucast ?x) (mask ?n)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 4, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("More_Word.test_bit_1'", "bit 1 ?n = (0 < LENGTH(?'a) & ?n = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 0)
            )],
       template_dunno)),
    ("More_Word.mask_eq_0_eq_x", "(and ?x ?w = 0) = (and ?x (not ?w) = ?x)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 0, template_var 0)),
         template_var 1))),
    ("More_Word.mask_eq_x_eq_0", "(and ?x ?w = ?x) = (and ?x (not ?w) = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_var 1),
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("More_Word.nth_w2p_same", "bit (2 ^ ?n) ?n = (?n < LENGTH(?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app (template_hole 4, template_hole 3))),
             template_var 0)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)))),
    ("More_Word.and_mask_0_iff_le_mask",
     "(and ?w (not (mask ?n)) = 0) = (?w <= mask ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)))),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("More_Word.p2_eq_0", "(2 ^ ?n = 0) = (LENGTH(?'a) <= ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app (template_hole 5, template_hole 4))),
             template_var 0)),
         template_hole 3),
       template_app
        (template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0)),
         template_var 0))),
    ("More_Word.p2_gt_0", "(0 < 2 ^ ?n) = (?n < LENGTH(?'a))",
     template_equation
      (template_app
        (template_app (template_hole 8, template_hole 7),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3))),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)))),
    ("More_Word.test_bit_conj_lt",
     "(bit ?x ?m & ?m < LENGTH(?'a)) = bit ?x ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_hole 0))),
       template_app
        (template_app (template_hole 3, template_var 1), template_var 0))),
    ("More_Word.mask_out_sub_mask",
     "and ?x (not (mask ?n)) = ?x - and ?x (mask ?n)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 1, template_var 0))))),
    ("More_Word.word_unat_power", "2 ^ ?n = word_of_nat (2 ^ ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_hole 3))),
         template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app (template_hole 4, template_hole 3))),
           template_var 0)))),
    ("More_Word.subtract_mask",
     "?p - and ?p (mask ?n) = and ?p (not (mask ?n))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_hole 0,
           template_app (template_hole 1, template_var 0))))),
    ("More_Word.subtract_mask",
     "?p - and ?p (not (mask ?n)) = and ?p (mask ?n)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("More_Word.mask_or_not_mask",
     "or (and ?x (mask ?n)) (and ?x (not (mask ?n))) = ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 0)))),
       template_var 1)),
    ("More_Word.AND_NOT_mask_plus_AND_mask_eq",
     "and ?w (not (mask ?n)) + and ?w (mask ?n) = ?w",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 0, template_var 0))),
       template_var 1)),
    ("More_Word.unat_ucast",
     "unat (ucast ?x) = unat ?x mod 2 ^ LENGTH(?'a)",
     template_equation
      (template_app
        (template_hole 9, template_app (template_hole 8, template_var 0)),
       template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 0)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))),
           template_app (template_hole 1, template_hole 0))))),
    ("More_Word.test_bit_bin'",
     "bit ?w ?n = (?n < size ?w & bit (uint ?w) ?n)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app (template_hole 2, template_var 1))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("More_Word.test_bit_bin",
     "bit ?w ?n = (?n < LENGTH(?'a) & bit (uint ?w) ?n)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 0),
             template_app (template_hole 3, template_hole 2))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("More_Word.bang_eq", "(?x = ?y) = (ALL n. bit ?x n = bit ?y n)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app (template_hole 1, t_empty))),
    ("More_Word.le_m1_iff_lt", "(0 < ?x) = ((?y <= ?x - 1) = (?y < ?x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_var 1)))),
    ("More_Word.test_bit_wi",
     "bit (word_of_int ?x) ?n = (?n < LENGTH(?'a) & bit ?x ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app (template_hole 2, template_hole 1))),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("More_Word.nth_ucast",
     "bit (ucast ?w) ?n = (bit ?w ?n & ?n < LENGTH(?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_hole 0))))),
    ("More_Word.word_and_nth",
     "bit (and ?x ?y) ?n = (bit ?x ?n & bit ?y ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("More_Word.word_or_nth", "bit (or ?x ?y) ?n = (bit ?x ?n | bit ?y ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("More_Word.word_or_zero", "(or ?a ?b = 0) = (?a = 0 & ?b = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_dunno)),
    ("More_Word.ucast_and_neg_mask",
     "ucast (and ?x (not (mask ?n))) = and (ucast ?x) (not (mask ?n))",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)))),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 6, template_var 1)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("More_Word.neg_mask_combine",
     "and (not (mask ?a)) (not (mask ?b)) = not (mask (max ?a ?b))",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("More_Word.or_not_mask_nop",
     "and (or ?x (not (mask ?n))) (mask ?n) = and ?x (mask ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("More_Word.unat_mask", "unat (mask ?n) = 2 ^ min ?n LENGTH(?'a) - 1",
     template_equation
      (template_app
        (template_hole 10, template_app (template_hole 9, template_var 0)),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app (template_hole 5, template_hole 4))),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app (template_hole 2, template_hole 1)))),
         template_hole 0))),
    ("More_Word.nth_is_and_neq_0", "bit ?x ?n = (and ?x (2 ^ ?n) ~= 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 5, template_var 1),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1))),
                 template_var 0)),
             template_hole 0)
           ))),
    ("More_Word.neg_test_bit",
     "bit (not ?x) ?n = (~ bit ?x ?n & ?n < LENGTH(?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 6, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_hole 0))))),
    ("More_Word.nth_mask",
     "bit (mask ?n) ?i = (?i < ?n & ?i < size (mask ?n))",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 1)))))),
    ("More_Word.neg_mask_test_bit",
     "bit (not (mask ?n)) ?m = (?n <= ?m & ?m < LENGTH(?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_hole 0))))),
    ("More_Word.word_xor_nth",
     "bit (xor ?x ?y) ?n = (bit ?x ?n ~= bit ?y ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))
           ))),
    ("More_Word.less_1_simp", "(?n - 1 < ?m) = (?n <= ?m & ?n ~= 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_hole 5)),
              template_var 0)
            )],
       template_dunno)),
    ("More_Word.mask_twice",
     "and (and ?x (mask ?n)) (mask ?m) = and ?x (mask (min ?m ?n))",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 1))),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("More_Word.add_mask_fold", "?x + 2 ^ ?n - 1 = ?x + mask ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 1),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2))),
               template_var 0))),
         template_hole 1),
       template_app
        (template_app (template_hole 6, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("More_Word.le_mask_high_bits",
     "(?w <= mask ?n) = (ALL i:{?n..<size ?w}. ~ bit ?w i)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1),
         template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app (template_hole 2, template_var 1))),
         t_empty))),
    ("More_Word.drop_bit_numeral_bit0_1",
     "drop_bit (Suc 0) (numeral ?k) =
      word_of_int (drop_bit (Suc 0) (take_bit LENGTH(?'a) (numeral ?k)))",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app (template_hole 8, template_hole 7)),
         template_app (template_hole 6, template_var 0)),
       template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 8, template_hole 7)),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1)),
             template_app (template_hole 0, template_var 0)))))),
    ("More_Word.nth_slice",
     "bit (slice ?n ?w) ?m = (bit ?w (?m + ?n) & ?m < LENGTH(?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 2))),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_hole 0))))),
    ("More_Word.nth_w2p", "bit (2 ^ ?n) ?m = (?m = ?n & ?m < LENGTH(?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_hole 7,
                      template_app (template_hole 6, template_hole 5))),
                  template_var 1)),
              template_var 0)
            )],
       template_dunno)),
    ("More_Word.le_mask_iff_lt_2n",
     "(?n < LENGTH(?'a)) = ((?w <= mask ?n) = (?w < 2 ^ ?n))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app (template_hole 8, template_hole 7))
            )],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 0),
           template_app (template_hole 5, template_var 1)),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 1))))),
    ("More_Word.test_bit_2p",
     "bit (word_of_int (2 ^ ?n)) ?m = (?m = ?n & ?m < LENGTH(?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_hole 9,
                  template_app
                   (template_app
                     (template_hole 8,
                      template_app
                       (template_hole 7,
                        template_app (template_hole 6, template_hole 5))),
                    template_var 1))),
              template_var 0)
            )],
       template_dunno)),
    ("More_Word.neg_mask_twice",
     "and ?x (and (not (mask ?n)) (not (mask ?m))) =
      and ?x (not (mask (max ?n ?m)))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1))),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)))),
       template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("More_Word.mask_lower_twice2",
     "and (and ?a (not (mask ?n))) (not (mask ?m)) =
      and ?a (not (mask (max ?n ?m)))",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("More_Word.and_not_mask_twice",
     "and (and ?w (not (mask ?n))) (not (mask ?m)) =
      and ?w (not (mask (max ?m ?n)))",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))))),
    ("More_Word.bit_twiddle_max",
     "xor ?x (and (xor ?x ?y) (if ?x < ?y then - 1 else 0)) = max ?x ?y",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 7, template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_var 0)),
               template_app (template_hole 3, template_hole 2)),
             template_hole 1))),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("More_Word.bit_twiddle_min",
     "xor ?y (and (xor ?x ?y) (if ?x < ?y then - 1 else 0)) = min ?x ?y",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 7, template_var 0),
               template_var 1)),
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_var 1)),
               template_app (template_hole 3, template_hole 2)),
             template_hole 1))),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("More_Word.word_eq_iff",
     "(?x = ?y) = (ALL n<LENGTH(?'a). bit ?x n = bit ?y n)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app (template_hole 5, t_empty))),
    ("More_Word.take_bit_word_eq_self_iff",
     "(take_bit ?n ?w = ?w) = (LENGTH(?'a) <= ?n | ?w < 2 ^ ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 6, template_hole 5)),
             template_var 1)),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 1))))),
    ("More_Word.power_2_ge_iff",
     "(2 ^ ?n - 1 < 2 ^ ?n) = (?n < LENGTH(?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_hole 4))),
                 template_var 0)),
             template_hole 3)),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_hole 4))),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)))),
    ("More_Word.neg_mask_add_mask",
     "and ?x (not (mask ?n)) + (2 ^ ?n - 1) = or ?x (mask ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_var 1),
             template_app
              (template_hole 8,
               template_app (template_hole 7, template_var 0)))),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2))),
               template_var 0)),
           template_hole 1)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 7, template_var 0)))),
    ("More_Word.word_div_eq_1_iff",
     "(?n div ?m = 1) = (?m <= ?n & unat ?n < 2 * unat ?m)",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_var 1),
             template_var 0)),
         template_hole 8),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_app (template_hole 4, template_var 0)))))),
    ("More_Word.constraint_expand",
     "(?x : {y. ?lower <= y & y <= ?upper}) =
      (?lower <= ?x & ?x <= ?upper)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app (template_hole 2, t_empty)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("More_Word.neg_mask_is_div",
     "and ?w (not (mask ?n)) = ?w div 2 ^ ?n * 2 ^ ?n",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1),
         template_app
          (template_hole 7,
           template_app (template_hole 6, template_var 0))),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_hole 0))),
               template_var 0))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("More_Word.split_word_eq_on_mask",
     "(?x = ?y) =
      (and ?x ?m = and ?y ?m & and ?x (not ?m) = and ?y (not ?m))",
     template_bimplication
      (template_equation (template_var 2, template_var 1), template_dunno)),
    ("More_Word.nth_sint",
     "bit (sint ?w) ?n =
      (if ?n < LENGTH(?'a) - 1 then bit ?w ?n
       else bit ?w (LENGTH(?'a) - 1))",
     template_equation
      (template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 0),
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2)),
                 template_hole 1))),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2)),
             template_hole 1))))),
    ("More_Word.and_mask_arith",
     "and ?w (mask ?n) = ?w * 2 ^ (size ?w - ?n) div 2 ^ (size ?w - ?n)",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 1),
         template_app (template_hole 8, template_var 0)),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 1),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2))),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1)),
                 template_var 0)))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0))))),
    ("More_Word.test_bit_cat",
     "bit (word_cat ?a ?b) ?n =
      (?n < size (word_cat ?a ?b) &
       (if ?n < size ?b then bit ?b ?n else bit ?a (?n - size ?b)))",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 0),
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 8, template_var 2),
                 template_var 1)))),
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_app (template_hole 3, template_var 1))),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app (template_hole 3, template_var 1))))))),
    ("More_Word.less_2p_is_upper_bits_unset",
     "(?p < 2 ^ ?n) =
      (?n < LENGTH(?'a) & (ALL n'>=?n. n' < LENGTH(?'a) --> ~ bit ?p n'))",
     template_equation
      (template_app
        (template_app (template_hole 13, template_var 1),
         template_app
          (template_app
            (template_hole 12,
             template_app
              (template_hole 11,
               template_app (template_hole 10, template_hole 9))),
           template_var 0)),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 0),
             template_app (template_hole 6, template_hole 5))),
         template_app (template_hole 4, t_empty)))),
    ("More_Word.sofl_test",
     "(sint ?x + sint ?y = sint (?x + ?y)) =
      (drop_bit (size ?x - 1) (and (xor (?x + ?y) ?x) (xor (?x + ?y) ?y)) =
       0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 10,
             template_app (template_hole 9, template_var 1)),
           template_app (template_hole 9, template_var 0)),
         template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 1),
             template_var 0))),
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 1)),
               template_hole 3)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 8, template_var 1),
                     template_var 0)),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 8, template_var 1),
                   template_var 0)),
               template_var 0))),
         template_hole 0))),
    ("More_Word.test_bit_split_eq",
     "(word_split ?c = (?a, ?b)) =
      ((ALL n. bit ?b n = (n < size ?b & bit ?c n)) &
       (ALL m. bit ?a m = (m < size ?a & bit ?c (m + size ?b))))",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app (template_hole 10, template_var 2)),
         template_app
          (template_app (template_hole 9, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, t_empty)),
         template_app (template_hole 7, t_empty))))]
